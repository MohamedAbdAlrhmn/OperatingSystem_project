
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 20 19 00 	lgdtl  0x192018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 1f 19 f0       	mov    $0xf0191fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 1d 88 f0 01 	movl   $0x1,0xf0881d5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 1d 88 f0 01 	movl   $0x1,0xf0881d30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 1e 88 f0       	mov    $0xf0881ebc,%edx
f010006a:	b8 9c 11 88 f0       	mov    $0xf088119c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c 11 88 f0       	push   $0xf088119c
f010007e:	e8 04 14 03 00       	call   f0131487 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 1d 88 f0 ff 	movl   $0xffffffff,0xf0881d58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 48 9b 00 00       	call   f0109bf6 <env_init>
	idt_init();
f01000ae:	e8 00 b1 00 00       	call   f010b1b3 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 33 dc 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 d6 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f2 75 00 00       	call   f01076c9 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 c1 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 f2 fc 02 00       	call   f012fdea <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 1d 88 f0 61 	movl   $0x61,0xf0881d28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 1c 88 f0 59 	movl   $0x59,0xf0881cb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 9d df 00 00       	call   f010e0cb <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 bd dc 00 00       	call   f010ddf8 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 98 dc 00 00       	call   f010dde0 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 b8 dc 00 00       	call   f010de10 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 20 35 13 f0       	push   $0xf0133520
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 4c 35 13 f0       	push   $0xf013354c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 71 35 13 f0       	push   $0xf0133571
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 78 35 13 f0       	push   $0xf0133578
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 c0 35 13 f0       	push   $0xf01335c0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 08 36 13 f0       	push   $0xf0133608
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 c0 35 13 f0       	push   $0xf01335c0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 78 35 13 f0       	push   $0xf0133578
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 4d 36 13 f0       	push   $0xf013364d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 52 36 13 f0       	push   $0xf0133652
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 6b 36 13 f0       	push   $0xf013366b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 7c 98 00 00       	call   f0109aeb <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 6d 36 13 f0       	push   $0xf013366d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 52 36 13 f0       	push   $0xf0133652
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 6b 36 13 f0       	push   $0xf013366b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 52 36 13 f0       	push   $0xf0133652
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 6b 36 13 f0       	push   $0xf013366b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 82 36 13 f0       	push   $0xf0133682
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 6b 36 13 f0       	push   $0xf013366b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 11 88 f0       	mov    %eax,0xf08811c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 11 88 f0 b4 	movl   $0x3b4,0xf08811c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 11 88 f0 d4 	movl   $0x3d4,0xf08811c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 11 88 f0       	mov    %eax,0xf08811c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 11 88 f0    	mov    0xf08811c8,%edx
f0100771:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc 11 88 f0 	mov    0xf08811cc,%cx
f01007a4:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 11 88 f0    	mov    0xf08811c8,%ecx
f010080e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc 11 88 f0 	mov    %dx,0xf08811cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 11 88 f0       	mov    0xf08811c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 11 88 f0       	mov    0xf08811c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 5d 0c 03 00       	call   f01314b7 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 11 88 f0    	mov    0xf08811c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 11 88 f0    	mov    0xf08811c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 11 88 f0    	mov    0xf08811c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 21 19 f0    	mov    -0xfe6dee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 25 19 f0 	mov    -0xfe6dae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 9d 36 13 f0       	push   $0xf013369d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 13 88 f0    	mov    0xf08813e0,%edx
f0100b03:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 13 88 f0    	mov    %edx,0xf08813e0
f0100b1a:	8a 80 e0 11 88 f0    	mov    -0xf77ee20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 13 88 f0 00 	movl   $0x0,0xf08813e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 13 88 f0    	mov    0xf08813e0,%edx
f0100bf3:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 13 88 f0    	mov    %edx,0xf08813e0
f0100c0a:	8a 80 e0 11 88 f0    	mov    -0xf77ee20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 13 88 f0 00 	movl   $0x0,0xf08813e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 a9 36 13 f0       	push   $0xf01336a9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 e5 fe 02 00       	call   f0130beb <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 c6 36 13 f0       	push   $0xf01336c6
f0100d4c:	e8 42 03 03 00       	call   f0131093 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 cc 36 13 f0       	push   $0xf01336cc
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 3f 0b 03 00       	call   f01318cd <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 c9 05 03 00       	call   f01313a5 <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 a1 04 03 00       	call   f0131299 <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 bf 05 03 00       	call   f01313dd <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 25 19 f0       	add    $0xf0192548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 d1 36 13 f0       	push   $0xf01336d1
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 e7 36 13 f0       	push   $0xf01336e7
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c 1d 88 f0 00 	movl   $0x0,0xf0881d5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c 1d 88 f0 01 	movl   $0x1,0xf0881d5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c 1d 88 f0 02 	movl   $0x2,0xf0881d5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c 1d 88 f0 03 	movl   $0x3,0xf0881d5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c 1d 88 f0 04 	movl   $0x4,0xf0881d5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 1d 88 f0 01 	movl   $0x1,0xf0881d30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 1d 88 f0 02 	movl   $0x2,0xf0881d30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 1d 88 f0 03 	movl   $0x3,0xf0881d30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 1d 88 f0 04 	movl   $0x4,0xf0881d30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 ec 36 13 f0       	push   $0xf01336ec
f0101046:	6a 55                	push   $0x55
f0101048:	68 14 37 13 f0       	push   $0xf0133714
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 25 19 f0       	add    $0xf0192544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 25 19 f0       	add    $0xf0192540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 8e 45 13 f0       	push   $0xf013458e
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 97 45 13 f0       	push   $0xf0134597
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 2d 19 f0    	mov    0xf0192d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 2d 19 f0    	mov    0xf0192d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 ac 45 13 f0       	push   $0xf01345ac
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 c8 45 13 f0       	push   $0xf01345c8
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 e4 45 13 f0       	push   $0xf01345e4
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 1d 35 13 00       	mov    $0x13351d,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 1d 35 13 f0       	push   $0xf013351d
f0101172:	68 20 46 13 f0       	push   $0xf0134620
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c 11 88 00       	mov    $0x88119c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c 11 88 f0       	push   $0xf088119c
f010118d:	68 5c 46 13 f0       	push   $0xf013465c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc 1e 88 00       	mov    $0x881ebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc 1e 88 f0       	push   $0xf0881ebc
f01011a8:	68 a4 46 13 f0       	push   $0xf01346a4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc 1e 88 f0       	mov    $0xf0881ebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 e0 46 13 f0       	push   $0xf01346e0
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 0c 47 13 f0       	push   $0xf013470c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 2d 47 13 f0       	push   $0xf013472d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 0c 47 13 f0       	push   $0xf013470c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 2d 47 13 f0       	push   $0xf013472d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 0c 47 13 f0       	push   $0xf013470c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 2d 47 13 f0       	push   $0xf013472d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 0c 47 13 f0       	push   $0xf013470c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 2d 47 13 f0       	push   $0xf013472d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 0c 47 13 f0       	push   $0xf013470c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 2d 47 13 f0       	push   $0xf013472d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 0c 47 13 f0       	push   $0xf013470c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 2d 47 13 f0       	push   $0xf013472d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 0c 47 13 f0       	push   $0xf013470c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 2d 47 13 f0       	push   $0xf013472d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 26 03 03 00       	call   f01315f9 <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 d5 02 03 00       	call   f01315f9 <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 0c 47 13 f0       	push   $0xf013470c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 2d 47 13 f0       	push   $0xf013472d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 0c 47 13 f0       	push   $0xf013470c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 2d 47 13 f0       	push   $0xf013472d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 4f 02 03 00       	call   f01315f9 <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 0e 02 03 00       	call   f01315f9 <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 01 87 00 00       	call   f0109b0a <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 d8 01 03 00       	call   f01315f9 <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 44 47 13 f0       	push   $0xf0134744
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 52 01 03 00       	call   f01315f9 <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 32 01 03 00       	call   f01315f9 <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 b4 fd 02 00       	call   f0131299 <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 a5 00 03 00       	call   f01315f9 <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 6e 47 13 f0       	push   $0xf013476e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 59 00 03 00       	call   f01315f9 <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 4c 85 00 00       	call   f0109b0a <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 23 00 03 00       	call   f01315f9 <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 6e 47 13 f0       	push   $0xf013476e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 88 47 13 f0       	push   $0xf0134788
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 92 ff 02 00       	call   f01315f9 <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 72 ff 02 00       	call   f01315f9 <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 b2 47 13 f0       	push   $0xf01347b2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 b5 47 13 f0       	push   $0xf01347b5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 07 ff 02 00       	call   f01315f9 <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 fa 83 00 00       	call   f0109b0a <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 d1 fe 02 00       	call   f01315f9 <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 b6 fe 02 00       	call   f01315f9 <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 b7 47 13 f0       	push   $0xf01347b7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 1a fe 02 00       	call   f01315f9 <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 0d 83 00 00       	call   f0109b0a <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 d3 fd 02 00       	call   f01315f9 <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 15 62 00 00       	call   f0107a77 <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e2 60 00 00       	call   f0107950 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 c8 47 13 f0       	push   $0xf01347c8
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 de fc 02 00       	call   f01315f9 <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 d1 81 00 00       	call   f0109b0a <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 97 fc 02 00       	call   f01315f9 <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 f2 47 13 f0       	push   $0xf01347f2
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 0c 48 13 f0       	push   $0xf013480c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 50 48 13 f0       	push   $0xf0134850
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 1d 88 f0       	mov    0xf0881d74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 a8 48 13 f0       	push   $0xf01348a8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 4e c2 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 e4 48 13 f0       	push   $0xf01348e4
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 ce fa 02 00       	call   f01315f9 <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 b3 fa 02 00       	call   f01315f9 <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 98 fa 02 00       	call   f01315f9 <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 cd c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 67 fa 02 00       	call   f01315f9 <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 4a fa 02 00       	call   f01315f9 <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 2f fa 02 00       	call   f01315f9 <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 67 c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 a4 49 13 f0       	push   $0xf01349a4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 e7 f9 02 00       	call   f01315f9 <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 34 4a 13 f0       	push   $0xf0134a34
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 cc 4a 13 f0       	push   $0xf0134acc
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 dd c0 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 0c 4b 13 f0       	push   $0xf0134b0c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 64 4b 13 f0       	push   $0xf0134b64
f0101c98:	68 a9 4b 13 f0       	push   $0xf0134ba9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 2d 47 13 f0       	push   $0xf013472d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 64 4b 13 f0       	push   $0xf0134b64
f0101cb7:	68 a9 4b 13 f0       	push   $0xf0134ba9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 2d 47 13 f0       	push   $0xf013472d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 81 71 00 00       	call   f0108e63 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 be 4b 13 f0       	push   $0xf0134bbe
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 1d 88 f0 00 	movl   $0x0,0xf0881d74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 82 f8 02 00       	call   f01315f9 <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 be 4b 13 f0       	push   $0xf0134bbe
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 1d 88 f0 00 	movl   $0x0,0xf0881d74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 d4 4b 13 f0       	push   $0xf0134bd4
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 98 f7 02 00       	call   f01315f9 <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 40 be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 34 4c 13 f0       	push   $0xf0134c34
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 1a be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 78 4c 13 f0       	push   $0xf0134c78
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 b8 4c 13 f0       	push   $0xf0134cb8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 0d f7 02 00       	call   f01315f9 <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 2e be 00 00       	call   f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 0c 4d 13 f0       	push   $0xf0134d0c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 c9 bd 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 40 4d 13 f0       	push   $0xf0134d40
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 b7 bd 00 00       	call   f010dcfb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 a5 bd 00 00       	call   f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 94 4d 13 f0       	push   $0xf0134d94
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 61 f6 02 00       	call   f01315f9 <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 c8 4d 13 f0       	push   $0xf0134dc8
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 0d f6 02 00       	call   f01315f9 <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 da f5 02 00       	call   f01315f9 <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 00 4e 13 f0       	push   $0xf0134e00
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 2d 4e 13 f0       	push   $0xf0134e2d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 b5 47 13 f0       	push   $0xf01347b5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 34 4e 13 f0       	push   $0xf0134e34
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 2d 4e 13 f0       	push   $0xf0134e2d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 b5 47 13 f0       	push   $0xf01347b5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 68 4e 13 f0       	push   $0xf0134e68
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 a4 4e 13 f0       	push   $0xf0134ea4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 8d f4 02 00       	call   f01315f9 <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 9e e3 02 00       	call   f013051f <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 cc 4e 13 f0       	push   $0xf0134ecc
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 f4 4e 13 f0       	push   $0xf0134ef4
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 95 bb 00 00       	call   f010dd59 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 18 4f 13 f0       	push   $0xf0134f18
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 5c bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 40 4f 13 f0       	push   $0xf0134f40
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 39 bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 80 4f 13 f0       	push   $0xf0134f80
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 4c bb 00 00       	call   f010dd74 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 bc 4f 13 f0       	push   $0xf0134fbc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 4c bb 00 00       	call   f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 e0 4f 13 f0       	push   $0xf0134fe0
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 10 50 13 f0       	push   $0xf0135010
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 3c 50 13 f0       	push   $0xf013503c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 6c 50 13 f0       	push   $0xf013506c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 9c 50 13 f0       	push   $0xf013509c
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 cc 50 13 f0       	push   $0xf01350cc
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 fc 50 13 f0       	push   $0xf01350fc
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 28 51 13 f0       	push   $0xf0135128
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 54 51 13 f0       	push   $0xf0135154
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 80 51 13 f0       	push   $0xf0135180
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 ac 51 13 f0       	push   $0xf01351ac
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 d8 51 13 f0       	push   $0xf01351d8
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 d8 51 13 f0       	push   $0xf01351d8
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 0c 52 13 f0       	push   $0xf013520c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 3c 52 13 f0       	push   $0xf013523c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 6c 52 13 f0       	push   $0xf013526c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 a0 52 13 f0       	push   $0xf01352a0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 dc 52 13 f0       	push   $0xf01352dc
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 0c 53 13 f0       	push   $0xf013530c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 38 53 13 f0       	push   $0xf0135338
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 64 53 13 f0       	push   $0xf0135364
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 94 53 13 f0       	push   $0xf0135394
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 2c b9 00 00       	call   f010de06 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 c4 53 13 f0       	push   $0xf01353c4
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 e6 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 00 54 13 f0       	push   $0xf0135400
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 e7 b8 00 00       	call   f010de06 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 c4 53 13 f0       	push   $0xf01353c4
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 a1 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 24 54 13 f0       	push   $0xf0135424
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 8f b8 00 00       	call   f010ddf8 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 6a b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 44 54 13 f0       	push   $0xf0135444
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 58 b8 00 00       	call   f010ddf8 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 33 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 69 b8 00 00       	call   f010de1e <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 60 54 13 f0       	push   $0xf0135460
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 90 54 13 f0       	push   $0xf0135490
f01025d5:	e8 b9 ea 02 00       	call   f0131093 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 0c f0 02 00       	call   f01315f9 <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 17 b8 00 00       	call   f010de10 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 1d b8 00 00       	call   f010de1e <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 bc 54 13 f0       	push   $0xf01354bc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 e1 54 13 f0       	push   $0xf01354e1
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 d2 b7 00 00       	call   f010de06 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 fc 54 13 f0       	push   $0xf01354fc
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 9f b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 4c 55 13 f0       	push   $0xf013554c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 81 ef 02 00       	call   f01315f9 <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 8c b7 00 00       	call   f010de10 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 92 b7 00 00       	call   f010de1e <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 bc 54 13 f0       	push   $0xf01354bc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 57 b7 00 00       	call   f010de06 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 fc 54 13 f0       	push   $0xf01354fc
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 24 b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 4c 55 13 f0       	push   $0xf013554c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 3b b7 00 00       	call   f010de1e <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 92 55 13 f0       	push   $0xf0135592
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 d6 ee 02 00       	call   f01315f9 <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 51 50 01 00       	call   f0117788 <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 b0 55 13 f0       	push   $0xf01355b0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 a1 9e 01 00       	call   f011c611 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 2f b2 01 00       	call   f011d9b3 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 00 56 13 f0       	push   $0xf0135600
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 ce 4f 01 00       	call   f0117788 <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 14 79 01 00       	call   f011a0db <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 5d 8b 01 00       	call   f011b331 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 50 56 13 f0       	push   $0xf0135650
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 81 4f 01 00       	call   f0117788 <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 d2 61 01 00       	call   f01189e6 <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 24 c0 01 00       	call   f011e848 <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 a2 f7 01 00       	call   f0121fea <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 49 d6 01 00       	call   f011fe98 <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 85 11 02 00       	call   f01239e6 <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 43 26 02 00       	call   f0124eb6 <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 0e 3b 02 00       	call   f0126393 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 0a 95 02 00       	call   f012bdaa <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 aa b4 02 00       	call   f012dd5a <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 db 3a 01 00       	call   f011639d <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 af 44 01 00       	call   f0116d83 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 e7 3c 02 00       	call   f01265cd <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 c1 53 02 00       	call   f0127cb9 <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 30 61 02 00       	call   f0128a3a <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 0b 70 02 00       	call   f0129927 <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 bb ec 02 00       	call   f01315f9 <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 9e 56 13 f0       	push   $0xf013569e
f010296c:	50                   	push   %eax
f010296d:	e8 33 ea 02 00       	call   f01313a5 <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f01029b1:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 a8 56 13 f0       	push   $0xf01356a8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 e1 56 13 f0       	push   $0xf01356e1
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 2d 47 13 f0       	push   $0xf013472d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 93 e6 00 00       	call   f0111099 <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 f8 56 13 f0       	push   $0xf01356f8
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 30 57 13 f0       	push   $0xf0135730
f0102a46:	50                   	push   %eax
f0102a47:	e8 59 e9 02 00       	call   f01313a5 <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 eb bb 00 00       	call   f010e643 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 35 57 13 f0       	push   $0xf0135735
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 32 e9 02 00       	call   f01313a5 <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 d8 bc 00 00       	call   f010e757 <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 3b 57 13 f0       	push   $0xf013573b
f0102a94:	50                   	push   %eax
f0102a95:	e8 0b e9 02 00       	call   f01313a5 <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 6f c1 00 00       	call   f010ec15 <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 40 57 13 f0       	push   $0xf0135740
f0102abb:	50                   	push   %eax
f0102abc:	e8 e4 e8 02 00       	call   f01313a5 <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 43 57 13 f0       	push   $0xf0135743
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 c7 e8 02 00       	call   f01313a5 <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 86 c4 00 00       	call   f010ef70 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 46 57 13 f0       	push   $0xf0135746
f0102aff:	50                   	push   %eax
f0102b00:	e8 a0 e8 02 00       	call   f01313a5 <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 49 57 13 f0       	push   $0xf0135749
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 83 e8 02 00       	call   f01313a5 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 c0 c8 00 00       	call   f010f3ee <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 4c 57 13 f0       	push   $0xf013574c
f0102b43:	50                   	push   %eax
f0102b44:	e8 5c e8 02 00       	call   f01313a5 <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 4f 57 13 f0       	push   $0xf013574f
f0102b60:	50                   	push   %eax
f0102b61:	e8 3f e8 02 00       	call   f01313a5 <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 03 cf 00 00       	call   f010fa75 <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 52 57 13 f0       	push   $0xf0135752
f0102b84:	50                   	push   %eax
f0102b85:	e8 1b e8 02 00       	call   f01313a5 <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 58 57 13 f0       	push   $0xf0135758
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 fe e7 02 00       	call   f01313a5 <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 50 d7 00 00       	call   f0110303 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 60 57 13 f0       	push   $0xf0135760
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 99 57 13 f0       	push   $0xf0135799
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 af e7 02 00       	call   f01313a5 <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 2b ef 00 00       	call   f0111b2d <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 a2 57 13 f0       	push   $0xf01357a2
f0102c17:	50                   	push   %eax
f0102c18:	e8 88 e7 02 00       	call   f01313a5 <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 4f f9 00 00       	call   f0112578 <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 ac 57 13 f0       	push   $0xf01357ac
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 61 e7 02 00       	call   f01313a5 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 26 0a 01 00       	call   f0113676 <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 b2 57 13 f0       	push   $0xf01357b2
f0102c62:	50                   	push   %eax
f0102c63:	e8 3d e7 02 00       	call   f01313a5 <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 2a 14 01 00       	call   f011409e <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 bb 57 13 f0       	push   $0xf01357bb
f0102c86:	50                   	push   %eax
f0102c87:	e8 19 e7 02 00       	call   f01313a5 <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 b5 1c 01 00       	call   f011494d <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 ca 57 13 f0       	push   $0xf01357ca
f0102caa:	50                   	push   %eax
f0102cab:	e8 f5 e6 02 00       	call   f01313a5 <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 05 25 01 00       	call   f01151c1 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 dc 57 13 f0       	push   $0xf01357dc
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 12 58 13 f0       	push   $0xf0135812
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 a6 e6 02 00       	call   f01313a5 <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 13 e5 00 00       	call   f011121e <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 1a 58 13 f0       	push   $0xf013581a
f0102d20:	50                   	push   %eax
f0102d21:	e8 7f e6 02 00       	call   f01313a5 <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 4f e7 00 00       	call   f0111481 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 22 58 13 f0       	push   $0xf0135822
f0102d47:	50                   	push   %eax
f0102d48:	e8 58 e6 02 00       	call   f01313a5 <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 71 e7 00 00       	call   f01114ca <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 2a 58 13 f0       	push   $0xf013582a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 34 e6 02 00       	call   f01313a5 <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 91 e8 00 00       	call   f011160e <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 31 58 13 f0       	push   $0xf0135831
f0102d8f:	50                   	push   %eax
f0102d90:	e8 10 e6 02 00       	call   f01313a5 <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 c6 e9 00 00       	call   f0111767 <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 38 58 13 f0       	push   $0xf0135838
f0102db3:	50                   	push   %eax
f0102db4:	e8 ec e5 02 00       	call   f01313a5 <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 da e9 00 00       	call   f011179f <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 3c 58 13 f0       	push   $0xf013583c
f0102de2:	50                   	push   %eax
f0102de3:	e8 bd e5 02 00       	call   f01313a5 <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 44 58 13 f0       	push   $0xf0135844
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 3c 58 13 f0       	push   $0xf013583c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 80 e5 02 00       	call   f01313a5 <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 94 58 13 f0       	push   $0xf0135894
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 40 57 13 f0       	push   $0xf0135740
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 43 e5 02 00       	call   f01313a5 <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 43 57 13 f0       	push   $0xf0135743
f0102e79:	50                   	push   %eax
f0102e7a:	e8 26 e5 02 00       	call   f01313a5 <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 dc 52 13 f0       	push   $0xf01352dc
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 46 57 13 f0       	push   $0xf0135746
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 ef e4 02 00       	call   f01313a5 <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 49 57 13 f0       	push   $0xf0135749
f0102ecd:	50                   	push   %eax
f0102ece:	e8 d2 e4 02 00       	call   f01313a5 <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 0c 53 13 f0       	push   $0xf013530c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 4c 57 13 f0       	push   $0xf013574c
f0102f01:	50                   	push   %eax
f0102f02:	e8 9e e4 02 00       	call   f01313a5 <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 4f 57 13 f0       	push   $0xf013574f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 81 e4 02 00       	call   f01313a5 <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 38 53 13 f0       	push   $0xf0135338
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 3c 58 13 f0       	push   $0xf013583c
f0102f50:	50                   	push   %eax
f0102f51:	e8 4f e4 02 00       	call   f01313a5 <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 83 e6 02 00       	call   f01315f9 <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 b0 55 13 f0       	push   $0xf01355b0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 d8 47 01 00       	call   f0117788 <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 51 96 01 00       	call   f011c611 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 df a9 01 00       	call   f011d9b3 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 00 56 13 f0       	push   $0xf0135600
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 7b 47 01 00       	call   f0117788 <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 c1 70 01 00       	call   f011a0db <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 0a 83 01 00       	call   f011b331 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 50 56 13 f0       	push   $0xf0135650
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 2b 47 01 00       	call   f0117788 <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 7c 59 01 00       	call   f01189e6 <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 d8 58 13 f0       	push   $0xf01358d8
f0103084:	50                   	push   %eax
f0103085:	e8 1b e3 02 00       	call   f01313a5 <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 42 ef 01 00       	call   f0121fea <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 e9 cd 01 00       	call   f011fe98 <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 de 58 13 f0       	push   $0xf01358de
f01030c9:	50                   	push   %eax
f01030ca:	e8 d6 e2 02 00       	call   f01313a5 <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 0b 09 02 00       	call   f01239e6 <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 e8 58 13 f0       	push   $0xf01358e8
f01030f2:	50                   	push   %eax
f01030f3:	e8 ad e2 02 00       	call   f01313a5 <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 b2 1d 02 00       	call   f0124eb6 <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 f2 58 13 f0       	push   $0xf01358f2
f010311b:	50                   	push   %eax
f010311c:	e8 84 e2 02 00       	call   f01313a5 <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 24 ac 02 00       	call   f012dd5a <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 84 e8 02 00       	call   f01319ec <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 95 e9 02 00       	call   f0131b2c <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 fc 58 13 f0       	push   $0xf01358fc
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 13 59 13 f0       	push   $0xf0135913
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 1d 88 f0 00 	movl   $0x0,0xf0881db8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc 1d 88 f0 00 	movl   $0x0,0xf0881dbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 1d 88 f0 00 	movl   $0x0,0xf0881dc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 30 59 13 f0       	push   $0xf0135930
f010322d:	6a 59                	push   $0x59
f010322f:	68 13 59 13 f0       	push   $0xf0135913
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103261:	8b 1d dc 1c 88 f0    	mov    0xf0881cdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f0103293:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f01032ac:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc 1c 88 f0    	mov    0xf0881cdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 1d 88 f0       	mov    0xf0881db8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 53 59 13 f0       	push   $0xf0135953
f010334c:	6a 78                	push   $0x78
f010334e:	68 13 59 13 f0       	push   $0xf0135913
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 30 59 13 f0       	push   $0xf0135930
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 13 59 13 f0       	push   $0xf0135913
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f010344f:	8b 1d dc 1c 88 f0    	mov    0xf0881cdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f0103481:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f010349a:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 77 45 00 00       	call   f0107a77 <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 74 59 13 f0       	push   $0xf0135974
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 13 59 13 f0       	push   $0xf0135913
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 18 43 00 00       	call   f0107885 <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 fb 44 00 00       	call   f0107aa3 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 c2 de 02 00       	call   f0131487 <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 1d 88 f0       	mov    0xf0881d60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 a4 59 13 f0       	push   $0xf01359a4
f0103679:	68 ca 59 13 f0       	push   $0xf01359ca
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 13 59 13 f0       	push   $0xf0135913
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 a4 59 13 f0       	push   $0xf01359a4
f0103729:	68 ca 59 13 f0       	push   $0xf01359ca
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 13 59 13 f0       	push   $0xf0135913
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 a4 59 13 f0       	push   $0xf01359a4
f01037ec:	68 ca 59 13 f0       	push   $0xf01359ca
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 13 59 13 f0       	push   $0xf0135913
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 e0 59 13 f0       	push   $0xf01359e0
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 13 59 13 f0       	push   $0xf0135913
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 0c 5a 13 f0       	push   $0xf0135a0c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 13 59 13 f0       	push   $0xf0135913
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 58 5a 13 f0       	push   $0xf0135a58
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 13 59 13 f0       	push   $0xf0135913
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 d3 40 00 00       	call   f0107bad <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 b8 3e 00 00       	call   f0107a77 <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 20 3d 00 00       	call   f0107950 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 fb 3c 00 00       	call   f0107950 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 bd 3c 00 00       	call   f0107950 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 af 3b 00 00       	call   f0107885 <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 a5 3d 00 00       	call   f0107aa3 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 69 d7 02 00       	call   f0131487 <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 ff 3c 00 00       	call   f0107a77 <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 1d 88 f0       	mov    0xf0881db8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 1d 88 f0       	mov    0xf0881dc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 1d 88 f0       	mov    %eax,0xf0881dc0
f0103e01:	a1 c0 1d 88 f0       	mov    0xf0881dc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 49 3a 00 00       	call   f0107885 <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 3f 3c 00 00       	call   f0107aa3 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 03 d6 02 00       	call   f0131487 <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 a4 59 13 f0       	push   $0xf01359a4
f0103ea2:	68 ca 59 13 f0       	push   $0xf01359ca
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 13 59 13 f0       	push   $0xf0135913
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 c1 da 02 00       	call   f0131b2c <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 f8 5a 13 f0       	push   $0xf0135af8
f0104168:	6a 33                	push   $0x33
f010416a:	68 54 5b 13 f0       	push   $0xf0135b54
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 f8 5a 13 f0       	push   $0xf0135af8
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 54 5b 13 f0       	push   $0xf0135b54
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 68 5b 13 f0       	push   $0xf0135b68
f01044ae:	68 76 5b 13 f0       	push   $0xf0135b76
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 8b 5b 13 f0       	push   $0xf0135b8b
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 9c 5b 13 f0       	push   $0xf0135b9c
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 8b 5b 13 f0       	push   $0xf0135b8b
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 8b 5b 13 f0       	push   $0xf0135b8b
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 68 5b 13 f0       	push   $0xf0135b68
f01045f7:	68 76 5b 13 f0       	push   $0xf0135b76
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0104620:	6a 45                	push   $0x45
f0104622:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 e0 5b 13 f0       	push   $0xf0135be0
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 27 be 02 00       	call   f0130558 <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 1d 88 f0 01 	movl   $0x1,0xf0881d58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010475a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 d0 bd 02 00       	call   f0130595 <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 8b 52 00 00       	call   f0109a6c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 1d 88 f0 01 	movb   $0x1,0xf0881d80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 51 30 00 00       	call   f0107885 <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 1c 88 f0       	mov    %eax,0xf0881ce8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 38 30 00 00       	call   f0107885 <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c 1d 88 f0       	mov    %eax,0xf0881d2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c 1d 88 f0 00 	movl   $0x0,0xf0881d4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 14 5c 13 f0       	push   $0xf0135c14
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 8b 5b 13 f0       	push   $0xf0135b8b
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 1d 88 f0 00 	movl   $0x0,0xf0881d08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c 1d 88 f0       	push   $0xf0881d3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 1c 88 f0       	push   $0xf0881cf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 24 30 00 00       	call   f0107950 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 0a 30 00 00       	call   f0107950 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 bf 5b 13 f0       	push   $0xf0135bbf
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 8b 5b 13 f0       	push   $0xf0135b8b
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c 1d 88 f0       	push   $0xf0881d3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 1d 88 f0       	mov    %eax,0xf0881d40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c 1d 88 f0       	mov    %eax,0xf0881d3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 1d 88 f0       	mov    0xf0881d48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 1d 88 f0       	mov    %eax,0xf0881d48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 9b 92 00 00       	call   f010de06 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 60 63 00 00       	call   f010aeda <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 1c 88 f0       	push   $0xf0881cf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 1c 88 f0       	mov    %eax,0xf0881cf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 1c 88 f0       	mov    %eax,0xf0881cf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 1d 88 f0       	mov    0xf0881d00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 1d 88 f0       	mov    %eax,0xf0881d00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 44 5c 13 f0       	push   $0xf0135c44
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 66 5c 13 f0       	push   $0xf0135c66
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104cac:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 70 5c 13 f0       	push   $0xf0135c70
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 8c 5c 13 f0       	push   $0xf0135c8c
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 c0 5c 13 f0       	push   $0xf0135cc0
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 66 5c 13 f0       	push   $0xf0135c66
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 e8 5c 13 f0       	push   $0xf0135ce8
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 8c 5c 13 f0       	push   $0xf0135c8c
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 0c 5d 13 f0       	push   $0xf0135d0c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 66 5c 13 f0       	push   $0xf0135c66
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f0104e28:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 2e 5d 13 f0       	push   $0xf0135d2e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104e9f:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 4c 5d 13 f0       	push   $0xf0135d4c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 78 5d 13 f0       	push   $0xf0135d78
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 9a 4b 00 00       	call   f0109ac0 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104f59:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 91 5d 13 f0       	push   $0xf0135d91
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 8c 5c 13 f0       	push   $0xf0135c8c
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 ac 5d 13 f0       	push   $0xf0135dac
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 78 5d 13 f0       	push   $0xf0135d78
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 17 4a 00 00       	call   f0109ac0 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 e8 5c 13 f0       	push   $0xf0135ce8
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 8c 5c 13 f0       	push   $0xf0135c8c
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 e0 5d 13 f0       	push   $0xf0135de0
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 78 5d 13 f0       	push   $0xf0135d78
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 1f 49 00 00       	call   f0109ac0 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f01051d4:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 2e 5d 13 f0       	push   $0xf0135d2e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f010528d:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0105306:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 bf 5b 13 f0       	push   $0xf0135bbf
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 0c 5e 13 f0       	push   $0xf0135e0c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 14 44 00 00       	call   f0109ac0 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f01056e6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 34 5e 13 f0       	push   $0xf0135e34
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 bf 5b 13 f0       	push   $0xf0135bbf
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 8b 5b 13 f0       	push   $0xf0135b8b
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 97 42 00 00       	call   f0109ac0 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 60 5e 13 f0       	push   $0xf0135e60
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 b3 41 00 00       	call   f0109ac0 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f0105947:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 88 5e 13 f0       	push   $0xf0135e88
f0105991:	68 76 5b 13 f0       	push   $0xf0135b76
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 8b 5b 13 f0       	push   $0xf0135b8b
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 a8 5e 13 f0       	push   $0xf0135ea8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 ef 40 00 00       	call   f0109ac0 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 28 83 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 c6 21 00 00       	call   f0107c61 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b2 20 00 00       	call   f0107bad <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 df 21 00 00       	call   f0107d80 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 c5 21 00 00       	call   f0107da4 <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec 13 88 f0 01 	movl   $0x1,0xf08813ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 28 19 f0    	mov    %ax,0xf01928b0
	if (!didinit)
f0105d5d:	a1 ec 13 88 f0       	mov    0xf08813ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c 1d 88 f0       	mov    %eax,0xf0881d7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 b5 b6 02 00       	call   f0131487 <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 d4 5e 13 f0       	push   $0xf0135ed4
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 08 5f 13 f0       	push   $0xf0135f08
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac 1d 88 f0       	mov    %eax,0xf0881dac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 a0 18 f0 	movl   $0xf018a000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 d4 5e 13 f0       	push   $0xf0135ed4
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 08 5f 13 f0       	push   $0xf0135f08
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 1d 88 f0    	mov    0xf0881d10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 1d 88 f0       	mov    %eax,0xf0881d54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 aa b5 02 00       	call   f0131487 <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc 1c 88 f0       	mov    %eax,0xf0881cdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc 1c 88 f0       	mov    0xf0881cdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 75 b5 02 00       	call   f0131487 <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 e4 a0 02 00       	call   f013000b <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 28 5f 13 f0       	push   $0xf0135f28
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 13 88 f0       	mov    %eax,0xf08813f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 13 b5 02 00       	call   f0131487 <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 d4 5e 13 f0       	push   $0xf0135ed4
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 08 5f 13 f0       	push   $0xf0135f08
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c 1d 88 f0    	mov    0xf0881d7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 e5 a7 02 00       	call   f01307f2 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 1c 88 f0 19 	movl   $0x19,0xf0881cf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 1d 88 f0 bc 	movl   $0xf0881ebc,0xf0881d78
f0106035:	1e 88 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 1d 88 f0       	mov    %eax,0xf0881d78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 1d 88 f0    	mov    0xf0881d78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 1d 88 f0       	mov    %eax,0xf0881d78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 50 5f 13 f0       	push   $0xf0135f50
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 08 5f 13 f0       	push   $0xf0135f08
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 d4 5e 13 f0       	push   $0xf0135ed4
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 08 5f 13 f0       	push   $0xf0135f08
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 1d 88 f0       	mov    %eax,0xf0881d10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 80 5f 13 f0       	push   $0xf0135f80
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 a1 5f 13 f0       	push   $0xf0135fa1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 28 19 f0 	lgdtl  0xf01928f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 d4 5e 13 f0       	push   $0xf0135ed4
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 08 5f 13 f0       	push   $0xf0135f08
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 d4 5e 13 f0       	push   $0xf0135ed4
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 08 5f 13 f0       	push   $0xf0135f08
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 c0 5f 13 f0       	push   $0xf0135fc0
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 e5 5f 13 f0       	push   $0xf0135fe5
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 1d 88 f0 00 	movl   $0x0,0xf0881d18
f0106531:	00 00 00 
f0106534:	c7 05 1c 1d 88 f0 00 	movl   $0x0,0xf0881d1c
f010653b:	00 00 00 
f010653e:	c7 05 24 1d 88 f0 00 	movl   $0x0,0xf0881d24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 1c 88 f0 00 	movl   $0x0,0xf0881cb8
f010654f:	00 00 00 
f0106552:	c7 05 bc 1c 88 f0 00 	movl   $0x0,0xf0881cbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 1c 88 f0 00 	movl   $0x0,0xf0881cc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 1d 88 f0 00 	movl   $0xf0001000,0xf0881d60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 1d 88 f0 00 	movl   $0xf0002000,0xf0881d84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 1d 88 f0    	mov    0xf0881d60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 00 60 13 f0       	push   $0xf0136000
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 23 60 13 f0       	push   $0xf0136023
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106677:	8b 1d 54 1d 88 f0    	mov    0xf0881d54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f01066a9:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f01066c2:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 40 60 13 f0       	push   $0xf0136040
f0106752:	6a 64                	push   $0x64
f0106754:	68 23 60 13 f0       	push   $0xf0136023
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 00 60 13 f0       	push   $0xf0136000
f0106814:	6a 70                	push   $0x70
f0106816:	68 23 60 13 f0       	push   $0xf0136023
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106848:	8b 1d 54 1d 88 f0    	mov    0xf0881d54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f010687a:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f0106893:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 9b ab 02 00       	call   f0131487 <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 74 60 13 f0       	push   $0xf0136074
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 23 60 13 f0       	push   $0xf0136023
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 c1 60 13 f0       	push   $0xf01360c1
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 23 60 13 f0       	push   $0xf0136023
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d0 12 00 00       	call   f0107cbc <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 00 60 13 f0       	push   $0xf0136000
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 23 60 13 f0       	push   $0xf0136023
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 1d 88 f0       	mov    0xf0881d18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 85 0f 00 00       	call   f0107a77 <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 e0 60 13 f0       	push   $0xf01360e0
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 23 60 13 f0       	push   $0xf0136023
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 43 5b 00 00       	call   f010c6af <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 d7 0e 00 00       	call   f0107a77 <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 e0 60 13 f0       	push   $0xf01360e0
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 23 60 13 f0       	push   $0xf0136023
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 6a 0c 00 00       	call   f0107885 <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 0f 61 13 f0       	push   $0xf013610f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 23 60 13 f0       	push   $0xf0136023
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 46 0e 00 00       	call   f0107aa3 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 10 a8 02 00       	call   f0131487 <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 e0 60 13 f0       	push   $0xf01360e0
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 23 60 13 f0       	push   $0xf0136023
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 58 a7 02 00       	call   f0131487 <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 2c 61 13 f0       	push   $0xf013612c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 35 0b 00 00       	call   f0107a77 <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 e0 60 13 f0       	push   $0xf01360e0
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 23 60 13 f0       	push   $0xf0136023
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 1d 88 f0       	mov    0xf0881d18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 1d 88 f0       	mov    0xf0881d20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 1d 88 f0       	mov    %eax,0xf0881d20
f0107034:	a1 20 1d 88 f0       	mov    0xf0881d20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 1c 88 f0       	mov    0xf0881cb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 1c 88 f0       	mov    %eax,0xf0881cc0
f010706f:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 1d 88 f0       	mov    %eax,0xf0881d28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 5f 07 00 00       	call   f0107885 <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec 1c 88 f0       	mov    %eax,0xf0881cec
	if (shares == NULL)
f010712e:	a1 ec 1c 88 f0       	mov    0xf0881cec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 50 61 13 f0       	push   $0xf0136150
f010713f:	6a 21                	push   $0x21
f0107141:	68 94 61 13 f0       	push   $0xf0136194
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 0c a3 02 00       	call   f0131487 <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 ec a1 02 00       	call   f0131487 <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 85 a0 02 00       	call   f01313a5 <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a0 05 00 00       	call   f0107950 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 ad a0 02 00       	call   f0131487 <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 70 04 00 00       	call   f0107885 <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 b5 61 13 f0       	push   $0xf01361b5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 94 61 13 f0       	push   $0xf0136194
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 54 05 00 00       	call   f0107a77 <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 21 04 00 00       	call   f0107950 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	83 ec 18             	sub    $0x18,%esp
f01075a2:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a5:	88 45 f4             	mov    %al,-0xc(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f01075a8:	83 ec 04             	sub    $0x4,%esp
f01075ab:	68 d4 61 13 f0       	push   $0xf01361d4
f01075b0:	68 10 01 00 00       	push   $0x110
f01075b5:	68 94 61 13 f0       	push   $0xf0136194
f01075ba:	e8 46 8c ff ff       	call   f0100205 <_panic>

f01075bf <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01075bf:	55                   	push   %ebp
f01075c0:	89 e5                	mov    %esp,%ebp
f01075c2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f01075c5:	83 ec 04             	sub    $0x4,%esp
f01075c8:	68 08 62 13 f0       	push   $0xf0136208
f01075cd:	68 29 01 00 00       	push   $0x129
f01075d2:	68 94 61 13 f0       	push   $0xf0136194
f01075d7:	e8 29 8c ff ff       	call   f0100205 <_panic>

f01075dc <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01075dc:	55                   	push   %ebp
f01075dd:	89 e5                	mov    %esp,%ebp
f01075df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01075e2:	83 ec 04             	sub    $0x4,%esp
f01075e5:	68 38 62 13 f0       	push   $0xf0136238
f01075ea:	68 4b 01 00 00       	push   $0x14b
f01075ef:	68 94 61 13 f0       	push   $0xf0136194
f01075f4:	e8 0c 8c ff ff       	call   f0100205 <_panic>

f01075f9 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01075f9:	55                   	push   %ebp
f01075fa:	89 e5                	mov    %esp,%ebp
f01075fc:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0107601:	83 f8 01             	cmp    $0x1,%eax
f0107604:	75 04                	jne    f010760a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107606:	b0 01                	mov    $0x1,%al
f0107608:	eb 02                	jmp    f010760c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010760a:	b0 00                	mov    $0x0,%al
f010760c:	5d                   	pop    %ebp
f010760d:	c3                   	ret    

f010760e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010760e:	55                   	push   %ebp
f010760f:	89 e5                	mov    %esp,%ebp
f0107611:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0107616:	83 f8 02             	cmp    $0x2,%eax
f0107619:	75 04                	jne    f010761f <isKHeapPlacementStrategyBESTFIT+0x11>
f010761b:	b0 01                	mov    $0x1,%al
f010761d:	eb 02                	jmp    f0107621 <isKHeapPlacementStrategyBESTFIT+0x13>
f010761f:	b0 00                	mov    $0x0,%al
f0107621:	5d                   	pop    %ebp
f0107622:	c3                   	ret    

f0107623 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107623:	55                   	push   %ebp
f0107624:	89 e5                	mov    %esp,%ebp
f0107626:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f010762b:	83 f8 03             	cmp    $0x3,%eax
f010762e:	75 04                	jne    f0107634 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107630:	b0 01                	mov    $0x1,%al
f0107632:	eb 02                	jmp    f0107636 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107634:	b0 00                	mov    $0x0,%al
f0107636:	5d                   	pop    %ebp
f0107637:	c3                   	ret    

f0107638 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107638:	55                   	push   %ebp
f0107639:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763b:	8b 45 08             	mov    0x8(%ebp),%eax
f010763e:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0107644:	29 d0                	sub    %edx,%eax
f0107646:	c1 f8 03             	sar    $0x3,%eax
f0107649:	89 c2                	mov    %eax,%edx
f010764b:	89 d0                	mov    %edx,%eax
f010764d:	c1 e0 02             	shl    $0x2,%eax
f0107650:	01 d0                	add    %edx,%eax
f0107652:	c1 e0 02             	shl    $0x2,%eax
f0107655:	01 d0                	add    %edx,%eax
f0107657:	c1 e0 02             	shl    $0x2,%eax
f010765a:	01 d0                	add    %edx,%eax
f010765c:	89 c1                	mov    %eax,%ecx
f010765e:	c1 e1 08             	shl    $0x8,%ecx
f0107661:	01 c8                	add    %ecx,%eax
f0107663:	89 c1                	mov    %eax,%ecx
f0107665:	c1 e1 10             	shl    $0x10,%ecx
f0107668:	01 c8                	add    %ecx,%eax
f010766a:	01 c0                	add    %eax,%eax
f010766c:	01 d0                	add    %edx,%eax
}
f010766e:	5d                   	pop    %ebp
f010766f:	c3                   	ret    

f0107670 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107670:	55                   	push   %ebp
f0107671:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107673:	ff 75 08             	pushl  0x8(%ebp)
f0107676:	e8 bd ff ff ff       	call   f0107638 <to_frame_number>
f010767b:	83 c4 04             	add    $0x4,%esp
f010767e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107681:	c9                   	leave  
f0107682:	c3                   	ret    

f0107683 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107683:	55                   	push   %ebp
f0107684:	89 e5                	mov    %esp,%ebp
f0107686:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107689:	8b 45 08             	mov    0x8(%ebp),%eax
f010768c:	c1 e8 0c             	shr    $0xc,%eax
f010768f:	89 c2                	mov    %eax,%edx
f0107691:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0107696:	39 c2                	cmp    %eax,%edx
f0107698:	72 14                	jb     f01076ae <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010769a:	83 ec 04             	sub    $0x4,%esp
f010769d:	68 68 62 13 f0       	push   $0xf0136268
f01076a2:	6a 55                	push   $0x55
f01076a4:	68 8d 62 13 f0       	push   $0xf013628d
f01076a9:	e8 57 8b ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01076ae:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01076b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01076b7:	c1 e8 0c             	shr    $0xc,%eax
f01076ba:	89 c1                	mov    %eax,%ecx
f01076bc:	89 c8                	mov    %ecx,%eax
f01076be:	01 c0                	add    %eax,%eax
f01076c0:	01 c8                	add    %ecx,%eax
f01076c2:	c1 e0 03             	shl    $0x3,%eax
f01076c5:	01 d0                	add    %edx,%eax
}
f01076c7:	c9                   	leave  
f01076c8:	c3                   	ret    

f01076c9 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01076c9:	55                   	push   %ebp
f01076ca:	89 e5                	mov    %esp,%ebp
f01076cc:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01076cf:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f01076d6:	00 00 00 
f01076d9:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f01076e0:	00 00 00 
f01076e3:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f01076ea:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01076ed:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f01076f4:	00 00 00 
f01076f7:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f01076fe:	00 00 00 
f0107701:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f0107708:	00 00 00 
	uint32 arr_size = 0;
f010770b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107712:	c7 05 04 1d 88 f0 ff 	movl   $0x9fff,0xf0881d04
f0107719:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010771c:	c7 05 d8 1c 88 f0 00 	movl   $0xf6000000,0xf0881cd8
f0107723:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107726:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010772d:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f0107732:	c1 e0 04             	shl    $0x4,%eax
f0107735:	89 c2                	mov    %eax,%edx
f0107737:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010773a:	01 d0                	add    %edx,%eax
f010773c:	48                   	dec    %eax
f010773d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107740:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107743:	ba 00 00 00 00       	mov    $0x0,%edx
f0107748:	f7 75 f0             	divl   -0x10(%ebp)
f010774b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010774e:	29 d0                	sub    %edx,%eax
f0107750:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107753:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107758:	6a 03                	push   $0x3
f010775a:	ff 75 f4             	pushl  -0xc(%ebp)
f010775d:	68 00 00 00 f6       	push   $0xf6000000
f0107762:	50                   	push   %eax
f0107763:	e8 bd 13 00 00       	call   f0108b25 <allocate_chunk>
f0107768:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f010776b:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f0107770:	83 ec 0c             	sub    $0xc,%esp
f0107773:	50                   	push   %eax
f0107774:	e8 8a a6 02 00       	call   f0131e03 <initialize_MemBlocksList>
f0107779:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f010777c:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0107781:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107784:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107787:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010778d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107790:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107793:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107798:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010779b:	89 c2                	mov    %eax,%edx
f010779d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077a0:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01077a3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01077a7:	75 14                	jne    f01077bd <initialize_dyn_block_system+0xf4>
f01077a9:	83 ec 04             	sub    $0x4,%esp
f01077ac:	68 a7 62 13 f0       	push   $0xf01362a7
f01077b1:	6a 30                	push   $0x30
f01077b3:	68 c5 62 13 f0       	push   $0xf01362c5
f01077b8:	e8 48 8a ff ff       	call   f0100205 <_panic>
f01077bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	85 c0                	test   %eax,%eax
f01077c4:	74 10                	je     f01077d6 <initialize_dyn_block_system+0x10d>
f01077c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c9:	8b 00                	mov    (%eax),%eax
f01077cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077ce:	8b 52 04             	mov    0x4(%edx),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 0b                	jmp    f01077e1 <initialize_dyn_block_system+0x118>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	8b 40 04             	mov    0x4(%eax),%eax
f01077dc:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01077e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e4:	8b 40 04             	mov    0x4(%eax),%eax
f01077e7:	85 c0                	test   %eax,%eax
f01077e9:	74 0f                	je     f01077fa <initialize_dyn_block_system+0x131>
f01077eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077ee:	8b 40 04             	mov    0x4(%eax),%eax
f01077f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077f4:	8b 12                	mov    (%edx),%edx
f01077f6:	89 10                	mov    %edx,(%eax)
f01077f8:	eb 0a                	jmp    f0107804 <initialize_dyn_block_system+0x13b>
f01077fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077fd:	8b 00                	mov    (%eax),%eax
f01077ff:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0107804:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010780d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107810:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107817:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010781c:	48                   	dec    %eax
f010781d:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107822:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107826:	75 14                	jne    f010783c <initialize_dyn_block_system+0x173>
f0107828:	83 ec 04             	sub    $0x4,%esp
f010782b:	68 d8 62 13 f0       	push   $0xf01362d8
f0107830:	6a 32                	push   $0x32
f0107832:	68 c5 62 13 f0       	push   $0xf01362c5
f0107837:	e8 c9 89 ff ff       	call   f0100205 <_panic>
f010783c:	8b 15 64 1d 88 f0    	mov    0xf0881d64,%edx
f0107842:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107845:	89 10                	mov    %edx,(%eax)
f0107847:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010784a:	8b 00                	mov    (%eax),%eax
f010784c:	85 c0                	test   %eax,%eax
f010784e:	74 0d                	je     f010785d <initialize_dyn_block_system+0x194>
f0107850:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0107855:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107858:	89 50 04             	mov    %edx,0x4(%eax)
f010785b:	eb 08                	jmp    f0107865 <initialize_dyn_block_system+0x19c>
f010785d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107860:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0107865:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107868:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010786d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107870:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107877:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010787c:	40                   	inc    %eax
f010787d:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70

}
f0107882:	90                   	nop
f0107883:	c9                   	leave  
f0107884:	c3                   	ret    

f0107885 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107885:	55                   	push   %ebp
f0107886:	89 e5                	mov    %esp,%ebp
f0107888:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f010788b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107892:	8b 55 08             	mov    0x8(%ebp),%edx
f0107895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107898:	01 d0                	add    %edx,%eax
f010789a:	48                   	dec    %eax
f010789b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010789e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01078a6:	f7 75 f0             	divl   -0x10(%ebp)
f01078a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078ac:	29 d0                	sub    %edx,%eax
f01078ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f01078b1:	e8 43 fd ff ff       	call   f01075f9 <isKHeapPlacementStrategyFIRSTFIT>
f01078b6:	84 c0                	test   %al,%al
f01078b8:	74 13                	je     f01078cd <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f01078ba:	83 ec 0c             	sub    $0xc,%esp
f01078bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01078c0:	e8 00 a9 02 00       	call   f01321c5 <alloc_block_FF>
f01078c5:	83 c4 10             	add    $0x10,%esp
f01078c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078cb:	eb 36                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f01078cd:	e8 3c fd ff ff       	call   f010760e <isKHeapPlacementStrategyBESTFIT>
f01078d2:	84 c0                	test   %al,%al
f01078d4:	74 13                	je     f01078e9 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f01078d6:	83 ec 0c             	sub    $0xc,%esp
f01078d9:	ff 75 e8             	pushl  -0x18(%ebp)
f01078dc:	e8 b1 aa 02 00       	call   f0132392 <alloc_block_BF>
f01078e1:	83 c4 10             	add    $0x10,%esp
f01078e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078e7:	eb 1a                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01078e9:	e8 35 fd ff ff       	call   f0107623 <isKHeapPlacementStrategyNEXTFIT>
f01078ee:	84 c0                	test   %al,%al
f01078f0:	74 11                	je     f0107903 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f01078f2:	83 ec 0c             	sub    $0xc,%esp
f01078f5:	ff 75 e8             	pushl  -0x18(%ebp)
f01078f8:	e8 a6 ac 02 00       	call   f01325a3 <alloc_block_NF>
f01078fd:	83 c4 10             	add    $0x10,%esp
f0107900:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107903:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107907:	74 40                	je     f0107949 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010790c:	8b 50 08             	mov    0x8(%eax),%edx
f010790f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107914:	6a 03                	push   $0x3
f0107916:	ff 75 e8             	pushl  -0x18(%ebp)
f0107919:	52                   	push   %edx
f010791a:	50                   	push   %eax
f010791b:	e8 05 12 00 00       	call   f0108b25 <allocate_chunk>
f0107920:	83 c4 10             	add    $0x10,%esp
f0107923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010792a:	75 16                	jne    f0107942 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f010792c:	83 ec 0c             	sub    $0xc,%esp
f010792f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107932:	e8 01 a6 02 00       	call   f0131f38 <insert_sorted_allocList>
f0107937:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f010793a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010793d:	8b 40 08             	mov    0x8(%eax),%eax
f0107940:	eb 0c                	jmp    f010794e <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107942:	b8 00 00 00 00       	mov    $0x0,%eax
f0107947:	eb 05                	jmp    f010794e <kmalloc+0xc9>
	}
	return NULL;
f0107949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010794e:	c9                   	leave  
f010794f:	c3                   	ret    

f0107950 <kfree>:
void kfree(void* virtual_address)
{
f0107950:	55                   	push   %ebp
f0107951:	89 e5                	mov    %esp,%ebp
f0107953:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107956:	8b 45 08             	mov    0x8(%ebp),%eax
f0107959:	83 ec 08             	sub    $0x8,%esp
f010795c:	50                   	push   %eax
f010795d:	68 c8 1c 88 f0       	push   $0xf0881cc8
f0107962:	e8 79 a5 02 00       	call   f0131ee0 <find_block>
f0107967:	83 c4 10             	add    $0x10,%esp
f010796a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f010796d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107971:	0f 84 fd 00 00 00    	je     f0107a74 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107977:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010797b:	75 14                	jne    f0107991 <kfree+0x41>
f010797d:	83 ec 04             	sub    $0x4,%esp
f0107980:	68 a7 62 13 f0       	push   $0xf01362a7
f0107985:	6a 5a                	push   $0x5a
f0107987:	68 c5 62 13 f0       	push   $0xf01362c5
f010798c:	e8 74 88 ff ff       	call   f0100205 <_panic>
f0107991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107994:	8b 00                	mov    (%eax),%eax
f0107996:	85 c0                	test   %eax,%eax
f0107998:	74 10                	je     f01079aa <kfree+0x5a>
f010799a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010799d:	8b 00                	mov    (%eax),%eax
f010799f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079a2:	8b 52 04             	mov    0x4(%edx),%edx
f01079a5:	89 50 04             	mov    %edx,0x4(%eax)
f01079a8:	eb 0b                	jmp    f01079b5 <kfree+0x65>
f01079aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079ad:	8b 40 04             	mov    0x4(%eax),%eax
f01079b0:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f01079b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b8:	8b 40 04             	mov    0x4(%eax),%eax
f01079bb:	85 c0                	test   %eax,%eax
f01079bd:	74 0f                	je     f01079ce <kfree+0x7e>
f01079bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079c2:	8b 40 04             	mov    0x4(%eax),%eax
f01079c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079c8:	8b 12                	mov    (%edx),%edx
f01079ca:	89 10                	mov    %edx,(%eax)
f01079cc:	eb 0a                	jmp    f01079d8 <kfree+0x88>
f01079ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d1:	8b 00                	mov    (%eax),%eax
f01079d3:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f01079d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01079e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01079eb:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01079f0:	48                   	dec    %eax
f01079f1:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f01079f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f9:	8b 40 08             	mov    0x8(%eax),%eax
f01079fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a07:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107a0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a14:	8b 50 08             	mov    0x8(%eax),%edx
f0107a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a1a:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a1d:	01 c2                	add    %eax,%edx
f0107a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a22:	01 d0                	add    %edx,%eax
f0107a24:	48                   	dec    %eax
f0107a25:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107a28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a30:	f7 75 e4             	divl   -0x1c(%ebp)
f0107a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a36:	29 d0                	sub    %edx,%eax
f0107a38:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a41:	eb 1b                	jmp    f0107a5e <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107a43:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107a48:	83 ec 08             	sub    $0x8,%esp
f0107a4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a4e:	50                   	push   %eax
f0107a4f:	e8 22 f4 ff ff       	call   f0106e76 <unmap_frame>
f0107a54:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a57:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a61:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107a64:	72 dd                	jb     f0107a43 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107a66:	83 ec 0c             	sub    $0xc,%esp
f0107a69:	ff 75 f0             	pushl  -0x10(%ebp)
f0107a6c:	e8 ff b0 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f0107a71:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a74:	90                   	nop
f0107a75:	c9                   	leave  
f0107a76:	c3                   	ret    

f0107a77 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107a77:	55                   	push   %ebp
f0107a78:	89 e5                	mov    %esp,%ebp
f0107a7a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107a7d:	83 ec 0c             	sub    $0xc,%esp
f0107a80:	ff 75 08             	pushl  0x8(%ebp)
f0107a83:	e8 fb fb ff ff       	call   f0107683 <to_frame_info>
f0107a88:	83 c4 10             	add    $0x10,%esp
f0107a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107a8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a92:	74 08                	je     f0107a9c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a97:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a9a:	eb 05                	jmp    f0107aa1 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a9c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107aa1:	c9                   	leave  
f0107aa2:	c3                   	ret    

f0107aa3 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107aa3:	55                   	push   %ebp
f0107aa4:	89 e5                	mov    %esp,%ebp
f0107aa6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107aa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107ab0:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107ab5:	83 ec 04             	sub    $0x4,%esp
f0107ab8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107abb:	52                   	push   %edx
f0107abc:	ff 75 08             	pushl  0x8(%ebp)
f0107abf:	50                   	push   %eax
f0107ac0:	e8 41 f3 ff ff       	call   f0106e06 <get_frame_info>
f0107ac5:	83 c4 10             	add    $0x10,%esp
f0107ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107acb:	83 ec 0c             	sub    $0xc,%esp
f0107ace:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ad1:	e8 9a fb ff ff       	call   f0107670 <to_physical_address>
f0107ad6:	83 c4 10             	add    $0x10,%esp
f0107ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ae0:	74 05                	je     f0107ae7 <kheap_physical_address+0x44>
		return address_physical;
f0107ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ae5:	eb 05                	jmp    f0107aec <kheap_physical_address+0x49>
	return 0;
f0107ae7:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107aec:	c9                   	leave  
f0107aed:	c3                   	ret    

f0107aee <kfreeall>:


void kfreeall()
{
f0107aee:	55                   	push   %ebp
f0107aef:	89 e5                	mov    %esp,%ebp
f0107af1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107af4:	83 ec 04             	sub    $0x4,%esp
f0107af7:	68 fb 62 13 f0       	push   $0xf01362fb
f0107afc:	68 89 00 00 00       	push   $0x89
f0107b01:	68 c5 62 13 f0       	push   $0xf01362c5
f0107b06:	e8 fa 86 ff ff       	call   f0100205 <_panic>

f0107b0b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107b0b:	55                   	push   %ebp
f0107b0c:	89 e5                	mov    %esp,%ebp
f0107b0e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b11:	83 ec 04             	sub    $0x4,%esp
f0107b14:	68 fb 62 13 f0       	push   $0xf01362fb
f0107b19:	68 8f 00 00 00       	push   $0x8f
f0107b1e:	68 c5 62 13 f0       	push   $0xf01362c5
f0107b23:	e8 dd 86 ff ff       	call   f0100205 <_panic>

f0107b28 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107b28:	55                   	push   %ebp
f0107b29:	89 e5                	mov    %esp,%ebp
f0107b2b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b2e:	83 ec 04             	sub    $0x4,%esp
f0107b31:	68 fb 62 13 f0       	push   $0xf01362fb
f0107b36:	68 94 00 00 00       	push   $0x94
f0107b3b:	68 c5 62 13 f0       	push   $0xf01362c5
f0107b40:	e8 c0 86 ff ff       	call   f0100205 <_panic>

f0107b45 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107b45:	55                   	push   %ebp
f0107b46:	89 e5                	mov    %esp,%ebp
f0107b48:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107b4b:	83 ec 04             	sub    $0x4,%esp
f0107b4e:	68 0c 63 13 f0       	push   $0xf013630c
f0107b53:	68 ab 00 00 00       	push   $0xab
f0107b58:	68 c5 62 13 f0       	push   $0xf01362c5
f0107b5d:	e8 a3 86 ff ff       	call   f0100205 <_panic>

f0107b62 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107b62:	55                   	push   %ebp
f0107b63:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b68:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0107b6e:	29 d0                	sub    %edx,%eax
f0107b70:	c1 f8 03             	sar    $0x3,%eax
f0107b73:	89 c2                	mov    %eax,%edx
f0107b75:	89 d0                	mov    %edx,%eax
f0107b77:	c1 e0 02             	shl    $0x2,%eax
f0107b7a:	01 d0                	add    %edx,%eax
f0107b7c:	c1 e0 02             	shl    $0x2,%eax
f0107b7f:	01 d0                	add    %edx,%eax
f0107b81:	c1 e0 02             	shl    $0x2,%eax
f0107b84:	01 d0                	add    %edx,%eax
f0107b86:	89 c1                	mov    %eax,%ecx
f0107b88:	c1 e1 08             	shl    $0x8,%ecx
f0107b8b:	01 c8                	add    %ecx,%eax
f0107b8d:	89 c1                	mov    %eax,%ecx
f0107b8f:	c1 e1 10             	shl    $0x10,%ecx
f0107b92:	01 c8                	add    %ecx,%eax
f0107b94:	01 c0                	add    %eax,%eax
f0107b96:	01 d0                	add    %edx,%eax
}
f0107b98:	5d                   	pop    %ebp
f0107b99:	c3                   	ret    

f0107b9a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b9a:	55                   	push   %ebp
f0107b9b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b9d:	ff 75 08             	pushl  0x8(%ebp)
f0107ba0:	e8 bd ff ff ff       	call   f0107b62 <to_frame_number>
f0107ba5:	83 c4 04             	add    $0x4,%esp
f0107ba8:	c1 e0 0c             	shl    $0xc,%eax
}
f0107bab:	c9                   	leave  
f0107bac:	c3                   	ret    

f0107bad <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107bb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bba:	83 ec 04             	sub    $0x4,%esp
f0107bbd:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107bc0:	50                   	push   %eax
f0107bc1:	ff 75 0c             	pushl  0xc(%ebp)
f0107bc4:	ff 75 08             	pushl  0x8(%ebp)
f0107bc7:	e8 e5 ee ff ff       	call   f0106ab1 <get_page_table>
f0107bcc:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd2:	85 c0                	test   %eax,%eax
f0107bd4:	74 75                	je     f0107c4b <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bdc:	c1 ea 0c             	shr    $0xc,%edx
f0107bdf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107be5:	c1 e2 02             	shl    $0x2,%edx
f0107be8:	01 d0                	add    %edx,%eax
f0107bea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107bf0:	c1 e9 0c             	shr    $0xc,%ecx
f0107bf3:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107bf9:	c1 e1 02             	shl    $0x2,%ecx
f0107bfc:	01 ca                	add    %ecx,%edx
f0107bfe:	8b 12                	mov    (%edx),%edx
f0107c00:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107c03:	f7 d1                	not    %ecx
f0107c05:	21 ca                	and    %ecx,%edx
f0107c07:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c0f:	c1 ea 0c             	shr    $0xc,%edx
f0107c12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c18:	c1 e2 02             	shl    $0x2,%edx
f0107c1b:	01 c2                	add    %eax,%edx
f0107c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c23:	c1 e9 0c             	shr    $0xc,%ecx
f0107c26:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c2c:	c1 e1 02             	shl    $0x2,%ecx
f0107c2f:	01 c8                	add    %ecx,%eax
f0107c31:	8b 00                	mov    (%eax),%eax
f0107c33:	0b 45 10             	or     0x10(%ebp),%eax
f0107c36:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c3b:	83 ec 08             	sub    $0x8,%esp
f0107c3e:	50                   	push   %eax
f0107c3f:	6a 00                	push   $0x0
f0107c41:	e8 c8 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107c46:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c49:	eb 14                	jmp    f0107c5f <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c4b:	83 ec 04             	sub    $0x4,%esp
f0107c4e:	68 33 63 13 f0       	push   $0xf0136333
f0107c53:	6a 19                	push   $0x19
f0107c55:	68 50 63 13 f0       	push   $0xf0136350
f0107c5a:	e8 a6 85 ff ff       	call   f0100205 <_panic>
	}
}
f0107c5f:	c9                   	leave  
f0107c60:	c3                   	ret    

f0107c61 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107c61:	55                   	push   %ebp
f0107c62:	89 e5                	mov    %esp,%ebp
f0107c64:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107c67:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c6e:	83 ec 04             	sub    $0x4,%esp
f0107c71:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107c74:	50                   	push   %eax
f0107c75:	ff 75 0c             	pushl  0xc(%ebp)
f0107c78:	ff 75 08             	pushl  0x8(%ebp)
f0107c7b:	e8 31 ee ff ff       	call   f0106ab1 <get_page_table>
f0107c80:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c86:	85 c0                	test   %eax,%eax
f0107c88:	74 2b                	je     f0107cb5 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c90:	c1 ea 0c             	shr    $0xc,%edx
f0107c93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c99:	c1 e2 02             	shl    $0x2,%edx
f0107c9c:	01 d0                	add    %edx,%eax
f0107c9e:	8b 00                	mov    (%eax),%eax
f0107ca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107ca3:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cad:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107cb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb3:	eb 05                	jmp    f0107cba <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107cb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107cba:	c9                   	leave  
f0107cbb:	c3                   	ret    

f0107cbc <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107cbc:	55                   	push   %ebp
f0107cbd:	89 e5                	mov    %esp,%ebp
f0107cbf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107cc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107cc9:	83 ec 04             	sub    $0x4,%esp
f0107ccc:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ccf:	50                   	push   %eax
f0107cd0:	ff 75 0c             	pushl  0xc(%ebp)
f0107cd3:	ff 75 08             	pushl  0x8(%ebp)
f0107cd6:	e8 d6 ed ff ff       	call   f0106ab1 <get_page_table>
f0107cdb:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce1:	85 c0                	test   %eax,%eax
f0107ce3:	74 2d                	je     f0107d12 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ceb:	c1 ea 0c             	shr    $0xc,%edx
f0107cee:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cf4:	c1 e2 02             	shl    $0x2,%edx
f0107cf7:	01 d0                	add    %edx,%eax
f0107cf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107cff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d02:	83 ec 08             	sub    $0x8,%esp
f0107d05:	50                   	push   %eax
f0107d06:	6a 00                	push   $0x0
f0107d08:	e8 01 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107d0d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107d10:	eb 14                	jmp    f0107d26 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107d12:	83 ec 04             	sub    $0x4,%esp
f0107d15:	68 33 63 13 f0       	push   $0xf0136333
f0107d1a:	6a 42                	push   $0x42
f0107d1c:	68 50 63 13 f0       	push   $0xf0136350
f0107d21:	e8 df 84 ff ff       	call   f0100205 <_panic>
	}
}
f0107d26:	c9                   	leave  
f0107d27:	c3                   	ret    

f0107d28 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107d28:	55                   	push   %ebp
f0107d29:	89 e5                	mov    %esp,%ebp
f0107d2b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107d35:	83 ec 04             	sub    $0x4,%esp
f0107d38:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d3b:	50                   	push   %eax
f0107d3c:	ff 75 0c             	pushl  0xc(%ebp)
f0107d3f:	ff 75 08             	pushl  0x8(%ebp)
f0107d42:	e8 6a ed ff ff       	call   f0106ab1 <get_page_table>
f0107d47:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d4d:	85 c0                	test   %eax,%eax
f0107d4f:	74 28                	je     f0107d79 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107d51:	83 ec 04             	sub    $0x4,%esp
f0107d54:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d57:	50                   	push   %eax
f0107d58:	ff 75 0c             	pushl  0xc(%ebp)
f0107d5b:	ff 75 08             	pushl  0x8(%ebp)
f0107d5e:	e8 a3 f0 ff ff       	call   f0106e06 <get_frame_info>
f0107d63:	83 c4 10             	add    $0x10,%esp
f0107d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107d69:	83 ec 0c             	sub    $0xc,%esp
f0107d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d6f:	e8 26 fe ff ff       	call   f0107b9a <to_physical_address>
f0107d74:	83 c4 10             	add    $0x10,%esp
f0107d77:	eb 05                	jmp    f0107d7e <virtual_to_physical+0x56>
	}
	return -1;
f0107d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107d7e:	c9                   	leave  
f0107d7f:	c3                   	ret    

f0107d80 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107d80:	55                   	push   %ebp
f0107d81:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d86:	c1 e8 16             	shr    $0x16,%eax
f0107d89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d93:	01 d0                	add    %edx,%eax
f0107d95:	8b 00                	mov    (%eax),%eax
f0107d97:	83 e0 20             	and    $0x20,%eax
f0107d9a:	85 c0                	test   %eax,%eax
f0107d9c:	0f 95 c0             	setne  %al
f0107d9f:	0f b6 c0             	movzbl %al,%eax
}
f0107da2:	5d                   	pop    %ebp
f0107da3:	c3                   	ret    

f0107da4 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dad:	c1 e8 16             	shr    $0x16,%eax
f0107db0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dba:	01 d0                	add    %edx,%eax
f0107dbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dbf:	c1 ea 16             	shr    $0x16,%edx
f0107dc2:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107dc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107dcc:	01 ca                	add    %ecx,%edx
f0107dce:	8b 12                	mov    (%edx),%edx
f0107dd0:	83 e2 df             	and    $0xffffffdf,%edx
f0107dd3:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dd8:	83 ec 08             	sub    $0x8,%esp
f0107ddb:	50                   	push   %eax
f0107ddc:	6a 00                	push   $0x0
f0107dde:	e8 2b e7 ff ff       	call   f010650e <tlb_invalidate>
f0107de3:	83 c4 10             	add    $0x10,%esp
}
f0107de6:	90                   	nop
f0107de7:	c9                   	leave  
f0107de8:	c3                   	ret    

f0107de9 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107de9:	55                   	push   %ebp
f0107dea:	89 e5                	mov    %esp,%ebp
f0107dec:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df2:	c1 e8 16             	shr    $0x16,%eax
f0107df5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dff:	01 d0                	add    %edx,%eax
f0107e01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e07:	0f 20 d8             	mov    %cr3,%eax
f0107e0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e10:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e13:	90                   	nop
f0107e14:	c9                   	leave  
f0107e15:	c3                   	ret    

f0107e16 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e16:	55                   	push   %ebp
f0107e17:	89 e5                	mov    %esp,%ebp
f0107e19:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e23:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e2a:	eb 21                	jmp    f0107e4d <env_page_ws_get_size+0x37>
f0107e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e32:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107e35:	89 d0                	mov    %edx,%eax
f0107e37:	01 c0                	add    %eax,%eax
f0107e39:	01 d0                	add    %edx,%eax
f0107e3b:	c1 e0 03             	shl    $0x3,%eax
f0107e3e:	01 c8                	add    %ecx,%eax
f0107e40:	8a 40 04             	mov    0x4(%eax),%al
f0107e43:	84 c0                	test   %al,%al
f0107e45:	75 03                	jne    f0107e4a <env_page_ws_get_size+0x34>
f0107e47:	ff 45 f8             	incl   -0x8(%ebp)
f0107e4a:	ff 45 fc             	incl   -0x4(%ebp)
f0107e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e50:	8b 50 74             	mov    0x74(%eax),%edx
f0107e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e56:	39 c2                	cmp    %eax,%edx
f0107e58:	77 d2                	ja     f0107e2c <env_page_ws_get_size+0x16>
	return counter;
f0107e5a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107e5d:	c9                   	leave  
f0107e5e:	c3                   	ret    

f0107e5f <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107e5f:	55                   	push   %ebp
f0107e60:	89 e5                	mov    %esp,%ebp
f0107e62:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107e65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107e6c:	eb 4c                	jmp    f0107eba <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e71:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e77:	89 d0                	mov    %edx,%eax
f0107e79:	01 c0                	add    %eax,%eax
f0107e7b:	01 d0                	add    %edx,%eax
f0107e7d:	c1 e0 03             	shl    $0x3,%eax
f0107e80:	01 c8                	add    %ecx,%eax
f0107e82:	8b 00                	mov    (%eax),%eax
f0107e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e8f:	89 c2                	mov    %eax,%edx
f0107e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e9f:	39 c2                	cmp    %eax,%edx
f0107ea1:	75 14                	jne    f0107eb7 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea6:	83 ec 08             	sub    $0x8,%esp
f0107ea9:	50                   	push   %eax
f0107eaa:	ff 75 08             	pushl  0x8(%ebp)
f0107ead:	e8 b9 00 00 00       	call   f0107f6b <env_page_ws_clear_entry>
f0107eb2:	83 c4 10             	add    $0x10,%esp
			break;
f0107eb5:	eb 10                	jmp    f0107ec7 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107eb7:	ff 45 f4             	incl   -0xc(%ebp)
f0107eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ebd:	8b 50 74             	mov    0x74(%eax),%edx
f0107ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec3:	39 c2                	cmp    %eax,%edx
f0107ec5:	77 a7                	ja     f0107e6e <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107ec7:	90                   	nop
f0107ec8:	c9                   	leave  
f0107ec9:	c3                   	ret    

f0107eca <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107eca:	55                   	push   %ebp
f0107ecb:	89 e5                	mov    %esp,%ebp
f0107ecd:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed3:	8b 40 74             	mov    0x74(%eax),%eax
f0107ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ed9:	77 16                	ja     f0107ef1 <env_page_ws_set_entry+0x27>
f0107edb:	68 6c 63 13 f0       	push   $0xf013636c
f0107ee0:	68 a2 63 13 f0       	push   $0xf01363a2
f0107ee5:	6a 26                	push   $0x26
f0107ee7:	68 b8 63 13 f0       	push   $0xf01363b8
f0107eec:	e8 14 83 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107ef1:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107ef8:	76 16                	jbe    f0107f10 <env_page_ws_set_entry+0x46>
f0107efa:	68 d8 63 13 f0       	push   $0xf01363d8
f0107eff:	68 a2 63 13 f0       	push   $0xf01363a2
f0107f04:	6a 27                	push   $0x27
f0107f06:	68 b8 63 13 f0       	push   $0xf01363b8
f0107f0b:	e8 f5 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f13:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f16:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f19:	89 d0                	mov    %edx,%eax
f0107f1b:	01 c0                	add    %eax,%eax
f0107f1d:	01 d0                	add    %edx,%eax
f0107f1f:	c1 e0 03             	shl    $0x3,%eax
f0107f22:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107f25:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f33:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f38:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3e:	89 d0                	mov    %edx,%eax
f0107f40:	01 c0                	add    %eax,%eax
f0107f42:	01 d0                	add    %edx,%eax
f0107f44:	c1 e0 03             	shl    $0x3,%eax
f0107f47:	01 c8                	add    %ecx,%eax
f0107f49:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f56:	89 d0                	mov    %edx,%eax
f0107f58:	01 c0                	add    %eax,%eax
f0107f5a:	01 d0                	add    %edx,%eax
f0107f5c:	c1 e0 03             	shl    $0x3,%eax
f0107f5f:	01 c8                	add    %ecx,%eax
f0107f61:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107f68:	90                   	nop
}
f0107f69:	c9                   	leave  
f0107f6a:	c3                   	ret    

f0107f6b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107f6b:	55                   	push   %ebp
f0107f6c:	89 e5                	mov    %esp,%ebp
f0107f6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f74:	8b 40 74             	mov    0x74(%eax),%eax
f0107f77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f7a:	77 16                	ja     f0107f92 <env_page_ws_clear_entry+0x27>
f0107f7c:	68 0c 64 13 f0       	push   $0xf013640c
f0107f81:	68 a2 63 13 f0       	push   $0xf01363a2
f0107f86:	6a 32                	push   $0x32
f0107f88:	68 b8 63 13 f0       	push   $0xf01363b8
f0107f8d:	e8 73 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f95:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9b:	89 d0                	mov    %edx,%eax
f0107f9d:	01 c0                	add    %eax,%eax
f0107f9f:	01 d0                	add    %edx,%eax
f0107fa1:	c1 e0 03             	shl    $0x3,%eax
f0107fa4:	01 c8                	add    %ecx,%eax
f0107fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0107faf:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fb2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb5:	89 d0                	mov    %edx,%eax
f0107fb7:	01 c0                	add    %eax,%eax
f0107fb9:	01 d0                	add    %edx,%eax
f0107fbb:	c1 e0 03             	shl    $0x3,%eax
f0107fbe:	01 c8                	add    %ecx,%eax
f0107fc0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107fc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcd:	89 d0                	mov    %edx,%eax
f0107fcf:	01 c0                	add    %eax,%eax
f0107fd1:	01 d0                	add    %edx,%eax
f0107fd3:	c1 e0 03             	shl    $0x3,%eax
f0107fd6:	01 c8                	add    %ecx,%eax
f0107fd8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107fdf:	90                   	nop
f0107fe0:	c9                   	leave  
f0107fe1:	c3                   	ret    

f0107fe2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107fe2:	55                   	push   %ebp
f0107fe3:	89 e5                	mov    %esp,%ebp
f0107fe5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0107feb:	8b 40 74             	mov    0x74(%eax),%eax
f0107fee:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ff1:	77 16                	ja     f0108009 <env_page_ws_get_virtual_address+0x27>
f0107ff3:	68 0c 64 13 f0       	push   $0xf013640c
f0107ff8:	68 a2 63 13 f0       	push   $0xf01363a2
f0107ffd:	6a 3a                	push   $0x3a
f0107fff:	68 b8 63 13 f0       	push   $0xf01363b8
f0108004:	e8 fc 81 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108009:	8b 45 08             	mov    0x8(%ebp),%eax
f010800c:	8b 48 78             	mov    0x78(%eax),%ecx
f010800f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108012:	89 d0                	mov    %edx,%eax
f0108014:	01 c0                	add    %eax,%eax
f0108016:	01 d0                	add    %edx,%eax
f0108018:	c1 e0 03             	shl    $0x3,%eax
f010801b:	01 c8                	add    %ecx,%eax
f010801d:	8b 00                	mov    (%eax),%eax
f010801f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010802a:	c9                   	leave  
f010802b:	c3                   	ret    

f010802c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010802c:	55                   	push   %ebp
f010802d:	89 e5                	mov    %esp,%ebp
f010802f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108032:	8b 45 08             	mov    0x8(%ebp),%eax
f0108035:	8b 40 74             	mov    0x74(%eax),%eax
f0108038:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010803b:	77 16                	ja     f0108053 <env_page_ws_get_time_stamp+0x27>
f010803d:	68 0c 64 13 f0       	push   $0xf013640c
f0108042:	68 a2 63 13 f0       	push   $0xf01363a2
f0108047:	6a 40                	push   $0x40
f0108049:	68 b8 63 13 f0       	push   $0xf01363b8
f010804e:	e8 b2 81 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108053:	8b 45 08             	mov    0x8(%ebp),%eax
f0108056:	8b 48 78             	mov    0x78(%eax),%ecx
f0108059:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805c:	89 d0                	mov    %edx,%eax
f010805e:	01 c0                	add    %eax,%eax
f0108060:	01 d0                	add    %edx,%eax
f0108062:	c1 e0 03             	shl    $0x3,%eax
f0108065:	01 c8                	add    %ecx,%eax
f0108067:	8b 40 08             	mov    0x8(%eax),%eax
}
f010806a:	c9                   	leave  
f010806b:	c3                   	ret    

f010806c <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010806c:	55                   	push   %ebp
f010806d:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010806f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108072:	8b 48 78             	mov    0x78(%eax),%ecx
f0108075:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108078:	89 d0                	mov    %edx,%eax
f010807a:	01 c0                	add    %eax,%eax
f010807c:	01 d0                	add    %edx,%eax
f010807e:	c1 e0 03             	shl    $0x3,%eax
f0108081:	01 c8                	add    %ecx,%eax
f0108083:	8a 40 04             	mov    0x4(%eax),%al
f0108086:	0f b6 c0             	movzbl %al,%eax
}
f0108089:	5d                   	pop    %ebp
f010808a:	c3                   	ret    

f010808b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010808b:	55                   	push   %ebp
f010808c:	89 e5                	mov    %esp,%ebp
f010808e:	53                   	push   %ebx
f010808f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108092:	83 ec 0c             	sub    $0xc,%esp
f0108095:	6a 02                	push   $0x2
f0108097:	e8 a7 5c 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010809c:	83 c4 10             	add    $0x10,%esp
f010809f:	85 c0                	test   %eax,%eax
f01080a1:	0f 84 fe 00 00 00    	je     f01081a5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01080a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01080ae:	83 ec 0c             	sub    $0xc,%esp
f01080b1:	68 44 64 13 f0       	push   $0xf0136444
f01080b6:	e8 53 8c ff ff       	call   f0100d0e <cprintf>
f01080bb:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01080c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080ca:	eb 2c                	jmp    f01080f8 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080cf:	8b 10                	mov    (%eax),%edx
f01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d4:	8d 48 01             	lea    0x1(%eax),%ecx
f01080d7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080da:	83 ec 04             	sub    $0x4,%esp
f01080dd:	52                   	push   %edx
f01080de:	50                   	push   %eax
f01080df:	68 5e 64 13 f0       	push   $0xf013645e
f01080e4:	e8 25 8c ff ff       	call   f0100d0e <cprintf>
f01080e9:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ef:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01080f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080fc:	74 08                	je     f0108106 <env_page_ws_print+0x7b>
f01080fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108101:	8b 40 10             	mov    0x10(%eax),%eax
f0108104:	eb 05                	jmp    f010810b <env_page_ws_print+0x80>
f0108106:	b8 00 00 00 00       	mov    $0x0,%eax
f010810b:	8b 55 08             	mov    0x8(%ebp),%edx
f010810e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108114:	8b 45 08             	mov    0x8(%ebp),%eax
f0108117:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010811d:	85 c0                	test   %eax,%eax
f010811f:	75 ab                	jne    f01080cc <env_page_ws_print+0x41>
f0108121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108125:	75 a5                	jne    f01080cc <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108127:	83 ec 0c             	sub    $0xc,%esp
f010812a:	68 66 64 13 f0       	push   $0xf0136466
f010812f:	e8 da 8b ff ff       	call   f0100d0e <cprintf>
f0108134:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108137:	8b 45 08             	mov    0x8(%ebp),%eax
f010813a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108140:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108143:	eb 2c                	jmp    f0108171 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108148:	8b 10                	mov    (%eax),%edx
f010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010814d:	8d 48 01             	lea    0x1(%eax),%ecx
f0108150:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108153:	83 ec 04             	sub    $0x4,%esp
f0108156:	52                   	push   %edx
f0108157:	50                   	push   %eax
f0108158:	68 5e 64 13 f0       	push   $0xf013645e
f010815d:	e8 ac 8b ff ff       	call   f0100d0e <cprintf>
f0108162:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108165:	8b 45 08             	mov    0x8(%ebp),%eax
f0108168:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108171:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108175:	74 08                	je     f010817f <env_page_ws_print+0xf4>
f0108177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817a:	8b 40 10             	mov    0x10(%eax),%eax
f010817d:	eb 05                	jmp    f0108184 <env_page_ws_print+0xf9>
f010817f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108184:	8b 55 08             	mov    0x8(%ebp),%edx
f0108187:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108196:	85 c0                	test   %eax,%eax
f0108198:	75 ab                	jne    f0108145 <env_page_ws_print+0xba>
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	75 a5                	jne    f0108145 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01081a0:	e9 95 01 00 00       	jmp    f010833a <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01081a5:	83 ec 0c             	sub    $0xc,%esp
f01081a8:	68 81 64 13 f0       	push   $0xf0136481
f01081ad:	e8 5c 8b ff ff       	call   f0100d0e <cprintf>
f01081b2:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01081b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01081bc:	e9 6a 01 00 00       	jmp    f010832b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 48 78             	mov    0x78(%eax),%ecx
f01081c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081ca:	89 d0                	mov    %edx,%eax
f01081cc:	01 c0                	add    %eax,%eax
f01081ce:	01 d0                	add    %edx,%eax
f01081d0:	c1 e0 03             	shl    $0x3,%eax
f01081d3:	01 c8                	add    %ecx,%eax
f01081d5:	8a 40 04             	mov    0x4(%eax),%al
f01081d8:	84 c0                	test   %al,%al
f01081da:	74 43                	je     f010821f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01081dc:	83 ec 0c             	sub    $0xc,%esp
f01081df:	68 8b 64 13 f0       	push   $0xf013648b
f01081e4:	e8 25 8b ff ff       	call   f0100d0e <cprintf>
f01081e9:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01081ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ef:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01081f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01081f8:	75 10                	jne    f010820a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01081fa:	83 ec 0c             	sub    $0xc,%esp
f01081fd:	68 9a 64 13 f0       	push   $0xf013649a
f0108202:	e8 07 8b ff ff       	call   f0100d0e <cprintf>
f0108207:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010820a:	83 ec 0c             	sub    $0xc,%esp
f010820d:	68 a0 64 13 f0       	push   $0xf01364a0
f0108212:	e8 f7 8a ff ff       	call   f0100d0e <cprintf>
f0108217:	83 c4 10             	add    $0x10,%esp
				continue;
f010821a:	e9 09 01 00 00       	jmp    f0108328 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010821f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108222:	8b 48 78             	mov    0x78(%eax),%ecx
f0108225:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108228:	89 d0                	mov    %edx,%eax
f010822a:	01 c0                	add    %eax,%eax
f010822c:	01 d0                	add    %edx,%eax
f010822e:	c1 e0 03             	shl    $0x3,%eax
f0108231:	01 c8                	add    %ecx,%eax
f0108233:	8b 00                	mov    (%eax),%eax
f0108235:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108238:	8b 45 08             	mov    0x8(%ebp),%eax
f010823b:	8b 48 78             	mov    0x78(%eax),%ecx
f010823e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108241:	89 d0                	mov    %edx,%eax
f0108243:	01 c0                	add    %eax,%eax
f0108245:	01 d0                	add    %edx,%eax
f0108247:	c1 e0 03             	shl    $0x3,%eax
f010824a:	01 c8                	add    %ecx,%eax
f010824c:	8b 40 08             	mov    0x8(%eax),%eax
f010824f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108252:	8b 45 08             	mov    0x8(%ebp),%eax
f0108255:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108258:	83 ec 08             	sub    $0x8,%esp
f010825b:	ff 75 e8             	pushl  -0x18(%ebp)
f010825e:	50                   	push   %eax
f010825f:	e8 fd f9 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108264:	83 c4 10             	add    $0x10,%esp
f0108267:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010826a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010826d:	83 e0 40             	and    $0x40,%eax
f0108270:	85 c0                	test   %eax,%eax
f0108272:	0f 95 c0             	setne  %al
f0108275:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108278:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010827b:	83 e0 20             	and    $0x20,%eax
f010827e:	85 c0                	test   %eax,%eax
f0108280:	0f 95 c0             	setne  %al
f0108283:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108286:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108289:	25 00 02 00 00       	and    $0x200,%eax
f010828e:	85 c0                	test   %eax,%eax
f0108290:	0f 95 c0             	setne  %al
f0108293:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108296:	8b 45 08             	mov    0x8(%ebp),%eax
f0108299:	8b 48 78             	mov    0x78(%eax),%ecx
f010829c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010829f:	89 d0                	mov    %edx,%eax
f01082a1:	01 c0                	add    %eax,%eax
f01082a3:	01 d0                	add    %edx,%eax
f01082a5:	c1 e0 03             	shl    $0x3,%eax
f01082a8:	01 c8                	add    %ecx,%eax
f01082aa:	8b 00                	mov    (%eax),%eax
f01082ac:	83 ec 04             	sub    $0x4,%esp
f01082af:	50                   	push   %eax
f01082b0:	ff 75 ec             	pushl  -0x14(%ebp)
f01082b3:	68 a2 64 13 f0       	push   $0xf01364a2
f01082b8:	e8 51 8a ff ff       	call   f0100d0e <cprintf>
f01082bd:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01082c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c9:	89 d0                	mov    %edx,%eax
f01082cb:	01 c0                	add    %eax,%eax
f01082cd:	01 d0                	add    %edx,%eax
f01082cf:	c1 e0 03             	shl    $0x3,%eax
f01082d2:	01 c8                	add    %ecx,%eax
f01082d4:	8b 58 0c             	mov    0xc(%eax),%ebx
f01082d7:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01082db:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01082df:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01082e3:	83 ec 08             	sub    $0x8,%esp
f01082e6:	53                   	push   %ebx
f01082e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01082ea:	51                   	push   %ecx
f01082eb:	52                   	push   %edx
f01082ec:	50                   	push   %eax
f01082ed:	68 b4 64 13 f0       	push   $0xf01364b4
f01082f2:	e8 17 8a ff ff       	call   f0100d0e <cprintf>
f01082f7:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01082fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fd:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108303:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108306:	75 10                	jne    f0108318 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108308:	83 ec 0c             	sub    $0xc,%esp
f010830b:	68 fb 64 13 f0       	push   $0xf01364fb
f0108310:	e8 f9 89 ff ff       	call   f0100d0e <cprintf>
f0108315:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108318:	83 ec 0c             	sub    $0xc,%esp
f010831b:	68 a0 64 13 f0       	push   $0xf01364a0
f0108320:	e8 e9 89 ff ff       	call   f0100d0e <cprintf>
f0108325:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108328:	ff 45 ec             	incl   -0x14(%ebp)
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 40 74             	mov    0x74(%eax),%eax
f0108331:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108334:	0f 87 87 fe ff ff    	ja     f01081c1 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010833a:	90                   	nop
f010833b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010833e:	c9                   	leave  
f010833f:	c3                   	ret    

f0108340 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108340:	55                   	push   %ebp
f0108341:	89 e5                	mov    %esp,%ebp
f0108343:	53                   	push   %ebx
f0108344:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108347:	83 ec 0c             	sub    $0xc,%esp
f010834a:	68 00 65 13 f0       	push   $0xf0136500
f010834f:	e8 ba 89 ff ff       	call   f0100d0e <cprintf>
f0108354:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108357:	83 ec 0c             	sub    $0xc,%esp
f010835a:	68 35 65 13 f0       	push   $0xf0136535
f010835f:	e8 aa 89 ff ff       	call   f0100d0e <cprintf>
f0108364:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010836e:	e9 10 01 00 00       	jmp    f0108483 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108373:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108376:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108379:	89 d0                	mov    %edx,%eax
f010837b:	01 c0                	add    %eax,%eax
f010837d:	01 d0                	add    %edx,%eax
f010837f:	c1 e0 03             	shl    $0x3,%eax
f0108382:	01 c8                	add    %ecx,%eax
f0108384:	83 e8 80             	sub    $0xffffff80,%eax
f0108387:	8a 00                	mov    (%eax),%al
f0108389:	84 c0                	test   %al,%al
f010838b:	74 43                	je     f01083d0 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010838d:	83 ec 0c             	sub    $0xc,%esp
f0108390:	68 8b 64 13 f0       	push   $0xf013648b
f0108395:	e8 74 89 ff ff       	call   f0100d0e <cprintf>
f010839a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010839d:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083a9:	75 10                	jne    f01083bb <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01083ab:	83 ec 0c             	sub    $0xc,%esp
f01083ae:	68 9a 64 13 f0       	push   $0xf013649a
f01083b3:	e8 56 89 ff ff       	call   f0100d0e <cprintf>
f01083b8:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083bb:	83 ec 0c             	sub    $0xc,%esp
f01083be:	68 a0 64 13 f0       	push   $0xf01364a0
f01083c3:	e8 46 89 ff ff       	call   f0100d0e <cprintf>
f01083c8:	83 c4 10             	add    $0x10,%esp
			continue;
f01083cb:	e9 b0 00 00 00       	jmp    f0108480 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01083d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083d6:	89 d0                	mov    %edx,%eax
f01083d8:	01 c0                	add    %eax,%eax
f01083da:	01 d0                	add    %edx,%eax
f01083dc:	c1 e0 03             	shl    $0x3,%eax
f01083df:	01 c8                	add    %ecx,%eax
f01083e1:	83 c0 7c             	add    $0x7c,%eax
f01083e4:	8b 00                	mov    (%eax),%eax
f01083e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01083e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083ef:	89 d0                	mov    %edx,%eax
f01083f1:	01 c0                	add    %eax,%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	c1 e0 03             	shl    $0x3,%eax
f01083f8:	01 c8                	add    %ecx,%eax
f01083fa:	83 c0 7c             	add    $0x7c,%eax
f01083fd:	8b 00                	mov    (%eax),%eax
f01083ff:	83 ec 04             	sub    $0x4,%esp
f0108402:	50                   	push   %eax
f0108403:	ff 75 f4             	pushl  -0xc(%ebp)
f0108406:	68 40 65 13 f0       	push   $0xf0136540
f010840b:	e8 fe 88 ff ff       	call   f0100d0e <cprintf>
f0108410:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108413:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108419:	89 d0                	mov    %edx,%eax
f010841b:	01 c0                	add    %eax,%eax
f010841d:	01 d0                	add    %edx,%eax
f010841f:	c1 e0 03             	shl    $0x3,%eax
f0108422:	01 c8                	add    %ecx,%eax
f0108424:	05 84 00 00 00       	add    $0x84,%eax
f0108429:	8b 18                	mov    (%eax),%ebx
f010842b:	8b 45 08             	mov    0x8(%ebp),%eax
f010842e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108431:	83 ec 08             	sub    $0x8,%esp
f0108434:	ff 75 f0             	pushl  -0x10(%ebp)
f0108437:	50                   	push   %eax
f0108438:	e8 43 f9 ff ff       	call   f0107d80 <pd_is_table_used>
f010843d:	83 c4 10             	add    $0x10,%esp
f0108440:	83 ec 04             	sub    $0x4,%esp
f0108443:	53                   	push   %ebx
f0108444:	50                   	push   %eax
f0108445:	68 58 65 13 f0       	push   $0xf0136558
f010844a:	e8 bf 88 ff ff       	call   f0100d0e <cprintf>
f010844f:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108452:	8b 45 08             	mov    0x8(%ebp),%eax
f0108455:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010845b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845e:	75 10                	jne    f0108470 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108460:	83 ec 0c             	sub    $0xc,%esp
f0108463:	68 fb 64 13 f0       	push   $0xf01364fb
f0108468:	e8 a1 88 ff ff       	call   f0100d0e <cprintf>
f010846d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108470:	83 ec 0c             	sub    $0xc,%esp
f0108473:	68 a0 64 13 f0       	push   $0xf01364a0
f0108478:	e8 91 88 ff ff       	call   f0100d0e <cprintf>
f010847d:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108480:	ff 45 f4             	incl   -0xc(%ebp)
f0108483:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108487:	0f 86 e6 fe ff ff    	jbe    f0108373 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010848d:	90                   	nop
f010848e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108491:	c9                   	leave  
f0108492:	c3                   	ret    

f0108493 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108493:	55                   	push   %ebp
f0108494:	89 e5                	mov    %esp,%ebp
f0108496:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108499:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01084a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01084a7:	eb 20                	jmp    f01084c9 <env_table_ws_get_size+0x36>
f01084a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01084af:	89 d0                	mov    %edx,%eax
f01084b1:	01 c0                	add    %eax,%eax
f01084b3:	01 d0                	add    %edx,%eax
f01084b5:	c1 e0 03             	shl    $0x3,%eax
f01084b8:	01 c8                	add    %ecx,%eax
f01084ba:	83 e8 80             	sub    $0xffffff80,%eax
f01084bd:	8a 00                	mov    (%eax),%al
f01084bf:	84 c0                	test   %al,%al
f01084c1:	75 03                	jne    f01084c6 <env_table_ws_get_size+0x33>
f01084c3:	ff 45 f8             	incl   -0x8(%ebp)
f01084c6:	ff 45 fc             	incl   -0x4(%ebp)
f01084c9:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01084cd:	7e da                	jle    f01084a9 <env_table_ws_get_size+0x16>
	return counter;
f01084cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01084d2:	c9                   	leave  
f01084d3:	c3                   	ret    

f01084d4 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01084d4:	55                   	push   %ebp
f01084d5:	89 e5                	mov    %esp,%ebp
f01084d7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01084da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01084e1:	eb 4c                	jmp    f010852f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01084e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e9:	89 d0                	mov    %edx,%eax
f01084eb:	01 c0                	add    %eax,%eax
f01084ed:	01 d0                	add    %edx,%eax
f01084ef:	c1 e0 03             	shl    $0x3,%eax
f01084f2:	01 c8                	add    %ecx,%eax
f01084f4:	83 c0 7c             	add    $0x7c,%eax
f01084f7:	8b 00                	mov    (%eax),%eax
f01084f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108504:	89 c2                	mov    %eax,%edx
f0108506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108509:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010850c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010850f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108514:	39 c2                	cmp    %eax,%edx
f0108516:	75 14                	jne    f010852c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010851b:	83 ec 08             	sub    $0x8,%esp
f010851e:	50                   	push   %eax
f010851f:	ff 75 08             	pushl  0x8(%ebp)
f0108522:	e8 b8 00 00 00       	call   f01085df <env_table_ws_clear_entry>
f0108527:	83 c4 10             	add    $0x10,%esp
			break;
f010852a:	eb 09                	jmp    f0108535 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010852c:	ff 45 f4             	incl   -0xc(%ebp)
f010852f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108533:	7e ae                	jle    f01084e3 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108535:	90                   	nop
f0108536:	c9                   	leave  
f0108537:	c3                   	ret    

f0108538 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108538:	55                   	push   %ebp
f0108539:	89 e5                	mov    %esp,%ebp
f010853b:	53                   	push   %ebx
f010853c:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010853f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108543:	76 19                	jbe    f010855e <env_table_ws_set_entry+0x26>
f0108545:	68 7c 65 13 f0       	push   $0xf013657c
f010854a:	68 a2 63 13 f0       	push   $0xf01363a2
f010854f:	68 b6 00 00 00       	push   $0xb6
f0108554:	68 b8 63 13 f0       	push   $0xf01363b8
f0108559:	e8 a7 7c ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010855e:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108565:	76 19                	jbe    f0108580 <env_table_ws_set_entry+0x48>
f0108567:	68 d8 63 13 f0       	push   $0xf01363d8
f010856c:	68 a2 63 13 f0       	push   $0xf01363a2
f0108571:	68 b7 00 00 00       	push   $0xb7
f0108576:	68 b8 63 13 f0       	push   $0xf01363b8
f010857b:	e8 85 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108580:	8b 45 10             	mov    0x10(%ebp),%eax
f0108583:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108589:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010858e:	89 c1                	mov    %eax,%ecx
f0108590:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108596:	89 d0                	mov    %edx,%eax
f0108598:	01 c0                	add    %eax,%eax
f010859a:	01 d0                	add    %edx,%eax
f010859c:	c1 e0 03             	shl    $0x3,%eax
f010859f:	01 d8                	add    %ebx,%eax
f01085a1:	83 c0 7c             	add    $0x7c,%eax
f01085a4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01085a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ac:	89 d0                	mov    %edx,%eax
f01085ae:	01 c0                	add    %eax,%eax
f01085b0:	01 d0                	add    %edx,%eax
f01085b2:	c1 e0 03             	shl    $0x3,%eax
f01085b5:	01 c8                	add    %ecx,%eax
f01085b7:	83 e8 80             	sub    $0xffffff80,%eax
f01085ba:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01085bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085c3:	89 d0                	mov    %edx,%eax
f01085c5:	01 c0                	add    %eax,%eax
f01085c7:	01 d0                	add    %edx,%eax
f01085c9:	c1 e0 03             	shl    $0x3,%eax
f01085cc:	01 c8                	add    %ecx,%eax
f01085ce:	05 84 00 00 00       	add    $0x84,%eax
f01085d3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01085d9:	90                   	nop
}
f01085da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01085dd:	c9                   	leave  
f01085de:	c3                   	ret    

f01085df <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01085df:	55                   	push   %ebp
f01085e0:	89 e5                	mov    %esp,%ebp
f01085e2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085e5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085e9:	76 19                	jbe    f0108604 <env_table_ws_clear_entry+0x25>
f01085eb:	68 7c 65 13 f0       	push   $0xf013657c
f01085f0:	68 a2 63 13 f0       	push   $0xf01363a2
f01085f5:	68 c2 00 00 00       	push   $0xc2
f01085fa:	68 b8 63 13 f0       	push   $0xf01363b8
f01085ff:	e8 01 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108604:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108607:	8b 55 0c             	mov    0xc(%ebp),%edx
f010860a:	89 d0                	mov    %edx,%eax
f010860c:	01 c0                	add    %eax,%eax
f010860e:	01 d0                	add    %edx,%eax
f0108610:	c1 e0 03             	shl    $0x3,%eax
f0108613:	01 c8                	add    %ecx,%eax
f0108615:	83 c0 7c             	add    $0x7c,%eax
f0108618:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010861e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108621:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108624:	89 d0                	mov    %edx,%eax
f0108626:	01 c0                	add    %eax,%eax
f0108628:	01 d0                	add    %edx,%eax
f010862a:	c1 e0 03             	shl    $0x3,%eax
f010862d:	01 c8                	add    %ecx,%eax
f010862f:	83 e8 80             	sub    $0xffffff80,%eax
f0108632:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108635:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108638:	8b 55 0c             	mov    0xc(%ebp),%edx
f010863b:	89 d0                	mov    %edx,%eax
f010863d:	01 c0                	add    %eax,%eax
f010863f:	01 d0                	add    %edx,%eax
f0108641:	c1 e0 03             	shl    $0x3,%eax
f0108644:	01 c8                	add    %ecx,%eax
f0108646:	05 84 00 00 00       	add    $0x84,%eax
f010864b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108651:	90                   	nop
f0108652:	c9                   	leave  
f0108653:	c3                   	ret    

f0108654 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108654:	55                   	push   %ebp
f0108655:	89 e5                	mov    %esp,%ebp
f0108657:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010865a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010865e:	76 19                	jbe    f0108679 <env_table_ws_get_virtual_address+0x25>
f0108660:	68 7c 65 13 f0       	push   $0xf013657c
f0108665:	68 a2 63 13 f0       	push   $0xf01363a2
f010866a:	68 ca 00 00 00       	push   $0xca
f010866f:	68 b8 63 13 f0       	push   $0xf01363b8
f0108674:	e8 8c 7b ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867f:	89 d0                	mov    %edx,%eax
f0108681:	01 c0                	add    %eax,%eax
f0108683:	01 d0                	add    %edx,%eax
f0108685:	c1 e0 03             	shl    $0x3,%eax
f0108688:	01 c8                	add    %ecx,%eax
f010868a:	83 c0 7c             	add    $0x7c,%eax
f010868d:	8b 00                	mov    (%eax),%eax
f010868f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108692:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108695:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010869a:	c9                   	leave  
f010869b:	c3                   	ret    

f010869c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010869c:	55                   	push   %ebp
f010869d:	89 e5                	mov    %esp,%ebp
f010869f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a2:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a6:	76 19                	jbe    f01086c1 <env_table_ws_get_time_stamp+0x25>
f01086a8:	68 7c 65 13 f0       	push   $0xf013657c
f01086ad:	68 a2 63 13 f0       	push   $0xf01363a2
f01086b2:	68 d1 00 00 00       	push   $0xd1
f01086b7:	68 b8 63 13 f0       	push   $0xf01363b8
f01086bc:	e8 44 7b ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01086c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086c7:	89 d0                	mov    %edx,%eax
f01086c9:	01 c0                	add    %eax,%eax
f01086cb:	01 d0                	add    %edx,%eax
f01086cd:	c1 e0 03             	shl    $0x3,%eax
f01086d0:	01 c8                	add    %ecx,%eax
f01086d2:	05 84 00 00 00       	add    $0x84,%eax
f01086d7:	8b 00                	mov    (%eax),%eax
}
f01086d9:	c9                   	leave  
f01086da:	c3                   	ret    

f01086db <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01086db:	55                   	push   %ebp
f01086dc:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01086de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e4:	89 d0                	mov    %edx,%eax
f01086e6:	01 c0                	add    %eax,%eax
f01086e8:	01 d0                	add    %edx,%eax
f01086ea:	c1 e0 03             	shl    $0x3,%eax
f01086ed:	01 c8                	add    %ecx,%eax
f01086ef:	83 e8 80             	sub    $0xffffff80,%eax
f01086f2:	8a 00                	mov    (%eax),%al
f01086f4:	0f b6 c0             	movzbl %al,%eax
}
f01086f7:	5d                   	pop    %ebp
f01086f8:	c3                   	ret    

f01086f9 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01086f9:	55                   	push   %ebp
f01086fa:	89 e5                	mov    %esp,%ebp
f01086fc:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01086ff:	83 ec 04             	sub    $0x4,%esp
f0108702:	68 b0 65 13 f0       	push   $0xf01365b0
f0108707:	68 e5 00 00 00       	push   $0xe5
f010870c:	68 b8 63 13 f0       	push   $0xf01363b8
f0108711:	e8 ef 7a ff ff       	call   f0100205 <_panic>

f0108716 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108716:	55                   	push   %ebp
f0108717:	89 e5                	mov    %esp,%ebp
f0108719:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010871c:	83 ec 04             	sub    $0x4,%esp
f010871f:	68 dc 65 13 f0       	push   $0xf01365dc
f0108724:	68 ec 00 00 00       	push   $0xec
f0108729:	68 b8 63 13 f0       	push   $0xf01363b8
f010872e:	e8 d2 7a ff ff       	call   f0100205 <_panic>

f0108733 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108733:	55                   	push   %ebp
f0108734:	89 e5                	mov    %esp,%ebp
f0108736:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108739:	83 ec 04             	sub    $0x4,%esp
f010873c:	68 0c 66 13 f0       	push   $0xf013660c
f0108741:	68 f3 00 00 00       	push   $0xf3
f0108746:	68 b8 63 13 f0       	push   $0xf01363b8
f010874b:	e8 b5 7a ff ff       	call   f0100205 <_panic>

f0108750 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108750:	55                   	push   %ebp
f0108751:	89 e5                	mov    %esp,%ebp
f0108753:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108756:	8b 45 10             	mov    0x10(%ebp),%eax
f0108759:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f010875c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010875f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108762:	8b 45 10             	mov    0x10(%ebp),%eax
f0108765:	25 ff 0f 00 00       	and    $0xfff,%eax
f010876a:	85 c0                	test   %eax,%eax
f010876c:	74 11                	je     f010877f <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f010876e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108777:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010877c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f010877f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108782:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108787:	85 c0                	test   %eax,%eax
f0108789:	74 11                	je     f010879c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f010878b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010878e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108791:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108794:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108799:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010879c:	8b 45 14             	mov    0x14(%ebp),%eax
f010879f:	c1 e0 0c             	shl    $0xc,%eax
f01087a2:	89 c2                	mov    %eax,%edx
f01087a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087a7:	01 d0                	add    %edx,%eax
f01087a9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087af:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01087b2:	eb 4b                	jmp    f01087ff <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f01087b4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01087bb:	83 ec 04             	sub    $0x4,%esp
f01087be:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087c1:	50                   	push   %eax
f01087c2:	ff 75 ec             	pushl  -0x14(%ebp)
f01087c5:	ff 75 08             	pushl  0x8(%ebp)
f01087c8:	e8 e4 e2 ff ff       	call   f0106ab1 <get_page_table>
f01087cd:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087d0:	83 ec 04             	sub    $0x4,%esp
f01087d3:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087d6:	50                   	push   %eax
f01087d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01087da:	ff 75 08             	pushl  0x8(%ebp)
f01087dd:	e8 24 e6 ff ff       	call   f0106e06 <get_frame_info>
f01087e2:	83 c4 10             	add    $0x10,%esp
f01087e5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f01087e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01087ec:	74 0a                	je     f01087f8 <cut_paste_pages+0xa8>
			return -1;
f01087ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01087f3:	e9 d4 00 00 00       	jmp    f01088cc <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087f8:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01087ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108802:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108805:	72 ad                	jb     f01087b4 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010880a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010880d:	e9 a9 00 00 00       	jmp    f01088bb <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108812:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108819:	83 ec 04             	sub    $0x4,%esp
f010881c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010881f:	50                   	push   %eax
f0108820:	ff 75 e8             	pushl  -0x18(%ebp)
f0108823:	ff 75 08             	pushl  0x8(%ebp)
f0108826:	e8 86 e2 ff ff       	call   f0106ab1 <get_page_table>
f010882b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010882e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108831:	85 c0                	test   %eax,%eax
f0108833:	75 14                	jne    f0108849 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108835:	83 ec 08             	sub    $0x8,%esp
f0108838:	ff 75 e8             	pushl  -0x18(%ebp)
f010883b:	ff 75 08             	pushl  0x8(%ebp)
f010883e:	e8 c4 e3 ff ff       	call   f0106c07 <create_page_table>
f0108843:	83 c4 10             	add    $0x10,%esp
f0108846:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010884f:	50                   	push   %eax
f0108850:	ff 75 e8             	pushl  -0x18(%ebp)
f0108853:	ff 75 08             	pushl  0x8(%ebp)
f0108856:	e8 ab e5 ff ff       	call   f0106e06 <get_frame_info>
f010885b:	83 c4 10             	add    $0x10,%esp
f010885e:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108861:	83 ec 08             	sub    $0x8,%esp
f0108864:	ff 75 f0             	pushl  -0x10(%ebp)
f0108867:	ff 75 08             	pushl  0x8(%ebp)
f010886a:	e8 f2 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010886f:	83 c4 10             	add    $0x10,%esp
f0108872:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108875:	83 ec 08             	sub    $0x8,%esp
f0108878:	ff 75 f0             	pushl  -0x10(%ebp)
f010887b:	ff 75 08             	pushl  0x8(%ebp)
f010887e:	e8 f3 e5 ff ff       	call   f0106e76 <unmap_frame>
f0108883:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108886:	83 ec 0c             	sub    $0xc,%esp
f0108889:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010888c:	50                   	push   %eax
f010888d:	e8 60 e0 ff ff       	call   f01068f2 <allocate_frame>
f0108892:	83 c4 10             	add    $0x10,%esp
f0108895:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108898:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010889b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010889e:	ff 75 e8             	pushl  -0x18(%ebp)
f01088a1:	50                   	push   %eax
f01088a2:	ff 75 08             	pushl  0x8(%ebp)
f01088a5:	e8 97 e4 ff ff       	call   f0106d41 <map_frame>
f01088aa:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f01088ad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01088b4:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01088bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01088be:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01088c1:	0f 82 4b ff ff ff    	jb     f0108812 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f01088c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01088cc:	c9                   	leave  
f01088cd:	c3                   	ret    

f01088ce <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01088ce:	55                   	push   %ebp
f01088cf:	89 e5                	mov    %esp,%ebp
f01088d1:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f01088d4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f01088db:	8b 45 10             	mov    0x10(%ebp),%eax
f01088de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f01088e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01088e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01088e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01088ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01088ed:	e9 d1 00 00 00       	jmp    f01089c3 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f01088f2:	83 ec 04             	sub    $0x4,%esp
f01088f5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01088f8:	50                   	push   %eax
f01088f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01088fc:	ff 75 08             	pushl  0x8(%ebp)
f01088ff:	e8 ad e1 ff ff       	call   f0106ab1 <get_page_table>
f0108904:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108907:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010890a:	85 c0                	test   %eax,%eax
f010890c:	75 14                	jne    f0108922 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010890e:	83 ec 08             	sub    $0x8,%esp
f0108911:	ff 75 f0             	pushl  -0x10(%ebp)
f0108914:	ff 75 08             	pushl  0x8(%ebp)
f0108917:	e8 eb e2 ff ff       	call   f0106c07 <create_page_table>
f010891c:	83 c4 10             	add    $0x10,%esp
f010891f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108922:	83 ec 04             	sub    $0x4,%esp
f0108925:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108928:	50                   	push   %eax
f0108929:	ff 75 f0             	pushl  -0x10(%ebp)
f010892c:	ff 75 08             	pushl  0x8(%ebp)
f010892f:	e8 d2 e4 ff ff       	call   f0106e06 <get_frame_info>
f0108934:	83 c4 10             	add    $0x10,%esp
f0108937:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f010893a:	83 ec 08             	sub    $0x8,%esp
f010893d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108940:	ff 75 08             	pushl  0x8(%ebp)
f0108943:	e8 19 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108948:	83 c4 10             	add    $0x10,%esp
f010894b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f010894e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108951:	85 c0                	test   %eax,%eax
f0108953:	74 14                	je     f0108969 <copy_paste_chunk+0x9b>
f0108955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108958:	83 e0 02             	and    $0x2,%eax
f010895b:	85 c0                	test   %eax,%eax
f010895d:	75 0a                	jne    f0108969 <copy_paste_chunk+0x9b>
			return -1;
f010895f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108964:	e9 a7 00 00 00       	jmp    f0108a10 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108969:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010896c:	85 c0                	test   %eax,%eax
f010896e:	75 45                	jne    f01089b5 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108970:	83 ec 08             	sub    $0x8,%esp
f0108973:	ff 75 f4             	pushl  -0xc(%ebp)
f0108976:	ff 75 08             	pushl  0x8(%ebp)
f0108979:	e8 e3 f2 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010897e:	83 c4 10             	add    $0x10,%esp
f0108981:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108987:	83 e0 04             	and    $0x4,%eax
f010898a:	83 c8 02             	or     $0x2,%eax
f010898d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108990:	83 ec 0c             	sub    $0xc,%esp
f0108993:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108996:	50                   	push   %eax
f0108997:	e8 56 df ff ff       	call   f01068f2 <allocate_frame>
f010899c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010899f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01089a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01089a5:	52                   	push   %edx
f01089a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01089a9:	50                   	push   %eax
f01089aa:	ff 75 08             	pushl  0x8(%ebp)
f01089ad:	e8 8f e3 ff ff       	call   f0106d41 <map_frame>
f01089b2:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f01089b5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01089bc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01089c3:	8b 55 10             	mov    0x10(%ebp),%edx
f01089c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01089c9:	01 d0                	add    %edx,%eax
f01089cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01089ce:	0f 87 1e ff ff ff    	ja     f01088f2 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f01089d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01089d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f01089da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089e6:	eb 16                	jmp    f01089fe <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f01089e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089eb:	8b 10                	mov    (%eax),%edx
f01089ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089f0:	89 10                	mov    %edx,(%eax)
	    frame++;
f01089f2:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f01089f6:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089fa:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f01089fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a01:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a04:	01 d0                	add    %edx,%eax
f0108a06:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108a09:	77 dd                	ja     f01089e8 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a10:	c9                   	leave  
f0108a11:	c3                   	ret    

f0108a12 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108a12:	55                   	push   %ebp
f0108a13:	89 e5                	mov    %esp,%ebp
f0108a15:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108a18:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a22:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108a30:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108a37:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a3d:	01 c2                	add    %eax,%edx
f0108a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108a42:	01 d0                	add    %edx,%eax
f0108a44:	48                   	dec    %eax
f0108a45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a50:	f7 75 e8             	divl   -0x18(%ebp)
f0108a53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a56:	29 d0                	sub    %edx,%eax
f0108a58:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a61:	e9 ac 00 00 00       	jmp    f0108b12 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108a66:	83 ec 04             	sub    $0x4,%esp
f0108a69:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a6c:	50                   	push   %eax
f0108a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a70:	ff 75 08             	pushl  0x8(%ebp)
f0108a73:	e8 39 e0 ff ff       	call   f0106ab1 <get_page_table>
f0108a78:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108a7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a7e:	85 c0                	test   %eax,%eax
f0108a80:	75 14                	jne    f0108a96 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108a82:	83 ec 08             	sub    $0x8,%esp
f0108a85:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a88:	ff 75 08             	pushl  0x8(%ebp)
f0108a8b:	e8 77 e1 ff ff       	call   f0106c07 <create_page_table>
f0108a90:	83 c4 10             	add    $0x10,%esp
f0108a93:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a96:	83 ec 04             	sub    $0x4,%esp
f0108a99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a9c:	50                   	push   %eax
f0108a9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108aa0:	ff 75 08             	pushl  0x8(%ebp)
f0108aa3:	e8 5e e3 ff ff       	call   f0106e06 <get_frame_info>
f0108aa8:	83 c4 10             	add    $0x10,%esp
f0108aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108aae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108ab2:	74 07                	je     f0108abb <share_chunk+0xa9>
           return -1;
f0108ab4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ab9:	eb 68                	jmp    f0108b23 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108abb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 0c             	pushl  0xc(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 0c             	pushl  0xc(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108aef:	8b 45 18             	mov    0x18(%ebp),%eax
f0108af2:	50                   	push   %eax
f0108af3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108af6:	ff 75 d8             	pushl  -0x28(%ebp)
f0108af9:	ff 75 08             	pushl  0x8(%ebp)
f0108afc:	e8 40 e2 ff ff       	call   f0106d41 <map_frame>
f0108b01:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108b04:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108b0b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108b18:	0f 82 48 ff ff ff    	jb     f0108a66 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108b1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108b23:	c9                   	leave  
f0108b24:	c3                   	ret    

f0108b25 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108b25:	55                   	push   %ebp
f0108b26:	89 e5                	mov    %esp,%ebp
f0108b28:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108b2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108b32:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b35:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b38:	01 d0                	add    %edx,%eax
f0108b3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108b3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108b44:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108b4b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108b52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108b6a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b71:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b77:	01 d0                	add    %edx,%eax
f0108b79:	48                   	dec    %eax
f0108b7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b85:	f7 75 dc             	divl   -0x24(%ebp)
f0108b88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b8b:	29 d0                	sub    %edx,%eax
f0108b8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b96:	e9 9d 00 00 00       	jmp    f0108c38 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ba1:	83 ec 04             	sub    $0x4,%esp
f0108ba4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ba7:	50                   	push   %eax
f0108ba8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bab:	ff 75 08             	pushl  0x8(%ebp)
f0108bae:	e8 fe de ff ff       	call   f0106ab1 <get_page_table>
f0108bb3:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108bb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bb9:	85 c0                	test   %eax,%eax
f0108bbb:	75 14                	jne    f0108bd1 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108bbd:	83 ec 08             	sub    $0x8,%esp
f0108bc0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bc3:	ff 75 08             	pushl  0x8(%ebp)
f0108bc6:	e8 3c e0 ff ff       	call   f0106c07 <create_page_table>
f0108bcb:	83 c4 10             	add    $0x10,%esp
f0108bce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108bd1:	83 ec 04             	sub    $0x4,%esp
f0108bd4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108bd7:	50                   	push   %eax
f0108bd8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bdb:	ff 75 08             	pushl  0x8(%ebp)
f0108bde:	e8 23 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108be3:	83 c4 10             	add    $0x10,%esp
f0108be6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bec:	85 c0                	test   %eax,%eax
f0108bee:	74 07                	je     f0108bf7 <allocate_chunk+0xd2>
		{
			return -1;
f0108bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bf5:	eb 52                	jmp    f0108c49 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108bf7:	83 ec 0c             	sub    $0xc,%esp
f0108bfa:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bfd:	50                   	push   %eax
f0108bfe:	e8 ef dc ff ff       	call   f01068f2 <allocate_frame>
f0108c03:	83 c4 10             	add    $0x10,%esp
f0108c06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108c09:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108c0d:	74 22                	je     f0108c31 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c12:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108c15:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108c18:	8b 55 14             	mov    0x14(%ebp),%edx
f0108c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c1e:	52                   	push   %edx
f0108c1f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108c22:	50                   	push   %eax
f0108c23:	ff 75 08             	pushl  0x8(%ebp)
f0108c26:	e8 16 e1 ff ff       	call   f0106d41 <map_frame>
f0108c2b:	83 c4 10             	add    $0x10,%esp
f0108c2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108c31:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c3b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c3e:	0f 82 57 ff ff ff    	jb     f0108b9b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c49:	c9                   	leave  
f0108c4a:	c3                   	ret    

f0108c4b <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108c4b:	55                   	push   %ebp
f0108c4c:	89 e5                	mov    %esp,%ebp
f0108c4e:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c54:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c5a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108c73:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108c7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c80:	01 d0                	add    %edx,%eax
f0108c82:	48                   	dec    %eax
f0108c83:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c8e:	f7 75 e0             	divl   -0x20(%ebp)
f0108c91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c94:	29 d0                	sub    %edx,%eax
f0108c96:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c9c:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108c9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108ca2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cac:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108cb1:	85 c0                	test   %eax,%eax
f0108cb3:	75 37                	jne    f0108cec <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108cb5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108cbc:	83 ec 04             	sub    $0x4,%esp
f0108cbf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cc2:	50                   	push   %eax
f0108cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cc6:	ff 75 08             	pushl  0x8(%ebp)
f0108cc9:	e8 e3 dd ff ff       	call   f0106ab1 <get_page_table>
f0108cce:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108cd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108cd4:	85 c0                	test   %eax,%eax
f0108cd6:	74 14                	je     f0108cec <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108cd8:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cdb:	8b 00                	mov    (%eax),%eax
f0108cdd:	8d 50 01             	lea    0x1(%eax),%edx
f0108ce0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ce3:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108ce5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108cec:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108cf0:	75 2d                	jne    f0108d1f <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108cf2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108cf9:	83 ec 04             	sub    $0x4,%esp
f0108cfc:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cff:	50                   	push   %eax
f0108d00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d03:	ff 75 08             	pushl  0x8(%ebp)
f0108d06:	e8 fb e0 ff ff       	call   f0106e06 <get_frame_info>
f0108d0b:	83 c4 10             	add    $0x10,%esp
f0108d0e:	85 c0                	test   %eax,%eax
f0108d10:	74 0d                	je     f0108d1f <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108d12:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d15:	8b 00                	mov    (%eax),%eax
f0108d17:	8d 50 01             	lea    0x1(%eax),%edx
f0108d1a:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d1d:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108d1f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d32:	01 d0                	add    %edx,%eax
f0108d34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d37:	0f 87 6c ff ff ff    	ja     f0108ca9 <calculate_allocated_space+0x5e>
}
f0108d3d:	90                   	nop
f0108d3e:	c9                   	leave  
f0108d3f:	c3                   	ret    

f0108d40 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108d40:	55                   	push   %ebp
f0108d41:	89 e5                	mov    %esp,%ebp
f0108d43:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108d4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108d62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108d65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d68:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d79:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108d7e:	85 c0                	test   %eax,%eax
f0108d80:	75 26                	jne    f0108da8 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108d82:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108d89:	83 ec 04             	sub    $0x4,%esp
f0108d8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d8f:	50                   	push   %eax
f0108d90:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d93:	ff 75 08             	pushl  0x8(%ebp)
f0108d96:	e8 16 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d9b:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108d9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108da1:	85 c0                	test   %eax,%eax
f0108da3:	75 03                	jne    f0108da8 <calculate_required_frames+0x68>
				number_of_tables++;
f0108da5:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108da8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108daf:	83 ec 04             	sub    $0x4,%esp
f0108db2:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108db5:	50                   	push   %eax
f0108db6:	ff 75 e8             	pushl  -0x18(%ebp)
f0108db9:	ff 75 08             	pushl  0x8(%ebp)
f0108dbc:	e8 45 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108dc1:	83 c4 10             	add    $0x10,%esp
f0108dc4:	85 c0                	test   %eax,%eax
f0108dc6:	75 03                	jne    f0108dcb <calculate_required_frames+0x8b>
			number_of_pages++;
f0108dc8:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108dcb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108dd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108dd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108dd8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ddb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dde:	01 d0                	add    %edx,%eax
f0108de0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108de3:	77 91                	ja     f0108d76 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108de5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108deb:	01 d0                	add    %edx,%eax
}
f0108ded:	c9                   	leave  
f0108dee:	c3                   	ret    

f0108def <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108def:	55                   	push   %ebp
f0108df0:	89 e5                	mov    %esp,%ebp
f0108df2:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108df5:	83 ec 04             	sub    $0x4,%esp
f0108df8:	68 38 66 13 f0       	push   $0xf0136638
f0108dfd:	68 25 01 00 00       	push   $0x125
f0108e02:	68 68 66 13 f0       	push   $0xf0136668
f0108e07:	e8 f9 73 ff ff       	call   f0100205 <_panic>

f0108e0c <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e0c:	55                   	push   %ebp
f0108e0d:	89 e5                	mov    %esp,%ebp
f0108e0f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108e12:	83 ec 04             	sub    $0x4,%esp
f0108e15:	68 84 66 13 f0       	push   $0xf0136684
f0108e1a:	68 2f 01 00 00       	push   $0x12f
f0108e1f:	68 68 66 13 f0       	push   $0xf0136668
f0108e24:	e8 dc 73 ff ff       	call   f0100205 <_panic>

f0108e29 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e29:	55                   	push   %ebp
f0108e2a:	89 e5                	mov    %esp,%ebp
f0108e2c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108e2f:	83 ec 04             	sub    $0x4,%esp
f0108e32:	68 b0 66 13 f0       	push   $0xf01366b0
f0108e37:	68 3d 01 00 00       	push   $0x13d
f0108e3c:	68 68 66 13 f0       	push   $0xf0136668
f0108e41:	e8 bf 73 ff ff       	call   f0100205 <_panic>

f0108e46 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108e46:	55                   	push   %ebp
f0108e47:	89 e5                	mov    %esp,%ebp
f0108e49:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108e4c:	83 ec 04             	sub    $0x4,%esp
f0108e4f:	68 f0 66 13 f0       	push   $0xf01366f0
f0108e54:	68 4d 01 00 00       	push   $0x14d
f0108e59:	68 68 66 13 f0       	push   $0xf0136668
f0108e5e:	e8 a2 73 ff ff       	call   f0100205 <_panic>

f0108e63 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108e63:	55                   	push   %ebp
f0108e64:	89 e5                	mov    %esp,%ebp
f0108e66:	57                   	push   %edi
f0108e67:	56                   	push   %esi
f0108e68:	53                   	push   %ebx
f0108e69:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108e6f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108e76:	83 ec 0c             	sub    $0xc,%esp
f0108e79:	ff 75 08             	pushl  0x8(%ebp)
f0108e7c:	e8 0b 22 00 00       	call   f010b08c <get_user_program_info>
f0108e81:	83 c4 10             	add    $0x10,%esp
f0108e84:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108e87:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108e8b:	75 0a                	jne    f0108e97 <env_create+0x34>
f0108e8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e92:	e9 cd 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108e97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e9a:	8b 40 08             	mov    0x8(%eax),%eax
f0108e9d:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108ea0:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108ea7:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108eaa:	83 ec 0c             	sub    $0xc,%esp
f0108ead:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108eb3:	50                   	push   %eax
f0108eb4:	e8 d3 0e 00 00       	call   f0109d8c <allocate_environment>
f0108eb9:	83 c4 10             	add    $0x10,%esp
f0108ebc:	85 c0                	test   %eax,%eax
f0108ebe:	79 0a                	jns    f0108eca <env_create+0x67>
	{
		return 0;
f0108ec0:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ec5:	e9 9a 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108eca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ecd:	8b 00                	mov    (%eax),%eax
f0108ecf:	83 ec 0c             	sub    $0xc,%esp
f0108ed2:	50                   	push   %eax
f0108ed3:	e8 c1 83 02 00       	call   f0131299 <strlen>
f0108ed8:	83 c4 10             	add    $0x10,%esp
f0108edb:	83 f8 3f             	cmp    $0x3f,%eax
f0108ede:	7f 20                	jg     f0108f00 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ee3:	8b 00                	mov    (%eax),%eax
f0108ee5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108eeb:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108ef1:	83 ec 08             	sub    $0x8,%esp
f0108ef4:	50                   	push   %eax
f0108ef5:	52                   	push   %edx
f0108ef6:	e8 ed 83 02 00       	call   f01312e8 <strcpy>
f0108efb:	83 c4 10             	add    $0x10,%esp
f0108efe:	eb 20                	jmp    f0108f20 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108f00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f03:	8b 00                	mov    (%eax),%eax
f0108f05:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108f0b:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108f11:	83 ec 04             	sub    $0x4,%esp
f0108f14:	6a 3f                	push   $0x3f
f0108f16:	50                   	push   %eax
f0108f17:	52                   	push   %edx
f0108f18:	e8 f9 83 02 00       	call   f0131316 <strncpy>
f0108f1d:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108f20:	e8 6d 0f 00 00       	call   f0109e92 <create_user_directory>
f0108f25:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108f28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108f2b:	83 ec 0c             	sub    $0xc,%esp
f0108f2e:	50                   	push   %eax
f0108f2f:	e8 6f eb ff ff       	call   f0107aa3 <kheap_physical_address>
f0108f34:	83 c4 10             	add    $0x10,%esp
f0108f37:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108f3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f43:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108f46:	83 ec 0c             	sub    $0xc,%esp
f0108f49:	6a 02                	push   $0x2
f0108f4b:	e8 f3 4d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0108f50:	83 c4 10             	add    $0x10,%esp
f0108f53:	85 c0                	test   %eax,%eax
f0108f55:	74 21                	je     f0108f78 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108f57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f5d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f60:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108f66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f6f:	2b 55 10             	sub    0x10(%ebp),%edx
f0108f72:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108f78:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108f7c:	75 12                	jne    f0108f90 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108f7e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f84:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108f8b:	00 00 00 
f0108f8e:	eb 0f                	jmp    f0108f9f <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108f90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f96:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f99:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fa5:	83 ec 04             	sub    $0x4,%esp
f0108fa8:	ff 75 ac             	pushl  -0x54(%ebp)
f0108fab:	ff 75 b0             	pushl  -0x50(%ebp)
f0108fae:	50                   	push   %eax
f0108faf:	e8 fa 15 00 00       	call   f010a5ae <initialize_environment>
f0108fb4:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108fb7:	0f 20 d8             	mov    %cr3,%eax
f0108fba:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108fbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108fc0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108fc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fc9:	8b 40 60             	mov    0x60(%eax),%eax
f0108fcc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108fd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108fd8:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108fdb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108fe2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108fe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fef:	8b 40 74             	mov    0x74(%eax),%eax
f0108ff2:	48                   	dec    %eax
f0108ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ff6:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108ffd:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109000:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109006:	83 ec 08             	sub    $0x8,%esp
f0109009:	ff 75 b8             	pushl  -0x48(%ebp)
f010900c:	50                   	push   %eax
f010900d:	e8 af 1d 00 00       	call   f010adc1 <PROGRAM_SEGMENT_FIRST>
f0109012:	83 c4 0c             	add    $0xc,%esp
f0109015:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010901b:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109021:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109026:	89 c7                	mov    %eax,%edi
f0109028:	89 d6                	mov    %edx,%esi
f010902a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010902c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109032:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109035:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109038:	8b 40 10             	mov    0x10(%eax),%eax
f010903b:	83 f8 ff             	cmp    $0xffffffff,%eax
f010903e:	75 07                	jne    f0109047 <env_create+0x1e4>
f0109040:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109047:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010904a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010904d:	e9 15 03 00 00       	jmp    f0109367 <env_create+0x504>
	{
		segment_counter++;
f0109052:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109055:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f010905c:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010905f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109065:	83 ec 0c             	sub    $0xc,%esp
f0109068:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010906e:	52                   	push   %edx
f010906f:	ff 75 dc             	pushl  -0x24(%ebp)
f0109072:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109078:	52                   	push   %edx
f0109079:	ff 75 e4             	pushl  -0x1c(%ebp)
f010907c:	50                   	push   %eax
f010907d:	e8 4b 0e 00 00       	call   f0109ecd <program_segment_alloc_map_copy_workingset>
f0109082:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109085:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010908b:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010908e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109091:	8b 00                	mov    (%eax),%eax
f0109093:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109099:	8b 40 0c             	mov    0xc(%eax),%eax
f010909c:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010909f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090a2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01090a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01090a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090ad:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01090b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01090b7:	8b 55 98             	mov    -0x68(%ebp),%edx
f01090ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01090bd:	01 d0                	add    %edx,%eax
f01090bf:	48                   	dec    %eax
f01090c0:	89 45 88             	mov    %eax,-0x78(%ebp)
f01090c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01090cb:	f7 75 8c             	divl   -0x74(%ebp)
f01090ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090d1:	29 d0                	sub    %edx,%eax
f01090d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01090d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090d9:	2b 45 90             	sub    -0x70(%ebp),%eax
f01090dc:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01090df:	a1 84 1d 88 f0       	mov    0xf0881d84,%eax
f01090e4:	83 ec 04             	sub    $0x4,%esp
f01090e7:	68 00 10 00 00       	push   $0x1000
f01090ec:	6a 00                	push   $0x0
f01090ee:	50                   	push   %eax
f01090ef:	e8 93 83 02 00       	call   f0131487 <memset>
f01090f4:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01090f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01090fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01090fd:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f0109103:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109106:	01 d0                	add    %edx,%eax
f0109108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010910b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010910e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109111:	eb 13                	jmp    f0109126 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109113:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109116:	8a 10                	mov    (%eax),%dl
f0109118:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010911b:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010911d:	ff 45 cc             	incl   -0x34(%ebp)
f0109120:	ff 45 d4             	incl   -0x2c(%ebp)
f0109123:	ff 45 d0             	incl   -0x30(%ebp)
f0109126:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109129:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f010912c:	72 e5                	jb     f0109113 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010912e:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f0109134:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010913a:	83 ec 04             	sub    $0x4,%esp
f010913d:	52                   	push   %edx
f010913e:	ff 75 90             	pushl  -0x70(%ebp)
f0109141:	50                   	push   %eax
f0109142:	e8 ce a5 ff ff       	call   f0103715 <pf_add_env_page>
f0109147:	83 c4 10             	add    $0x10,%esp
f010914a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010914d:	75 17                	jne    f0109166 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010914f:	83 ec 04             	sub    $0x4,%esp
f0109152:	68 1c 67 13 f0       	push   $0xf013671c
f0109157:	68 e1 00 00 00       	push   $0xe1
f010915c:	68 61 67 13 f0       	push   $0xf0136761
f0109161:	e8 9f 70 ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109166:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109169:	8b 50 04             	mov    0x4(%eax),%edx
f010916c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010916f:	01 d0                	add    %edx,%eax
f0109171:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109177:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010917d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109182:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109188:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010918b:	8b 50 04             	mov    0x4(%eax),%edx
f010918e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109191:	01 d0                	add    %edx,%eax
f0109193:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109199:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010919c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010919f:	eb 43                	jmp    f01091e4 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01091a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01091a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091aa:	83 ec 04             	sub    $0x4,%esp
f01091ad:	ff 75 d4             	pushl  -0x2c(%ebp)
f01091b0:	52                   	push   %edx
f01091b1:	50                   	push   %eax
f01091b2:	e8 5e a5 ff ff       	call   f0103715 <pf_add_env_page>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091bd:	75 17                	jne    f01091d6 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091bf:	83 ec 04             	sub    $0x4,%esp
f01091c2:	68 1c 67 13 f0       	push   $0xf013671c
f01091c7:	68 ee 00 00 00       	push   $0xee
f01091cc:	68 61 67 13 f0       	push   $0xf0136761
f01091d1:	e8 2f 70 ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01091d6:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091dd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01091e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091e7:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01091ed:	72 b2                	jb     f01091a1 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01091ef:	a1 84 1d 88 f0       	mov    0xf0881d84,%eax
f01091f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01091f7:	83 ec 04             	sub    $0x4,%esp
f01091fa:	68 00 10 00 00       	push   $0x1000
f01091ff:	6a 00                	push   $0x0
f0109201:	ff 75 d0             	pushl  -0x30(%ebp)
f0109204:	e8 7e 82 02 00       	call   f0131487 <memset>
f0109209:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010920c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109212:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109215:	eb 13                	jmp    f010922a <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109217:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010921a:	8a 10                	mov    (%eax),%dl
f010921c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010921f:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109221:	ff 45 cc             	incl   -0x34(%ebp)
f0109224:	ff 45 d4             	incl   -0x2c(%ebp)
f0109227:	ff 45 d0             	incl   -0x30(%ebp)
f010922a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010922d:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109233:	72 e2                	jb     f0109217 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109235:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f010923b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109241:	83 ec 04             	sub    $0x4,%esp
f0109244:	52                   	push   %edx
f0109245:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010924b:	50                   	push   %eax
f010924c:	e8 c4 a4 ff ff       	call   f0103715 <pf_add_env_page>
f0109251:	83 c4 10             	add    $0x10,%esp
f0109254:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109257:	75 17                	jne    f0109270 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109259:	83 ec 04             	sub    $0x4,%esp
f010925c:	68 1c 67 13 f0       	push   $0xf013671c
f0109261:	68 fd 00 00 00       	push   $0xfd
f0109266:	68 61 67 13 f0       	push   $0xf0136761
f010926b:	e8 95 6f ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109270:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109277:	10 00 00 
f010927a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010927d:	8b 50 04             	mov    0x4(%eax),%edx
f0109280:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109283:	01 c2                	add    %eax,%edx
f0109285:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010928b:	01 d0                	add    %edx,%eax
f010928d:	48                   	dec    %eax
f010928e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109294:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010929a:	ba 00 00 00 00       	mov    $0x0,%edx
f010929f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01092a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01092ab:	29 d0                	sub    %edx,%eax
f01092ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01092b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092b3:	8b 50 08             	mov    0x8(%eax),%edx
f01092b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092b9:	01 d0                	add    %edx,%eax
f01092bb:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01092be:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01092c4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01092cb:	eb 41                	jmp    f010930e <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01092cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d3:	83 ec 04             	sub    $0x4,%esp
f01092d6:	6a 01                	push   $0x1
f01092d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01092db:	50                   	push   %eax
f01092dc:	e8 03 a3 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01092e1:	83 c4 10             	add    $0x10,%esp
f01092e4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01092e7:	75 17                	jne    f0109300 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01092e9:	83 ec 04             	sub    $0x4,%esp
f01092ec:	68 1c 67 13 f0       	push   $0xf013671c
f01092f1:	68 0a 01 00 00       	push   $0x10a
f01092f6:	68 61 67 13 f0       	push   $0xf0136761
f01092fb:	e8 05 6f ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109300:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109307:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010930e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109315:	10 00 00 
f0109318:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f010931e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109324:	01 d0                	add    %edx,%eax
f0109326:	48                   	dec    %eax
f0109327:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010932d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109333:	ba 00 00 00 00       	mov    $0x0,%edx
f0109338:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010933e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109344:	29 d0                	sub    %edx,%eax
f0109346:	89 c2                	mov    %eax,%edx
f0109348:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010934b:	39 c2                	cmp    %eax,%edx
f010934d:	0f 87 7a ff ff ff    	ja     f01092cd <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109353:	83 ec 08             	sub    $0x8,%esp
f0109356:	ff 75 b8             	pushl  -0x48(%ebp)
f0109359:	ff 75 e4             	pushl  -0x1c(%ebp)
f010935c:	e8 55 19 00 00       	call   f010acb6 <PROGRAM_SEGMENT_NEXT>
f0109361:	83 c4 10             	add    $0x10,%esp
f0109364:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109367:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010936b:	0f 85 e1 fc ff ff    	jne    f0109052 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109371:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109378:	e9 9d 00 00 00       	jmp    f010941a <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010937d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109383:	8b 48 78             	mov    0x78(%eax),%ecx
f0109386:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109389:	89 d0                	mov    %edx,%eax
f010938b:	01 c0                	add    %eax,%eax
f010938d:	01 d0                	add    %edx,%eax
f010938f:	c1 e0 03             	shl    $0x3,%eax
f0109392:	01 c8                	add    %ecx,%eax
f0109394:	8a 40 04             	mov    0x4(%eax),%al
f0109397:	84 c0                	test   %al,%al
f0109399:	75 7c                	jne    f0109417 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010939b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093a1:	8b 48 78             	mov    0x78(%eax),%ecx
f01093a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01093a7:	89 d0                	mov    %edx,%eax
f01093a9:	01 c0                	add    %eax,%eax
f01093ab:	01 d0                	add    %edx,%eax
f01093ad:	c1 e0 03             	shl    $0x3,%eax
f01093b0:	01 c8                	add    %ecx,%eax
f01093b2:	8b 00                	mov    (%eax),%eax
f01093b4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01093ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093c3:	83 ec 04             	sub    $0x4,%esp
f01093c6:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01093cc:	52                   	push   %edx
f01093cd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01093d3:	50                   	push   %eax
f01093d4:	e8 d8 d6 ff ff       	call   f0106ab1 <get_page_table>
f01093d9:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01093dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01093e2:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01093e8:	c1 ea 0c             	shr    $0xc,%edx
f01093eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01093f1:	c1 e2 02             	shl    $0x2,%edx
f01093f4:	01 d0                	add    %edx,%eax
f01093f6:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01093fc:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109402:	c1 e9 0c             	shr    $0xc,%ecx
f0109405:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010940b:	c1 e1 02             	shl    $0x2,%ecx
f010940e:	01 ca                	add    %ecx,%edx
f0109410:	8b 12                	mov    (%edx),%edx
f0109412:	83 e2 bf             	and    $0xffffffbf,%edx
f0109415:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109417:	ff 45 c4             	incl   -0x3c(%ebp)
f010941a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109420:	8b 50 74             	mov    0x74(%eax),%edx
f0109423:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109426:	39 c2                	cmp    %eax,%edx
f0109428:	0f 87 4f ff ff ff    	ja     f010937d <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010942e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109431:	8b 50 08             	mov    0x8(%eax),%edx
f0109434:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010943a:	83 ec 08             	sub    $0x8,%esp
f010943d:	52                   	push   %edx
f010943e:	50                   	push   %eax
f010943f:	e8 bc 16 00 00       	call   f010ab00 <set_environment_entry_point>
f0109444:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109447:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944d:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109454:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109457:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010945e:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109461:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109468:	e9 53 05 00 00       	jmp    f01099c0 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010946d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109474:	00 00 00 
		allocate_frame(&pp);
f0109477:	83 ec 0c             	sub    $0xc,%esp
f010947a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109480:	50                   	push   %eax
f0109481:	e8 6c d4 ff ff       	call   f01068f2 <allocate_frame>
f0109486:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109489:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010948f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109495:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109498:	6a 06                	push   $0x6
f010949a:	ff 75 c0             	pushl  -0x40(%ebp)
f010949d:	52                   	push   %edx
f010949e:	50                   	push   %eax
f010949f:	e8 59 da ff ff       	call   f0106efd <loadtime_map_frame>
f01094a4:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01094a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094aa:	83 ec 04             	sub    $0x4,%esp
f01094ad:	68 00 10 00 00       	push   $0x1000
f01094b2:	6a 00                	push   $0x0
f01094b4:	50                   	push   %eax
f01094b5:	e8 cd 7f 02 00       	call   f0131487 <memset>
f01094ba:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01094bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cf:	83 ec 04             	sub    $0x4,%esp
f01094d2:	ff 75 c0             	pushl  -0x40(%ebp)
f01094d5:	52                   	push   %edx
f01094d6:	50                   	push   %eax
f01094d7:	e8 ee e9 ff ff       	call   f0107eca <env_page_ws_set_entry>
f01094dc:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094df:	83 ec 0c             	sub    $0xc,%esp
f01094e2:	6a 02                	push   $0x2
f01094e4:	e8 5a 48 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01094e9:	83 c4 10             	add    $0x10,%esp
f01094ec:	85 c0                	test   %eax,%eax
f01094ee:	0f 84 6b 04 00 00    	je     f010995f <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01094fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109503:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109509:	89 d0                	mov    %edx,%eax
f010950b:	01 c0                	add    %eax,%eax
f010950d:	01 d0                	add    %edx,%eax
f010950f:	c1 e0 03             	shl    $0x3,%eax
f0109512:	01 c8                	add    %ecx,%eax
f0109514:	85 c0                	test   %eax,%eax
f0109516:	75 17                	jne    f010952f <env_create+0x6cc>
f0109518:	83 ec 04             	sub    $0x4,%esp
f010951b:	68 7e 67 13 f0       	push   $0xf013677e
f0109520:	68 41 01 00 00       	push   $0x141
f0109525:	68 61 67 13 f0       	push   $0xf0136761
f010952a:	e8 d6 6c ff ff       	call   f0100205 <_panic>
f010952f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109535:	8b 48 78             	mov    0x78(%eax),%ecx
f0109538:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109544:	89 d0                	mov    %edx,%eax
f0109546:	01 c0                	add    %eax,%eax
f0109548:	01 d0                	add    %edx,%eax
f010954a:	c1 e0 03             	shl    $0x3,%eax
f010954d:	01 c8                	add    %ecx,%eax
f010954f:	8b 40 10             	mov    0x10(%eax),%eax
f0109552:	85 c0                	test   %eax,%eax
f0109554:	74 4b                	je     f01095a1 <env_create+0x73e>
f0109556:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010955c:	8b 48 78             	mov    0x78(%eax),%ecx
f010955f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109565:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010956b:	89 d0                	mov    %edx,%eax
f010956d:	01 c0                	add    %eax,%eax
f010956f:	01 d0                	add    %edx,%eax
f0109571:	c1 e0 03             	shl    $0x3,%eax
f0109574:	01 c8                	add    %ecx,%eax
f0109576:	8b 50 10             	mov    0x10(%eax),%edx
f0109579:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109582:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109588:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010958e:	89 c8                	mov    %ecx,%eax
f0109590:	01 c0                	add    %eax,%eax
f0109592:	01 c8                	add    %ecx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	01 d8                	add    %ebx,%eax
f0109599:	8b 40 14             	mov    0x14(%eax),%eax
f010959c:	89 42 14             	mov    %eax,0x14(%edx)
f010959f:	eb 2f                	jmp    f01095d0 <env_create+0x76d>
f01095a1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ad:	8b 58 78             	mov    0x78(%eax),%ebx
f01095b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095bc:	89 c8                	mov    %ecx,%eax
f01095be:	01 c0                	add    %eax,%eax
f01095c0:	01 c8                	add    %ecx,%eax
f01095c2:	c1 e0 03             	shl    $0x3,%eax
f01095c5:	01 d8                	add    %ebx,%eax
f01095c7:	8b 40 14             	mov    0x14(%eax),%eax
f01095ca:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01095d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01095d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095e5:	89 d0                	mov    %edx,%eax
f01095e7:	01 c0                	add    %eax,%eax
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	c1 e0 03             	shl    $0x3,%eax
f01095ee:	01 c8                	add    %ecx,%eax
f01095f0:	8b 40 14             	mov    0x14(%eax),%eax
f01095f3:	85 c0                	test   %eax,%eax
f01095f5:	74 4b                	je     f0109642 <env_create+0x7df>
f01095f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0109600:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109606:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010960c:	89 d0                	mov    %edx,%eax
f010960e:	01 c0                	add    %eax,%eax
f0109610:	01 d0                	add    %edx,%eax
f0109612:	c1 e0 03             	shl    $0x3,%eax
f0109615:	01 c8                	add    %ecx,%eax
f0109617:	8b 50 14             	mov    0x14(%eax),%edx
f010961a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109620:	8b 58 78             	mov    0x78(%eax),%ebx
f0109623:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109629:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010962f:	89 c8                	mov    %ecx,%eax
f0109631:	01 c0                	add    %eax,%eax
f0109633:	01 c8                	add    %ecx,%eax
f0109635:	c1 e0 03             	shl    $0x3,%eax
f0109638:	01 d8                	add    %ebx,%eax
f010963a:	8b 40 10             	mov    0x10(%eax),%eax
f010963d:	89 42 10             	mov    %eax,0x10(%edx)
f0109640:	eb 2f                	jmp    f0109671 <env_create+0x80e>
f0109642:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109648:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010964e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109651:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109657:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010965d:	89 c8                	mov    %ecx,%eax
f010965f:	01 c0                	add    %eax,%eax
f0109661:	01 c8                	add    %ecx,%eax
f0109663:	c1 e0 03             	shl    $0x3,%eax
f0109666:	01 d8                	add    %ebx,%eax
f0109668:	8b 40 10             	mov    0x10(%eax),%eax
f010966b:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109671:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109677:	8b 48 78             	mov    0x78(%eax),%ecx
f010967a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109680:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109686:	89 d0                	mov    %edx,%eax
f0109688:	01 c0                	add    %eax,%eax
f010968a:	01 d0                	add    %edx,%eax
f010968c:	c1 e0 03             	shl    $0x3,%eax
f010968f:	01 c8                	add    %ecx,%eax
f0109691:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109698:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010969e:	8b 48 78             	mov    0x78(%eax),%ecx
f01096a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096ad:	89 d0                	mov    %edx,%eax
f01096af:	01 c0                	add    %eax,%eax
f01096b1:	01 d0                	add    %edx,%eax
f01096b3:	c1 e0 03             	shl    $0x3,%eax
f01096b6:	01 c8                	add    %ecx,%eax
f01096b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01096bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c5:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01096cb:	4a                   	dec    %edx
f01096cc:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01096d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d8:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01096de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e4:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01096ea:	39 c2                	cmp    %eax,%edx
f01096ec:	0f 83 39 01 00 00    	jae    f010982b <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01096fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109701:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109707:	89 d0                	mov    %edx,%eax
f0109709:	01 c0                	add    %eax,%eax
f010970b:	01 d0                	add    %edx,%eax
f010970d:	c1 e0 03             	shl    $0x3,%eax
f0109710:	01 c8                	add    %ecx,%eax
f0109712:	85 c0                	test   %eax,%eax
f0109714:	75 17                	jne    f010972d <env_create+0x8ca>
f0109716:	83 ec 04             	sub    $0x4,%esp
f0109719:	68 9c 67 13 f0       	push   $0xf013679c
f010971e:	68 46 01 00 00       	push   $0x146
f0109723:	68 61 67 13 f0       	push   $0xf0136761
f0109728:	e8 d8 6a ff ff       	call   f0100205 <_panic>
f010972d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109733:	8b 48 78             	mov    0x78(%eax),%ecx
f0109736:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109742:	89 d0                	mov    %edx,%eax
f0109744:	01 c0                	add    %eax,%eax
f0109746:	01 d0                	add    %edx,%eax
f0109748:	c1 e0 03             	shl    $0x3,%eax
f010974b:	01 c8                	add    %ecx,%eax
f010974d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109753:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109759:	89 50 10             	mov    %edx,0x10(%eax)
f010975c:	8b 40 10             	mov    0x10(%eax),%eax
f010975f:	85 c0                	test   %eax,%eax
f0109761:	74 31                	je     f0109794 <env_create+0x931>
f0109763:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109769:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010976f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109775:	8b 58 78             	mov    0x78(%eax),%ebx
f0109778:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109784:	89 c8                	mov    %ecx,%eax
f0109786:	01 c0                	add    %eax,%eax
f0109788:	01 c8                	add    %ecx,%eax
f010978a:	c1 e0 03             	shl    $0x3,%eax
f010978d:	01 d8                	add    %ebx,%eax
f010978f:	89 42 14             	mov    %eax,0x14(%edx)
f0109792:	eb 2c                	jmp    f01097c0 <env_create+0x95d>
f0109794:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010979a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097af:	89 c8                	mov    %ecx,%eax
f01097b1:	01 c0                	add    %eax,%eax
f01097b3:	01 c8                	add    %ecx,%eax
f01097b5:	c1 e0 03             	shl    $0x3,%eax
f01097b8:	01 d8                	add    %ebx,%eax
f01097ba:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01097c0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cc:	8b 58 78             	mov    0x78(%eax),%ebx
f01097cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097db:	89 c8                	mov    %ecx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 c8                	add    %ecx,%eax
f01097e1:	c1 e0 03             	shl    $0x3,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01097ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109801:	89 d0                	mov    %edx,%eax
f0109803:	01 c0                	add    %eax,%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	c1 e0 03             	shl    $0x3,%eax
f010980a:	01 c8                	add    %ecx,%eax
f010980c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109813:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109819:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010981f:	42                   	inc    %edx
f0109820:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109826:	e9 34 01 00 00       	jmp    f010995f <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010982b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109831:	8b 48 78             	mov    0x78(%eax),%ecx
f0109834:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109840:	89 d0                	mov    %edx,%eax
f0109842:	01 c0                	add    %eax,%eax
f0109844:	01 d0                	add    %edx,%eax
f0109846:	c1 e0 03             	shl    $0x3,%eax
f0109849:	01 c8                	add    %ecx,%eax
f010984b:	85 c0                	test   %eax,%eax
f010984d:	75 17                	jne    f0109866 <env_create+0xa03>
f010984f:	83 ec 04             	sub    $0x4,%esp
f0109852:	68 9c 67 13 f0       	push   $0xf013679c
f0109857:	68 4a 01 00 00       	push   $0x14a
f010985c:	68 61 67 13 f0       	push   $0xf0136761
f0109861:	e8 9f 69 ff ff       	call   f0100205 <_panic>
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 48 78             	mov    0x78(%eax),%ecx
f010986f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109875:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010987b:	89 d0                	mov    %edx,%eax
f010987d:	01 c0                	add    %eax,%eax
f010987f:	01 d0                	add    %edx,%eax
f0109881:	c1 e0 03             	shl    $0x3,%eax
f0109884:	01 c8                	add    %ecx,%eax
f0109886:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988c:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109892:	89 50 10             	mov    %edx,0x10(%eax)
f0109895:	8b 40 10             	mov    0x10(%eax),%eax
f0109898:	85 c0                	test   %eax,%eax
f010989a:	74 31                	je     f01098cd <env_create+0xa6a>
f010989c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098a2:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01098a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01098b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098bd:	89 c8                	mov    %ecx,%eax
f01098bf:	01 c0                	add    %eax,%eax
f01098c1:	01 c8                	add    %ecx,%eax
f01098c3:	c1 e0 03             	shl    $0x3,%eax
f01098c6:	01 d8                	add    %ebx,%eax
f01098c8:	89 42 14             	mov    %eax,0x14(%edx)
f01098cb:	eb 2c                	jmp    f01098f9 <env_create+0xa96>
f01098cd:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d9:	8b 58 78             	mov    0x78(%eax),%ebx
f01098dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098e8:	89 c8                	mov    %ecx,%eax
f01098ea:	01 c0                	add    %eax,%eax
f01098ec:	01 c8                	add    %ecx,%eax
f01098ee:	c1 e0 03             	shl    $0x3,%eax
f01098f1:	01 d8                	add    %ebx,%eax
f01098f3:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01098f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109905:	8b 58 78             	mov    0x78(%eax),%ebx
f0109908:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109914:	89 c8                	mov    %ecx,%eax
f0109916:	01 c0                	add    %eax,%eax
f0109918:	01 c8                	add    %ecx,%eax
f010991a:	c1 e0 03             	shl    $0x3,%eax
f010991d:	01 d8                	add    %ebx,%eax
f010991f:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109925:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992b:	8b 48 78             	mov    0x78(%eax),%ecx
f010992e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109934:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010993a:	89 d0                	mov    %edx,%eax
f010993c:	01 c0                	add    %eax,%eax
f010993e:	01 d0                	add    %edx,%eax
f0109940:	c1 e0 03             	shl    $0x3,%eax
f0109943:	01 c8                	add    %ecx,%eax
f0109945:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010994c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109952:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109958:	42                   	inc    %edx
f0109959:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f010995f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109965:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010996b:	42                   	inc    %edx
f010996c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109972:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109978:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109984:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010998a:	8b 5a 74             	mov    0x74(%edx),%ebx
f010998d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109992:	f7 f3                	div    %ebx
f0109994:	89 d0                	mov    %edx,%eax
f0109996:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010999c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a2:	83 ec 04             	sub    $0x4,%esp
f01099a5:	6a 01                	push   $0x1
f01099a7:	ff 75 c0             	pushl  -0x40(%ebp)
f01099aa:	50                   	push   %eax
f01099ab:	e8 34 9c ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01099b0:	83 c4 10             	add    $0x10,%esp
f01099b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01099b9:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01099c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01099c3:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01099c9:	0f 83 9e fa ff ff    	jae    f010946d <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01099cf:	83 ec 0c             	sub    $0xc,%esp
f01099d2:	6a 02                	push   $0x2
f01099d4:	e8 6a 43 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01099d9:	83 c4 10             	add    $0x10,%esp
f01099dc:	85 c0                	test   %eax,%eax
f01099de:	74 72                	je     f0109a52 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01099e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01099e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ed:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01099f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01099f6:	eb 2b                	jmp    f0109a23 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01099f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01099fb:	8b 10                	mov    (%eax),%edx
f01099fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a03:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a06:	6a 01                	push   $0x1
f0109a08:	6a 00                	push   $0x0
f0109a0a:	52                   	push   %edx
f0109a0b:	50                   	push   %eax
f0109a0c:	e8 9c e1 ff ff       	call   f0107bad <pt_set_page_permissions>
f0109a11:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109a14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a20:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109a23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a29:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a2d:	74 08                	je     f0109a37 <env_create+0xbd4>
f0109a2f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109a32:	8b 52 10             	mov    0x10(%edx),%edx
f0109a35:	eb 05                	jmp    f0109a3c <env_create+0xbd9>
f0109a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a3c:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109a42:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a48:	85 c0                	test   %eax,%eax
f0109a4a:	75 ac                	jne    f01099f8 <env_create+0xb95>
f0109a4c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a50:	75 a6                	jne    f01099f8 <env_create+0xb95>
f0109a52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109a55:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109a58:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109a5b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109a5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109a67:	5b                   	pop    %ebx
f0109a68:	5e                   	pop    %esi
f0109a69:	5f                   	pop    %edi
f0109a6a:	5d                   	pop    %ebp
f0109a6b:	c3                   	ret    

f0109a6c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109a6c:	55                   	push   %ebp
f0109a6d:	89 e5                	mov    %esp,%ebp
f0109a6f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109a72:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109a77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a7a:	74 25                	je     f0109aa1 <env_run+0x35>
	{
		curenv = e ;
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4
		curenv->env_runs++ ;
f0109a84:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109a89:	8b 50 58             	mov    0x58(%eax),%edx
f0109a8c:	42                   	inc    %edx
f0109a8d:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109a90:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109a95:	8b 40 60             	mov    0x60(%eax),%eax
f0109a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a9e:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109aa1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109aa6:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109aad:	e8 0d a7 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ab2:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	50                   	push   %eax
f0109abb:	e8 0f 01 00 00       	call   f0109bcf <env_pop_tf>

f0109ac0 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109ac0:	55                   	push   %ebp
f0109ac1:	89 e5                	mov    %esp,%ebp
f0109ac3:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109ac6:	83 ec 0c             	sub    $0xc,%esp
f0109ac9:	ff 75 08             	pushl  0x8(%ebp)
f0109acc:	e8 3e 11 00 00       	call   f010ac0f <unshare_pws_at_user_space>
f0109ad1:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ad4:	83 ec 04             	sub    $0x4,%esp
f0109ad7:	68 c0 67 13 f0       	push   $0xf01367c0
f0109adc:	68 9d 01 00 00       	push   $0x19d
f0109ae1:	68 61 67 13 f0       	push   $0xf0136761
f0109ae6:	e8 1a 67 ff ff       	call   f0100205 <_panic>

f0109aeb <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109aeb:	55                   	push   %ebp
f0109aec:	89 e5                	mov    %esp,%ebp
f0109aee:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109af1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109af6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109af9:	83 ec 0c             	sub    $0xc,%esp
f0109afc:	50                   	push   %eax
f0109afd:	e8 a0 b7 ff ff       	call   f01052a2 <sched_exit_env>
f0109b02:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109b05:	e8 1c ac ff ff       	call   f0104726 <fos_scheduler>

f0109b0a <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109b0a:	55                   	push   %ebp
f0109b0b:	89 e5                	mov    %esp,%ebp
f0109b0d:	53                   	push   %ebx
f0109b0e:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109b11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109b15:	75 15                	jne    f0109b2c <envid2env+0x22>
		*env_store = curenv;
f0109b17:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b20:	89 10                	mov    %edx,(%eax)
		return 0;
f0109b22:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b27:	e9 9e 00 00 00       	jmp    f0109bca <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109b2c:	8b 1d f0 13 88 f0    	mov    0xf08813f0,%ebx
f0109b32:	83 ec 0c             	sub    $0xc,%esp
f0109b35:	68 b1 02 00 00       	push   $0x2b1
f0109b3a:	e8 cc 64 02 00       	call   f013000b <nearest_pow2_ceil>
f0109b3f:	83 c4 10             	add    $0x10,%esp
f0109b42:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b48:	21 c2                	and    %eax,%edx
f0109b4a:	89 d0                	mov    %edx,%eax
f0109b4c:	c1 e0 03             	shl    $0x3,%eax
f0109b4f:	01 d0                	add    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 04             	shl    $0x4,%eax
f0109b61:	01 d8                	add    %ebx,%eax
f0109b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b69:	8b 40 54             	mov    0x54(%eax),%eax
f0109b6c:	85 c0                	test   %eax,%eax
f0109b6e:	74 0b                	je     f0109b7b <envid2env+0x71>
f0109b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b73:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b76:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b79:	74 10                	je     f0109b8b <envid2env+0x81>
		*env_store = 0;
f0109b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b84:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b89:	eb 3f                	jmp    f0109bca <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109b8b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109b8f:	74 2c                	je     f0109bbd <envid2env+0xb3>
f0109b91:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109b96:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b99:	74 22                	je     f0109bbd <envid2env+0xb3>
f0109b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b9e:	8b 50 50             	mov    0x50(%eax),%edx
f0109ba1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109ba6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ba9:	39 c2                	cmp    %eax,%edx
f0109bab:	74 10                	je     f0109bbd <envid2env+0xb3>
		*env_store = 0;
f0109bad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109bb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109bbb:	eb 0d                	jmp    f0109bca <envid2env+0xc0>
	}

	*env_store = e;
f0109bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc3:	89 10                	mov    %edx,(%eax)
	return 0;
f0109bc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109bcd:	c9                   	leave  
f0109bce:	c3                   	ret    

f0109bcf <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109bcf:	55                   	push   %ebp
f0109bd0:	89 e5                	mov    %esp,%ebp
f0109bd2:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109bd5:	8b 65 08             	mov    0x8(%ebp),%esp
f0109bd8:	61                   	popa   
f0109bd9:	07                   	pop    %es
f0109bda:	1f                   	pop    %ds
f0109bdb:	83 c4 08             	add    $0x8,%esp
f0109bde:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109bdf:	83 ec 04             	sub    $0x4,%esp
f0109be2:	68 e7 67 13 f0       	push   $0xf01367e7
f0109be7:	68 fd 01 00 00       	push   $0x1fd
f0109bec:	68 61 67 13 f0       	push   $0xf0136761
f0109bf1:	e8 0f 66 ff ff       	call   f0100205 <_panic>

f0109bf6 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109bf6:	55                   	push   %ebp
f0109bf7:	89 e5                	mov    %esp,%ebp
f0109bf9:	53                   	push   %ebx
f0109bfa:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109bfd:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109c04:	e9 73 01 00 00       	jmp    f0109d7c <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109c09:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c12:	89 d0                	mov    %edx,%eax
f0109c14:	c1 e0 03             	shl    $0x3,%eax
f0109c17:	01 d0                	add    %edx,%eax
f0109c19:	01 c0                	add    %eax,%eax
f0109c1b:	01 d0                	add    %edx,%eax
f0109c1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c24:	01 d0                	add    %edx,%eax
f0109c26:	c1 e0 04             	shl    $0x4,%eax
f0109c29:	01 c8                	add    %ecx,%eax
f0109c2b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109c32:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c3b:	89 d0                	mov    %edx,%eax
f0109c3d:	c1 e0 03             	shl    $0x3,%eax
f0109c40:	01 d0                	add    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c4d:	01 d0                	add    %edx,%eax
f0109c4f:	c1 e0 04             	shl    $0x4,%eax
f0109c52:	01 c8                	add    %ecx,%eax
f0109c54:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109c5b:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c64:	89 d0                	mov    %edx,%eax
f0109c66:	c1 e0 03             	shl    $0x3,%eax
f0109c69:	01 d0                	add    %edx,%eax
f0109c6b:	01 c0                	add    %eax,%eax
f0109c6d:	01 d0                	add    %edx,%eax
f0109c6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c76:	01 d0                	add    %edx,%eax
f0109c78:	c1 e0 04             	shl    $0x4,%eax
f0109c7b:	01 c8                	add    %ecx,%eax
f0109c7d:	85 c0                	test   %eax,%eax
f0109c7f:	75 17                	jne    f0109c98 <env_init+0xa2>
f0109c81:	83 ec 04             	sub    $0x4,%esp
f0109c84:	68 9c 67 13 f0       	push   $0xf013679c
f0109c89:	68 19 02 00 00       	push   $0x219
f0109c8e:	68 61 67 13 f0       	push   $0xf0136761
f0109c93:	e8 6d 65 ff ff       	call   f0100205 <_panic>
f0109c98:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109c9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ca1:	89 d0                	mov    %edx,%eax
f0109ca3:	c1 e0 03             	shl    $0x3,%eax
f0109ca6:	01 d0                	add    %edx,%eax
f0109ca8:	01 c0                	add    %eax,%eax
f0109caa:	01 d0                	add    %edx,%eax
f0109cac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cb3:	01 d0                	add    %edx,%eax
f0109cb5:	c1 e0 04             	shl    $0x4,%eax
f0109cb8:	01 c8                	add    %ecx,%eax
f0109cba:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109cc0:	89 50 44             	mov    %edx,0x44(%eax)
f0109cc3:	8b 40 44             	mov    0x44(%eax),%eax
f0109cc6:	85 c0                	test   %eax,%eax
f0109cc8:	74 2d                	je     f0109cf7 <env_init+0x101>
f0109cca:	8b 0d f8 13 88 f0    	mov    0xf08813f8,%ecx
f0109cd0:	8b 1d f0 13 88 f0    	mov    0xf08813f0,%ebx
f0109cd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cd9:	89 d0                	mov    %edx,%eax
f0109cdb:	c1 e0 03             	shl    $0x3,%eax
f0109cde:	01 d0                	add    %edx,%eax
f0109ce0:	01 c0                	add    %eax,%eax
f0109ce2:	01 d0                	add    %edx,%eax
f0109ce4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ceb:	01 d0                	add    %edx,%eax
f0109ced:	c1 e0 04             	shl    $0x4,%eax
f0109cf0:	01 d8                	add    %ebx,%eax
f0109cf2:	89 41 48             	mov    %eax,0x48(%ecx)
f0109cf5:	eb 27                	jmp    f0109d1e <env_init+0x128>
f0109cf7:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109cfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d00:	89 d0                	mov    %edx,%eax
f0109d02:	c1 e0 03             	shl    $0x3,%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	01 c0                	add    %eax,%eax
f0109d09:	01 d0                	add    %edx,%eax
f0109d0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d12:	01 d0                	add    %edx,%eax
f0109d14:	c1 e0 04             	shl    $0x4,%eax
f0109d17:	01 c8                	add    %ecx,%eax
f0109d19:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f0109d1e:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d27:	89 d0                	mov    %edx,%eax
f0109d29:	c1 e0 03             	shl    $0x3,%eax
f0109d2c:	01 d0                	add    %edx,%eax
f0109d2e:	01 c0                	add    %eax,%eax
f0109d30:	01 d0                	add    %edx,%eax
f0109d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d39:	01 d0                	add    %edx,%eax
f0109d3b:	c1 e0 04             	shl    $0x4,%eax
f0109d3e:	01 c8                	add    %ecx,%eax
f0109d40:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f0109d45:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d4e:	89 d0                	mov    %edx,%eax
f0109d50:	c1 e0 03             	shl    $0x3,%eax
f0109d53:	01 d0                	add    %edx,%eax
f0109d55:	01 c0                	add    %eax,%eax
f0109d57:	01 d0                	add    %edx,%eax
f0109d59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d60:	01 d0                	add    %edx,%eax
f0109d62:	c1 e0 04             	shl    $0x4,%eax
f0109d65:	01 c8                	add    %ecx,%eax
f0109d67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d6e:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f0109d73:	40                   	inc    %eax
f0109d74:	a3 04 14 88 f0       	mov    %eax,0xf0881404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d79:	ff 4d f4             	decl   -0xc(%ebp)
f0109d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d80:	0f 89 83 fe ff ff    	jns    f0109c09 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d86:	90                   	nop
f0109d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d8a:	c9                   	leave  
f0109d8b:	c3                   	ret    

f0109d8c <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d8c:	55                   	push   %ebp
f0109d8d:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d8f:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	89 10                	mov    %edx,(%eax)
f0109d9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9d:	8b 00                	mov    (%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	75 07                	jne    f0109daa <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109da3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109da8:	eb 11                	jmp    f0109dbb <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dad:	8b 00                	mov    (%eax),%eax
f0109daf:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109dbb:	5d                   	pop    %ebp
f0109dbc:	c3                   	ret    

f0109dbd <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109dbd:	55                   	push   %ebp
f0109dbe:	89 e5                	mov    %esp,%ebp
f0109dc0:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109dc3:	83 ec 04             	sub    $0x4,%esp
f0109dc6:	68 f0 05 00 00       	push   $0x5f0
f0109dcb:	6a 00                	push   $0x0
f0109dcd:	ff 75 08             	pushl  0x8(%ebp)
f0109dd0:	e8 b2 76 02 00       	call   f0131487 <memset>
f0109dd5:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109dd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ddb:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109de2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109de6:	75 17                	jne    f0109dff <free_environment+0x42>
f0109de8:	83 ec 04             	sub    $0x4,%esp
f0109deb:	68 9c 67 13 f0       	push   $0xf013679c
f0109df0:	68 36 02 00 00       	push   $0x236
f0109df5:	68 61 67 13 f0       	push   $0xf0136761
f0109dfa:	e8 06 64 ff ff       	call   f0100205 <_panic>
f0109dff:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	89 50 44             	mov    %edx,0x44(%eax)
f0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e11:	85 c0                	test   %eax,%eax
f0109e13:	74 0d                	je     f0109e22 <free_environment+0x65>
f0109e15:	a1 f8 13 88 f0       	mov    0xf08813f8,%eax
f0109e1a:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0109e20:	eb 08                	jmp    f0109e2a <free_environment+0x6d>
f0109e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e25:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f0109e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e35:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e3c:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f0109e41:	40                   	inc    %eax
f0109e42:	a3 04 14 88 f0       	mov    %eax,0xf0881404
}
f0109e47:	90                   	nop
f0109e48:	c9                   	leave  
f0109e49:	c3                   	ret    

f0109e4a <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109e4a:	55                   	push   %ebp
f0109e4b:	89 e5                	mov    %esp,%ebp
f0109e4d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f0109e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109e53:	89 d0                	mov    %edx,%eax
f0109e55:	01 c0                	add    %eax,%eax
f0109e57:	01 d0                	add    %edx,%eax
f0109e59:	c1 e0 03             	shl    $0x3,%eax
f0109e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f0109e5f:	83 ec 0c             	sub    $0xc,%esp
f0109e62:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e65:	e8 1b da ff ff       	call   f0107885 <kmalloc>
f0109e6a:	83 c4 10             	add    $0x10,%esp
f0109e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f0109e70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e74:	75 17                	jne    f0109e8d <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109e76:	83 ec 04             	sub    $0x4,%esp
f0109e79:	68 f3 67 13 f0       	push   $0xf01367f3
f0109e7e:	68 44 02 00 00       	push   $0x244
f0109e83:	68 61 67 13 f0       	push   $0xf0136761
f0109e88:	e8 78 63 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f0109e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f0109e90:	c9                   	leave  
f0109e91:	c3                   	ret    

f0109e92 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109e92:	55                   	push   %ebp
f0109e93:	89 e5                	mov    %esp,%ebp
f0109e95:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f0109e98:	83 ec 0c             	sub    $0xc,%esp
f0109e9b:	68 00 10 00 00       	push   $0x1000
f0109ea0:	e8 e0 d9 ff ff       	call   f0107885 <kmalloc>
f0109ea5:	83 c4 10             	add    $0x10,%esp
f0109ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f0109eab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109eaf:	75 17                	jne    f0109ec8 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109eb1:	83 ec 04             	sub    $0x4,%esp
f0109eb4:	68 f3 67 13 f0       	push   $0xf01367f3
f0109eb9:	68 53 02 00 00       	push   $0x253
f0109ebe:	68 61 67 13 f0       	push   $0xf0136761
f0109ec3:	e8 3d 63 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f0109ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f0109ecb:	c9                   	leave  
f0109ecc:	c3                   	ret    

f0109ecd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109ecd:	55                   	push   %ebp
f0109ece:	89 e5                	mov    %esp,%ebp
f0109ed0:	53                   	push   %ebx
f0109ed1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109ed4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ed7:	8b 40 0c             	mov    0xc(%eax),%eax
f0109eda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109edd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ee0:	8b 40 08             	mov    0x8(%eax),%eax
f0109ee3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109ee6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109eed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109ef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109ef3:	01 c2                	add    %eax,%edx
f0109ef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109ef8:	01 d0                	add    %edx,%eax
f0109efa:	48                   	dec    %eax
f0109efb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109efe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f06:	f7 75 dc             	divl   -0x24(%ebp)
f0109f09:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f0c:	29 d0                	sub    %edx,%eax
f0109f0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109f11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109f17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109f22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109f29:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109f30:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109f39:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109f40:	0f 85 c8 05 00 00    	jne    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
f0109f46:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f49:	05 5c 05 00 00       	add    $0x55c,%eax
f0109f4e:	83 ec 08             	sub    $0x8,%esp
f0109f51:	68 10 68 13 f0       	push   $0xf0136810
f0109f56:	50                   	push   %eax
f0109f57:	e8 49 74 02 00       	call   f01313a5 <strcmp>
f0109f5c:	83 c4 10             	add    $0x10,%esp
f0109f5f:	85 c0                	test   %eax,%eax
f0109f61:	0f 84 a7 05 00 00    	je     f010a50e <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109f67:	8b 45 14             	mov    0x14(%ebp),%eax
f0109f6a:	83 f8 06             	cmp    $0x6,%eax
f0109f6d:	76 05                	jbe    f0109f74 <program_segment_alloc_map_copy_workingset+0xa7>
f0109f6f:	b8 06 00 00 00       	mov    $0x6,%eax
f0109f74:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109f77:	e9 92 05 00 00       	jmp    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109f7c:	83 ec 0c             	sub    $0xc,%esp
f0109f7f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109f82:	50                   	push   %eax
f0109f83:	e8 6a c9 ff ff       	call   f01068f2 <allocate_frame>
f0109f88:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109f8b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f91:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f94:	6a 06                	push   $0x6
f0109f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f99:	52                   	push   %edx
f0109f9a:	50                   	push   %eax
f0109f9b:	e8 5d cf ff ff       	call   f0106efd <loadtime_map_frame>
f0109fa0:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fb2:	89 d0                	mov    %edx,%eax
f0109fb4:	01 c0                	add    %eax,%eax
f0109fb6:	01 d0                	add    %edx,%eax
f0109fb8:	c1 e0 03             	shl    $0x3,%eax
f0109fbb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fc1:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fd2:	89 d0                	mov    %edx,%eax
f0109fd4:	01 c0                	add    %eax,%eax
f0109fd6:	01 d0                	add    %edx,%eax
f0109fd8:	c1 e0 03             	shl    $0x3,%eax
f0109fdb:	01 c8                	add    %ecx,%eax
f0109fdd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	01 c0                	add    %eax,%eax
f0109ff4:	01 d0                	add    %edx,%eax
f0109ff6:	c1 e0 03             	shl    $0x3,%eax
f0109ff9:	01 c8                	add    %ecx,%eax
f0109ffb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a002:	83 ec 0c             	sub    $0xc,%esp
f010a005:	6a 02                	push   $0x2
f010a007:	e8 37 3d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a00c:	83 c4 10             	add    $0x10,%esp
f010a00f:	85 c0                	test   %eax,%eax
f010a011:	0f 84 c8 03 00 00    	je     f010a3df <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a026:	89 d0                	mov    %edx,%eax
f010a028:	01 c0                	add    %eax,%eax
f010a02a:	01 d0                	add    %edx,%eax
f010a02c:	c1 e0 03             	shl    $0x3,%eax
f010a02f:	01 c8                	add    %ecx,%eax
f010a031:	85 c0                	test   %eax,%eax
f010a033:	75 17                	jne    f010a04c <program_segment_alloc_map_copy_workingset+0x17f>
f010a035:	83 ec 04             	sub    $0x4,%esp
f010a038:	68 7e 67 13 f0       	push   $0xf013677e
f010a03d:	68 85 02 00 00       	push   $0x285
f010a042:	68 61 67 13 f0       	push   $0xf0136761
f010a047:	e8 b9 61 ff ff       	call   f0100205 <_panic>
f010a04c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a052:	8b 45 08             	mov    0x8(%ebp),%eax
f010a055:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05b:	89 d0                	mov    %edx,%eax
f010a05d:	01 c0                	add    %eax,%eax
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	c1 e0 03             	shl    $0x3,%eax
f010a064:	01 c8                	add    %ecx,%eax
f010a066:	8b 40 10             	mov    0x10(%eax),%eax
f010a069:	85 c0                	test   %eax,%eax
f010a06b:	74 3f                	je     f010a0ac <program_segment_alloc_map_copy_workingset+0x1df>
f010a06d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a070:	8b 48 78             	mov    0x78(%eax),%ecx
f010a073:	8b 45 08             	mov    0x8(%ebp),%eax
f010a076:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a07c:	89 d0                	mov    %edx,%eax
f010a07e:	01 c0                	add    %eax,%eax
f010a080:	01 d0                	add    %edx,%eax
f010a082:	c1 e0 03             	shl    $0x3,%eax
f010a085:	01 c8                	add    %ecx,%eax
f010a087:	8b 50 10             	mov    0x10(%eax),%edx
f010a08a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a090:	8b 45 08             	mov    0x8(%ebp),%eax
f010a093:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a099:	89 c8                	mov    %ecx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 c8                	add    %ecx,%eax
f010a09f:	c1 e0 03             	shl    $0x3,%eax
f010a0a2:	01 d8                	add    %ebx,%eax
f010a0a4:	8b 40 14             	mov    0x14(%eax),%eax
f010a0a7:	89 42 14             	mov    %eax,0x14(%edx)
f010a0aa:	eb 26                	jmp    f010a0d2 <program_segment_alloc_map_copy_workingset+0x205>
f010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0af:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0bb:	89 d0                	mov    %edx,%eax
f010a0bd:	01 c0                	add    %eax,%eax
f010a0bf:	01 d0                	add    %edx,%eax
f010a0c1:	c1 e0 03             	shl    $0x3,%eax
f010a0c4:	01 c8                	add    %ecx,%eax
f010a0c6:	8b 50 14             	mov    0x14(%eax),%edx
f010a0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0cc:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0db:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0e1:	89 d0                	mov    %edx,%eax
f010a0e3:	01 c0                	add    %eax,%eax
f010a0e5:	01 d0                	add    %edx,%eax
f010a0e7:	c1 e0 03             	shl    $0x3,%eax
f010a0ea:	01 c8                	add    %ecx,%eax
f010a0ec:	8b 40 14             	mov    0x14(%eax),%eax
f010a0ef:	85 c0                	test   %eax,%eax
f010a0f1:	74 3f                	je     f010a132 <program_segment_alloc_map_copy_workingset+0x265>
f010a0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a102:	89 d0                	mov    %edx,%eax
f010a104:	01 c0                	add    %eax,%eax
f010a106:	01 d0                	add    %edx,%eax
f010a108:	c1 e0 03             	shl    $0x3,%eax
f010a10b:	01 c8                	add    %ecx,%eax
f010a10d:	8b 50 14             	mov    0x14(%eax),%edx
f010a110:	8b 45 08             	mov    0x8(%ebp),%eax
f010a113:	8b 58 78             	mov    0x78(%eax),%ebx
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a11f:	89 c8                	mov    %ecx,%eax
f010a121:	01 c0                	add    %eax,%eax
f010a123:	01 c8                	add    %ecx,%eax
f010a125:	c1 e0 03             	shl    $0x3,%eax
f010a128:	01 d8                	add    %ebx,%eax
f010a12a:	8b 40 10             	mov    0x10(%eax),%eax
f010a12d:	89 42 10             	mov    %eax,0x10(%edx)
f010a130:	eb 26                	jmp    f010a158 <program_segment_alloc_map_copy_workingset+0x28b>
f010a132:	8b 45 08             	mov    0x8(%ebp),%eax
f010a135:	8b 48 78             	mov    0x78(%eax),%ecx
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a141:	89 d0                	mov    %edx,%eax
f010a143:	01 c0                	add    %eax,%eax
f010a145:	01 d0                	add    %edx,%eax
f010a147:	c1 e0 03             	shl    $0x3,%eax
f010a14a:	01 c8                	add    %ecx,%eax
f010a14c:	8b 50 10             	mov    0x10(%eax),%edx
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a158:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a161:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a167:	89 d0                	mov    %edx,%eax
f010a169:	01 c0                	add    %eax,%eax
f010a16b:	01 d0                	add    %edx,%eax
f010a16d:	c1 e0 03             	shl    $0x3,%eax
f010a170:	01 c8                	add    %ecx,%eax
f010a172:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a182:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a188:	89 d0                	mov    %edx,%eax
f010a18a:	01 c0                	add    %eax,%eax
f010a18c:	01 d0                	add    %edx,%eax
f010a18e:	c1 e0 03             	shl    $0x3,%eax
f010a191:	01 c8                	add    %ecx,%eax
f010a193:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a1a3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a1c1:	48                   	dec    %eax
f010a1c2:	39 c2                	cmp    %eax,%edx
f010a1c4:	0f 83 0d 01 00 00    	jae    f010a2d7 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	01 c8                	add    %ecx,%eax
f010a1e4:	85 c0                	test   %eax,%eax
f010a1e6:	75 17                	jne    f010a1ff <program_segment_alloc_map_copy_workingset+0x332>
f010a1e8:	83 ec 04             	sub    $0x4,%esp
f010a1eb:	68 9c 67 13 f0       	push   $0xf013679c
f010a1f0:	68 89 02 00 00       	push   $0x289
f010a1f5:	68 61 67 13 f0       	push   $0xf0136761
f010a1fa:	e8 06 60 ff ff       	call   f0100205 <_panic>
f010a1ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a202:	8b 48 78             	mov    0x78(%eax),%ecx
f010a205:	8b 45 08             	mov    0x8(%ebp),%eax
f010a208:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a20e:	89 d0                	mov    %edx,%eax
f010a210:	01 c0                	add    %eax,%eax
f010a212:	01 d0                	add    %edx,%eax
f010a214:	c1 e0 03             	shl    $0x3,%eax
f010a217:	01 c8                	add    %ecx,%eax
f010a219:	8b 55 08             	mov    0x8(%ebp),%edx
f010a21c:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a222:	89 50 10             	mov    %edx,0x10(%eax)
f010a225:	8b 40 10             	mov    0x10(%eax),%eax
f010a228:	85 c0                	test   %eax,%eax
f010a22a:	74 28                	je     f010a254 <program_segment_alloc_map_copy_workingset+0x387>
f010a22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22f:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a235:	8b 45 08             	mov    0x8(%ebp),%eax
f010a238:	8b 58 78             	mov    0x78(%eax),%ebx
f010a23b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a244:	89 c8                	mov    %ecx,%eax
f010a246:	01 c0                	add    %eax,%eax
f010a248:	01 c8                	add    %ecx,%eax
f010a24a:	c1 e0 03             	shl    $0x3,%eax
f010a24d:	01 d8                	add    %ebx,%eax
f010a24f:	89 42 14             	mov    %eax,0x14(%edx)
f010a252:	eb 24                	jmp    f010a278 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a254:	8b 45 08             	mov    0x8(%ebp),%eax
f010a257:	8b 48 78             	mov    0x78(%eax),%ecx
f010a25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a263:	89 d0                	mov    %edx,%eax
f010a265:	01 c0                	add    %eax,%eax
f010a267:	01 d0                	add    %edx,%eax
f010a269:	c1 e0 03             	shl    $0x3,%eax
f010a26c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a272:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a278:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a287:	89 d0                	mov    %edx,%eax
f010a289:	01 c0                	add    %eax,%eax
f010a28b:	01 d0                	add    %edx,%eax
f010a28d:	c1 e0 03             	shl    $0x3,%eax
f010a290:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a29c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2ab:	89 d0                	mov    %edx,%eax
f010a2ad:	01 c0                	add    %eax,%eax
f010a2af:	01 d0                	add    %edx,%eax
f010a2b1:	c1 e0 03             	shl    $0x3,%eax
f010a2b4:	01 c8                	add    %ecx,%eax
f010a2b6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c0:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a2c6:	8d 50 01             	lea    0x1(%eax),%edx
f010a2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cc:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a2d2:	e9 08 01 00 00       	jmp    f010a3df <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2da:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2e6:	89 d0                	mov    %edx,%eax
f010a2e8:	01 c0                	add    %eax,%eax
f010a2ea:	01 d0                	add    %edx,%eax
f010a2ec:	c1 e0 03             	shl    $0x3,%eax
f010a2ef:	01 c8                	add    %ecx,%eax
f010a2f1:	85 c0                	test   %eax,%eax
f010a2f3:	75 17                	jne    f010a30c <program_segment_alloc_map_copy_workingset+0x43f>
f010a2f5:	83 ec 04             	sub    $0x4,%esp
f010a2f8:	68 9c 67 13 f0       	push   $0xf013679c
f010a2fd:	68 8e 02 00 00       	push   $0x28e
f010a302:	68 61 67 13 f0       	push   $0xf0136761
f010a307:	e8 f9 5e ff ff       	call   f0100205 <_panic>
f010a30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a312:	8b 45 08             	mov    0x8(%ebp),%eax
f010a315:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a31b:	89 d0                	mov    %edx,%eax
f010a31d:	01 c0                	add    %eax,%eax
f010a31f:	01 d0                	add    %edx,%eax
f010a321:	c1 e0 03             	shl    $0x3,%eax
f010a324:	01 c8                	add    %ecx,%eax
f010a326:	8b 55 08             	mov    0x8(%ebp),%edx
f010a329:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a32f:	89 50 10             	mov    %edx,0x10(%eax)
f010a332:	8b 40 10             	mov    0x10(%eax),%eax
f010a335:	85 c0                	test   %eax,%eax
f010a337:	74 28                	je     f010a361 <program_segment_alloc_map_copy_workingset+0x494>
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	8b 58 78             	mov    0x78(%eax),%ebx
f010a348:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a351:	89 c8                	mov    %ecx,%eax
f010a353:	01 c0                	add    %eax,%eax
f010a355:	01 c8                	add    %ecx,%eax
f010a357:	c1 e0 03             	shl    $0x3,%eax
f010a35a:	01 d8                	add    %ebx,%eax
f010a35c:	89 42 14             	mov    %eax,0x14(%edx)
f010a35f:	eb 24                	jmp    f010a385 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a361:	8b 45 08             	mov    0x8(%ebp),%eax
f010a364:	8b 48 78             	mov    0x78(%eax),%ecx
f010a367:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a370:	89 d0                	mov    %edx,%eax
f010a372:	01 c0                	add    %eax,%eax
f010a374:	01 d0                	add    %edx,%eax
f010a376:	c1 e0 03             	shl    $0x3,%eax
f010a379:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a37c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37f:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a385:	8b 45 08             	mov    0x8(%ebp),%eax
f010a388:	8b 48 78             	mov    0x78(%eax),%ecx
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a394:	89 d0                	mov    %edx,%eax
f010a396:	01 c0                	add    %eax,%eax
f010a398:	01 d0                	add    %edx,%eax
f010a39a:	c1 e0 03             	shl    $0x3,%eax
f010a39d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a3:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3b8:	89 d0                	mov    %edx,%eax
f010a3ba:	01 c0                	add    %eax,%eax
f010a3bc:	01 d0                	add    %edx,%eax
f010a3be:	c1 e0 03             	shl    $0x3,%eax
f010a3c1:	01 c8                	add    %ecx,%eax
f010a3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3cd:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a3d3:	8d 50 01             	lea    0x1(%eax),%edx
f010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d9:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e2:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3e8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ee:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3fd:	8b 55 08             	mov    0x8(%ebp),%edx
f010a400:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a403:	ba 00 00 00 00       	mov    $0x0,%edx
f010a408:	f7 f1                	div    %ecx
f010a40a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a416:	c1 e8 16             	shr    $0x16,%eax
f010a419:	89 c2                	mov    %eax,%edx
f010a41b:	8b 45 18             	mov    0x18(%ebp),%eax
f010a41e:	8b 00                	mov    (%eax),%eax
f010a420:	39 c2                	cmp    %eax,%edx
f010a422:	0f 84 cf 00 00 00    	je     f010a4f7 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a428:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a434:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a43a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a43f:	89 c1                	mov    %eax,%ecx
f010a441:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a444:	89 d0                	mov    %edx,%eax
f010a446:	01 c0                	add    %eax,%eax
f010a448:	01 d0                	add    %edx,%eax
f010a44a:	c1 e0 03             	shl    $0x3,%eax
f010a44d:	01 d8                	add    %ebx,%eax
f010a44f:	83 c0 7c             	add    $0x7c,%eax
f010a452:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a45d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a460:	89 d0                	mov    %edx,%eax
f010a462:	01 c0                	add    %eax,%eax
f010a464:	01 d0                	add    %edx,%eax
f010a466:	c1 e0 03             	shl    $0x3,%eax
f010a469:	01 c8                	add    %ecx,%eax
f010a46b:	83 e8 80             	sub    $0xffffff80,%eax
f010a46e:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a471:	8b 45 08             	mov    0x8(%ebp),%eax
f010a474:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a47a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a47d:	89 d0                	mov    %edx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 d0                	add    %edx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	01 c8                	add    %ecx,%eax
f010a488:	05 84 00 00 00       	add    $0x84,%eax
f010a48d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a49c:	8d 50 01             	lea    0x1(%eax),%edx
f010a49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a2:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ab:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4b1:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f010a4bb:	f7 f1                	div    %ecx
f010a4bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c0:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a4c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c9:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4cf:	85 c0                	test   %eax,%eax
f010a4d1:	75 17                	jne    f010a4ea <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a4d3:	83 ec 04             	sub    $0x4,%esp
f010a4d6:	68 14 68 13 f0       	push   $0xf0136814
f010a4db:	68 9e 02 00 00       	push   $0x29e
f010a4e0:	68 61 67 13 f0       	push   $0xf0136761
f010a4e5:	e8 1b 5d ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ed:	c1 e8 16             	shr    $0x16,%eax
f010a4f0:	89 c2                	mov    %eax,%edx
f010a4f2:	8b 45 18             	mov    0x18(%ebp),%eax
f010a4f5:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a4f7:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4fa:	8b 00                	mov    (%eax),%eax
f010a4fc:	8d 50 01             	lea    0x1(%eax),%edx
f010a4ff:	8b 45 10             	mov    0x10(%ebp),%eax
f010a502:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a504:	ff 45 f0             	incl   -0x10(%ebp)
f010a507:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a50e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a511:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a514:	73 0c                	jae    f010a522 <program_segment_alloc_map_copy_workingset+0x655>
f010a516:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a519:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a51c:	0f 82 5a fa ff ff    	jb     f0109f7c <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a522:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a525:	8b 00                	mov    (%eax),%eax
f010a527:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a52a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a52d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a530:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a533:	eb 10                	jmp    f010a545 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a535:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a538:	8a 10                	mov    (%eax),%dl
f010a53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a53d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a53f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a542:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a548:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a54b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a54e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a553:	89 c2                	mov    %eax,%edx
f010a555:	8b 45 10             	mov    0x10(%ebp),%eax
f010a558:	8b 00                	mov    (%eax),%eax
f010a55a:	c1 e0 0c             	shl    $0xc,%eax
f010a55d:	01 c2                	add    %eax,%edx
f010a55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a562:	39 c2                	cmp    %eax,%edx
f010a564:	76 1d                	jbe    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a566:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a569:	8b 50 04             	mov    0x4(%eax),%edx
f010a56c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a56f:	01 c2                	add    %eax,%edx
f010a571:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a574:	39 c2                	cmp    %eax,%edx
f010a576:	77 bd                	ja     f010a535 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a578:	eb 09                	jmp    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a57a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a57d:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a580:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a586:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a589:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a58c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a591:	89 c2                	mov    %eax,%edx
f010a593:	8b 45 10             	mov    0x10(%ebp),%eax
f010a596:	8b 00                	mov    (%eax),%eax
f010a598:	c1 e0 0c             	shl    $0xc,%eax
f010a59b:	01 c2                	add    %eax,%edx
f010a59d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a5a0:	39 c2                	cmp    %eax,%edx
f010a5a2:	77 d6                	ja     f010a57a <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a5a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a5a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a5ac:	c9                   	leave  
f010a5ad:	c3                   	ret    

f010a5ae <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a5ae:	55                   	push   %ebp
f010a5af:	89 e5                	mov    %esp,%ebp
f010a5b1:	53                   	push   %ebx
f010a5b2:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a5bb:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	8b 55 10             	mov    0x10(%ebp),%edx
f010a5c4:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5ce:	eb 17                	jmp    f010a5e7 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a5d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d9:	c1 e2 02             	shl    $0x2,%edx
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5e4:	ff 45 f4             	incl   -0xc(%ebp)
f010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5ea:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a5ef:	76 df                	jbe    f010a5d0 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a5f1:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a5f8:	eb 22                	jmp    f010a61c <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a5fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a600:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a603:	c1 e2 02             	shl    $0x2,%edx
f010a606:	01 c2                	add    %eax,%edx
f010a608:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010a60d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a610:	c1 e1 02             	shl    $0x2,%ecx
f010a613:	01 c8                	add    %ecx,%eax
f010a615:	8b 00                	mov    (%eax),%eax
f010a617:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a619:	ff 45 f4             	incl   -0xc(%ebp)
f010a61c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a623:	7e d5                	jle    f010a5fa <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a625:	8b 45 08             	mov    0x8(%ebp),%eax
f010a628:	8b 40 74             	mov    0x74(%eax),%eax
f010a62b:	83 ec 08             	sub    $0x8,%esp
f010a62e:	50                   	push   %eax
f010a62f:	ff 75 08             	pushl  0x8(%ebp)
f010a632:	e8 13 f8 ff ff       	call   f0109e4a <create_user_page_WS>
f010a637:	83 c4 10             	add    $0x10,%esp
f010a63a:	89 c2                	mov    %eax,%edx
f010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63f:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a642:	83 ec 0c             	sub    $0xc,%esp
f010a645:	ff 75 08             	pushl  0x8(%ebp)
f010a648:	e8 f3 04 00 00       	call   f010ab40 <share_pws_at_user_space>
f010a64d:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a650:	83 ec 0c             	sub    $0xc,%esp
f010a653:	6a 02                	push   $0x2
f010a655:	e8 e9 36 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a65a:	83 c4 10             	add    $0x10,%esp
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	0f 84 04 01 00 00    	je     f010a769 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a665:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a66c:	e9 e7 00 00 00       	jmp    f010a758 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 48 78             	mov    0x78(%eax),%ecx
f010a677:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a67a:	89 d0                	mov    %edx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 d0                	add    %edx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	01 c8                	add    %ecx,%eax
f010a685:	85 c0                	test   %eax,%eax
f010a687:	75 17                	jne    f010a6a0 <initialize_environment+0xf2>
f010a689:	83 ec 04             	sub    $0x4,%esp
f010a68c:	68 9c 67 13 f0       	push   $0xf013679c
f010a691:	68 fc 02 00 00       	push   $0x2fc
f010a696:	68 61 67 13 f0       	push   $0xf0136761
f010a69b:	e8 65 5b ff ff       	call   f0100205 <_panic>
f010a6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6a9:	89 d0                	mov    %edx,%eax
f010a6ab:	01 c0                	add    %eax,%eax
f010a6ad:	01 d0                	add    %edx,%eax
f010a6af:	c1 e0 03             	shl    $0x3,%eax
f010a6b2:	01 c8                	add    %ecx,%eax
f010a6b4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6b7:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a6bd:	89 50 10             	mov    %edx,0x10(%eax)
f010a6c0:	8b 40 10             	mov    0x10(%eax),%eax
f010a6c3:	85 c0                	test   %eax,%eax
f010a6c5:	74 22                	je     f010a6e9 <initialize_environment+0x13b>
f010a6c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ca:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6d9:	89 c8                	mov    %ecx,%eax
f010a6db:	01 c0                	add    %eax,%eax
f010a6dd:	01 c8                	add    %ecx,%eax
f010a6df:	c1 e0 03             	shl    $0x3,%eax
f010a6e2:	01 d8                	add    %ebx,%eax
f010a6e4:	89 42 14             	mov    %eax,0x14(%edx)
f010a6e7:	eb 1e                	jmp    f010a707 <initialize_environment+0x159>
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6f2:	89 d0                	mov    %edx,%eax
f010a6f4:	01 c0                	add    %eax,%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	c1 e0 03             	shl    $0x3,%eax
f010a6fb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a701:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a70d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a710:	89 d0                	mov    %edx,%eax
f010a712:	01 c0                	add    %eax,%eax
f010a714:	01 d0                	add    %edx,%eax
f010a716:	c1 e0 03             	shl    $0x3,%eax
f010a719:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a725:	8b 45 08             	mov    0x8(%ebp),%eax
f010a728:	8b 48 78             	mov    0x78(%eax),%ecx
f010a72b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a72e:	89 d0                	mov    %edx,%eax
f010a730:	01 c0                	add    %eax,%eax
f010a732:	01 d0                	add    %edx,%eax
f010a734:	c1 e0 03             	shl    $0x3,%eax
f010a737:	01 c8                	add    %ecx,%eax
f010a739:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a740:	8b 45 08             	mov    0x8(%ebp),%eax
f010a743:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a749:	8d 50 01             	lea    0x1(%eax),%edx
f010a74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74f:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a755:	ff 45 f0             	incl   -0x10(%ebp)
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 50 74             	mov    0x74(%eax),%edx
f010a75e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a761:	39 c2                	cmp    %eax,%edx
f010a763:	0f 87 08 ff ff ff    	ja     f010a671 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a770:	eb 50                	jmp    f010a7c2 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	8b 48 78             	mov    0x78(%eax),%ecx
f010a778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77b:	89 d0                	mov    %edx,%eax
f010a77d:	01 c0                	add    %eax,%eax
f010a77f:	01 d0                	add    %edx,%eax
f010a781:	c1 e0 03             	shl    $0x3,%eax
f010a784:	01 c8                	add    %ecx,%eax
f010a786:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a795:	89 d0                	mov    %edx,%eax
f010a797:	01 c0                	add    %eax,%eax
f010a799:	01 d0                	add    %edx,%eax
f010a79b:	c1 e0 03             	shl    $0x3,%eax
f010a79e:	01 c8                	add    %ecx,%eax
f010a7a0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7bf:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c5:	8b 50 74             	mov    0x74(%eax),%edx
f010a7c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7cb:	39 c2                	cmp    %eax,%edx
f010a7cd:	77 a3                	ja     f010a772 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d2:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a7d9:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7e3:	eb 50                	jmp    f010a835 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7eb:	89 d0                	mov    %edx,%eax
f010a7ed:	01 c0                	add    %eax,%eax
f010a7ef:	01 d0                	add    %edx,%eax
f010a7f1:	c1 e0 03             	shl    $0x3,%eax
f010a7f4:	01 c8                	add    %ecx,%eax
f010a7f6:	83 c0 7c             	add    $0x7c,%eax
f010a7f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a7ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a805:	89 d0                	mov    %edx,%eax
f010a807:	01 c0                	add    %eax,%eax
f010a809:	01 d0                	add    %edx,%eax
f010a80b:	c1 e0 03             	shl    $0x3,%eax
f010a80e:	01 c8                	add    %ecx,%eax
f010a810:	83 e8 80             	sub    $0xffffff80,%eax
f010a813:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a816:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a81c:	89 d0                	mov    %edx,%eax
f010a81e:	01 c0                	add    %eax,%eax
f010a820:	01 d0                	add    %edx,%eax
f010a822:	c1 e0 03             	shl    $0x3,%eax
f010a825:	01 c8                	add    %ecx,%eax
f010a827:	05 84 00 00 00       	add    $0x84,%eax
f010a82c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a832:	ff 45 f4             	incl   -0xc(%ebp)
f010a835:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a839:	7e aa                	jle    f010a7e5 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a845:	00 00 00 

	e->pageFaultsCounter=0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a852:	00 00 00 
	e->tableFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a85f:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a86c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a879:	00 00 00 

	e->nModifiedPages=0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a886:	00 00 00 
	e->nNotModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a893:	00 00 00 
	e->nClocks = 0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a8a0:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a8ad:	00 00 00 
	e->nPageOut = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a8ba:	00 00 00 
	e->nNewPageAdded = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a8c7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ca:	83 ec 0c             	sub    $0xc,%esp
f010a8cd:	ff 75 08             	pushl  0x8(%ebp)
f010a8d0:	e8 09 00 00 00       	call   f010a8de <complete_environment_initialization>
f010a8d5:	83 c4 10             	add    $0x10,%esp
}
f010a8d8:	90                   	nop
f010a8d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8dc:	c9                   	leave  
f010a8dd:	c3                   	ret    

f010a8de <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8de:	55                   	push   %ebp
f010a8df:	89 e5                	mov    %esp,%ebp
f010a8e1:	53                   	push   %ebx
f010a8e2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8eb:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	8b 40 60             	mov    0x60(%eax),%eax
f010a8f7:	83 c8 03             	or     $0x3,%eax
f010a8fa:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a902:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a908:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90b:	8b 40 60             	mov    0x60(%eax),%eax
f010a90e:	83 c8 05             	or     $0x5,%eax
f010a911:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a913:	8b 45 08             	mov    0x8(%ebp),%eax
f010a916:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a91d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a920:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a931:	8b 45 08             	mov    0x8(%ebp),%eax
f010a934:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a941:	83 ec 0c             	sub    $0xc,%esp
f010a944:	68 b1 02 00 00       	push   $0x2b1
f010a949:	e8 f2 56 02 00       	call   f0130040 <log2_ceil>
f010a94e:	83 c4 10             	add    $0x10,%esp
f010a951:	ba 01 00 00 00       	mov    $0x1,%edx
f010a956:	88 c1                	mov    %al,%cl
f010a958:	d3 e2                	shl    %cl,%edx
f010a95a:	89 d0                	mov    %edx,%eax
f010a95c:	01 d8                	add    %ebx,%eax
f010a95e:	89 c3                	mov    %eax,%ebx
f010a960:	83 ec 0c             	sub    $0xc,%esp
f010a963:	68 b1 02 00 00       	push   $0x2b1
f010a968:	e8 9e 56 02 00       	call   f013000b <nearest_pow2_ceil>
f010a96d:	83 c4 10             	add    $0x10,%esp
f010a970:	f7 d8                	neg    %eax
f010a972:	21 d8                	and    %ebx,%eax
f010a974:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a97b:	7f 1e                	jg     f010a99b <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a97d:	83 ec 0c             	sub    $0xc,%esp
f010a980:	68 b1 02 00 00       	push   $0x2b1
f010a985:	e8 b6 56 02 00       	call   f0130040 <log2_ceil>
f010a98a:	83 c4 10             	add    $0x10,%esp
f010a98d:	ba 01 00 00 00       	mov    $0x1,%edx
f010a992:	88 c1                	mov    %al,%cl
f010a994:	d3 e2                	shl    %cl,%edx
f010a996:	89 d0                	mov    %edx,%eax
f010a998:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99e:	8b 15 f0 13 88 f0    	mov    0xf08813f0,%edx
f010a9a4:	29 d0                	sub    %edx,%eax
f010a9a6:	c1 f8 04             	sar    $0x4,%eax
f010a9a9:	89 c2                	mov    %eax,%edx
f010a9ab:	89 d0                	mov    %edx,%eax
f010a9ad:	c1 e0 03             	shl    $0x3,%eax
f010a9b0:	01 d0                	add    %edx,%eax
f010a9b2:	01 c0                	add    %eax,%eax
f010a9b4:	01 d0                	add    %edx,%eax
f010a9b6:	c1 e0 03             	shl    $0x3,%eax
f010a9b9:	01 d0                	add    %edx,%eax
f010a9bb:	89 c1                	mov    %eax,%ecx
f010a9bd:	c1 e1 08             	shl    $0x8,%ecx
f010a9c0:	01 c8                	add    %ecx,%eax
f010a9c2:	01 c0                	add    %eax,%eax
f010a9c4:	01 d0                	add    %edx,%eax
f010a9c6:	01 c0                	add    %eax,%eax
f010a9c8:	01 d0                	add    %edx,%eax
f010a9ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a9d1:	01 d0                	add    %edx,%eax
f010a9d3:	89 c2                	mov    %eax,%edx
f010a9d5:	c1 e2 09             	shl    $0x9,%edx
f010a9d8:	29 c2                	sub    %eax,%edx
f010a9da:	89 d0                	mov    %edx,%eax
f010a9dc:	f7 d8                	neg    %eax
f010a9de:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a9e1:	89 c2                	mov    %eax,%edx
f010a9e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e6:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a9e9:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010a9ee:	85 c0                	test   %eax,%eax
f010a9f0:	75 0c                	jne    f010a9fe <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a9fc:	eb 0e                	jmp    f010aa0c <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a9fe:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010aa03:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa06:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa09:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0f:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa16:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa19:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa20:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa23:	83 ec 04             	sub    $0x4,%esp
f010aa26:	6a 44                	push   $0x44
f010aa28:	6a 00                	push   $0x0
f010aa2a:	50                   	push   %eax
f010aa2b:	e8 57 6a 02 00       	call   f0131487 <memset>
f010aa30:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa36:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa51:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa58:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5b:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa61:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa64:	8b 40 38             	mov    0x38(%eax),%eax
f010aa67:	80 cc 02             	or     $0x2,%ah
f010aa6a:	89 c2                	mov    %eax,%edx
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aa72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa76:	75 17                	jne    f010aa8f <complete_environment_initialization+0x1b1>
f010aa78:	83 ec 04             	sub    $0x4,%esp
f010aa7b:	68 7e 67 13 f0       	push   $0xf013677e
f010aa80:	68 60 03 00 00       	push   $0x360
f010aa85:	68 61 67 13 f0       	push   $0xf0136761
f010aa8a:	e8 76 57 ff ff       	call   f0100205 <_panic>
f010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa92:	8b 40 44             	mov    0x44(%eax),%eax
f010aa95:	85 c0                	test   %eax,%eax
f010aa97:	74 11                	je     f010aaaa <complete_environment_initialization+0x1cc>
f010aa99:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9c:	8b 40 44             	mov    0x44(%eax),%eax
f010aa9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaa2:	8b 52 48             	mov    0x48(%edx),%edx
f010aaa5:	89 50 48             	mov    %edx,0x48(%eax)
f010aaa8:	eb 0b                	jmp    f010aab5 <complete_environment_initialization+0x1d7>
f010aaaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaad:	8b 40 48             	mov    0x48(%eax),%eax
f010aab0:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	8b 40 48             	mov    0x48(%eax),%eax
f010aabb:	85 c0                	test   %eax,%eax
f010aabd:	74 11                	je     f010aad0 <complete_environment_initialization+0x1f2>
f010aabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac2:	8b 40 48             	mov    0x48(%eax),%eax
f010aac5:	8b 55 08             	mov    0x8(%ebp),%edx
f010aac8:	8b 52 44             	mov    0x44(%edx),%edx
f010aacb:	89 50 44             	mov    %edx,0x44(%eax)
f010aace:	eb 0b                	jmp    f010aadb <complete_environment_initialization+0x1fd>
f010aad0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad3:	8b 40 44             	mov    0x44(%eax),%eax
f010aad6:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f010aadb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aade:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aaef:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f010aaf4:	48                   	dec    %eax
f010aaf5:	a3 04 14 88 f0       	mov    %eax,0xf0881404
	return ;
f010aafa:	90                   	nop
}
f010aafb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aafe:	c9                   	leave  
f010aaff:	c3                   	ret    

f010ab00 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab00:	55                   	push   %ebp
f010ab01:	89 e5                	mov    %esp,%ebp
f010ab03:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0f:	8b 00                	mov    (%eax),%eax
f010ab11:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab16:	74 17                	je     f010ab2f <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab18:	83 ec 04             	sub    $0x4,%esp
f010ab1b:	68 b7 68 13 f0       	push   $0xf01368b7
f010ab20:	68 6c 03 00 00       	push   $0x36c
f010ab25:	68 61 67 13 f0       	push   $0xf0136761
f010ab2a:	e8 d6 56 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab32:	8b 40 18             	mov    0x18(%eax),%eax
f010ab35:	89 c2                	mov    %eax,%edx
f010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3a:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab3d:	90                   	nop
f010ab3e:	c9                   	leave  
f010ab3f:	c3                   	ret    

f010ab40 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ab40:	55                   	push   %ebp
f010ab41:	89 e5                	mov    %esp,%ebp
f010ab43:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ab46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab49:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ab50:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ab53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab56:	8b 40 78             	mov    0x78(%eax),%eax
f010ab59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	8b 50 74             	mov    0x74(%eax),%edx
f010ab62:	89 d0                	mov    %edx,%eax
f010ab64:	01 c0                	add    %eax,%eax
f010ab66:	01 d0                	add    %edx,%eax
f010ab68:	c1 e0 03             	shl    $0x3,%eax
f010ab6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ab7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7d:	8b 40 78             	mov    0x78(%eax),%eax
f010ab80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ab83:	eb 71                	jmp    f010abf6 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ab85:	83 ec 0c             	sub    $0xc,%esp
f010ab88:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab8b:	e8 13 cf ff ff       	call   f0107aa3 <kheap_physical_address>
f010ab90:	83 c4 10             	add    $0x10,%esp
f010ab93:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ab96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab99:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab9c:	83 ec 04             	sub    $0x4,%esp
f010ab9f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aba2:	52                   	push   %edx
f010aba3:	ff 75 f0             	pushl  -0x10(%ebp)
f010aba6:	50                   	push   %eax
f010aba7:	e8 05 bf ff ff       	call   f0106ab1 <get_page_table>
f010abac:	83 c4 10             	add    $0x10,%esp
f010abaf:	83 f8 01             	cmp    $0x1,%eax
f010abb2:	75 18                	jne    f010abcc <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010abb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abba:	83 ec 08             	sub    $0x8,%esp
f010abbd:	ff 75 f0             	pushl  -0x10(%ebp)
f010abc0:	50                   	push   %eax
f010abc1:	e8 41 c0 ff ff       	call   f0106c07 <create_page_table>
f010abc6:	83 c4 10             	add    $0x10,%esp
f010abc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010abcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abcf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abd2:	c1 ea 0c             	shr    $0xc,%edx
f010abd5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010abdb:	c1 e2 02             	shl    $0x2,%edx
f010abde:	01 d0                	add    %edx,%eax
f010abe0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010abe3:	83 ca 05             	or     $0x5,%edx
f010abe6:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010abe8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010abef:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf9:	8b 40 78             	mov    0x78(%eax),%eax
f010abfc:	89 c2                	mov    %eax,%edx
f010abfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac01:	01 d0                	add    %edx,%eax
f010ac03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac06:	0f 87 79 ff ff ff    	ja     f010ab85 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ac0c:	90                   	nop
f010ac0d:	c9                   	leave  
f010ac0e:	c3                   	ret    

f010ac0f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ac0f:	55                   	push   %ebp
f010ac10:	89 e5                	mov    %esp,%ebp
f010ac12:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1b:	89 d0                	mov    %edx,%eax
f010ac1d:	01 c0                	add    %eax,%eax
f010ac1f:	01 d0                	add    %edx,%eax
f010ac21:	c1 e0 03             	shl    $0x3,%eax
f010ac24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac36:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ac3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac42:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ac47:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac4a:	eb 46                	jmp    f010ac92 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac52:	83 ec 04             	sub    $0x4,%esp
f010ac55:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ac58:	52                   	push   %edx
f010ac59:	ff 75 f4             	pushl  -0xc(%ebp)
f010ac5c:	50                   	push   %eax
f010ac5d:	e8 4f be ff ff       	call   f0106ab1 <get_page_table>
f010ac62:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010ac65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac68:	83 ec 0c             	sub    $0xc,%esp
f010ac6b:	50                   	push   %eax
f010ac6c:	e8 df cc ff ff       	call   f0107950 <kfree>
f010ac71:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010ac74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac77:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac7d:	c1 ea 16             	shr    $0x16,%edx
f010ac80:	c1 e2 02             	shl    $0x2,%edx
f010ac83:	01 d0                	add    %edx,%eax
f010ac85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac8b:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010ac92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac95:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac9b:	89 c2                	mov    %eax,%edx
f010ac9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aca0:	01 d0                	add    %edx,%eax
f010aca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aca5:	77 a5                	ja     f010ac4c <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aca7:	0f 20 d8             	mov    %cr3,%eax
f010acaa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010acad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb0:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010acb3:	90                   	nop
f010acb4:	c9                   	leave  
f010acb5:	c3                   	ret    

f010acb6 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010acb6:	55                   	push   %ebp
f010acb7:	89 e5                	mov    %esp,%ebp
f010acb9:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010acbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbf:	8b 40 10             	mov    0x10(%eax),%eax
f010acc2:	8d 48 01             	lea    0x1(%eax),%ecx
f010acc5:	8b 55 08             	mov    0x8(%ebp),%edx
f010acc8:	89 4a 10             	mov    %ecx,0x10(%edx)
f010accb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010acd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acd7:	8b 00                	mov    (%eax),%eax
f010acd9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010acde:	74 17                	je     f010acf7 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ace0:	83 ec 04             	sub    $0x4,%esp
f010ace3:	68 b7 68 13 f0       	push   $0xf01368b7
f010ace8:	68 b6 03 00 00       	push   $0x3b6
f010aced:	68 61 67 13 f0       	push   $0xf0136761
f010acf2:	e8 0e 55 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acfa:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad00:	01 d0                	add    %edx,%eax
f010ad02:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ad05:	eb 0f                	jmp    f010ad16 <PROGRAM_SEGMENT_NEXT+0x60>
f010ad07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0a:	8b 40 10             	mov    0x10(%eax),%eax
f010ad0d:	8d 50 01             	lea    0x1(%eax),%edx
f010ad10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad13:	89 50 10             	mov    %edx,0x10(%eax)
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	8b 40 10             	mov    0x10(%eax),%eax
f010ad1c:	c1 e0 05             	shl    $0x5,%eax
f010ad1f:	89 c2                	mov    %eax,%edx
f010ad21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad24:	01 d0                	add    %edx,%eax
f010ad26:	8b 00                	mov    (%eax),%eax
f010ad28:	83 f8 01             	cmp    $0x1,%eax
f010ad2b:	74 13                	je     f010ad40 <PROGRAM_SEGMENT_NEXT+0x8a>
f010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad30:	8b 50 10             	mov    0x10(%eax),%edx
f010ad33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad36:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad39:	0f b7 c0             	movzwl %ax,%eax
f010ad3c:	39 c2                	cmp    %eax,%edx
f010ad3e:	72 c7                	jb     f010ad07 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ad40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad43:	8b 40 10             	mov    0x10(%eax),%eax
f010ad46:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad4c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad4f:	0f b7 c0             	movzwl %ax,%eax
f010ad52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ad55:	7e 63                	jle    f010adba <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad5a:	c1 e0 05             	shl    $0x5,%eax
f010ad5d:	89 c2                	mov    %eax,%edx
f010ad5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad62:	01 d0                	add    %edx,%eax
f010ad64:	8b 50 04             	mov    0x4(%eax),%edx
f010ad67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad6a:	01 c2                	add    %eax,%edx
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad74:	c1 e0 05             	shl    $0x5,%eax
f010ad77:	89 c2                	mov    %eax,%edx
f010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad7c:	01 d0                	add    %edx,%eax
f010ad7e:	8b 50 14             	mov    0x14(%eax),%edx
f010ad81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad84:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ad87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad8a:	c1 e0 05             	shl    $0x5,%eax
f010ad8d:	89 c2                	mov    %eax,%edx
f010ad8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad92:	01 d0                	add    %edx,%eax
f010ad94:	8b 50 10             	mov    0x10(%eax),%edx
f010ad97:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9a:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ad9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ada0:	c1 e0 05             	shl    $0x5,%eax
f010ada3:	89 c2                	mov    %eax,%edx
f010ada5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ada8:	01 d0                	add    %edx,%eax
f010adaa:	8b 40 08             	mov    0x8(%eax),%eax
f010adad:	89 c2                	mov    %eax,%edx
f010adaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb2:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010adb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb8:	eb 05                	jmp    f010adbf <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010adba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010adbf:	c9                   	leave  
f010adc0:	c3                   	ret    

f010adc1 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010adc1:	55                   	push   %ebp
f010adc2:	89 e5                	mov    %esp,%ebp
f010adc4:	57                   	push   %edi
f010adc5:	56                   	push   %esi
f010adc6:	53                   	push   %ebx
f010adc7:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010adca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010add1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010add7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adda:	8b 00                	mov    (%eax),%eax
f010addc:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ade1:	74 17                	je     f010adfa <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ade3:	83 ec 04             	sub    $0x4,%esp
f010ade6:	68 b7 68 13 f0       	push   $0xf01368b7
f010adeb:	68 d2 03 00 00       	push   $0x3d2
f010adf0:	68 61 67 13 f0       	push   $0xf0136761
f010adf5:	e8 0b 54 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010adfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adfd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ae00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ae08:	eb 07                	jmp    f010ae11 <PROGRAM_SEGMENT_FIRST+0x50>
f010ae0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae0d:	40                   	inc    %eax
f010ae0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ae11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae14:	c1 e0 05             	shl    $0x5,%eax
f010ae17:	89 c2                	mov    %eax,%edx
f010ae19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae1c:	01 d0                	add    %edx,%eax
f010ae1e:	8b 00                	mov    (%eax),%eax
f010ae20:	83 f8 01             	cmp    $0x1,%eax
f010ae23:	74 10                	je     f010ae35 <PROGRAM_SEGMENT_FIRST+0x74>
f010ae25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ae28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae2b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae2e:	0f b7 c0             	movzwl %ax,%eax
f010ae31:	39 c2                	cmp    %eax,%edx
f010ae33:	72 d5                	jb     f010ae0a <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ae35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae38:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ae3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae3e:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae41:	0f b7 c0             	movzwl %ax,%eax
f010ae44:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ae47:	7e 68                	jle    f010aeb1 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ae49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae4c:	c1 e0 05             	shl    $0x5,%eax
f010ae4f:	89 c2                	mov    %eax,%edx
f010ae51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae54:	01 d0                	add    %edx,%eax
f010ae56:	8b 50 04             	mov    0x4(%eax),%edx
f010ae59:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae5c:	01 d0                	add    %edx,%eax
f010ae5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ae61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae64:	c1 e0 05             	shl    $0x5,%eax
f010ae67:	89 c2                	mov    %eax,%edx
f010ae69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae6c:	01 d0                	add    %edx,%eax
f010ae6e:	8b 40 14             	mov    0x14(%eax),%eax
f010ae71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ae74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae77:	c1 e0 05             	shl    $0x5,%eax
f010ae7a:	89 c2                	mov    %eax,%edx
f010ae7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae7f:	01 d0                	add    %edx,%eax
f010ae81:	8b 40 10             	mov    0x10(%eax),%eax
f010ae84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ae87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae8a:	c1 e0 05             	shl    $0x5,%eax
f010ae8d:	89 c2                	mov    %eax,%edx
f010ae8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae92:	01 d0                	add    %edx,%eax
f010ae94:	8b 40 08             	mov    0x8(%eax),%eax
f010ae97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ae9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae9d:	89 c3                	mov    %eax,%ebx
f010ae9f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aea2:	ba 05 00 00 00       	mov    $0x5,%edx
f010aea7:	89 df                	mov    %ebx,%edi
f010aea9:	89 c6                	mov    %eax,%esi
f010aeab:	89 d1                	mov    %edx,%ecx
f010aead:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010aeaf:	eb 1c                	jmp    f010aecd <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010aeb1:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	89 c3                	mov    %eax,%ebx
f010aebd:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aec0:	ba 05 00 00 00       	mov    $0x5,%edx
f010aec5:	89 df                	mov    %ebx,%edi
f010aec7:	89 c6                	mov    %eax,%esi
f010aec9:	89 d1                	mov    %edx,%ecx
f010aecb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010aed3:	5b                   	pop    %ebx
f010aed4:	5e                   	pop    %esi
f010aed5:	5f                   	pop    %edi
f010aed6:	5d                   	pop    %ebp
f010aed7:	c2 04 00             	ret    $0x4

f010aeda <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010aeda:	55                   	push   %ebp
f010aedb:	89 e5                	mov    %esp,%ebp
f010aedd:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010aee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aee7:	a1 b8 1c 88 f0       	mov    0xf0881cb8,%eax
f010aeec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aeef:	e9 c3 00 00 00       	jmp    f010afb7 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aef7:	8b 40 10             	mov    0x10(%eax),%eax
f010aefa:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aefd:	0f 85 ac 00 00 00    	jne    f010afaf <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010af03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af06:	8b 50 0c             	mov    0xc(%eax),%edx
f010af09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af0c:	8b 40 10             	mov    0x10(%eax),%eax
f010af0f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af12:	83 ec 08             	sub    $0x8,%esp
f010af15:	52                   	push   %edx
f010af16:	50                   	push   %eax
f010af17:	e8 a0 cd ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f010af1c:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010af1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af23:	75 17                	jne    f010af3c <cleanup_buffers+0x62>
f010af25:	83 ec 04             	sub    $0x4,%esp
f010af28:	68 7e 67 13 f0       	push   $0xf013677e
f010af2d:	68 f9 03 00 00       	push   $0x3f9
f010af32:	68 61 67 13 f0       	push   $0xf0136761
f010af37:	e8 c9 52 ff ff       	call   f0100205 <_panic>
f010af3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af3f:	8b 00                	mov    (%eax),%eax
f010af41:	85 c0                	test   %eax,%eax
f010af43:	74 10                	je     f010af55 <cleanup_buffers+0x7b>
f010af45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af48:	8b 00                	mov    (%eax),%eax
f010af4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4d:	8b 52 04             	mov    0x4(%edx),%edx
f010af50:	89 50 04             	mov    %edx,0x4(%eax)
f010af53:	eb 0b                	jmp    f010af60 <cleanup_buffers+0x86>
f010af55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af58:	8b 40 04             	mov    0x4(%eax),%eax
f010af5b:	a3 bc 1c 88 f0       	mov    %eax,0xf0881cbc
f010af60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af63:	8b 40 04             	mov    0x4(%eax),%eax
f010af66:	85 c0                	test   %eax,%eax
f010af68:	74 0f                	je     f010af79 <cleanup_buffers+0x9f>
f010af6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af6d:	8b 40 04             	mov    0x4(%eax),%eax
f010af70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af73:	8b 12                	mov    (%edx),%edx
f010af75:	89 10                	mov    %edx,(%eax)
f010af77:	eb 0a                	jmp    f010af83 <cleanup_buffers+0xa9>
f010af79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af7c:	8b 00                	mov    (%eax),%eax
f010af7e:	a3 b8 1c 88 f0       	mov    %eax,0xf0881cb8
f010af83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010af96:	a1 c4 1c 88 f0       	mov    0xf0881cc4,%eax
f010af9b:	48                   	dec    %eax
f010af9c:	a3 c4 1c 88 f0       	mov    %eax,0xf0881cc4

			free_frame(ptr_fi);
f010afa1:	83 ec 0c             	sub    $0xc,%esp
f010afa4:	ff 75 f4             	pushl  -0xc(%ebp)
f010afa7:	e8 5b ba ff ff       	call   f0106a07 <free_frame>
f010afac:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010afaf:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f010afb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010afb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afbb:	74 07                	je     f010afc4 <cleanup_buffers+0xea>
f010afbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afc0:	8b 00                	mov    (%eax),%eax
f010afc2:	eb 05                	jmp    f010afc9 <cleanup_buffers+0xef>
f010afc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc9:	a3 c0 1c 88 f0       	mov    %eax,0xf0881cc0
f010afce:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f010afd3:	85 c0                	test   %eax,%eax
f010afd5:	0f 85 19 ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
f010afdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afdf:	0f 85 0f ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010afe5:	90                   	nop
f010afe6:	c9                   	leave  
f010afe7:	c3                   	ret    

f010afe8 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010afe8:	55                   	push   %ebp
f010afe9:	89 e5                	mov    %esp,%ebp
f010afeb:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010afee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010aff2:	7e 06                	jle    f010affa <set_program_priority+0x12>
f010aff4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010aff8:	7e 14                	jle    f010b00e <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010affa:	83 ec 04             	sub    $0x4,%esp
f010affd:	68 d0 68 13 f0       	push   $0xf01368d0
f010b002:	6a 10                	push   $0x10
f010b004:	68 f4 68 13 f0       	push   $0xf01368f4
f010b009:	e8 f7 51 ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b00e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b012:	74 75                	je     f010b089 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b014:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b018:	77 56                	ja     f010b070 <set_program_priority+0x88>
f010b01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b01d:	c1 e0 02             	shl    $0x2,%eax
f010b020:	05 30 69 13 f0       	add    $0xf0136930,%eax
f010b025:	8b 00                	mov    (%eax),%eax
f010b027:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b029:	83 ec 08             	sub    $0x8,%esp
f010b02c:	6a 01                	push   $0x1
f010b02e:	ff 75 08             	pushl  0x8(%ebp)
f010b031:	e8 fd d6 ff ff       	call   f0108733 <half_WS_Size>
f010b036:	83 c4 10             	add    $0x10,%esp
			break;
f010b039:	eb 35                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b03b:	83 ec 08             	sub    $0x8,%esp
f010b03e:	6a 00                	push   $0x0
f010b040:	ff 75 08             	pushl  0x8(%ebp)
f010b043:	e8 eb d6 ff ff       	call   f0108733 <half_WS_Size>
f010b048:	83 c4 10             	add    $0x10,%esp
			break;
f010b04b:	eb 23                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b04d:	83 ec 08             	sub    $0x8,%esp
f010b050:	6a 01                	push   $0x1
f010b052:	ff 75 08             	pushl  0x8(%ebp)
f010b055:	e8 bc d6 ff ff       	call   f0108716 <double_WS_Size>
f010b05a:	83 c4 10             	add    $0x10,%esp
			break;
f010b05d:	eb 11                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b05f:	83 ec 08             	sub    $0x8,%esp
f010b062:	6a 00                	push   $0x0
f010b064:	ff 75 08             	pushl  0x8(%ebp)
f010b067:	e8 aa d6 ff ff       	call   f0108716 <double_WS_Size>
f010b06c:	83 c4 10             	add    $0x10,%esp
			break;
f010b06f:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b070:	8b 45 08             	mov    0x8(%ebp),%eax
f010b073:	8b 40 74             	mov    0x74(%eax),%eax
f010b076:	83 ec 08             	sub    $0x8,%esp
f010b079:	50                   	push   %eax
f010b07a:	68 11 69 13 f0       	push   $0xf0136911
f010b07f:	e8 8a 5c ff ff       	call   f0100d0e <cprintf>
f010b084:	83 c4 10             	add    $0x10,%esp
f010b087:	eb 01                	jmp    f010b08a <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b089:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b08a:	c9                   	leave  
f010b08b:	c3                   	ret    

f010b08c <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b08c:	55                   	push   %ebp
f010b08d:	89 e5                	mov    %esp,%ebp
f010b08f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b099:	eb 29                	jmp    f010b0c4 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b09b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b09e:	89 d0                	mov    %edx,%eax
f010b0a0:	01 c0                	add    %eax,%eax
f010b0a2:	01 d0                	add    %edx,%eax
f010b0a4:	c1 e0 02             	shl    $0x2,%eax
f010b0a7:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b0ac:	8b 00                	mov    (%eax),%eax
f010b0ae:	83 ec 08             	sub    $0x8,%esp
f010b0b1:	50                   	push   %eax
f010b0b2:	ff 75 08             	pushl  0x8(%ebp)
f010b0b5:	e8 eb 62 02 00       	call   f01313a5 <strcmp>
f010b0ba:	83 c4 10             	add    $0x10,%esp
f010b0bd:	85 c0                	test   %eax,%eax
f010b0bf:	74 0f                	je     f010b0d0 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b0c1:	ff 45 f4             	incl   -0xc(%ebp)
f010b0c4:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0c9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0cc:	7c cd                	jl     f010b09b <get_user_program_info+0xf>
f010b0ce:	eb 01                	jmp    f010b0d1 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b0d0:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b0d1:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0d9:	75 1a                	jne    f010b0f5 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b0db:	83 ec 08             	sub    $0x8,%esp
f010b0de:	ff 75 08             	pushl  0x8(%ebp)
f010b0e1:	68 c5 74 13 f0       	push   $0xf01374c5
f010b0e6:	e8 23 5c ff ff       	call   f0100d0e <cprintf>
f010b0eb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0f3:	eb 11                	jmp    f010b106 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b0f8:	89 d0                	mov    %edx,%eax
f010b0fa:	01 c0                	add    %eax,%eax
f010b0fc:	01 d0                	add    %edx,%eax
f010b0fe:	c1 e0 02             	shl    $0x2,%eax
f010b101:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b106:	c9                   	leave  
f010b107:	c3                   	ret    

f010b108 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b108:	55                   	push   %ebp
f010b109:	89 e5                	mov    %esp,%ebp
f010b10b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b10e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b115:	eb 30                	jmp    f010b147 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b11a:	89 d0                	mov    %edx,%eax
f010b11c:	01 c0                	add    %eax,%eax
f010b11e:	01 d0                	add    %edx,%eax
f010b120:	c1 e0 02             	shl    $0x2,%eax
f010b123:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b128:	8b 00                	mov    (%eax),%eax
f010b12a:	8b 55 08             	mov    0x8(%ebp),%edx
f010b12d:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b133:	83 ec 08             	sub    $0x8,%esp
f010b136:	50                   	push   %eax
f010b137:	52                   	push   %edx
f010b138:	e8 68 62 02 00       	call   f01313a5 <strcmp>
f010b13d:	83 c4 10             	add    $0x10,%esp
f010b140:	85 c0                	test   %eax,%eax
f010b142:	74 0f                	je     f010b153 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b144:	ff 45 f4             	incl   -0xc(%ebp)
f010b147:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b14c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b14f:	7c c6                	jl     f010b117 <get_user_program_info_by_env+0xf>
f010b151:	eb 01                	jmp    f010b154 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b153:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b154:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b159:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b15c:	75 17                	jne    f010b175 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b15e:	83 ec 0c             	sub    $0xc,%esp
f010b161:	68 e0 74 13 f0       	push   $0xf01374e0
f010b166:	e8 a3 5b ff ff       	call   f0100d0e <cprintf>
f010b16b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b16e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b173:	eb 11                	jmp    f010b186 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b178:	89 d0                	mov    %edx,%eax
f010b17a:	01 c0                	add    %eax,%eax
f010b17c:	01 d0                	add    %edx,%eax
f010b17e:	c1 e0 02             	shl    $0x2,%eax
f010b181:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b186:	c9                   	leave  
f010b187:	c3                   	ret    

f010b188 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b188:	55                   	push   %ebp
f010b189:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b18b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18e:	83 f8 13             	cmp    $0x13,%eax
f010b191:	77 0c                	ja     f010b19f <trapname+0x17>
		return excnames[trapno];
f010b193:	8b 45 08             	mov    0x8(%ebp),%eax
f010b196:	8b 04 85 20 79 13 f0 	mov    -0xfec86e0(,%eax,4),%eax
f010b19d:	eb 12                	jmp    f010b1b1 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b19f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b1a3:	75 07                	jne    f010b1ac <trapname+0x24>
		return "System call";
f010b1a5:	b8 00 75 13 f0       	mov    $0xf0137500,%eax
f010b1aa:	eb 05                	jmp    f010b1b1 <trapname+0x29>
	return "(unknown trap)";
f010b1ac:	b8 0c 75 13 f0       	mov    $0xf013750c,%eax
}
f010b1b1:	5d                   	pop    %ebp
f010b1b2:	c3                   	ret    

f010b1b3 <idt_init>:


void
idt_init(void)
{
f010b1b3:	55                   	push   %ebp
f010b1b4:	89 e5                	mov    %esp,%ebp
f010b1b6:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b1b9:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b1be:	66 a3 90 14 88 f0    	mov    %ax,0xf0881490
f010b1c4:	66 c7 05 92 14 88 f0 	movw   $0x8,0xf0881492
f010b1cb:	08 00 
f010b1cd:	a0 94 14 88 f0       	mov    0xf0881494,%al
f010b1d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1d5:	a2 94 14 88 f0       	mov    %al,0xf0881494
f010b1da:	a0 94 14 88 f0       	mov    0xf0881494,%al
f010b1df:	83 e0 1f             	and    $0x1f,%eax
f010b1e2:	a2 94 14 88 f0       	mov    %al,0xf0881494
f010b1e7:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b1ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ef:	83 c8 0e             	or     $0xe,%eax
f010b1f2:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b1f7:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b1fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ff:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b204:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b209:	83 e0 9f             	and    $0xffffff9f,%eax
f010b20c:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b211:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b216:	83 c8 80             	or     $0xffffff80,%eax
f010b219:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b21e:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b223:	c1 e8 10             	shr    $0x10,%eax
f010b226:	66 a3 96 14 88 f0    	mov    %ax,0xf0881496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b22c:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b231:	66 a3 a0 15 88 f0    	mov    %ax,0xf08815a0
f010b237:	66 c7 05 a2 15 88 f0 	movw   $0x8,0xf08815a2
f010b23e:	08 00 
f010b240:	a0 a4 15 88 f0       	mov    0xf08815a4,%al
f010b245:	83 e0 e0             	and    $0xffffffe0,%eax
f010b248:	a2 a4 15 88 f0       	mov    %al,0xf08815a4
f010b24d:	a0 a4 15 88 f0       	mov    0xf08815a4,%al
f010b252:	83 e0 1f             	and    $0x1f,%eax
f010b255:	a2 a4 15 88 f0       	mov    %al,0xf08815a4
f010b25a:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b25f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b262:	83 c8 0e             	or     $0xe,%eax
f010b265:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b26a:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b26f:	83 e0 ef             	and    $0xffffffef,%eax
f010b272:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b277:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b27c:	83 c8 60             	or     $0x60,%eax
f010b27f:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b284:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b289:	83 c8 80             	or     $0xffffff80,%eax
f010b28c:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b291:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b296:	c1 e8 10             	shr    $0x10,%eax
f010b299:	66 a3 a6 15 88 f0    	mov    %ax,0xf08815a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b29f:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b2a4:	66 a3 60 14 88 f0    	mov    %ax,0xf0881460
f010b2aa:	66 c7 05 62 14 88 f0 	movw   $0x8,0xf0881462
f010b2b1:	08 00 
f010b2b3:	a0 64 14 88 f0       	mov    0xf0881464,%al
f010b2b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bb:	a2 64 14 88 f0       	mov    %al,0xf0881464
f010b2c0:	a0 64 14 88 f0       	mov    0xf0881464,%al
f010b2c5:	83 e0 1f             	and    $0x1f,%eax
f010b2c8:	a2 64 14 88 f0       	mov    %al,0xf0881464
f010b2cd:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b2d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2d5:	83 c8 0e             	or     $0xe,%eax
f010b2d8:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b2dd:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b2e2:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e5:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b2ea:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b2ef:	83 e0 9f             	and    $0xffffff9f,%eax
f010b2f2:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b2f7:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b2fc:	83 c8 80             	or     $0xffffff80,%eax
f010b2ff:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b304:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b309:	c1 e8 10             	shr    $0x10,%eax
f010b30c:	66 a3 66 14 88 f0    	mov    %ax,0xf0881466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b312:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b317:	66 a3 20 14 88 f0    	mov    %ax,0xf0881420
f010b31d:	66 c7 05 22 14 88 f0 	movw   $0x8,0xf0881422
f010b324:	08 00 
f010b326:	a0 24 14 88 f0       	mov    0xf0881424,%al
f010b32b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32e:	a2 24 14 88 f0       	mov    %al,0xf0881424
f010b333:	a0 24 14 88 f0       	mov    0xf0881424,%al
f010b338:	83 e0 1f             	and    $0x1f,%eax
f010b33b:	a2 24 14 88 f0       	mov    %al,0xf0881424
f010b340:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b345:	83 e0 f0             	and    $0xfffffff0,%eax
f010b348:	83 c8 0e             	or     $0xe,%eax
f010b34b:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b350:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b355:	83 e0 ef             	and    $0xffffffef,%eax
f010b358:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b35d:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b362:	83 c8 60             	or     $0x60,%eax
f010b365:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b36a:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b36f:	83 c8 80             	or     $0xffffff80,%eax
f010b372:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b377:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b37c:	c1 e8 10             	shr    $0x10,%eax
f010b37f:	66 a3 26 14 88 f0    	mov    %ax,0xf0881426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b385:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b38a:	66 a3 28 14 88 f0    	mov    %ax,0xf0881428
f010b390:	66 c7 05 2a 14 88 f0 	movw   $0x8,0xf088142a
f010b397:	08 00 
f010b399:	a0 2c 14 88 f0       	mov    0xf088142c,%al
f010b39e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3a1:	a2 2c 14 88 f0       	mov    %al,0xf088142c
f010b3a6:	a0 2c 14 88 f0       	mov    0xf088142c,%al
f010b3ab:	83 e0 1f             	and    $0x1f,%eax
f010b3ae:	a2 2c 14 88 f0       	mov    %al,0xf088142c
f010b3b3:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b3b8:	83 c8 0f             	or     $0xf,%eax
f010b3bb:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b3c0:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b3c5:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c8:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b3cd:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b3d2:	83 c8 60             	or     $0x60,%eax
f010b3d5:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b3da:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b3df:	83 c8 80             	or     $0xffffff80,%eax
f010b3e2:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b3e7:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b3ec:	c1 e8 10             	shr    $0x10,%eax
f010b3ef:	66 a3 2e 14 88 f0    	mov    %ax,0xf088142e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b3f5:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b3fa:	66 a3 30 14 88 f0    	mov    %ax,0xf0881430
f010b400:	66 c7 05 32 14 88 f0 	movw   $0x8,0xf0881432
f010b407:	08 00 
f010b409:	a0 34 14 88 f0       	mov    0xf0881434,%al
f010b40e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b411:	a2 34 14 88 f0       	mov    %al,0xf0881434
f010b416:	a0 34 14 88 f0       	mov    0xf0881434,%al
f010b41b:	83 e0 1f             	and    $0x1f,%eax
f010b41e:	a2 34 14 88 f0       	mov    %al,0xf0881434
f010b423:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b428:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42b:	83 c8 0e             	or     $0xe,%eax
f010b42e:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b433:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b438:	83 e0 ef             	and    $0xffffffef,%eax
f010b43b:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b440:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b445:	83 c8 60             	or     $0x60,%eax
f010b448:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b44d:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b452:	83 c8 80             	or     $0xffffff80,%eax
f010b455:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b45a:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b45f:	c1 e8 10             	shr    $0x10,%eax
f010b462:	66 a3 36 14 88 f0    	mov    %ax,0xf0881436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b468:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b46d:	66 a3 38 14 88 f0    	mov    %ax,0xf0881438
f010b473:	66 c7 05 3a 14 88 f0 	movw   $0x8,0xf088143a
f010b47a:	08 00 
f010b47c:	a0 3c 14 88 f0       	mov    0xf088143c,%al
f010b481:	83 e0 e0             	and    $0xffffffe0,%eax
f010b484:	a2 3c 14 88 f0       	mov    %al,0xf088143c
f010b489:	a0 3c 14 88 f0       	mov    0xf088143c,%al
f010b48e:	83 e0 1f             	and    $0x1f,%eax
f010b491:	a2 3c 14 88 f0       	mov    %al,0xf088143c
f010b496:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b49b:	83 c8 0f             	or     $0xf,%eax
f010b49e:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b4a3:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b4a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ab:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b4b0:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b4b5:	83 c8 60             	or     $0x60,%eax
f010b4b8:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b4bd:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b4c2:	83 c8 80             	or     $0xffffff80,%eax
f010b4c5:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b4ca:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b4cf:	c1 e8 10             	shr    $0x10,%eax
f010b4d2:	66 a3 3e 14 88 f0    	mov    %ax,0xf088143e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b4d8:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b4dd:	66 a3 40 14 88 f0    	mov    %ax,0xf0881440
f010b4e3:	66 c7 05 42 14 88 f0 	movw   $0x8,0xf0881442
f010b4ea:	08 00 
f010b4ec:	a0 44 14 88 f0       	mov    0xf0881444,%al
f010b4f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f4:	a2 44 14 88 f0       	mov    %al,0xf0881444
f010b4f9:	a0 44 14 88 f0       	mov    0xf0881444,%al
f010b4fe:	83 e0 1f             	and    $0x1f,%eax
f010b501:	a2 44 14 88 f0       	mov    %al,0xf0881444
f010b506:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b50b:	83 c8 0f             	or     $0xf,%eax
f010b50e:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b513:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b518:	83 e0 ef             	and    $0xffffffef,%eax
f010b51b:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b520:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b525:	83 c8 60             	or     $0x60,%eax
f010b528:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b52d:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b532:	83 c8 80             	or     $0xffffff80,%eax
f010b535:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b53a:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b53f:	c1 e8 10             	shr    $0x10,%eax
f010b542:	66 a3 46 14 88 f0    	mov    %ax,0xf0881446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b548:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b54d:	66 a3 48 14 88 f0    	mov    %ax,0xf0881448
f010b553:	66 c7 05 4a 14 88 f0 	movw   $0x8,0xf088144a
f010b55a:	08 00 
f010b55c:	a0 4c 14 88 f0       	mov    0xf088144c,%al
f010b561:	83 e0 e0             	and    $0xffffffe0,%eax
f010b564:	a2 4c 14 88 f0       	mov    %al,0xf088144c
f010b569:	a0 4c 14 88 f0       	mov    0xf088144c,%al
f010b56e:	83 e0 1f             	and    $0x1f,%eax
f010b571:	a2 4c 14 88 f0       	mov    %al,0xf088144c
f010b576:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b57b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57e:	83 c8 0e             	or     $0xe,%eax
f010b581:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b586:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b58b:	83 e0 ef             	and    $0xffffffef,%eax
f010b58e:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b593:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b598:	83 c8 60             	or     $0x60,%eax
f010b59b:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b5a0:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b5a5:	83 c8 80             	or     $0xffffff80,%eax
f010b5a8:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b5ad:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b5b2:	c1 e8 10             	shr    $0x10,%eax
f010b5b5:	66 a3 4e 14 88 f0    	mov    %ax,0xf088144e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b5bb:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b5c0:	66 a3 50 14 88 f0    	mov    %ax,0xf0881450
f010b5c6:	66 c7 05 52 14 88 f0 	movw   $0x8,0xf0881452
f010b5cd:	08 00 
f010b5cf:	a0 54 14 88 f0       	mov    0xf0881454,%al
f010b5d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d7:	a2 54 14 88 f0       	mov    %al,0xf0881454
f010b5dc:	a0 54 14 88 f0       	mov    0xf0881454,%al
f010b5e1:	83 e0 1f             	and    $0x1f,%eax
f010b5e4:	a2 54 14 88 f0       	mov    %al,0xf0881454
f010b5e9:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b5ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f1:	83 c8 0e             	or     $0xe,%eax
f010b5f4:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b5f9:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b5fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b601:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b606:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b60b:	83 c8 60             	or     $0x60,%eax
f010b60e:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b613:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b618:	83 c8 80             	or     $0xffffff80,%eax
f010b61b:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b620:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b625:	c1 e8 10             	shr    $0x10,%eax
f010b628:	66 a3 56 14 88 f0    	mov    %ax,0xf0881456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b62e:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b633:	66 a3 58 14 88 f0    	mov    %ax,0xf0881458
f010b639:	66 c7 05 5a 14 88 f0 	movw   $0x8,0xf088145a
f010b640:	08 00 
f010b642:	a0 5c 14 88 f0       	mov    0xf088145c,%al
f010b647:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64a:	a2 5c 14 88 f0       	mov    %al,0xf088145c
f010b64f:	a0 5c 14 88 f0       	mov    0xf088145c,%al
f010b654:	83 e0 1f             	and    $0x1f,%eax
f010b657:	a2 5c 14 88 f0       	mov    %al,0xf088145c
f010b65c:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b661:	83 e0 f0             	and    $0xfffffff0,%eax
f010b664:	83 c8 0e             	or     $0xe,%eax
f010b667:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b66c:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b671:	83 e0 ef             	and    $0xffffffef,%eax
f010b674:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b679:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b67e:	83 c8 60             	or     $0x60,%eax
f010b681:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b686:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b68b:	83 c8 80             	or     $0xffffff80,%eax
f010b68e:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b693:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b698:	c1 e8 10             	shr    $0x10,%eax
f010b69b:	66 a3 5e 14 88 f0    	mov    %ax,0xf088145e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b6a1:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b6a6:	66 a3 70 14 88 f0    	mov    %ax,0xf0881470
f010b6ac:	66 c7 05 72 14 88 f0 	movw   $0x8,0xf0881472
f010b6b3:	08 00 
f010b6b5:	a0 74 14 88 f0       	mov    0xf0881474,%al
f010b6ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6bd:	a2 74 14 88 f0       	mov    %al,0xf0881474
f010b6c2:	a0 74 14 88 f0       	mov    0xf0881474,%al
f010b6c7:	83 e0 1f             	and    $0x1f,%eax
f010b6ca:	a2 74 14 88 f0       	mov    %al,0xf0881474
f010b6cf:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b6d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d7:	83 c8 0e             	or     $0xe,%eax
f010b6da:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b6df:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b6e4:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e7:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b6ec:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b6f1:	83 c8 60             	or     $0x60,%eax
f010b6f4:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b6f9:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b6fe:	83 c8 80             	or     $0xffffff80,%eax
f010b701:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b706:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b70b:	c1 e8 10             	shr    $0x10,%eax
f010b70e:	66 a3 76 14 88 f0    	mov    %ax,0xf0881476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b714:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b719:	66 a3 78 14 88 f0    	mov    %ax,0xf0881478
f010b71f:	66 c7 05 7a 14 88 f0 	movw   $0x8,0xf088147a
f010b726:	08 00 
f010b728:	a0 7c 14 88 f0       	mov    0xf088147c,%al
f010b72d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b730:	a2 7c 14 88 f0       	mov    %al,0xf088147c
f010b735:	a0 7c 14 88 f0       	mov    0xf088147c,%al
f010b73a:	83 e0 1f             	and    $0x1f,%eax
f010b73d:	a2 7c 14 88 f0       	mov    %al,0xf088147c
f010b742:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b747:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74a:	83 c8 0e             	or     $0xe,%eax
f010b74d:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b752:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b757:	83 e0 ef             	and    $0xffffffef,%eax
f010b75a:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b75f:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b764:	83 c8 60             	or     $0x60,%eax
f010b767:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b76c:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b771:	83 c8 80             	or     $0xffffff80,%eax
f010b774:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b779:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b77e:	c1 e8 10             	shr    $0x10,%eax
f010b781:	66 a3 7e 14 88 f0    	mov    %ax,0xf088147e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b787:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b78c:	66 a3 80 14 88 f0    	mov    %ax,0xf0881480
f010b792:	66 c7 05 82 14 88 f0 	movw   $0x8,0xf0881482
f010b799:	08 00 
f010b79b:	a0 84 14 88 f0       	mov    0xf0881484,%al
f010b7a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a3:	a2 84 14 88 f0       	mov    %al,0xf0881484
f010b7a8:	a0 84 14 88 f0       	mov    0xf0881484,%al
f010b7ad:	83 e0 1f             	and    $0x1f,%eax
f010b7b0:	a2 84 14 88 f0       	mov    %al,0xf0881484
f010b7b5:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b7ba:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7bd:	83 c8 0e             	or     $0xe,%eax
f010b7c0:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b7c5:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b7ca:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cd:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b7d2:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b7d7:	83 c8 60             	or     $0x60,%eax
f010b7da:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b7df:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b7e4:	83 c8 80             	or     $0xffffff80,%eax
f010b7e7:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b7ec:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b7f1:	c1 e8 10             	shr    $0x10,%eax
f010b7f4:	66 a3 86 14 88 f0    	mov    %ax,0xf0881486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b7fa:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b7ff:	66 a3 88 14 88 f0    	mov    %ax,0xf0881488
f010b805:	66 c7 05 8a 14 88 f0 	movw   $0x8,0xf088148a
f010b80c:	08 00 
f010b80e:	a0 8c 14 88 f0       	mov    0xf088148c,%al
f010b813:	83 e0 e0             	and    $0xffffffe0,%eax
f010b816:	a2 8c 14 88 f0       	mov    %al,0xf088148c
f010b81b:	a0 8c 14 88 f0       	mov    0xf088148c,%al
f010b820:	83 e0 1f             	and    $0x1f,%eax
f010b823:	a2 8c 14 88 f0       	mov    %al,0xf088148c
f010b828:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010b82d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b830:	83 c8 0e             	or     $0xe,%eax
f010b833:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010b838:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010b83d:	83 e0 ef             	and    $0xffffffef,%eax
f010b840:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010b845:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010b84a:	83 c8 60             	or     $0x60,%eax
f010b84d:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010b852:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010b857:	83 c8 80             	or     $0xffffff80,%eax
f010b85a:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010b85f:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b864:	c1 e8 10             	shr    $0x10,%eax
f010b867:	66 a3 8e 14 88 f0    	mov    %ax,0xf088148e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b86d:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b872:	66 a3 a0 14 88 f0    	mov    %ax,0xf08814a0
f010b878:	66 c7 05 a2 14 88 f0 	movw   $0x8,0xf08814a2
f010b87f:	08 00 
f010b881:	a0 a4 14 88 f0       	mov    0xf08814a4,%al
f010b886:	83 e0 e0             	and    $0xffffffe0,%eax
f010b889:	a2 a4 14 88 f0       	mov    %al,0xf08814a4
f010b88e:	a0 a4 14 88 f0       	mov    0xf08814a4,%al
f010b893:	83 e0 1f             	and    $0x1f,%eax
f010b896:	a2 a4 14 88 f0       	mov    %al,0xf08814a4
f010b89b:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010b8a0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a3:	83 c8 0e             	or     $0xe,%eax
f010b8a6:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010b8ab:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010b8b0:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b3:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010b8b8:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010b8bd:	83 c8 60             	or     $0x60,%eax
f010b8c0:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010b8c5:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010b8ca:	83 c8 80             	or     $0xffffff80,%eax
f010b8cd:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010b8d2:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b8d7:	c1 e8 10             	shr    $0x10,%eax
f010b8da:	66 a3 a6 14 88 f0    	mov    %ax,0xf08814a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b8e0:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b8e5:	66 a3 a8 14 88 f0    	mov    %ax,0xf08814a8
f010b8eb:	66 c7 05 aa 14 88 f0 	movw   $0x8,0xf08814aa
f010b8f2:	08 00 
f010b8f4:	a0 ac 14 88 f0       	mov    0xf08814ac,%al
f010b8f9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fc:	a2 ac 14 88 f0       	mov    %al,0xf08814ac
f010b901:	a0 ac 14 88 f0       	mov    0xf08814ac,%al
f010b906:	83 e0 1f             	and    $0x1f,%eax
f010b909:	a2 ac 14 88 f0       	mov    %al,0xf08814ac
f010b90e:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010b913:	83 e0 f0             	and    $0xfffffff0,%eax
f010b916:	83 c8 0e             	or     $0xe,%eax
f010b919:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010b91e:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010b923:	83 e0 ef             	and    $0xffffffef,%eax
f010b926:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010b92b:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010b930:	83 c8 60             	or     $0x60,%eax
f010b933:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010b938:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010b93d:	83 c8 80             	or     $0xffffff80,%eax
f010b940:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010b945:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b94a:	c1 e8 10             	shr    $0x10,%eax
f010b94d:	66 a3 ae 14 88 f0    	mov    %ax,0xf08814ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b953:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b958:	66 a3 b0 14 88 f0    	mov    %ax,0xf08814b0
f010b95e:	66 c7 05 b2 14 88 f0 	movw   $0x8,0xf08814b2
f010b965:	08 00 
f010b967:	a0 b4 14 88 f0       	mov    0xf08814b4,%al
f010b96c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96f:	a2 b4 14 88 f0       	mov    %al,0xf08814b4
f010b974:	a0 b4 14 88 f0       	mov    0xf08814b4,%al
f010b979:	83 e0 1f             	and    $0x1f,%eax
f010b97c:	a2 b4 14 88 f0       	mov    %al,0xf08814b4
f010b981:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010b986:	83 e0 f0             	and    $0xfffffff0,%eax
f010b989:	83 c8 0e             	or     $0xe,%eax
f010b98c:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010b991:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010b996:	83 e0 ef             	and    $0xffffffef,%eax
f010b999:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010b99e:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010b9a3:	83 c8 60             	or     $0x60,%eax
f010b9a6:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010b9ab:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010b9b0:	83 c8 80             	or     $0xffffff80,%eax
f010b9b3:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010b9b8:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b9bd:	c1 e8 10             	shr    $0x10,%eax
f010b9c0:	66 a3 b6 14 88 f0    	mov    %ax,0xf08814b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b9c6:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010b9cb:	66 a3 b8 14 88 f0    	mov    %ax,0xf08814b8
f010b9d1:	66 c7 05 ba 14 88 f0 	movw   $0x8,0xf08814ba
f010b9d8:	08 00 
f010b9da:	a0 bc 14 88 f0       	mov    0xf08814bc,%al
f010b9df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e2:	a2 bc 14 88 f0       	mov    %al,0xf08814bc
f010b9e7:	a0 bc 14 88 f0       	mov    0xf08814bc,%al
f010b9ec:	83 e0 1f             	and    $0x1f,%eax
f010b9ef:	a2 bc 14 88 f0       	mov    %al,0xf08814bc
f010b9f4:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010b9f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fc:	83 c8 0e             	or     $0xe,%eax
f010b9ff:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010ba04:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010ba09:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0c:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010ba11:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010ba16:	83 c8 60             	or     $0x60,%eax
f010ba19:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010ba1e:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010ba23:	83 c8 80             	or     $0xffffff80,%eax
f010ba26:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010ba2b:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010ba30:	c1 e8 10             	shr    $0x10,%eax
f010ba33:	66 a3 be 14 88 f0    	mov    %ax,0xf08814be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010ba39:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010ba3e:	66 a3 20 15 88 f0    	mov    %ax,0xf0881520
f010ba44:	66 c7 05 22 15 88 f0 	movw   $0x8,0xf0881522
f010ba4b:	08 00 
f010ba4d:	a0 24 15 88 f0       	mov    0xf0881524,%al
f010ba52:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba55:	a2 24 15 88 f0       	mov    %al,0xf0881524
f010ba5a:	a0 24 15 88 f0       	mov    0xf0881524,%al
f010ba5f:	83 e0 1f             	and    $0x1f,%eax
f010ba62:	a2 24 15 88 f0       	mov    %al,0xf0881524
f010ba67:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010ba6c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6f:	83 c8 0e             	or     $0xe,%eax
f010ba72:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010ba77:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010ba7c:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7f:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010ba84:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010ba89:	83 c8 60             	or     $0x60,%eax
f010ba8c:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010ba91:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010ba96:	83 c8 80             	or     $0xffffff80,%eax
f010ba99:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010ba9e:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010baa3:	c1 e8 10             	shr    $0x10,%eax
f010baa6:	66 a3 26 15 88 f0    	mov    %ax,0xf0881526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010baac:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bab1:	66 a3 28 15 88 f0    	mov    %ax,0xf0881528
f010bab7:	66 c7 05 2a 15 88 f0 	movw   $0x8,0xf088152a
f010babe:	08 00 
f010bac0:	a0 2c 15 88 f0       	mov    0xf088152c,%al
f010bac5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac8:	a2 2c 15 88 f0       	mov    %al,0xf088152c
f010bacd:	a0 2c 15 88 f0       	mov    0xf088152c,%al
f010bad2:	83 e0 1f             	and    $0x1f,%eax
f010bad5:	a2 2c 15 88 f0       	mov    %al,0xf088152c
f010bada:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010badf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae2:	83 c8 0e             	or     $0xe,%eax
f010bae5:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010baea:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010baef:	83 e0 ef             	and    $0xffffffef,%eax
f010baf2:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010baf7:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bafc:	83 c8 60             	or     $0x60,%eax
f010baff:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bb04:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bb09:	83 c8 80             	or     $0xffffff80,%eax
f010bb0c:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bb11:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bb16:	c1 e8 10             	shr    $0x10,%eax
f010bb19:	66 a3 2e 15 88 f0    	mov    %ax,0xf088152e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bb1f:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb24:	66 a3 30 15 88 f0    	mov    %ax,0xf0881530
f010bb2a:	66 c7 05 32 15 88 f0 	movw   $0x8,0xf0881532
f010bb31:	08 00 
f010bb33:	a0 34 15 88 f0       	mov    0xf0881534,%al
f010bb38:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb3b:	a2 34 15 88 f0       	mov    %al,0xf0881534
f010bb40:	a0 34 15 88 f0       	mov    0xf0881534,%al
f010bb45:	83 e0 1f             	and    $0x1f,%eax
f010bb48:	a2 34 15 88 f0       	mov    %al,0xf0881534
f010bb4d:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bb52:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb55:	83 c8 0e             	or     $0xe,%eax
f010bb58:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bb5d:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bb62:	83 e0 ef             	and    $0xffffffef,%eax
f010bb65:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bb6a:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bb6f:	83 c8 60             	or     $0x60,%eax
f010bb72:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bb77:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bb7c:	83 c8 80             	or     $0xffffff80,%eax
f010bb7f:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bb84:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb89:	c1 e8 10             	shr    $0x10,%eax
f010bb8c:	66 a3 36 15 88 f0    	mov    %ax,0xf0881536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bb92:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bb97:	66 a3 38 15 88 f0    	mov    %ax,0xf0881538
f010bb9d:	66 c7 05 3a 15 88 f0 	movw   $0x8,0xf088153a
f010bba4:	08 00 
f010bba6:	a0 3c 15 88 f0       	mov    0xf088153c,%al
f010bbab:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbae:	a2 3c 15 88 f0       	mov    %al,0xf088153c
f010bbb3:	a0 3c 15 88 f0       	mov    0xf088153c,%al
f010bbb8:	83 e0 1f             	and    $0x1f,%eax
f010bbbb:	a2 3c 15 88 f0       	mov    %al,0xf088153c
f010bbc0:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bbc5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc8:	83 c8 0e             	or     $0xe,%eax
f010bbcb:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bbd0:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bbd5:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd8:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bbdd:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bbe2:	83 c8 60             	or     $0x60,%eax
f010bbe5:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bbea:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bbef:	83 c8 80             	or     $0xffffff80,%eax
f010bbf2:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bbf7:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bbfc:	c1 e8 10             	shr    $0x10,%eax
f010bbff:	66 a3 3e 15 88 f0    	mov    %ax,0xf088153e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bc05:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc0a:	66 a3 40 15 88 f0    	mov    %ax,0xf0881540
f010bc10:	66 c7 05 42 15 88 f0 	movw   $0x8,0xf0881542
f010bc17:	08 00 
f010bc19:	a0 44 15 88 f0       	mov    0xf0881544,%al
f010bc1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc21:	a2 44 15 88 f0       	mov    %al,0xf0881544
f010bc26:	a0 44 15 88 f0       	mov    0xf0881544,%al
f010bc2b:	83 e0 1f             	and    $0x1f,%eax
f010bc2e:	a2 44 15 88 f0       	mov    %al,0xf0881544
f010bc33:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010bc38:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc3b:	83 c8 0e             	or     $0xe,%eax
f010bc3e:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010bc43:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010bc48:	83 e0 ef             	and    $0xffffffef,%eax
f010bc4b:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010bc50:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010bc55:	83 c8 60             	or     $0x60,%eax
f010bc58:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010bc5d:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010bc62:	83 c8 80             	or     $0xffffff80,%eax
f010bc65:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010bc6a:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc6f:	c1 e8 10             	shr    $0x10,%eax
f010bc72:	66 a3 46 15 88 f0    	mov    %ax,0xf0881546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bc78:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bc7d:	66 a3 48 15 88 f0    	mov    %ax,0xf0881548
f010bc83:	66 c7 05 4a 15 88 f0 	movw   $0x8,0xf088154a
f010bc8a:	08 00 
f010bc8c:	a0 4c 15 88 f0       	mov    0xf088154c,%al
f010bc91:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc94:	a2 4c 15 88 f0       	mov    %al,0xf088154c
f010bc99:	a0 4c 15 88 f0       	mov    0xf088154c,%al
f010bc9e:	83 e0 1f             	and    $0x1f,%eax
f010bca1:	a2 4c 15 88 f0       	mov    %al,0xf088154c
f010bca6:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bcab:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcae:	83 c8 0e             	or     $0xe,%eax
f010bcb1:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bcb6:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bcbb:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbe:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bcc3:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bcc8:	83 c8 60             	or     $0x60,%eax
f010bccb:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bcd0:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bcd5:	83 c8 80             	or     $0xffffff80,%eax
f010bcd8:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bcdd:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bce2:	c1 e8 10             	shr    $0x10,%eax
f010bce5:	66 a3 4e 15 88 f0    	mov    %ax,0xf088154e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bceb:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bcf0:	66 a3 50 15 88 f0    	mov    %ax,0xf0881550
f010bcf6:	66 c7 05 52 15 88 f0 	movw   $0x8,0xf0881552
f010bcfd:	08 00 
f010bcff:	a0 54 15 88 f0       	mov    0xf0881554,%al
f010bd04:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd07:	a2 54 15 88 f0       	mov    %al,0xf0881554
f010bd0c:	a0 54 15 88 f0       	mov    0xf0881554,%al
f010bd11:	83 e0 1f             	and    $0x1f,%eax
f010bd14:	a2 54 15 88 f0       	mov    %al,0xf0881554
f010bd19:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bd1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd21:	83 c8 0e             	or     $0xe,%eax
f010bd24:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bd29:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bd2e:	83 e0 ef             	and    $0xffffffef,%eax
f010bd31:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bd36:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bd3b:	83 c8 60             	or     $0x60,%eax
f010bd3e:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bd43:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bd48:	83 c8 80             	or     $0xffffff80,%eax
f010bd4b:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bd50:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bd55:	c1 e8 10             	shr    $0x10,%eax
f010bd58:	66 a3 56 15 88 f0    	mov    %ax,0xf0881556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bd5e:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bd63:	66 a3 58 15 88 f0    	mov    %ax,0xf0881558
f010bd69:	66 c7 05 5a 15 88 f0 	movw   $0x8,0xf088155a
f010bd70:	08 00 
f010bd72:	a0 5c 15 88 f0       	mov    0xf088155c,%al
f010bd77:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7a:	a2 5c 15 88 f0       	mov    %al,0xf088155c
f010bd7f:	a0 5c 15 88 f0       	mov    0xf088155c,%al
f010bd84:	83 e0 1f             	and    $0x1f,%eax
f010bd87:	a2 5c 15 88 f0       	mov    %al,0xf088155c
f010bd8c:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bd91:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd94:	83 c8 0e             	or     $0xe,%eax
f010bd97:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bd9c:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bda1:	83 e0 ef             	and    $0xffffffef,%eax
f010bda4:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bda9:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bdae:	83 c8 60             	or     $0x60,%eax
f010bdb1:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bdb6:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bdbb:	83 c8 80             	or     $0xffffff80,%eax
f010bdbe:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bdc3:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bdc8:	c1 e8 10             	shr    $0x10,%eax
f010bdcb:	66 a3 5e 15 88 f0    	mov    %ax,0xf088155e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bdd1:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010bdd6:	66 a3 60 15 88 f0    	mov    %ax,0xf0881560
f010bddc:	66 c7 05 62 15 88 f0 	movw   $0x8,0xf0881562
f010bde3:	08 00 
f010bde5:	a0 64 15 88 f0       	mov    0xf0881564,%al
f010bdea:	83 e0 e0             	and    $0xffffffe0,%eax
f010bded:	a2 64 15 88 f0       	mov    %al,0xf0881564
f010bdf2:	a0 64 15 88 f0       	mov    0xf0881564,%al
f010bdf7:	83 e0 1f             	and    $0x1f,%eax
f010bdfa:	a2 64 15 88 f0       	mov    %al,0xf0881564
f010bdff:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010be04:	83 e0 f0             	and    $0xfffffff0,%eax
f010be07:	83 c8 0e             	or     $0xe,%eax
f010be0a:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010be0f:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010be14:	83 e0 ef             	and    $0xffffffef,%eax
f010be17:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010be1c:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010be21:	83 c8 60             	or     $0x60,%eax
f010be24:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010be29:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010be2e:	83 c8 80             	or     $0xffffff80,%eax
f010be31:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010be36:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010be3b:	c1 e8 10             	shr    $0x10,%eax
f010be3e:	66 a3 66 15 88 f0    	mov    %ax,0xf0881566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010be44:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010be49:	66 a3 68 15 88 f0    	mov    %ax,0xf0881568
f010be4f:	66 c7 05 6a 15 88 f0 	movw   $0x8,0xf088156a
f010be56:	08 00 
f010be58:	a0 6c 15 88 f0       	mov    0xf088156c,%al
f010be5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010be60:	a2 6c 15 88 f0       	mov    %al,0xf088156c
f010be65:	a0 6c 15 88 f0       	mov    0xf088156c,%al
f010be6a:	83 e0 1f             	and    $0x1f,%eax
f010be6d:	a2 6c 15 88 f0       	mov    %al,0xf088156c
f010be72:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010be77:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7a:	83 c8 0e             	or     $0xe,%eax
f010be7d:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010be82:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010be87:	83 e0 ef             	and    $0xffffffef,%eax
f010be8a:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010be8f:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010be94:	83 c8 60             	or     $0x60,%eax
f010be97:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010be9c:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010bea1:	83 c8 80             	or     $0xffffff80,%eax
f010bea4:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010bea9:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010beae:	c1 e8 10             	shr    $0x10,%eax
f010beb1:	66 a3 6e 15 88 f0    	mov    %ax,0xf088156e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010beb7:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bebc:	66 a3 70 15 88 f0    	mov    %ax,0xf0881570
f010bec2:	66 c7 05 72 15 88 f0 	movw   $0x8,0xf0881572
f010bec9:	08 00 
f010becb:	a0 74 15 88 f0       	mov    0xf0881574,%al
f010bed0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed3:	a2 74 15 88 f0       	mov    %al,0xf0881574
f010bed8:	a0 74 15 88 f0       	mov    0xf0881574,%al
f010bedd:	83 e0 1f             	and    $0x1f,%eax
f010bee0:	a2 74 15 88 f0       	mov    %al,0xf0881574
f010bee5:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010beea:	83 e0 f0             	and    $0xfffffff0,%eax
f010beed:	83 c8 0e             	or     $0xe,%eax
f010bef0:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010bef5:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010befa:	83 e0 ef             	and    $0xffffffef,%eax
f010befd:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010bf02:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010bf07:	83 c8 60             	or     $0x60,%eax
f010bf0a:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010bf0f:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010bf14:	83 c8 80             	or     $0xffffff80,%eax
f010bf17:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010bf1c:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bf21:	c1 e8 10             	shr    $0x10,%eax
f010bf24:	66 a3 76 15 88 f0    	mov    %ax,0xf0881576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bf2a:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf2f:	66 a3 78 15 88 f0    	mov    %ax,0xf0881578
f010bf35:	66 c7 05 7a 15 88 f0 	movw   $0x8,0xf088157a
f010bf3c:	08 00 
f010bf3e:	a0 7c 15 88 f0       	mov    0xf088157c,%al
f010bf43:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf46:	a2 7c 15 88 f0       	mov    %al,0xf088157c
f010bf4b:	a0 7c 15 88 f0       	mov    0xf088157c,%al
f010bf50:	83 e0 1f             	and    $0x1f,%eax
f010bf53:	a2 7c 15 88 f0       	mov    %al,0xf088157c
f010bf58:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010bf5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf60:	83 c8 0e             	or     $0xe,%eax
f010bf63:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010bf68:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010bf6d:	83 e0 ef             	and    $0xffffffef,%eax
f010bf70:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010bf75:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010bf7a:	83 c8 60             	or     $0x60,%eax
f010bf7d:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010bf82:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010bf87:	83 c8 80             	or     $0xffffff80,%eax
f010bf8a:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010bf8f:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf94:	c1 e8 10             	shr    $0x10,%eax
f010bf97:	66 a3 7e 15 88 f0    	mov    %ax,0xf088157e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bf9d:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010bfa2:	66 a3 80 15 88 f0    	mov    %ax,0xf0881580
f010bfa8:	66 c7 05 82 15 88 f0 	movw   $0x8,0xf0881582
f010bfaf:	08 00 
f010bfb1:	a0 84 15 88 f0       	mov    0xf0881584,%al
f010bfb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb9:	a2 84 15 88 f0       	mov    %al,0xf0881584
f010bfbe:	a0 84 15 88 f0       	mov    0xf0881584,%al
f010bfc3:	83 e0 1f             	and    $0x1f,%eax
f010bfc6:	a2 84 15 88 f0       	mov    %al,0xf0881584
f010bfcb:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010bfd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd3:	83 c8 0e             	or     $0xe,%eax
f010bfd6:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010bfdb:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010bfe0:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe3:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010bfe8:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010bfed:	83 c8 60             	or     $0x60,%eax
f010bff0:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010bff5:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010bffa:	83 c8 80             	or     $0xffffff80,%eax
f010bffd:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010c002:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010c007:	c1 e8 10             	shr    $0x10,%eax
f010c00a:	66 a3 86 15 88 f0    	mov    %ax,0xf0881586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c010:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c015:	66 a3 88 15 88 f0    	mov    %ax,0xf0881588
f010c01b:	66 c7 05 8a 15 88 f0 	movw   $0x8,0xf088158a
f010c022:	08 00 
f010c024:	a0 8c 15 88 f0       	mov    0xf088158c,%al
f010c029:	83 e0 e0             	and    $0xffffffe0,%eax
f010c02c:	a2 8c 15 88 f0       	mov    %al,0xf088158c
f010c031:	a0 8c 15 88 f0       	mov    0xf088158c,%al
f010c036:	83 e0 1f             	and    $0x1f,%eax
f010c039:	a2 8c 15 88 f0       	mov    %al,0xf088158c
f010c03e:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c043:	83 e0 f0             	and    $0xfffffff0,%eax
f010c046:	83 c8 0e             	or     $0xe,%eax
f010c049:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c04e:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c053:	83 e0 ef             	and    $0xffffffef,%eax
f010c056:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c05b:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c060:	83 c8 60             	or     $0x60,%eax
f010c063:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c068:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c06d:	83 c8 80             	or     $0xffffff80,%eax
f010c070:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c075:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c07a:	c1 e8 10             	shr    $0x10,%eax
f010c07d:	66 a3 8e 15 88 f0    	mov    %ax,0xf088158e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c083:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c088:	66 a3 90 15 88 f0    	mov    %ax,0xf0881590
f010c08e:	66 c7 05 92 15 88 f0 	movw   $0x8,0xf0881592
f010c095:	08 00 
f010c097:	a0 94 15 88 f0       	mov    0xf0881594,%al
f010c09c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c09f:	a2 94 15 88 f0       	mov    %al,0xf0881594
f010c0a4:	a0 94 15 88 f0       	mov    0xf0881594,%al
f010c0a9:	83 e0 1f             	and    $0x1f,%eax
f010c0ac:	a2 94 15 88 f0       	mov    %al,0xf0881594
f010c0b1:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c0b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b9:	83 c8 0e             	or     $0xe,%eax
f010c0bc:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c0c1:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c0c6:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c9:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c0ce:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c0d3:	83 c8 60             	or     $0x60,%eax
f010c0d6:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c0db:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c0e0:	83 c8 80             	or     $0xffffff80,%eax
f010c0e3:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c0e8:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c0ed:	c1 e8 10             	shr    $0x10,%eax
f010c0f0:	66 a3 96 15 88 f0    	mov    %ax,0xf0881596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c0f6:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c0fb:	66 a3 98 15 88 f0    	mov    %ax,0xf0881598
f010c101:	66 c7 05 9a 15 88 f0 	movw   $0x8,0xf088159a
f010c108:	08 00 
f010c10a:	a0 9c 15 88 f0       	mov    0xf088159c,%al
f010c10f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c112:	a2 9c 15 88 f0       	mov    %al,0xf088159c
f010c117:	a0 9c 15 88 f0       	mov    0xf088159c,%al
f010c11c:	83 e0 1f             	and    $0x1f,%eax
f010c11f:	a2 9c 15 88 f0       	mov    %al,0xf088159c
f010c124:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c129:	83 e0 f0             	and    $0xfffffff0,%eax
f010c12c:	83 c8 0e             	or     $0xe,%eax
f010c12f:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c134:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c139:	83 e0 ef             	and    $0xffffffef,%eax
f010c13c:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c141:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c146:	83 c8 60             	or     $0x60,%eax
f010c149:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c14e:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c153:	83 c8 80             	or     $0xffffff80,%eax
f010c156:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c15b:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c160:	c1 e8 10             	shr    $0x10,%eax
f010c163:	66 a3 9e 15 88 f0    	mov    %ax,0xf088159e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c169:	c7 05 44 1c 88 f0 00 	movl   $0xefc00000,0xf0881c44
f010c170:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c173:	66 c7 05 48 1c 88 f0 	movw   $0x10,0xf0881c48
f010c17a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c17c:	66 c7 05 e8 28 19 f0 	movw   $0x68,0xf01928e8
f010c183:	68 00 
f010c185:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c18a:	66 a3 ea 28 19 f0    	mov    %ax,0xf01928ea
f010c190:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c195:	c1 e8 10             	shr    $0x10,%eax
f010c198:	a2 ec 28 19 f0       	mov    %al,0xf01928ec
f010c19d:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a5:	83 c8 09             	or     $0x9,%eax
f010c1a8:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ad:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1b2:	83 c8 10             	or     $0x10,%eax
f010c1b5:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ba:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1bf:	83 e0 9f             	and    $0xffffff9f,%eax
f010c1c2:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1c7:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1cc:	83 c8 80             	or     $0xffffff80,%eax
f010c1cf:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1d4:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dc:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1e1:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1e9:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1ee:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1f3:	83 e0 df             	and    $0xffffffdf,%eax
f010c1f6:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1fb:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c200:	83 c8 40             	or     $0x40,%eax
f010c203:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c208:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c20d:	83 e0 7f             	and    $0x7f,%eax
f010c210:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c215:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c21a:	c1 e8 18             	shr    $0x18,%eax
f010c21d:	a2 ef 28 19 f0       	mov    %al,0xf01928ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c222:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c227:	83 e0 ef             	and    $0xffffffef,%eax
f010c22a:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c22f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c235:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c239:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c23c:	0f 01 1d 1c 2d 19 f0 	lidtl  0xf0192d1c
}
f010c243:	90                   	nop
f010c244:	c9                   	leave  
f010c245:	c3                   	ret    

f010c246 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c246:	55                   	push   %ebp
f010c247:	89 e5                	mov    %esp,%ebp
f010c249:	53                   	push   %ebx
f010c24a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 08             	pushl  0x8(%ebp)
f010c253:	68 1b 75 13 f0       	push   $0xf013751b
f010c258:	e8 b1 4a ff ff       	call   f0100d0e <cprintf>
f010c25d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c260:	8b 45 08             	mov    0x8(%ebp),%eax
f010c263:	83 ec 0c             	sub    $0xc,%esp
f010c266:	50                   	push   %eax
f010c267:	e8 fd 00 00 00       	call   f010c369 <print_regs>
f010c26c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c272:	8b 40 20             	mov    0x20(%eax),%eax
f010c275:	0f b7 c0             	movzwl %ax,%eax
f010c278:	83 ec 08             	sub    $0x8,%esp
f010c27b:	50                   	push   %eax
f010c27c:	68 2d 75 13 f0       	push   $0xf013752d
f010c281:	e8 88 4a ff ff       	call   f0100d0e <cprintf>
f010c286:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c289:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28c:	8b 40 24             	mov    0x24(%eax),%eax
f010c28f:	0f b7 c0             	movzwl %ax,%eax
f010c292:	83 ec 08             	sub    $0x8,%esp
f010c295:	50                   	push   %eax
f010c296:	68 40 75 13 f0       	push   $0xf0137540
f010c29b:	e8 6e 4a ff ff       	call   f0100d0e <cprintf>
f010c2a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a6:	8b 58 28             	mov    0x28(%eax),%ebx
f010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ac:	8b 40 28             	mov    0x28(%eax),%eax
f010c2af:	83 ec 0c             	sub    $0xc,%esp
f010c2b2:	50                   	push   %eax
f010c2b3:	e8 d0 ee ff ff       	call   f010b188 <trapname>
f010c2b8:	83 c4 10             	add    $0x10,%esp
f010c2bb:	89 c2                	mov    %eax,%edx
f010c2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c2c3:	53                   	push   %ebx
f010c2c4:	52                   	push   %edx
f010c2c5:	50                   	push   %eax
f010c2c6:	68 53 75 13 f0       	push   $0xf0137553
f010c2cb:	e8 3e 4a ff ff       	call   f0100d0e <cprintf>
f010c2d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c2d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d6:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c2d9:	83 ec 08             	sub    $0x8,%esp
f010c2dc:	50                   	push   %eax
f010c2dd:	68 6a 75 13 f0       	push   $0xf013756a
f010c2e2:	e8 27 4a ff ff       	call   f0100d0e <cprintf>
f010c2e7:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ed:	8b 40 30             	mov    0x30(%eax),%eax
f010c2f0:	83 ec 08             	sub    $0x8,%esp
f010c2f3:	50                   	push   %eax
f010c2f4:	68 79 75 13 f0       	push   $0xf0137579
f010c2f9:	e8 10 4a ff ff       	call   f0100d0e <cprintf>
f010c2fe:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c301:	8b 45 08             	mov    0x8(%ebp),%eax
f010c304:	8b 40 34             	mov    0x34(%eax),%eax
f010c307:	0f b7 c0             	movzwl %ax,%eax
f010c30a:	83 ec 08             	sub    $0x8,%esp
f010c30d:	50                   	push   %eax
f010c30e:	68 88 75 13 f0       	push   $0xf0137588
f010c313:	e8 f6 49 ff ff       	call   f0100d0e <cprintf>
f010c318:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31e:	8b 40 38             	mov    0x38(%eax),%eax
f010c321:	83 ec 08             	sub    $0x8,%esp
f010c324:	50                   	push   %eax
f010c325:	68 9b 75 13 f0       	push   $0xf013759b
f010c32a:	e8 df 49 ff ff       	call   f0100d0e <cprintf>
f010c32f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c332:	8b 45 08             	mov    0x8(%ebp),%eax
f010c335:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c338:	83 ec 08             	sub    $0x8,%esp
f010c33b:	50                   	push   %eax
f010c33c:	68 aa 75 13 f0       	push   $0xf01375aa
f010c341:	e8 c8 49 ff ff       	call   f0100d0e <cprintf>
f010c346:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c349:	8b 45 08             	mov    0x8(%ebp),%eax
f010c34c:	8b 40 40             	mov    0x40(%eax),%eax
f010c34f:	0f b7 c0             	movzwl %ax,%eax
f010c352:	83 ec 08             	sub    $0x8,%esp
f010c355:	50                   	push   %eax
f010c356:	68 b9 75 13 f0       	push   $0xf01375b9
f010c35b:	e8 ae 49 ff ff       	call   f0100d0e <cprintf>
f010c360:	83 c4 10             	add    $0x10,%esp
}
f010c363:	90                   	nop
f010c364:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c367:	c9                   	leave  
f010c368:	c3                   	ret    

f010c369 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c369:	55                   	push   %ebp
f010c36a:	89 e5                	mov    %esp,%ebp
f010c36c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c372:	8b 00                	mov    (%eax),%eax
f010c374:	83 ec 08             	sub    $0x8,%esp
f010c377:	50                   	push   %eax
f010c378:	68 cc 75 13 f0       	push   $0xf01375cc
f010c37d:	e8 8c 49 ff ff       	call   f0100d0e <cprintf>
f010c382:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c385:	8b 45 08             	mov    0x8(%ebp),%eax
f010c388:	8b 40 04             	mov    0x4(%eax),%eax
f010c38b:	83 ec 08             	sub    $0x8,%esp
f010c38e:	50                   	push   %eax
f010c38f:	68 db 75 13 f0       	push   $0xf01375db
f010c394:	e8 75 49 ff ff       	call   f0100d0e <cprintf>
f010c399:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c39f:	8b 40 08             	mov    0x8(%eax),%eax
f010c3a2:	83 ec 08             	sub    $0x8,%esp
f010c3a5:	50                   	push   %eax
f010c3a6:	68 ea 75 13 f0       	push   $0xf01375ea
f010c3ab:	e8 5e 49 ff ff       	call   f0100d0e <cprintf>
f010c3b0:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b6:	8b 40 0c             	mov    0xc(%eax),%eax
f010c3b9:	83 ec 08             	sub    $0x8,%esp
f010c3bc:	50                   	push   %eax
f010c3bd:	68 f9 75 13 f0       	push   $0xf01375f9
f010c3c2:	e8 47 49 ff ff       	call   f0100d0e <cprintf>
f010c3c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3cd:	8b 40 10             	mov    0x10(%eax),%eax
f010c3d0:	83 ec 08             	sub    $0x8,%esp
f010c3d3:	50                   	push   %eax
f010c3d4:	68 08 76 13 f0       	push   $0xf0137608
f010c3d9:	e8 30 49 ff ff       	call   f0100d0e <cprintf>
f010c3de:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c3e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e4:	8b 40 14             	mov    0x14(%eax),%eax
f010c3e7:	83 ec 08             	sub    $0x8,%esp
f010c3ea:	50                   	push   %eax
f010c3eb:	68 17 76 13 f0       	push   $0xf0137617
f010c3f0:	e8 19 49 ff ff       	call   f0100d0e <cprintf>
f010c3f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fb:	8b 40 18             	mov    0x18(%eax),%eax
f010c3fe:	83 ec 08             	sub    $0x8,%esp
f010c401:	50                   	push   %eax
f010c402:	68 26 76 13 f0       	push   $0xf0137626
f010c407:	e8 02 49 ff ff       	call   f0100d0e <cprintf>
f010c40c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c40f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c412:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c415:	83 ec 08             	sub    $0x8,%esp
f010c418:	50                   	push   %eax
f010c419:	68 35 76 13 f0       	push   $0xf0137635
f010c41e:	e8 eb 48 ff ff       	call   f0100d0e <cprintf>
f010c423:	83 c4 10             	add    $0x10,%esp
}
f010c426:	90                   	nop
f010c427:	c9                   	leave  
f010c428:	c3                   	ret    

f010c429 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c429:	55                   	push   %ebp
f010c42a:	89 e5                	mov    %esp,%ebp
f010c42c:	57                   	push   %edi
f010c42d:	56                   	push   %esi
f010c42e:	53                   	push   %ebx
f010c42f:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c432:	8b 45 08             	mov    0x8(%ebp),%eax
f010c435:	8b 40 28             	mov    0x28(%eax),%eax
f010c438:	83 f8 0e             	cmp    $0xe,%eax
f010c43b:	75 29                	jne    f010c466 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c43d:	83 ec 0c             	sub    $0xc,%esp
f010c440:	6a 01                	push   $0x1
f010c442:	e8 fc 18 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010c447:	83 c4 10             	add    $0x10,%esp
f010c44a:	85 c0                	test   %eax,%eax
f010c44c:	74 05                	je     f010c453 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c44e:	e8 d9 95 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c453:	83 ec 0c             	sub    $0xc,%esp
f010c456:	ff 75 08             	pushl  0x8(%ebp)
f010c459:	e8 51 02 00 00       	call   f010c6af <fault_handler>
f010c45e:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c461:	e9 bb 00 00 00       	jmp    f010c521 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c466:	8b 45 08             	mov    0x8(%ebp),%eax
f010c469:	8b 40 28             	mov    0x28(%eax),%eax
f010c46c:	83 f8 30             	cmp    $0x30,%eax
f010c46f:	75 42                	jne    f010c4b3 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c471:	8b 45 08             	mov    0x8(%ebp),%eax
f010c474:	8b 78 04             	mov    0x4(%eax),%edi
f010c477:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47a:	8b 30                	mov    (%eax),%esi
f010c47c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47f:	8b 58 10             	mov    0x10(%eax),%ebx
f010c482:	8b 45 08             	mov    0x8(%ebp),%eax
f010c485:	8b 48 18             	mov    0x18(%eax),%ecx
f010c488:	8b 45 08             	mov    0x8(%ebp),%eax
f010c48b:	8b 50 14             	mov    0x14(%eax),%edx
f010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c491:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c494:	83 ec 08             	sub    $0x8,%esp
f010c497:	57                   	push   %edi
f010c498:	56                   	push   %esi
f010c499:	53                   	push   %ebx
f010c49a:	51                   	push   %ecx
f010c49b:	52                   	push   %edx
f010c49c:	50                   	push   %eax
f010c49d:	e8 ec 0f 00 00       	call   f010d48e <syscall>
f010c4a2:	83 c4 20             	add    $0x20,%esp
f010c4a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c4ae:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4b1:	eb 6e                	jmp    f010c521 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b6:	8b 40 28             	mov    0x28(%eax),%eax
f010c4b9:	83 f8 08             	cmp    $0x8,%eax
f010c4bc:	75 17                	jne    f010c4d5 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c4be:	83 ec 04             	sub    $0x4,%esp
f010c4c1:	68 44 76 13 f0       	push   $0xf0137644
f010c4c6:	68 e7 00 00 00       	push   $0xe7
f010c4cb:	68 53 76 13 f0       	push   $0xf0137653
f010c4d0:	e8 30 3d ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c4d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4d8:	8b 40 28             	mov    0x28(%eax),%eax
f010c4db:	83 f8 20             	cmp    $0x20,%eax
f010c4de:	75 07                	jne    f010c4e7 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c4e0:	e8 26 95 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4e5:	eb 3a                	jmp    f010c521 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ea:	8b 40 34             	mov    0x34(%eax),%eax
f010c4ed:	66 83 f8 08          	cmp    $0x8,%ax
f010c4f1:	75 17                	jne    f010c50a <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c4f3:	83 ec 04             	sub    $0x4,%esp
f010c4f6:	68 64 76 13 f0       	push   $0xf0137664
f010c4fb:	68 f4 00 00 00       	push   $0xf4
f010c500:	68 53 76 13 f0       	push   $0xf0137653
f010c505:	e8 fb 3c ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c50a:	83 ec 04             	sub    $0x4,%esp
f010c50d:	68 80 76 13 f0       	push   $0xf0137680
f010c512:	68 f8 00 00 00       	push   $0xf8
f010c517:	68 53 76 13 f0       	push   $0xf0137653
f010c51c:	e8 e4 3c ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c521:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c524:	5b                   	pop    %ebx
f010c525:	5e                   	pop    %esi
f010c526:	5f                   	pop    %edi
f010c527:	5d                   	pop    %ebp
f010c528:	c3                   	ret    

f010c529 <trap>:

void trap(struct Trapframe *tf)
{
f010c529:	55                   	push   %ebp
f010c52a:	89 e5                	mov    %esp,%ebp
f010c52c:	57                   	push   %edi
f010c52d:	56                   	push   %esi
f010c52e:	53                   	push   %ebx
f010c52f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c532:	e8 5d 7c ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c537:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c541:	8b 40 34             	mov    0x34(%eax),%eax
f010c544:	0f b7 c0             	movzwl %ax,%eax
f010c547:	83 e0 03             	and    $0x3,%eax
f010c54a:	83 f8 03             	cmp    $0x3,%eax
f010c54d:	75 49                	jne    f010c598 <trap+0x6f>
		assert(curenv);
f010c54f:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c554:	85 c0                	test   %eax,%eax
f010c556:	75 19                	jne    f010c571 <trap+0x48>
f010c558:	68 9f 76 13 f0       	push   $0xf013769f
f010c55d:	68 a6 76 13 f0       	push   $0xf01376a6
f010c562:	68 06 01 00 00       	push   $0x106
f010c567:	68 53 76 13 f0       	push   $0xf0137653
f010c56c:	e8 94 3c ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c571:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010c577:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57a:	89 c3                	mov    %eax,%ebx
f010c57c:	b8 11 00 00 00       	mov    $0x11,%eax
f010c581:	89 d7                	mov    %edx,%edi
f010c583:	89 de                	mov    %ebx,%esi
f010c585:	89 c1                	mov    %eax,%ecx
f010c587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c589:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c58e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c591:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c598:	8b 45 08             	mov    0x8(%ebp),%eax
f010c59b:	8b 40 28             	mov    0x28(%eax),%eax
f010c59e:	83 f8 20             	cmp    $0x20,%eax
f010c5a1:	75 40                	jne    f010c5e3 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c5a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5a7:	0f 84 a6 00 00 00    	je     f010c653 <trap+0x12a>
		{
			assert(curenv);
f010c5ad:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c5b2:	85 c0                	test   %eax,%eax
f010c5b4:	75 19                	jne    f010c5cf <trap+0xa6>
f010c5b6:	68 9f 76 13 f0       	push   $0xf013769f
f010c5bb:	68 a6 76 13 f0       	push   $0xf01376a6
f010c5c0:	68 12 01 00 00       	push   $0x112
f010c5c5:	68 53 76 13 f0       	push   $0xf0137653
f010c5ca:	e8 36 3c ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c5cf:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c5d4:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c5da:	42                   	inc    %edx
f010c5db:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c5e1:	eb 70                	jmp    f010c653 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c5e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e6:	8b 40 28             	mov    0x28(%eax),%eax
f010c5e9:	83 f8 0e             	cmp    $0xe,%eax
f010c5ec:	75 65                	jne    f010c653 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c5ee:	a0 a8 1c 88 f0       	mov    0xf0881ca8,%al
f010c5f3:	84 c0                	test   %al,%al
f010c5f5:	74 5c                	je     f010c653 <trap+0x12a>
			if (userTrap){
f010c5f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5fb:	74 2c                	je     f010c629 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c5fd:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c602:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010c608:	8b 52 30             	mov    0x30(%edx),%edx
f010c60b:	89 d1                	mov    %edx,%ecx
f010c60d:	8a 15 a8 1c 88 f0    	mov    0xf0881ca8,%dl
f010c613:	0f b6 d2             	movzbl %dl,%edx
f010c616:	01 ca                	add    %ecx,%edx
f010c618:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c61b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c620:	83 ec 0c             	sub    $0xc,%esp
f010c623:	50                   	push   %eax
f010c624:	e8 43 d4 ff ff       	call   f0109a6c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c629:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62c:	8b 40 30             	mov    0x30(%eax),%eax
f010c62f:	89 c2                	mov    %eax,%edx
f010c631:	a0 a8 1c 88 f0       	mov    0xf0881ca8,%al
f010c636:	0f b6 c0             	movzbl %al,%eax
f010c639:	01 d0                	add    %edx,%eax
f010c63b:	89 c2                	mov    %eax,%edx
f010c63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c640:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c643:	e8 77 7b ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c648:	83 ec 0c             	sub    $0xc,%esp
f010c64b:	ff 75 08             	pushl  0x8(%ebp)
f010c64e:	e8 7c d5 ff ff       	call   f0109bcf <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c653:	83 ec 0c             	sub    $0xc,%esp
f010c656:	ff 75 08             	pushl  0x8(%ebp)
f010c659:	e8 cb fd ff ff       	call   f010c429 <trap_dispatch>
f010c65e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c661:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c665:	74 3d                	je     f010c6a4 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c667:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c66c:	85 c0                	test   %eax,%eax
f010c66e:	74 0d                	je     f010c67d <trap+0x154>
f010c670:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c675:	8b 40 54             	mov    0x54(%eax),%eax
f010c678:	83 f8 02             	cmp    $0x2,%eax
f010c67b:	74 19                	je     f010c696 <trap+0x16d>
f010c67d:	68 bc 76 13 f0       	push   $0xf01376bc
f010c682:	68 a6 76 13 f0       	push   $0xf01376a6
f010c687:	68 27 01 00 00       	push   $0x127
f010c68c:	68 53 76 13 f0       	push   $0xf0137653
f010c691:	e8 6f 3b ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c696:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c69b:	83 ec 0c             	sub    $0xc,%esp
f010c69e:	50                   	push   %eax
f010c69f:	e8 c8 d3 ff ff       	call   f0109a6c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c6a4:	83 ec 0c             	sub    $0xc,%esp
f010c6a7:	ff 75 08             	pushl  0x8(%ebp)
f010c6aa:	e8 20 d5 ff ff       	call   f0109bcf <env_pop_tf>

f010c6af <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
f010c6b2:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c6b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bf:	8b 40 34             	mov    0x34(%eax),%eax
f010c6c2:	0f b7 c0             	movzwl %ax,%eax
f010c6c5:	83 e0 03             	and    $0x3,%eax
f010c6c8:	83 f8 03             	cmp    $0x3,%eax
f010c6cb:	75 07                	jne    f010c6d4 <fault_handler+0x25>
		userTrap = 1;
f010c6cd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c6d4:	0f 20 d0             	mov    %cr2,%eax
f010c6d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c6da:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c6dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c6e0:	a1 20 1c 88 f0       	mov    0xf0881c20,%eax
f010c6e5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c6e8:	75 2b                	jne    f010c715 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c6ea:	a0 24 1c 88 f0       	mov    0xf0881c24,%al
f010c6ef:	40                   	inc    %eax
f010c6f0:	a2 24 1c 88 f0       	mov    %al,0xf0881c24
		if (num_repeated_fault == 3)
f010c6f5:	a0 24 1c 88 f0       	mov    0xf0881c24,%al
f010c6fa:	3c 03                	cmp    $0x3,%al
f010c6fc:	75 1e                	jne    f010c71c <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c6fe:	ff 75 ec             	pushl  -0x14(%ebp)
f010c701:	68 ec 76 13 f0       	push   $0xf01376ec
f010c706:	68 47 01 00 00       	push   $0x147
f010c70b:	68 53 76 13 f0       	push   $0xf0137653
f010c710:	e8 f0 3a ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c715:	c6 05 24 1c 88 f0 00 	movb   $0x0,0xf0881c24
	}
	last_fault_va = fault_va ;
f010c71c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c71f:	a3 20 1c 88 f0       	mov    %eax,0xf0881c20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c728:	75 29                	jne    f010c753 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c72a:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c731:	77 40                	ja     f010c773 <fault_handler+0xc4>
f010c733:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c73a:	76 37                	jbe    f010c773 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c73c:	83 ec 04             	sub    $0x4,%esp
f010c73f:	68 38 77 13 f0       	push   $0xf0137738
f010c744:	68 53 01 00 00       	push   $0x153
f010c749:	68 53 76 13 f0       	push   $0xf0137653
f010c74e:	e8 b2 3a ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c753:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c75a:	76 17                	jbe    f010c773 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c75c:	83 ec 04             	sub    $0x4,%esp
f010c75f:	68 5c 77 13 f0       	push   $0xf013775c
f010c764:	68 59 01 00 00       	push   $0x159
f010c769:	68 53 76 13 f0       	push   $0xf0137653
f010c76e:	e8 92 3a ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c773:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c778:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c77b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c77e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c781:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c784:	c1 ea 16             	shr    $0x16,%edx
f010c787:	c1 e2 02             	shl    $0x2,%edx
f010c78a:	01 d0                	add    %edx,%eax
f010c78c:	8b 00                	mov    (%eax),%eax
f010c78e:	83 e0 01             	and    $0x1,%eax
f010c791:	85 c0                	test   %eax,%eax
f010c793:	75 28                	jne    f010c7bd <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c795:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c798:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c79e:	8d 50 01             	lea    0x1(%eax),%edx
f010c7a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7a4:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c7aa:	83 ec 08             	sub    $0x8,%esp
f010c7ad:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7b0:	ff 75 e8             	pushl  -0x18(%ebp)
f010c7b3:	e8 70 16 00 00       	call   f010de28 <table_fault_handler>
f010c7b8:	83 c4 10             	add    $0x10,%esp
f010c7bb:	eb 7b                	jmp    f010c838 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c7bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7c3:	83 ec 08             	sub    $0x8,%esp
f010c7c6:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7c9:	50                   	push   %eax
f010c7ca:	e8 92 b4 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010c7cf:	83 c4 10             	add    $0x10,%esp
f010c7d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c7d8:	83 e0 01             	and    $0x1,%eax
f010c7db:	85 c0                	test   %eax,%eax
f010c7dd:	74 17                	je     f010c7f6 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c7df:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7e2:	68 80 77 13 f0       	push   $0xf0137780
f010c7e7:	68 6e 01 00 00       	push   $0x16e
f010c7ec:	68 53 76 13 f0       	push   $0xf0137653
f010c7f1:	e8 0f 3a ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c7f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7f9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c7ff:	8d 50 01             	lea    0x1(%eax),%edx
f010c802:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c805:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c80b:	e8 f6 15 00 00       	call   f010de06 <isBufferingEnabled>
f010c810:	84 c0                	test   %al,%al
f010c812:	74 13                	je     f010c827 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c814:	83 ec 08             	sub    $0x8,%esp
f010c817:	ff 75 ec             	pushl  -0x14(%ebp)
f010c81a:	ff 75 e8             	pushl  -0x18(%ebp)
f010c81d:	e8 8c 18 00 00       	call   f010e0ae <__page_fault_handler_with_buffering>
f010c822:	83 c4 10             	add    $0x10,%esp
f010c825:	eb 11                	jmp    f010c838 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c827:	83 ec 08             	sub    $0x8,%esp
f010c82a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c82d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c830:	e8 14 16 00 00       	call   f010de49 <page_fault_handler>
f010c835:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c838:	0f 20 d8             	mov    %cr3,%eax
f010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c841:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c844:	90                   	nop
f010c845:	c9                   	leave  
f010c846:	c3                   	ret    
f010c847:	90                   	nop

f010c848 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c848:	6a 0e                	push   $0xe
f010c84a:	e9 ed 00 00 00       	jmp    f010c93c <_alltraps>
f010c84f:	90                   	nop

f010c850 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c850:	6a 00                	push   $0x0
f010c852:	6a 30                	push   $0x30
f010c854:	e9 e3 00 00 00       	jmp    f010c93c <_alltraps>
f010c859:	90                   	nop

f010c85a <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c85a:	6a 08                	push   $0x8
f010c85c:	e9 db 00 00 00       	jmp    f010c93c <_alltraps>
f010c861:	90                   	nop

f010c862 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c862:	6a 00                	push   $0x0
f010c864:	6a 00                	push   $0x0
f010c866:	e9 d1 00 00 00       	jmp    f010c93c <_alltraps>
f010c86b:	90                   	nop

f010c86c <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c86c:	6a 00                	push   $0x0
f010c86e:	6a 01                	push   $0x1
f010c870:	e9 c7 00 00 00       	jmp    f010c93c <_alltraps>
f010c875:	90                   	nop

f010c876 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c876:	6a 00                	push   $0x0
f010c878:	6a 02                	push   $0x2
f010c87a:	e9 bd 00 00 00       	jmp    f010c93c <_alltraps>
f010c87f:	90                   	nop

f010c880 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c880:	6a 00                	push   $0x0
f010c882:	6a 03                	push   $0x3
f010c884:	e9 b3 00 00 00       	jmp    f010c93c <_alltraps>
f010c889:	90                   	nop

f010c88a <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c88a:	6a 00                	push   $0x0
f010c88c:	6a 04                	push   $0x4
f010c88e:	e9 a9 00 00 00       	jmp    f010c93c <_alltraps>
f010c893:	90                   	nop

f010c894 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c894:	6a 00                	push   $0x0
f010c896:	6a 05                	push   $0x5
f010c898:	e9 9f 00 00 00       	jmp    f010c93c <_alltraps>
f010c89d:	90                   	nop

f010c89e <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c89e:	6a 00                	push   $0x0
f010c8a0:	6a 06                	push   $0x6
f010c8a2:	e9 95 00 00 00       	jmp    f010c93c <_alltraps>
f010c8a7:	90                   	nop

f010c8a8 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c8a8:	6a 00                	push   $0x0
f010c8aa:	6a 07                	push   $0x7
f010c8ac:	e9 8b 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b1:	90                   	nop

f010c8b2 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c8b2:	6a 0a                	push   $0xa
f010c8b4:	e9 83 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b9:	90                   	nop

f010c8ba <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c8ba:	6a 0b                	push   $0xb
f010c8bc:	eb 7e                	jmp    f010c93c <_alltraps>

f010c8be <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c8be:	6a 0c                	push   $0xc
f010c8c0:	eb 7a                	jmp    f010c93c <_alltraps>

f010c8c2 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c8c2:	6a 0d                	push   $0xd
f010c8c4:	eb 76                	jmp    f010c93c <_alltraps>

f010c8c6 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c8c6:	6a 00                	push   $0x0
f010c8c8:	6a 10                	push   $0x10
f010c8ca:	eb 70                	jmp    f010c93c <_alltraps>

f010c8cc <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c8cc:	6a 11                	push   $0x11
f010c8ce:	eb 6c                	jmp    f010c93c <_alltraps>

f010c8d0 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c8d0:	6a 00                	push   $0x0
f010c8d2:	6a 12                	push   $0x12
f010c8d4:	eb 66                	jmp    f010c93c <_alltraps>

f010c8d6 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c8d6:	6a 00                	push   $0x0
f010c8d8:	6a 13                	push   $0x13
f010c8da:	eb 60                	jmp    f010c93c <_alltraps>

f010c8dc <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c8dc:	6a 00                	push   $0x0
f010c8de:	6a 20                	push   $0x20
f010c8e0:	eb 5a                	jmp    f010c93c <_alltraps>

f010c8e2 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c8e2:	6a 00                	push   $0x0
f010c8e4:	6a 21                	push   $0x21
f010c8e6:	eb 54                	jmp    f010c93c <_alltraps>

f010c8e8 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c8e8:	6a 00                	push   $0x0
f010c8ea:	6a 22                	push   $0x22
f010c8ec:	eb 4e                	jmp    f010c93c <_alltraps>

f010c8ee <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c8ee:	6a 00                	push   $0x0
f010c8f0:	6a 23                	push   $0x23
f010c8f2:	eb 48                	jmp    f010c93c <_alltraps>

f010c8f4 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c8f4:	6a 00                	push   $0x0
f010c8f6:	6a 24                	push   $0x24
f010c8f8:	eb 42                	jmp    f010c93c <_alltraps>

f010c8fa <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c8fa:	6a 00                	push   $0x0
f010c8fc:	6a 25                	push   $0x25
f010c8fe:	eb 3c                	jmp    f010c93c <_alltraps>

f010c900 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c900:	6a 00                	push   $0x0
f010c902:	6a 26                	push   $0x26
f010c904:	eb 36                	jmp    f010c93c <_alltraps>

f010c906 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c906:	6a 00                	push   $0x0
f010c908:	6a 27                	push   $0x27
f010c90a:	eb 30                	jmp    f010c93c <_alltraps>

f010c90c <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c90c:	6a 00                	push   $0x0
f010c90e:	6a 28                	push   $0x28
f010c910:	eb 2a                	jmp    f010c93c <_alltraps>

f010c912 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c912:	6a 00                	push   $0x0
f010c914:	6a 29                	push   $0x29
f010c916:	eb 24                	jmp    f010c93c <_alltraps>

f010c918 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c918:	6a 00                	push   $0x0
f010c91a:	6a 2a                	push   $0x2a
f010c91c:	eb 1e                	jmp    f010c93c <_alltraps>

f010c91e <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c91e:	6a 00                	push   $0x0
f010c920:	6a 2b                	push   $0x2b
f010c922:	eb 18                	jmp    f010c93c <_alltraps>

f010c924 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c924:	6a 00                	push   $0x0
f010c926:	6a 2c                	push   $0x2c
f010c928:	eb 12                	jmp    f010c93c <_alltraps>

f010c92a <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c92a:	6a 00                	push   $0x0
f010c92c:	6a 2d                	push   $0x2d
f010c92e:	eb 0c                	jmp    f010c93c <_alltraps>

f010c930 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c930:	6a 00                	push   $0x0
f010c932:	6a 2e                	push   $0x2e
f010c934:	eb 06                	jmp    f010c93c <_alltraps>

f010c936 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c936:	6a 00                	push   $0x0
f010c938:	6a 2f                	push   $0x2f
f010c93a:	eb 00                	jmp    f010c93c <_alltraps>

f010c93c <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c93c:	1e                   	push   %ds
push %es
f010c93d:	06                   	push   %es
pushal
f010c93e:	60                   	pusha  

mov $(GD_KD), %ax
f010c93f:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c943:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c945:	8e c0                	mov    %eax,%es

push %esp
f010c947:	54                   	push   %esp

call trap
f010c948:	e8 dc fb ff ff       	call   f010c529 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c94d:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c94e:	61                   	popa   
pop %es
f010c94f:	07                   	pop    %es
pop %ds
f010c950:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c951:	83 c4 08             	add    $0x8,%esp

iret
f010c954:	cf                   	iret   

f010c955 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c955:	55                   	push   %ebp
f010c956:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c958:	8b 45 08             	mov    0x8(%ebp),%eax
f010c95b:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f010c961:	29 d0                	sub    %edx,%eax
f010c963:	c1 f8 03             	sar    $0x3,%eax
f010c966:	89 c2                	mov    %eax,%edx
f010c968:	89 d0                	mov    %edx,%eax
f010c96a:	c1 e0 02             	shl    $0x2,%eax
f010c96d:	01 d0                	add    %edx,%eax
f010c96f:	c1 e0 02             	shl    $0x2,%eax
f010c972:	01 d0                	add    %edx,%eax
f010c974:	c1 e0 02             	shl    $0x2,%eax
f010c977:	01 d0                	add    %edx,%eax
f010c979:	89 c1                	mov    %eax,%ecx
f010c97b:	c1 e1 08             	shl    $0x8,%ecx
f010c97e:	01 c8                	add    %ecx,%eax
f010c980:	89 c1                	mov    %eax,%ecx
f010c982:	c1 e1 10             	shl    $0x10,%ecx
f010c985:	01 c8                	add    %ecx,%eax
f010c987:	01 c0                	add    %eax,%eax
f010c989:	01 d0                	add    %edx,%eax
}
f010c98b:	5d                   	pop    %ebp
f010c98c:	c3                   	ret    

f010c98d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c98d:	55                   	push   %ebp
f010c98e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c990:	ff 75 08             	pushl  0x8(%ebp)
f010c993:	e8 bd ff ff ff       	call   f010c955 <to_frame_number>
f010c998:	83 c4 04             	add    $0x4,%esp
f010c99b:	c1 e0 0c             	shl    $0xc,%eax
}
f010c99e:	c9                   	leave  
f010c99f:	c3                   	ret    

f010c9a0 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c9a0:	55                   	push   %ebp
f010c9a1:	89 e5                	mov    %esp,%ebp
f010c9a3:	83 ec 18             	sub    $0x18,%esp
f010c9a6:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9a9:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c9ac:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c9b0:	74 26                	je     f010c9d8 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c9b2:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010c9c0:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c9c6:	83 ec 04             	sub    $0x4,%esp
f010c9c9:	50                   	push   %eax
f010c9ca:	52                   	push   %edx
f010c9cb:	68 70 79 13 f0       	push   $0xf0137970
f010c9d0:	e8 39 43 ff ff       	call   f0100d0e <cprintf>
f010c9d5:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c9d8:	83 ec 04             	sub    $0x4,%esp
f010c9db:	ff 75 08             	pushl  0x8(%ebp)
f010c9de:	ff 75 0c             	pushl  0xc(%ebp)
f010c9e1:	68 79 79 13 f0       	push   $0xf0137979
f010c9e6:	e8 23 43 ff ff       	call   f0100d0e <cprintf>
f010c9eb:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c9ee:	90                   	nop
f010c9ef:	c9                   	leave  
f010c9f0:	c3                   	ret    

f010c9f1 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c9f1:	55                   	push   %ebp
f010c9f2:	89 e5                	mov    %esp,%ebp
f010c9f4:	83 ec 18             	sub    $0x18,%esp
f010c9f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fa:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c9fd:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ca01:	83 ec 08             	sub    $0x8,%esp
f010ca04:	50                   	push   %eax
f010ca05:	68 7e 79 13 f0       	push   $0xf013797e
f010ca0a:	e8 ff 42 ff ff       	call   f0100d0e <cprintf>
f010ca0f:	83 c4 10             	add    $0x10,%esp
}
f010ca12:	90                   	nop
f010ca13:	c9                   	leave  
f010ca14:	c3                   	ret    

f010ca15 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ca15:	55                   	push   %ebp
f010ca16:	89 e5                	mov    %esp,%ebp
f010ca18:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ca1b:	e8 28 41 ff ff       	call   f0100b48 <cons_getc2>
f010ca20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ca23:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca26:	c9                   	leave  
f010ca27:	c3                   	ret    

f010ca28 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ca28:	55                   	push   %ebp
f010ca29:	89 e5                	mov    %esp,%ebp
f010ca2b:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ca2e:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ca33:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ca36:	83 ec 0c             	sub    $0xc,%esp
f010ca39:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ca3c:	50                   	push   %eax
f010ca3d:	e8 b0 9e ff ff       	call   f01068f2 <allocate_frame>
f010ca42:	83 c4 10             	add    $0x10,%esp
f010ca45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ca48:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ca4c:	75 08                	jne    f010ca56 <__sys_allocate_page+0x2e>
		return r ;
f010ca4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca51:	e9 e9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010ca56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca59:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ca5e:	77 0c                	ja     f010ca6c <__sys_allocate_page+0x44>
f010ca60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca63:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ca68:	85 c0                	test   %eax,%eax
f010ca6a:	74 0a                	je     f010ca76 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ca6c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca71:	e9 c9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ca76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca79:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ca7e:	83 f8 04             	cmp    $0x4,%eax
f010ca81:	74 0a                	je     f010ca8d <__sys_allocate_page+0x65>
		return E_INVAL;
f010ca83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca88:	e9 b2 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010ca8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca90:	83 ec 0c             	sub    $0xc,%esp
f010ca93:	50                   	push   %eax
f010ca94:	e8 f4 fe ff ff       	call   f010c98d <to_physical_address>
f010ca99:	83 c4 10             	add    $0x10,%esp
f010ca9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010ca9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010caa5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010caa8:	6a 02                	push   $0x2
f010caaa:	68 00 00 80 ef       	push   $0xef800000
f010caaf:	52                   	push   %edx
f010cab0:	50                   	push   %eax
f010cab1:	e8 8b a2 ff ff       	call   f0106d41 <map_frame>
f010cab6:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cab9:	83 ec 04             	sub    $0x4,%esp
f010cabc:	68 00 10 00 00       	push   $0x1000
f010cac1:	6a 00                	push   $0x0
f010cac3:	68 00 00 80 ef       	push   $0xef800000
f010cac8:	e8 ba 49 02 00       	call   f0131487 <memset>
f010cacd:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cad0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cad6:	8b 40 08             	mov    0x8(%eax),%eax
f010cad9:	40                   	inc    %eax
f010cada:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cae1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cae4:	83 ec 08             	sub    $0x8,%esp
f010cae7:	68 00 00 80 ef       	push   $0xef800000
f010caec:	50                   	push   %eax
f010caed:	e8 84 a3 ff ff       	call   f0106e76 <unmap_frame>
f010caf2:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010caf5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cafb:	8b 40 08             	mov    0x8(%eax),%eax
f010cafe:	48                   	dec    %eax
f010caff:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cb03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cb06:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb0f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb12:	51                   	push   %ecx
f010cb13:	52                   	push   %edx
f010cb14:	50                   	push   %eax
f010cb15:	e8 27 a2 ff ff       	call   f0106d41 <map_frame>
f010cb1a:	83 c4 10             	add    $0x10,%esp
f010cb1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cb20:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cb24:	75 14                	jne    f010cb3a <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cb26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb29:	83 ec 0c             	sub    $0xc,%esp
f010cb2c:	50                   	push   %eax
f010cb2d:	e8 4f 9f ff ff       	call   f0106a81 <decrement_references>
f010cb32:	83 c4 10             	add    $0x10,%esp
		return r;
f010cb35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb38:	eb 05                	jmp    f010cb3f <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cb3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cb3f:	c9                   	leave  
f010cb40:	c3                   	ret    

f010cb41 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cb41:	55                   	push   %ebp
f010cb42:	89 e5                	mov    %esp,%ebp
f010cb44:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cb47:	83 ec 04             	sub    $0x4,%esp
f010cb4a:	68 81 79 13 f0       	push   $0xf0137981
f010cb4f:	68 b3 00 00 00       	push   $0xb3
f010cb54:	68 9f 79 13 f0       	push   $0xf013799f
f010cb59:	e8 a7 36 ff ff       	call   f0100205 <_panic>

f010cb5e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cb5e:	55                   	push   %ebp
f010cb5f:	89 e5                	mov    %esp,%ebp
f010cb61:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cb64:	83 ec 04             	sub    $0x4,%esp
f010cb67:	68 b4 79 13 f0       	push   $0xf01379b4
f010cb6c:	68 c3 00 00 00       	push   $0xc3
f010cb71:	68 9f 79 13 f0       	push   $0xf013799f
f010cb76:	e8 8a 36 ff ff       	call   f0100205 <_panic>

f010cb7b <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cb7b:	55                   	push   %ebp
f010cb7c:	89 e5                	mov    %esp,%ebp
f010cb7e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cb81:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cb86:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb89:	83 ec 04             	sub    $0x4,%esp
f010cb8c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8f:	ff 75 08             	pushl  0x8(%ebp)
f010cb92:	50                   	push   %eax
f010cb93:	e8 a8 c1 ff ff       	call   f0108d40 <calculate_required_frames>
f010cb98:	83 c4 10             	add    $0x10,%esp
}
f010cb9b:	c9                   	leave  
f010cb9c:	c3                   	ret    

f010cb9d <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cb9d:	55                   	push   %ebp
f010cb9e:	89 e5                	mov    %esp,%ebp
f010cba0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cba3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cba6:	83 ec 0c             	sub    $0xc,%esp
f010cba9:	50                   	push   %eax
f010cbaa:	e8 2c a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbaf:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cbb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbb8:	01 d0                	add    %edx,%eax
}
f010cbba:	c9                   	leave  
f010cbbb:	c3                   	ret    

f010cbbc <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cbbc:	55                   	push   %ebp
f010cbbd:	89 e5                	mov    %esp,%ebp
f010cbbf:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbc2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbc5:	83 ec 0c             	sub    $0xc,%esp
f010cbc8:	50                   	push   %eax
f010cbc9:	e8 0d a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbce:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cbd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cbd4:	c9                   	leave  
f010cbd5:	c3                   	ret    

f010cbd6 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cbd6:	55                   	push   %ebp
f010cbd7:	89 e5                	mov    %esp,%ebp
f010cbd9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbdc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbdf:	83 ec 0c             	sub    $0xc,%esp
f010cbe2:	50                   	push   %eax
f010cbe3:	e8 f3 a3 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbe8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cbeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cbee:	c9                   	leave  
f010cbef:	c3                   	ret    

f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cbf0:	55                   	push   %ebp
f010cbf1:	89 e5                	mov    %esp,%ebp
f010cbf3:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cbf6:	83 ec 0c             	sub    $0xc,%esp
f010cbf9:	ff 75 08             	pushl  0x8(%ebp)
f010cbfc:	e8 a3 35 02 00       	call   f01301a4 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cc01:	83 c4 10             	add    $0x10,%esp
}
f010cc04:	c9                   	leave  
f010cc05:	c3                   	ret    

f010cc06 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cc06:	55                   	push   %ebp
f010cc07:	89 e5                	mov    %esp,%ebp
f010cc09:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cc0c:	e8 eb 34 02 00       	call   f01300fc <scarce_memory>
}
f010cc11:	90                   	nop
f010cc12:	c9                   	leave  
f010cc13:	c3                   	ret    

f010cc14 <sys_clearFFL>:

void sys_clearFFL()
{
f010cc14:	55                   	push   %ebp
f010cc15:	89 e5                	mov    %esp,%ebp
f010cc17:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cc1a:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f010cc1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cc22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc29:	eb 12                	jmp    f010cc3d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cc2b:	83 ec 0c             	sub    $0xc,%esp
f010cc2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cc31:	50                   	push   %eax
f010cc32:	e8 bb 9c ff ff       	call   f01068f2 <allocate_frame>
f010cc37:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc3a:	ff 45 f4             	incl   -0xc(%ebp)
f010cc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cc43:	7c e6                	jl     f010cc2b <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cc45:	90                   	nop
f010cc46:	c9                   	leave  
f010cc47:	c3                   	ret    

f010cc48 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cc48:	55                   	push   %ebp
f010cc49:	89 e5                	mov    %esp,%ebp
f010cc4b:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cc4e:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cc53:	83 ec 0c             	sub    $0xc,%esp
f010cc56:	50                   	push   %eax
f010cc57:	e8 cc 70 ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cc5c:	83 c4 10             	add    $0x10,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cc67:	e8 9a 11 00 00       	call   f010de06 <isBufferingEnabled>
f010cc6c:	84 c0                	test   %al,%al
f010cc6e:	74 19                	je     f010cc89 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cc70:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cc75:	83 ec 04             	sub    $0x4,%esp
f010cc78:	ff 75 0c             	pushl  0xc(%ebp)
f010cc7b:	ff 75 08             	pushl  0x8(%ebp)
f010cc7e:	50                   	push   %eax
f010cc7f:	e8 a5 c1 ff ff       	call   f0108e29 <__free_user_mem_with_buffering>
f010cc84:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cc87:	eb 18                	jmp    f010cca1 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cc89:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cc8e:	83 ec 04             	sub    $0x4,%esp
f010cc91:	ff 75 0c             	pushl  0xc(%ebp)
f010cc94:	ff 75 08             	pushl  0x8(%ebp)
f010cc97:	50                   	push   %eax
f010cc98:	e8 6f c1 ff ff       	call   f0108e0c <free_user_mem>
f010cc9d:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cca0:	90                   	nop
}
f010cca1:	c9                   	leave  
f010cca2:	c3                   	ret    

f010cca3 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cca3:	55                   	push   %ebp
f010cca4:	89 e5                	mov    %esp,%ebp
f010cca6:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cca9:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ccae:	83 ec 04             	sub    $0x4,%esp
f010ccb1:	ff 75 0c             	pushl  0xc(%ebp)
f010ccb4:	ff 75 08             	pushl  0x8(%ebp)
f010ccb7:	50                   	push   %eax
f010ccb8:	e8 32 c1 ff ff       	call   f0108def <allocate_user_mem>
f010ccbd:	83 c4 10             	add    $0x10,%esp
	return;
f010ccc0:	90                   	nop
}
f010ccc1:	c9                   	leave  
f010ccc2:	c3                   	ret    

f010ccc3 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010ccc9:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ccce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccd1:	ff 75 10             	pushl  0x10(%ebp)
f010ccd4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccd7:	ff 75 08             	pushl  0x8(%ebp)
f010ccda:	50                   	push   %eax
f010ccdb:	e8 45 be ff ff       	call   f0108b25 <allocate_chunk>
f010cce0:	83 c4 10             	add    $0x10,%esp
	return;
f010cce3:	90                   	nop
}
f010cce4:	c9                   	leave  
f010cce5:	c3                   	ret    

f010cce6 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cce6:	55                   	push   %ebp
f010cce7:	89 e5                	mov    %esp,%ebp
f010cce9:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ccec:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ccf1:	ff 75 10             	pushl  0x10(%ebp)
f010ccf4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccf7:	ff 75 08             	pushl  0x8(%ebp)
f010ccfa:	50                   	push   %eax
f010ccfb:	e8 46 c1 ff ff       	call   f0108e46 <move_user_mem>
f010cd00:	83 c4 10             	add    $0x10,%esp
	return;
f010cd03:	90                   	nop
}
f010cd04:	c9                   	leave  
f010cd05:	c3                   	ret    

f010cd06 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cd06:	55                   	push   %ebp
f010cd07:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cd09:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
}
f010cd0e:	5d                   	pop    %ebp
f010cd0f:	c3                   	ret    

f010cd10 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cd10:	55                   	push   %ebp
f010cd11:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cd13:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd16:	a3 30 1d 88 f0       	mov    %eax,0xf0881d30
}
f010cd1b:	90                   	nop
f010cd1c:	5d                   	pop    %ebp
f010cd1d:	c3                   	ret    

f010cd1e <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cd1e:	55                   	push   %ebp
f010cd1f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cd21:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cd26:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010cd2c:	8b 52 38             	mov    0x38(%edx),%edx
f010cd2f:	80 e6 fd             	and    $0xfd,%dh
f010cd32:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd35:	90                   	nop
f010cd36:	5d                   	pop    %ebp
f010cd37:	c3                   	ret    

f010cd38 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cd38:	55                   	push   %ebp
f010cd39:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cd3b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cd40:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010cd46:	8b 52 38             	mov    0x38(%edx),%edx
f010cd49:	80 ce 02             	or     $0x2,%dh
f010cd4c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd4f:	90                   	nop
f010cd50:	5d                   	pop    %ebp
f010cd51:	c3                   	ret    

f010cd52 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cd52:	55                   	push   %ebp
f010cd53:	89 e5                	mov    %esp,%ebp
f010cd55:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cd58:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cd5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd60:	83 ec 04             	sub    $0x4,%esp
f010cd63:	ff 75 0c             	pushl  0xc(%ebp)
f010cd66:	ff 75 08             	pushl  0x8(%ebp)
f010cd69:	50                   	push   %eax
f010cd6a:	e8 fe 16 00 00       	call   f010e46d <createSemaphore>
f010cd6f:	83 c4 10             	add    $0x10,%esp
}
f010cd72:	c9                   	leave  
f010cd73:	c3                   	ret    

f010cd74 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd74:	55                   	push   %ebp
f010cd75:	89 e5                	mov    %esp,%ebp
f010cd77:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cd7a:	83 ec 08             	sub    $0x8,%esp
f010cd7d:	ff 75 0c             	pushl  0xc(%ebp)
f010cd80:	ff 75 08             	pushl  0x8(%ebp)
f010cd83:	e8 5d 17 00 00       	call   f010e4e5 <waitSemaphore>
f010cd88:	83 c4 10             	add    $0x10,%esp
}
f010cd8b:	90                   	nop
f010cd8c:	c9                   	leave  
f010cd8d:	c3                   	ret    

f010cd8e <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd8e:	55                   	push   %ebp
f010cd8f:	89 e5                	mov    %esp,%ebp
f010cd91:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cd94:	83 ec 08             	sub    $0x8,%esp
f010cd97:	ff 75 0c             	pushl  0xc(%ebp)
f010cd9a:	ff 75 08             	pushl  0x8(%ebp)
f010cd9d:	e8 f5 17 00 00       	call   f010e597 <signalSemaphore>
f010cda2:	83 c4 10             	add    $0x10,%esp
}
f010cda5:	90                   	nop
f010cda6:	c9                   	leave  
f010cda7:	c3                   	ret    

f010cda8 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cda8:	55                   	push   %ebp
f010cda9:	89 e5                	mov    %esp,%ebp
f010cdab:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cdae:	83 ec 08             	sub    $0x8,%esp
f010cdb1:	ff 75 0c             	pushl  0xc(%ebp)
f010cdb4:	ff 75 08             	pushl  0x8(%ebp)
f010cdb7:	e8 29 15 00 00       	call   f010e2e5 <get_semaphore_object_ID>
f010cdbc:	83 c4 10             	add    $0x10,%esp
f010cdbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cdc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cdc6:	78 0c                	js     f010cdd4 <sys_getSemaphoreValue+0x2c>
f010cdc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdcb:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010cdd0:	39 c2                	cmp    %eax,%edx
f010cdd2:	72 19                	jb     f010cded <sys_getSemaphoreValue+0x45>
f010cdd4:	68 d4 79 13 f0       	push   $0xf01379d4
f010cdd9:	68 f9 79 13 f0       	push   $0xf01379f9
f010cdde:	68 4a 01 00 00       	push   $0x14a
f010cde3:	68 9f 79 13 f0       	push   $0xf013799f
f010cde8:	e8 18 34 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010cded:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010cdf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdf6:	89 d0                	mov    %edx,%eax
f010cdf8:	c1 e0 02             	shl    $0x2,%eax
f010cdfb:	01 d0                	add    %edx,%eax
f010cdfd:	01 c0                	add    %eax,%eax
f010cdff:	01 d0                	add    %edx,%eax
f010ce01:	01 c0                	add    %eax,%eax
f010ce03:	01 d0                	add    %edx,%eax
f010ce05:	c1 e0 02             	shl    $0x2,%eax
f010ce08:	01 c8                	add    %ecx,%eax
f010ce0a:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ce0d:	c9                   	leave  
f010ce0e:	c3                   	ret    

f010ce0f <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ce0f:	55                   	push   %ebp
f010ce10:	89 e5                	mov    %esp,%ebp
f010ce12:	83 ec 18             	sub    $0x18,%esp
f010ce15:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce18:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ce1b:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ce1f:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ce24:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce27:	83 ec 0c             	sub    $0xc,%esp
f010ce2a:	ff 75 14             	pushl  0x14(%ebp)
f010ce2d:	52                   	push   %edx
f010ce2e:	ff 75 0c             	pushl  0xc(%ebp)
f010ce31:	ff 75 08             	pushl  0x8(%ebp)
f010ce34:	50                   	push   %eax
f010ce35:	e8 62 a7 ff ff       	call   f010759c <createSharedObject>
f010ce3a:	83 c4 20             	add    $0x20,%esp
}
f010ce3d:	c9                   	leave  
f010ce3e:	c3                   	ret    

f010ce3f <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ce3f:	55                   	push   %ebp
f010ce40:	89 e5                	mov    %esp,%ebp
f010ce42:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ce45:	83 ec 08             	sub    $0x8,%esp
f010ce48:	ff 75 0c             	pushl  0xc(%ebp)
f010ce4b:	ff 75 08             	pushl  0x8(%ebp)
f010ce4e:	e8 03 a7 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010ce53:	83 c4 10             	add    $0x10,%esp
}
f010ce56:	c9                   	leave  
f010ce57:	c3                   	ret    

f010ce58 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010ce58:	55                   	push   %ebp
f010ce59:	89 e5                	mov    %esp,%ebp
f010ce5b:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010ce5e:	83 ec 04             	sub    $0x4,%esp
f010ce61:	ff 75 10             	pushl  0x10(%ebp)
f010ce64:	ff 75 0c             	pushl  0xc(%ebp)
f010ce67:	ff 75 08             	pushl  0x8(%ebp)
f010ce6a:	e8 50 a7 ff ff       	call   f01075bf <getSharedObject>
f010ce6f:	83 c4 10             	add    $0x10,%esp
}
f010ce72:	c9                   	leave  
f010ce73:	c3                   	ret    

f010ce74 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ce74:	55                   	push   %ebp
f010ce75:	89 e5                	mov    %esp,%ebp
f010ce77:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ce7a:	83 ec 08             	sub    $0x8,%esp
f010ce7d:	ff 75 0c             	pushl  0xc(%ebp)
f010ce80:	ff 75 08             	pushl  0x8(%ebp)
f010ce83:	e8 54 a7 ff ff       	call   f01075dc <freeSharedObject>
f010ce88:	83 c4 10             	add    $0x10,%esp
}
f010ce8b:	c9                   	leave  
f010ce8c:	c3                   	ret    

f010ce8d <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ce8d:	55                   	push   %ebp
f010ce8e:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ce90:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
}
f010ce95:	5d                   	pop    %ebp
f010ce96:	c3                   	ret    

f010ce97 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ce97:	55                   	push   %ebp
f010ce98:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ce9a:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ce9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cea2:	5d                   	pop    %ebp
f010cea3:	c3                   	ret    

f010cea4 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cea4:	55                   	push   %ebp
f010cea5:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cea7:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ceac:	89 c2                	mov    %eax,%edx
f010ceae:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f010ceb3:	29 c2                	sub    %eax,%edx
f010ceb5:	89 d0                	mov    %edx,%eax
f010ceb7:	c1 f8 04             	sar    $0x4,%eax
f010ceba:	89 c2                	mov    %eax,%edx
f010cebc:	89 d0                	mov    %edx,%eax
f010cebe:	c1 e0 03             	shl    $0x3,%eax
f010cec1:	01 d0                	add    %edx,%eax
f010cec3:	01 c0                	add    %eax,%eax
f010cec5:	01 d0                	add    %edx,%eax
f010cec7:	c1 e0 03             	shl    $0x3,%eax
f010ceca:	01 d0                	add    %edx,%eax
f010cecc:	89 c1                	mov    %eax,%ecx
f010cece:	c1 e1 08             	shl    $0x8,%ecx
f010ced1:	01 c8                	add    %ecx,%eax
f010ced3:	01 c0                	add    %eax,%eax
f010ced5:	01 d0                	add    %edx,%eax
f010ced7:	01 c0                	add    %eax,%eax
f010ced9:	01 d0                	add    %edx,%eax
f010cedb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cee2:	01 d0                	add    %edx,%eax
f010cee4:	89 c2                	mov    %eax,%edx
f010cee6:	c1 e2 09             	shl    $0x9,%edx
f010cee9:	29 c2                	sub    %eax,%edx
f010ceeb:	89 d0                	mov    %edx,%eax
f010ceed:	f7 d8                	neg    %eax
}
f010ceef:	5d                   	pop    %ebp
f010cef0:	c3                   	ret    

f010cef1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cef1:	55                   	push   %ebp
f010cef2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cef4:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cef9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cefc:	5d                   	pop    %ebp
f010cefd:	c3                   	ret    

f010cefe <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cefe:	55                   	push   %ebp
f010ceff:	89 e5                	mov    %esp,%ebp
f010cf01:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cf04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cf08:	75 0a                	jne    f010cf14 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cf0a:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cf12:	eb 22                	jmp    f010cf36 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cf14:	83 ec 04             	sub    $0x4,%esp
f010cf17:	6a 00                	push   $0x0
f010cf19:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cf1c:	50                   	push   %eax
f010cf1d:	ff 75 08             	pushl  0x8(%ebp)
f010cf20:	e8 e5 cb ff ff       	call   f0109b0a <envid2env>
f010cf25:	83 c4 10             	add    $0x10,%esp
f010cf28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf2f:	79 05                	jns    f010cf36 <sys_destroy_env+0x38>
	{
		return r;
f010cf31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf34:	eb 5e                	jmp    f010cf94 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cf36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf39:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf3e:	39 c2                	cmp    %eax,%edx
f010cf40:	75 1b                	jne    f010cf5d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cf42:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf47:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf4a:	83 ec 08             	sub    $0x8,%esp
f010cf4d:	50                   	push   %eax
f010cf4e:	68 0e 7a 13 f0       	push   $0xf0137a0e
f010cf53:	e8 b6 3d ff ff       	call   f0100d0e <cprintf>
f010cf58:	83 c4 10             	add    $0x10,%esp
f010cf5b:	eb 20                	jmp    f010cf7d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cf5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf60:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cf63:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf68:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf6b:	83 ec 04             	sub    $0x4,%esp
f010cf6e:	52                   	push   %edx
f010cf6f:	50                   	push   %eax
f010cf70:	68 29 7a 13 f0       	push   $0xf0137a29
f010cf75:	e8 94 3d ff ff       	call   f0100d0e <cprintf>
f010cf7a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cf7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf80:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf83:	83 ec 0c             	sub    $0xc,%esp
f010cf86:	50                   	push   %eax
f010cf87:	e8 b3 86 ff ff       	call   f010563f <sched_kill_env>
f010cf8c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cf8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf94:	c9                   	leave  
f010cf95:	c3                   	ret    

f010cf96 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cf96:	55                   	push   %ebp
f010cf97:	89 e5                	mov    %esp,%ebp
f010cf99:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cf9c:	e8 4a cb ff ff       	call   f0109aeb <env_exit>
	//env_run_cmd_prmpt();
}
f010cfa1:	90                   	nop
f010cfa2:	c9                   	leave  
f010cfa3:	c3                   	ret    

f010cfa4 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cfa4:	55                   	push   %ebp
f010cfa5:	89 e5                	mov    %esp,%ebp
f010cfa7:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cfaa:	ff 75 14             	pushl  0x14(%ebp)
f010cfad:	ff 75 10             	pushl  0x10(%ebp)
f010cfb0:	ff 75 0c             	pushl  0xc(%ebp)
f010cfb3:	ff 75 08             	pushl  0x8(%ebp)
f010cfb6:	e8 a8 be ff ff       	call   f0108e63 <env_create>
f010cfbb:	83 c4 10             	add    $0x10,%esp
f010cfbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cfc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfc5:	75 07                	jne    f010cfce <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cfc7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cfcc:	eb 14                	jmp    f010cfe2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cfce:	83 ec 0c             	sub    $0xc,%esp
f010cfd1:	ff 75 f4             	pushl  -0xc(%ebp)
f010cfd4:	e8 2b 82 ff ff       	call   f0105204 <sched_new_env>
f010cfd9:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cfdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfdf:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cfe2:	c9                   	leave  
f010cfe3:	c3                   	ret    

f010cfe4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cfe4:	55                   	push   %ebp
f010cfe5:	89 e5                	mov    %esp,%ebp
f010cfe7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfed:	83 ec 0c             	sub    $0xc,%esp
f010cff0:	50                   	push   %eax
f010cff1:	e8 2b 82 ff ff       	call   f0105221 <sched_run_env>
f010cff6:	83 c4 10             	add    $0x10,%esp
}
f010cff9:	90                   	nop
f010cffa:	c9                   	leave  
f010cffb:	c3                   	ret    

f010cffc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cffc:	55                   	push   %ebp
f010cffd:	89 e5                	mov    %esp,%ebp
f010cfff:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d002:	0f 31                	rdtsc  
f010d004:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d007:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d00d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d010:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d013:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d016:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d019:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d01c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d01f:	89 01                	mov    %eax,(%ecx)
f010d021:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d024:	8b 45 08             	mov    0x8(%ebp),%eax
f010d027:	c9                   	leave  
f010d028:	c2 04 00             	ret    $0x4

f010d02b <sys_rcr2>:

uint32 sys_rcr2()
{
f010d02b:	55                   	push   %ebp
f010d02c:	89 e5                	mov    %esp,%ebp
f010d02e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d031:	0f 20 d0             	mov    %cr2,%eax
f010d034:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d037:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d03a:	90                   	nop
}
f010d03b:	c9                   	leave  
f010d03c:	c3                   	ret    

f010d03d <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d03d:	55                   	push   %ebp
f010d03e:	89 e5                	mov    %esp,%ebp
f010d040:	83 ec 04             	sub    $0x4,%esp
f010d043:	8b 45 08             	mov    0x8(%ebp),%eax
f010d046:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d049:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d04c:	a2 a8 1c 88 f0       	mov    %al,0xf0881ca8
}
f010d051:	90                   	nop
f010d052:	c9                   	leave  
f010d053:	c3                   	ret    

f010d054 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d054:	55                   	push   %ebp
f010d055:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d057:	c7 05 b0 1e 88 f0 00 	movl   $0x0,0xf0881eb0
f010d05e:	00 00 00 
}
f010d061:	90                   	nop
f010d062:	5d                   	pop    %ebp
f010d063:	c3                   	ret    

f010d064 <inctst>:
void inctst()
{
f010d064:	55                   	push   %ebp
f010d065:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d067:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d06c:	40                   	inc    %eax
f010d06d:	a3 b0 1e 88 f0       	mov    %eax,0xf0881eb0
}
f010d072:	90                   	nop
f010d073:	5d                   	pop    %ebp
f010d074:	c3                   	ret    

f010d075 <gettst>:
uint32 gettst()
{
f010d075:	55                   	push   %ebp
f010d076:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d078:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
}
f010d07d:	5d                   	pop    %ebp
f010d07e:	c3                   	ret    

f010d07f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d07f:	55                   	push   %ebp
f010d080:	89 e5                	mov    %esp,%ebp
f010d082:	83 ec 28             	sub    $0x28,%esp
f010d085:	8b 45 14             	mov    0x14(%ebp),%eax
f010d088:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d08b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d092:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d096:	83 f8 65             	cmp    $0x65,%eax
f010d099:	74 5d                	je     f010d0f8 <tst+0x79>
f010d09b:	83 f8 65             	cmp    $0x65,%eax
f010d09e:	7f 0a                	jg     f010d0aa <tst+0x2b>
f010d0a0:	83 f8 62             	cmp    $0x62,%eax
f010d0a3:	74 73                	je     f010d118 <tst+0x99>
f010d0a5:	e9 91 00 00 00       	jmp    f010d13b <tst+0xbc>
f010d0aa:	83 f8 67             	cmp    $0x67,%eax
f010d0ad:	74 29                	je     f010d0d8 <tst+0x59>
f010d0af:	83 f8 6c             	cmp    $0x6c,%eax
f010d0b2:	0f 85 83 00 00 00    	jne    f010d13b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0bb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0be:	73 09                	jae    f010d0c9 <tst+0x4a>
			chk = 1;
f010d0c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0c7:	eb 68                	jmp    f010d131 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d0c9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0cd:	74 62                	je     f010d131 <tst+0xb2>
			chk = 1;
f010d0cf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0d6:	eb 59                	jmp    f010d131 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0db:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0de:	76 09                	jbe    f010d0e9 <tst+0x6a>
			chk = 1;
f010d0e0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0e7:	eb 4b                	jmp    f010d134 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d0e9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0ed:	74 45                	je     f010d134 <tst+0xb5>
			chk = 1;
f010d0ef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0f6:	eb 3c                	jmp    f010d134 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0fe:	75 09                	jne    f010d109 <tst+0x8a>
			chk = 1;
f010d100:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d107:	eb 2e                	jmp    f010d137 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d109:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d10d:	74 28                	je     f010d137 <tst+0xb8>
			chk = 1;
f010d10f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d116:	eb 1f                	jmp    f010d137 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d118:	8b 45 08             	mov    0x8(%ebp),%eax
f010d11b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d11e:	72 1a                	jb     f010d13a <tst+0xbb>
f010d120:	8b 45 08             	mov    0x8(%ebp),%eax
f010d123:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d126:	77 12                	ja     f010d13a <tst+0xbb>
			chk = 1;
f010d128:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d12f:	eb 09                	jmp    f010d13a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d131:	90                   	nop
f010d132:	eb 07                	jmp    f010d13b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d134:	90                   	nop
f010d135:	eb 04                	jmp    f010d13b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d137:	90                   	nop
f010d138:	eb 01                	jmp    f010d13b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d13a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d13b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d13f:	75 17                	jne    f010d158 <tst+0xd9>
f010d141:	83 ec 04             	sub    $0x4,%esp
f010d144:	68 41 7a 13 f0       	push   $0xf0137a41
f010d149:	68 00 02 00 00       	push   $0x200
f010d14e:	68 9f 79 13 f0       	push   $0xf013799f
f010d153:	e8 ad 30 ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d158:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d15d:	40                   	inc    %eax
f010d15e:	a3 b0 1e 88 f0       	mov    %eax,0xf0881eb0
	return;
f010d163:	90                   	nop
}
f010d164:	c9                   	leave  
f010d165:	c3                   	ret    

f010d166 <chktst>:

void chktst(uint32 n)
{
f010d166:	55                   	push   %ebp
f010d167:	89 e5                	mov    %esp,%ebp
f010d169:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d16c:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d171:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d174:	75 12                	jne    f010d188 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	68 54 7a 13 f0       	push   $0xf0137a54
f010d17e:	e8 8b 3b ff ff       	call   f0100d0e <cprintf>
f010d183:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d186:	eb 17                	jmp    f010d19f <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d188:	83 ec 04             	sub    $0x4,%esp
f010d18b:	68 80 7a 13 f0       	push   $0xf0137a80
f010d190:	68 0a 02 00 00       	push   $0x20a
f010d195:	68 9f 79 13 f0       	push   $0xf013799f
f010d19a:	e8 66 30 ff ff       	call   f0100205 <_panic>
}
f010d19f:	c9                   	leave  
f010d1a0:	c3                   	ret    

f010d1a1 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d1a1:	55                   	push   %ebp
f010d1a2:	89 e5                	mov    %esp,%ebp
f010d1a4:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d1a7:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d1ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d1af:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d1b6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d1bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d1c1:	0f 84 a5 00 00 00    	je     f010d26c <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d1c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1d1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d1d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d1da:	eb 4a                	jmp    f010d226 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d1dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1df:	8b 00                	mov    (%eax),%eax
f010d1e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d1e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1ec:	89 c2                	mov    %eax,%edx
f010d1ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1f1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	01 c8                	add    %ecx,%eax
f010d1fd:	8b 00                	mov    (%eax),%eax
f010d1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d205:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d20a:	39 c2                	cmp    %eax,%edx
f010d20c:	74 09                	je     f010d217 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d20e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d215:	eb 3e                	jmp    f010d255 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d217:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d21a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d21d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d223:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d226:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d22a:	74 08                	je     f010d234 <sys_check_LRU_lists+0x93>
f010d22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d22f:	8b 40 10             	mov    0x10(%eax),%eax
f010d232:	eb 05                	jmp    f010d239 <sys_check_LRU_lists+0x98>
f010d234:	b8 00 00 00 00       	mov    $0x0,%eax
f010d239:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d23c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d242:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d245:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d24b:	85 c0                	test   %eax,%eax
f010d24d:	75 8d                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
f010d24f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d253:	75 87                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d258:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d25e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d261:	39 c2                	cmp    %eax,%edx
f010d263:	74 07                	je     f010d26c <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d265:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d26c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d270:	0f 84 a5 00 00 00    	je     f010d31b <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d276:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d27d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d280:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d286:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d289:	eb 4a                	jmp    f010d2d5 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d28b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d28e:	8b 00                	mov    (%eax),%eax
f010d290:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d293:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d296:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d29b:	89 c2                	mov    %eax,%edx
f010d29d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2a0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2aa:	01 c8                	add    %ecx,%eax
f010d2ac:	8b 00                	mov    (%eax),%eax
f010d2ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d2b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2b9:	39 c2                	cmp    %eax,%edx
f010d2bb:	74 09                	je     f010d2c6 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d2bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d2c4:	eb 3e                	jmp    f010d304 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d2c6:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d2c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2cc:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d2d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2d9:	74 08                	je     f010d2e3 <sys_check_LRU_lists+0x142>
f010d2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2de:	8b 40 10             	mov    0x10(%eax),%eax
f010d2e1:	eb 05                	jmp    f010d2e8 <sys_check_LRU_lists+0x147>
f010d2e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d2eb:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d2f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2f4:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2fa:	85 c0                	test   %eax,%eax
f010d2fc:	75 8d                	jne    f010d28b <sys_check_LRU_lists+0xea>
f010d2fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d302:	75 87                	jne    f010d28b <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d304:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d307:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d30d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d310:	39 c2                	cmp    %eax,%edx
f010d312:	74 07                	je     f010d31b <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d31e:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d321:	c9                   	leave  
f010d322:	c3                   	ret    

f010d323 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d323:	55                   	push   %ebp
f010d324:	89 e5                	mov    %esp,%ebp
f010d326:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d329:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d32e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d331:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d33b:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d341:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d344:	eb 65                	jmp    f010d3ab <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d34d:	eb 3a                	jmp    f010d389 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d34f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d352:	8b 00                	mov    (%eax),%eax
f010d354:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d357:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d35a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d35f:	89 c2                	mov    %eax,%edx
f010d361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d364:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d36b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36e:	01 c8                	add    %ecx,%eax
f010d370:	8b 00                	mov    (%eax),%eax
f010d372:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d375:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d37d:	39 c2                	cmp    %eax,%edx
f010d37f:	75 05                	jne    f010d386 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d381:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d384:	eb 0b                	jmp    f010d391 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d386:	ff 45 f4             	incl   -0xc(%ebp)
f010d389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d38c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d38f:	7c be                	jl     f010d34f <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d391:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d395:	7e 08                	jle    f010d39f <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d397:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d39a:	e9 ed 00 00 00       	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3a2:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3af:	74 08                	je     f010d3b9 <sys_check_LRU_lists_free+0x96>
f010d3b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3b4:	8b 40 10             	mov    0x10(%eax),%eax
f010d3b7:	eb 05                	jmp    f010d3be <sys_check_LRU_lists_free+0x9b>
f010d3b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d3c1:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d3c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3ca:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3d0:	85 c0                	test   %eax,%eax
f010d3d2:	0f 85 6e ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
f010d3d8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3dc:	0f 85 64 ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d3e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3e5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d3eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ee:	eb 62                	jmp    f010d452 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d3f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d3f7:	eb 3a                	jmp    f010d433 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d3f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3fc:	8b 00                	mov    (%eax),%eax
f010d3fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d401:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d404:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d409:	89 c2                	mov    %eax,%edx
f010d40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d40e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d415:	8b 45 08             	mov    0x8(%ebp),%eax
f010d418:	01 c8                	add    %ecx,%eax
f010d41a:	8b 00                	mov    (%eax),%eax
f010d41c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d41f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d422:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d427:	39 c2                	cmp    %eax,%edx
f010d429:	75 05                	jne    f010d430 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d42b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d42e:	eb 0b                	jmp    f010d43b <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d430:	ff 45 f0             	incl   -0x10(%ebp)
f010d433:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d436:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d439:	7c be                	jl     f010d3f9 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d43b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d43f:	7e 05                	jle    f010d446 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d441:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d444:	eb 46                	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d446:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d449:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d44f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d452:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d456:	74 08                	je     f010d460 <sys_check_LRU_lists_free+0x13d>
f010d458:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d45b:	8b 40 10             	mov    0x10(%eax),%eax
f010d45e:	eb 05                	jmp    f010d465 <sys_check_LRU_lists_free+0x142>
f010d460:	b8 00 00 00 00       	mov    $0x0,%eax
f010d465:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d468:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d46e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d471:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d477:	85 c0                	test   %eax,%eax
f010d479:	0f 85 71 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
f010d47f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d483:	0f 85 67 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d489:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d48c:	c9                   	leave  
f010d48d:	c3                   	ret    

f010d48e <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d48e:	55                   	push   %ebp
f010d48f:	89 e5                	mov    %esp,%ebp
f010d491:	56                   	push   %esi
f010d492:	53                   	push   %ebx
f010d493:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d496:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d49a:	0f 87 0e 04 00 00    	ja     f010d8ae <syscall+0x420>
f010d4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a3:	c1 e0 02             	shl    $0x2,%eax
f010d4a6:	05 9c 7a 13 f0       	add    $0xf0137a9c,%eax
f010d4ab:	8b 00                	mov    (%eax),%eax
f010d4ad:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d4af:	8b 45 14             	mov    0x14(%ebp),%eax
f010d4b2:	0f b6 d0             	movzbl %al,%edx
f010d4b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4b8:	83 ec 04             	sub    $0x4,%esp
f010d4bb:	52                   	push   %edx
f010d4bc:	ff 75 10             	pushl  0x10(%ebp)
f010d4bf:	50                   	push   %eax
f010d4c0:	e8 db f4 ff ff       	call   f010c9a0 <sys_cputs>
f010d4c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4cd:	e9 e1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d4d2:	e8 3e f5 ff ff       	call   f010ca15 <sys_cgetc>
f010d4d7:	e9 d7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d4dc:	83 ec 08             	sub    $0x8,%esp
f010d4df:	ff 75 10             	pushl  0x10(%ebp)
f010d4e2:	ff 75 0c             	pushl  0xc(%ebp)
f010d4e5:	e8 91 f6 ff ff       	call   f010cb7b <sys_calculate_required_frames>
f010d4ea:	83 c4 10             	add    $0x10,%esp
f010d4ed:	e9 c1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d4f2:	e8 a6 f6 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f010d4f7:	e9 b7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d4fc:	e8 bb f6 ff ff       	call   f010cbbc <sys_calculate_modified_frames>
f010d501:	e9 ad 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d506:	e8 cb f6 ff ff       	call   f010cbd6 <sys_calculate_notmod_frames>
f010d50b:	e9 a3 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d510:	e8 33 f7 ff ff       	call   f010cc48 <sys_pf_calculate_allocated_pages>
f010d515:	e9 99 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d51a:	83 ec 0c             	sub    $0xc,%esp
f010d51d:	ff 75 0c             	pushl  0xc(%ebp)
f010d520:	e8 cb f6 ff ff       	call   f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>
f010d525:	83 c4 10             	add    $0x10,%esp
f010d528:	e9 86 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d52d:	e8 d4 f6 ff ff       	call   f010cc06 <sys_scarce_memory>
		return 0;
f010d532:	b8 00 00 00 00       	mov    $0x0,%eax
f010d537:	e9 77 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d53c:	83 ec 08             	sub    $0x8,%esp
f010d53f:	ff 75 10             	pushl  0x10(%ebp)
f010d542:	ff 75 0c             	pushl  0xc(%ebp)
f010d545:	e8 17 f7 ff ff       	call   f010cc61 <sys_free_user_mem>
f010d54a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d54d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d552:	e9 5c 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d557:	8b 55 10             	mov    0x10(%ebp),%edx
f010d55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55d:	83 ec 08             	sub    $0x8,%esp
f010d560:	52                   	push   %edx
f010d561:	50                   	push   %eax
f010d562:	e8 c1 f4 ff ff       	call   f010ca28 <__sys_allocate_page>
f010d567:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d56a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d56f:	e9 3f 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d574:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d577:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d57a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d57d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d580:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d583:	83 ec 0c             	sub    $0xc,%esp
f010d586:	56                   	push   %esi
f010d587:	53                   	push   %ebx
f010d588:	51                   	push   %ecx
f010d589:	52                   	push   %edx
f010d58a:	50                   	push   %eax
f010d58b:	e8 b1 f5 ff ff       	call   f010cb41 <__sys_map_frame>
f010d590:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d593:	b8 00 00 00 00       	mov    $0x0,%eax
f010d598:	e9 16 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d59d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a3:	83 ec 08             	sub    $0x8,%esp
f010d5a6:	52                   	push   %edx
f010d5a7:	50                   	push   %eax
f010d5a8:	e8 b1 f5 ff ff       	call   f010cb5e <__sys_unmap_frame>
f010d5ad:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b5:	e9 f9 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d5ba:	83 ec 04             	sub    $0x4,%esp
f010d5bd:	ff 75 14             	pushl  0x14(%ebp)
f010d5c0:	ff 75 10             	pushl  0x10(%ebp)
f010d5c3:	ff 75 0c             	pushl  0xc(%ebp)
f010d5c6:	e8 f8 f6 ff ff       	call   f010ccc3 <sys_allocate_chunk>
f010d5cb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d3:	e9 db 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d5d8:	e8 41 f7 ff ff       	call   f010cd1e <sys_disable_interrupt>
		return 0;
f010d5dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5e2:	e9 cc 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d5e7:	e8 4c f7 ff ff       	call   f010cd38 <sys_enable_interrupt>
		return 0;
f010d5ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5f1:	e9 bd 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d5f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f9:	0f be c0             	movsbl %al,%eax
f010d5fc:	83 ec 0c             	sub    $0xc,%esp
f010d5ff:	50                   	push   %eax
f010d600:	e8 ec f3 ff ff       	call   f010c9f1 <sys_cputc>
f010d605:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d608:	b8 00 00 00 00       	mov    $0x0,%eax
f010d60d:	e9 a1 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d612:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d615:	0f be c0             	movsbl %al,%eax
f010d618:	83 ec 0c             	sub    $0xc,%esp
f010d61b:	50                   	push   %eax
f010d61c:	e8 f3 f5 ff ff       	call   f010cc14 <sys_clearFFL>
f010d621:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d624:	b8 00 00 00 00       	mov    $0x0,%eax
f010d629:	e9 85 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d62e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d631:	83 ec 08             	sub    $0x8,%esp
f010d634:	ff 75 10             	pushl  0x10(%ebp)
f010d637:	50                   	push   %eax
f010d638:	e8 15 f7 ff ff       	call   f010cd52 <sys_createSemaphore>
f010d63d:	83 c4 10             	add    $0x10,%esp
f010d640:	e9 6e 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d645:	8b 55 10             	mov    0x10(%ebp),%edx
f010d648:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d64b:	83 ec 08             	sub    $0x8,%esp
f010d64e:	52                   	push   %edx
f010d64f:	50                   	push   %eax
f010d650:	e8 1f f7 ff ff       	call   f010cd74 <sys_waitSemaphore>
f010d655:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d658:	b8 00 00 00 00       	mov    $0x0,%eax
f010d65d:	e9 51 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d662:	8b 55 10             	mov    0x10(%ebp),%edx
f010d665:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d668:	83 ec 08             	sub    $0x8,%esp
f010d66b:	52                   	push   %edx
f010d66c:	50                   	push   %eax
f010d66d:	e8 1c f7 ff ff       	call   f010cd8e <sys_signalSemaphore>
f010d672:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d675:	b8 00 00 00 00       	mov    $0x0,%eax
f010d67a:	e9 34 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d67f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d682:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d685:	83 ec 08             	sub    $0x8,%esp
f010d688:	52                   	push   %edx
f010d689:	50                   	push   %eax
f010d68a:	e8 19 f7 ff ff       	call   f010cda8 <sys_getSemaphoreValue>
f010d68f:	83 c4 10             	add    $0x10,%esp
f010d692:	e9 1c 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d697:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d69a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d69d:	0f b6 d0             	movzbl %al,%edx
f010d6a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6a3:	51                   	push   %ecx
f010d6a4:	52                   	push   %edx
f010d6a5:	ff 75 10             	pushl  0x10(%ebp)
f010d6a8:	50                   	push   %eax
f010d6a9:	e8 61 f7 ff ff       	call   f010ce0f <sys_createSharedObject>
f010d6ae:	83 c4 10             	add    $0x10,%esp
f010d6b1:	e9 fd 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d6b6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d6b9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bf:	83 ec 04             	sub    $0x4,%esp
f010d6c2:	51                   	push   %ecx
f010d6c3:	52                   	push   %edx
f010d6c4:	50                   	push   %eax
f010d6c5:	e8 8e f7 ff ff       	call   f010ce58 <sys_getSharedObject>
f010d6ca:	83 c4 10             	add    $0x10,%esp
f010d6cd:	e9 e1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d6d2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6d8:	83 ec 08             	sub    $0x8,%esp
f010d6db:	52                   	push   %edx
f010d6dc:	50                   	push   %eax
f010d6dd:	e8 92 f7 ff ff       	call   f010ce74 <sys_freeSharedObject>
f010d6e2:	83 c4 10             	add    $0x10,%esp
f010d6e5:	e9 c9 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d6ea:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6f0:	83 ec 08             	sub    $0x8,%esp
f010d6f3:	52                   	push   %edx
f010d6f4:	50                   	push   %eax
f010d6f5:	e8 45 f7 ff ff       	call   f010ce3f <sys_getSizeOfSharedObject>
f010d6fa:	83 c4 10             	add    $0x10,%esp
f010d6fd:	e9 b1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d702:	e8 86 f7 ff ff       	call   f010ce8d <sys_getMaxShares>
f010d707:	e9 a7 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d70c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d70f:	ff 75 18             	pushl  0x18(%ebp)
f010d712:	ff 75 14             	pushl  0x14(%ebp)
f010d715:	ff 75 10             	pushl  0x10(%ebp)
f010d718:	50                   	push   %eax
f010d719:	e8 86 f8 ff ff       	call   f010cfa4 <sys_create_env>
f010d71e:	83 c4 10             	add    $0x10,%esp
f010d721:	e9 8d 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d726:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d729:	83 ec 0c             	sub    $0xc,%esp
f010d72c:	50                   	push   %eax
f010d72d:	e8 b2 f8 ff ff       	call   f010cfe4 <sys_run_env>
f010d732:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d735:	b8 00 00 00 00       	mov    $0x0,%eax
f010d73a:	e9 74 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d73f:	e8 60 f7 ff ff       	call   f010cea4 <sys_getenvindex>
f010d744:	e9 6a 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d749:	e8 49 f7 ff ff       	call   f010ce97 <sys_getenvid>
f010d74e:	e9 60 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d753:	e8 99 f7 ff ff       	call   f010cef1 <sys_getparentenvid>
f010d758:	e9 56 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d75d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d760:	83 ec 0c             	sub    $0xc,%esp
f010d763:	50                   	push   %eax
f010d764:	e8 95 f7 ff ff       	call   f010cefe <sys_destroy_env>
f010d769:	83 c4 10             	add    $0x10,%esp
f010d76c:	e9 42 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d771:	e8 20 f8 ff ff       	call   f010cf96 <sys_exit_env>
		return 0;
f010d776:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77b:	e9 33 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d780:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d783:	83 ec 0c             	sub    $0xc,%esp
f010d786:	50                   	push   %eax
f010d787:	e8 70 f8 ff ff       	call   f010cffc <sys_get_virtual_time>
f010d78c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d78f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d792:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d795:	8b 45 10             	mov    0x10(%ebp),%eax
f010d798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d79b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7a9:	89 10                	mov    %edx,(%eax)
		return 0;
f010d7ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b0:	e9 fe 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d7b5:	83 ec 04             	sub    $0x4,%esp
f010d7b8:	ff 75 14             	pushl  0x14(%ebp)
f010d7bb:	ff 75 10             	pushl  0x10(%ebp)
f010d7be:	ff 75 0c             	pushl  0xc(%ebp)
f010d7c1:	e8 20 f5 ff ff       	call   f010cce6 <sys_move_user_mem>
f010d7c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ce:	e9 e0 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d7d3:	e8 53 f8 ff ff       	call   f010d02b <sys_rcr2>
f010d7d8:	e9 d6 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d7dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e0:	0f b6 c0             	movzbl %al,%eax
f010d7e3:	83 ec 0c             	sub    $0xc,%esp
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 51 f8 ff ff       	call   f010d03d <sys_bypassPageFault>
f010d7ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7f4:	e9 ba 00 00 00       	jmp    f010d8b3 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d7f9:	e8 56 f8 ff ff       	call   f010d054 <rsttst>
		return 0;
f010d7fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010d803:	e9 ab 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d808:	e8 57 f8 ff ff       	call   f010d064 <inctst>
		return 0;
f010d80d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d812:	e9 9c 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d817:	83 ec 0c             	sub    $0xc,%esp
f010d81a:	ff 75 0c             	pushl  0xc(%ebp)
f010d81d:	e8 44 f9 ff ff       	call   f010d166 <chktst>
f010d822:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d825:	b8 00 00 00 00       	mov    $0x0,%eax
f010d82a:	e9 84 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d82f:	e8 41 f8 ff ff       	call   f010d075 <gettst>
f010d834:	eb 7d                	jmp    f010d8b3 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d836:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d839:	8b 45 18             	mov    0x18(%ebp),%eax
f010d83c:	0f be c0             	movsbl %al,%eax
f010d83f:	83 ec 0c             	sub    $0xc,%esp
f010d842:	52                   	push   %edx
f010d843:	50                   	push   %eax
f010d844:	ff 75 14             	pushl  0x14(%ebp)
f010d847:	ff 75 10             	pushl  0x10(%ebp)
f010d84a:	ff 75 0c             	pushl  0xc(%ebp)
f010d84d:	e8 2d f8 ff ff       	call   f010d07f <tst>
f010d852:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d855:	b8 00 00 00 00       	mov    $0x0,%eax
f010d85a:	eb 57                	jmp    f010d8b3 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d85c:	e8 a5 f4 ff ff       	call   f010cd06 <sys_get_heap_strategy>
f010d861:	eb 50                	jmp    f010d8b3 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d863:	83 ec 0c             	sub    $0xc,%esp
f010d866:	ff 75 0c             	pushl  0xc(%ebp)
f010d869:	e8 a2 f4 ff ff       	call   f010cd10 <sys_set_uheap_strategy>
f010d86e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d871:	b8 00 00 00 00       	mov    $0x0,%eax
f010d876:	eb 3b                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d878:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d87b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d87e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d881:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d884:	53                   	push   %ebx
f010d885:	51                   	push   %ecx
f010d886:	52                   	push   %edx
f010d887:	50                   	push   %eax
f010d888:	e8 14 f9 ff ff       	call   f010d1a1 <sys_check_LRU_lists>
f010d88d:	83 c4 10             	add    $0x10,%esp
f010d890:	eb 21                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d892:	8b 55 10             	mov    0x10(%ebp),%edx
f010d895:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d898:	83 ec 08             	sub    $0x8,%esp
f010d89b:	52                   	push   %edx
f010d89c:	50                   	push   %eax
f010d89d:	e8 81 fa ff ff       	call   f010d323 <sys_check_LRU_lists_free>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	eb 0c                	jmp    f010d8b3 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d8a7:	b8 03 00 00 00       	mov    $0x3,%eax
f010d8ac:	eb 05                	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d8ae:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d8b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d8b6:	5b                   	pop    %ebx
f010d8b7:	5e                   	pop    %esi
f010d8b8:	5d                   	pop    %ebp
f010d8b9:	c3                   	ret    

f010d8ba <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d8ba:	55                   	push   %ebp
f010d8bb:	89 e5                	mov    %esp,%ebp
f010d8bd:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d8c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c3:	8b 00                	mov    (%eax),%eax
f010d8c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d8c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d8cb:	8b 00                	mov    (%eax),%eax
f010d8cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d8d7:	e9 ca 00 00 00       	jmp    f010d9a6 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d8dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d8df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8e2:	01 d0                	add    %edx,%eax
f010d8e4:	89 c2                	mov    %eax,%edx
f010d8e6:	c1 ea 1f             	shr    $0x1f,%edx
f010d8e9:	01 d0                	add    %edx,%eax
f010d8eb:	d1 f8                	sar    %eax
f010d8ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d8f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8f6:	eb 03                	jmp    f010d8fb <stab_binsearch+0x41>
			m--;
f010d8f8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d901:	7c 1e                	jl     f010d921 <stab_binsearch+0x67>
f010d903:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d906:	89 d0                	mov    %edx,%eax
f010d908:	01 c0                	add    %eax,%eax
f010d90a:	01 d0                	add    %edx,%eax
f010d90c:	c1 e0 02             	shl    $0x2,%eax
f010d90f:	89 c2                	mov    %eax,%edx
f010d911:	8b 45 08             	mov    0x8(%ebp),%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	8a 40 04             	mov    0x4(%eax),%al
f010d919:	0f b6 c0             	movzbl %al,%eax
f010d91c:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d91f:	75 d7                	jne    f010d8f8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d921:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d924:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d927:	7d 09                	jge    f010d932 <stab_binsearch+0x78>
			l = true_m + 1;
f010d929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92c:	40                   	inc    %eax
f010d92d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d930:	eb 74                	jmp    f010d9a6 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d932:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d939:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d93c:	89 d0                	mov    %edx,%eax
f010d93e:	01 c0                	add    %eax,%eax
f010d940:	01 d0                	add    %edx,%eax
f010d942:	c1 e0 02             	shl    $0x2,%eax
f010d945:	89 c2                	mov    %eax,%edx
f010d947:	8b 45 08             	mov    0x8(%ebp),%eax
f010d94a:	01 d0                	add    %edx,%eax
f010d94c:	8b 40 08             	mov    0x8(%eax),%eax
f010d94f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d952:	73 11                	jae    f010d965 <stab_binsearch+0xab>
			*region_left = m;
f010d954:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d957:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d95a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d95c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d95f:	40                   	inc    %eax
f010d960:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d963:	eb 41                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d965:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d968:	89 d0                	mov    %edx,%eax
f010d96a:	01 c0                	add    %eax,%eax
f010d96c:	01 d0                	add    %edx,%eax
f010d96e:	c1 e0 02             	shl    $0x2,%eax
f010d971:	89 c2                	mov    %eax,%edx
f010d973:	8b 45 08             	mov    0x8(%ebp),%eax
f010d976:	01 d0                	add    %edx,%eax
f010d978:	8b 40 08             	mov    0x8(%eax),%eax
f010d97b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d97e:	76 14                	jbe    f010d994 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d980:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d983:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d986:	8b 45 10             	mov    0x10(%ebp),%eax
f010d989:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d98b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d98e:	48                   	dec    %eax
f010d98f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d992:	eb 12                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d994:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d997:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d99a:	89 10                	mov    %edx,(%eax)
			l = m;
f010d99c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d99f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d9a2:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d9a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d9a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d9ac:	0f 8e 2a ff ff ff    	jle    f010d8dc <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d9b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d9b6:	75 0f                	jne    f010d9c7 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d9b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9bb:	8b 00                	mov    (%eax),%eax
f010d9bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d9c0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9c3:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d9c5:	eb 3d                	jmp    f010da04 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9ca:	8b 00                	mov    (%eax),%eax
f010d9cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d9cf:	eb 03                	jmp    f010d9d4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d9d1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d9dc:	7d 1e                	jge    f010d9fc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d9de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9e1:	89 d0                	mov    %edx,%eax
f010d9e3:	01 c0                	add    %eax,%eax
f010d9e5:	01 d0                	add    %edx,%eax
f010d9e7:	c1 e0 02             	shl    $0x2,%eax
f010d9ea:	89 c2                	mov    %eax,%edx
f010d9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9ef:	01 d0                	add    %edx,%eax
f010d9f1:	8a 40 04             	mov    0x4(%eax),%al
f010d9f4:	0f b6 c0             	movzbl %al,%eax
f010d9f7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d9fa:	75 d5                	jne    f010d9d1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d9fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da02:	89 10                	mov    %edx,(%eax)
	}
}
f010da04:	90                   	nop
f010da05:	c9                   	leave  
f010da06:	c3                   	ret    

f010da07 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010da07:	55                   	push   %ebp
f010da08:	89 e5                	mov    %esp,%ebp
f010da0a:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010da0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da10:	c7 00 60 7b 13 f0    	movl   $0xf0137b60,(%eax)
	info->eip_line = 0;
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010da20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da23:	c7 40 08 60 7b 13 f0 	movl   $0xf0137b60,0x8(%eax)
	info->eip_fn_namelen = 9;
f010da2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da2d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010da34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da37:	8b 55 08             	mov    0x8(%ebp),%edx
f010da3a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010da3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da40:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010da47:	8b 45 08             	mov    0x8(%ebp),%eax
f010da4a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010da4f:	76 1e                	jbe    f010da6f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010da51:	c7 45 f4 10 d7 13 f0 	movl   $0xf013d710,-0xc(%ebp)
		stab_end = __STAB_END__;
f010da58:	c7 45 f0 54 d1 17 f0 	movl   $0xf017d154,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010da5f:	c7 45 ec 55 d1 17 f0 	movl   $0xf017d155,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010da66:	c7 45 e8 87 9d 18 f0 	movl   $0xf0189d87,-0x18(%ebp)
f010da6d:	eb 2a                	jmp    f010da99 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010da6f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010da76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da79:	8b 00                	mov    (%eax),%eax
f010da7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010da7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da81:	8b 40 04             	mov    0x4(%eax),%eax
f010da84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010da87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da8a:	8b 40 08             	mov    0x8(%eax),%eax
f010da8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010da90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da93:	8b 40 0c             	mov    0xc(%eax),%eax
f010da96:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010da99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da9f:	76 0a                	jbe    f010daab <debuginfo_eip+0xa4>
f010daa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010daa4:	48                   	dec    %eax
f010daa5:	8a 00                	mov    (%eax),%al
f010daa7:	84 c0                	test   %al,%al
f010daa9:	74 0a                	je     f010dab5 <debuginfo_eip+0xae>
		return -1;
f010daab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dab0:	e9 01 02 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dab5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dabc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dac2:	29 c2                	sub    %eax,%edx
f010dac4:	89 d0                	mov    %edx,%eax
f010dac6:	c1 f8 02             	sar    $0x2,%eax
f010dac9:	89 c2                	mov    %eax,%edx
f010dacb:	89 d0                	mov    %edx,%eax
f010dacd:	c1 e0 02             	shl    $0x2,%eax
f010dad0:	01 d0                	add    %edx,%eax
f010dad2:	c1 e0 02             	shl    $0x2,%eax
f010dad5:	01 d0                	add    %edx,%eax
f010dad7:	c1 e0 02             	shl    $0x2,%eax
f010dada:	01 d0                	add    %edx,%eax
f010dadc:	89 c1                	mov    %eax,%ecx
f010dade:	c1 e1 08             	shl    $0x8,%ecx
f010dae1:	01 c8                	add    %ecx,%eax
f010dae3:	89 c1                	mov    %eax,%ecx
f010dae5:	c1 e1 10             	shl    $0x10,%ecx
f010dae8:	01 c8                	add    %ecx,%eax
f010daea:	01 c0                	add    %eax,%eax
f010daec:	01 d0                	add    %edx,%eax
f010daee:	48                   	dec    %eax
f010daef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010daf2:	ff 75 08             	pushl  0x8(%ebp)
f010daf5:	6a 64                	push   $0x64
f010daf7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dafa:	50                   	push   %eax
f010dafb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dafe:	50                   	push   %eax
f010daff:	ff 75 f4             	pushl  -0xc(%ebp)
f010db02:	e8 b3 fd ff ff       	call   f010d8ba <stab_binsearch>
f010db07:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010db0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db0d:	85 c0                	test   %eax,%eax
f010db0f:	75 0a                	jne    f010db1b <debuginfo_eip+0x114>
		return -1;
f010db11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010db16:	e9 9b 01 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010db1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010db21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010db24:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010db27:	ff 75 08             	pushl  0x8(%ebp)
f010db2a:	6a 24                	push   $0x24
f010db2c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010db2f:	50                   	push   %eax
f010db30:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010db33:	50                   	push   %eax
f010db34:	ff 75 f4             	pushl  -0xc(%ebp)
f010db37:	e8 7e fd ff ff       	call   f010d8ba <stab_binsearch>
f010db3c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010db3f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010db42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010db45:	39 c2                	cmp    %eax,%edx
f010db47:	0f 8f 86 00 00 00    	jg     f010dbd3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010db4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db50:	89 c2                	mov    %eax,%edx
f010db52:	89 d0                	mov    %edx,%eax
f010db54:	01 c0                	add    %eax,%eax
f010db56:	01 d0                	add    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	89 c2                	mov    %eax,%edx
f010db5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db60:	01 d0                	add    %edx,%eax
f010db62:	8b 00                	mov    (%eax),%eax
f010db64:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010db67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010db6a:	29 d1                	sub    %edx,%ecx
f010db6c:	89 ca                	mov    %ecx,%edx
f010db6e:	39 d0                	cmp    %edx,%eax
f010db70:	73 22                	jae    f010db94 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010db72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db75:	89 c2                	mov    %eax,%edx
f010db77:	89 d0                	mov    %edx,%eax
f010db79:	01 c0                	add    %eax,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	c1 e0 02             	shl    $0x2,%eax
f010db80:	89 c2                	mov    %eax,%edx
f010db82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db85:	01 d0                	add    %edx,%eax
f010db87:	8b 10                	mov    (%eax),%edx
f010db89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db8c:	01 c2                	add    %eax,%edx
f010db8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db91:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010db94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db97:	89 c2                	mov    %eax,%edx
f010db99:	89 d0                	mov    %edx,%eax
f010db9b:	01 c0                	add    %eax,%eax
f010db9d:	01 d0                	add    %edx,%eax
f010db9f:	c1 e0 02             	shl    $0x2,%eax
f010dba2:	89 c2                	mov    %eax,%edx
f010dba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dba7:	01 d0                	add    %edx,%eax
f010dba9:	8b 50 08             	mov    0x8(%eax),%edx
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dbb2:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb8:	8b 40 10             	mov    0x10(%eax),%eax
f010dbbb:	29 c2                	sub    %eax,%edx
f010dbbd:	89 d0                	mov    %edx,%eax
f010dbbf:	c1 f8 02             	sar    $0x2,%eax
f010dbc2:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010dbc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010dbcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dbce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dbd1:	eb 15                	jmp    f010dbe8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dbd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbd9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dbdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dbdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dbe2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dbe5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dbe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbeb:	8b 40 08             	mov    0x8(%eax),%eax
f010dbee:	83 ec 08             	sub    $0x8,%esp
f010dbf1:	6a 3a                	push   $0x3a
f010dbf3:	50                   	push   %eax
f010dbf4:	e8 62 38 02 00       	call   f013145b <strfind>
f010dbf9:	83 c4 10             	add    $0x10,%esp
f010dbfc:	89 c2                	mov    %eax,%edx
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	8b 40 08             	mov    0x8(%eax),%eax
f010dc04:	29 c2                	sub    %eax,%edx
f010dc06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc09:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc0c:	eb 03                	jmp    f010dc11 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010dc0e:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc14:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc17:	7c 4e                	jl     f010dc67 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010dc19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc1c:	89 d0                	mov    %edx,%eax
f010dc1e:	01 c0                	add    %eax,%eax
f010dc20:	01 d0                	add    %edx,%eax
f010dc22:	c1 e0 02             	shl    $0x2,%eax
f010dc25:	89 c2                	mov    %eax,%edx
f010dc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc2a:	01 d0                	add    %edx,%eax
f010dc2c:	8a 40 04             	mov    0x4(%eax),%al
f010dc2f:	3c 84                	cmp    $0x84,%al
f010dc31:	74 34                	je     f010dc67 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dc33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc36:	89 d0                	mov    %edx,%eax
f010dc38:	01 c0                	add    %eax,%eax
f010dc3a:	01 d0                	add    %edx,%eax
f010dc3c:	c1 e0 02             	shl    $0x2,%eax
f010dc3f:	89 c2                	mov    %eax,%edx
f010dc41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc44:	01 d0                	add    %edx,%eax
f010dc46:	8a 40 04             	mov    0x4(%eax),%al
f010dc49:	3c 64                	cmp    $0x64,%al
f010dc4b:	75 c1                	jne    f010dc0e <debuginfo_eip+0x207>
f010dc4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc50:	89 d0                	mov    %edx,%eax
f010dc52:	01 c0                	add    %eax,%eax
f010dc54:	01 d0                	add    %edx,%eax
f010dc56:	c1 e0 02             	shl    $0x2,%eax
f010dc59:	89 c2                	mov    %eax,%edx
f010dc5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5e:	01 d0                	add    %edx,%eax
f010dc60:	8b 40 08             	mov    0x8(%eax),%eax
f010dc63:	85 c0                	test   %eax,%eax
f010dc65:	74 a7                	je     f010dc0e <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dc67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc6a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc6d:	7c 42                	jl     f010dcb1 <debuginfo_eip+0x2aa>
f010dc6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc72:	89 d0                	mov    %edx,%eax
f010dc74:	01 c0                	add    %eax,%eax
f010dc76:	01 d0                	add    %edx,%eax
f010dc78:	c1 e0 02             	shl    $0x2,%eax
f010dc7b:	89 c2                	mov    %eax,%edx
f010dc7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	8b 00                	mov    (%eax),%eax
f010dc84:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dc87:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc8a:	29 d1                	sub    %edx,%ecx
f010dc8c:	89 ca                	mov    %ecx,%edx
f010dc8e:	39 d0                	cmp    %edx,%eax
f010dc90:	73 1f                	jae    f010dcb1 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010dc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc95:	89 d0                	mov    %edx,%eax
f010dc97:	01 c0                	add    %eax,%eax
f010dc99:	01 d0                	add    %edx,%eax
f010dc9b:	c1 e0 02             	shl    $0x2,%eax
f010dc9e:	89 c2                	mov    %eax,%edx
f010dca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dca3:	01 d0                	add    %edx,%eax
f010dca5:	8b 10                	mov    (%eax),%edx
f010dca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dcaa:	01 c2                	add    %eax,%edx
f010dcac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcaf:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dcb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dcb6:	c9                   	leave  
f010dcb7:	c3                   	ret    

f010dcb8 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dcb8:	55                   	push   %ebp
f010dcb9:	89 e5                	mov    %esp,%ebp
f010dcbb:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dcbe:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dcc2:	74 1c                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcc4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dcc8:	74 16                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcca:	68 6c 7b 13 f0       	push   $0xf0137b6c
f010dccf:	68 b6 7b 13 f0       	push   $0xf0137bb6
f010dcd4:	6a 18                	push   $0x18
f010dcd6:	68 cb 7b 13 f0       	push   $0xf0137bcb
f010dcdb:	e8 25 25 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dce0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce3:	a3 88 1d 88 f0       	mov    %eax,0xf0881d88
}
f010dce8:	90                   	nop
f010dce9:	c9                   	leave  
f010dcea:	c3                   	ret    

f010dceb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dceb:	55                   	push   %ebp
f010dcec:	89 e5                	mov    %esp,%ebp
f010dcee:	c7 05 88 1d 88 f0 03 	movl   $0x3,0xf0881d88
f010dcf5:	00 00 00 
f010dcf8:	90                   	nop
f010dcf9:	5d                   	pop    %ebp
f010dcfa:	c3                   	ret    

f010dcfb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dcfb:	55                   	push   %ebp
f010dcfc:	89 e5                	mov    %esp,%ebp
f010dcfe:	c7 05 88 1d 88 f0 04 	movl   $0x4,0xf0881d88
f010dd05:	00 00 00 
f010dd08:	90                   	nop
f010dd09:	5d                   	pop    %ebp
f010dd0a:	c3                   	ret    

f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dd0b:	55                   	push   %ebp
f010dd0c:	89 e5                	mov    %esp,%ebp
f010dd0e:	c7 05 88 1d 88 f0 05 	movl   $0x5,0xf0881d88
f010dd15:	00 00 00 
f010dd18:	90                   	nop
f010dd19:	5d                   	pop    %ebp
f010dd1a:	c3                   	ret    

f010dd1b <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dd1b:	55                   	push   %ebp
f010dd1c:	89 e5                	mov    %esp,%ebp
f010dd1e:	c7 05 88 1d 88 f0 07 	movl   $0x7,0xf0881d88
f010dd25:	00 00 00 
f010dd28:	90                   	nop
f010dd29:	5d                   	pop    %ebp
f010dd2a:	c3                   	ret    

f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dd2b:	55                   	push   %ebp
f010dd2c:	89 e5                	mov    %esp,%ebp
f010dd2e:	c7 05 88 1d 88 f0 06 	movl   $0x6,0xf0881d88
f010dd35:	00 00 00 
f010dd38:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd3b:	a3 e4 1c 88 f0       	mov    %eax,0xf0881ce4
f010dd40:	90                   	nop
f010dd41:	5d                   	pop    %ebp
f010dd42:	c3                   	ret    

f010dd43 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dd43:	55                   	push   %ebp
f010dd44:	89 e5                	mov    %esp,%ebp
f010dd46:	8b 15 88 1d 88 f0    	mov    0xf0881d88,%edx
f010dd4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd4f:	39 c2                	cmp    %eax,%edx
f010dd51:	0f 94 c0             	sete   %al
f010dd54:	0f b6 c0             	movzbl %al,%eax
f010dd57:	5d                   	pop    %ebp
f010dd58:	c3                   	ret    

f010dd59 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dd59:	55                   	push   %ebp
f010dd5a:	89 e5                	mov    %esp,%ebp
f010dd5c:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010dd61:	83 f8 03             	cmp    $0x3,%eax
f010dd64:	75 07                	jne    f010dd6d <isPageReplacmentAlgorithmCLOCK+0x14>
f010dd66:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd6b:	eb 05                	jmp    f010dd72 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dd6d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd72:	5d                   	pop    %ebp
f010dd73:	c3                   	ret    

f010dd74 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dd74:	55                   	push   %ebp
f010dd75:	89 e5                	mov    %esp,%ebp
f010dd77:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010dd7c:	83 f8 04             	cmp    $0x4,%eax
f010dd7f:	75 07                	jne    f010dd88 <isPageReplacmentAlgorithmFIFO+0x14>
f010dd81:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd86:	eb 05                	jmp    f010dd8d <isPageReplacmentAlgorithmFIFO+0x19>
f010dd88:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd8d:	5d                   	pop    %ebp
f010dd8e:	c3                   	ret    

f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dd8f:	55                   	push   %ebp
f010dd90:	89 e5                	mov    %esp,%ebp
f010dd92:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010dd97:	83 f8 05             	cmp    $0x5,%eax
f010dd9a:	75 07                	jne    f010dda3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dd9c:	b8 01 00 00 00       	mov    $0x1,%eax
f010dda1:	eb 05                	jmp    f010dda8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dda3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dda8:	5d                   	pop    %ebp
f010dda9:	c3                   	ret    

f010ddaa <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010ddaa:	55                   	push   %ebp
f010ddab:	89 e5                	mov    %esp,%ebp
f010ddad:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010ddb2:	83 f8 07             	cmp    $0x7,%eax
f010ddb5:	75 07                	jne    f010ddbe <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010ddb7:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddbc:	eb 05                	jmp    f010ddc3 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010ddbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc3:	5d                   	pop    %ebp
f010ddc4:	c3                   	ret    

f010ddc5 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010ddc5:	55                   	push   %ebp
f010ddc6:	89 e5                	mov    %esp,%ebp
f010ddc8:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010ddcd:	83 f8 06             	cmp    $0x6,%eax
f010ddd0:	75 07                	jne    f010ddd9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010ddd2:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddd7:	eb 05                	jmp    f010ddde <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010ddd9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddde:	5d                   	pop    %ebp
f010dddf:	c3                   	ret    

f010dde0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dde0:	55                   	push   %ebp
f010dde1:	89 e5                	mov    %esp,%ebp
f010dde3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dde6:	a3 50 1d 88 f0       	mov    %eax,0xf0881d50
f010ddeb:	90                   	nop
f010ddec:	5d                   	pop    %ebp
f010dded:	c3                   	ret    

f010ddee <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010ddee:	55                   	push   %ebp
f010ddef:	89 e5                	mov    %esp,%ebp
f010ddf1:	a1 50 1d 88 f0       	mov    0xf0881d50,%eax
f010ddf6:	5d                   	pop    %ebp
f010ddf7:	c3                   	ret    

f010ddf8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010ddf8:	55                   	push   %ebp
f010ddf9:	89 e5                	mov    %esp,%ebp
f010ddfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddfe:	a3 90 1d 88 f0       	mov    %eax,0xf0881d90
f010de03:	90                   	nop
f010de04:	5d                   	pop    %ebp
f010de05:	c3                   	ret    

f010de06 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010de06:	55                   	push   %ebp
f010de07:	89 e5                	mov    %esp,%ebp
f010de09:	a1 90 1d 88 f0       	mov    0xf0881d90,%eax
f010de0e:	5d                   	pop    %ebp
f010de0f:	c3                   	ret    

f010de10 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010de10:	55                   	push   %ebp
f010de11:	89 e5                	mov    %esp,%ebp
f010de13:	8b 45 08             	mov    0x8(%ebp),%eax
f010de16:	a3 b0 1d 88 f0       	mov    %eax,0xf0881db0
f010de1b:	90                   	nop
f010de1c:	5d                   	pop    %ebp
f010de1d:	c3                   	ret    

f010de1e <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010de1e:	55                   	push   %ebp
f010de1f:	89 e5                	mov    %esp,%ebp
f010de21:	a1 b0 1d 88 f0       	mov    0xf0881db0,%eax
f010de26:	5d                   	pop    %ebp
f010de27:	c3                   	ret    

f010de28 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de28:	55                   	push   %ebp
f010de29:	89 e5                	mov    %esp,%ebp
f010de2b:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010de2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010de31:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de34:	83 ec 08             	sub    $0x8,%esp
f010de37:	ff 75 0c             	pushl  0xc(%ebp)
f010de3a:	50                   	push   %eax
f010de3b:	e8 c7 8d ff ff       	call   f0106c07 <create_page_table>
f010de40:	83 c4 10             	add    $0x10,%esp
f010de43:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010de46:	90                   	nop
f010de47:	c9                   	leave  
f010de48:	c3                   	ret    

f010de49 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de49:	55                   	push   %ebp
f010de4a:	89 e5                	mov    %esp,%ebp
f010de4c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010de4f:	83 ec 0c             	sub    $0xc,%esp
f010de52:	ff 75 08             	pushl  0x8(%ebp)
f010de55:	e8 bc 9f ff ff       	call   f0107e16 <env_page_ws_get_size>
f010de5a:	83 c4 10             	add    $0x10,%esp
f010de5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010de60:	8b 45 08             	mov    0x8(%ebp),%eax
f010de63:	8b 40 74             	mov    0x74(%eax),%eax
f010de66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de69:	0f 85 56 01 00 00    	jne    f010dfc5 <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010de6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010de76:	8b 45 08             	mov    0x8(%ebp),%eax
f010de79:	8b 48 78             	mov    0x78(%eax),%ecx
f010de7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010de7f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010de85:	89 d0                	mov    %edx,%eax
f010de87:	01 c0                	add    %eax,%eax
f010de89:	01 d0                	add    %edx,%eax
f010de8b:	c1 e0 03             	shl    $0x3,%eax
f010de8e:	01 c8                	add    %ecx,%eax
f010de90:	8b 10                	mov    (%eax),%edx
f010de92:	8b 45 08             	mov    0x8(%ebp),%eax
f010de95:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de98:	83 ec 08             	sub    $0x8,%esp
f010de9b:	52                   	push   %edx
f010de9c:	50                   	push   %eax
f010de9d:	e8 bf 9d ff ff       	call   f0107c61 <pt_get_page_permissions>
f010dea2:	83 c4 10             	add    $0x10,%esp
f010dea5:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010dea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010deab:	83 e0 20             	and    $0x20,%eax
f010deae:	85 c0                	test   %eax,%eax
f010deb0:	74 46                	je     f010def8 <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010deb2:	8b 45 08             	mov    0x8(%ebp),%eax
f010deb5:	8b 48 78             	mov    0x78(%eax),%ecx
f010deb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010debb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010dec1:	89 d0                	mov    %edx,%eax
f010dec3:	01 c0                	add    %eax,%eax
f010dec5:	01 d0                	add    %edx,%eax
f010dec7:	c1 e0 03             	shl    $0x3,%eax
f010deca:	01 c8                	add    %ecx,%eax
f010decc:	8b 10                	mov    (%eax),%edx
f010dece:	8b 45 08             	mov    0x8(%ebp),%eax
f010ded1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ded4:	6a 20                	push   $0x20
f010ded6:	6a 00                	push   $0x0
f010ded8:	52                   	push   %edx
f010ded9:	50                   	push   %eax
f010deda:	e8 ce 9c ff ff       	call   f0107bad <pt_set_page_permissions>
f010dedf:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010dee2:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010deeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010deee:	8b 40 74             	mov    0x74(%eax),%eax
f010def1:	48                   	dec    %eax
f010def2:	39 c2                	cmp    %eax,%edx
f010def4:	75 7b                	jne    f010df71 <page_fault_handler+0x128>
f010def6:	eb 67                	jmp    f010df5f <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010def8:	8b 45 08             	mov    0x8(%ebp),%eax
f010defb:	8b 48 78             	mov    0x78(%eax),%ecx
f010defe:	8b 45 08             	mov    0x8(%ebp),%eax
f010df01:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010df07:	89 d0                	mov    %edx,%eax
f010df09:	01 c0                	add    %eax,%eax
f010df0b:	01 d0                	add    %edx,%eax
f010df0d:	c1 e0 03             	shl    $0x3,%eax
f010df10:	01 c8                	add    %ecx,%eax
f010df12:	8b 00                	mov    (%eax),%eax
f010df14:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010df17:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010df18:	8b 45 08             	mov    0x8(%ebp),%eax
f010df1b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010df1e:	83 ec 08             	sub    $0x8,%esp
f010df21:	ff 75 f0             	pushl  -0x10(%ebp)
f010df24:	50                   	push   %eax
f010df25:	e8 37 9d ff ff       	call   f0107c61 <pt_get_page_permissions>
f010df2a:	83 c4 10             	add    $0x10,%esp
f010df2d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010df30:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010df37:	8b 45 08             	mov    0x8(%ebp),%eax
f010df3a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010df3d:	83 ec 04             	sub    $0x4,%esp
f010df40:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010df43:	52                   	push   %edx
f010df44:	ff 75 f0             	pushl  -0x10(%ebp)
f010df47:	50                   	push   %eax
f010df48:	e8 b9 8e ff ff       	call   f0106e06 <get_frame_info>
f010df4d:	83 c4 10             	add    $0x10,%esp
f010df50:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010df53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df56:	83 e0 40             	and    $0x40,%eax
f010df59:	85 c0                	test   %eax,%eax
f010df5b:	74 42                	je     f010df9f <page_fault_handler+0x156>
f010df5d:	eb 2c                	jmp    f010df8b <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010df5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010df62:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010df69:	00 00 00 
f010df6c:	e9 05 ff ff ff       	jmp    f010de76 <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010df71:	8b 45 08             	mov    0x8(%ebp),%eax
f010df74:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010df7a:	8d 50 01             	lea    0x1(%eax),%edx
f010df7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010df80:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010df86:	e9 eb fe ff ff       	jmp    f010de76 <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010df8b:	83 ec 04             	sub    $0x4,%esp
f010df8e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010df91:	ff 75 f0             	pushl  -0x10(%ebp)
f010df94:	ff 75 08             	pushl  0x8(%ebp)
f010df97:	e8 3c 58 ff ff       	call   f01037d8 <pf_update_env_page>
f010df9c:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010df9f:	83 ec 08             	sub    $0x8,%esp
f010dfa2:	ff 75 f0             	pushl  -0x10(%ebp)
f010dfa5:	ff 75 08             	pushl  0x8(%ebp)
f010dfa8:	e8 b2 9e ff ff       	call   f0107e5f <env_page_ws_invalidate>
f010dfad:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010dfb0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfb3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dfb6:	83 ec 08             	sub    $0x8,%esp
f010dfb9:	ff 75 f0             	pushl  -0x10(%ebp)
f010dfbc:	50                   	push   %eax
f010dfbd:	e8 b4 8e ff ff       	call   f0106e76 <unmap_frame>
f010dfc2:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010dfc5:	83 ec 0c             	sub    $0xc,%esp
f010dfc8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dfcb:	50                   	push   %eax
f010dfcc:	e8 21 89 ff ff       	call   f01068f2 <allocate_frame>
f010dfd1:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010dfd4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010dfd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfda:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dfdd:	6a 06                	push   $0x6
f010dfdf:	ff 75 0c             	pushl  0xc(%ebp)
f010dfe2:	52                   	push   %edx
f010dfe3:	50                   	push   %eax
f010dfe4:	e8 58 8d ff ff       	call   f0106d41 <map_frame>
f010dfe9:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010dfec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfef:	83 ec 08             	sub    $0x8,%esp
f010dff2:	50                   	push   %eax
f010dff3:	ff 75 08             	pushl  0x8(%ebp)
f010dff6:	e8 3f 5a ff ff       	call   f0103a3a <pf_read_env_page>
f010dffb:	83 c4 10             	add    $0x10,%esp
f010dffe:	89 45 e0             	mov    %eax,-0x20(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e001:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e005:	75 54                	jne    f010e05b <page_fault_handler+0x212>
		{
			if(
f010e007:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e00e:	77 27                	ja     f010e037 <page_fault_handler+0x1ee>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e010:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e017:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e01a:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e01f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e022:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e025:	ba 00 00 00 00       	mov    $0x0,%edx
f010e02a:	f7 75 dc             	divl   -0x24(%ebp)
f010e02d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e030:	29 d0                	sub    %edx,%eax
f010e032:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e035:	76 24                	jbe    f010e05b <page_fault_handler+0x212>
f010e037:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e03e:	77 07                	ja     f010e047 <page_fault_handler+0x1fe>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e040:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e043:	85 c0                	test   %eax,%eax
f010e045:	78 14                	js     f010e05b <page_fault_handler+0x212>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e047:	83 ec 04             	sub    $0x4,%esp
f010e04a:	68 e5 7b 13 f0       	push   $0xf0137be5
f010e04f:	6a 7c                	push   $0x7c
f010e051:	68 cb 7b 13 f0       	push   $0xf0137bcb
f010e056:	e8 aa 21 ff ff       	call   f0100205 <_panic>
		}
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e05e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e064:	83 ec 04             	sub    $0x4,%esp
f010e067:	ff 75 0c             	pushl  0xc(%ebp)
f010e06a:	50                   	push   %eax
f010e06b:	ff 75 08             	pushl  0x8(%ebp)
f010e06e:	e8 57 9e ff ff       	call   f0107eca <env_page_ws_set_entry>
f010e073:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e076:	8b 45 08             	mov    0x8(%ebp),%eax
f010e079:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e07f:	8d 50 01             	lea    0x1(%eax),%edx
f010e082:	8b 45 08             	mov    0x8(%ebp),%eax
f010e085:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e08e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e094:	8b 45 08             	mov    0x8(%ebp),%eax
f010e097:	8b 40 74             	mov    0x74(%eax),%eax
f010e09a:	39 c2                	cmp    %eax,%edx
f010e09c:	75 0d                	jne    f010e0ab <page_fault_handler+0x262>
			curenv->page_last_WS_index = 0;
f010e09e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0a1:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e0a8:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e0ab:	90                   	nop
f010e0ac:	c9                   	leave  
f010e0ad:	c3                   	ret    

f010e0ae <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e0ae:	55                   	push   %ebp
f010e0af:	89 e5                	mov    %esp,%ebp
f010e0b1:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e0b4:	83 ec 04             	sub    $0x4,%esp
f010e0b7:	68 fc 7b 13 f0       	push   $0xf0137bfc
f010e0bc:	68 88 00 00 00       	push   $0x88
f010e0c1:	68 cb 7b 13 f0       	push   $0xf0137bcb
f010e0c6:	e8 3a 21 ff ff       	call   f0100205 <_panic>

f010e0cb <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e0cb:	55                   	push   %ebp
f010e0cc:	89 e5                	mov    %esp,%ebp
f010e0ce:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0d4:	a3 b4 1c 88 f0       	mov    %eax,0xf0881cb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e0d9:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0dc:	89 d0                	mov    %edx,%eax
f010e0de:	c1 e0 02             	shl    $0x2,%eax
f010e0e1:	01 d0                	add    %edx,%eax
f010e0e3:	01 c0                	add    %eax,%eax
f010e0e5:	01 d0                	add    %edx,%eax
f010e0e7:	01 c0                	add    %eax,%eax
f010e0e9:	01 d0                	add    %edx,%eax
f010e0eb:	c1 e0 02             	shl    $0x2,%eax
f010e0ee:	83 ec 0c             	sub    $0xc,%esp
f010e0f1:	50                   	push   %eax
f010e0f2:	e8 8e 97 ff ff       	call   f0107885 <kmalloc>
f010e0f7:	83 c4 10             	add    $0x10,%esp
f010e0fa:	a3 0c 1d 88 f0       	mov    %eax,0xf0881d0c
	if (semaphores == NULL)
f010e0ff:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e104:	85 c0                	test   %eax,%eax
f010e106:	75 14                	jne    f010e11c <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e108:	83 ec 04             	sub    $0x4,%esp
f010e10b:	68 40 7c 13 f0       	push   $0xf0137c40
f010e110:	6a 1e                	push   $0x1e
f010e112:	68 80 7c 13 f0       	push   $0xf0137c80
f010e117:	e8 e9 20 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e11c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e123:	e9 bd 00 00 00       	jmp    f010e1e5 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e128:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e12e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e131:	89 d0                	mov    %edx,%eax
f010e133:	c1 e0 02             	shl    $0x2,%eax
f010e136:	01 d0                	add    %edx,%eax
f010e138:	01 c0                	add    %eax,%eax
f010e13a:	01 d0                	add    %edx,%eax
f010e13c:	01 c0                	add    %eax,%eax
f010e13e:	01 d0                	add    %edx,%eax
f010e140:	c1 e0 02             	shl    $0x2,%eax
f010e143:	01 c8                	add    %ecx,%eax
f010e145:	83 ec 04             	sub    $0x4,%esp
f010e148:	6a 5c                	push   $0x5c
f010e14a:	6a 00                	push   $0x0
f010e14c:	50                   	push   %eax
f010e14d:	e8 35 33 02 00       	call   f0131487 <memset>
f010e152:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e155:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e15b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e15e:	89 d0                	mov    %edx,%eax
f010e160:	c1 e0 02             	shl    $0x2,%eax
f010e163:	01 d0                	add    %edx,%eax
f010e165:	01 c0                	add    %eax,%eax
f010e167:	01 d0                	add    %edx,%eax
f010e169:	01 c0                	add    %eax,%eax
f010e16b:	01 d0                	add    %edx,%eax
f010e16d:	c1 e0 02             	shl    $0x2,%eax
f010e170:	01 c8                	add    %ecx,%eax
f010e172:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e176:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e17c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e17f:	89 d0                	mov    %edx,%eax
f010e181:	c1 e0 02             	shl    $0x2,%eax
f010e184:	01 d0                	add    %edx,%eax
f010e186:	01 c0                	add    %eax,%eax
f010e188:	01 d0                	add    %edx,%eax
f010e18a:	01 c0                	add    %eax,%eax
f010e18c:	01 d0                	add    %edx,%eax
f010e18e:	c1 e0 02             	shl    $0x2,%eax
f010e191:	01 c8                	add    %ecx,%eax
f010e193:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e19a:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e1a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1a3:	89 d0                	mov    %edx,%eax
f010e1a5:	c1 e0 02             	shl    $0x2,%eax
f010e1a8:	01 d0                	add    %edx,%eax
f010e1aa:	01 c0                	add    %eax,%eax
f010e1ac:	01 d0                	add    %edx,%eax
f010e1ae:	01 c0                	add    %eax,%eax
f010e1b0:	01 d0                	add    %edx,%eax
f010e1b2:	c1 e0 02             	shl    $0x2,%eax
f010e1b5:	01 c8                	add    %ecx,%eax
f010e1b7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e1be:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e1c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1c7:	89 d0                	mov    %edx,%eax
f010e1c9:	c1 e0 02             	shl    $0x2,%eax
f010e1cc:	01 d0                	add    %edx,%eax
f010e1ce:	01 c0                	add    %eax,%eax
f010e1d0:	01 d0                	add    %edx,%eax
f010e1d2:	01 c0                	add    %eax,%eax
f010e1d4:	01 d0                	add    %edx,%eax
f010e1d6:	c1 e0 02             	shl    $0x2,%eax
f010e1d9:	01 c8                	add    %ecx,%eax
f010e1db:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e1e2:	ff 45 f4             	incl   -0xc(%ebp)
f010e1e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e1e8:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e1ed:	39 c2                	cmp    %eax,%edx
f010e1ef:	0f 82 33 ff ff ff    	jb     f010e128 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e1f5:	90                   	nop
f010e1f6:	c9                   	leave  
f010e1f7:	c3                   	ret    

f010e1f8 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e1f8:	55                   	push   %ebp
f010e1f9:	89 e5                	mov    %esp,%ebp
f010e1fb:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e1fe:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e205:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e20c:	eb 2f                	jmp    f010e23d <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e20e:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e214:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e217:	89 d0                	mov    %edx,%eax
f010e219:	c1 e0 02             	shl    $0x2,%eax
f010e21c:	01 d0                	add    %edx,%eax
f010e21e:	01 c0                	add    %eax,%eax
f010e220:	01 d0                	add    %edx,%eax
f010e222:	01 c0                	add    %eax,%eax
f010e224:	01 d0                	add    %edx,%eax
f010e226:	c1 e0 02             	shl    $0x2,%eax
f010e229:	01 c8                	add    %ecx,%eax
f010e22b:	8a 40 58             	mov    0x58(%eax),%al
f010e22e:	84 c0                	test   %al,%al
f010e230:	74 08                	je     f010e23a <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e232:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e235:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e238:	eb 0f                	jmp    f010e249 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e23a:	ff 45 f0             	incl   -0x10(%ebp)
f010e23d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e240:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e245:	39 c2                	cmp    %eax,%edx
f010e247:	72 c5                	jb     f010e20e <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e249:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e24d:	75 4d                	jne    f010e29c <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e24f:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e254:	01 c0                	add    %eax,%eax
f010e256:	89 c2                	mov    %eax,%edx
f010e258:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e25d:	83 ec 08             	sub    $0x8,%esp
f010e260:	52                   	push   %edx
f010e261:	50                   	push   %eax
f010e262:	e8 de 98 ff ff       	call   f0107b45 <krealloc>
f010e267:	83 c4 10             	add    $0x10,%esp
f010e26a:	a3 0c 1d 88 f0       	mov    %eax,0xf0881d0c
			if (semaphores == NULL)
f010e26f:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e274:	85 c0                	test   %eax,%eax
f010e276:	75 10                	jne    f010e288 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e278:	8b 45 08             	mov    0x8(%ebp),%eax
f010e27b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e281:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e286:	eb 5b                	jmp    f010e2e3 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e288:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e28d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e290:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e295:	01 c0                	add    %eax,%eax
f010e297:	a3 b4 1c 88 f0       	mov    %eax,0xf0881cb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e29c:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e2a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e2a5:	89 d0                	mov    %edx,%eax
f010e2a7:	c1 e0 02             	shl    $0x2,%eax
f010e2aa:	01 d0                	add    %edx,%eax
f010e2ac:	01 c0                	add    %eax,%eax
f010e2ae:	01 d0                	add    %edx,%eax
f010e2b0:	01 c0                	add    %eax,%eax
f010e2b2:	01 d0                	add    %edx,%eax
f010e2b4:	c1 e0 02             	shl    $0x2,%eax
f010e2b7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e2ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2bd:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e2bf:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e2c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e2c8:	89 d0                	mov    %edx,%eax
f010e2ca:	c1 e0 02             	shl    $0x2,%eax
f010e2cd:	01 d0                	add    %edx,%eax
f010e2cf:	01 c0                	add    %eax,%eax
f010e2d1:	01 d0                	add    %edx,%eax
f010e2d3:	01 c0                	add    %eax,%eax
f010e2d5:	01 d0                	add    %edx,%eax
f010e2d7:	c1 e0 02             	shl    $0x2,%eax
f010e2da:	01 c8                	add    %ecx,%eax
f010e2dc:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e2e3:	c9                   	leave  
f010e2e4:	c3                   	ret    

f010e2e5 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e2e5:	55                   	push   %ebp
f010e2e6:	89 e5                	mov    %esp,%ebp
f010e2e8:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e2eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e2f2:	e9 84 00 00 00       	jmp    f010e37b <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e2f7:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e2fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e300:	89 d0                	mov    %edx,%eax
f010e302:	c1 e0 02             	shl    $0x2,%eax
f010e305:	01 d0                	add    %edx,%eax
f010e307:	01 c0                	add    %eax,%eax
f010e309:	01 d0                	add    %edx,%eax
f010e30b:	01 c0                	add    %eax,%eax
f010e30d:	01 d0                	add    %edx,%eax
f010e30f:	c1 e0 02             	shl    $0x2,%eax
f010e312:	01 c8                	add    %ecx,%eax
f010e314:	8a 40 58             	mov    0x58(%eax),%al
f010e317:	84 c0                	test   %al,%al
f010e319:	75 5c                	jne    f010e377 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e31b:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e321:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e324:	89 d0                	mov    %edx,%eax
f010e326:	c1 e0 02             	shl    $0x2,%eax
f010e329:	01 d0                	add    %edx,%eax
f010e32b:	01 c0                	add    %eax,%eax
f010e32d:	01 d0                	add    %edx,%eax
f010e32f:	01 c0                	add    %eax,%eax
f010e331:	01 d0                	add    %edx,%eax
f010e333:	c1 e0 02             	shl    $0x2,%eax
f010e336:	01 c8                	add    %ecx,%eax
f010e338:	8b 00                	mov    (%eax),%eax
f010e33a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e33d:	75 39                	jne    f010e378 <get_semaphore_object_ID+0x93>
f010e33f:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e345:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e348:	89 d0                	mov    %edx,%eax
f010e34a:	c1 e0 02             	shl    $0x2,%eax
f010e34d:	01 d0                	add    %edx,%eax
f010e34f:	01 c0                	add    %eax,%eax
f010e351:	01 d0                	add    %edx,%eax
f010e353:	01 c0                	add    %eax,%eax
f010e355:	01 d0                	add    %edx,%eax
f010e357:	c1 e0 02             	shl    $0x2,%eax
f010e35a:	01 c8                	add    %ecx,%eax
f010e35c:	83 c0 04             	add    $0x4,%eax
f010e35f:	83 ec 08             	sub    $0x8,%esp
f010e362:	50                   	push   %eax
f010e363:	ff 75 0c             	pushl  0xc(%ebp)
f010e366:	e8 3a 30 02 00       	call   f01313a5 <strcmp>
f010e36b:	83 c4 10             	add    $0x10,%esp
f010e36e:	85 c0                	test   %eax,%eax
f010e370:	75 06                	jne    f010e378 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e372:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e375:	eb 19                	jmp    f010e390 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e377:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e378:	ff 45 f4             	incl   -0xc(%ebp)
f010e37b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e37e:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e383:	39 c2                	cmp    %eax,%edx
f010e385:	0f 82 6c ff ff ff    	jb     f010e2f7 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e38b:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e390:	c9                   	leave  
f010e391:	c3                   	ret    

f010e392 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e392:	55                   	push   %ebp
f010e393:	89 e5                	mov    %esp,%ebp
f010e395:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e398:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e39d:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e3a0:	72 0a                	jb     f010e3ac <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e3a2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e3a7:	e9 bf 00 00 00       	jmp    f010e46b <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e3ac:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e3b2:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3b5:	89 d0                	mov    %edx,%eax
f010e3b7:	c1 e0 02             	shl    $0x2,%eax
f010e3ba:	01 d0                	add    %edx,%eax
f010e3bc:	01 c0                	add    %eax,%eax
f010e3be:	01 d0                	add    %edx,%eax
f010e3c0:	01 c0                	add    %eax,%eax
f010e3c2:	01 d0                	add    %edx,%eax
f010e3c4:	c1 e0 02             	shl    $0x2,%eax
f010e3c7:	01 c8                	add    %ecx,%eax
f010e3c9:	83 ec 04             	sub    $0x4,%esp
f010e3cc:	6a 5c                	push   $0x5c
f010e3ce:	6a 00                	push   $0x0
f010e3d0:	50                   	push   %eax
f010e3d1:	e8 b1 30 02 00       	call   f0131487 <memset>
f010e3d6:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e3d9:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e3df:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3e2:	89 d0                	mov    %edx,%eax
f010e3e4:	c1 e0 02             	shl    $0x2,%eax
f010e3e7:	01 d0                	add    %edx,%eax
f010e3e9:	01 c0                	add    %eax,%eax
f010e3eb:	01 d0                	add    %edx,%eax
f010e3ed:	01 c0                	add    %eax,%eax
f010e3ef:	01 d0                	add    %edx,%eax
f010e3f1:	c1 e0 02             	shl    $0x2,%eax
f010e3f4:	01 c8                	add    %ecx,%eax
f010e3f6:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e3fa:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e400:	8b 55 08             	mov    0x8(%ebp),%edx
f010e403:	89 d0                	mov    %edx,%eax
f010e405:	c1 e0 02             	shl    $0x2,%eax
f010e408:	01 d0                	add    %edx,%eax
f010e40a:	01 c0                	add    %eax,%eax
f010e40c:	01 d0                	add    %edx,%eax
f010e40e:	01 c0                	add    %eax,%eax
f010e410:	01 d0                	add    %edx,%eax
f010e412:	c1 e0 02             	shl    $0x2,%eax
f010e415:	01 c8                	add    %ecx,%eax
f010e417:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e41e:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e424:	8b 55 08             	mov    0x8(%ebp),%edx
f010e427:	89 d0                	mov    %edx,%eax
f010e429:	c1 e0 02             	shl    $0x2,%eax
f010e42c:	01 d0                	add    %edx,%eax
f010e42e:	01 c0                	add    %eax,%eax
f010e430:	01 d0                	add    %edx,%eax
f010e432:	01 c0                	add    %eax,%eax
f010e434:	01 d0                	add    %edx,%eax
f010e436:	c1 e0 02             	shl    $0x2,%eax
f010e439:	01 c8                	add    %ecx,%eax
f010e43b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e442:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e448:	8b 55 08             	mov    0x8(%ebp),%edx
f010e44b:	89 d0                	mov    %edx,%eax
f010e44d:	c1 e0 02             	shl    $0x2,%eax
f010e450:	01 d0                	add    %edx,%eax
f010e452:	01 c0                	add    %eax,%eax
f010e454:	01 d0                	add    %edx,%eax
f010e456:	01 c0                	add    %eax,%eax
f010e458:	01 d0                	add    %edx,%eax
f010e45a:	c1 e0 02             	shl    $0x2,%eax
f010e45d:	01 c8                	add    %ecx,%eax
f010e45f:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e46b:	c9                   	leave  
f010e46c:	c3                   	ret    

f010e46d <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e46d:	55                   	push   %ebp
f010e46e:	89 e5                	mov    %esp,%ebp
f010e470:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010e473:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e47a:	83 ec 08             	sub    $0x8,%esp
f010e47d:	ff 75 0c             	pushl  0xc(%ebp)
f010e480:	ff 75 08             	pushl  0x8(%ebp)
f010e483:	e8 5d fe ff ff       	call   f010e2e5 <get_semaphore_object_ID>
f010e488:	83 c4 10             	add    $0x10,%esp
f010e48b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010e48e:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010e492:	75 43                	jne    f010e4d7 <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010e494:	83 ec 0c             	sub    $0xc,%esp
f010e497:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e49a:	50                   	push   %eax
f010e49b:	e8 58 fd ff ff       	call   f010e1f8 <allocate_semaphore_object>
f010e4a0:	83 c4 10             	add    $0x10,%esp
f010e4a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010e4a6:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e4aa:	74 32                	je     f010e4de <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010e4ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e4af:	83 c0 04             	add    $0x4,%eax
f010e4b2:	83 ec 08             	sub    $0x8,%esp
f010e4b5:	ff 75 0c             	pushl  0xc(%ebp)
f010e4b8:	50                   	push   %eax
f010e4b9:	e8 2a 2e 02 00       	call   f01312e8 <strcpy>
f010e4be:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010e4c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e4c4:	8b 55 08             	mov    0x8(%ebp),%edx
f010e4c7:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010e4c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e4cc:	8b 55 10             	mov    0x10(%ebp),%edx
f010e4cf:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010e4d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e4d5:	eb 0c                	jmp    f010e4e3 <createSemaphore+0x76>
			}

		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010e4d7:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e4dc:	eb 05                	jmp    f010e4e3 <createSemaphore+0x76>
		}

		return E_NO_SEMAPHORE;
f010e4de:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010e4e3:	c9                   	leave  
f010e4e4:	c3                   	ret    

f010e4e5 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e4e5:	55                   	push   %ebp
f010e4e6:	89 e5                	mov    %esp,%ebp
f010e4e8:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e4eb:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010e4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e4f3:	83 ec 08             	sub    $0x8,%esp
f010e4f6:	ff 75 0c             	pushl  0xc(%ebp)
f010e4f9:	ff 75 08             	pushl  0x8(%ebp)
f010e4fc:	e8 e4 fd ff ff       	call   f010e2e5 <get_semaphore_object_ID>
f010e501:	83 c4 10             	add    $0x10,%esp
f010e504:	89 45 f0             	mov    %eax,-0x10(%ebp)
		semaphores[return_of_get].value--;
f010e507:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e50d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e510:	89 d0                	mov    %edx,%eax
f010e512:	c1 e0 02             	shl    $0x2,%eax
f010e515:	01 d0                	add    %edx,%eax
f010e517:	01 c0                	add    %eax,%eax
f010e519:	01 d0                	add    %edx,%eax
f010e51b:	01 c0                	add    %eax,%eax
f010e51d:	01 d0                	add    %edx,%eax
f010e51f:	c1 e0 02             	shl    $0x2,%eax
f010e522:	01 c8                	add    %ecx,%eax
f010e524:	8b 50 54             	mov    0x54(%eax),%edx
f010e527:	4a                   	dec    %edx
f010e528:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<0)
f010e52b:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e531:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e534:	89 d0                	mov    %edx,%eax
f010e536:	c1 e0 02             	shl    $0x2,%eax
f010e539:	01 d0                	add    %edx,%eax
f010e53b:	01 c0                	add    %eax,%eax
f010e53d:	01 d0                	add    %edx,%eax
f010e53f:	01 c0                	add    %eax,%eax
f010e541:	01 d0                	add    %edx,%eax
f010e543:	c1 e0 02             	shl    $0x2,%eax
f010e546:	01 c8                	add    %ecx,%eax
f010e548:	8b 40 54             	mov    0x54(%eax),%eax
f010e54b:	85 c0                	test   %eax,%eax
f010e54d:	79 43                	jns    f010e592 <waitSemaphore+0xad>
		{
			enqueue(&semaphores[return_of_get].env_queue,myenv);
f010e54f:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e555:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e558:	89 d0                	mov    %edx,%eax
f010e55a:	c1 e0 02             	shl    $0x2,%eax
f010e55d:	01 d0                	add    %edx,%eax
f010e55f:	01 c0                	add    %eax,%eax
f010e561:	01 d0                	add    %edx,%eax
f010e563:	01 c0                	add    %eax,%eax
f010e565:	01 d0                	add    %edx,%eax
f010e567:	c1 e0 02             	shl    $0x2,%eax
f010e56a:	01 c8                	add    %ecx,%eax
f010e56c:	83 c0 44             	add    $0x44,%eax
f010e56f:	83 ec 08             	sub    $0x8,%esp
f010e572:	ff 75 f4             	pushl  -0xc(%ebp)
f010e575:	50                   	push   %eax
f010e576:	e8 22 5f ff ff       	call   f010449d <enqueue>
f010e57b:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010e57e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e581:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			//curenv->env_status=ENV_BLOCKED;
			curenv=NULL;
f010e588:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f010e58f:	00 00 00 
		}
		fos_scheduler();
f010e592:	e8 8f 61 ff ff       	call   f0104726 <fos_scheduler>

f010e597 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e597:	55                   	push   %ebp
f010e598:	89 e5                	mov    %esp,%ebp
f010e59a:	83 ec 18             	sub    $0x18,%esp
	//		c) changing its status to ENV_READY


	    //uint32 val=0;
		struct Env* env;
		int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e59d:	83 ec 08             	sub    $0x8,%esp
f010e5a0:	ff 75 0c             	pushl  0xc(%ebp)
f010e5a3:	ff 75 08             	pushl  0x8(%ebp)
f010e5a6:	e8 3a fd ff ff       	call   f010e2e5 <get_semaphore_object_ID>
f010e5ab:	83 c4 10             	add    $0x10,%esp
f010e5ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		semaphores[return_of_get].value++;
f010e5b1:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5ba:	89 d0                	mov    %edx,%eax
f010e5bc:	c1 e0 02             	shl    $0x2,%eax
f010e5bf:	01 d0                	add    %edx,%eax
f010e5c1:	01 c0                	add    %eax,%eax
f010e5c3:	01 d0                	add    %edx,%eax
f010e5c5:	01 c0                	add    %eax,%eax
f010e5c7:	01 d0                	add    %edx,%eax
f010e5c9:	c1 e0 02             	shl    $0x2,%eax
f010e5cc:	01 c8                	add    %ecx,%eax
f010e5ce:	8b 50 54             	mov    0x54(%eax),%edx
f010e5d1:	42                   	inc    %edx
f010e5d2:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<=0)
f010e5d5:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5de:	89 d0                	mov    %edx,%eax
f010e5e0:	c1 e0 02             	shl    $0x2,%eax
f010e5e3:	01 d0                	add    %edx,%eax
f010e5e5:	01 c0                	add    %eax,%eax
f010e5e7:	01 d0                	add    %edx,%eax
f010e5e9:	01 c0                	add    %eax,%eax
f010e5eb:	01 d0                	add    %edx,%eax
f010e5ed:	c1 e0 02             	shl    $0x2,%eax
f010e5f0:	01 c8                	add    %ecx,%eax
f010e5f2:	8b 40 54             	mov    0x54(%eax),%eax
f010e5f5:	85 c0                	test   %eax,%eax
f010e5f7:	7f 47                	jg     f010e640 <signalSemaphore+0xa9>
		{
			env=dequeue(&semaphores[return_of_get].env_queue);
f010e5f9:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e602:	89 d0                	mov    %edx,%eax
f010e604:	c1 e0 02             	shl    $0x2,%eax
f010e607:	01 d0                	add    %edx,%eax
f010e609:	01 c0                	add    %eax,%eax
f010e60b:	01 d0                	add    %edx,%eax
f010e60d:	01 c0                	add    %eax,%eax
f010e60f:	01 d0                	add    %edx,%eax
f010e611:	c1 e0 02             	shl    $0x2,%eax
f010e614:	01 c8                	add    %ecx,%eax
f010e616:	83 c0 44             	add    $0x44,%eax
f010e619:	83 ec 0c             	sub    $0xc,%esp
f010e61c:	50                   	push   %eax
f010e61d:	e8 0c 5f ff ff       	call   f010452e <dequeue>
f010e622:	83 c4 10             	add    $0x10,%esp
f010e625:	89 45 f0             	mov    %eax,-0x10(%ebp)
			sched_insert_ready(env);
f010e628:	83 ec 0c             	sub    $0xc,%esp
f010e62b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e62e:	e8 19 63 ff ff       	call   f010494c <sched_insert_ready>
f010e633:	83 c4 10             	add    $0x10,%esp
			env->env_status=ENV_READY;
f010e636:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e639:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)





}
f010e640:	90                   	nop
f010e641:	c9                   	leave  
f010e642:	c3                   	ret    

f010e643 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e643:	55                   	push   %ebp
f010e644:	89 e5                	mov    %esp,%ebp
f010e646:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e649:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e650:	83 ec 0c             	sub    $0xc,%esp
f010e653:	ff 75 ec             	pushl  -0x14(%ebp)
f010e656:	e8 a8 37 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010e65b:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e65e:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e663:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e666:	74 17                	je     f010e67f <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e668:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e66d:	50                   	push   %eax
f010e66e:	68 a0 7c 13 f0       	push   $0xf0137ca0
f010e673:	6a 1f                	push   $0x1f
f010e675:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e67a:	e8 86 1b ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e67f:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e684:	85 c0                	test   %eax,%eax
f010e686:	74 17                	je     f010e69f <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e688:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e68d:	50                   	push   %eax
f010e68e:	68 18 7d 13 f0       	push   $0xf0137d18
f010e693:	6a 26                	push   $0x26
f010e695:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e69a:	e8 66 1b ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e69f:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010e6a4:	85 c0                	test   %eax,%eax
f010e6a6:	74 17                	je     f010e6bf <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e6a8:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010e6ad:	50                   	push   %eax
f010e6ae:	68 68 7d 13 f0       	push   $0xf0137d68
f010e6b3:	6a 2c                	push   $0x2c
f010e6b5:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e6ba:	e8 46 1b ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e6bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e6c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e6cd:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f010e6d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e6d5:	eb 29                	jmp    f010e700 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e6d7:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e6da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e6dd:	8b 50 0c             	mov    0xc(%eax),%edx
f010e6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e6e3:	8b 40 08             	mov    0x8(%eax),%eax
f010e6e6:	83 ec 04             	sub    $0x4,%esp
f010e6e9:	52                   	push   %edx
f010e6ea:	50                   	push   %eax
f010e6eb:	68 b8 7d 13 f0       	push   $0xf0137db8
f010e6f0:	e8 19 26 ff ff       	call   f0100d0e <cprintf>
f010e6f5:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e6f8:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f010e6fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e700:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e704:	74 07                	je     f010e70d <test_initialize_MemBlocksList+0xca>
f010e706:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e709:	8b 00                	mov    (%eax),%eax
f010e70b:	eb 05                	jmp    f010e712 <test_initialize_MemBlocksList+0xcf>
f010e70d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e712:	a3 a0 1d 88 f0       	mov    %eax,0xf0881da0
f010e717:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f010e71c:	85 c0                	test   %eax,%eax
f010e71e:	75 b7                	jne    f010e6d7 <test_initialize_MemBlocksList+0x94>
f010e720:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e724:	75 b1                	jne    f010e6d7 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e726:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e72b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e72e:	74 14                	je     f010e744 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e730:	83 ec 04             	sub    $0x4,%esp
f010e733:	68 d8 7d 13 f0       	push   $0xf0137dd8
f010e738:	6a 38                	push   $0x38
f010e73a:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e73f:	e8 c1 1a ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e744:	83 ec 0c             	sub    $0xc,%esp
f010e747:	68 30 7e 13 f0       	push   $0xf0137e30
f010e74c:	e8 bd 25 ff ff       	call   f0100d0e <cprintf>
f010e751:	83 c4 10             	add    $0x10,%esp
}
f010e754:	90                   	nop
f010e755:	c9                   	leave  
f010e756:	c3                   	ret    

f010e757 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e757:	55                   	push   %ebp
f010e758:	89 e5                	mov    %esp,%ebp
f010e75a:	57                   	push   %edi
f010e75b:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e761:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e768:	83 ec 0c             	sub    $0xc,%esp
f010e76b:	ff 75 f4             	pushl  -0xc(%ebp)
f010e76e:	e8 90 36 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010e773:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e776:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010e77d:	00 00 00 
f010e780:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010e787:	00 00 00 
f010e78a:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010e791:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e794:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010e79b:	00 00 00 
f010e79e:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010e7a5:	00 00 00 
f010e7a8:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010e7af:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e7b2:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e7b5:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e7ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7bf:	89 d7                	mov    %edx,%edi
f010e7c1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e7c3:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e7c6:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e7cb:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7d0:	89 d7                	mov    %edx,%edi
f010e7d2:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e7d4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e7db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e7e2:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e7e9:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e7f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e7f6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e7f9:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e7fc:	83 ec 0c             	sub    $0xc,%esp
f010e7ff:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e802:	50                   	push   %eax
f010e803:	e8 30 37 02 00       	call   f0131f38 <insert_sorted_allocList>
f010e808:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e80b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e812:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e817:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e81a:	74 14                	je     f010e830 <test_insert_sorted_allocList+0xd9>
f010e81c:	83 ec 04             	sub    $0x4,%esp
f010e81f:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010e824:	6a 56                	push   $0x56
f010e826:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e82b:	e8 d5 19 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e830:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e835:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e838:	74 14                	je     f010e84e <test_insert_sorted_allocList+0xf7>
f010e83a:	83 ec 04             	sub    $0x4,%esp
f010e83d:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010e842:	6a 59                	push   $0x59
f010e844:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e849:	e8 b7 19 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e84e:	83 ec 0c             	sub    $0xc,%esp
f010e851:	ff 75 f0             	pushl  -0x10(%ebp)
f010e854:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e857:	50                   	push   %eax
f010e858:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e85b:	50                   	push   %eax
f010e85c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e85f:	50                   	push   %eax
f010e860:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010e865:	e8 7d 26 00 00       	call   f0110ee7 <check_list_data>
f010e86a:	83 c4 20             	add    $0x20,%esp
f010e86d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e870:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e874:	74 14                	je     f010e88a <test_insert_sorted_allocList+0x133>
f010e876:	83 ec 04             	sub    $0x4,%esp
f010e879:	68 18 7f 13 f0       	push   $0xf0137f18
f010e87e:	6a 5d                	push   $0x5d
f010e880:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e885:	e8 7b 19 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e88a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e88d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e890:	74 14                	je     f010e8a6 <test_insert_sorted_allocList+0x14f>
f010e892:	83 ec 04             	sub    $0x4,%esp
f010e895:	68 68 7f 13 f0       	push   $0xf0137f68
f010e89a:	6a 5e                	push   $0x5e
f010e89c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e8a1:	e8 5f 19 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e8a6:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e8ad:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e8b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8b7:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e8ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e8bd:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e8c0:	83 ec 0c             	sub    $0xc,%esp
f010e8c3:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e8c6:	50                   	push   %eax
f010e8c7:	e8 6c 36 02 00       	call   f0131f38 <insert_sorted_allocList>
f010e8cc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e8cf:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e8d6:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e8db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e8de:	74 14                	je     f010e8f4 <test_insert_sorted_allocList+0x19d>
f010e8e0:	83 ec 04             	sub    $0x4,%esp
f010e8e3:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010e8e8:	6a 6d                	push   $0x6d
f010e8ea:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e8ef:	e8 11 19 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e8f4:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e8f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e8fc:	74 14                	je     f010e912 <test_insert_sorted_allocList+0x1bb>
f010e8fe:	83 ec 04             	sub    $0x4,%esp
f010e901:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010e906:	6a 70                	push   $0x70
f010e908:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e90d:	e8 f3 18 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e912:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e919:	83 ec 0c             	sub    $0xc,%esp
f010e91c:	ff 75 f0             	pushl  -0x10(%ebp)
f010e91f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e922:	50                   	push   %eax
f010e923:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e926:	50                   	push   %eax
f010e927:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e92a:	50                   	push   %eax
f010e92b:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010e930:	e8 b2 25 00 00       	call   f0110ee7 <check_list_data>
f010e935:	83 c4 20             	add    $0x20,%esp
f010e938:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e93b:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e93f:	74 14                	je     f010e955 <test_insert_sorted_allocList+0x1fe>
f010e941:	83 ec 04             	sub    $0x4,%esp
f010e944:	68 18 7f 13 f0       	push   $0xf0137f18
f010e949:	6a 75                	push   $0x75
f010e94b:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e950:	e8 b0 18 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e955:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e958:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e95b:	74 14                	je     f010e971 <test_insert_sorted_allocList+0x21a>
f010e95d:	83 ec 04             	sub    $0x4,%esp
f010e960:	68 68 7f 13 f0       	push   $0xf0137f68
f010e965:	6a 76                	push   $0x76
f010e967:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e96c:	e8 94 18 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e971:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e978:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e97f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e982:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e985:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e988:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e98b:	83 ec 0c             	sub    $0xc,%esp
f010e98e:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e991:	50                   	push   %eax
f010e992:	e8 a1 35 02 00       	call   f0131f38 <insert_sorted_allocList>
f010e997:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e99a:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e9a1:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e9a6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e9a9:	74 17                	je     f010e9c2 <test_insert_sorted_allocList+0x26b>
f010e9ab:	83 ec 04             	sub    $0x4,%esp
f010e9ae:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010e9b3:	68 85 00 00 00       	push   $0x85
f010e9b8:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e9bd:	e8 43 18 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e9c2:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e9c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e9ca:	74 17                	je     f010e9e3 <test_insert_sorted_allocList+0x28c>
f010e9cc:	83 ec 04             	sub    $0x4,%esp
f010e9cf:	68 b4 7f 13 f0       	push   $0xf0137fb4
f010e9d4:	68 88 00 00 00       	push   $0x88
f010e9d9:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010e9de:	e8 22 18 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e9e3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e9ea:	83 ec 0c             	sub    $0xc,%esp
f010e9ed:	ff 75 f0             	pushl  -0x10(%ebp)
f010e9f0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e9f3:	50                   	push   %eax
f010e9f4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e9f7:	50                   	push   %eax
f010e9f8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e9fb:	50                   	push   %eax
f010e9fc:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ea01:	e8 e1 24 00 00       	call   f0110ee7 <check_list_data>
f010ea06:	83 c4 20             	add    $0x20,%esp
f010ea09:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ea0c:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ea10:	74 17                	je     f010ea29 <test_insert_sorted_allocList+0x2d2>
f010ea12:	83 ec 04             	sub    $0x4,%esp
f010ea15:	68 18 7f 13 f0       	push   $0xf0137f18
f010ea1a:	68 8d 00 00 00       	push   $0x8d
f010ea1f:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ea24:	e8 dc 17 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ea29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ea2c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea2f:	74 17                	je     f010ea48 <test_insert_sorted_allocList+0x2f1>
f010ea31:	83 ec 04             	sub    $0x4,%esp
f010ea34:	68 68 7f 13 f0       	push   $0xf0137f68
f010ea39:	68 8e 00 00 00       	push   $0x8e
f010ea3e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ea43:	e8 bd 17 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ea48:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ea4f:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ea56:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ea59:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ea5c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ea5f:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010ea62:	83 ec 0c             	sub    $0xc,%esp
f010ea65:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ea68:	50                   	push   %eax
f010ea69:	e8 ca 34 02 00       	call   f0131f38 <insert_sorted_allocList>
f010ea6e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ea71:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ea78:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ea7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea80:	74 17                	je     f010ea99 <test_insert_sorted_allocList+0x342>
f010ea82:	83 ec 04             	sub    $0x4,%esp
f010ea85:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010ea8a:	68 9c 00 00 00       	push   $0x9c
f010ea8f:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ea94:	e8 6c 17 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ea99:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ea9e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eaa1:	74 17                	je     f010eaba <test_insert_sorted_allocList+0x363>
f010eaa3:	83 ec 04             	sub    $0x4,%esp
f010eaa6:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010eaab:	68 9f 00 00 00       	push   $0x9f
f010eab0:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eab5:	e8 4b 17 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eaba:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eac1:	83 ec 0c             	sub    $0xc,%esp
f010eac4:	ff 75 f0             	pushl  -0x10(%ebp)
f010eac7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eaca:	50                   	push   %eax
f010eacb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eace:	50                   	push   %eax
f010eacf:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ead2:	50                   	push   %eax
f010ead3:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ead8:	e8 0a 24 00 00       	call   f0110ee7 <check_list_data>
f010eadd:	83 c4 20             	add    $0x20,%esp
f010eae0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eae3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eae7:	74 17                	je     f010eb00 <test_insert_sorted_allocList+0x3a9>
f010eae9:	83 ec 04             	sub    $0x4,%esp
f010eaec:	68 18 7f 13 f0       	push   $0xf0137f18
f010eaf1:	68 a4 00 00 00       	push   $0xa4
f010eaf6:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eafb:	e8 05 17 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eb00:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb03:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb06:	74 17                	je     f010eb1f <test_insert_sorted_allocList+0x3c8>
f010eb08:	83 ec 04             	sub    $0x4,%esp
f010eb0b:	68 68 7f 13 f0       	push   $0xf0137f68
f010eb10:	68 a5 00 00 00       	push   $0xa5
f010eb15:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eb1a:	e8 e6 16 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010eb1f:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010eb26:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010eb2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb30:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010eb36:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb39:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010eb3f:	83 ec 0c             	sub    $0xc,%esp
f010eb42:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010eb48:	50                   	push   %eax
f010eb49:	e8 ea 33 02 00       	call   f0131f38 <insert_sorted_allocList>
f010eb4e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010eb51:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eb58:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010eb5d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb60:	74 17                	je     f010eb79 <test_insert_sorted_allocList+0x422>
f010eb62:	83 ec 04             	sub    $0x4,%esp
f010eb65:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010eb6a:	68 b3 00 00 00       	push   $0xb3
f010eb6f:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eb74:	e8 8c 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eb79:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010eb7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eb81:	74 17                	je     f010eb9a <test_insert_sorted_allocList+0x443>
f010eb83:	83 ec 04             	sub    $0x4,%esp
f010eb86:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010eb8b:	68 b6 00 00 00       	push   $0xb6
f010eb90:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eb95:	e8 6b 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eb9a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eba1:	83 ec 0c             	sub    $0xc,%esp
f010eba4:	ff 75 f0             	pushl  -0x10(%ebp)
f010eba7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ebaa:	50                   	push   %eax
f010ebab:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ebae:	50                   	push   %eax
f010ebaf:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ebb2:	50                   	push   %eax
f010ebb3:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ebb8:	e8 2a 23 00 00       	call   f0110ee7 <check_list_data>
f010ebbd:	83 c4 20             	add    $0x20,%esp
f010ebc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ebc3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ebc7:	74 17                	je     f010ebe0 <test_insert_sorted_allocList+0x489>
f010ebc9:	83 ec 04             	sub    $0x4,%esp
f010ebcc:	68 18 7f 13 f0       	push   $0xf0137f18
f010ebd1:	68 bb 00 00 00       	push   $0xbb
f010ebd6:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ebdb:	e8 25 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ebe0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ebe3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ebe6:	74 17                	je     f010ebff <test_insert_sorted_allocList+0x4a8>
f010ebe8:	83 ec 04             	sub    $0x4,%esp
f010ebeb:	68 68 7f 13 f0       	push   $0xf0137f68
f010ebf0:	68 bc 00 00 00       	push   $0xbc
f010ebf5:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ebfa:	e8 06 16 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010ebff:	83 ec 0c             	sub    $0xc,%esp
f010ec02:	68 04 80 13 f0       	push   $0xf0138004
f010ec07:	e8 02 21 ff ff       	call   f0100d0e <cprintf>
f010ec0c:	83 c4 10             	add    $0x10,%esp
}
f010ec0f:	90                   	nop
f010ec10:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ec13:	c9                   	leave  
f010ec14:	c3                   	ret    

f010ec15 <test_find_block>:

void test_find_block()
{
f010ec15:	55                   	push   %ebp
f010ec16:	89 e5                	mov    %esp,%ebp
f010ec18:	57                   	push   %edi
f010ec19:	56                   	push   %esi
f010ec1a:	53                   	push   %ebx
f010ec1b:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010ec21:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ec28:	83 ec 0c             	sub    $0xc,%esp
f010ec2b:	ff 75 e0             	pushl  -0x20(%ebp)
f010ec2e:	e8 d0 31 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010ec33:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010ec36:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010ec3d:	00 00 00 
f010ec40:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010ec47:	00 00 00 
f010ec4a:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010ec51:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ec54:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ec57:	bb 7c 81 13 f0       	mov    $0xf013817c,%ebx
f010ec5c:	ba 06 00 00 00       	mov    $0x6,%edx
f010ec61:	89 c7                	mov    %eax,%edi
f010ec63:	89 de                	mov    %ebx,%esi
f010ec65:	89 d1                	mov    %edx,%ecx
f010ec67:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010ec69:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010ec6c:	bb 94 81 13 f0       	mov    $0xf0138194,%ebx
f010ec71:	ba 06 00 00 00       	mov    $0x6,%edx
f010ec76:	89 c7                	mov    %eax,%edi
f010ec78:	89 de                	mov    %ebx,%esi
f010ec7a:	89 d1                	mov    %edx,%ecx
f010ec7c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010ec7e:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010ec85:	00 00 00 
f010ec88:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010ec8f:	00 00 00 
f010ec92:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010ec99:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ec9c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eca3:	e9 5f 01 00 00       	jmp    f010ee07 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010eca8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecab:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010ecaf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecb2:	c1 e2 04             	shl    $0x4,%edx
f010ecb5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ecb8:	01 da                	add    %ebx,%edx
f010ecba:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010ecc0:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010ecc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecc5:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010ecc9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eccc:	c1 e2 04             	shl    $0x4,%edx
f010eccf:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ecd2:	01 f2                	add    %esi,%edx
f010ecd4:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010ecda:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ecdc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ece0:	0f 85 92 00 00 00    	jne    f010ed78 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010ece6:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f010eceb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecee:	c1 e2 04             	shl    $0x4,%edx
f010ecf1:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ecf4:	01 fa                	add    %edi,%edx
f010ecf6:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010ecfc:	89 02                	mov    %eax,(%edx)
f010ecfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed01:	c1 e0 04             	shl    $0x4,%eax
f010ed04:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ed07:	01 d8                	add    %ebx,%eax
f010ed09:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ed0e:	8b 00                	mov    (%eax),%eax
f010ed10:	85 c0                	test   %eax,%eax
f010ed12:	74 18                	je     f010ed2c <test_find_block+0x117>
f010ed14:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f010ed19:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ed1f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ed22:	c1 e1 04             	shl    $0x4,%ecx
f010ed25:	01 ca                	add    %ecx,%edx
f010ed27:	89 50 04             	mov    %edx,0x4(%eax)
f010ed2a:	eb 13                	jmp    f010ed3f <test_find_block+0x12a>
f010ed2c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ed32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed35:	c1 e2 04             	shl    $0x4,%edx
f010ed38:	01 d0                	add    %edx,%eax
f010ed3a:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f010ed3f:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ed45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed48:	c1 e2 04             	shl    $0x4,%edx
f010ed4b:	01 d0                	add    %edx,%eax
f010ed4d:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f010ed52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed55:	c1 e0 04             	shl    $0x4,%eax
f010ed58:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ed5b:	01 f0                	add    %esi,%eax
f010ed5d:	2d 98 00 00 00       	sub    $0x98,%eax
f010ed62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ed68:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ed6d:	40                   	inc    %eax
f010ed6e:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
f010ed73:	e9 8c 00 00 00       	jmp    f010ee04 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010ed78:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f010ed7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed80:	c1 e2 04             	shl    $0x4,%edx
f010ed83:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ed86:	01 fa                	add    %edi,%edx
f010ed88:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010ed8e:	89 02                	mov    %eax,(%edx)
f010ed90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed93:	c1 e0 04             	shl    $0x4,%eax
f010ed96:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ed99:	01 d8                	add    %ebx,%eax
f010ed9b:	2d 98 00 00 00       	sub    $0x98,%eax
f010eda0:	8b 00                	mov    (%eax),%eax
f010eda2:	85 c0                	test   %eax,%eax
f010eda4:	74 17                	je     f010edbd <test_find_block+0x1a8>
f010eda6:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f010edab:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010edb1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010edb4:	c1 e1 04             	shl    $0x4,%ecx
f010edb7:	01 ca                	add    %ecx,%edx
f010edb9:	89 10                	mov    %edx,(%eax)
f010edbb:	eb 13                	jmp    f010edd0 <test_find_block+0x1bb>
f010edbd:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010edc3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010edc6:	c1 e2 04             	shl    $0x4,%edx
f010edc9:	01 d0                	add    %edx,%eax
f010edcb:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f010edd0:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010edd6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010edd9:	c1 e2 04             	shl    $0x4,%edx
f010eddc:	01 d0                	add    %edx,%eax
f010edde:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f010ede3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ede6:	c1 e0 04             	shl    $0x4,%eax
f010ede9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010edec:	01 f0                	add    %esi,%eax
f010edee:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010edf3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010edf9:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010edfe:	40                   	inc    %eax
f010edff:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ee04:	ff 45 e4             	incl   -0x1c(%ebp)
f010ee07:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010ee0b:	0f 8e 97 fe ff ff    	jle    f010eca8 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010ee11:	83 ec 08             	sub    $0x8,%esp
f010ee14:	68 00 10 00 00       	push   $0x1000
f010ee19:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ee1e:	e8 bd 30 02 00       	call   f0131ee0 <find_block>
f010ee23:	83 c4 10             	add    $0x10,%esp
f010ee26:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010ee29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee2d:	74 17                	je     f010ee46 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010ee2f:	83 ec 04             	sub    $0x4,%esp
f010ee32:	68 44 80 13 f0       	push   $0xf0138044
f010ee37:	68 de 00 00 00       	push   $0xde
f010ee3c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ee41:	e8 bf 13 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010ee46:	83 ec 08             	sub    $0x8,%esp
f010ee49:	6a 00                	push   $0x0
f010ee4b:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ee50:	e8 8b 30 02 00       	call   f0131ee0 <find_block>
f010ee55:	83 c4 10             	add    $0x10,%esp
f010ee58:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010ee5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee5f:	74 17                	je     f010ee78 <test_find_block+0x263>
f010ee61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee64:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee67:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ee6c:	75 0a                	jne    f010ee78 <test_find_block+0x263>
f010ee6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee71:	8b 40 08             	mov    0x8(%eax),%eax
f010ee74:	85 c0                	test   %eax,%eax
f010ee76:	74 17                	je     f010ee8f <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ee78:	83 ec 04             	sub    $0x4,%esp
f010ee7b:	68 a8 80 13 f0       	push   $0xf01380a8
f010ee80:	68 e3 00 00 00       	push   $0xe3
f010ee85:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ee8a:	e8 76 13 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010ee8f:	83 ec 08             	sub    $0x8,%esp
f010ee92:	68 00 70 00 00       	push   $0x7000
f010ee97:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ee9c:	e8 3f 30 02 00       	call   f0131ee0 <find_block>
f010eea1:	83 c4 10             	add    $0x10,%esp
f010eea4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010eea7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eeab:	74 1a                	je     f010eec7 <test_find_block+0x2b2>
f010eead:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eeb0:	8b 40 0c             	mov    0xc(%eax),%eax
f010eeb3:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010eeb8:	75 0d                	jne    f010eec7 <test_find_block+0x2b2>
f010eeba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eebd:	8b 40 08             	mov    0x8(%eax),%eax
f010eec0:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010eec5:	74 17                	je     f010eede <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010eec7:	83 ec 04             	sub    $0x4,%esp
f010eeca:	68 a8 80 13 f0       	push   $0xf01380a8
f010eecf:	68 e8 00 00 00       	push   $0xe8
f010eed4:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010eed9:	e8 27 13 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010eede:	83 ec 08             	sub    $0x8,%esp
f010eee1:	68 00 a4 01 00       	push   $0x1a400
f010eee6:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010eeeb:	e8 f0 2f 02 00       	call   f0131ee0 <find_block>
f010eef0:	83 c4 10             	add    $0x10,%esp
f010eef3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010eef6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eefa:	74 1a                	je     f010ef16 <test_find_block+0x301>
f010eefc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eeff:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef02:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ef07:	75 0d                	jne    f010ef16 <test_find_block+0x301>
f010ef09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef0c:	8b 40 08             	mov    0x8(%eax),%eax
f010ef0f:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ef14:	74 17                	je     f010ef2d <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ef16:	83 ec 04             	sub    $0x4,%esp
f010ef19:	68 a8 80 13 f0       	push   $0xf01380a8
f010ef1e:	68 ed 00 00 00       	push   $0xed
f010ef23:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ef28:	e8 d8 12 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010ef2d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ef32:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ef35:	75 09                	jne    f010ef40 <test_find_block+0x32b>
f010ef37:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010ef3c:	85 c0                	test   %eax,%eax
f010ef3e:	74 17                	je     f010ef57 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010ef40:	83 ec 04             	sub    $0x4,%esp
f010ef43:	68 dc 80 13 f0       	push   $0xf01380dc
f010ef48:	68 f2 00 00 00       	push   $0xf2
f010ef4d:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ef52:	e8 ae 12 ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010ef57:	83 ec 0c             	sub    $0xc,%esp
f010ef5a:	68 40 81 13 f0       	push   $0xf0138140
f010ef5f:	e8 aa 1d ff ff       	call   f0100d0e <cprintf>
f010ef64:	83 c4 10             	add    $0x10,%esp
}
f010ef67:	90                   	nop
f010ef68:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ef6b:	5b                   	pop    %ebx
f010ef6c:	5e                   	pop    %esi
f010ef6d:	5f                   	pop    %edi
f010ef6e:	5d                   	pop    %ebp
f010ef6f:	c3                   	ret    

f010ef70 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010ef70:	55                   	push   %ebp
f010ef71:	89 e5                	mov    %esp,%ebp
f010ef73:	57                   	push   %edi
f010ef74:	56                   	push   %esi
f010ef75:	53                   	push   %ebx
f010ef76:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010ef7c:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef83:	83 ec 0c             	sub    $0xc,%esp
f010ef86:	ff 75 e0             	pushl  -0x20(%ebp)
f010ef89:	e8 75 2e 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010ef8e:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ef91:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010ef98:	00 00 00 
f010ef9b:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010efa2:	00 00 00 
f010efa5:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010efac:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010efaf:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010efb2:	bb 20 84 13 f0       	mov    $0xf0138420,%ebx
f010efb7:	ba 08 00 00 00       	mov    $0x8,%edx
f010efbc:	89 c7                	mov    %eax,%edi
f010efbe:	89 de                	mov    %ebx,%esi
f010efc0:	89 d1                	mov    %edx,%ecx
f010efc2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010efc4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010efc7:	bb 40 84 13 f0       	mov    $0xf0138440,%ebx
f010efcc:	ba 08 00 00 00       	mov    $0x8,%edx
f010efd1:	89 c7                	mov    %eax,%edi
f010efd3:	89 de                	mov    %ebx,%esi
f010efd5:	89 d1                	mov    %edx,%ecx
f010efd7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010efd9:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010efe0:	00 00 00 
f010efe3:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010efea:	00 00 00 
f010efed:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010eff4:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010eff7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010effe:	e9 5f 01 00 00       	jmp    f010f162 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f003:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f006:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f00a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f00d:	c1 e2 04             	shl    $0x4,%edx
f010f010:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f013:	01 da                	add    %ebx,%edx
f010f015:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f01b:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f01d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f020:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f024:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f027:	c1 e2 04             	shl    $0x4,%edx
f010f02a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f02d:	01 f2                	add    %esi,%edx
f010f02f:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f035:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f037:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f03b:	0f 85 92 00 00 00    	jne    f010f0d3 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f041:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f046:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f049:	c1 e2 04             	shl    $0x4,%edx
f010f04c:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f04f:	01 fa                	add    %edi,%edx
f010f051:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f057:	89 02                	mov    %eax,(%edx)
f010f059:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f05c:	c1 e0 04             	shl    $0x4,%eax
f010f05f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f062:	01 d8                	add    %ebx,%eax
f010f064:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f069:	8b 00                	mov    (%eax),%eax
f010f06b:	85 c0                	test   %eax,%eax
f010f06d:	74 18                	je     f010f087 <test_alloc_block_FF+0x117>
f010f06f:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f074:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f07a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f07d:	c1 e1 04             	shl    $0x4,%ecx
f010f080:	01 ca                	add    %ecx,%edx
f010f082:	89 50 04             	mov    %edx,0x4(%eax)
f010f085:	eb 13                	jmp    f010f09a <test_alloc_block_FF+0x12a>
f010f087:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f08d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f090:	c1 e2 04             	shl    $0x4,%edx
f010f093:	01 d0                	add    %edx,%eax
f010f095:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f09a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f0a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0a3:	c1 e2 04             	shl    $0x4,%edx
f010f0a6:	01 d0                	add    %edx,%eax
f010f0a8:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f0ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0b0:	c1 e0 04             	shl    $0x4,%eax
f010f0b3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0b6:	01 f0                	add    %esi,%eax
f010f0b8:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f0bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f0c3:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f0c8:	40                   	inc    %eax
f010f0c9:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010f0ce:	e9 8c 00 00 00       	jmp    f010f15f <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f0d3:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f0d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0db:	c1 e2 04             	shl    $0x4,%edx
f010f0de:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f0e1:	01 fa                	add    %edi,%edx
f010f0e3:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f0e9:	89 02                	mov    %eax,(%edx)
f010f0eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0ee:	c1 e0 04             	shl    $0x4,%eax
f010f0f1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0f4:	01 d8                	add    %ebx,%eax
f010f0f6:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f0fb:	8b 00                	mov    (%eax),%eax
f010f0fd:	85 c0                	test   %eax,%eax
f010f0ff:	74 17                	je     f010f118 <test_alloc_block_FF+0x1a8>
f010f101:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f106:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f10c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f10f:	c1 e1 04             	shl    $0x4,%ecx
f010f112:	01 ca                	add    %ecx,%edx
f010f114:	89 10                	mov    %edx,(%eax)
f010f116:	eb 13                	jmp    f010f12b <test_alloc_block_FF+0x1bb>
f010f118:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f11e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f121:	c1 e2 04             	shl    $0x4,%edx
f010f124:	01 d0                	add    %edx,%eax
f010f126:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f12b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f131:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f134:	c1 e2 04             	shl    $0x4,%edx
f010f137:	01 d0                	add    %edx,%eax
f010f139:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f13e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f141:	c1 e0 04             	shl    $0x4,%eax
f010f144:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f147:	01 f0                	add    %esi,%eax
f010f149:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f14e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f154:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f159:	40                   	inc    %eax
f010f15a:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f15f:	ff 45 e4             	incl   -0x1c(%ebp)
f010f162:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f166:	0f 8e 97 fe ff ff    	jle    f010f003 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f16c:	83 ec 0c             	sub    $0xc,%esp
f010f16f:	68 00 00 30 00       	push   $0x300000
f010f174:	e8 4c 30 02 00       	call   f01321c5 <alloc_block_FF>
f010f179:	83 c4 10             	add    $0x10,%esp
f010f17c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f17f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f183:	74 17                	je     f010f19c <test_alloc_block_FF+0x22c>
f010f185:	83 ec 04             	sub    $0x4,%esp
f010f188:	68 ac 81 13 f0       	push   $0xf01381ac
f010f18d:	68 15 01 00 00       	push   $0x115
f010f192:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f197:	e8 69 10 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f19c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f1a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f1a4:	75 13                	jne    f010f1b9 <test_alloc_block_FF+0x249>
f010f1a6:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f1ab:	83 f8 08             	cmp    $0x8,%eax
f010f1ae:	75 09                	jne    f010f1b9 <test_alloc_block_FF+0x249>
f010f1b0:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f1b5:	85 c0                	test   %eax,%eax
f010f1b7:	74 17                	je     f010f1d0 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f1b9:	83 ec 04             	sub    $0x4,%esp
f010f1bc:	68 20 82 13 f0       	push   $0xf0138220
f010f1c1:	68 19 01 00 00       	push   $0x119
f010f1c6:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f1cb:	e8 35 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f1d0:	83 ec 0c             	sub    $0xc,%esp
f010f1d3:	68 00 24 00 00       	push   $0x2400
f010f1d8:	e8 e8 2f 02 00       	call   f01321c5 <alloc_block_FF>
f010f1dd:	83 c4 10             	add    $0x10,%esp
f010f1e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f1e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1e7:	74 1a                	je     f010f203 <test_alloc_block_FF+0x293>
f010f1e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1ec:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1ef:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f1f4:	75 0d                	jne    f010f203 <test_alloc_block_FF+0x293>
f010f1f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1f9:	8b 40 08             	mov    0x8(%eax),%eax
f010f1fc:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f201:	74 17                	je     f010f21a <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f203:	83 ec 04             	sub    $0x4,%esp
f010f206:	68 98 82 13 f0       	push   $0xf0138298
f010f20b:	68 21 01 00 00       	push   $0x121
f010f210:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f215:	e8 eb 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f21a:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f21f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f222:	75 13                	jne    f010f237 <test_alloc_block_FF+0x2c7>
f010f224:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f229:	83 f8 07             	cmp    $0x7,%eax
f010f22c:	75 09                	jne    f010f237 <test_alloc_block_FF+0x2c7>
f010f22e:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f233:	85 c0                	test   %eax,%eax
f010f235:	74 17                	je     f010f24e <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f237:	83 ec 04             	sub    $0x4,%esp
f010f23a:	68 dc 82 13 f0       	push   $0xf01382dc
f010f23f:	68 25 01 00 00       	push   $0x125
f010f244:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f249:	e8 b7 0f ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f24e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f255:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f258:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f25f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f266:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f26d:	83 ec 0c             	sub    $0xc,%esp
f010f270:	ff 75 d8             	pushl  -0x28(%ebp)
f010f273:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f279:	50                   	push   %eax
f010f27a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f27d:	50                   	push   %eax
f010f27e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f281:	50                   	push   %eax
f010f282:	68 64 1d 88 f0       	push   $0xf0881d64
f010f287:	e8 5b 1c 00 00       	call   f0110ee7 <check_list_data>
f010f28c:	83 c4 20             	add    $0x20,%esp
f010f28f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f292:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f296:	74 17                	je     f010f2af <test_alloc_block_FF+0x33f>
f010f298:	83 ec 04             	sub    $0x4,%esp
f010f29b:	68 40 83 13 f0       	push   $0xf0138340
f010f2a0:	68 2d 01 00 00       	push   $0x12d
f010f2a5:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f2aa:	e8 56 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f2af:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f2b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f2b8:	74 17                	je     f010f2d1 <test_alloc_block_FF+0x361>
f010f2ba:	83 ec 04             	sub    $0x4,%esp
f010f2bd:	68 8c 83 13 f0       	push   $0xf013838c
f010f2c2:	68 2e 01 00 00       	push   $0x12e
f010f2c7:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f2cc:	e8 34 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f2d1:	83 ec 0c             	sub    $0xc,%esp
f010f2d4:	68 00 00 10 00       	push   $0x100000
f010f2d9:	e8 e7 2e 02 00       	call   f01321c5 <alloc_block_FF>
f010f2de:	83 c4 10             	add    $0x10,%esp
f010f2e1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f2e4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f2e8:	74 1a                	je     f010f304 <test_alloc_block_FF+0x394>
f010f2ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2ed:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2f0:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f2f5:	75 0d                	jne    f010f304 <test_alloc_block_FF+0x394>
f010f2f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2fa:	8b 40 08             	mov    0x8(%eax),%eax
f010f2fd:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f302:	74 17                	je     f010f31b <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f304:	83 ec 04             	sub    $0x4,%esp
f010f307:	68 98 82 13 f0       	push   $0xf0138298
f010f30c:	68 36 01 00 00       	push   $0x136
f010f311:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f316:	e8 ea 0e ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f31b:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f320:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f323:	4a                   	dec    %edx
f010f324:	39 d0                	cmp    %edx,%eax
f010f326:	75 13                	jne    f010f33b <test_alloc_block_FF+0x3cb>
f010f328:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f32d:	83 f8 07             	cmp    $0x7,%eax
f010f330:	75 09                	jne    f010f33b <test_alloc_block_FF+0x3cb>
f010f332:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f337:	85 c0                	test   %eax,%eax
f010f339:	74 17                	je     f010f352 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f33b:	83 ec 04             	sub    $0x4,%esp
f010f33e:	68 dc 82 13 f0       	push   $0xf01382dc
f010f343:	68 3a 01 00 00       	push   $0x13a
f010f348:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f34d:	e8 b3 0e ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f352:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f359:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f35c:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f363:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f36a:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f371:	83 ec 0c             	sub    $0xc,%esp
f010f374:	ff 75 d8             	pushl  -0x28(%ebp)
f010f377:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f37d:	50                   	push   %eax
f010f37e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f381:	50                   	push   %eax
f010f382:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f385:	50                   	push   %eax
f010f386:	68 64 1d 88 f0       	push   $0xf0881d64
f010f38b:	e8 57 1b 00 00       	call   f0110ee7 <check_list_data>
f010f390:	83 c4 20             	add    $0x20,%esp
f010f393:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f396:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f39a:	74 17                	je     f010f3b3 <test_alloc_block_FF+0x443>
f010f39c:	83 ec 04             	sub    $0x4,%esp
f010f39f:	68 40 83 13 f0       	push   $0xf0138340
f010f3a4:	68 42 01 00 00       	push   $0x142
f010f3a9:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f3ae:	e8 52 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f3b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f3b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f3bc:	74 17                	je     f010f3d5 <test_alloc_block_FF+0x465>
f010f3be:	83 ec 04             	sub    $0x4,%esp
f010f3c1:	68 8c 83 13 f0       	push   $0xf013838c
f010f3c6:	68 43 01 00 00       	push   $0x143
f010f3cb:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f3d0:	e8 30 0e ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f3d5:	83 ec 0c             	sub    $0xc,%esp
f010f3d8:	68 d8 83 13 f0       	push   $0xf01383d8
f010f3dd:	e8 2c 19 ff ff       	call   f0100d0e <cprintf>
f010f3e2:	83 c4 10             	add    $0x10,%esp
}
f010f3e5:	90                   	nop
f010f3e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f3e9:	5b                   	pop    %ebx
f010f3ea:	5e                   	pop    %esi
f010f3eb:	5f                   	pop    %edi
f010f3ec:	5d                   	pop    %ebp
f010f3ed:	c3                   	ret    

f010f3ee <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f3ee:	55                   	push   %ebp
f010f3ef:	89 e5                	mov    %esp,%ebp
f010f3f1:	57                   	push   %edi
f010f3f2:	56                   	push   %esi
f010f3f3:	53                   	push   %ebx
f010f3f4:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f3fa:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f401:	83 ec 0c             	sub    $0xc,%esp
f010f404:	ff 75 e0             	pushl  -0x20(%ebp)
f010f407:	e8 f7 29 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010f40c:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f40f:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010f416:	00 00 00 
f010f419:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010f420:	00 00 00 
f010f423:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010f42a:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f42d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f430:	bb 54 86 13 f0       	mov    $0xf0138654,%ebx
f010f435:	ba 07 00 00 00       	mov    $0x7,%edx
f010f43a:	89 c7                	mov    %eax,%edi
f010f43c:	89 de                	mov    %ebx,%esi
f010f43e:	89 d1                	mov    %edx,%ecx
f010f440:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f442:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f445:	bb 70 86 13 f0       	mov    $0xf0138670,%ebx
f010f44a:	ba 07 00 00 00       	mov    $0x7,%edx
f010f44f:	89 c7                	mov    %eax,%edi
f010f451:	89 de                	mov    %ebx,%esi
f010f453:	89 d1                	mov    %edx,%ecx
f010f455:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f457:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010f45e:	00 00 00 
f010f461:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010f468:	00 00 00 
f010f46b:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010f472:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f475:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f47c:	e9 5f 01 00 00       	jmp    f010f5e0 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f484:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f488:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f48b:	c1 e2 04             	shl    $0x4,%edx
f010f48e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f491:	01 da                	add    %ebx,%edx
f010f493:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f499:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f49b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f49e:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f4a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4a5:	c1 e2 04             	shl    $0x4,%edx
f010f4a8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4ab:	01 f2                	add    %esi,%edx
f010f4ad:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f4b3:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f4b5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f4b9:	0f 85 92 00 00 00    	jne    f010f551 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f4bf:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f4c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4c7:	c1 e2 04             	shl    $0x4,%edx
f010f4ca:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4cd:	01 fa                	add    %edi,%edx
f010f4cf:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f4d5:	89 02                	mov    %eax,(%edx)
f010f4d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4da:	c1 e0 04             	shl    $0x4,%eax
f010f4dd:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4e0:	01 d8                	add    %ebx,%eax
f010f4e2:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f4e7:	8b 00                	mov    (%eax),%eax
f010f4e9:	85 c0                	test   %eax,%eax
f010f4eb:	74 18                	je     f010f505 <test_alloc_block_BF+0x117>
f010f4ed:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f4f2:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f4f8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4fb:	c1 e1 04             	shl    $0x4,%ecx
f010f4fe:	01 ca                	add    %ecx,%edx
f010f500:	89 50 04             	mov    %edx,0x4(%eax)
f010f503:	eb 13                	jmp    f010f518 <test_alloc_block_BF+0x12a>
f010f505:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f50b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f50e:	c1 e2 04             	shl    $0x4,%edx
f010f511:	01 d0                	add    %edx,%eax
f010f513:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f518:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f51e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f521:	c1 e2 04             	shl    $0x4,%edx
f010f524:	01 d0                	add    %edx,%eax
f010f526:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f52b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f52e:	c1 e0 04             	shl    $0x4,%eax
f010f531:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f534:	01 f0                	add    %esi,%eax
f010f536:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f53b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f541:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f546:	40                   	inc    %eax
f010f547:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010f54c:	e9 8c 00 00 00       	jmp    f010f5dd <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f551:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f556:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f559:	c1 e2 04             	shl    $0x4,%edx
f010f55c:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f55f:	01 fa                	add    %edi,%edx
f010f561:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f567:	89 02                	mov    %eax,(%edx)
f010f569:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f56c:	c1 e0 04             	shl    $0x4,%eax
f010f56f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f572:	01 d8                	add    %ebx,%eax
f010f574:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f579:	8b 00                	mov    (%eax),%eax
f010f57b:	85 c0                	test   %eax,%eax
f010f57d:	74 17                	je     f010f596 <test_alloc_block_BF+0x1a8>
f010f57f:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f584:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f58a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f58d:	c1 e1 04             	shl    $0x4,%ecx
f010f590:	01 ca                	add    %ecx,%edx
f010f592:	89 10                	mov    %edx,(%eax)
f010f594:	eb 13                	jmp    f010f5a9 <test_alloc_block_BF+0x1bb>
f010f596:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f59c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f59f:	c1 e2 04             	shl    $0x4,%edx
f010f5a2:	01 d0                	add    %edx,%eax
f010f5a4:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f5a9:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f5af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f5b2:	c1 e2 04             	shl    $0x4,%edx
f010f5b5:	01 d0                	add    %edx,%eax
f010f5b7:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f5bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5bf:	c1 e0 04             	shl    $0x4,%eax
f010f5c2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f5c5:	01 f0                	add    %esi,%eax
f010f5c7:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f5cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f5d2:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f5d7:	40                   	inc    %eax
f010f5d8:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f5dd:	ff 45 e4             	incl   -0x1c(%ebp)
f010f5e0:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f5e4:	0f 8e 97 fe ff ff    	jle    f010f481 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f5ea:	83 ec 0c             	sub    $0xc,%esp
f010f5ed:	68 00 00 40 00       	push   $0x400000
f010f5f2:	e8 9b 2d 02 00       	call   f0132392 <alloc_block_BF>
f010f5f7:	83 c4 10             	add    $0x10,%esp
f010f5fa:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f5fd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f601:	74 17                	je     f010f61a <test_alloc_block_BF+0x22c>
f010f603:	83 ec 04             	sub    $0x4,%esp
f010f606:	68 60 84 13 f0       	push   $0xf0138460
f010f60b:	68 66 01 00 00       	push   $0x166
f010f610:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f615:	e8 eb 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f61a:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f61f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f622:	75 13                	jne    f010f637 <test_alloc_block_BF+0x249>
f010f624:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f629:	83 f8 07             	cmp    $0x7,%eax
f010f62c:	75 09                	jne    f010f637 <test_alloc_block_BF+0x249>
f010f62e:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f633:	85 c0                	test   %eax,%eax
f010f635:	74 17                	je     f010f64e <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f637:	83 ec 04             	sub    $0x4,%esp
f010f63a:	68 20 82 13 f0       	push   $0xf0138220
f010f63f:	68 6a 01 00 00       	push   $0x16a
f010f644:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f649:	e8 b7 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f64e:	83 ec 0c             	sub    $0xc,%esp
f010f651:	68 00 00 10 00       	push   $0x100000
f010f656:	e8 37 2d 02 00       	call   f0132392 <alloc_block_BF>
f010f65b:	83 c4 10             	add    $0x10,%esp
f010f65e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f661:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f665:	74 1a                	je     f010f681 <test_alloc_block_BF+0x293>
f010f667:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f66a:	8b 40 0c             	mov    0xc(%eax),%eax
f010f66d:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f672:	75 0d                	jne    f010f681 <test_alloc_block_BF+0x293>
f010f674:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f677:	8b 40 08             	mov    0x8(%eax),%eax
f010f67a:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f67f:	74 17                	je     f010f698 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f681:	83 ec 04             	sub    $0x4,%esp
f010f684:	68 d4 84 13 f0       	push   $0xf01384d4
f010f689:	68 72 01 00 00       	push   $0x172
f010f68e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f693:	e8 6d 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f698:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f69d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f6a0:	75 13                	jne    f010f6b5 <test_alloc_block_BF+0x2c7>
f010f6a2:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f6a7:	83 f8 06             	cmp    $0x6,%eax
f010f6aa:	75 09                	jne    f010f6b5 <test_alloc_block_BF+0x2c7>
f010f6ac:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f6b1:	85 c0                	test   %eax,%eax
f010f6b3:	74 17                	je     f010f6cc <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f6b5:	83 ec 04             	sub    $0x4,%esp
f010f6b8:	68 18 85 13 f0       	push   $0xf0138518
f010f6bd:	68 76 01 00 00       	push   $0x176
f010f6c2:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f6c7:	e8 39 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f6cc:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f6d3:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f6d6:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f6dd:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f6e4:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f6eb:	83 ec 0c             	sub    $0xc,%esp
f010f6ee:	ff 75 d8             	pushl  -0x28(%ebp)
f010f6f1:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f6f7:	50                   	push   %eax
f010f6f8:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f6fb:	50                   	push   %eax
f010f6fc:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f6ff:	50                   	push   %eax
f010f700:	68 64 1d 88 f0       	push   $0xf0881d64
f010f705:	e8 dd 17 00 00       	call   f0110ee7 <check_list_data>
f010f70a:	83 c4 20             	add    $0x20,%esp
f010f70d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f710:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f714:	74 17                	je     f010f72d <test_alloc_block_BF+0x33f>
f010f716:	83 ec 04             	sub    $0x4,%esp
f010f719:	68 7c 85 13 f0       	push   $0xf013857c
f010f71e:	68 7e 01 00 00       	push   $0x17e
f010f723:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f728:	e8 d8 0a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f72d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f733:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f736:	74 17                	je     f010f74f <test_alloc_block_BF+0x361>
f010f738:	83 ec 04             	sub    $0x4,%esp
f010f73b:	68 c8 85 13 f0       	push   $0xf01385c8
f010f740:	68 7f 01 00 00       	push   $0x17f
f010f745:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f74a:	e8 b6 0a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f74f:	83 ec 0c             	sub    $0xc,%esp
f010f752:	68 00 00 10 00       	push   $0x100000
f010f757:	e8 36 2c 02 00       	call   f0132392 <alloc_block_BF>
f010f75c:	83 c4 10             	add    $0x10,%esp
f010f75f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f762:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f766:	74 1a                	je     f010f782 <test_alloc_block_BF+0x394>
f010f768:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f76b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f76e:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f773:	75 0d                	jne    f010f782 <test_alloc_block_BF+0x394>
f010f775:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f778:	8b 40 08             	mov    0x8(%eax),%eax
f010f77b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f780:	74 17                	je     f010f799 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f782:	83 ec 04             	sub    $0x4,%esp
f010f785:	68 d4 84 13 f0       	push   $0xf01384d4
f010f78a:	68 87 01 00 00       	push   $0x187
f010f78f:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f794:	e8 6c 0a ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f799:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f79e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f7a1:	4a                   	dec    %edx
f010f7a2:	39 d0                	cmp    %edx,%eax
f010f7a4:	75 13                	jne    f010f7b9 <test_alloc_block_BF+0x3cb>
f010f7a6:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f7ab:	83 f8 06             	cmp    $0x6,%eax
f010f7ae:	75 09                	jne    f010f7b9 <test_alloc_block_BF+0x3cb>
f010f7b0:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f7b5:	85 c0                	test   %eax,%eax
f010f7b7:	74 17                	je     f010f7d0 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f7b9:	83 ec 04             	sub    $0x4,%esp
f010f7bc:	68 18 85 13 f0       	push   $0xf0138518
f010f7c1:	68 8b 01 00 00       	push   $0x18b
f010f7c6:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f7cb:	e8 35 0a ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f7d0:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f7d7:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f7da:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f7e1:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f7e8:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f7ef:	83 ec 0c             	sub    $0xc,%esp
f010f7f2:	ff 75 d8             	pushl  -0x28(%ebp)
f010f7f5:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f7fb:	50                   	push   %eax
f010f7fc:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f7ff:	50                   	push   %eax
f010f800:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f803:	50                   	push   %eax
f010f804:	68 64 1d 88 f0       	push   $0xf0881d64
f010f809:	e8 d9 16 00 00       	call   f0110ee7 <check_list_data>
f010f80e:	83 c4 20             	add    $0x20,%esp
f010f811:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f814:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f818:	74 17                	je     f010f831 <test_alloc_block_BF+0x443>
f010f81a:	83 ec 04             	sub    $0x4,%esp
f010f81d:	68 7c 85 13 f0       	push   $0xf013857c
f010f822:	68 93 01 00 00       	push   $0x193
f010f827:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f82c:	e8 d4 09 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f831:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f837:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f83a:	74 17                	je     f010f853 <test_alloc_block_BF+0x465>
f010f83c:	83 ec 04             	sub    $0x4,%esp
f010f83f:	68 c8 85 13 f0       	push   $0xf01385c8
f010f844:	68 94 01 00 00       	push   $0x194
f010f849:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f84e:	e8 b2 09 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f853:	83 ec 0c             	sub    $0xc,%esp
f010f856:	68 00 0c 00 00       	push   $0xc00
f010f85b:	e8 32 2b 02 00       	call   f0132392 <alloc_block_BF>
f010f860:	83 c4 10             	add    $0x10,%esp
f010f863:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f866:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f86a:	74 1a                	je     f010f886 <test_alloc_block_BF+0x498>
f010f86c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f86f:	8b 40 0c             	mov    0xc(%eax),%eax
f010f872:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f877:	75 0d                	jne    f010f886 <test_alloc_block_BF+0x498>
f010f879:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f87c:	8b 40 08             	mov    0x8(%eax),%eax
f010f87f:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f884:	74 17                	je     f010f89d <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f886:	83 ec 04             	sub    $0x4,%esp
f010f889:	68 d4 84 13 f0       	push   $0xf01384d4
f010f88e:	68 9c 01 00 00       	push   $0x19c
f010f893:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f898:	e8 68 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f89d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f8a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f8a5:	83 ea 02             	sub    $0x2,%edx
f010f8a8:	39 d0                	cmp    %edx,%eax
f010f8aa:	75 13                	jne    f010f8bf <test_alloc_block_BF+0x4d1>
f010f8ac:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f8b1:	83 f8 06             	cmp    $0x6,%eax
f010f8b4:	75 09                	jne    f010f8bf <test_alloc_block_BF+0x4d1>
f010f8b6:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f8bb:	85 c0                	test   %eax,%eax
f010f8bd:	74 17                	je     f010f8d6 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f8bf:	83 ec 04             	sub    $0x4,%esp
f010f8c2:	68 18 85 13 f0       	push   $0xf0138518
f010f8c7:	68 a0 01 00 00       	push   $0x1a0
f010f8cc:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f8d1:	e8 2f 09 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f8d6:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f8dd:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f8e0:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f8e7:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f8ee:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f8f5:	83 ec 0c             	sub    $0xc,%esp
f010f8f8:	ff 75 d8             	pushl  -0x28(%ebp)
f010f8fb:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f901:	50                   	push   %eax
f010f902:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f905:	50                   	push   %eax
f010f906:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f909:	50                   	push   %eax
f010f90a:	68 64 1d 88 f0       	push   $0xf0881d64
f010f90f:	e8 d3 15 00 00       	call   f0110ee7 <check_list_data>
f010f914:	83 c4 20             	add    $0x20,%esp
f010f917:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f91a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f91e:	74 17                	je     f010f937 <test_alloc_block_BF+0x549>
f010f920:	83 ec 04             	sub    $0x4,%esp
f010f923:	68 7c 85 13 f0       	push   $0xf013857c
f010f928:	68 a8 01 00 00       	push   $0x1a8
f010f92d:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f932:	e8 ce 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f937:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f93d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f940:	74 17                	je     f010f959 <test_alloc_block_BF+0x56b>
f010f942:	83 ec 04             	sub    $0x4,%esp
f010f945:	68 c8 85 13 f0       	push   $0xf01385c8
f010f94a:	68 a9 01 00 00       	push   $0x1a9
f010f94f:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f954:	e8 ac 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f959:	83 ec 0c             	sub    $0xc,%esp
f010f95c:	68 00 08 00 00       	push   $0x800
f010f961:	e8 2c 2a 02 00       	call   f0132392 <alloc_block_BF>
f010f966:	83 c4 10             	add    $0x10,%esp
f010f969:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f96c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f970:	74 17                	je     f010f989 <test_alloc_block_BF+0x59b>
f010f972:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f975:	8b 40 0c             	mov    0xc(%eax),%eax
f010f978:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f97d:	75 0a                	jne    f010f989 <test_alloc_block_BF+0x59b>
f010f97f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f982:	8b 40 08             	mov    0x8(%eax),%eax
f010f985:	85 c0                	test   %eax,%eax
f010f987:	74 17                	je     f010f9a0 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f989:	83 ec 04             	sub    $0x4,%esp
f010f98c:	68 d4 84 13 f0       	push   $0xf01384d4
f010f991:	68 b1 01 00 00       	push   $0x1b1
f010f996:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f99b:	e8 65 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f9a0:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f9a5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f9a8:	83 ea 02             	sub    $0x2,%edx
f010f9ab:	39 d0                	cmp    %edx,%eax
f010f9ad:	75 13                	jne    f010f9c2 <test_alloc_block_BF+0x5d4>
f010f9af:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f9b4:	83 f8 05             	cmp    $0x5,%eax
f010f9b7:	75 09                	jne    f010f9c2 <test_alloc_block_BF+0x5d4>
f010f9b9:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f9be:	85 c0                	test   %eax,%eax
f010f9c0:	74 17                	je     f010f9d9 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9c2:	83 ec 04             	sub    $0x4,%esp
f010f9c5:	68 18 85 13 f0       	push   $0xf0138518
f010f9ca:	68 b5 01 00 00       	push   $0x1b5
f010f9cf:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010f9d4:	e8 2c 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f9d9:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f9e0:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f9e3:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f9ea:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f9f1:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9f8:	83 ec 0c             	sub    $0xc,%esp
f010f9fb:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9fe:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fa04:	50                   	push   %eax
f010fa05:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fa08:	50                   	push   %eax
f010fa09:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fa0c:	50                   	push   %eax
f010fa0d:	68 64 1d 88 f0       	push   $0xf0881d64
f010fa12:	e8 d0 14 00 00       	call   f0110ee7 <check_list_data>
f010fa17:	83 c4 20             	add    $0x20,%esp
f010fa1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa1d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa21:	74 17                	je     f010fa3a <test_alloc_block_BF+0x64c>
f010fa23:	83 ec 04             	sub    $0x4,%esp
f010fa26:	68 7c 85 13 f0       	push   $0xf013857c
f010fa2b:	68 bd 01 00 00       	push   $0x1bd
f010fa30:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fa35:	e8 cb 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa3a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fa40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa43:	74 17                	je     f010fa5c <test_alloc_block_BF+0x66e>
f010fa45:	83 ec 04             	sub    $0x4,%esp
f010fa48:	68 c8 85 13 f0       	push   $0xf01385c8
f010fa4d:	68 be 01 00 00       	push   $0x1be
f010fa52:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fa57:	e8 a9 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fa5c:	83 ec 0c             	sub    $0xc,%esp
f010fa5f:	68 14 86 13 f0       	push   $0xf0138614
f010fa64:	e8 a5 12 ff ff       	call   f0100d0e <cprintf>
f010fa69:	83 c4 10             	add    $0x10,%esp
}
f010fa6c:	90                   	nop
f010fa6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fa70:	5b                   	pop    %ebx
f010fa71:	5e                   	pop    %esi
f010fa72:	5f                   	pop    %edi
f010fa73:	5d                   	pop    %ebp
f010fa74:	c3                   	ret    

f010fa75 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fa75:	55                   	push   %ebp
f010fa76:	89 e5                	mov    %esp,%ebp
f010fa78:	57                   	push   %edi
f010fa79:	56                   	push   %esi
f010fa7a:	53                   	push   %ebx
f010fa7b:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fa81:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fa88:	83 ec 0c             	sub    $0xc,%esp
f010fa8b:	ff 75 e0             	pushl  -0x20(%ebp)
f010fa8e:	e8 70 23 02 00       	call   f0131e03 <initialize_MemBlocksList>
f010fa93:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fa96:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010fa9d:	00 00 00 
f010faa0:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010faa7:	00 00 00 
f010faaa:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010fab1:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fab4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fab7:	bb 20 84 13 f0       	mov    $0xf0138420,%ebx
f010fabc:	ba 08 00 00 00       	mov    $0x8,%edx
f010fac1:	89 c7                	mov    %eax,%edi
f010fac3:	89 de                	mov    %ebx,%esi
f010fac5:	89 d1                	mov    %edx,%ecx
f010fac7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fac9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010facc:	bb 80 88 13 f0       	mov    $0xf0138880,%ebx
f010fad1:	ba 08 00 00 00       	mov    $0x8,%edx
f010fad6:	89 c7                	mov    %eax,%edi
f010fad8:	89 de                	mov    %ebx,%esi
f010fada:	89 d1                	mov    %edx,%ecx
f010fadc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fade:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010fae5:	00 00 00 
f010fae8:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010faef:	00 00 00 
f010faf2:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010faf9:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fafc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fb03:	e9 5f 01 00 00       	jmp    f010fc67 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fb08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb0b:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fb0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb12:	c1 e2 04             	shl    $0x4,%edx
f010fb15:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fb18:	01 da                	add    %ebx,%edx
f010fb1a:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fb20:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fb22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb25:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fb29:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb2c:	c1 e2 04             	shl    $0x4,%edx
f010fb2f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fb32:	01 f2                	add    %esi,%edx
f010fb34:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fb3a:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fb3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fb40:	0f 85 92 00 00 00    	jne    f010fbd8 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fb46:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010fb4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb4e:	c1 e2 04             	shl    $0x4,%edx
f010fb51:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fb54:	01 fa                	add    %edi,%edx
f010fb56:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fb5c:	89 02                	mov    %eax,(%edx)
f010fb5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb61:	c1 e0 04             	shl    $0x4,%eax
f010fb64:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fb67:	01 d8                	add    %ebx,%eax
f010fb69:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fb6e:	8b 00                	mov    (%eax),%eax
f010fb70:	85 c0                	test   %eax,%eax
f010fb72:	74 18                	je     f010fb8c <test_alloc_block_NF+0x117>
f010fb74:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010fb79:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fb7f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fb82:	c1 e1 04             	shl    $0x4,%ecx
f010fb85:	01 ca                	add    %ecx,%edx
f010fb87:	89 50 04             	mov    %edx,0x4(%eax)
f010fb8a:	eb 13                	jmp    f010fb9f <test_alloc_block_NF+0x12a>
f010fb8c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fb92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb95:	c1 e2 04             	shl    $0x4,%edx
f010fb98:	01 d0                	add    %edx,%eax
f010fb9a:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010fb9f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fba5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fba8:	c1 e2 04             	shl    $0x4,%edx
f010fbab:	01 d0                	add    %edx,%eax
f010fbad:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010fbb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbb5:	c1 e0 04             	shl    $0x4,%eax
f010fbb8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fbbb:	01 f0                	add    %esi,%eax
f010fbbd:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fbc2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fbc8:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fbcd:	40                   	inc    %eax
f010fbce:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010fbd3:	e9 8c 00 00 00       	jmp    f010fc64 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fbd8:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010fbdd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbe0:	c1 e2 04             	shl    $0x4,%edx
f010fbe3:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fbe6:	01 fa                	add    %edi,%edx
f010fbe8:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010fbee:	89 02                	mov    %eax,(%edx)
f010fbf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbf3:	c1 e0 04             	shl    $0x4,%eax
f010fbf6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fbf9:	01 d8                	add    %ebx,%eax
f010fbfb:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fc00:	8b 00                	mov    (%eax),%eax
f010fc02:	85 c0                	test   %eax,%eax
f010fc04:	74 17                	je     f010fc1d <test_alloc_block_NF+0x1a8>
f010fc06:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010fc0b:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fc11:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fc14:	c1 e1 04             	shl    $0x4,%ecx
f010fc17:	01 ca                	add    %ecx,%edx
f010fc19:	89 10                	mov    %edx,(%eax)
f010fc1b:	eb 13                	jmp    f010fc30 <test_alloc_block_NF+0x1bb>
f010fc1d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fc23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc26:	c1 e2 04             	shl    $0x4,%edx
f010fc29:	01 d0                	add    %edx,%eax
f010fc2b:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010fc30:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fc36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc39:	c1 e2 04             	shl    $0x4,%edx
f010fc3c:	01 d0                	add    %edx,%eax
f010fc3e:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010fc43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc46:	c1 e0 04             	shl    $0x4,%eax
f010fc49:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc4c:	01 f0                	add    %esi,%eax
f010fc4e:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fc53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fc59:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fc5e:	40                   	inc    %eax
f010fc5f:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fc64:	ff 45 e4             	incl   -0x1c(%ebp)
f010fc67:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010fc6b:	0f 8e 97 fe ff ff    	jle    f010fb08 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010fc71:	83 ec 0c             	sub    $0xc,%esp
f010fc74:	68 00 00 a0 00       	push   $0xa00000
f010fc79:	e8 25 29 02 00       	call   f01325a3 <alloc_block_NF>
f010fc7e:	83 c4 10             	add    $0x10,%esp
f010fc81:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010fc84:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc88:	74 17                	je     f010fca1 <test_alloc_block_NF+0x22c>
f010fc8a:	83 ec 04             	sub    $0x4,%esp
f010fc8d:	68 8c 86 13 f0       	push   $0xf013868c
f010fc92:	68 e1 01 00 00       	push   $0x1e1
f010fc97:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fc9c:	e8 64 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fca1:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fca6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fca9:	75 13                	jne    f010fcbe <test_alloc_block_NF+0x249>
f010fcab:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fcb0:	83 f8 08             	cmp    $0x8,%eax
f010fcb3:	75 09                	jne    f010fcbe <test_alloc_block_NF+0x249>
f010fcb5:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010fcba:	85 c0                	test   %eax,%eax
f010fcbc:	74 17                	je     f010fcd5 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fcbe:	83 ec 04             	sub    $0x4,%esp
f010fcc1:	68 20 82 13 f0       	push   $0xf0138220
f010fcc6:	68 e5 01 00 00       	push   $0x1e5
f010fccb:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fcd0:	e8 30 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010fcd5:	83 ec 0c             	sub    $0xc,%esp
f010fcd8:	68 00 28 00 00       	push   $0x2800
f010fcdd:	e8 c1 28 02 00       	call   f01325a3 <alloc_block_NF>
f010fce2:	83 c4 10             	add    $0x10,%esp
f010fce5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fce8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fcec:	74 1a                	je     f010fd08 <test_alloc_block_NF+0x293>
f010fcee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcf1:	8b 40 0c             	mov    0xc(%eax),%eax
f010fcf4:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010fcf9:	75 0d                	jne    f010fd08 <test_alloc_block_NF+0x293>
f010fcfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcfe:	8b 40 08             	mov    0x8(%eax),%eax
f010fd01:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010fd06:	74 17                	je     f010fd1f <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fd08:	83 ec 04             	sub    $0x4,%esp
f010fd0b:	68 00 87 13 f0       	push   $0xf0138700
f010fd10:	68 ed 01 00 00       	push   $0x1ed
f010fd15:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fd1a:	e8 e6 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd1f:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fd24:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd27:	75 13                	jne    f010fd3c <test_alloc_block_NF+0x2c7>
f010fd29:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fd2e:	83 f8 07             	cmp    $0x7,%eax
f010fd31:	75 09                	jne    f010fd3c <test_alloc_block_NF+0x2c7>
f010fd33:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010fd38:	85 c0                	test   %eax,%eax
f010fd3a:	74 17                	je     f010fd53 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd3c:	83 ec 04             	sub    $0x4,%esp
f010fd3f:	68 44 87 13 f0       	push   $0xf0138744
f010fd44:	68 f1 01 00 00       	push   $0x1f1
f010fd49:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fd4e:	e8 b2 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fd53:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fd5a:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010fd5d:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010fd64:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010fd6b:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd72:	83 ec 0c             	sub    $0xc,%esp
f010fd75:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd78:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fd7e:	50                   	push   %eax
f010fd7f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd82:	50                   	push   %eax
f010fd83:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fd86:	50                   	push   %eax
f010fd87:	68 64 1d 88 f0       	push   $0xf0881d64
f010fd8c:	e8 56 11 00 00       	call   f0110ee7 <check_list_data>
f010fd91:	83 c4 20             	add    $0x20,%esp
f010fd94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd97:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd9b:	74 17                	je     f010fdb4 <test_alloc_block_NF+0x33f>
f010fd9d:	83 ec 04             	sub    $0x4,%esp
f010fda0:	68 a8 87 13 f0       	push   $0xf01387a8
f010fda5:	68 f9 01 00 00       	push   $0x1f9
f010fdaa:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fdaf:	e8 51 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fdb4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fdba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fdbd:	74 17                	je     f010fdd6 <test_alloc_block_NF+0x361>
f010fdbf:	83 ec 04             	sub    $0x4,%esp
f010fdc2:	68 f4 87 13 f0       	push   $0xf01387f4
f010fdc7:	68 fa 01 00 00       	push   $0x1fa
f010fdcc:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fdd1:	e8 2f 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010fdd6:	83 ec 0c             	sub    $0xc,%esp
f010fdd9:	68 00 00 20 00       	push   $0x200000
f010fdde:	e8 c0 27 02 00       	call   f01325a3 <alloc_block_NF>
f010fde3:	83 c4 10             	add    $0x10,%esp
f010fde6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010fde9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fded:	74 1a                	je     f010fe09 <test_alloc_block_NF+0x394>
f010fdef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdf2:	8b 40 0c             	mov    0xc(%eax),%eax
f010fdf5:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010fdfa:	75 0d                	jne    f010fe09 <test_alloc_block_NF+0x394>
f010fdfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdff:	8b 40 08             	mov    0x8(%eax),%eax
f010fe02:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fe07:	74 17                	je     f010fe20 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fe09:	83 ec 04             	sub    $0x4,%esp
f010fe0c:	68 00 87 13 f0       	push   $0xf0138700
f010fe11:	68 03 02 00 00       	push   $0x203
f010fe16:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fe1b:	e8 e5 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe20:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fe25:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fe28:	75 13                	jne    f010fe3d <test_alloc_block_NF+0x3c8>
f010fe2a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fe2f:	83 f8 06             	cmp    $0x6,%eax
f010fe32:	75 09                	jne    f010fe3d <test_alloc_block_NF+0x3c8>
f010fe34:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010fe39:	85 c0                	test   %eax,%eax
f010fe3b:	74 17                	je     f010fe54 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe3d:	83 ec 04             	sub    $0x4,%esp
f010fe40:	68 44 87 13 f0       	push   $0xf0138744
f010fe45:	68 07 02 00 00       	push   $0x207
f010fe4a:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fe4f:	e8 b1 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fe54:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fe5b:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fe5e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010fe65:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010fe6c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe73:	83 ec 0c             	sub    $0xc,%esp
f010fe76:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe79:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fe7f:	50                   	push   %eax
f010fe80:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe83:	50                   	push   %eax
f010fe84:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fe87:	50                   	push   %eax
f010fe88:	68 64 1d 88 f0       	push   $0xf0881d64
f010fe8d:	e8 55 10 00 00       	call   f0110ee7 <check_list_data>
f010fe92:	83 c4 20             	add    $0x20,%esp
f010fe95:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe98:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe9c:	74 17                	je     f010feb5 <test_alloc_block_NF+0x440>
f010fe9e:	83 ec 04             	sub    $0x4,%esp
f010fea1:	68 a8 87 13 f0       	push   $0xf01387a8
f010fea6:	68 0f 02 00 00       	push   $0x20f
f010feab:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010feb0:	e8 50 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010feb5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010febb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010febe:	74 17                	je     f010fed7 <test_alloc_block_NF+0x462>
f010fec0:	83 ec 04             	sub    $0x4,%esp
f010fec3:	68 f4 87 13 f0       	push   $0xf01387f4
f010fec8:	68 10 02 00 00       	push   $0x210
f010fecd:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010fed2:	e8 2e 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010fed7:	83 ec 0c             	sub    $0xc,%esp
f010feda:	68 00 00 08 00       	push   $0x80000
f010fedf:	e8 bf 26 02 00       	call   f01325a3 <alloc_block_NF>
f010fee4:	83 c4 10             	add    $0x10,%esp
f010fee7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010feea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010feee:	74 1a                	je     f010ff0a <test_alloc_block_NF+0x495>
f010fef0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fef3:	8b 40 0c             	mov    0xc(%eax),%eax
f010fef6:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010fefb:	75 0d                	jne    f010ff0a <test_alloc_block_NF+0x495>
f010fefd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff00:	8b 40 08             	mov    0x8(%eax),%eax
f010ff03:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ff08:	74 17                	je     f010ff21 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ff0a:	83 ec 04             	sub    $0x4,%esp
f010ff0d:	68 00 87 13 f0       	push   $0xf0138700
f010ff12:	68 19 02 00 00       	push   $0x219
f010ff17:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ff1c:	e8 e4 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ff21:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ff26:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ff29:	4a                   	dec    %edx
f010ff2a:	39 d0                	cmp    %edx,%eax
f010ff2c:	75 13                	jne    f010ff41 <test_alloc_block_NF+0x4cc>
f010ff2e:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010ff33:	83 f8 06             	cmp    $0x6,%eax
f010ff36:	75 09                	jne    f010ff41 <test_alloc_block_NF+0x4cc>
f010ff38:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ff3d:	85 c0                	test   %eax,%eax
f010ff3f:	74 17                	je     f010ff58 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff41:	83 ec 04             	sub    $0x4,%esp
f010ff44:	68 44 87 13 f0       	push   $0xf0138744
f010ff49:	68 1d 02 00 00       	push   $0x21d
f010ff4e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ff53:	e8 ad 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff58:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ff5f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ff62:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010ff69:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010ff70:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff77:	83 ec 0c             	sub    $0xc,%esp
f010ff7a:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff7d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ff83:	50                   	push   %eax
f010ff84:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff87:	50                   	push   %eax
f010ff88:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ff8b:	50                   	push   %eax
f010ff8c:	68 64 1d 88 f0       	push   $0xf0881d64
f010ff91:	e8 51 0f 00 00       	call   f0110ee7 <check_list_data>
f010ff96:	83 c4 20             	add    $0x20,%esp
f010ff99:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff9c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ffa0:	74 17                	je     f010ffb9 <test_alloc_block_NF+0x544>
f010ffa2:	83 ec 04             	sub    $0x4,%esp
f010ffa5:	68 a8 87 13 f0       	push   $0xf01387a8
f010ffaa:	68 25 02 00 00       	push   $0x225
f010ffaf:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ffb4:	e8 4c 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ffb9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ffbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ffc2:	74 17                	je     f010ffdb <test_alloc_block_NF+0x566>
f010ffc4:	83 ec 04             	sub    $0x4,%esp
f010ffc7:	68 f4 87 13 f0       	push   $0xf01387f4
f010ffcc:	68 26 02 00 00       	push   $0x226
f010ffd1:	68 f4 7c 13 f0       	push   $0xf0137cf4
f010ffd6:	e8 2a 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010ffdb:	83 ec 0c             	sub    $0xc,%esp
f010ffde:	68 00 fc 07 00       	push   $0x7fc00
f010ffe3:	e8 bb 25 02 00       	call   f01325a3 <alloc_block_NF>
f010ffe8:	83 c4 10             	add    $0x10,%esp
f010ffeb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010ffee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fff2:	74 1a                	je     f011000e <test_alloc_block_NF+0x599>
f010fff4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fff7:	8b 40 0c             	mov    0xc(%eax),%eax
f010fffa:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010ffff:	75 0d                	jne    f011000e <test_alloc_block_NF+0x599>
f0110001:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110004:	8b 40 08             	mov    0x8(%eax),%eax
f0110007:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f011000c:	74 17                	je     f0110025 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011000e:	83 ec 04             	sub    $0x4,%esp
f0110011:	68 00 87 13 f0       	push   $0xf0138700
f0110016:	68 2f 02 00 00       	push   $0x22f
f011001b:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110020:	e8 e0 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110025:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011002a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011002d:	83 ea 02             	sub    $0x2,%edx
f0110030:	39 d0                	cmp    %edx,%eax
f0110032:	75 13                	jne    f0110047 <test_alloc_block_NF+0x5d2>
f0110034:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110039:	83 f8 06             	cmp    $0x6,%eax
f011003c:	75 09                	jne    f0110047 <test_alloc_block_NF+0x5d2>
f011003e:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110043:	85 c0                	test   %eax,%eax
f0110045:	74 17                	je     f011005e <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110047:	83 ec 04             	sub    $0x4,%esp
f011004a:	68 44 87 13 f0       	push   $0xf0138744
f011004f:	68 33 02 00 00       	push   $0x233
f0110054:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110059:	e8 a7 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011005e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110065:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110068:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f011006f:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f0110076:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011007d:	83 ec 0c             	sub    $0xc,%esp
f0110080:	ff 75 d8             	pushl  -0x28(%ebp)
f0110083:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110089:	50                   	push   %eax
f011008a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011008d:	50                   	push   %eax
f011008e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110091:	50                   	push   %eax
f0110092:	68 64 1d 88 f0       	push   $0xf0881d64
f0110097:	e8 4b 0e 00 00       	call   f0110ee7 <check_list_data>
f011009c:	83 c4 20             	add    $0x20,%esp
f011009f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01100a2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01100a6:	74 17                	je     f01100bf <test_alloc_block_NF+0x64a>
f01100a8:	83 ec 04             	sub    $0x4,%esp
f01100ab:	68 a8 87 13 f0       	push   $0xf01387a8
f01100b0:	68 3b 02 00 00       	push   $0x23b
f01100b5:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01100ba:	e8 46 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01100bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01100c5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100c8:	74 17                	je     f01100e1 <test_alloc_block_NF+0x66c>
f01100ca:	83 ec 04             	sub    $0x4,%esp
f01100cd:	68 f4 87 13 f0       	push   $0xf01387f4
f01100d2:	68 3c 02 00 00       	push   $0x23c
f01100d7:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01100dc:	e8 24 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01100e1:	83 ec 0c             	sub    $0xc,%esp
f01100e4:	68 00 0c 00 00       	push   $0xc00
f01100e9:	e8 b5 24 02 00       	call   f01325a3 <alloc_block_NF>
f01100ee:	83 c4 10             	add    $0x10,%esp
f01100f1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f01100f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100f8:	74 17                	je     f0110111 <test_alloc_block_NF+0x69c>
f01100fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100fd:	8b 40 0c             	mov    0xc(%eax),%eax
f0110100:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110105:	75 0a                	jne    f0110111 <test_alloc_block_NF+0x69c>
f0110107:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011010a:	8b 40 08             	mov    0x8(%eax),%eax
f011010d:	85 c0                	test   %eax,%eax
f011010f:	74 17                	je     f0110128 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110111:	83 ec 04             	sub    $0x4,%esp
f0110114:	68 00 87 13 f0       	push   $0xf0138700
f0110119:	68 45 02 00 00       	push   $0x245
f011011e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110123:	e8 dd 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110128:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011012d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110130:	83 ea 02             	sub    $0x2,%edx
f0110133:	39 d0                	cmp    %edx,%eax
f0110135:	75 13                	jne    f011014a <test_alloc_block_NF+0x6d5>
f0110137:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f011013c:	83 f8 05             	cmp    $0x5,%eax
f011013f:	75 09                	jne    f011014a <test_alloc_block_NF+0x6d5>
f0110141:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110146:	85 c0                	test   %eax,%eax
f0110148:	74 17                	je     f0110161 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011014a:	83 ec 04             	sub    $0x4,%esp
f011014d:	68 44 87 13 f0       	push   $0xf0138744
f0110152:	68 49 02 00 00       	push   $0x249
f0110157:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011015c:	e8 a4 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110161:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110168:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f011016b:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f0110172:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f0110179:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110180:	83 ec 0c             	sub    $0xc,%esp
f0110183:	ff 75 d8             	pushl  -0x28(%ebp)
f0110186:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011018c:	50                   	push   %eax
f011018d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110190:	50                   	push   %eax
f0110191:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110194:	50                   	push   %eax
f0110195:	68 64 1d 88 f0       	push   $0xf0881d64
f011019a:	e8 48 0d 00 00       	call   f0110ee7 <check_list_data>
f011019f:	83 c4 20             	add    $0x20,%esp
f01101a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01101a5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01101a9:	74 17                	je     f01101c2 <test_alloc_block_NF+0x74d>
f01101ab:	83 ec 04             	sub    $0x4,%esp
f01101ae:	68 a8 87 13 f0       	push   $0xf01387a8
f01101b3:	68 51 02 00 00       	push   $0x251
f01101b8:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01101bd:	e8 43 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01101c2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01101c8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101cb:	74 17                	je     f01101e4 <test_alloc_block_NF+0x76f>
f01101cd:	83 ec 04             	sub    $0x4,%esp
f01101d0:	68 f4 87 13 f0       	push   $0xf01387f4
f01101d5:	68 52 02 00 00       	push   $0x252
f01101da:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01101df:	e8 21 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01101e4:	83 ec 0c             	sub    $0xc,%esp
f01101e7:	68 00 04 00 00       	push   $0x400
f01101ec:	e8 b2 23 02 00       	call   f01325a3 <alloc_block_NF>
f01101f1:	83 c4 10             	add    $0x10,%esp
f01101f4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f01101f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01101fb:	74 1a                	je     f0110217 <test_alloc_block_NF+0x7a2>
f01101fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110200:	8b 40 0c             	mov    0xc(%eax),%eax
f0110203:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110208:	75 0d                	jne    f0110217 <test_alloc_block_NF+0x7a2>
f011020a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011020d:	8b 40 08             	mov    0x8(%eax),%eax
f0110210:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110215:	74 17                	je     f011022e <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110217:	83 ec 04             	sub    $0x4,%esp
f011021a:	68 00 87 13 f0       	push   $0xf0138700
f011021f:	68 5b 02 00 00       	push   $0x25b
f0110224:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110229:	e8 d7 ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011022e:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110233:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110236:	83 ea 03             	sub    $0x3,%edx
f0110239:	39 d0                	cmp    %edx,%eax
f011023b:	75 13                	jne    f0110250 <test_alloc_block_NF+0x7db>
f011023d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110242:	83 f8 05             	cmp    $0x5,%eax
f0110245:	75 09                	jne    f0110250 <test_alloc_block_NF+0x7db>
f0110247:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f011024c:	85 c0                	test   %eax,%eax
f011024e:	74 17                	je     f0110267 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110250:	83 ec 04             	sub    $0x4,%esp
f0110253:	68 44 87 13 f0       	push   $0xf0138744
f0110258:	68 5f 02 00 00       	push   $0x25f
f011025d:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110262:	e8 9e ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110267:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011026e:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110271:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f0110278:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f011027f:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110286:	83 ec 0c             	sub    $0xc,%esp
f0110289:	ff 75 d8             	pushl  -0x28(%ebp)
f011028c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110292:	50                   	push   %eax
f0110293:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110296:	50                   	push   %eax
f0110297:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011029a:	50                   	push   %eax
f011029b:	68 64 1d 88 f0       	push   $0xf0881d64
f01102a0:	e8 42 0c 00 00       	call   f0110ee7 <check_list_data>
f01102a5:	83 c4 20             	add    $0x20,%esp
f01102a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01102ab:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01102af:	74 17                	je     f01102c8 <test_alloc_block_NF+0x853>
f01102b1:	83 ec 04             	sub    $0x4,%esp
f01102b4:	68 a8 87 13 f0       	push   $0xf01387a8
f01102b9:	68 67 02 00 00       	push   $0x267
f01102be:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01102c3:	e8 3d ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01102c8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01102ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01102d1:	74 17                	je     f01102ea <test_alloc_block_NF+0x875>
f01102d3:	83 ec 04             	sub    $0x4,%esp
f01102d6:	68 f4 87 13 f0       	push   $0xf01387f4
f01102db:	68 68 02 00 00       	push   $0x268
f01102e0:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01102e5:	e8 1b ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f01102ea:	83 ec 0c             	sub    $0xc,%esp
f01102ed:	68 40 88 13 f0       	push   $0xf0138840
f01102f2:	e8 17 0a ff ff       	call   f0100d0e <cprintf>
f01102f7:	83 c4 10             	add    $0x10,%esp

}
f01102fa:	90                   	nop
f01102fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01102fe:	5b                   	pop    %ebx
f01102ff:	5e                   	pop    %esi
f0110300:	5f                   	pop    %edi
f0110301:	5d                   	pop    %ebp
f0110302:	c3                   	ret    

f0110303 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110303:	55                   	push   %ebp
f0110304:	89 e5                	mov    %esp,%ebp
f0110306:	57                   	push   %edi
f0110307:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f011030d:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110314:	83 ec 0c             	sub    $0xc,%esp
f0110317:	ff 75 f4             	pushl  -0xc(%ebp)
f011031a:	e8 e4 1a 02 00       	call   f0131e03 <initialize_MemBlocksList>
f011031f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110322:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f0110329:	00 00 00 
f011032c:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f0110333:	00 00 00 
f0110336:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f011033d:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110340:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f0110347:	00 00 00 
f011034a:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f0110351:	00 00 00 
f0110354:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f011035b:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f011035e:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110361:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110366:	b8 00 00 00 00       	mov    $0x0,%eax
f011036b:	89 d7                	mov    %edx,%edi
f011036d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f011036f:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110372:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110377:	b8 00 00 00 00       	mov    $0x0,%eax
f011037c:	89 d7                	mov    %edx,%edi
f011037e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110380:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110387:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f011038e:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110395:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110398:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f011039f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01103a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103a3:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01103aa:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01103ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103ae:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01103b2:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01103b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103b8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01103bc:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f01103bf:	83 ec 0c             	sub    $0xc,%esp
f01103c2:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01103c5:	50                   	push   %eax
f01103c6:	e8 a5 27 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f01103cb:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01103ce:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01103d3:	85 c0                	test   %eax,%eax
f01103d5:	75 14                	jne    f01103eb <test_insert_sorted_with_merge_freeList+0xe8>
f01103d7:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01103dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01103df:	75 0a                	jne    f01103eb <test_insert_sorted_with_merge_freeList+0xe8>
f01103e1:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01103e6:	83 f8 01             	cmp    $0x1,%eax
f01103e9:	74 17                	je     f0110402 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103eb:	83 ec 04             	sub    $0x4,%esp
f01103ee:	68 a0 88 13 f0       	push   $0xf01388a0
f01103f3:	68 88 02 00 00       	push   $0x288
f01103f8:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01103fd:	e8 03 fe fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110402:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110409:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110410:	83 ec 0c             	sub    $0xc,%esp
f0110413:	ff 75 f0             	pushl  -0x10(%ebp)
f0110416:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110419:	50                   	push   %eax
f011041a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011041d:	50                   	push   %eax
f011041e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110421:	50                   	push   %eax
f0110422:	68 64 1d 88 f0       	push   $0xf0881d64
f0110427:	e8 bb 0a 00 00       	call   f0110ee7 <check_list_data>
f011042c:	83 c4 20             	add    $0x20,%esp
f011042f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110432:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110436:	74 17                	je     f011044f <test_insert_sorted_with_merge_freeList+0x14c>
f0110438:	83 ec 04             	sub    $0x4,%esp
f011043b:	68 0c 89 13 f0       	push   $0xf013890c
f0110440:	68 8e 02 00 00       	push   $0x28e
f0110445:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011044a:	e8 b6 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011044f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110452:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110455:	74 17                	je     f011046e <test_insert_sorted_with_merge_freeList+0x16b>
f0110457:	83 ec 04             	sub    $0x4,%esp
f011045a:	68 60 89 13 f0       	push   $0xf0138960
f011045f:	68 8f 02 00 00       	push   $0x28f
f0110464:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110469:	e8 97 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f011046e:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110475:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110478:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f011047f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110480:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110483:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f011048a:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011048b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011048e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110492:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110498:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011049b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011049f:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01104a2:	83 ec 0c             	sub    $0xc,%esp
f01104a5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01104ab:	50                   	push   %eax
f01104ac:	e8 bf 26 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f01104b1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01104b4:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01104b9:	85 c0                	test   %eax,%eax
f01104bb:	75 14                	jne    f01104d1 <test_insert_sorted_with_merge_freeList+0x1ce>
f01104bd:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01104c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01104c5:	75 0a                	jne    f01104d1 <test_insert_sorted_with_merge_freeList+0x1ce>
f01104c7:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01104cc:	83 f8 02             	cmp    $0x2,%eax
f01104cf:	74 17                	je     f01104e8 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01104d1:	83 ec 04             	sub    $0x4,%esp
f01104d4:	68 a0 88 13 f0       	push   $0xf01388a0
f01104d9:	68 9e 02 00 00       	push   $0x29e
f01104de:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01104e3:	e8 1d fd fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01104e8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f01104ef:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01104f6:	83 ec 0c             	sub    $0xc,%esp
f01104f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01104fc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104ff:	50                   	push   %eax
f0110500:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110503:	50                   	push   %eax
f0110504:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110507:	50                   	push   %eax
f0110508:	68 64 1d 88 f0       	push   $0xf0881d64
f011050d:	e8 d5 09 00 00       	call   f0110ee7 <check_list_data>
f0110512:	83 c4 20             	add    $0x20,%esp
f0110515:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110518:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011051c:	74 17                	je     f0110535 <test_insert_sorted_with_merge_freeList+0x232>
f011051e:	83 ec 04             	sub    $0x4,%esp
f0110521:	68 0c 89 13 f0       	push   $0xf013890c
f0110526:	68 a4 02 00 00       	push   $0x2a4
f011052b:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110530:	e8 d0 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110535:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110538:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011053b:	74 17                	je     f0110554 <test_insert_sorted_with_merge_freeList+0x251>
f011053d:	83 ec 04             	sub    $0x4,%esp
f0110540:	68 60 89 13 f0       	push   $0xf0138960
f0110545:	68 a5 02 00 00       	push   $0x2a5
f011054a:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011054f:	e8 b1 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110554:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f011055b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011055e:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110565:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110566:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110569:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110570:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110571:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110574:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110578:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f011057e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110581:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110585:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f011058b:	83 ec 0c             	sub    $0xc,%esp
f011058e:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110594:	50                   	push   %eax
f0110595:	e8 d6 25 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f011059a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011059d:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01105a2:	85 c0                	test   %eax,%eax
f01105a4:	75 14                	jne    f01105ba <test_insert_sorted_with_merge_freeList+0x2b7>
f01105a6:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01105ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01105ae:	75 0a                	jne    f01105ba <test_insert_sorted_with_merge_freeList+0x2b7>
f01105b0:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01105b5:	83 f8 03             	cmp    $0x3,%eax
f01105b8:	74 17                	je     f01105d1 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105ba:	83 ec 04             	sub    $0x4,%esp
f01105bd:	68 a0 88 13 f0       	push   $0xf01388a0
f01105c2:	68 b4 02 00 00       	push   $0x2b4
f01105c7:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01105cc:	e8 34 fc fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01105d1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01105d8:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01105df:	83 ec 0c             	sub    $0xc,%esp
f01105e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01105e5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105e8:	50                   	push   %eax
f01105e9:	8d 45 98             	lea    -0x68(%ebp),%eax
f01105ec:	50                   	push   %eax
f01105ed:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01105f0:	50                   	push   %eax
f01105f1:	68 64 1d 88 f0       	push   $0xf0881d64
f01105f6:	e8 ec 08 00 00       	call   f0110ee7 <check_list_data>
f01105fb:	83 c4 20             	add    $0x20,%esp
f01105fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110601:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110605:	74 17                	je     f011061e <test_insert_sorted_with_merge_freeList+0x31b>
f0110607:	83 ec 04             	sub    $0x4,%esp
f011060a:	68 0c 89 13 f0       	push   $0xf013890c
f011060f:	68 ba 02 00 00       	push   $0x2ba
f0110614:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110619:	e8 e7 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011061e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110621:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110624:	74 17                	je     f011063d <test_insert_sorted_with_merge_freeList+0x33a>
f0110626:	83 ec 04             	sub    $0x4,%esp
f0110629:	68 60 89 13 f0       	push   $0xf0138960
f011062e:	68 bb 02 00 00       	push   $0x2bb
f0110633:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110638:	e8 c8 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f011063d:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110644:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110647:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f011064e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f011064f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110652:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110659:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011065a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011065d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110661:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011066a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011066e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110674:	83 ec 0c             	sub    $0xc,%esp
f0110677:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f011067d:	50                   	push   %eax
f011067e:	e8 ed 24 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f0110683:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110686:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f011068b:	85 c0                	test   %eax,%eax
f011068d:	75 14                	jne    f01106a3 <test_insert_sorted_with_merge_freeList+0x3a0>
f011068f:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110694:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110697:	75 0a                	jne    f01106a3 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110699:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f011069e:	83 f8 04             	cmp    $0x4,%eax
f01106a1:	74 17                	je     f01106ba <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106a3:	83 ec 04             	sub    $0x4,%esp
f01106a6:	68 a0 88 13 f0       	push   $0xf01388a0
f01106ab:	68 ca 02 00 00       	push   $0x2ca
f01106b0:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01106b5:	e8 4b fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01106ba:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01106c1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01106c8:	83 ec 0c             	sub    $0xc,%esp
f01106cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01106ce:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106d1:	50                   	push   %eax
f01106d2:	8d 45 98             	lea    -0x68(%ebp),%eax
f01106d5:	50                   	push   %eax
f01106d6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01106d9:	50                   	push   %eax
f01106da:	68 64 1d 88 f0       	push   $0xf0881d64
f01106df:	e8 03 08 00 00       	call   f0110ee7 <check_list_data>
f01106e4:	83 c4 20             	add    $0x20,%esp
f01106e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01106ea:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01106ee:	74 17                	je     f0110707 <test_insert_sorted_with_merge_freeList+0x404>
f01106f0:	83 ec 04             	sub    $0x4,%esp
f01106f3:	68 0c 89 13 f0       	push   $0xf013890c
f01106f8:	68 d0 02 00 00       	push   $0x2d0
f01106fd:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110702:	e8 fe fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110707:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011070a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011070d:	74 17                	je     f0110726 <test_insert_sorted_with_merge_freeList+0x423>
f011070f:	83 ec 04             	sub    $0x4,%esp
f0110712:	68 60 89 13 f0       	push   $0xf0138960
f0110717:	68 d1 02 00 00       	push   $0x2d1
f011071c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110721:	e8 df fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110726:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f011072d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110730:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110737:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110738:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011073b:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110742:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110743:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110746:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011074a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110750:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110753:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110757:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f011075d:	83 ec 0c             	sub    $0xc,%esp
f0110760:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110766:	50                   	push   %eax
f0110767:	e8 04 24 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f011076c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011076f:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110774:	85 c0                	test   %eax,%eax
f0110776:	75 17                	jne    f011078f <test_insert_sorted_with_merge_freeList+0x48c>
f0110778:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011077d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110780:	42                   	inc    %edx
f0110781:	39 d0                	cmp    %edx,%eax
f0110783:	75 0a                	jne    f011078f <test_insert_sorted_with_merge_freeList+0x48c>
f0110785:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f011078a:	83 f8 04             	cmp    $0x4,%eax
f011078d:	74 17                	je     f01107a6 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011078f:	83 ec 04             	sub    $0x4,%esp
f0110792:	68 a0 88 13 f0       	push   $0xf01388a0
f0110797:	68 e3 02 00 00       	push   $0x2e3
f011079c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01107a1:	e8 5f fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01107a6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01107ad:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01107b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b7:	8d 50 ff             	lea    -0x1(%eax),%edx
f01107ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107bd:	48                   	dec    %eax
f01107be:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01107c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107c5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107c9:	01 c8                	add    %ecx,%eax
f01107cb:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01107cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107d2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01107d9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01107da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107dd:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01107e4:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01107e5:	83 ec 0c             	sub    $0xc,%esp
f01107e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01107eb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107ee:	50                   	push   %eax
f01107ef:	8d 45 98             	lea    -0x68(%ebp),%eax
f01107f2:	50                   	push   %eax
f01107f3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01107f6:	50                   	push   %eax
f01107f7:	68 64 1d 88 f0       	push   $0xf0881d64
f01107fc:	e8 e6 06 00 00       	call   f0110ee7 <check_list_data>
f0110801:	83 c4 20             	add    $0x20,%esp
f0110804:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110807:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011080b:	74 17                	je     f0110824 <test_insert_sorted_with_merge_freeList+0x521>
f011080d:	83 ec 04             	sub    $0x4,%esp
f0110810:	68 0c 89 13 f0       	push   $0xf013890c
f0110815:	68 ec 02 00 00       	push   $0x2ec
f011081a:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011081f:	e8 e1 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110824:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110827:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011082a:	74 17                	je     f0110843 <test_insert_sorted_with_merge_freeList+0x540>
f011082c:	83 ec 04             	sub    $0x4,%esp
f011082f:	68 60 89 13 f0       	push   $0xf0138960
f0110834:	68 ed 02 00 00       	push   $0x2ed
f0110839:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011083e:	e8 c2 f9 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110843:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011084a:	83 ec 0c             	sub    $0xc,%esp
f011084d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110850:	50                   	push   %eax
f0110851:	e8 5d 07 00 00       	call   f0110fb3 <check_avaliable_list_data>
f0110856:	83 c4 10             	add    $0x10,%esp
f0110859:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011085c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011085f:	8d 50 01             	lea    0x1(%eax),%edx
f0110862:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110865:	39 c2                	cmp    %eax,%edx
f0110867:	74 17                	je     f0110880 <test_insert_sorted_with_merge_freeList+0x57d>
f0110869:	83 ec 04             	sub    $0x4,%esp
f011086c:	68 b4 89 13 f0       	push   $0xf01389b4
f0110871:	68 f2 02 00 00       	push   $0x2f2
f0110876:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011087b:	e8 85 f9 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110880:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110884:	74 17                	je     f011089d <test_insert_sorted_with_merge_freeList+0x59a>
f0110886:	83 ec 04             	sub    $0x4,%esp
f0110889:	68 0c 8a 13 f0       	push   $0xf0138a0c
f011088e:	68 f3 02 00 00       	push   $0x2f3
f0110893:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110898:	e8 68 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f011089d:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f01108a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108a7:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f01108ae:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01108af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108b2:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01108b9:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01108ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108bd:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01108c1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f01108c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108ca:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108ce:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f01108d4:	83 ec 0c             	sub    $0xc,%esp
f01108d7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01108dd:	50                   	push   %eax
f01108de:	e8 8d 22 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f01108e3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01108e6:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01108eb:	85 c0                	test   %eax,%eax
f01108ed:	75 19                	jne    f0110908 <test_insert_sorted_with_merge_freeList+0x605>
f01108ef:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01108f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01108f7:	83 c2 02             	add    $0x2,%edx
f01108fa:	39 d0                	cmp    %edx,%eax
f01108fc:	75 0a                	jne    f0110908 <test_insert_sorted_with_merge_freeList+0x605>
f01108fe:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110903:	83 f8 04             	cmp    $0x4,%eax
f0110906:	74 17                	je     f011091f <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110908:	83 ec 04             	sub    $0x4,%esp
f011090b:	68 a0 88 13 f0       	push   $0xf01388a0
f0110910:	68 05 03 00 00       	push   $0x305
f0110915:	68 f4 7c 13 f0       	push   $0xf0137cf4
f011091a:	e8 e6 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011091f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110926:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f011092d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110930:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110933:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110936:	48                   	dec    %eax
f0110937:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011093b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011093e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110942:	01 c8                	add    %ecx,%eax
f0110944:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110948:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011094b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110952:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110953:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110956:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011095d:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011095e:	83 ec 0c             	sub    $0xc,%esp
f0110961:	ff 75 f0             	pushl  -0x10(%ebp)
f0110964:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110967:	50                   	push   %eax
f0110968:	8d 45 98             	lea    -0x68(%ebp),%eax
f011096b:	50                   	push   %eax
f011096c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011096f:	50                   	push   %eax
f0110970:	68 64 1d 88 f0       	push   $0xf0881d64
f0110975:	e8 6d 05 00 00       	call   f0110ee7 <check_list_data>
f011097a:	83 c4 20             	add    $0x20,%esp
f011097d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110980:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110984:	74 17                	je     f011099d <test_insert_sorted_with_merge_freeList+0x69a>
f0110986:	83 ec 04             	sub    $0x4,%esp
f0110989:	68 0c 89 13 f0       	push   $0xf013890c
f011098e:	68 0e 03 00 00       	push   $0x30e
f0110993:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110998:	e8 68 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011099d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01109a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01109a3:	74 17                	je     f01109bc <test_insert_sorted_with_merge_freeList+0x6b9>
f01109a5:	83 ec 04             	sub    $0x4,%esp
f01109a8:	68 60 89 13 f0       	push   $0xf0138960
f01109ad:	68 0f 03 00 00       	push   $0x30f
f01109b2:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01109b7:	e8 49 f8 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01109bc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01109c3:	83 ec 0c             	sub    $0xc,%esp
f01109c6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109c9:	50                   	push   %eax
f01109ca:	e8 e4 05 00 00       	call   f0110fb3 <check_avaliable_list_data>
f01109cf:	83 c4 10             	add    $0x10,%esp
f01109d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01109d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109d8:	8d 50 02             	lea    0x2(%eax),%edx
f01109db:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01109de:	39 c2                	cmp    %eax,%edx
f01109e0:	74 17                	je     f01109f9 <test_insert_sorted_with_merge_freeList+0x6f6>
f01109e2:	83 ec 04             	sub    $0x4,%esp
f01109e5:	68 b4 89 13 f0       	push   $0xf01389b4
f01109ea:	68 14 03 00 00       	push   $0x314
f01109ef:	68 f4 7c 13 f0       	push   $0xf0137cf4
f01109f4:	e8 0c f8 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01109f9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01109fd:	74 17                	je     f0110a16 <test_insert_sorted_with_merge_freeList+0x713>
f01109ff:	83 ec 04             	sub    $0x4,%esp
f0110a02:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110a07:	68 15 03 00 00       	push   $0x315
f0110a0c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110a11:	e8 ef f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110a16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110a1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a20:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110a27:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a2b:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110a32:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110a33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a36:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a3a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110a40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a43:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a47:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110a4d:	83 ec 0c             	sub    $0xc,%esp
f0110a50:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110a56:	50                   	push   %eax
f0110a57:	e8 14 21 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f0110a5c:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110a5f:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110a64:	85 c0                	test   %eax,%eax
f0110a66:	75 19                	jne    f0110a81 <test_insert_sorted_with_merge_freeList+0x77e>
f0110a68:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110a6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110a70:	83 c2 03             	add    $0x3,%edx
f0110a73:	39 d0                	cmp    %edx,%eax
f0110a75:	75 0a                	jne    f0110a81 <test_insert_sorted_with_merge_freeList+0x77e>
f0110a77:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110a7c:	83 f8 04             	cmp    $0x4,%eax
f0110a7f:	74 17                	je     f0110a98 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a81:	83 ec 04             	sub    $0x4,%esp
f0110a84:	68 a0 88 13 f0       	push   $0xf01388a0
f0110a89:	68 28 03 00 00       	push   $0x328
f0110a8e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110a93:	e8 6d f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110a98:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110a9f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110aa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aa9:	8d 50 01             	lea    0x1(%eax),%edx
f0110aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aaf:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ab3:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110ab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aba:	8d 50 01             	lea    0x1(%eax),%edx
f0110abd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac0:	40                   	inc    %eax
f0110ac1:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110acc:	01 c8                	add    %ecx,%eax
f0110ace:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110ad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ad5:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110adc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110add:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ae0:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110ae7:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110ae8:	83 ec 0c             	sub    $0xc,%esp
f0110aeb:	ff 75 f0             	pushl  -0x10(%ebp)
f0110aee:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110af1:	50                   	push   %eax
f0110af2:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110af5:	50                   	push   %eax
f0110af6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110af9:	50                   	push   %eax
f0110afa:	68 64 1d 88 f0       	push   $0xf0881d64
f0110aff:	e8 e3 03 00 00       	call   f0110ee7 <check_list_data>
f0110b04:	83 c4 20             	add    $0x20,%esp
f0110b07:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b0a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b0e:	74 17                	je     f0110b27 <test_insert_sorted_with_merge_freeList+0x824>
f0110b10:	83 ec 04             	sub    $0x4,%esp
f0110b13:	68 0c 89 13 f0       	push   $0xf013890c
f0110b18:	68 32 03 00 00       	push   $0x332
f0110b1d:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110b22:	e8 de f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b27:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b2d:	74 17                	je     f0110b46 <test_insert_sorted_with_merge_freeList+0x843>
f0110b2f:	83 ec 04             	sub    $0x4,%esp
f0110b32:	68 60 89 13 f0       	push   $0xf0138960
f0110b37:	68 33 03 00 00       	push   $0x333
f0110b3c:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110b41:	e8 bf f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110b46:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110b4d:	83 ec 0c             	sub    $0xc,%esp
f0110b50:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b53:	50                   	push   %eax
f0110b54:	e8 5a 04 00 00       	call   f0110fb3 <check_avaliable_list_data>
f0110b59:	83 c4 10             	add    $0x10,%esp
f0110b5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b62:	8d 50 03             	lea    0x3(%eax),%edx
f0110b65:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b68:	39 c2                	cmp    %eax,%edx
f0110b6a:	74 17                	je     f0110b83 <test_insert_sorted_with_merge_freeList+0x880>
f0110b6c:	83 ec 04             	sub    $0x4,%esp
f0110b6f:	68 b4 89 13 f0       	push   $0xf01389b4
f0110b74:	68 38 03 00 00       	push   $0x338
f0110b79:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110b7e:	e8 82 f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110b83:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b87:	74 17                	je     f0110ba0 <test_insert_sorted_with_merge_freeList+0x89d>
f0110b89:	83 ec 04             	sub    $0x4,%esp
f0110b8c:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110b91:	68 39 03 00 00       	push   $0x339
f0110b96:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110b9b:	e8 65 f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110ba0:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110ba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110baa:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110bb1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110bb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb5:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110bbc:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bc0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bc4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bcd:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bd1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110bd7:	83 ec 0c             	sub    $0xc,%esp
f0110bda:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110be0:	50                   	push   %eax
f0110be1:	e8 8a 1f 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f0110be6:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110be9:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110bee:	85 c0                	test   %eax,%eax
f0110bf0:	75 19                	jne    f0110c0b <test_insert_sorted_with_merge_freeList+0x908>
f0110bf2:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110bf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110bfa:	83 c2 04             	add    $0x4,%edx
f0110bfd:	39 d0                	cmp    %edx,%eax
f0110bff:	75 0a                	jne    f0110c0b <test_insert_sorted_with_merge_freeList+0x908>
f0110c01:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110c06:	83 f8 04             	cmp    $0x4,%eax
f0110c09:	74 17                	je     f0110c22 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c0b:	83 ec 04             	sub    $0x4,%esp
f0110c0e:	68 a0 88 13 f0       	push   $0xf01388a0
f0110c13:	68 4c 03 00 00       	push   $0x34c
f0110c18:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110c1d:	e8 e3 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c22:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110c29:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110c30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c33:	8d 50 01             	lea    0x1(%eax),%edx
f0110c36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c39:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110c3d:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c44:	8d 50 01             	lea    0x1(%eax),%edx
f0110c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c4a:	40                   	inc    %eax
f0110c4b:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110c4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c52:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c56:	01 c8                	add    %ecx,%eax
f0110c58:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110c5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c5f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c66:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110c67:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c6a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110c71:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c72:	83 ec 0c             	sub    $0xc,%esp
f0110c75:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c78:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c7b:	50                   	push   %eax
f0110c7c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c7f:	50                   	push   %eax
f0110c80:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c83:	50                   	push   %eax
f0110c84:	68 64 1d 88 f0       	push   $0xf0881d64
f0110c89:	e8 59 02 00 00       	call   f0110ee7 <check_list_data>
f0110c8e:	83 c4 20             	add    $0x20,%esp
f0110c91:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c98:	74 17                	je     f0110cb1 <test_insert_sorted_with_merge_freeList+0x9ae>
f0110c9a:	83 ec 04             	sub    $0x4,%esp
f0110c9d:	68 0c 89 13 f0       	push   $0xf013890c
f0110ca2:	68 56 03 00 00       	push   $0x356
f0110ca7:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110cac:	e8 54 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110cb1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110cb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110cb7:	74 17                	je     f0110cd0 <test_insert_sorted_with_merge_freeList+0x9cd>
f0110cb9:	83 ec 04             	sub    $0x4,%esp
f0110cbc:	68 60 89 13 f0       	push   $0xf0138960
f0110cc1:	68 57 03 00 00       	push   $0x357
f0110cc6:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110ccb:	e8 35 f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110cd0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110cd7:	83 ec 0c             	sub    $0xc,%esp
f0110cda:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110cdd:	50                   	push   %eax
f0110cde:	e8 d0 02 00 00       	call   f0110fb3 <check_avaliable_list_data>
f0110ce3:	83 c4 10             	add    $0x10,%esp
f0110ce6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ce9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110cec:	8d 50 04             	lea    0x4(%eax),%edx
f0110cef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110cf2:	39 c2                	cmp    %eax,%edx
f0110cf4:	74 17                	je     f0110d0d <test_insert_sorted_with_merge_freeList+0xa0a>
f0110cf6:	83 ec 04             	sub    $0x4,%esp
f0110cf9:	68 b4 89 13 f0       	push   $0xf01389b4
f0110cfe:	68 5c 03 00 00       	push   $0x35c
f0110d03:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110d08:	e8 f8 f4 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d0d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d11:	74 17                	je     f0110d2a <test_insert_sorted_with_merge_freeList+0xa27>
f0110d13:	83 ec 04             	sub    $0x4,%esp
f0110d16:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110d1b:	68 5d 03 00 00       	push   $0x35d
f0110d20:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110d25:	e8 db f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110d2a:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110d31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d34:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110d3b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110d3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d3f:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110d46:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d4a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d4e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d57:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d5b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110d61:	83 ec 0c             	sub    $0xc,%esp
f0110d64:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110d6a:	50                   	push   %eax
f0110d6b:	e8 00 1e 02 00       	call   f0132b70 <insert_sorted_with_merge_freeList>
f0110d70:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110d73:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110d78:	85 c0                	test   %eax,%eax
f0110d7a:	75 19                	jne    f0110d95 <test_insert_sorted_with_merge_freeList+0xa92>
f0110d7c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110d81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110d84:	83 c2 06             	add    $0x6,%edx
f0110d87:	39 d0                	cmp    %edx,%eax
f0110d89:	75 0a                	jne    f0110d95 <test_insert_sorted_with_merge_freeList+0xa92>
f0110d8b:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110d90:	83 f8 03             	cmp    $0x3,%eax
f0110d93:	74 17                	je     f0110dac <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d95:	83 ec 04             	sub    $0x4,%esp
f0110d98:	68 a0 88 13 f0       	push   $0xf01388a0
f0110d9d:	68 70 03 00 00       	push   $0x370
f0110da2:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110da7:	e8 59 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110dac:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110db3:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110dba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dbd:	48                   	dec    %eax
f0110dbe:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110dc5:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110dc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc9:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110dcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dcf:	48                   	dec    %eax
f0110dd0:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110dd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dd7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ddb:	01 c1                	add    %eax,%ecx
f0110ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110de0:	40                   	inc    %eax
f0110de1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110de5:	01 c8                	add    %ecx,%eax
f0110de7:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110deb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dee:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110df5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110df9:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110e00:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110e01:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e04:	40                   	inc    %eax
f0110e05:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110e0c:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0110e0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e10:	40                   	inc    %eax
f0110e11:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110e18:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e19:	83 ec 0c             	sub    $0xc,%esp
f0110e1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e1f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e22:	50                   	push   %eax
f0110e23:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e26:	50                   	push   %eax
f0110e27:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e2a:	50                   	push   %eax
f0110e2b:	68 64 1d 88 f0       	push   $0xf0881d64
f0110e30:	e8 b2 00 00 00       	call   f0110ee7 <check_list_data>
f0110e35:	83 c4 20             	add    $0x20,%esp
f0110e38:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e3b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e3f:	74 17                	je     f0110e58 <test_insert_sorted_with_merge_freeList+0xb55>
f0110e41:	83 ec 04             	sub    $0x4,%esp
f0110e44:	68 0c 89 13 f0       	push   $0xf013890c
f0110e49:	68 7c 03 00 00       	push   $0x37c
f0110e4e:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110e53:	e8 ad f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e58:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e5e:	74 17                	je     f0110e77 <test_insert_sorted_with_merge_freeList+0xb74>
f0110e60:	83 ec 04             	sub    $0x4,%esp
f0110e63:	68 60 89 13 f0       	push   $0xf0138960
f0110e68:	68 7d 03 00 00       	push   $0x37d
f0110e6d:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110e72:	e8 8e f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110e77:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110e7e:	83 ec 0c             	sub    $0xc,%esp
f0110e81:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e84:	50                   	push   %eax
f0110e85:	e8 29 01 00 00       	call   f0110fb3 <check_avaliable_list_data>
f0110e8a:	83 c4 10             	add    $0x10,%esp
f0110e8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110e90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110e93:	8d 50 06             	lea    0x6(%eax),%edx
f0110e96:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e99:	39 c2                	cmp    %eax,%edx
f0110e9b:	74 17                	je     f0110eb4 <test_insert_sorted_with_merge_freeList+0xbb1>
f0110e9d:	83 ec 04             	sub    $0x4,%esp
f0110ea0:	68 b4 89 13 f0       	push   $0xf01389b4
f0110ea5:	68 82 03 00 00       	push   $0x382
f0110eaa:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110eaf:	e8 51 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110eb4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110eb8:	74 17                	je     f0110ed1 <test_insert_sorted_with_merge_freeList+0xbce>
f0110eba:	83 ec 04             	sub    $0x4,%esp
f0110ebd:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110ec2:	68 83 03 00 00       	push   $0x383
f0110ec7:	68 f4 7c 13 f0       	push   $0xf0137cf4
f0110ecc:	e8 34 f3 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110ed1:	83 ec 0c             	sub    $0xc,%esp
f0110ed4:	68 68 8a 13 f0       	push   $0xf0138a68
f0110ed9:	e8 30 fe fe ff       	call   f0100d0e <cprintf>
f0110ede:	83 c4 10             	add    $0x10,%esp

}
f0110ee1:	90                   	nop
f0110ee2:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110ee5:	c9                   	leave  
f0110ee6:	c3                   	ret    

f0110ee7 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110ee7:	55                   	push   %ebp
f0110ee8:	89 e5                	mov    %esp,%ebp
f0110eea:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110eed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110ef4:	8b 45 14             	mov    0x14(%ebp),%eax
f0110ef7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0110efd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f07:	8b 00                	mov    (%eax),%eax
f0110f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110f0c:	eb 6e                	jmp    f0110f7c <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110f0e:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110f11:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110f14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0110f1e:	01 d0                	add    %edx,%eax
f0110f20:	8b 00                	mov    (%eax),%eax
f0110f22:	85 c0                	test   %eax,%eax
f0110f24:	74 e8                	je     f0110f0e <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110f26:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f29:	8b 50 08             	mov    0x8(%eax),%edx
f0110f2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110f2f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110f36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110f39:	01 c8                	add    %ecx,%eax
f0110f3b:	8b 00                	mov    (%eax),%eax
f0110f3d:	39 c2                	cmp    %eax,%edx
f0110f3f:	75 1b                	jne    f0110f5c <check_list_data+0x75>
f0110f41:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f44:	8b 50 0c             	mov    0xc(%eax),%edx
f0110f47:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110f4a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110f51:	8b 45 10             	mov    0x10(%ebp),%eax
f0110f54:	01 c8                	add    %ecx,%eax
f0110f56:	8b 00                	mov    (%eax),%eax
f0110f58:	39 c2                	cmp    %eax,%edx
f0110f5a:	74 07                	je     f0110f63 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110f5c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f61:	eb 4e                	jmp    f0110fb1 <check_list_data+0xca>
		}
		(*size)++;
f0110f63:	8b 45 14             	mov    0x14(%ebp),%eax
f0110f66:	8b 00                	mov    (%eax),%eax
f0110f68:	8d 50 01             	lea    0x1(%eax),%edx
f0110f6b:	8b 45 14             	mov    0x14(%ebp),%eax
f0110f6e:	89 10                	mov    %edx,(%eax)
		i++;
f0110f70:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f76:	8b 40 08             	mov    0x8(%eax),%eax
f0110f79:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110f7c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110f80:	74 07                	je     f0110f89 <check_list_data+0xa2>
f0110f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f85:	8b 00                	mov    (%eax),%eax
f0110f87:	eb 05                	jmp    f0110f8e <check_list_data+0xa7>
f0110f89:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0110f91:	89 42 08             	mov    %eax,0x8(%edx)
f0110f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f97:	8b 40 08             	mov    0x8(%eax),%eax
f0110f9a:	85 c0                	test   %eax,%eax
f0110f9c:	0f 85 6f ff ff ff    	jne    f0110f11 <check_list_data+0x2a>
f0110fa2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110fa6:	0f 85 65 ff ff ff    	jne    f0110f11 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110fac:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110fb1:	c9                   	leave  
f0110fb2:	c3                   	ret    

f0110fb3 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110fb3:	55                   	push   %ebp
f0110fb4:	89 e5                	mov    %esp,%ebp
f0110fb6:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110fb9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110fc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0110fc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110fc9:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0110fce:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110fd1:	eb 30                	jmp    f0111003 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110fd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110fd6:	8b 40 08             	mov    0x8(%eax),%eax
f0110fd9:	85 c0                	test   %eax,%eax
f0110fdb:	75 0a                	jne    f0110fe7 <check_avaliable_list_data+0x34>
f0110fdd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110fe0:	8b 40 0c             	mov    0xc(%eax),%eax
f0110fe3:	85 c0                	test   %eax,%eax
f0110fe5:	74 07                	je     f0110fee <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110fe7:	b8 00 00 00 00       	mov    $0x0,%eax
f0110fec:	eb 40                	jmp    f011102e <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110fee:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ff1:	8b 00                	mov    (%eax),%eax
f0110ff3:	8d 50 01             	lea    0x1(%eax),%edx
f0110ff6:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ff9:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110ffb:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f0111000:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111003:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111007:	74 07                	je     f0111010 <check_avaliable_list_data+0x5d>
f0111009:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011100c:	8b 00                	mov    (%eax),%eax
f011100e:	eb 05                	jmp    f0111015 <check_avaliable_list_data+0x62>
f0111010:	b8 00 00 00 00       	mov    $0x0,%eax
f0111015:	a3 a0 1d 88 f0       	mov    %eax,0xf0881da0
f011101a:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f011101f:	85 c0                	test   %eax,%eax
f0111021:	75 b0                	jne    f0110fd3 <check_avaliable_list_data+0x20>
f0111023:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111027:	75 aa                	jne    f0110fd3 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111029:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011102e:	c9                   	leave  
f011102f:	c3                   	ret    

f0111030 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0111030:	55                   	push   %ebp
f0111031:	89 e5                	mov    %esp,%ebp
f0111033:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0111036:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f011103d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111040:	8b 00                	mov    (%eax),%eax
f0111042:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111045:	eb 27                	jmp    f011106e <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0111047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011104a:	8b 50 0c             	mov    0xc(%eax),%edx
f011104d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111050:	8b 40 08             	mov    0x8(%eax),%eax
f0111053:	83 ec 04             	sub    $0x4,%esp
f0111056:	52                   	push   %edx
f0111057:	50                   	push   %eax
f0111058:	68 b8 7d 13 f0       	push   $0xf0137db8
f011105d:	e8 ac fc fe ff       	call   f0100d0e <cprintf>
f0111062:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0111065:	8b 45 08             	mov    0x8(%ebp),%eax
f0111068:	8b 40 08             	mov    0x8(%eax),%eax
f011106b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011106e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111072:	74 07                	je     f011107b <show_list_content+0x4b>
f0111074:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111077:	8b 00                	mov    (%eax),%eax
f0111079:	eb 05                	jmp    f0111080 <show_list_content+0x50>
f011107b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111080:	8b 55 08             	mov    0x8(%ebp),%edx
f0111083:	89 42 08             	mov    %eax,0x8(%edx)
f0111086:	8b 45 08             	mov    0x8(%ebp),%eax
f0111089:	8b 40 08             	mov    0x8(%eax),%eax
f011108c:	85 c0                	test   %eax,%eax
f011108e:	75 b7                	jne    f0111047 <show_list_content+0x17>
f0111090:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111094:	75 b1                	jne    f0111047 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0111096:	90                   	nop
f0111097:	c9                   	leave  
f0111098:	c3                   	ret    

f0111099 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111099:	55                   	push   %ebp
f011109a:	89 e5                	mov    %esp,%ebp
f011109c:	57                   	push   %edi
f011109d:	56                   	push   %esi
f011109e:	53                   	push   %ebx
f011109f:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01110a5:	83 ec 0c             	sub    $0xc,%esp
f01110a8:	68 bc 8a 13 f0       	push   $0xf0138abc
f01110ad:	e8 5c fc fe ff       	call   f0100d0e <cprintf>
f01110b2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01110b5:	83 ec 0c             	sub    $0xc,%esp
f01110b8:	68 e0 8a 13 f0       	push   $0xf0138ae0
f01110bd:	e8 4c fc fe ff       	call   f0100d0e <cprintf>
f01110c2:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01110c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01110cc:	83 ec 0c             	sub    $0xc,%esp
f01110cf:	68 fc 8a 13 f0       	push   $0xf0138afc
f01110d4:	e8 35 fc fe ff       	call   f0100d0e <cprintf>
f01110d9:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01110dc:	8d 45 80             	lea    -0x80(%ebp),%eax
f01110df:	bb b6 8b 13 f0       	mov    $0xf0138bb6,%ebx
f01110e4:	ba 03 00 00 00       	mov    $0x3,%edx
f01110e9:	89 c7                	mov    %eax,%edi
f01110eb:	89 de                	mov    %ebx,%esi
f01110ed:	89 d1                	mov    %edx,%ecx
f01110ef:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01110f1:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01110f4:	b9 16 00 00 00       	mov    $0x16,%ecx
f01110f9:	b8 00 00 00 00       	mov    $0x0,%eax
f01110fe:	89 d7                	mov    %edx,%edi
f0111100:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111102:	83 ec 0c             	sub    $0xc,%esp
f0111105:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111108:	50                   	push   %eax
f0111109:	e8 62 fc fe ff       	call   f0100d70 <execute_command>
f011110e:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111111:	83 ec 0c             	sub    $0xc,%esp
f0111114:	68 2a 8b 13 f0       	push   $0xf0138b2a
f0111119:	e8 f0 fb fe ff       	call   f0100d0e <cprintf>
f011111e:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111121:	83 ec 0c             	sub    $0xc,%esp
f0111124:	68 40 8b 13 f0       	push   $0xf0138b40
f0111129:	e8 e0 fb fe ff       	call   f0100d0e <cprintf>
f011112e:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111131:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111138:	65 00 00 
f011113b:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111141:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111146:	b8 00 00 00 00       	mov    $0x0,%eax
f011114b:	89 d7                	mov    %edx,%edi
f011114d:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f011114f:	83 ec 0c             	sub    $0xc,%esp
f0111152:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111158:	50                   	push   %eax
f0111159:	e8 12 fc fe ff       	call   f0100d70 <execute_command>
f011115e:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111161:	83 ec 0c             	sub    $0xc,%esp
f0111164:	68 2a 8b 13 f0       	push   $0xf0138b2a
f0111169:	e8 a0 fb fe ff       	call   f0100d0e <cprintf>
f011116e:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111171:	83 ec 0c             	sub    $0xc,%esp
f0111174:	68 68 8b 13 f0       	push   $0xf0138b68
f0111179:	e8 90 fb fe ff       	call   f0100d0e <cprintf>
f011117e:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111181:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111188:	75 00 00 
f011118b:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111191:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111196:	b8 00 00 00 00       	mov    $0x0,%eax
f011119b:	89 d7                	mov    %edx,%edi
f011119d:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011119f:	83 ec 0c             	sub    $0xc,%esp
f01111a2:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01111a8:	50                   	push   %eax
f01111a9:	e8 c2 fb fe ff       	call   f0100d70 <execute_command>
f01111ae:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01111b1:	83 ec 0c             	sub    $0xc,%esp
f01111b4:	68 2a 8b 13 f0       	push   $0xf0138b2a
f01111b9:	e8 50 fb fe ff       	call   f0100d0e <cprintf>
f01111be:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01111c1:	83 ec 0c             	sub    $0xc,%esp
f01111c4:	68 90 8b 13 f0       	push   $0xf0138b90
f01111c9:	e8 40 fb fe ff       	call   f0100d0e <cprintf>
f01111ce:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01111d1:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01111d8:	6d 6d 00 
f01111db:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01111e1:	b9 18 00 00 00       	mov    $0x18,%ecx
f01111e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01111eb:	89 d7                	mov    %edx,%edi
f01111ed:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01111ef:	83 ec 0c             	sub    $0xc,%esp
f01111f2:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01111f8:	50                   	push   %eax
f01111f9:	e8 72 fb fe ff       	call   f0100d70 <execute_command>
f01111fe:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111201:	83 ec 0c             	sub    $0xc,%esp
f0111204:	68 2a 8b 13 f0       	push   $0xf0138b2a
f0111209:	e8 00 fb fe ff       	call   f0100d0e <cprintf>
f011120e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111211:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111216:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111219:	5b                   	pop    %ebx
f011121a:	5e                   	pop    %esi
f011121b:	5f                   	pop    %edi
f011121c:	5d                   	pop    %ebp
f011121d:	c3                   	ret    

f011121e <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011121e:	55                   	push   %ebp
f011121f:	89 e5                	mov    %esp,%ebp
f0111221:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111224:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011122b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111232:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111239:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011123e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111241:	ff 75 f0             	pushl  -0x10(%ebp)
f0111244:	ff 75 f4             	pushl  -0xc(%ebp)
f0111247:	50                   	push   %eax
f0111248:	e8 60 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f011124d:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111250:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111255:	ff 75 ec             	pushl  -0x14(%ebp)
f0111258:	ff 75 f0             	pushl  -0x10(%ebp)
f011125b:	ff 75 f4             	pushl  -0xc(%ebp)
f011125e:	50                   	push   %eax
f011125f:	e8 9e 4e 00 00       	call   f0116102 <CP>
f0111264:	83 c4 10             	add    $0x10,%esp
f0111267:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011126a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011126e:	74 14                	je     f0111284 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111270:	83 ec 04             	sub    $0x4,%esp
f0111273:	68 1c 8c 13 f0       	push   $0xf0138c1c
f0111278:	6a 5a                	push   $0x5a
f011127a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011127f:	e8 81 ef fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111284:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011128b:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111292:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111299:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011129e:	ff 75 ec             	pushl  -0x14(%ebp)
f01112a1:	ff 75 f0             	pushl  -0x10(%ebp)
f01112a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01112a7:	50                   	push   %eax
f01112a8:	e8 00 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f01112ad:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01112b0:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01112b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01112b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01112bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01112be:	50                   	push   %eax
f01112bf:	e8 3e 4e 00 00       	call   f0116102 <CP>
f01112c4:	83 c4 10             	add    $0x10,%esp
f01112c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01112ca:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112ce:	74 14                	je     f01112e4 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01112d0:	83 ec 04             	sub    $0x4,%esp
f01112d3:	68 5c 8c 13 f0       	push   $0xf0138c5c
f01112d8:	6a 66                	push   $0x66
f01112da:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01112df:	e8 21 ef fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01112e4:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f01112eb:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f01112f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01112f9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01112fe:	ff 75 ec             	pushl  -0x14(%ebp)
f0111301:	ff 75 f0             	pushl  -0x10(%ebp)
f0111304:	ff 75 f4             	pushl  -0xc(%ebp)
f0111307:	50                   	push   %eax
f0111308:	e8 a0 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f011130d:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111310:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111315:	ff 75 ec             	pushl  -0x14(%ebp)
f0111318:	ff 75 f0             	pushl  -0x10(%ebp)
f011131b:	ff 75 f4             	pushl  -0xc(%ebp)
f011131e:	50                   	push   %eax
f011131f:	e8 de 4d 00 00       	call   f0116102 <CP>
f0111324:	83 c4 10             	add    $0x10,%esp
f0111327:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011132a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011132e:	74 14                	je     f0111344 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111330:	83 ec 04             	sub    $0x4,%esp
f0111333:	68 80 8c 13 f0       	push   $0xf0138c80
f0111338:	6a 71                	push   $0x71
f011133a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011133f:	e8 c1 ee fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111344:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f011134b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111352:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111359:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011135e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111361:	ff 75 f0             	pushl  -0x10(%ebp)
f0111364:	ff 75 f4             	pushl  -0xc(%ebp)
f0111367:	50                   	push   %eax
f0111368:	e8 40 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f011136d:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111370:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111375:	ff 75 ec             	pushl  -0x14(%ebp)
f0111378:	ff 75 f0             	pushl  -0x10(%ebp)
f011137b:	ff 75 f4             	pushl  -0xc(%ebp)
f011137e:	50                   	push   %eax
f011137f:	e8 7e 4d 00 00       	call   f0116102 <CP>
f0111384:	83 c4 10             	add    $0x10,%esp
f0111387:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011138a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011138e:	74 14                	je     f01113a4 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111390:	83 ec 04             	sub    $0x4,%esp
f0111393:	68 a4 8c 13 f0       	push   $0xf0138ca4
f0111398:	6a 7d                	push   $0x7d
f011139a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011139f:	e8 61 ee fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01113a4:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01113ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01113b2:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01113b9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01113be:	ff 75 ec             	pushl  -0x14(%ebp)
f01113c1:	ff 75 f0             	pushl  -0x10(%ebp)
f01113c4:	ff 75 f4             	pushl  -0xc(%ebp)
f01113c7:	50                   	push   %eax
f01113c8:	e8 e0 67 ff ff       	call   f0107bad <pt_set_page_permissions>
f01113cd:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01113d0:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01113d5:	ff 75 ec             	pushl  -0x14(%ebp)
f01113d8:	ff 75 f0             	pushl  -0x10(%ebp)
f01113db:	ff 75 f4             	pushl  -0xc(%ebp)
f01113de:	50                   	push   %eax
f01113df:	e8 1e 4d 00 00       	call   f0116102 <CP>
f01113e4:	83 c4 10             	add    $0x10,%esp
f01113e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01113ea:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01113ee:	74 17                	je     f0111407 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f01113f0:	83 ec 04             	sub    $0x4,%esp
f01113f3:	68 c8 8c 13 f0       	push   $0xf0138cc8
f01113f8:	68 89 00 00 00       	push   $0x89
f01113fd:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111402:	e8 fe ed fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111407:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011140e:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111415:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011141c:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111421:	ff 75 ec             	pushl  -0x14(%ebp)
f0111424:	ff 75 f0             	pushl  -0x10(%ebp)
f0111427:	ff 75 f4             	pushl  -0xc(%ebp)
f011142a:	50                   	push   %eax
f011142b:	e8 7d 67 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111430:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111433:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111438:	ff 75 ec             	pushl  -0x14(%ebp)
f011143b:	ff 75 f0             	pushl  -0x10(%ebp)
f011143e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111441:	50                   	push   %eax
f0111442:	e8 bb 4c 00 00       	call   f0116102 <CP>
f0111447:	83 c4 10             	add    $0x10,%esp
f011144a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011144d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111451:	74 17                	je     f011146a <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111453:	83 ec 04             	sub    $0x4,%esp
f0111456:	68 ec 8c 13 f0       	push   $0xf0138cec
f011145b:	68 95 00 00 00       	push   $0x95
f0111460:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111465:	e8 9b ed fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011146a:	83 ec 0c             	sub    $0xc,%esp
f011146d:	68 18 8d 13 f0       	push   $0xf0138d18
f0111472:	e8 97 f8 fe ff       	call   f0100d0e <cprintf>
f0111477:	83 c4 10             	add    $0x10,%esp
	return 0;
f011147a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011147f:	c9                   	leave  
f0111480:	c3                   	ret    

f0111481 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111481:	55                   	push   %ebp
f0111482:	89 e5                	mov    %esp,%ebp
f0111484:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111487:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011148e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111495:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011149c:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01114a1:	ff 75 ec             	pushl  -0x14(%ebp)
f01114a4:	ff 75 f0             	pushl  -0x10(%ebp)
f01114a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01114aa:	50                   	push   %eax
f01114ab:	e8 fd 66 ff ff       	call   f0107bad <pt_set_page_permissions>
f01114b0:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01114b3:	83 ec 04             	sub    $0x4,%esp
f01114b6:	68 68 8d 13 f0       	push   $0xf0138d68
f01114bb:	68 a2 00 00 00       	push   $0xa2
f01114c0:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01114c5:	e8 3b ed fe ff       	call   f0100205 <_panic>

f01114ca <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01114ca:	55                   	push   %ebp
f01114cb:	89 e5                	mov    %esp,%ebp
f01114cd:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01114d0:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01114d7:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01114dc:	83 ec 08             	sub    $0x8,%esp
f01114df:	ff 75 f4             	pushl  -0xc(%ebp)
f01114e2:	50                   	push   %eax
f01114e3:	e8 79 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01114e8:	83 c4 10             	add    $0x10,%esp
f01114eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01114ee:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01114f2:	74 17                	je     f011150b <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01114f4:	83 ec 04             	sub    $0x4,%esp
f01114f7:	68 04 8e 13 f0       	push   $0xf0138e04
f01114fc:	68 b0 00 00 00       	push   $0xb0
f0111501:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111506:	e8 fa ec fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011150b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111512:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111517:	83 ec 08             	sub    $0x8,%esp
f011151a:	ff 75 f4             	pushl  -0xc(%ebp)
f011151d:	50                   	push   %eax
f011151e:	e8 3e 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111523:	83 c4 10             	add    $0x10,%esp
f0111526:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111529:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011152d:	74 17                	je     f0111546 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f011152f:	83 ec 04             	sub    $0x4,%esp
f0111532:	68 28 8e 13 f0       	push   $0xf0138e28
f0111537:	68 b8 00 00 00       	push   $0xb8
f011153c:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111541:	e8 bf ec fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111546:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011154d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111552:	83 ec 08             	sub    $0x8,%esp
f0111555:	ff 75 f4             	pushl  -0xc(%ebp)
f0111558:	50                   	push   %eax
f0111559:	e8 03 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f011155e:	83 c4 10             	add    $0x10,%esp
f0111561:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111564:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111568:	74 17                	je     f0111581 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011156a:	83 ec 04             	sub    $0x4,%esp
f011156d:	68 4c 8e 13 f0       	push   $0xf0138e4c
f0111572:	68 c0 00 00 00       	push   $0xc0
f0111577:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011157c:	e8 84 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111581:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111588:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011158d:	83 ec 08             	sub    $0x8,%esp
f0111590:	ff 75 f4             	pushl  -0xc(%ebp)
f0111593:	50                   	push   %eax
f0111594:	e8 c8 66 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111599:	83 c4 10             	add    $0x10,%esp
f011159c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011159f:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01115a3:	74 17                	je     f01115bc <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01115a5:	83 ec 04             	sub    $0x4,%esp
f01115a8:	68 70 8e 13 f0       	push   $0xf0138e70
f01115ad:	68 c7 00 00 00       	push   $0xc7
f01115b2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01115b7:	e8 49 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01115bc:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01115c3:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01115c8:	83 ec 08             	sub    $0x8,%esp
f01115cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01115ce:	50                   	push   %eax
f01115cf:	e8 8d 66 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01115d4:	83 c4 10             	add    $0x10,%esp
f01115d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01115da:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01115de:	74 17                	je     f01115f7 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01115e0:	83 ec 04             	sub    $0x4,%esp
f01115e3:	68 94 8e 13 f0       	push   $0xf0138e94
f01115e8:	68 ce 00 00 00       	push   $0xce
f01115ed:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01115f2:	e8 0e ec fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01115f7:	83 ec 0c             	sub    $0xc,%esp
f01115fa:	68 b8 8e 13 f0       	push   $0xf0138eb8
f01115ff:	e8 0a f7 fe ff       	call   f0100d0e <cprintf>
f0111604:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111607:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011160c:	c9                   	leave  
f011160d:	c3                   	ret    

f011160e <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011160e:	55                   	push   %ebp
f011160f:	89 e5                	mov    %esp,%ebp
f0111611:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111614:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011161b:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111620:	83 ec 08             	sub    $0x8,%esp
f0111623:	ff 75 f4             	pushl  -0xc(%ebp)
f0111626:	50                   	push   %eax
f0111627:	e8 90 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011162c:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f011162f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111634:	83 ec 08             	sub    $0x8,%esp
f0111637:	ff 75 f4             	pushl  -0xc(%ebp)
f011163a:	50                   	push   %eax
f011163b:	e8 1e 4a 00 00       	call   f011605e <CE>
f0111640:	83 c4 10             	add    $0x10,%esp
f0111643:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111646:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011164a:	74 17                	je     f0111663 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f011164c:	83 ec 04             	sub    $0x4,%esp
f011164f:	68 00 8f 13 f0       	push   $0xf0138f00
f0111654:	68 de 00 00 00       	push   $0xde
f0111659:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011165e:	e8 a2 eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111663:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011166a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011166f:	83 ec 08             	sub    $0x8,%esp
f0111672:	ff 75 f4             	pushl  -0xc(%ebp)
f0111675:	50                   	push   %eax
f0111676:	e8 41 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011167b:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011167e:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111683:	83 ec 08             	sub    $0x8,%esp
f0111686:	ff 75 f4             	pushl  -0xc(%ebp)
f0111689:	50                   	push   %eax
f011168a:	e8 cf 49 00 00       	call   f011605e <CE>
f011168f:	83 c4 10             	add    $0x10,%esp
f0111692:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111695:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111699:	74 17                	je     f01116b2 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011169b:	83 ec 04             	sub    $0x4,%esp
f011169e:	68 2c 8f 13 f0       	push   $0xf0138f2c
f01116a3:	68 e6 00 00 00       	push   $0xe6
f01116a8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01116ad:	e8 53 eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01116b2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01116b9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01116be:	83 ec 08             	sub    $0x8,%esp
f01116c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01116c4:	50                   	push   %eax
f01116c5:	e8 f2 65 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01116ca:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01116cd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01116d2:	83 ec 08             	sub    $0x8,%esp
f01116d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d8:	50                   	push   %eax
f01116d9:	e8 80 49 00 00       	call   f011605e <CE>
f01116de:	83 c4 10             	add    $0x10,%esp
f01116e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01116e4:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01116e8:	74 17                	je     f0111701 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01116ea:	83 ec 04             	sub    $0x4,%esp
f01116ed:	68 58 8f 13 f0       	push   $0xf0138f58
f01116f2:	68 ee 00 00 00       	push   $0xee
f01116f7:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01116fc:	e8 04 eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111701:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111708:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011170d:	83 ec 08             	sub    $0x8,%esp
f0111710:	ff 75 f4             	pushl  -0xc(%ebp)
f0111713:	50                   	push   %eax
f0111714:	e8 a3 65 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111719:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011171c:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111721:	83 ec 08             	sub    $0x8,%esp
f0111724:	ff 75 f4             	pushl  -0xc(%ebp)
f0111727:	50                   	push   %eax
f0111728:	e8 31 49 00 00       	call   f011605e <CE>
f011172d:	83 c4 10             	add    $0x10,%esp
f0111730:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111733:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111737:	74 17                	je     f0111750 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111739:	83 ec 04             	sub    $0x4,%esp
f011173c:	68 84 8f 13 f0       	push   $0xf0138f84
f0111741:	68 f6 00 00 00       	push   $0xf6
f0111746:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011174b:	e8 b5 ea fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111750:	83 ec 0c             	sub    $0xc,%esp
f0111753:	68 b0 8f 13 f0       	push   $0xf0138fb0
f0111758:	e8 b1 f5 fe ff       	call   f0100d0e <cprintf>
f011175d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111760:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111765:	c9                   	leave  
f0111766:	c3                   	ret    

f0111767 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111767:	55                   	push   %ebp
f0111768:	89 e5                	mov    %esp,%ebp
f011176a:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f011176d:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111774:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111779:	83 ec 08             	sub    $0x8,%esp
f011177c:	ff 75 f4             	pushl  -0xc(%ebp)
f011177f:	50                   	push   %eax
f0111780:	e8 37 65 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111785:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111788:	83 ec 04             	sub    $0x4,%esp
f011178b:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0111790:	68 01 01 00 00       	push   $0x101
f0111795:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011179a:	e8 66 ea fe ff       	call   f0100205 <_panic>

f011179f <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f011179f:	55                   	push   %ebp
f01117a0:	89 e5                	mov    %esp,%ebp
f01117a2:	57                   	push   %edi
f01117a3:	56                   	push   %esi
f01117a4:	53                   	push   %ebx
f01117a5:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f01117ab:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f01117b2:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f01117b9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01117be:	83 ec 0c             	sub    $0xc,%esp
f01117c1:	50                   	push   %eax
f01117c2:	e8 79 49 00 00       	call   f0116140 <ClearUserSpace>
f01117c7:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f01117ca:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f01117d1:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01117d6:	83 ec 08             	sub    $0x8,%esp
f01117d9:	ff 75 dc             	pushl  -0x24(%ebp)
f01117dc:	50                   	push   %eax
f01117dd:	e8 46 65 ff ff       	call   f0107d28 <virtual_to_physical>
f01117e2:	83 c4 10             	add    $0x10,%esp
f01117e5:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f01117e8:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f01117ec:	74 17                	je     f0111805 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f01117ee:	83 ec 04             	sub    $0x4,%esp
f01117f1:	68 94 90 13 f0       	push   $0xf0139094
f01117f6:	68 16 01 00 00       	push   $0x116
f01117fb:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111800:	e8 00 ea fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111805:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011180c:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111811:	83 ec 08             	sub    $0x8,%esp
f0111814:	ff 75 dc             	pushl  -0x24(%ebp)
f0111817:	50                   	push   %eax
f0111818:	e8 0b 65 ff ff       	call   f0107d28 <virtual_to_physical>
f011181d:	83 c4 10             	add    $0x10,%esp
f0111820:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111823:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111828:	83 ec 08             	sub    $0x8,%esp
f011182b:	ff 75 dc             	pushl  -0x24(%ebp)
f011182e:	50                   	push   %eax
f011182f:	e8 0b 48 00 00       	call   f011603f <CA>
f0111834:	83 c4 10             	add    $0x10,%esp
f0111837:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011183a:	74 17                	je     f0111853 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011183c:	83 ec 04             	sub    $0x4,%esp
f011183f:	68 cc 90 13 f0       	push   $0xf01390cc
f0111844:	68 1f 01 00 00       	push   $0x11f
f0111849:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011184e:	e8 b2 e9 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111853:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111859:	bb 98 92 13 f0       	mov    $0xf0139298,%ebx
f011185e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111863:	89 c7                	mov    %eax,%edi
f0111865:	89 de                	mov    %ebx,%esi
f0111867:	89 d1                	mov    %edx,%ecx
f0111869:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011186b:	8d 55 81             	lea    -0x7f(%ebp),%edx
f011186e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111873:	b0 00                	mov    $0x0,%al
f0111875:	89 d7                	mov    %edx,%edi
f0111877:	f3 aa                	rep stos %al,%es:(%edi)
f0111879:	83 ec 0c             	sub    $0xc,%esp
f011187c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111882:	50                   	push   %eax
f0111883:	e8 e8 f4 fe ff       	call   f0100d70 <execute_command>
f0111888:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f011188b:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111892:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111897:	83 ec 08             	sub    $0x8,%esp
f011189a:	ff 75 dc             	pushl  -0x24(%ebp)
f011189d:	50                   	push   %eax
f011189e:	e8 85 64 ff ff       	call   f0107d28 <virtual_to_physical>
f01118a3:	83 c4 10             	add    $0x10,%esp
f01118a6:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01118a9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01118ae:	83 ec 08             	sub    $0x8,%esp
f01118b1:	ff 75 dc             	pushl  -0x24(%ebp)
f01118b4:	50                   	push   %eax
f01118b5:	e8 85 47 00 00       	call   f011603f <CA>
f01118ba:	83 c4 10             	add    $0x10,%esp
f01118bd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01118c0:	74 17                	je     f01118d9 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f01118c2:	83 ec 04             	sub    $0x4,%esp
f01118c5:	68 04 91 13 f0       	push   $0xf0139104
f01118ca:	68 28 01 00 00       	push   $0x128
f01118cf:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01118d4:	e8 2c e9 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f01118d9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01118df:	bb fc 92 13 f0       	mov    $0xf01392fc,%ebx
f01118e4:	ba 0d 00 00 00       	mov    $0xd,%edx
f01118e9:	89 c7                	mov    %eax,%edi
f01118eb:	89 de                	mov    %ebx,%esi
f01118ed:	89 d1                	mov    %edx,%ecx
f01118ef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01118f1:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f01118f7:	b9 57 00 00 00       	mov    $0x57,%ecx
f01118fc:	b0 00                	mov    $0x0,%al
f01118fe:	89 d7                	mov    %edx,%edi
f0111900:	f3 aa                	rep stos %al,%es:(%edi)
f0111902:	83 ec 0c             	sub    $0xc,%esp
f0111905:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011190b:	50                   	push   %eax
f011190c:	e8 5f f4 fe ff       	call   f0100d70 <execute_command>
f0111911:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111914:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011191b:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111920:	83 ec 08             	sub    $0x8,%esp
f0111923:	ff 75 dc             	pushl  -0x24(%ebp)
f0111926:	50                   	push   %eax
f0111927:	e8 fc 63 ff ff       	call   f0107d28 <virtual_to_physical>
f011192c:	83 c4 10             	add    $0x10,%esp
f011192f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111932:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111937:	83 ec 08             	sub    $0x8,%esp
f011193a:	ff 75 dc             	pushl  -0x24(%ebp)
f011193d:	50                   	push   %eax
f011193e:	e8 fc 46 00 00       	call   f011603f <CA>
f0111943:	83 c4 10             	add    $0x10,%esp
f0111946:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111949:	74 17                	je     f0111962 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f011194b:	83 ec 04             	sub    $0x4,%esp
f011194e:	68 3c 91 13 f0       	push   $0xf013913c
f0111953:	68 31 01 00 00       	push   $0x131
f0111958:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011195d:	e8 a3 e8 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111962:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111968:	bb 60 93 13 f0       	mov    $0xf0139360,%ebx
f011196d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111972:	89 c7                	mov    %eax,%edi
f0111974:	89 de                	mov    %ebx,%esi
f0111976:	89 d1                	mov    %edx,%ecx
f0111978:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011197a:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111980:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111985:	b0 00                	mov    $0x0,%al
f0111987:	89 d7                	mov    %edx,%edi
f0111989:	f3 aa                	rep stos %al,%es:(%edi)
f011198b:	83 ec 0c             	sub    $0xc,%esp
f011198e:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111994:	50                   	push   %eax
f0111995:	e8 d6 f3 fe ff       	call   f0100d70 <execute_command>
f011199a:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f011199d:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01119a4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01119a9:	83 ec 08             	sub    $0x8,%esp
f01119ac:	ff 75 dc             	pushl  -0x24(%ebp)
f01119af:	50                   	push   %eax
f01119b0:	e8 73 63 ff ff       	call   f0107d28 <virtual_to_physical>
f01119b5:	83 c4 10             	add    $0x10,%esp
f01119b8:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01119bb:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01119c0:	83 ec 08             	sub    $0x8,%esp
f01119c3:	ff 75 dc             	pushl  -0x24(%ebp)
f01119c6:	50                   	push   %eax
f01119c7:	e8 73 46 00 00       	call   f011603f <CA>
f01119cc:	83 c4 10             	add    $0x10,%esp
f01119cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01119d2:	74 17                	je     f01119eb <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f01119d4:	83 ec 04             	sub    $0x4,%esp
f01119d7:	68 74 91 13 f0       	push   $0xf0139174
f01119dc:	68 3a 01 00 00       	push   $0x13a
f01119e1:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01119e6:	e8 1a e8 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f01119eb:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01119f2:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01119f7:	83 ec 08             	sub    $0x8,%esp
f01119fa:	ff 75 dc             	pushl  -0x24(%ebp)
f01119fd:	50                   	push   %eax
f01119fe:	e8 25 63 ff ff       	call   f0107d28 <virtual_to_physical>
f0111a03:	83 c4 10             	add    $0x10,%esp
f0111a06:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111a09:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a0e:	83 ec 08             	sub    $0x8,%esp
f0111a11:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a14:	50                   	push   %eax
f0111a15:	e8 25 46 00 00       	call   f011603f <CA>
f0111a1a:	83 c4 10             	add    $0x10,%esp
f0111a1d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111a20:	74 17                	je     f0111a39 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111a22:	83 ec 04             	sub    $0x4,%esp
f0111a25:	68 ac 91 13 f0       	push   $0xf01391ac
f0111a2a:	68 42 01 00 00       	push   $0x142
f0111a2f:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111a34:	e8 cc e7 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111a39:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111a40:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a45:	83 ec 08             	sub    $0x8,%esp
f0111a48:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a4b:	50                   	push   %eax
f0111a4c:	e8 d7 62 ff ff       	call   f0107d28 <virtual_to_physical>
f0111a51:	83 c4 10             	add    $0x10,%esp
f0111a54:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111a57:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a5c:	83 ec 08             	sub    $0x8,%esp
f0111a5f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a62:	50                   	push   %eax
f0111a63:	e8 d7 45 00 00       	call   f011603f <CA>
f0111a68:	83 c4 10             	add    $0x10,%esp
f0111a6b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111a6e:	74 17                	je     f0111a87 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111a70:	83 ec 04             	sub    $0x4,%esp
f0111a73:	68 e4 91 13 f0       	push   $0xf01391e4
f0111a78:	68 4a 01 00 00       	push   $0x14a
f0111a7d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111a82:	e8 7e e7 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111a87:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111a8d:	bb c4 93 13 f0       	mov    $0xf01393c4,%ebx
f0111a92:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111a97:	89 c7                	mov    %eax,%edi
f0111a99:	89 de                	mov    %ebx,%esi
f0111a9b:	89 d1                	mov    %edx,%ecx
f0111a9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a9f:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111aa5:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111aaa:	b0 00                	mov    $0x0,%al
f0111aac:	89 d7                	mov    %edx,%edi
f0111aae:	f3 aa                	rep stos %al,%es:(%edi)
f0111ab0:	83 ec 0c             	sub    $0xc,%esp
f0111ab3:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111ab9:	50                   	push   %eax
f0111aba:	e8 b1 f2 fe ff       	call   f0100d70 <execute_command>
f0111abf:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111ac2:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111ac9:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111ace:	83 ec 08             	sub    $0x8,%esp
f0111ad1:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ad4:	50                   	push   %eax
f0111ad5:	e8 4e 62 ff ff       	call   f0107d28 <virtual_to_physical>
f0111ada:	83 c4 10             	add    $0x10,%esp
f0111add:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111ae0:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111ae5:	83 ec 08             	sub    $0x8,%esp
f0111ae8:	ff 75 dc             	pushl  -0x24(%ebp)
f0111aeb:	50                   	push   %eax
f0111aec:	e8 4e 45 00 00       	call   f011603f <CA>
f0111af1:	83 c4 10             	add    $0x10,%esp
f0111af4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111af7:	74 17                	je     f0111b10 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111af9:	83 ec 04             	sub    $0x4,%esp
f0111afc:	68 1c 92 13 f0       	push   $0xf013921c
f0111b01:	68 53 01 00 00       	push   $0x153
f0111b06:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111b0b:	e8 f5 e6 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111b10:	83 ec 0c             	sub    $0xc,%esp
f0111b13:	68 54 92 13 f0       	push   $0xf0139254
f0111b18:	e8 f1 f1 fe ff       	call   f0100d0e <cprintf>
f0111b1d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111b20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111b25:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111b28:	5b                   	pop    %ebx
f0111b29:	5e                   	pop    %esi
f0111b2a:	5f                   	pop    %edi
f0111b2b:	5d                   	pop    %ebp
f0111b2c:	c3                   	ret    

f0111b2d <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111b2d:	55                   	push   %ebp
f0111b2e:	89 e5                	mov    %esp,%ebp
f0111b30:	57                   	push   %edi
f0111b31:	56                   	push   %esi
f0111b32:	53                   	push   %ebx
f0111b33:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111b39:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111b3f:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f0111b44:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b49:	89 c7                	mov    %eax,%edi
f0111b4b:	89 de                	mov    %ebx,%esi
f0111b4d:	89 d1                	mov    %edx,%ecx
f0111b4f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b51:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111b57:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111b5c:	b0 00                	mov    $0x0,%al
f0111b5e:	89 d7                	mov    %edx,%edi
f0111b60:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111b62:	6a 00                	push   $0x0
f0111b64:	6a 0a                	push   $0xa
f0111b66:	6a 14                	push   $0x14
f0111b68:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111b6e:	50                   	push   %eax
f0111b6f:	e8 ef 72 ff ff       	call   f0108e63 <env_create>
f0111b74:	83 c4 10             	add    $0x10,%esp
f0111b77:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111b7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111b7d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111b80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111b83:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111b86:	8b 40 60             	mov    0x60(%eax),%eax
f0111b89:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111b8c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111b8f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111b92:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111b99:	75 70 20 
f0111b9c:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111ba3:	00 00 00 
f0111ba6:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111bac:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111bb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0111bb6:	89 d7                	mov    %edx,%edi
f0111bb8:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111bba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111bbd:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111bc0:	83 ec 08             	sub    $0x8,%esp
f0111bc3:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111bc9:	52                   	push   %edx
f0111bca:	50                   	push   %eax
f0111bcb:	e8 6f fb 01 00       	call   f013173f <ltostr>
f0111bd0:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111bd3:	83 ec 04             	sub    $0x4,%esp
f0111bd6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111bdc:	50                   	push   %eax
f0111bdd:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111be3:	50                   	push   %eax
f0111be4:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111bea:	50                   	push   %eax
f0111beb:	e8 47 fc 01 00       	call   f0131837 <strcconcat>
f0111bf0:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111bf3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111bfa:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111c01:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111c08:	83 ec 0c             	sub    $0xc,%esp
f0111c0b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c0e:	e8 2d 45 00 00       	call   f0116140 <ClearUserSpace>
f0111c13:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111c16:	83 ec 04             	sub    $0x4,%esp
f0111c19:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111c1f:	50                   	push   %eax
f0111c20:	68 28 94 13 f0       	push   $0xf0139428
f0111c25:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111c2b:	50                   	push   %eax
f0111c2c:	e8 06 fc 01 00       	call   f0131837 <strcconcat>
f0111c31:	83 c4 10             	add    $0x10,%esp
f0111c34:	83 ec 0c             	sub    $0xc,%esp
f0111c37:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111c3d:	50                   	push   %eax
f0111c3e:	e8 2d f1 fe ff       	call   f0100d70 <execute_command>
f0111c43:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111c46:	83 ec 04             	sub    $0x4,%esp
f0111c49:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111c4f:	50                   	push   %eax
f0111c50:	68 33 94 13 f0       	push   $0xf0139433
f0111c55:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111c5b:	50                   	push   %eax
f0111c5c:	e8 d6 fb 01 00       	call   f0131837 <strcconcat>
f0111c61:	83 c4 10             	add    $0x10,%esp
f0111c64:	83 ec 0c             	sub    $0xc,%esp
f0111c67:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111c6d:	50                   	push   %eax
f0111c6e:	e8 fd f0 fe ff       	call   f0100d70 <execute_command>
f0111c73:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111c76:	83 ec 04             	sub    $0x4,%esp
f0111c79:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111c7f:	50                   	push   %eax
f0111c80:	68 3e 94 13 f0       	push   $0xf013943e
f0111c85:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111c8b:	50                   	push   %eax
f0111c8c:	e8 a6 fb 01 00       	call   f0131837 <strcconcat>
f0111c91:	83 c4 10             	add    $0x10,%esp
f0111c94:	83 ec 0c             	sub    $0xc,%esp
f0111c97:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111c9d:	50                   	push   %eax
f0111c9e:	e8 cd f0 fe ff       	call   f0100d70 <execute_command>
f0111ca3:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111ca6:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111cad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111cb0:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111cb3:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111cba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111cbd:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111cc0:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111cc7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111cca:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111ccd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111cd0:	83 ec 08             	sub    $0x8,%esp
f0111cd3:	50                   	push   %eax
f0111cd4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111cd7:	e8 45 44 00 00       	call   f0116121 <GP>
f0111cdc:	83 c4 10             	add    $0x10,%esp
f0111cdf:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111ce2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111ce9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111cf0:	e8 a8 ae ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111cf5:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0111cf8:	83 ec 0c             	sub    $0xc,%esp
f0111cfb:	68 4c 94 13 f0       	push   $0xf013944c
f0111d00:	e8 09 f0 fe ff       	call   f0100d0e <cprintf>
f0111d05:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0111d08:	6a 03                	push   $0x3
f0111d0a:	68 00 00 90 02       	push   $0x2900000
f0111d0f:	68 00 00 80 02       	push   $0x2800000
f0111d14:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d17:	e8 34 6a ff ff       	call   f0108750 <cut_paste_pages>
f0111d1c:	83 c4 10             	add    $0x10,%esp
f0111d1f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111d22:	e8 76 ae ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111d27:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111d2a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111d31:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111d35:	75 08                	jne    f0111d3f <test_cut_paste_pages+0x212>
f0111d37:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111d3a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111d3d:	74 2b                	je     f0111d6a <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111d3f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111d42:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111d45:	83 ec 0c             	sub    $0xc,%esp
f0111d48:	50                   	push   %eax
f0111d49:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111d4c:	68 7c 94 13 f0       	push   $0xf013947c
f0111d51:	68 91 01 00 00       	push   $0x191
f0111d56:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111d5b:	e8 b3 e6 fe ff       	call   f0100413 <_warn>
f0111d60:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111d63:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111d6a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d6e:	74 04                	je     f0111d74 <test_cut_paste_pages+0x247>
f0111d70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111d74:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111d7b:	83 ec 08             	sub    $0x8,%esp
f0111d7e:	6a 00                	push   $0x0
f0111d80:	6a 01                	push   $0x1
f0111d82:	6a 00                	push   $0x0
f0111d84:	68 ff 0f 00 00       	push   $0xfff
f0111d89:	ff 75 bc             	pushl  -0x44(%ebp)
f0111d8c:	6a 01                	push   $0x1
f0111d8e:	68 00 30 00 00       	push   $0x3000
f0111d93:	68 00 00 90 02       	push   $0x2900000
f0111d98:	68 00 00 80 02       	push   $0x2800000
f0111d9d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111da0:	e8 cf 43 00 00       	call   f0116174 <CCP>
f0111da5:	83 c4 30             	add    $0x30,%esp
f0111da8:	83 f8 01             	cmp    $0x1,%eax
f0111dab:	74 21                	je     f0111dce <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111dad:	83 ec 04             	sub    $0x4,%esp
f0111db0:	68 d0 94 13 f0       	push   $0xf01394d0
f0111db5:	68 99 01 00 00       	push   $0x199
f0111dba:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111dbf:	e8 4f e6 fe ff       	call   f0100413 <_warn>
f0111dc4:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111dc7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111dce:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111dd2:	74 04                	je     f0111dd8 <test_cut_paste_pages+0x2ab>
f0111dd4:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111dd8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111ddf:	83 ec 04             	sub    $0x4,%esp
f0111de2:	6a 00                	push   $0x0
f0111de4:	68 00 00 90 02       	push   $0x2900000
f0111de9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dec:	e8 5f 41 00 00       	call   f0115f50 <CB>
f0111df1:	83 c4 10             	add    $0x10,%esp
f0111df4:	85 c0                	test   %eax,%eax
f0111df6:	0f 84 f6 00 00 00    	je     f0111ef2 <test_cut_paste_pages+0x3c5>
f0111dfc:	83 ec 04             	sub    $0x4,%esp
f0111dff:	6a 00                	push   $0x0
f0111e01:	68 00 10 90 02       	push   $0x2901000
f0111e06:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e09:	e8 42 41 00 00       	call   f0115f50 <CB>
f0111e0e:	83 c4 10             	add    $0x10,%esp
f0111e11:	85 c0                	test   %eax,%eax
f0111e13:	0f 84 d9 00 00 00    	je     f0111ef2 <test_cut_paste_pages+0x3c5>
f0111e19:	83 ec 04             	sub    $0x4,%esp
f0111e1c:	6a 00                	push   $0x0
f0111e1e:	68 00 20 90 02       	push   $0x2902000
f0111e23:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e26:	e8 25 41 00 00       	call   f0115f50 <CB>
f0111e2b:	83 c4 10             	add    $0x10,%esp
f0111e2e:	85 c0                	test   %eax,%eax
f0111e30:	0f 84 bc 00 00 00    	je     f0111ef2 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111e36:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111e3d:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111e44:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0111e4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e4e:	8a 00                	mov    (%eax),%al
f0111e50:	3c 61                	cmp    $0x61,%al
f0111e52:	75 12                	jne    f0111e66 <test_cut_paste_pages+0x339>
f0111e54:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e57:	8a 00                	mov    (%eax),%al
f0111e59:	3c 62                	cmp    $0x62,%al
f0111e5b:	75 09                	jne    f0111e66 <test_cut_paste_pages+0x339>
f0111e5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e60:	8a 00                	mov    (%eax),%al
f0111e62:	3c 63                	cmp    $0x63,%al
f0111e64:	74 21                	je     f0111e87 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111e66:	83 ec 04             	sub    $0x4,%esp
f0111e69:	68 1c 95 13 f0       	push   $0xf013951c
f0111e6e:	68 a6 01 00 00       	push   $0x1a6
f0111e73:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111e78:	e8 96 e5 fe ff       	call   f0100413 <_warn>
f0111e7d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111e80:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111e87:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e8b:	74 04                	je     f0111e91 <test_cut_paste_pages+0x364>
f0111e8d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e91:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111e98:	83 ec 04             	sub    $0x4,%esp
f0111e9b:	6a 01                	push   $0x1
f0111e9d:	68 00 10 90 02       	push   $0x2901000
f0111ea2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ea5:	e8 a6 40 00 00       	call   f0115f50 <CB>
f0111eaa:	83 c4 10             	add    $0x10,%esp
f0111ead:	85 c0                	test   %eax,%eax
f0111eaf:	74 41                	je     f0111ef2 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111eb1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111eb4:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111eb7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111eba:	8a 00                	mov    (%eax),%al
f0111ebc:	3c 79                	cmp    $0x79,%al
f0111ebe:	74 21                	je     f0111ee1 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111ec0:	83 ec 04             	sub    $0x4,%esp
f0111ec3:	68 1c 95 13 f0       	push   $0xf013951c
f0111ec8:	68 b1 01 00 00       	push   $0x1b1
f0111ecd:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111ed2:	e8 3c e5 fe ff       	call   f0100413 <_warn>
f0111ed7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111eda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111ee1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ee5:	74 04                	je     f0111eeb <test_cut_paste_pages+0x3be>
f0111ee7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111eeb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111ef2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111ef5:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0111ef8:	6a 02                	push   $0x2
f0111efa:	68 00 f0 bf 02       	push   $0x2bff000
f0111eff:	68 00 10 90 02       	push   $0x2901000
f0111f04:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f07:	e8 44 68 ff ff       	call   f0108750 <cut_paste_pages>
f0111f0c:	83 c4 10             	add    $0x10,%esp
f0111f0f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111f12:	e8 86 ac ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111f17:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111f1a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111f1e:	75 0b                	jne    f0111f2b <test_cut_paste_pages+0x3fe>
f0111f20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f23:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111f26:	83 f8 01             	cmp    $0x1,%eax
f0111f29:	74 2b                	je     f0111f56 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111f2b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f2e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111f31:	83 ec 0c             	sub    $0xc,%esp
f0111f34:	50                   	push   %eax
f0111f35:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111f38:	68 7c 94 13 f0       	push   $0xf013947c
f0111f3d:	68 c2 01 00 00       	push   $0x1c2
f0111f42:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111f47:	e8 c7 e4 fe ff       	call   f0100413 <_warn>
f0111f4c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111f4f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111f56:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f5a:	74 04                	je     f0111f60 <test_cut_paste_pages+0x433>
f0111f5c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111f60:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111f67:	83 ec 08             	sub    $0x8,%esp
f0111f6a:	6a 00                	push   $0x0
f0111f6c:	6a 01                	push   $0x1
f0111f6e:	6a 00                	push   $0x0
f0111f70:	68 ff 0f 00 00       	push   $0xfff
f0111f75:	ff 75 bc             	pushl  -0x44(%ebp)
f0111f78:	6a 01                	push   $0x1
f0111f7a:	68 00 20 00 00       	push   $0x2000
f0111f7f:	68 00 f0 bf 02       	push   $0x2bff000
f0111f84:	68 00 10 90 02       	push   $0x2901000
f0111f89:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f8c:	e8 e3 41 00 00       	call   f0116174 <CCP>
f0111f91:	83 c4 30             	add    $0x30,%esp
f0111f94:	83 f8 01             	cmp    $0x1,%eax
f0111f97:	74 21                	je     f0111fba <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111f99:	83 ec 04             	sub    $0x4,%esp
f0111f9c:	68 d0 94 13 f0       	push   $0xf01394d0
f0111fa1:	68 ca 01 00 00       	push   $0x1ca
f0111fa6:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0111fab:	e8 63 e4 fe ff       	call   f0100413 <_warn>
f0111fb0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111fb3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111fba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fbe:	74 04                	je     f0111fc4 <test_cut_paste_pages+0x497>
f0111fc0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111fc4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111fcb:	83 ec 04             	sub    $0x4,%esp
f0111fce:	6a 00                	push   $0x0
f0111fd0:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111fd5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fd8:	e8 73 3f 00 00       	call   f0115f50 <CB>
f0111fdd:	83 c4 10             	add    $0x10,%esp
f0111fe0:	85 c0                	test   %eax,%eax
f0111fe2:	74 6b                	je     f011204f <test_cut_paste_pages+0x522>
f0111fe4:	83 ec 04             	sub    $0x4,%esp
f0111fe7:	6a 00                	push   $0x0
f0111fe9:	68 ff 0f c0 02       	push   $0x2c00fff
f0111fee:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ff1:	e8 5a 3f 00 00       	call   f0115f50 <CB>
f0111ff6:	83 c4 10             	add    $0x10,%esp
f0111ff9:	85 c0                	test   %eax,%eax
f0111ffb:	74 52                	je     f011204f <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111ffd:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112004:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011200b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011200e:	8a 00                	mov    (%eax),%al
f0112010:	3c 79                	cmp    $0x79,%al
f0112012:	75 09                	jne    f011201d <test_cut_paste_pages+0x4f0>
f0112014:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112017:	8a 00                	mov    (%eax),%al
f0112019:	3c 63                	cmp    $0x63,%al
f011201b:	74 21                	je     f011203e <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011201d:	83 ec 04             	sub    $0x4,%esp
f0112020:	68 1c 95 13 f0       	push   $0xf013951c
f0112025:	68 d6 01 00 00       	push   $0x1d6
f011202a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011202f:	e8 df e3 fe ff       	call   f0100413 <_warn>
f0112034:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112037:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011203e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112042:	74 04                	je     f0112048 <test_cut_paste_pages+0x51b>
f0112044:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112048:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011204f:	83 ec 0c             	sub    $0xc,%esp
f0112052:	68 55 95 13 f0       	push   $0xf0139555
f0112057:	e8 b2 ec fe ff       	call   f0100d0e <cprintf>
f011205c:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011205f:	83 ec 0c             	sub    $0xc,%esp
f0112062:	68 64 95 13 f0       	push   $0xf0139564
f0112067:	e8 a2 ec fe ff       	call   f0100d0e <cprintf>
f011206c:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011206f:	83 ec 04             	sub    $0x4,%esp
f0112072:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112078:	50                   	push   %eax
f0112079:	68 8d 95 13 f0       	push   $0xf013958d
f011207e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112084:	50                   	push   %eax
f0112085:	e8 ad f7 01 00       	call   f0131837 <strcconcat>
f011208a:	83 c4 10             	add    $0x10,%esp
f011208d:	83 ec 0c             	sub    $0xc,%esp
f0112090:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112096:	50                   	push   %eax
f0112097:	e8 d4 ec fe ff       	call   f0100d70 <execute_command>
f011209c:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011209f:	83 ec 04             	sub    $0x4,%esp
f01120a2:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01120a8:	50                   	push   %eax
f01120a9:	68 98 95 13 f0       	push   $0xf0139598
f01120ae:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01120b4:	50                   	push   %eax
f01120b5:	e8 7d f7 01 00       	call   f0131837 <strcconcat>
f01120ba:	83 c4 10             	add    $0x10,%esp
f01120bd:	83 ec 0c             	sub    $0xc,%esp
f01120c0:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01120c6:	50                   	push   %eax
f01120c7:	e8 a4 ec fe ff       	call   f0100d70 <execute_command>
f01120cc:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01120cf:	83 ec 04             	sub    $0x4,%esp
f01120d2:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01120d8:	50                   	push   %eax
f01120d9:	68 a3 95 13 f0       	push   $0xf01395a3
f01120de:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01120e4:	50                   	push   %eax
f01120e5:	e8 4d f7 01 00       	call   f0131837 <strcconcat>
f01120ea:	83 c4 10             	add    $0x10,%esp
f01120ed:	83 ec 0c             	sub    $0xc,%esp
f01120f0:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01120f6:	50                   	push   %eax
f01120f7:	e8 74 ec fe ff       	call   f0100d70 <execute_command>
f01120fc:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01120ff:	83 ec 04             	sub    $0x4,%esp
f0112102:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112108:	50                   	push   %eax
f0112109:	68 ae 95 13 f0       	push   $0xf01395ae
f011210e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112114:	50                   	push   %eax
f0112115:	e8 1d f7 01 00       	call   f0131837 <strcconcat>
f011211a:	83 c4 10             	add    $0x10,%esp
f011211d:	83 ec 0c             	sub    $0xc,%esp
f0112120:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112126:	50                   	push   %eax
f0112127:	e8 44 ec fe ff       	call   f0100d70 <execute_command>
f011212c:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011212f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112136:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112139:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f011213c:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112143:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112146:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112149:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112150:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112153:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112156:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011215d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112160:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112163:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f011216a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011216d:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112170:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112177:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011217a:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011217d:	83 ec 08             	sub    $0x8,%esp
f0112180:	68 00 00 c0 01       	push   $0x1c00000
f0112185:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112188:	e8 94 3f 00 00       	call   f0116121 <GP>
f011218d:	83 c4 10             	add    $0x10,%esp
f0112190:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112193:	83 ec 08             	sub    $0x8,%esp
f0112196:	68 00 00 40 01       	push   $0x1400000
f011219b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011219e:	e8 7e 3f 00 00       	call   f0116121 <GP>
f01121a3:	83 c4 10             	add    $0x10,%esp
f01121a6:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01121a9:	e8 ef a9 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01121ae:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01121b1:	6a 01                	push   $0x1
f01121b3:	68 00 00 40 01       	push   $0x1400000
f01121b8:	68 00 00 c0 01       	push   $0x1c00000
f01121bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121c0:	e8 8b 65 ff ff       	call   f0108750 <cut_paste_pages>
f01121c5:	83 c4 10             	add    $0x10,%esp
f01121c8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01121cb:	e8 cd a9 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01121d0:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01121d3:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01121d7:	75 08                	jne    f01121e1 <test_cut_paste_pages+0x6b4>
f01121d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121dc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01121df:	74 2b                	je     f011220c <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01121e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121e4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01121e7:	83 ec 0c             	sub    $0xc,%esp
f01121ea:	50                   	push   %eax
f01121eb:	ff 75 b4             	pushl  -0x4c(%ebp)
f01121ee:	68 bc 95 13 f0       	push   $0xf01395bc
f01121f3:	68 f9 01 00 00       	push   $0x1f9
f01121f8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01121fd:	e8 11 e2 fe ff       	call   f0100413 <_warn>
f0112202:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112205:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011220c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112210:	74 04                	je     f0112216 <test_cut_paste_pages+0x6e9>
f0112212:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112216:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011221d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112224:	83 ec 08             	sub    $0x8,%esp
f0112227:	6a 00                	push   $0x0
f0112229:	68 ff 0f 00 00       	push   $0xfff
f011222e:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112231:	68 ff 0f 00 00       	push   $0xfff
f0112236:	ff 75 a0             	pushl  -0x60(%ebp)
f0112239:	6a 01                	push   $0x1
f011223b:	68 00 10 00 00       	push   $0x1000
f0112240:	68 00 00 40 01       	push   $0x1400000
f0112245:	68 00 00 c0 01       	push   $0x1c00000
f011224a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011224d:	e8 22 3f 00 00       	call   f0116174 <CCP>
f0112252:	83 c4 30             	add    $0x30,%esp
f0112255:	83 f8 01             	cmp    $0x1,%eax
f0112258:	74 28                	je     f0112282 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011225a:	83 ec 04             	sub    $0x4,%esp
f011225d:	68 d0 94 13 f0       	push   $0xf01394d0
f0112262:	68 02 02 00 00       	push   $0x202
f0112267:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011226c:	e8 a2 e1 fe ff       	call   f0100413 <_warn>
f0112271:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112274:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011227b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112282:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112286:	74 04                	je     f011228c <test_cut_paste_pages+0x75f>
f0112288:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011228c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112293:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112297:	0f 84 92 00 00 00    	je     f011232f <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011229d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01122a4:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01122ab:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01122b2:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01122b9:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01122c0:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01122c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01122ca:	8a 00                	mov    (%eax),%al
f01122cc:	3c 61                	cmp    $0x61,%al
f01122ce:	75 2d                	jne    f01122fd <test_cut_paste_pages+0x7d0>
f01122d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122d3:	8a 00                	mov    (%eax),%al
f01122d5:	3c 78                	cmp    $0x78,%al
f01122d7:	75 24                	jne    f01122fd <test_cut_paste_pages+0x7d0>
f01122d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01122dc:	8a 00                	mov    (%eax),%al
f01122de:	3c 62                	cmp    $0x62,%al
f01122e0:	75 1b                	jne    f01122fd <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01122e2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01122e5:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01122e7:	3c 79                	cmp    $0x79,%al
f01122e9:	75 12                	jne    f01122fd <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01122eb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01122ee:	8a 00                	mov    (%eax),%al
f01122f0:	3c 63                	cmp    $0x63,%al
f01122f2:	75 09                	jne    f01122fd <test_cut_paste_pages+0x7d0>
f01122f4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01122f7:	8a 00                	mov    (%eax),%al
f01122f9:	3c 7a                	cmp    $0x7a,%al
f01122fb:	74 21                	je     f011231e <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01122fd:	83 ec 04             	sub    $0x4,%esp
f0112300:	68 1c 95 13 f0       	push   $0xf013951c
f0112305:	68 14 02 00 00       	push   $0x214
f011230a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011230f:	e8 ff e0 fe ff       	call   f0100413 <_warn>
f0112314:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112317:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011231e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112322:	74 04                	je     f0112328 <test_cut_paste_pages+0x7fb>
f0112324:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112328:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f011232f:	e8 69 a8 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112334:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112337:	6a 03                	push   $0x3
f0112339:	68 00 f0 bf 01       	push   $0x1bff000
f011233e:	68 00 00 40 01       	push   $0x1400000
f0112343:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112346:	e8 05 64 ff ff       	call   f0108750 <cut_paste_pages>
f011234b:	83 c4 10             	add    $0x10,%esp
f011234e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112351:	e8 47 a8 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112356:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112359:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011235d:	75 08                	jne    f0112367 <test_cut_paste_pages+0x83a>
f011235f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112362:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112365:	74 2b                	je     f0112392 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112367:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011236a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011236d:	83 ec 0c             	sub    $0xc,%esp
f0112370:	50                   	push   %eax
f0112371:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112374:	68 bc 95 13 f0       	push   $0xf01395bc
f0112379:	68 23 02 00 00       	push   $0x223
f011237e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112383:	e8 8b e0 fe ff       	call   f0100413 <_warn>
f0112388:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011238b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112392:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112396:	74 04                	je     f011239c <test_cut_paste_pages+0x86f>
f0112398:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011239c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01123a3:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01123aa:	83 ec 04             	sub    $0x4,%esp
f01123ad:	6a 00                	push   $0x0
f01123af:	68 00 00 40 01       	push   $0x1400000
f01123b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123b7:	e8 94 3b 00 00       	call   f0115f50 <CB>
f01123bc:	83 c4 10             	add    $0x10,%esp
f01123bf:	83 f8 01             	cmp    $0x1,%eax
f01123c2:	0f 85 80 00 00 00    	jne    f0112448 <test_cut_paste_pages+0x91b>
f01123c8:	83 ec 04             	sub    $0x4,%esp
f01123cb:	6a 00                	push   $0x0
f01123cd:	68 00 10 40 01       	push   $0x1401000
f01123d2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123d5:	e8 76 3b 00 00       	call   f0115f50 <CB>
f01123da:	83 c4 10             	add    $0x10,%esp
f01123dd:	83 f8 01             	cmp    $0x1,%eax
f01123e0:	75 66                	jne    f0112448 <test_cut_paste_pages+0x91b>
f01123e2:	83 ec 04             	sub    $0x4,%esp
f01123e5:	6a 00                	push   $0x0
f01123e7:	68 00 20 40 01       	push   $0x1402000
f01123ec:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123ef:	e8 5c 3b 00 00       	call   f0115f50 <CB>
f01123f4:	83 c4 10             	add    $0x10,%esp
f01123f7:	83 f8 01             	cmp    $0x1,%eax
f01123fa:	75 4c                	jne    f0112448 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01123fc:	83 ec 04             	sub    $0x4,%esp
f01123ff:	6a 00                	push   $0x0
f0112401:	68 00 f0 bf 01       	push   $0x1bff000
f0112406:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112409:	e8 42 3b 00 00       	call   f0115f50 <CB>
f011240e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112411:	85 c0                	test   %eax,%eax
f0112413:	75 33                	jne    f0112448 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112415:	83 ec 04             	sub    $0x4,%esp
f0112418:	6a 00                	push   $0x0
f011241a:	68 00 00 c0 01       	push   $0x1c00000
f011241f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112422:	e8 29 3b 00 00       	call   f0115f50 <CB>
f0112427:	83 c4 10             	add    $0x10,%esp
f011242a:	83 f8 01             	cmp    $0x1,%eax
f011242d:	75 19                	jne    f0112448 <test_cut_paste_pages+0x91b>
f011242f:	83 ec 04             	sub    $0x4,%esp
f0112432:	6a 00                	push   $0x0
f0112434:	68 00 10 c0 01       	push   $0x1c01000
f0112439:	ff 75 d4             	pushl  -0x2c(%ebp)
f011243c:	e8 0f 3b 00 00       	call   f0115f50 <CB>
f0112441:	83 c4 10             	add    $0x10,%esp
f0112444:	85 c0                	test   %eax,%eax
f0112446:	74 28                	je     f0112470 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112448:	83 ec 04             	sub    $0x4,%esp
f011244b:	68 1c 96 13 f0       	push   $0xf013961c
f0112450:	68 2c 02 00 00       	push   $0x22c
f0112455:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011245a:	e8 b4 df fe ff       	call   f0100413 <_warn>
f011245f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112462:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112469:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112470:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112474:	74 04                	je     f011247a <test_cut_paste_pages+0x94d>
f0112476:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011247a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112481:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112485:	0f 84 99 00 00 00    	je     f0112524 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011248b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112492:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112499:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01124a0:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01124a7:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01124ae:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01124b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124b8:	8a 00                	mov    (%eax),%al
f01124ba:	3c 61                	cmp    $0x61,%al
f01124bc:	75 2d                	jne    f01124eb <test_cut_paste_pages+0x9be>
f01124be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124c1:	8a 00                	mov    (%eax),%al
f01124c3:	3c 78                	cmp    $0x78,%al
f01124c5:	75 24                	jne    f01124eb <test_cut_paste_pages+0x9be>
f01124c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124ca:	8a 00                	mov    (%eax),%al
f01124cc:	3c 62                	cmp    $0x62,%al
f01124ce:	75 1b                	jne    f01124eb <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01124d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01124d3:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01124d5:	3c 79                	cmp    $0x79,%al
f01124d7:	75 12                	jne    f01124eb <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01124d9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124dc:	8a 00                	mov    (%eax),%al
f01124de:	3c 63                	cmp    $0x63,%al
f01124e0:	75 09                	jne    f01124eb <test_cut_paste_pages+0x9be>
f01124e2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01124e5:	8a 00                	mov    (%eax),%al
f01124e7:	3c 7a                	cmp    $0x7a,%al
f01124e9:	74 28                	je     f0112513 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01124eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f01124f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01124f9:	83 ec 04             	sub    $0x4,%esp
f01124fc:	68 1c 95 13 f0       	push   $0xf013951c
f0112501:	68 40 02 00 00       	push   $0x240
f0112506:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011250b:	e8 03 df fe ff       	call   f0100413 <_warn>
f0112510:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112513:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112517:	74 04                	je     f011251d <test_cut_paste_pages+0x9f0>
f0112519:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011251d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112524:	83 ec 0c             	sub    $0xc,%esp
f0112527:	68 55 96 13 f0       	push   $0xf0139655
f011252c:	e8 dd e7 fe ff       	call   f0100d0e <cprintf>
f0112531:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112534:	83 ec 08             	sub    $0x8,%esp
f0112537:	ff 75 e4             	pushl  -0x1c(%ebp)
f011253a:	68 64 96 13 f0       	push   $0xf0139664
f011253f:	e8 ca e7 fe ff       	call   f0100d0e <cprintf>
f0112544:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112547:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011254b:	75 10                	jne    f011255d <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f011254d:	83 ec 0c             	sub    $0xc,%esp
f0112550:	68 98 96 13 f0       	push   $0xf0139698
f0112555:	e8 b4 e7 fe ff       	call   f0100d0e <cprintf>
f011255a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011255d:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0112562:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112565:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112568:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011256b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112570:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112573:	5b                   	pop    %ebx
f0112574:	5e                   	pop    %esi
f0112575:	5f                   	pop    %edi
f0112576:	5d                   	pop    %ebp
f0112577:	c3                   	ret    

f0112578 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112578:	55                   	push   %ebp
f0112579:	89 e5                	mov    %esp,%ebp
f011257b:	57                   	push   %edi
f011257c:	56                   	push   %esi
f011257d:	53                   	push   %ebx
f011257e:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112584:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011258a:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f011258f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112594:	89 c7                	mov    %eax,%edi
f0112596:	89 de                	mov    %ebx,%esi
f0112598:	89 d1                	mov    %edx,%ecx
f011259a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011259c:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01125a2:	b9 23 00 00 00       	mov    $0x23,%ecx
f01125a7:	b0 00                	mov    $0x0,%al
f01125a9:	89 d7                	mov    %edx,%edi
f01125ab:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01125ad:	6a 00                	push   $0x0
f01125af:	6a 0a                	push   $0xa
f01125b1:	6a 14                	push   $0x14
f01125b3:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01125b9:	50                   	push   %eax
f01125ba:	e8 a4 68 ff ff       	call   f0108e63 <env_create>
f01125bf:	83 c4 10             	add    $0x10,%esp
f01125c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01125c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01125c8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01125cb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01125ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01125d1:	8b 40 60             	mov    0x60(%eax),%eax
f01125d4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01125da:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01125e0:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01125e3:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01125ea:	75 70 20 
f01125ed:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f01125f4:	00 00 00 
f01125f7:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01125fd:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112602:	b8 00 00 00 00       	mov    $0x0,%eax
f0112607:	89 d7                	mov    %edx,%edi
f0112609:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011260b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011260e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112611:	83 ec 08             	sub    $0x8,%esp
f0112614:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011261a:	52                   	push   %edx
f011261b:	50                   	push   %eax
f011261c:	e8 1e f1 01 00       	call   f013173f <ltostr>
f0112621:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112624:	83 ec 04             	sub    $0x4,%esp
f0112627:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011262d:	50                   	push   %eax
f011262e:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112634:	50                   	push   %eax
f0112635:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f011263b:	50                   	push   %eax
f011263c:	e8 f6 f1 01 00       	call   f0131837 <strcconcat>
f0112641:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112644:	83 ec 0c             	sub    $0xc,%esp
f0112647:	ff 75 d4             	pushl  -0x2c(%ebp)
f011264a:	e8 f1 3a 00 00       	call   f0116140 <ClearUserSpace>
f011264f:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112652:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112659:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112660:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112667:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f011266e:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112675:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f011267c:	83 ec 0c             	sub    $0xc,%esp
f011267f:	68 0c 97 13 f0       	push   $0xf013970c
f0112684:	e8 85 e6 fe ff       	call   f0100d0e <cprintf>
f0112689:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011268c:	83 ec 04             	sub    $0x4,%esp
f011268f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112695:	50                   	push   %eax
f0112696:	68 42 97 13 f0       	push   $0xf0139742
f011269b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01126a1:	50                   	push   %eax
f01126a2:	e8 90 f1 01 00       	call   f0131837 <strcconcat>
f01126a7:	83 c4 10             	add    $0x10,%esp
f01126aa:	83 ec 0c             	sub    $0xc,%esp
f01126ad:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01126b3:	50                   	push   %eax
f01126b4:	e8 b7 e6 fe ff       	call   f0100d70 <execute_command>
f01126b9:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01126bc:	83 ec 04             	sub    $0x4,%esp
f01126bf:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01126c5:	50                   	push   %eax
f01126c6:	68 47 97 13 f0       	push   $0xf0139747
f01126cb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01126d1:	50                   	push   %eax
f01126d2:	e8 60 f1 01 00       	call   f0131837 <strcconcat>
f01126d7:	83 c4 10             	add    $0x10,%esp
f01126da:	83 ec 0c             	sub    $0xc,%esp
f01126dd:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01126e3:	50                   	push   %eax
f01126e4:	e8 87 e6 fe ff       	call   f0100d70 <execute_command>
f01126e9:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01126ec:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01126f2:	bb 4d 9a 13 f0       	mov    $0xf0139a4d,%ebx
f01126f7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126fc:	89 c7                	mov    %eax,%edi
f01126fe:	89 de                	mov    %ebx,%esi
f0112700:	89 d1                	mov    %edx,%ecx
f0112702:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112704:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011270a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011270f:	b0 00                	mov    $0x0,%al
f0112711:	89 d7                	mov    %edx,%edi
f0112713:	f3 aa                	rep stos %al,%es:(%edi)
f0112715:	83 ec 0c             	sub    $0xc,%esp
f0112718:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011271e:	50                   	push   %eax
f011271f:	e8 4c e6 fe ff       	call   f0100d70 <execute_command>
f0112724:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112727:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011272d:	bb b1 9a 13 f0       	mov    $0xf0139ab1,%ebx
f0112732:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112737:	89 c7                	mov    %eax,%edi
f0112739:	89 de                	mov    %ebx,%esi
f011273b:	89 d1                	mov    %edx,%ecx
f011273d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011273f:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112745:	b9 55 00 00 00       	mov    $0x55,%ecx
f011274a:	b0 00                	mov    $0x0,%al
f011274c:	89 d7                	mov    %edx,%edi
f011274e:	f3 aa                	rep stos %al,%es:(%edi)
f0112750:	83 ec 0c             	sub    $0xc,%esp
f0112753:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112759:	50                   	push   %eax
f011275a:	e8 11 e6 fe ff       	call   f0100d70 <execute_command>
f011275f:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112762:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112768:	bb 15 9b 13 f0       	mov    $0xf0139b15,%ebx
f011276d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112772:	89 c7                	mov    %eax,%edi
f0112774:	89 de                	mov    %ebx,%esi
f0112776:	89 d1                	mov    %edx,%ecx
f0112778:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011277a:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112780:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112785:	b0 00                	mov    $0x0,%al
f0112787:	89 d7                	mov    %edx,%edi
f0112789:	f3 aa                	rep stos %al,%es:(%edi)
f011278b:	83 ec 0c             	sub    $0xc,%esp
f011278e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112794:	50                   	push   %eax
f0112795:	e8 d6 e5 fe ff       	call   f0100d70 <execute_command>
f011279a:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011279d:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01127a3:	bb 79 9b 13 f0       	mov    $0xf0139b79,%ebx
f01127a8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127ad:	89 c7                	mov    %eax,%edi
f01127af:	89 de                	mov    %ebx,%esi
f01127b1:	89 d1                	mov    %edx,%ecx
f01127b3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127b5:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01127bb:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127c0:	b0 00                	mov    $0x0,%al
f01127c2:	89 d7                	mov    %edx,%edi
f01127c4:	f3 aa                	rep stos %al,%es:(%edi)
f01127c6:	83 ec 0c             	sub    $0xc,%esp
f01127c9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01127cf:	50                   	push   %eax
f01127d0:	e8 9b e5 fe ff       	call   f0100d70 <execute_command>
f01127d5:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f01127d8:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01127de:	bb dd 9b 13 f0       	mov    $0xf0139bdd,%ebx
f01127e3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127e8:	89 c7                	mov    %eax,%edi
f01127ea:	89 de                	mov    %ebx,%esi
f01127ec:	89 d1                	mov    %edx,%ecx
f01127ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127f0:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01127f6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127fb:	b0 00                	mov    $0x0,%al
f01127fd:	89 d7                	mov    %edx,%edi
f01127ff:	f3 aa                	rep stos %al,%es:(%edi)
f0112801:	83 ec 0c             	sub    $0xc,%esp
f0112804:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011280a:	50                   	push   %eax
f011280b:	e8 60 e5 fe ff       	call   f0100d70 <execute_command>
f0112810:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112813:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112819:	bb 41 9c 13 f0       	mov    $0xf0139c41,%ebx
f011281e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112823:	89 c7                	mov    %eax,%edi
f0112825:	89 de                	mov    %ebx,%esi
f0112827:	89 d1                	mov    %edx,%ecx
f0112829:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011282b:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112831:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112836:	b0 00                	mov    $0x0,%al
f0112838:	89 d7                	mov    %edx,%edi
f011283a:	f3 aa                	rep stos %al,%es:(%edi)
f011283c:	83 ec 0c             	sub    $0xc,%esp
f011283f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112845:	50                   	push   %eax
f0112846:	e8 25 e5 fe ff       	call   f0100d70 <execute_command>
f011284b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f011284e:	83 ec 04             	sub    $0x4,%esp
f0112851:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112857:	50                   	push   %eax
f0112858:	68 4f 97 13 f0       	push   $0xf013974f
f011285d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112863:	50                   	push   %eax
f0112864:	e8 ce ef 01 00       	call   f0131837 <strcconcat>
f0112869:	83 c4 10             	add    $0x10,%esp
f011286c:	83 ec 0c             	sub    $0xc,%esp
f011286f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112875:	50                   	push   %eax
f0112876:	e8 f5 e4 fe ff       	call   f0100d70 <execute_command>
f011287b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f011287e:	83 ec 04             	sub    $0x4,%esp
f0112881:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112887:	50                   	push   %eax
f0112888:	68 59 97 13 f0       	push   $0xf0139759
f011288d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112893:	50                   	push   %eax
f0112894:	e8 9e ef 01 00       	call   f0131837 <strcconcat>
f0112899:	83 c4 10             	add    $0x10,%esp
f011289c:	83 ec 0c             	sub    $0xc,%esp
f011289f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01128a5:	50                   	push   %eax
f01128a6:	e8 c5 e4 fe ff       	call   f0100d70 <execute_command>
f01128ab:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01128ae:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01128b4:	bb a5 9c 13 f0       	mov    $0xf0139ca5,%ebx
f01128b9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128be:	89 c7                	mov    %eax,%edi
f01128c0:	89 de                	mov    %ebx,%esi
f01128c2:	89 d1                	mov    %edx,%ecx
f01128c4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128c6:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01128cc:	b9 55 00 00 00       	mov    $0x55,%ecx
f01128d1:	b0 00                	mov    $0x0,%al
f01128d3:	89 d7                	mov    %edx,%edi
f01128d5:	f3 aa                	rep stos %al,%es:(%edi)
f01128d7:	83 ec 0c             	sub    $0xc,%esp
f01128da:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01128e0:	50                   	push   %eax
f01128e1:	e8 8a e4 fe ff       	call   f0100d70 <execute_command>
f01128e6:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01128e9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01128ef:	bb 09 9d 13 f0       	mov    $0xf0139d09,%ebx
f01128f4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128f9:	89 c7                	mov    %eax,%edi
f01128fb:	89 de                	mov    %ebx,%esi
f01128fd:	89 d1                	mov    %edx,%ecx
f01128ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112901:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112907:	b9 55 00 00 00       	mov    $0x55,%ecx
f011290c:	b0 00                	mov    $0x0,%al
f011290e:	89 d7                	mov    %edx,%edi
f0112910:	f3 aa                	rep stos %al,%es:(%edi)
f0112912:	83 ec 0c             	sub    $0xc,%esp
f0112915:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011291b:	50                   	push   %eax
f011291c:	e8 4f e4 fe ff       	call   f0100d70 <execute_command>
f0112921:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112924:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011292a:	bb 6d 9d 13 f0       	mov    $0xf0139d6d,%ebx
f011292f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112934:	89 c7                	mov    %eax,%edi
f0112936:	89 de                	mov    %ebx,%esi
f0112938:	89 d1                	mov    %edx,%ecx
f011293a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011293c:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112942:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112947:	b0 00                	mov    $0x0,%al
f0112949:	89 d7                	mov    %edx,%edi
f011294b:	f3 aa                	rep stos %al,%es:(%edi)
f011294d:	83 ec 0c             	sub    $0xc,%esp
f0112950:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112956:	50                   	push   %eax
f0112957:	e8 14 e4 fe ff       	call   f0100d70 <execute_command>
f011295c:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f011295f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112966:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f011296d:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112974:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f011297b:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112982:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112989:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112990:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112997:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011299e:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01129a5:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01129ac:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01129b3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01129b6:	8a 00                	mov    (%eax),%al
f01129b8:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01129be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129c1:	8a 00                	mov    (%eax),%al
f01129c3:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01129c9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01129cc:	8a 00                	mov    (%eax),%al
f01129ce:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01129d4:	e8 c4 a1 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01129d9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01129dc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01129df:	89 d0                	mov    %edx,%eax
f01129e1:	01 c0                	add    %eax,%eax
f01129e3:	01 d0                	add    %edx,%eax
f01129e5:	01 c0                	add    %eax,%eax
f01129e7:	50                   	push   %eax
f01129e8:	68 00 00 10 00       	push   $0x100000
f01129ed:	6a 00                	push   $0x0
f01129ef:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129f2:	e8 d7 5e ff ff       	call   f01088ce <copy_paste_chunk>
f01129f7:	83 c4 10             	add    $0x10,%esp
f01129fa:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01129fd:	e8 9b a1 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112a02:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112a05:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112a0c:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112a10:	75 08                	jne    f0112a1a <test_copy_paste_chunk+0x4a2>
f0112a12:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a15:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112a18:	74 2b                	je     f0112a45 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112a1a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a1d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112a20:	83 ec 0c             	sub    $0xc,%esp
f0112a23:	50                   	push   %eax
f0112a24:	ff 75 88             	pushl  -0x78(%ebp)
f0112a27:	68 68 97 13 f0       	push   $0xf0139768
f0112a2c:	68 93 02 00 00       	push   $0x293
f0112a31:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112a36:	e8 d8 d9 fe ff       	call   f0100413 <_warn>
f0112a3b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112a3e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112a45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a49:	74 04                	je     f0112a4f <test_copy_paste_chunk+0x4d7>
f0112a4b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112a4f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112a56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a59:	8a 00                	mov    (%eax),%al
f0112a5b:	3c 61                	cmp    $0x61,%al
f0112a5d:	75 75                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a62:	8a 00                	mov    (%eax),%al
f0112a64:	3c 78                	cmp    $0x78,%al
f0112a66:	75 6c                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a68:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a6b:	8a 00                	mov    (%eax),%al
f0112a6d:	3c 62                	cmp    $0x62,%al
f0112a6f:	75 63                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a71:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112a74:	8a 00                	mov    (%eax),%al
f0112a76:	3c 79                	cmp    $0x79,%al
f0112a78:	75 5a                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a7a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a7d:	8a 00                	mov    (%eax),%al
f0112a7f:	3c 63                	cmp    $0x63,%al
f0112a81:	75 51                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a83:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a86:	8a 00                	mov    (%eax),%al
f0112a88:	3c 7a                	cmp    $0x7a,%al
f0112a8a:	75 48                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112a8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a8f:	8a 00                	mov    (%eax),%al
f0112a91:	3c 64                	cmp    $0x64,%al
f0112a93:	75 3f                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112a95:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112a98:	8a 10                	mov    (%eax),%dl
f0112a9a:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112aa0:	38 c2                	cmp    %al,%dl
f0112aa2:	75 30                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112aa4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112aa7:	8a 00                	mov    (%eax),%al
f0112aa9:	3c 65                	cmp    $0x65,%al
f0112aab:	75 27                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112aad:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ab0:	8a 10                	mov    (%eax),%dl
f0112ab2:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112ab8:	38 c2                	cmp    %al,%dl
f0112aba:	75 18                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112abc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112abf:	8a 00                	mov    (%eax),%al
f0112ac1:	3c 66                	cmp    $0x66,%al
f0112ac3:	75 0f                	jne    f0112ad4 <test_copy_paste_chunk+0x55c>
f0112ac5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112ac8:	8a 10                	mov    (%eax),%dl
f0112aca:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112ad0:	38 c2                	cmp    %al,%dl
f0112ad2:	74 21                	je     f0112af5 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112ad4:	83 ec 04             	sub    $0x4,%esp
f0112ad7:	68 cc 97 13 f0       	push   $0xf01397cc
f0112adc:	68 9c 02 00 00       	push   $0x29c
f0112ae1:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112ae6:	e8 28 d9 fe ff       	call   f0100413 <_warn>
f0112aeb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112aee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112af5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112af9:	74 04                	je     f0112aff <test_copy_paste_chunk+0x587>
f0112afb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112aff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112b06:	83 ec 0c             	sub    $0xc,%esp
f0112b09:	68 06 98 13 f0       	push   $0xf0139806
f0112b0e:	e8 fb e1 fe ff       	call   f0100d0e <cprintf>
f0112b13:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112b16:	83 ec 0c             	sub    $0xc,%esp
f0112b19:	68 18 98 13 f0       	push   $0xf0139818
f0112b1e:	e8 eb e1 fe ff       	call   f0100d0e <cprintf>
f0112b23:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112b26:	83 ec 04             	sub    $0x4,%esp
f0112b29:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b2f:	50                   	push   %eax
f0112b30:	68 4e 98 13 f0       	push   $0xf013984e
f0112b35:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b3b:	50                   	push   %eax
f0112b3c:	e8 f6 ec 01 00       	call   f0131837 <strcconcat>
f0112b41:	83 c4 10             	add    $0x10,%esp
f0112b44:	83 ec 0c             	sub    $0xc,%esp
f0112b47:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b4d:	50                   	push   %eax
f0112b4e:	e8 1d e2 fe ff       	call   f0100d70 <execute_command>
f0112b53:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112b56:	83 ec 04             	sub    $0x4,%esp
f0112b59:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b5f:	50                   	push   %eax
f0112b60:	68 58 98 13 f0       	push   $0xf0139858
f0112b65:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b6b:	50                   	push   %eax
f0112b6c:	e8 c6 ec 01 00       	call   f0131837 <strcconcat>
f0112b71:	83 c4 10             	add    $0x10,%esp
f0112b74:	83 ec 0c             	sub    $0xc,%esp
f0112b77:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b7d:	50                   	push   %eax
f0112b7e:	e8 ed e1 fe ff       	call   f0100d70 <execute_command>
f0112b83:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112b86:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b8c:	bb d1 9d 13 f0       	mov    $0xf0139dd1,%ebx
f0112b91:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b96:	89 c7                	mov    %eax,%edi
f0112b98:	89 de                	mov    %ebx,%esi
f0112b9a:	89 d1                	mov    %edx,%ecx
f0112b9c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b9e:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112ba4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ba9:	b0 00                	mov    $0x0,%al
f0112bab:	89 d7                	mov    %edx,%edi
f0112bad:	f3 aa                	rep stos %al,%es:(%edi)
f0112baf:	83 ec 0c             	sub    $0xc,%esp
f0112bb2:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112bb8:	50                   	push   %eax
f0112bb9:	e8 b2 e1 fe ff       	call   f0100d70 <execute_command>
f0112bbe:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112bc1:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112bc7:	bb 35 9e 13 f0       	mov    $0xf0139e35,%ebx
f0112bcc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bd1:	89 c7                	mov    %eax,%edi
f0112bd3:	89 de                	mov    %ebx,%esi
f0112bd5:	89 d1                	mov    %edx,%ecx
f0112bd7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bd9:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112bdf:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112be4:	b0 00                	mov    $0x0,%al
f0112be6:	89 d7                	mov    %edx,%edi
f0112be8:	f3 aa                	rep stos %al,%es:(%edi)
f0112bea:	83 ec 0c             	sub    $0xc,%esp
f0112bed:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112bf3:	50                   	push   %eax
f0112bf4:	e8 77 e1 fe ff       	call   f0100d70 <execute_command>
f0112bf9:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112bfc:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112c02:	bb 99 9e 13 f0       	mov    $0xf0139e99,%ebx
f0112c07:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c0c:	89 c7                	mov    %eax,%edi
f0112c0e:	89 de                	mov    %ebx,%esi
f0112c10:	89 d1                	mov    %edx,%ecx
f0112c12:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c14:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112c1a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c1f:	b0 00                	mov    $0x0,%al
f0112c21:	89 d7                	mov    %edx,%edi
f0112c23:	f3 aa                	rep stos %al,%es:(%edi)
f0112c25:	83 ec 0c             	sub    $0xc,%esp
f0112c28:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112c2e:	50                   	push   %eax
f0112c2f:	e8 3c e1 fe ff       	call   f0100d70 <execute_command>
f0112c34:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112c37:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112c3d:	bb fd 9e 13 f0       	mov    $0xf0139efd,%ebx
f0112c42:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c47:	89 c7                	mov    %eax,%edi
f0112c49:	89 de                	mov    %ebx,%esi
f0112c4b:	89 d1                	mov    %edx,%ecx
f0112c4d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c4f:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112c55:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c5a:	b0 00                	mov    $0x0,%al
f0112c5c:	89 d7                	mov    %edx,%edi
f0112c5e:	f3 aa                	rep stos %al,%es:(%edi)
f0112c60:	83 ec 0c             	sub    $0xc,%esp
f0112c63:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112c69:	50                   	push   %eax
f0112c6a:	e8 01 e1 fe ff       	call   f0100d70 <execute_command>
f0112c6f:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112c72:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c78:	bb 61 9f 13 f0       	mov    $0xf0139f61,%ebx
f0112c7d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c82:	89 c7                	mov    %eax,%edi
f0112c84:	89 de                	mov    %ebx,%esi
f0112c86:	89 d1                	mov    %edx,%ecx
f0112c88:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c8a:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112c90:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c95:	b0 00                	mov    $0x0,%al
f0112c97:	89 d7                	mov    %edx,%edi
f0112c99:	f3 aa                	rep stos %al,%es:(%edi)
f0112c9b:	83 ec 0c             	sub    $0xc,%esp
f0112c9e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112ca4:	50                   	push   %eax
f0112ca5:	e8 c6 e0 fe ff       	call   f0100d70 <execute_command>
f0112caa:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112cad:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112cb3:	bb c5 9f 13 f0       	mov    $0xf0139fc5,%ebx
f0112cb8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cbd:	89 c7                	mov    %eax,%edi
f0112cbf:	89 de                	mov    %ebx,%esi
f0112cc1:	89 d1                	mov    %edx,%ecx
f0112cc3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cc5:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112ccb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cd0:	b0 00                	mov    $0x0,%al
f0112cd2:	89 d7                	mov    %edx,%edi
f0112cd4:	f3 aa                	rep stos %al,%es:(%edi)
f0112cd6:	83 ec 0c             	sub    $0xc,%esp
f0112cd9:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112cdf:	50                   	push   %eax
f0112ce0:	e8 8b e0 fe ff       	call   f0100d70 <execute_command>
f0112ce5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112ce8:	83 ec 04             	sub    $0x4,%esp
f0112ceb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cf1:	50                   	push   %eax
f0112cf2:	68 62 98 13 f0       	push   $0xf0139862
f0112cf7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112cfd:	50                   	push   %eax
f0112cfe:	e8 34 eb 01 00       	call   f0131837 <strcconcat>
f0112d03:	83 c4 10             	add    $0x10,%esp
f0112d06:	83 ec 0c             	sub    $0xc,%esp
f0112d09:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d0f:	50                   	push   %eax
f0112d10:	e8 5b e0 fe ff       	call   f0100d70 <execute_command>
f0112d15:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112d18:	83 ec 04             	sub    $0x4,%esp
f0112d1b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d21:	50                   	push   %eax
f0112d22:	68 6c 98 13 f0       	push   $0xf013986c
f0112d27:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d2d:	50                   	push   %eax
f0112d2e:	e8 04 eb 01 00       	call   f0131837 <strcconcat>
f0112d33:	83 c4 10             	add    $0x10,%esp
f0112d36:	83 ec 0c             	sub    $0xc,%esp
f0112d39:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d3f:	50                   	push   %eax
f0112d40:	e8 2b e0 fe ff       	call   f0100d70 <execute_command>
f0112d45:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0112d48:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d4e:	bb 29 a0 13 f0       	mov    $0xf013a029,%ebx
f0112d53:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d58:	89 c7                	mov    %eax,%edi
f0112d5a:	89 de                	mov    %ebx,%esi
f0112d5c:	89 d1                	mov    %edx,%ecx
f0112d5e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d60:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112d66:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d6b:	b0 00                	mov    $0x0,%al
f0112d6d:	89 d7                	mov    %edx,%edi
f0112d6f:	f3 aa                	rep stos %al,%es:(%edi)
f0112d71:	83 ec 0c             	sub    $0xc,%esp
f0112d74:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d7a:	50                   	push   %eax
f0112d7b:	e8 f0 df fe ff       	call   f0100d70 <execute_command>
f0112d80:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112d83:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d89:	bb 8d a0 13 f0       	mov    $0xf013a08d,%ebx
f0112d8e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d93:	89 c7                	mov    %eax,%edi
f0112d95:	89 de                	mov    %ebx,%esi
f0112d97:	89 d1                	mov    %edx,%ecx
f0112d99:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d9b:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112da1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112da6:	b0 00                	mov    $0x0,%al
f0112da8:	89 d7                	mov    %edx,%edi
f0112daa:	f3 aa                	rep stos %al,%es:(%edi)
f0112dac:	83 ec 0c             	sub    $0xc,%esp
f0112daf:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112db5:	50                   	push   %eax
f0112db6:	e8 b5 df fe ff       	call   f0100d70 <execute_command>
f0112dbb:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112dbe:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112dc4:	bb f1 a0 13 f0       	mov    $0xf013a0f1,%ebx
f0112dc9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112dce:	89 c7                	mov    %eax,%edi
f0112dd0:	89 de                	mov    %ebx,%esi
f0112dd2:	89 d1                	mov    %edx,%ecx
f0112dd4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dd6:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112ddc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112de1:	b0 00                	mov    $0x0,%al
f0112de3:	89 d7                	mov    %edx,%edi
f0112de5:	f3 aa                	rep stos %al,%es:(%edi)
f0112de7:	83 ec 0c             	sub    $0xc,%esp
f0112dea:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112df0:	50                   	push   %eax
f0112df1:	e8 7a df fe ff       	call   f0100d70 <execute_command>
f0112df6:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112df9:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112e00:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112e07:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112e0e:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112e15:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112e1c:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112e23:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112e2a:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112e31:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112e38:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112e3f:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0112e46:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0112e4d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e50:	8a 00                	mov    (%eax),%al
f0112e52:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e58:	e8 40 9d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112e5d:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112e60:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e63:	89 d0                	mov    %edx,%eax
f0112e65:	01 c0                	add    %eax,%eax
f0112e67:	01 d0                	add    %edx,%eax
f0112e69:	01 c0                	add    %eax,%eax
f0112e6b:	50                   	push   %eax
f0112e6c:	68 00 00 40 00       	push   $0x400000
f0112e71:	68 00 00 20 00       	push   $0x200000
f0112e76:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e79:	e8 50 5a ff ff       	call   f01088ce <copy_paste_chunk>
f0112e7e:	83 c4 10             	add    $0x10,%esp
f0112e81:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e84:	e8 14 9d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112e89:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112e8c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112e93:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112e97:	75 08                	jne    f0112ea1 <test_copy_paste_chunk+0x929>
f0112e99:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e9c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112e9f:	74 2b                	je     f0112ecc <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ea1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ea4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112ea7:	83 ec 0c             	sub    $0xc,%esp
f0112eaa:	50                   	push   %eax
f0112eab:	ff 75 80             	pushl  -0x80(%ebp)
f0112eae:	68 78 98 13 f0       	push   $0xf0139878
f0112eb3:	68 cc 02 00 00       	push   $0x2cc
f0112eb8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112ebd:	e8 51 d5 fe ff       	call   f0100413 <_warn>
f0112ec2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ec5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112ecc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ed0:	74 04                	je     f0112ed6 <test_copy_paste_chunk+0x95e>
f0112ed2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ed6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112edd:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112ee4:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112ee7:	83 ec 08             	sub    $0x8,%esp
f0112eea:	6a 01                	push   $0x1
f0112eec:	6a 07                	push   $0x7
f0112eee:	6a 07                	push   $0x7
f0112ef0:	6a 07                	push   $0x7
f0112ef2:	6a 07                	push   $0x7
f0112ef4:	6a 01                	push   $0x1
f0112ef6:	68 00 20 00 00       	push   $0x2000
f0112efb:	68 00 00 40 00       	push   $0x400000
f0112f00:	68 00 00 20 00       	push   $0x200000
f0112f05:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f08:	e8 67 32 00 00       	call   f0116174 <CCP>
f0112f0d:	83 c4 30             	add    $0x30,%esp
f0112f10:	83 f8 01             	cmp    $0x1,%eax
f0112f13:	74 2b                	je     f0112f40 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112f15:	83 ec 04             	sub    $0x4,%esp
f0112f18:	68 cc 98 13 f0       	push   $0xf01398cc
f0112f1d:	68 d5 02 00 00       	push   $0x2d5
f0112f22:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112f27:	e8 e7 d4 fe ff       	call   f0100413 <_warn>
f0112f2c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f2f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112f36:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112f3d:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112f40:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f44:	74 04                	je     f0112f4a <test_copy_paste_chunk+0x9d2>
f0112f46:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f4a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112f51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f54:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112f57:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f5a:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112f5d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112f60:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112f63:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f66:	8a 00                	mov    (%eax),%al
f0112f68:	3c 61                	cmp    $0x61,%al
f0112f6a:	75 69                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112f6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f6f:	8a 00                	mov    (%eax),%al
f0112f71:	3c 61                	cmp    $0x61,%al
f0112f73:	75 60                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112f75:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f78:	8a 00                	mov    (%eax),%al
f0112f7a:	3c 79                	cmp    $0x79,%al
f0112f7c:	75 57                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112f7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f81:	8a 00                	mov    (%eax),%al
f0112f83:	3c 62                	cmp    $0x62,%al
f0112f85:	75 4e                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112f87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112f8a:	8a 00                	mov    (%eax),%al
f0112f8c:	3c 63                	cmp    $0x63,%al
f0112f8e:	75 45                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112f90:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f93:	8a 00                	mov    (%eax),%al
f0112f95:	3c 7a                	cmp    $0x7a,%al
f0112f97:	75 3c                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112f99:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112f9c:	8a 00                	mov    (%eax),%al
f0112f9e:	3c 77                	cmp    $0x77,%al
f0112fa0:	75 33                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112fa2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112fa5:	8a 00                	mov    (%eax),%al
f0112fa7:	3c 64                	cmp    $0x64,%al
f0112fa9:	75 2a                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112fab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112fae:	8a 00                	mov    (%eax),%al
f0112fb0:	3c 65                	cmp    $0x65,%al
f0112fb2:	75 21                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112fb4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112fb7:	8a 00                	mov    (%eax),%al
f0112fb9:	3c 65                	cmp    $0x65,%al
f0112fbb:	75 18                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112fbd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112fc0:	8a 00                	mov    (%eax),%al
f0112fc2:	3c 66                	cmp    $0x66,%al
f0112fc4:	75 0f                	jne    f0112fd5 <test_copy_paste_chunk+0xa5d>
f0112fc6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112fc9:	8a 10                	mov    (%eax),%dl
f0112fcb:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112fd1:	38 c2                	cmp    %al,%dl
f0112fd3:	74 21                	je     f0112ff6 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112fd5:	83 ec 04             	sub    $0x4,%esp
f0112fd8:	68 cc 97 13 f0       	push   $0xf01397cc
f0112fdd:	68 e3 02 00 00       	push   $0x2e3
f0112fe2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0112fe7:	e8 27 d4 fe ff       	call   f0100413 <_warn>
f0112fec:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112fef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ff6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ffa:	74 04                	je     f0113000 <test_copy_paste_chunk+0xa88>
f0112ffc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113000:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113007:	8b 45 98             	mov    -0x68(%ebp),%eax
f011300a:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011300d:	e8 8b 9b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113012:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113015:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113018:	89 c2                	mov    %eax,%edx
f011301a:	01 d2                	add    %edx,%edx
f011301c:	01 d0                	add    %edx,%eax
f011301e:	50                   	push   %eax
f011301f:	68 00 08 20 00       	push   $0x200800
f0113024:	68 00 08 40 00       	push   $0x400800
f0113029:	ff 75 d4             	pushl  -0x2c(%ebp)
f011302c:	e8 9d 58 ff ff       	call   f01088ce <copy_paste_chunk>
f0113031:	83 c4 10             	add    $0x10,%esp
f0113034:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113037:	e8 61 9b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011303c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011303f:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113043:	75 08                	jne    f011304d <test_copy_paste_chunk+0xad5>
f0113045:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113048:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011304b:	74 2b                	je     f0113078 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011304d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113050:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113053:	83 ec 0c             	sub    $0xc,%esp
f0113056:	50                   	push   %eax
f0113057:	ff 75 80             	pushl  -0x80(%ebp)
f011305a:	68 78 98 13 f0       	push   $0xf0139878
f011305f:	68 f3 02 00 00       	push   $0x2f3
f0113064:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113069:	e8 a5 d3 fe ff       	call   f0100413 <_warn>
f011306e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113071:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113078:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011307c:	74 04                	je     f0113082 <test_copy_paste_chunk+0xb0a>
f011307e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113082:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113089:	83 ec 08             	sub    $0x8,%esp
f011308c:	6a 01                	push   $0x1
f011308e:	6a 07                	push   $0x7
f0113090:	6a 07                	push   $0x7
f0113092:	6a 07                	push   $0x7
f0113094:	6a 07                	push   $0x7
f0113096:	6a 01                	push   $0x1
f0113098:	68 00 20 00 00       	push   $0x2000
f011309d:	68 00 00 20 00       	push   $0x200000
f01130a2:	68 00 00 40 00       	push   $0x400000
f01130a7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130aa:	e8 c5 30 00 00       	call   f0116174 <CCP>
f01130af:	83 c4 30             	add    $0x30,%esp
f01130b2:	83 f8 01             	cmp    $0x1,%eax
f01130b5:	74 21                	je     f01130d8 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01130b7:	83 ec 04             	sub    $0x4,%esp
f01130ba:	68 18 99 13 f0       	push   $0xf0139918
f01130bf:	68 fb 02 00 00       	push   $0x2fb
f01130c4:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01130c9:	e8 45 d3 fe ff       	call   f0100413 <_warn>
f01130ce:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01130d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01130d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130dc:	74 04                	je     f01130e2 <test_copy_paste_chunk+0xb6a>
f01130de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01130e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01130e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01130ec:	8a 00                	mov    (%eax),%al
f01130ee:	3c 61                	cmp    $0x61,%al
f01130f0:	75 69                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f01130f2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01130f5:	8a 00                	mov    (%eax),%al
f01130f7:	3c 61                	cmp    $0x61,%al
f01130f9:	75 60                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f01130fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130fe:	8a 00                	mov    (%eax),%al
f0113100:	3c 79                	cmp    $0x79,%al
f0113102:	75 57                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f0113104:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113107:	8a 00                	mov    (%eax),%al
f0113109:	3c 62                	cmp    $0x62,%al
f011310b:	75 4e                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f011310d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113110:	8a 00                	mov    (%eax),%al
f0113112:	3c 7a                	cmp    $0x7a,%al
f0113114:	75 45                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f0113116:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113119:	8a 00                	mov    (%eax),%al
f011311b:	3c 7a                	cmp    $0x7a,%al
f011311d:	75 3c                	jne    f011315b <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011311f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113122:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113124:	3c 64                	cmp    $0x64,%al
f0113126:	75 33                	jne    f011315b <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113128:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011312b:	8a 00                	mov    (%eax),%al
f011312d:	3c 64                	cmp    $0x64,%al
f011312f:	75 2a                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f0113131:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113134:	8a 00                	mov    (%eax),%al
f0113136:	3c 65                	cmp    $0x65,%al
f0113138:	75 21                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f011313a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011313d:	8a 00                	mov    (%eax),%al
f011313f:	3c 78                	cmp    $0x78,%al
f0113141:	75 18                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f0113143:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113146:	8a 00                	mov    (%eax),%al
f0113148:	3c 66                	cmp    $0x66,%al
f011314a:	75 0f                	jne    f011315b <test_copy_paste_chunk+0xbe3>
f011314c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011314f:	8a 10                	mov    (%eax),%dl
f0113151:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113157:	38 c2                	cmp    %al,%dl
f0113159:	74 21                	je     f011317c <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011315b:	83 ec 04             	sub    $0x4,%esp
f011315e:	68 cc 97 13 f0       	push   $0xf01397cc
f0113163:	68 04 03 00 00       	push   $0x304
f0113168:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011316d:	e8 a1 d2 fe ff       	call   f0100413 <_warn>
f0113172:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113175:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011317c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113180:	74 04                	je     f0113186 <test_copy_paste_chunk+0xc0e>
f0113182:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113186:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011318d:	83 ec 0c             	sub    $0xc,%esp
f0113190:	68 63 99 13 f0       	push   $0xf0139963
f0113195:	e8 74 db fe ff       	call   f0100d0e <cprintf>
f011319a:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011319d:	83 ec 0c             	sub    $0xc,%esp
f01131a0:	68 74 99 13 f0       	push   $0xf0139974
f01131a5:	e8 64 db fe ff       	call   f0100d0e <cprintf>
f01131aa:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01131ad:	83 ec 04             	sub    $0x4,%esp
f01131b0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131b6:	50                   	push   %eax
f01131b7:	68 a8 99 13 f0       	push   $0xf01399a8
f01131bc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01131c2:	50                   	push   %eax
f01131c3:	e8 6f e6 01 00       	call   f0131837 <strcconcat>
f01131c8:	83 c4 10             	add    $0x10,%esp
f01131cb:	83 ec 0c             	sub    $0xc,%esp
f01131ce:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131d4:	50                   	push   %eax
f01131d5:	e8 96 db fe ff       	call   f0100d70 <execute_command>
f01131da:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01131dd:	83 ec 04             	sub    $0x4,%esp
f01131e0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131e6:	50                   	push   %eax
f01131e7:	68 b2 99 13 f0       	push   $0xf01399b2
f01131ec:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01131f2:	50                   	push   %eax
f01131f3:	e8 3f e6 01 00       	call   f0131837 <strcconcat>
f01131f8:	83 c4 10             	add    $0x10,%esp
f01131fb:	83 ec 0c             	sub    $0xc,%esp
f01131fe:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113204:	50                   	push   %eax
f0113205:	e8 66 db fe ff       	call   f0100d70 <execute_command>
f011320a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011320d:	83 ec 04             	sub    $0x4,%esp
f0113210:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113216:	50                   	push   %eax
f0113217:	68 bc 99 13 f0       	push   $0xf01399bc
f011321c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113222:	50                   	push   %eax
f0113223:	e8 0f e6 01 00       	call   f0131837 <strcconcat>
f0113228:	83 c4 10             	add    $0x10,%esp
f011322b:	83 ec 0c             	sub    $0xc,%esp
f011322e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113234:	50                   	push   %eax
f0113235:	e8 36 db fe ff       	call   f0100d70 <execute_command>
f011323a:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f011323d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113243:	bb 55 a1 13 f0       	mov    $0xf013a155,%ebx
f0113248:	ba 0f 00 00 00       	mov    $0xf,%edx
f011324d:	89 c7                	mov    %eax,%edi
f011324f:	89 de                	mov    %ebx,%esi
f0113251:	89 d1                	mov    %edx,%ecx
f0113253:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113255:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011325b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113260:	b0 00                	mov    $0x0,%al
f0113262:	89 d7                	mov    %edx,%edi
f0113264:	f3 aa                	rep stos %al,%es:(%edi)
f0113266:	83 ec 0c             	sub    $0xc,%esp
f0113269:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011326f:	50                   	push   %eax
f0113270:	e8 fb da fe ff       	call   f0100d70 <execute_command>
f0113275:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113278:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011327e:	bb b9 a1 13 f0       	mov    $0xf013a1b9,%ebx
f0113283:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113288:	89 c7                	mov    %eax,%edi
f011328a:	89 de                	mov    %ebx,%esi
f011328c:	89 d1                	mov    %edx,%ecx
f011328e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113290:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113296:	b9 55 00 00 00       	mov    $0x55,%ecx
f011329b:	b0 00                	mov    $0x0,%al
f011329d:	89 d7                	mov    %edx,%edi
f011329f:	f3 aa                	rep stos %al,%es:(%edi)
f01132a1:	83 ec 0c             	sub    $0xc,%esp
f01132a4:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01132aa:	50                   	push   %eax
f01132ab:	e8 c0 da fe ff       	call   f0100d70 <execute_command>
f01132b0:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01132b3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01132b9:	bb 1d a2 13 f0       	mov    $0xf013a21d,%ebx
f01132be:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132c3:	89 c7                	mov    %eax,%edi
f01132c5:	89 de                	mov    %ebx,%esi
f01132c7:	89 d1                	mov    %edx,%ecx
f01132c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132cb:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01132d1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132d6:	b0 00                	mov    $0x0,%al
f01132d8:	89 d7                	mov    %edx,%edi
f01132da:	f3 aa                	rep stos %al,%es:(%edi)
f01132dc:	83 ec 0c             	sub    $0xc,%esp
f01132df:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01132e5:	50                   	push   %eax
f01132e6:	e8 85 da fe ff       	call   f0100d70 <execute_command>
f01132eb:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01132ee:	e8 aa 98 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01132f3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f01132f6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132f9:	89 d0                	mov    %edx,%eax
f01132fb:	01 c0                	add    %eax,%eax
f01132fd:	01 d0                	add    %edx,%eax
f01132ff:	c1 e0 02             	shl    $0x2,%eax
f0113302:	50                   	push   %eax
f0113303:	68 00 00 90 00       	push   $0x900000
f0113308:	68 00 00 80 00       	push   $0x800000
f011330d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113310:	e8 b9 55 ff ff       	call   f01088ce <copy_paste_chunk>
f0113315:	83 c4 10             	add    $0x10,%esp
f0113318:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011331e:	e8 7a 98 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113323:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113326:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011332d:	75 0b                	jne    f011333a <test_copy_paste_chunk+0xdc2>
f011332f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113332:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113335:	83 f8 03             	cmp    $0x3,%eax
f0113338:	74 2e                	je     f0113368 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011333a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011333d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113340:	83 ec 0c             	sub    $0xc,%esp
f0113343:	50                   	push   %eax
f0113344:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011334a:	68 78 98 13 f0       	push   $0xf0139878
f011334f:	68 22 03 00 00       	push   $0x322
f0113354:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113359:	e8 b5 d0 fe ff       	call   f0100413 <_warn>
f011335e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113361:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113368:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011336c:	74 04                	je     f0113372 <test_copy_paste_chunk+0xdfa>
f011336e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113372:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113379:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113380:	83 ec 08             	sub    $0x8,%esp
f0113383:	6a 01                	push   $0x1
f0113385:	6a 07                	push   $0x7
f0113387:	6a 07                	push   $0x7
f0113389:	6a 07                	push   $0x7
f011338b:	6a 07                	push   $0x7
f011338d:	6a 01                	push   $0x1
f011338f:	68 00 30 00 00       	push   $0x3000
f0113394:	68 00 00 90 00       	push   $0x900000
f0113399:	68 00 00 80 00       	push   $0x800000
f011339e:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133a1:	e8 ce 2d 00 00       	call   f0116174 <CCP>
f01133a6:	83 c4 30             	add    $0x30,%esp
f01133a9:	83 f8 01             	cmp    $0x1,%eax
f01133ac:	74 28                	je     f01133d6 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01133ae:	83 ec 04             	sub    $0x4,%esp
f01133b1:	68 18 99 13 f0       	push   $0xf0139918
f01133b6:	68 2b 03 00 00       	push   $0x32b
f01133bb:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01133c0:	e8 4e d0 fe ff       	call   f0100413 <_warn>
f01133c5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01133cf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01133d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133da:	74 04                	je     f01133e0 <test_copy_paste_chunk+0xe68>
f01133dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01133e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01133eb:	0f 84 9e 00 00 00    	je     f011348f <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f01133f1:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f01133f8:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f01133ff:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113406:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011340d:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113414:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011341b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011341e:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113421:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113424:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113427:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011342a:	8a 00                	mov    (%eax),%al
f011342c:	3c 61                	cmp    $0x61,%al
f011342e:	75 2d                	jne    f011345d <test_copy_paste_chunk+0xee5>
f0113430:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113433:	8a 00                	mov    (%eax),%al
f0113435:	3c 61                	cmp    $0x61,%al
f0113437:	75 24                	jne    f011345d <test_copy_paste_chunk+0xee5>
f0113439:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011343c:	8a 00                	mov    (%eax),%al
f011343e:	3c 79                	cmp    $0x79,%al
f0113440:	75 1b                	jne    f011345d <test_copy_paste_chunk+0xee5>
f0113442:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113445:	8a 00                	mov    (%eax),%al
f0113447:	3c 62                	cmp    $0x62,%al
f0113449:	75 12                	jne    f011345d <test_copy_paste_chunk+0xee5>
f011344b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011344e:	8a 00                	mov    (%eax),%al
f0113450:	3c 63                	cmp    $0x63,%al
f0113452:	75 09                	jne    f011345d <test_copy_paste_chunk+0xee5>
f0113454:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113457:	8a 00                	mov    (%eax),%al
f0113459:	3c 7a                	cmp    $0x7a,%al
f011345b:	74 21                	je     f011347e <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011345d:	83 ec 04             	sub    $0x4,%esp
f0113460:	68 cc 97 13 f0       	push   $0xf01397cc
f0113465:	68 3d 03 00 00       	push   $0x33d
f011346a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011346f:	e8 9f cf fe ff       	call   f0100413 <_warn>
f0113474:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113477:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f011347e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113482:	74 04                	je     f0113488 <test_copy_paste_chunk+0xf10>
f0113484:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113488:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011348f:	e8 09 97 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113494:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113497:	6a 00                	push   $0x0
f0113499:	6a 02                	push   $0x2
f011349b:	68 00 10 90 00       	push   $0x901000
f01134a0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134a3:	e8 59 2b 00 00       	call   f0116001 <SB>
f01134a8:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01134ab:	6a 00                	push   $0x0
f01134ad:	6a 02                	push   $0x2
f01134af:	68 00 20 90 00       	push   $0x902000
f01134b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134b7:	e8 45 2b 00 00       	call   f0116001 <SB>
f01134bc:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01134bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01134c2:	c1 e0 03             	shl    $0x3,%eax
f01134c5:	50                   	push   %eax
f01134c6:	68 00 f0 bf 00       	push   $0xbff000
f01134cb:	68 00 10 90 00       	push   $0x901000
f01134d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134d3:	e8 f6 53 ff ff       	call   f01088ce <copy_paste_chunk>
f01134d8:	83 c4 10             	add    $0x10,%esp
f01134db:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134e1:	e8 b7 96 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01134e6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01134e9:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01134f0:	75 0b                	jne    f01134fd <test_copy_paste_chunk+0xf85>
f01134f2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134f5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01134f8:	83 f8 03             	cmp    $0x3,%eax
f01134fb:	74 2e                	je     f011352b <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134fd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113500:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113503:	83 ec 0c             	sub    $0xc,%esp
f0113506:	50                   	push   %eax
f0113507:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011350d:	68 78 98 13 f0       	push   $0xf0139878
f0113512:	68 4d 03 00 00       	push   $0x34d
f0113517:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011351c:	e8 f2 ce fe ff       	call   f0100413 <_warn>
f0113521:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113524:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011352b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011352f:	74 04                	je     f0113535 <test_copy_paste_chunk+0xfbd>
f0113531:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113535:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f011353c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113543:	83 ec 08             	sub    $0x8,%esp
f0113546:	6a 01                	push   $0x1
f0113548:	6a 07                	push   $0x7
f011354a:	6a 03                	push   $0x3
f011354c:	6a 07                	push   $0x7
f011354e:	6a 03                	push   $0x3
f0113550:	6a 01                	push   $0x1
f0113552:	68 00 20 00 00       	push   $0x2000
f0113557:	68 00 f0 bf 00       	push   $0xbff000
f011355c:	68 00 10 90 00       	push   $0x901000
f0113561:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113564:	e8 0b 2c 00 00       	call   f0116174 <CCP>
f0113569:	83 c4 30             	add    $0x30,%esp
f011356c:	83 f8 01             	cmp    $0x1,%eax
f011356f:	74 28                	je     f0113599 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113571:	83 ec 04             	sub    $0x4,%esp
f0113574:	68 18 99 13 f0       	push   $0xf0139918
f0113579:	68 56 03 00 00       	push   $0x356
f011357e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113583:	e8 8b ce fe ff       	call   f0100413 <_warn>
f0113588:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011358b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113592:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113599:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011359d:	74 04                	je     f01135a3 <test_copy_paste_chunk+0x102b>
f011359f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01135a3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01135aa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01135ae:	74 72                	je     f0113622 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01135b0:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01135b7:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01135be:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01135c5:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01135cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01135cf:	8a 00                	mov    (%eax),%al
f01135d1:	3c 62                	cmp    $0x62,%al
f01135d3:	75 1b                	jne    f01135f0 <test_copy_paste_chunk+0x1078>
f01135d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01135d8:	8a 00                	mov    (%eax),%al
f01135da:	3c 62                	cmp    $0x62,%al
f01135dc:	75 12                	jne    f01135f0 <test_copy_paste_chunk+0x1078>
f01135de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135e1:	8a 00                	mov    (%eax),%al
f01135e3:	3c 7a                	cmp    $0x7a,%al
f01135e5:	75 09                	jne    f01135f0 <test_copy_paste_chunk+0x1078>
f01135e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01135ea:	8a 00                	mov    (%eax),%al
f01135ec:	3c 7a                	cmp    $0x7a,%al
f01135ee:	74 21                	je     f0113611 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01135f0:	83 ec 04             	sub    $0x4,%esp
f01135f3:	68 cc 97 13 f0       	push   $0xf01397cc
f01135f8:	68 62 03 00 00       	push   $0x362
f01135fd:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113602:	e8 0c ce fe ff       	call   f0100413 <_warn>
f0113607:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011360a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113611:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113615:	74 04                	je     f011361b <test_copy_paste_chunk+0x10a3>
f0113617:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011361b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113622:	83 ec 0c             	sub    $0xc,%esp
f0113625:	68 c6 99 13 f0       	push   $0xf01399c6
f011362a:	e8 df d6 fe ff       	call   f0100d0e <cprintf>
f011362f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113632:	83 ec 08             	sub    $0x8,%esp
f0113635:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113638:	68 d8 99 13 f0       	push   $0xf01399d8
f011363d:	e8 cc d6 fe ff       	call   f0100d0e <cprintf>
f0113642:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113645:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113649:	75 10                	jne    f011365b <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f011364b:	83 ec 0c             	sub    $0xc,%esp
f011364e:	68 0c 9a 13 f0       	push   $0xf0139a0c
f0113653:	e8 b6 d6 fe ff       	call   f0100d0e <cprintf>
f0113658:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011365b:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0113660:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113663:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113666:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113669:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011366e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113671:	5b                   	pop    %ebx
f0113672:	5e                   	pop    %esi
f0113673:	5f                   	pop    %edi
f0113674:	5d                   	pop    %ebp
f0113675:	c3                   	ret    

f0113676 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113676:	55                   	push   %ebp
f0113677:	89 e5                	mov    %esp,%ebp
f0113679:	57                   	push   %edi
f011367a:	56                   	push   %esi
f011367b:	53                   	push   %ebx
f011367c:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113682:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113688:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f011368d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113692:	89 c7                	mov    %eax,%edi
f0113694:	89 de                	mov    %ebx,%esi
f0113696:	89 d1                	mov    %edx,%ecx
f0113698:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011369a:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01136a0:	b9 23 00 00 00       	mov    $0x23,%ecx
f01136a5:	b0 00                	mov    $0x0,%al
f01136a7:	89 d7                	mov    %edx,%edi
f01136a9:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01136ab:	6a 00                	push   $0x0
f01136ad:	6a 0a                	push   $0xa
f01136af:	6a 14                	push   $0x14
f01136b1:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01136b7:	50                   	push   %eax
f01136b8:	e8 a6 57 ff ff       	call   f0108e63 <env_create>
f01136bd:	83 c4 10             	add    $0x10,%esp
f01136c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01136c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01136c6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01136c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01136cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01136cf:	8b 40 60             	mov    0x60(%eax),%eax
f01136d2:	89 45 80             	mov    %eax,-0x80(%ebp)
f01136d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01136d8:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01136db:	83 ec 0c             	sub    $0xc,%esp
f01136de:	ff 75 cc             	pushl  -0x34(%ebp)
f01136e1:	e8 5a 2a 00 00       	call   f0116140 <ClearUserSpace>
f01136e6:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01136e9:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01136f0:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01136f7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01136fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113702:	83 ec 0c             	sub    $0xc,%esp
f0113705:	68 84 a2 13 f0       	push   $0xf013a284
f011370a:	e8 ff d5 fe ff       	call   f0100d0e <cprintf>
f011370f:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113712:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113719:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113720:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113723:	8a 00                	mov    (%eax),%al
f0113725:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011372b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011372e:	8a 00                	mov    (%eax),%al
f0113730:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113736:	e8 62 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011373b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f011373e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113741:	89 d0                	mov    %edx,%eax
f0113743:	01 c0                	add    %eax,%eax
f0113745:	01 d0                	add    %edx,%eax
f0113747:	01 c0                	add    %eax,%eax
f0113749:	83 ec 0c             	sub    $0xc,%esp
f011374c:	6a 02                	push   $0x2
f011374e:	50                   	push   %eax
f011374f:	68 00 40 10 f0       	push   $0xf0104000
f0113754:	68 00 00 10 f0       	push   $0xf0100000
f0113759:	ff 75 cc             	pushl  -0x34(%ebp)
f011375c:	e8 b1 52 ff ff       	call   f0108a12 <share_chunk>
f0113761:	83 c4 20             	add    $0x20,%esp
f0113764:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113767:	e8 31 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011376c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011376f:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113773:	75 08                	jne    f011377d <test_share_chunk+0x107>
f0113775:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113778:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011377b:	74 28                	je     f01137a5 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f011377d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113780:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113783:	83 ec 0c             	sub    $0xc,%esp
f0113786:	50                   	push   %eax
f0113787:	ff 75 b0             	pushl  -0x50(%ebp)
f011378a:	68 b0 a2 13 f0       	push   $0xf013a2b0
f011378f:	68 9e 03 00 00       	push   $0x39e
f0113794:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113799:	e8 75 cc fe ff       	call   f0100413 <_warn>
f011379e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01137a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137a9:	74 04                	je     f01137af <test_share_chunk+0x139>
f01137ab:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f01137b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137b6:	c1 e0 03             	shl    $0x3,%eax
f01137b9:	83 ec 08             	sub    $0x8,%esp
f01137bc:	68 fd 00 00 00       	push   $0xfd
f01137c1:	6a 07                	push   $0x7
f01137c3:	6a 03                	push   $0x3
f01137c5:	6a 07                	push   $0x7
f01137c7:	6a 03                	push   $0x3
f01137c9:	6a 01                	push   $0x1
f01137cb:	50                   	push   %eax
f01137cc:	68 00 40 10 f0       	push   $0xf0104000
f01137d1:	68 00 00 10 f0       	push   $0xf0100000
f01137d6:	ff 75 cc             	pushl  -0x34(%ebp)
f01137d9:	e8 96 29 00 00       	call   f0116174 <CCP>
f01137de:	83 c4 30             	add    $0x30,%esp
f01137e1:	85 c0                	test   %eax,%eax
f01137e3:	75 1e                	jne    f0113803 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01137e5:	83 ec 04             	sub    $0x4,%esp
f01137e8:	68 0c a3 13 f0       	push   $0xf013a30c
f01137ed:	68 a6 03 00 00       	push   $0x3a6
f01137f2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01137f7:	e8 17 cc fe ff       	call   f0100413 <_warn>
f01137fc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113803:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113807:	74 04                	je     f011380d <test_share_chunk+0x197>
f0113809:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011380d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113810:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113813:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113816:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113819:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011381c:	8a 00                	mov    (%eax),%al
f011381e:	3c 41                	cmp    $0x41,%al
f0113820:	75 09                	jne    f011382b <test_share_chunk+0x1b5>
f0113822:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113825:	8a 00                	mov    (%eax),%al
f0113827:	3c 42                	cmp    $0x42,%al
f0113829:	74 1e                	je     f0113849 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011382b:	83 ec 04             	sub    $0x4,%esp
f011382e:	68 54 a3 13 f0       	push   $0xf013a354
f0113833:	68 b0 03 00 00       	push   $0x3b0
f0113838:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011383d:	e8 d1 cb fe ff       	call   f0100413 <_warn>
f0113842:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113845:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113849:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011384d:	74 04                	je     f0113853 <test_share_chunk+0x1dd>
f011384f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113853:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113857:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f011385d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113860:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113862:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113868:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011386b:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f011386d:	83 ec 0c             	sub    $0xc,%esp
f0113870:	68 89 a3 13 f0       	push   $0xf013a389
f0113875:	e8 94 d4 fe ff       	call   f0100d0e <cprintf>
f011387a:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f011387d:	83 ec 0c             	sub    $0xc,%esp
f0113880:	68 98 a3 13 f0       	push   $0xf013a398
f0113885:	e8 84 d4 fe ff       	call   f0100d0e <cprintf>
f011388a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011388d:	e8 0b 93 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113892:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113895:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113898:	c1 e0 05             	shl    $0x5,%eax
f011389b:	83 ec 0c             	sub    $0xc,%esp
f011389e:	68 02 0e 00 00       	push   $0xe02
f01138a3:	50                   	push   %eax
f01138a4:	68 00 00 00 40       	push   $0x40000000
f01138a9:	68 00 00 00 f0       	push   $0xf0000000
f01138ae:	ff 75 cc             	pushl  -0x34(%ebp)
f01138b1:	e8 5c 51 ff ff       	call   f0108a12 <share_chunk>
f01138b6:	83 c4 20             	add    $0x20,%esp
f01138b9:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01138bc:	e8 dc 92 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01138c1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01138c4:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01138c8:	75 1f                	jne    f01138e9 <test_share_chunk+0x273>
f01138ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138cd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138d0:	89 c1                	mov    %eax,%ecx
f01138d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01138d5:	c1 e0 05             	shl    $0x5,%eax
f01138d8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01138db:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01138e2:	99                   	cltd   
f01138e3:	f7 fb                	idiv   %ebx
f01138e5:	39 c1                	cmp    %eax,%ecx
f01138e7:	74 28                	je     f0113911 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01138e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138ec:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138ef:	83 ec 0c             	sub    $0xc,%esp
f01138f2:	50                   	push   %eax
f01138f3:	ff 75 a8             	pushl  -0x58(%ebp)
f01138f6:	68 d4 a3 13 f0       	push   $0xf013a3d4
f01138fb:	68 c8 03 00 00       	push   $0x3c8
f0113900:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113905:	e8 09 cb fe ff       	call   f0100413 <_warn>
f011390a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011390d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113911:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113915:	74 04                	je     f011391b <test_share_chunk+0x2a5>
f0113917:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011391b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011391f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113926:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113929:	c1 e0 05             	shl    $0x5,%eax
f011392c:	83 ec 08             	sub    $0x8,%esp
f011392f:	6a 02                	push   $0x2
f0113931:	6a 07                	push   $0x7
f0113933:	6a 03                	push   $0x3
f0113935:	68 07 0e 00 00       	push   $0xe07
f011393a:	68 03 0e 00 00       	push   $0xe03
f011393f:	6a ff                	push   $0xffffffff
f0113941:	50                   	push   %eax
f0113942:	68 00 00 00 40       	push   $0x40000000
f0113947:	68 00 00 00 f0       	push   $0xf0000000
f011394c:	ff 75 cc             	pushl  -0x34(%ebp)
f011394f:	e8 20 28 00 00       	call   f0116174 <CCP>
f0113954:	83 c4 30             	add    $0x30,%esp
f0113957:	85 c0                	test   %eax,%eax
f0113959:	75 25                	jne    f0113980 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011395b:	83 ec 04             	sub    $0x4,%esp
f011395e:	68 0c a3 13 f0       	push   $0xf013a30c
f0113963:	68 d1 03 00 00       	push   $0x3d1
f0113968:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011396d:	e8 a1 ca fe ff       	call   f0100413 <_warn>
f0113972:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113975:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113979:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113980:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113983:	89 d0                	mov    %edx,%eax
f0113985:	01 c0                	add    %eax,%eax
f0113987:	01 d0                	add    %edx,%eax
f0113989:	c1 e0 02             	shl    $0x2,%eax
f011398c:	83 ec 08             	sub    $0x8,%esp
f011398f:	6a 02                	push   $0x2
f0113991:	6a 07                	push   $0x7
f0113993:	6a 03                	push   $0x3
f0113995:	68 07 0e 00 00       	push   $0xe07
f011399a:	68 03 0e 00 00       	push   $0xe03
f011399f:	6a 02                	push   $0x2
f01139a1:	50                   	push   %eax
f01139a2:	68 00 00 00 40       	push   $0x40000000
f01139a7:	68 00 00 00 f0       	push   $0xf0000000
f01139ac:	ff 75 cc             	pushl  -0x34(%ebp)
f01139af:	e8 c0 27 00 00       	call   f0116174 <CCP>
f01139b4:	83 c4 30             	add    $0x30,%esp
f01139b7:	85 c0                	test   %eax,%eax
f01139b9:	75 1e                	jne    f01139d9 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01139bb:	83 ec 04             	sub    $0x4,%esp
f01139be:	68 0c a3 13 f0       	push   $0xf013a30c
f01139c3:	68 d8 03 00 00       	push   $0x3d8
f01139c8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01139cd:	e8 41 ca fe ff       	call   f0100413 <_warn>
f01139d2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139dd:	74 04                	je     f01139e3 <test_share_chunk+0x36d>
f01139df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01139e7:	b8 bc 1e 88 f0       	mov    $0xf0881ebc,%eax
f01139ec:	05 00 00 00 10       	add    $0x10000000,%eax
f01139f1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01139f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01139f7:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01139fc:	83 ec 08             	sub    $0x8,%esp
f01139ff:	6a 02                	push   $0x2
f0113a01:	6a 07                	push   $0x7
f0113a03:	6a 03                	push   $0x3
f0113a05:	68 07 0e 00 00       	push   $0xe07
f0113a0a:	68 03 0e 00 00       	push   $0xe03
f0113a0f:	6a 02                	push   $0x2
f0113a11:	50                   	push   %eax
f0113a12:	68 00 00 0a 40       	push   $0x400a0000
f0113a17:	68 00 00 0a f0       	push   $0xf00a0000
f0113a1c:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a1f:	e8 50 27 00 00       	call   f0116174 <CCP>
f0113a24:	83 c4 30             	add    $0x30,%esp
f0113a27:	85 c0                	test   %eax,%eax
f0113a29:	75 1e                	jne    f0113a49 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113a2b:	83 ec 04             	sub    $0x4,%esp
f0113a2e:	68 0c a3 13 f0       	push   $0xf013a30c
f0113a33:	68 e2 03 00 00       	push   $0x3e2
f0113a38:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113a3d:	e8 d1 c9 fe ff       	call   f0100413 <_warn>
f0113a42:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a49:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a4d:	74 04                	je     f0113a53 <test_share_chunk+0x3dd>
f0113a4f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a53:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113a57:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113a5b:	0f 84 a4 00 00 00    	je     f0113b05 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113a61:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113a68:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a6b:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113a6e:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113a75:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a78:	8a 00                	mov    (%eax),%al
f0113a7a:	3c 41                	cmp    $0x41,%al
f0113a7c:	75 09                	jne    f0113a87 <test_share_chunk+0x411>
f0113a7e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a81:	8a 00                	mov    (%eax),%al
f0113a83:	3c 41                	cmp    $0x41,%al
f0113a85:	74 1e                	je     f0113aa5 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113a87:	83 ec 04             	sub    $0x4,%esp
f0113a8a:	68 54 a3 13 f0       	push   $0xf013a354
f0113a8f:	68 ef 03 00 00       	push   $0x3ef
f0113a94:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113a99:	e8 75 c9 fe ff       	call   f0100413 <_warn>
f0113a9e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113aa1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113aa5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113aa9:	74 04                	je     f0113aaf <test_share_chunk+0x439>
f0113aab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113aaf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113ab3:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113aba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113abd:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113ac0:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113ac7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113aca:	8a 00                	mov    (%eax),%al
f0113acc:	3c 43                	cmp    $0x43,%al
f0113ace:	75 09                	jne    f0113ad9 <test_share_chunk+0x463>
f0113ad0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ad3:	8a 00                	mov    (%eax),%al
f0113ad5:	3c 43                	cmp    $0x43,%al
f0113ad7:	74 1e                	je     f0113af7 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113ad9:	83 ec 04             	sub    $0x4,%esp
f0113adc:	68 54 a3 13 f0       	push   $0xf013a354
f0113ae1:	68 fa 03 00 00       	push   $0x3fa
f0113ae6:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113aeb:	e8 23 c9 fe ff       	call   f0100413 <_warn>
f0113af0:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113af3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113af7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113afb:	74 04                	je     f0113b01 <test_share_chunk+0x48b>
f0113afd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113b01:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113b05:	83 ec 0c             	sub    $0xc,%esp
f0113b08:	68 63 99 13 f0       	push   $0xf0139963
f0113b0d:	e8 fc d1 fe ff       	call   f0100d0e <cprintf>
f0113b12:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113b15:	83 ec 0c             	sub    $0xc,%esp
f0113b18:	68 24 a4 13 f0       	push   $0xf013a424
f0113b1d:	e8 ec d1 fe ff       	call   f0100d0e <cprintf>
f0113b22:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b25:	e8 73 90 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113b2a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113b2d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b30:	89 d0                	mov    %edx,%eax
f0113b32:	c1 e0 03             	shl    $0x3,%eax
f0113b35:	01 d0                	add    %edx,%eax
f0113b37:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113b3e:	01 d0                	add    %edx,%eax
f0113b40:	c1 e0 03             	shl    $0x3,%eax
f0113b43:	83 ec 0c             	sub    $0xc,%esp
f0113b46:	6a 06                	push   $0x6
f0113b48:	50                   	push   %eax
f0113b49:	6a 00                	push   $0x0
f0113b4b:	68 00 00 00 40       	push   $0x40000000
f0113b50:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b53:	e8 ba 4e ff ff       	call   f0108a12 <share_chunk>
f0113b58:	83 c4 20             	add    $0x20,%esp
f0113b5b:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b5e:	e8 3a 90 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113b63:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113b66:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113b6a:	75 0b                	jne    f0113b77 <test_share_chunk+0x501>
f0113b6c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b6f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b72:	83 f8 01             	cmp    $0x1,%eax
f0113b75:	74 28                	je     f0113b9f <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b7a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b7d:	83 ec 0c             	sub    $0xc,%esp
f0113b80:	50                   	push   %eax
f0113b81:	ff 75 a0             	pushl  -0x60(%ebp)
f0113b84:	68 d4 a3 13 f0       	push   $0xf013a3d4
f0113b89:	68 10 04 00 00       	push   $0x410
f0113b8e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113b93:	e8 7b c8 fe ff       	call   f0100413 <_warn>
f0113b98:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b9b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b9f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ba3:	74 04                	je     f0113ba9 <test_share_chunk+0x533>
f0113ba5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ba9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113bad:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113bb4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113bb7:	05 00 80 02 00       	add    $0x28000,%eax
f0113bbc:	c1 e0 02             	shl    $0x2,%eax
f0113bbf:	83 ec 08             	sub    $0x8,%esp
f0113bc2:	6a 02                	push   $0x2
f0113bc4:	6a 07                	push   $0x7
f0113bc6:	6a 03                	push   $0x3
f0113bc8:	6a 07                	push   $0x7
f0113bca:	6a 07                	push   $0x7
f0113bcc:	6a ff                	push   $0xffffffff
f0113bce:	50                   	push   %eax
f0113bcf:	6a 00                	push   $0x0
f0113bd1:	68 00 00 00 40       	push   $0x40000000
f0113bd6:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bd9:	e8 96 25 00 00       	call   f0116174 <CCP>
f0113bde:	83 c4 30             	add    $0x30,%esp
f0113be1:	85 c0                	test   %eax,%eax
f0113be3:	75 25                	jne    f0113c0a <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113be5:	83 ec 04             	sub    $0x4,%esp
f0113be8:	68 0c a3 13 f0       	push   $0xf013a30c
f0113bed:	68 19 04 00 00       	push   $0x419
f0113bf2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113bf7:	e8 17 c8 fe ff       	call   f0100413 <_warn>
f0113bfc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113c03:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113c0a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c0d:	89 d0                	mov    %edx,%eax
f0113c0f:	01 c0                	add    %eax,%eax
f0113c11:	01 d0                	add    %edx,%eax
f0113c13:	c1 e0 02             	shl    $0x2,%eax
f0113c16:	83 ec 08             	sub    $0x8,%esp
f0113c19:	6a 02                	push   $0x2
f0113c1b:	6a 07                	push   $0x7
f0113c1d:	6a 03                	push   $0x3
f0113c1f:	6a 07                	push   $0x7
f0113c21:	6a 07                	push   $0x7
f0113c23:	6a 03                	push   $0x3
f0113c25:	50                   	push   %eax
f0113c26:	6a 00                	push   $0x0
f0113c28:	68 00 00 00 40       	push   $0x40000000
f0113c2d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c30:	e8 3f 25 00 00       	call   f0116174 <CCP>
f0113c35:	83 c4 30             	add    $0x30,%esp
f0113c38:	85 c0                	test   %eax,%eax
f0113c3a:	75 1e                	jne    f0113c5a <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c3c:	83 ec 04             	sub    $0x4,%esp
f0113c3f:	68 0c a3 13 f0       	push   $0xf013a30c
f0113c44:	68 20 04 00 00       	push   $0x420
f0113c49:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113c4e:	e8 c0 c7 fe ff       	call   f0100413 <_warn>
f0113c53:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c56:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c5a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c5e:	74 04                	je     f0113c64 <test_share_chunk+0x5ee>
f0113c60:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c64:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113c68:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c6b:	89 d0                	mov    %edx,%eax
f0113c6d:	01 c0                	add    %eax,%eax
f0113c6f:	01 d0                	add    %edx,%eax
f0113c71:	c1 e0 02             	shl    $0x2,%eax
f0113c74:	f7 d8                	neg    %eax
f0113c76:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113c7b:	83 ec 08             	sub    $0x8,%esp
f0113c7e:	6a 02                	push   $0x2
f0113c80:	6a 07                	push   $0x7
f0113c82:	6a 03                	push   $0x3
f0113c84:	6a 07                	push   $0x7
f0113c86:	6a 07                	push   $0x7
f0113c88:	6a 02                	push   $0x2
f0113c8a:	50                   	push   %eax
f0113c8b:	68 00 30 00 00       	push   $0x3000
f0113c90:	68 00 30 00 40       	push   $0x40003000
f0113c95:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c98:	e8 d7 24 00 00       	call   f0116174 <CCP>
f0113c9d:	83 c4 30             	add    $0x30,%esp
f0113ca0:	85 c0                	test   %eax,%eax
f0113ca2:	75 1e                	jne    f0113cc2 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ca4:	83 ec 04             	sub    $0x4,%esp
f0113ca7:	68 0c a3 13 f0       	push   $0xf013a30c
f0113cac:	68 28 04 00 00       	push   $0x428
f0113cb1:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113cb6:	e8 58 c7 fe ff       	call   f0100413 <_warn>
f0113cbb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113cbe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113cc2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cc6:	74 04                	je     f0113ccc <test_share_chunk+0x656>
f0113cc8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ccc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113cd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cd3:	c1 e0 02             	shl    $0x2,%eax
f0113cd6:	83 ec 08             	sub    $0x8,%esp
f0113cd9:	6a 02                	push   $0x2
f0113cdb:	6a 07                	push   $0x7
f0113cdd:	6a 03                	push   $0x3
f0113cdf:	6a 07                	push   $0x7
f0113ce1:	6a 07                	push   $0x7
f0113ce3:	6a 03                	push   $0x3
f0113ce5:	50                   	push   %eax
f0113ce6:	68 00 00 0a 00       	push   $0xa0000
f0113ceb:	68 00 00 0a 40       	push   $0x400a0000
f0113cf0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cf3:	e8 7c 24 00 00       	call   f0116174 <CCP>
f0113cf8:	83 c4 30             	add    $0x30,%esp
f0113cfb:	85 c0                	test   %eax,%eax
f0113cfd:	75 1e                	jne    f0113d1d <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113cff:	83 ec 04             	sub    $0x4,%esp
f0113d02:	68 0c a3 13 f0       	push   $0xf013a30c
f0113d07:	68 30 04 00 00       	push   $0x430
f0113d0c:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113d11:	e8 fd c6 fe ff       	call   f0100413 <_warn>
f0113d16:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d19:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d1d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d21:	74 04                	je     f0113d27 <test_share_chunk+0x6b1>
f0113d23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d27:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113d2b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113d2f:	0f 84 92 00 00 00    	je     f0113dc7 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113d35:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113d3c:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113d43:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0113d4a:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113d51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113d54:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113d57:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113d5e:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113d65:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d68:	8a 00                	mov    (%eax),%al
f0113d6a:	3c 41                	cmp    $0x41,%al
f0113d6c:	75 2d                	jne    f0113d9b <test_share_chunk+0x725>
f0113d6e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d71:	8a 00                	mov    (%eax),%al
f0113d73:	3c 41                	cmp    $0x41,%al
f0113d75:	75 24                	jne    f0113d9b <test_share_chunk+0x725>
f0113d77:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113d7a:	8a 00                	mov    (%eax),%al
f0113d7c:	3c 41                	cmp    $0x41,%al
f0113d7e:	75 1b                	jne    f0113d9b <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113d80:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113d83:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113d85:	3c 44                	cmp    $0x44,%al
f0113d87:	75 12                	jne    f0113d9b <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113d89:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113d8c:	8a 00                	mov    (%eax),%al
f0113d8e:	3c 44                	cmp    $0x44,%al
f0113d90:	75 09                	jne    f0113d9b <test_share_chunk+0x725>
f0113d92:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113d95:	8a 00                	mov    (%eax),%al
f0113d97:	3c 44                	cmp    $0x44,%al
f0113d99:	74 1e                	je     f0113db9 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113d9b:	83 ec 04             	sub    $0x4,%esp
f0113d9e:	68 54 a3 13 f0       	push   $0xf013a354
f0113da3:	68 42 04 00 00       	push   $0x442
f0113da8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113dad:	e8 61 c6 fe ff       	call   f0100413 <_warn>
f0113db2:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113db5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113db9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dbd:	74 04                	je     f0113dc3 <test_share_chunk+0x74d>
f0113dbf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113dc3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113dc7:	83 ec 0c             	sub    $0xc,%esp
f0113dca:	68 c6 99 13 f0       	push   $0xf01399c6
f0113dcf:	e8 3a cf fe ff       	call   f0100d0e <cprintf>
f0113dd4:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113dd7:	83 ec 0c             	sub    $0xc,%esp
f0113dda:	68 60 a4 13 f0       	push   $0xf013a460
f0113ddf:	e8 2a cf fe ff       	call   f0100d0e <cprintf>
f0113de4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113de7:	e8 b1 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113dec:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113def:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113df2:	89 d0                	mov    %edx,%eax
f0113df4:	01 c0                	add    %eax,%eax
f0113df6:	01 d0                	add    %edx,%eax
f0113df8:	01 c0                	add    %eax,%eax
f0113dfa:	01 d0                	add    %edx,%eax
f0113dfc:	83 ec 0c             	sub    $0xc,%esp
f0113dff:	6a 04                	push   $0x4
f0113e01:	50                   	push   %eax
f0113e02:	68 00 fc 3f 00       	push   $0x3ffc00
f0113e07:	68 00 fc 09 00       	push   $0x9fc00
f0113e0c:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e0f:	e8 fe 4b ff ff       	call   f0108a12 <share_chunk>
f0113e14:	83 c4 20             	add    $0x20,%esp
f0113e17:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e1a:	e8 7e 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113e1f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113e22:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113e26:	75 0b                	jne    f0113e33 <test_share_chunk+0x7bd>
f0113e28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e2b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e2e:	83 f8 01             	cmp    $0x1,%eax
f0113e31:	74 28                	je     f0113e5b <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113e33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e36:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e39:	83 ec 0c             	sub    $0xc,%esp
f0113e3c:	50                   	push   %eax
f0113e3d:	ff 75 8c             	pushl  -0x74(%ebp)
f0113e40:	68 d4 a3 13 f0       	push   $0xf013a3d4
f0113e45:	68 58 04 00 00       	push   $0x458
f0113e4a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113e4f:	e8 bf c5 fe ff       	call   f0100413 <_warn>
f0113e54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e5b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e5f:	74 04                	je     f0113e65 <test_share_chunk+0x7ef>
f0113e61:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e65:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113e69:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113e70:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e73:	89 d0                	mov    %edx,%eax
f0113e75:	01 c0                	add    %eax,%eax
f0113e77:	01 d0                	add    %edx,%eax
f0113e79:	c1 e0 02             	shl    $0x2,%eax
f0113e7c:	83 ec 08             	sub    $0x8,%esp
f0113e7f:	6a 02                	push   $0x2
f0113e81:	6a 07                	push   $0x7
f0113e83:	6a 07                	push   $0x7
f0113e85:	6a 07                	push   $0x7
f0113e87:	6a 05                	push   $0x5
f0113e89:	6a ff                	push   $0xffffffff
f0113e8b:	50                   	push   %eax
f0113e8c:	68 00 f0 3f 00       	push   $0x3ff000
f0113e91:	68 00 f0 09 00       	push   $0x9f000
f0113e96:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e99:	e8 d6 22 00 00       	call   f0116174 <CCP>
f0113e9e:	83 c4 30             	add    $0x30,%esp
f0113ea1:	85 c0                	test   %eax,%eax
f0113ea3:	75 25                	jne    f0113eca <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ea5:	83 ec 04             	sub    $0x4,%esp
f0113ea8:	68 0c a3 13 f0       	push   $0xf013a30c
f0113ead:	68 61 04 00 00       	push   $0x461
f0113eb2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113eb7:	e8 57 c5 fe ff       	call   f0100413 <_warn>
f0113ebc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ebf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113ec3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113eca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ece:	74 04                	je     f0113ed4 <test_share_chunk+0x85e>
f0113ed0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ed4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113ed8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113edb:	c1 e0 02             	shl    $0x2,%eax
f0113ede:	83 ec 08             	sub    $0x8,%esp
f0113ee1:	6a 02                	push   $0x2
f0113ee3:	6a 07                	push   $0x7
f0113ee5:	6a 07                	push   $0x7
f0113ee7:	6a 07                	push   $0x7
f0113ee9:	6a 05                	push   $0x5
f0113eeb:	6a 03                	push   $0x3
f0113eed:	50                   	push   %eax
f0113eee:	68 00 f0 3f 00       	push   $0x3ff000
f0113ef3:	68 00 f0 09 00       	push   $0x9f000
f0113ef8:	ff 75 cc             	pushl  -0x34(%ebp)
f0113efb:	e8 74 22 00 00       	call   f0116174 <CCP>
f0113f00:	83 c4 30             	add    $0x30,%esp
f0113f03:	85 c0                	test   %eax,%eax
f0113f05:	75 1e                	jne    f0113f25 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f07:	83 ec 04             	sub    $0x4,%esp
f0113f0a:	68 0c a3 13 f0       	push   $0xf013a30c
f0113f0f:	68 6a 04 00 00       	push   $0x46a
f0113f14:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113f19:	e8 f5 c4 fe ff       	call   f0100413 <_warn>
f0113f1e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f29:	74 04                	je     f0113f2f <test_share_chunk+0x8b9>
f0113f2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113f33:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f36:	c1 e0 03             	shl    $0x3,%eax
f0113f39:	83 ec 08             	sub    $0x8,%esp
f0113f3c:	6a 02                	push   $0x2
f0113f3e:	6a 07                	push   $0x7
f0113f40:	6a 07                	push   $0x7
f0113f42:	6a 07                	push   $0x7
f0113f44:	6a 05                	push   $0x5
f0113f46:	6a 04                	push   $0x4
f0113f48:	50                   	push   %eax
f0113f49:	68 00 00 40 00       	push   $0x400000
f0113f4e:	68 00 00 0a 00       	push   $0xa0000
f0113f53:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f56:	e8 19 22 00 00       	call   f0116174 <CCP>
f0113f5b:	83 c4 30             	add    $0x30,%esp
f0113f5e:	85 c0                	test   %eax,%eax
f0113f60:	75 1e                	jne    f0113f80 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f62:	83 ec 04             	sub    $0x4,%esp
f0113f65:	68 0c a3 13 f0       	push   $0xf013a30c
f0113f6a:	68 72 04 00 00       	push   $0x472
f0113f6f:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0113f74:	e8 9a c4 fe ff       	call   f0100413 <_warn>
f0113f79:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f7c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f80:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f84:	74 04                	je     f0113f8a <test_share_chunk+0x914>
f0113f86:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f8a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113f8e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113f92:	0f 84 b2 00 00 00    	je     f011404a <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113f98:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113f9f:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113fa6:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113fad:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113fb4:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113fbb:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113fc2:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113fc9:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113fd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fd3:	8a 00                	mov    (%eax),%al
f0113fd5:	3c 44                	cmp    $0x44,%al
f0113fd7:	75 45                	jne    f011401e <test_share_chunk+0x9a8>
f0113fd9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fdc:	8a 00                	mov    (%eax),%al
f0113fde:	3c 44                	cmp    $0x44,%al
f0113fe0:	75 3c                	jne    f011401e <test_share_chunk+0x9a8>
f0113fe2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113fe5:	8a 00                	mov    (%eax),%al
f0113fe7:	3c 44                	cmp    $0x44,%al
f0113fe9:	75 33                	jne    f011401e <test_share_chunk+0x9a8>
f0113feb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113fee:	8a 00                	mov    (%eax),%al
f0113ff0:	3c 44                	cmp    $0x44,%al
f0113ff2:	75 2a                	jne    f011401e <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113ff4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113ff7:	8a 10                	mov    (%eax),%dl
f0113ff9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113ffc:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113ffe:	38 c2                	cmp    %al,%dl
f0114000:	75 1c                	jne    f011401e <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114002:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114005:	8a 10                	mov    (%eax),%dl
f0114007:	8b 45 88             	mov    -0x78(%ebp),%eax
f011400a:	8a 00                	mov    (%eax),%al
f011400c:	38 c2                	cmp    %al,%dl
f011400e:	75 0e                	jne    f011401e <test_share_chunk+0x9a8>
f0114010:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114013:	8a 10                	mov    (%eax),%dl
f0114015:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114018:	8a 00                	mov    (%eax),%al
f011401a:	38 c2                	cmp    %al,%dl
f011401c:	74 1e                	je     f011403c <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011401e:	83 ec 04             	sub    $0x4,%esp
f0114021:	68 54 a3 13 f0       	push   $0xf013a354
f0114026:	68 87 04 00 00       	push   $0x487
f011402b:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114030:	e8 de c3 fe ff       	call   f0100413 <_warn>
f0114035:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114038:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011403c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114040:	74 04                	je     f0114046 <test_share_chunk+0x9d0>
f0114042:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114046:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f011404a:	83 ec 0c             	sub    $0xc,%esp
f011404d:	68 98 a4 13 f0       	push   $0xf013a498
f0114052:	e8 b7 cc fe ff       	call   f0100d0e <cprintf>
f0114057:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f011405a:	83 ec 08             	sub    $0x8,%esp
f011405d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114060:	68 a8 a4 13 f0       	push   $0xf013a4a8
f0114065:	e8 a4 cc fe ff       	call   f0100d0e <cprintf>
f011406a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011406d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114071:	75 10                	jne    f0114083 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114073:	83 ec 0c             	sub    $0xc,%esp
f0114076:	68 d8 a4 13 f0       	push   $0xf013a4d8
f011407b:	e8 8e cc fe ff       	call   f0100d0e <cprintf>
f0114080:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114083:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0114088:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011408b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011408e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114091:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114096:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114099:	5b                   	pop    %ebx
f011409a:	5e                   	pop    %esi
f011409b:	5f                   	pop    %edi
f011409c:	5d                   	pop    %ebp
f011409d:	c3                   	ret    

f011409e <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011409e:	55                   	push   %ebp
f011409f:	89 e5                	mov    %esp,%ebp
f01140a1:	57                   	push   %edi
f01140a2:	56                   	push   %esi
f01140a3:	53                   	push   %ebx
f01140a4:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01140aa:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01140b0:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f01140b5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01140ba:	89 c7                	mov    %eax,%edi
f01140bc:	89 de                	mov    %ebx,%esi
f01140be:	89 d1                	mov    %edx,%ecx
f01140c0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01140c2:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01140c8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01140cd:	b0 00                	mov    $0x0,%al
f01140cf:	89 d7                	mov    %edx,%edi
f01140d1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01140d3:	6a 00                	push   $0x0
f01140d5:	6a 0a                	push   $0xa
f01140d7:	6a 14                	push   $0x14
f01140d9:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01140df:	50                   	push   %eax
f01140e0:	e8 7e 4d ff ff       	call   f0108e63 <env_create>
f01140e5:	83 c4 10             	add    $0x10,%esp
f01140e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01140eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01140ee:	8b 40 5c             	mov    0x5c(%eax),%eax
f01140f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f01140f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01140f7:	8b 40 60             	mov    0x60(%eax),%eax
f01140fa:	89 45 90             	mov    %eax,-0x70(%ebp)
f01140fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114100:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114103:	83 ec 0c             	sub    $0xc,%esp
f0114106:	ff 75 d0             	pushl  -0x30(%ebp)
f0114109:	e8 32 20 00 00       	call   f0116140 <ClearUserSpace>
f011410e:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114111:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114118:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f011411f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114126:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011412a:	83 ec 0c             	sub    $0xc,%esp
f011412d:	68 14 a5 13 f0       	push   $0xf013a514
f0114132:	e8 d7 cb fe ff       	call   f0100d0e <cprintf>
f0114137:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f011413a:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114141:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0114148:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011414b:	8a 00                	mov    (%eax),%al
f011414d:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114153:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114156:	8a 00                	mov    (%eax),%al
f0114158:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011415e:	83 ec 08             	sub    $0x8,%esp
f0114161:	68 00 f0 bf ef       	push   $0xefbff000
f0114166:	ff 75 d0             	pushl  -0x30(%ebp)
f0114169:	e8 b3 1f 00 00       	call   f0116121 <GP>
f011416e:	83 c4 10             	add    $0x10,%esp
f0114171:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114174:	e8 24 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114179:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f011417c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011417f:	c1 e0 02             	shl    $0x2,%eax
f0114182:	6a 02                	push   $0x2
f0114184:	50                   	push   %eax
f0114185:	68 00 f0 bf ef       	push   $0xefbff000
f011418a:	ff 75 d0             	pushl  -0x30(%ebp)
f011418d:	e8 93 49 ff ff       	call   f0108b25 <allocate_chunk>
f0114192:	83 c4 10             	add    $0x10,%esp
f0114195:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114198:	e8 00 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011419d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01141a0:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01141a4:	75 08                	jne    f01141ae <test_allocate_chunk+0x110>
f01141a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141a9:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01141ac:	74 2a                	je     f01141d8 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01141ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141b1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141b4:	83 ec 08             	sub    $0x8,%esp
f01141b7:	6a 00                	push   $0x0
f01141b9:	50                   	push   %eax
f01141ba:	ff 75 b0             	pushl  -0x50(%ebp)
f01141bd:	68 40 a5 13 f0       	push   $0xf013a540
f01141c2:	68 c3 04 00 00       	push   $0x4c3
f01141c7:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01141cc:	e8 42 c2 fe ff       	call   f0100413 <_warn>
f01141d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141dc:	74 04                	je     f01141e2 <test_allocate_chunk+0x144>
f01141de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141e6:	e8 b2 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01141eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01141ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01141f1:	01 c0                	add    %eax,%eax
f01141f3:	89 c1                	mov    %eax,%ecx
f01141f5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01141f8:	89 d0                	mov    %edx,%eax
f01141fa:	c1 e0 02             	shl    $0x2,%eax
f01141fd:	01 d0                	add    %edx,%eax
f01141ff:	f7 d8                	neg    %eax
f0114201:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114206:	6a 02                	push   $0x2
f0114208:	51                   	push   %ecx
f0114209:	50                   	push   %eax
f011420a:	ff 75 d0             	pushl  -0x30(%ebp)
f011420d:	e8 13 49 ff ff       	call   f0108b25 <allocate_chunk>
f0114212:	83 c4 10             	add    $0x10,%esp
f0114215:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114218:	e8 80 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011421d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114220:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114224:	75 08                	jne    f011422e <test_allocate_chunk+0x190>
f0114226:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114229:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011422c:	74 2a                	je     f0114258 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011422e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114231:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114234:	83 ec 08             	sub    $0x8,%esp
f0114237:	6a 00                	push   $0x0
f0114239:	50                   	push   %eax
f011423a:	ff 75 b0             	pushl  -0x50(%ebp)
f011423d:	68 40 a5 13 f0       	push   $0xf013a540
f0114242:	68 d1 04 00 00       	push   $0x4d1
f0114247:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011424c:	e8 c2 c1 fe ff       	call   f0100413 <_warn>
f0114251:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114254:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114258:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011425c:	74 04                	je     f0114262 <test_allocate_chunk+0x1c4>
f011425e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114262:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114266:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114269:	c1 e0 02             	shl    $0x2,%eax
f011426c:	83 ec 08             	sub    $0x8,%esp
f011426f:	6a 03                	push   $0x3
f0114271:	6a 00                	push   $0x0
f0114273:	6a 00                	push   $0x0
f0114275:	68 ff 0f 00 00       	push   $0xfff
f011427a:	ff 75 b8             	pushl  -0x48(%ebp)
f011427d:	6a 01                	push   $0x1
f011427f:	50                   	push   %eax
f0114280:	68 00 f0 bf ef       	push   $0xefbff000
f0114285:	6a 00                	push   $0x0
f0114287:	ff 75 d0             	pushl  -0x30(%ebp)
f011428a:	e8 e5 1e 00 00       	call   f0116174 <CCP>
f011428f:	83 c4 30             	add    $0x30,%esp
f0114292:	85 c0                	test   %eax,%eax
f0114294:	75 1e                	jne    f01142b4 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114296:	83 ec 04             	sub    $0x4,%esp
f0114299:	68 a8 a5 13 f0       	push   $0xf013a5a8
f011429e:	68 d9 04 00 00       	push   $0x4d9
f01142a3:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01142a8:	e8 66 c1 fe ff       	call   f0100413 <_warn>
f01142ad:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142b0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142b4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142b8:	74 04                	je     f01142be <test_allocate_chunk+0x220>
f01142ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142be:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01142c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142c5:	8a 10                	mov    (%eax),%dl
f01142c7:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01142cd:	38 c2                	cmp    %al,%dl
f01142cf:	75 0f                	jne    f01142e0 <test_allocate_chunk+0x242>
f01142d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142d4:	8a 10                	mov    (%eax),%dl
f01142d6:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01142dc:	38 c2                	cmp    %al,%dl
f01142de:	74 1e                	je     f01142fe <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01142e0:	83 ec 04             	sub    $0x4,%esp
f01142e3:	68 f4 a5 13 f0       	push   $0xf013a5f4
f01142e8:	68 e1 04 00 00       	push   $0x4e1
f01142ed:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01142f2:	e8 1c c1 fe ff       	call   f0100413 <_warn>
f01142f7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114302:	74 04                	je     f0114308 <test_allocate_chunk+0x26a>
f0114304:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114308:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011430c:	83 ec 0c             	sub    $0xc,%esp
f011430f:	68 89 a3 13 f0       	push   $0xf013a389
f0114314:	e8 f5 c9 fe ff       	call   f0100d0e <cprintf>
f0114319:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f011431c:	83 ec 0c             	sub    $0xc,%esp
f011431f:	68 2c a6 13 f0       	push   $0xf013a62c
f0114324:	e8 e5 c9 fe ff       	call   f0100d0e <cprintf>
f0114329:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011432c:	e8 6c 88 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114331:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114334:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114337:	c1 e0 05             	shl    $0x5,%eax
f011433a:	68 02 0e 00 00       	push   $0xe02
f011433f:	50                   	push   %eax
f0114340:	6a 00                	push   $0x0
f0114342:	ff 75 d0             	pushl  -0x30(%ebp)
f0114345:	e8 db 47 ff ff       	call   f0108b25 <allocate_chunk>
f011434a:	83 c4 10             	add    $0x10,%esp
f011434d:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114350:	e8 48 88 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114355:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114358:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011435c:	75 36                	jne    f0114394 <test_allocate_chunk+0x2f6>
f011435e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114361:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114364:	89 c1                	mov    %eax,%ecx
f0114366:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114369:	c1 e0 05             	shl    $0x5,%eax
f011436c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011436f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114376:	99                   	cltd   
f0114377:	f7 fe                	idiv   %esi
f0114379:	89 c3                	mov    %eax,%ebx
f011437b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011437e:	c1 e0 05             	shl    $0x5,%eax
f0114381:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114384:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011438b:	99                   	cltd   
f011438c:	f7 fe                	idiv   %esi
f011438e:	01 d8                	add    %ebx,%eax
f0114390:	39 c1                	cmp    %eax,%ecx
f0114392:	74 54                	je     f01143e8 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114394:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114397:	c1 e0 05             	shl    $0x5,%eax
f011439a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011439d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01143a4:	99                   	cltd   
f01143a5:	f7 ff                	idiv   %edi
f01143a7:	89 c1                	mov    %eax,%ecx
f01143a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143ac:	c1 e0 05             	shl    $0x5,%eax
f01143af:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01143b2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01143b9:	99                   	cltd   
f01143ba:	f7 fe                	idiv   %esi
f01143bc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01143bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143c2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01143c5:	83 ec 08             	sub    $0x8,%esp
f01143c8:	52                   	push   %edx
f01143c9:	50                   	push   %eax
f01143ca:	ff 75 a8             	pushl  -0x58(%ebp)
f01143cd:	68 6c a6 13 f0       	push   $0xf013a66c
f01143d2:	68 f6 04 00 00       	push   $0x4f6
f01143d7:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01143dc:	e8 32 c0 fe ff       	call   f0100413 <_warn>
f01143e1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143ec:	74 04                	je     f01143f2 <test_allocate_chunk+0x354>
f01143ee:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01143f6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01143fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114400:	c1 e0 05             	shl    $0x5,%eax
f0114403:	83 ec 08             	sub    $0x8,%esp
f0114406:	6a 03                	push   $0x3
f0114408:	6a 00                	push   $0x0
f011440a:	6a 00                	push   $0x0
f011440c:	68 07 0e 00 00       	push   $0xe07
f0114411:	68 03 0e 00 00       	push   $0xe03
f0114416:	6a 01                	push   $0x1
f0114418:	50                   	push   %eax
f0114419:	6a 00                	push   $0x0
f011441b:	6a 00                	push   $0x0
f011441d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114420:	e8 4f 1d 00 00       	call   f0116174 <CCP>
f0114425:	83 c4 30             	add    $0x30,%esp
f0114428:	85 c0                	test   %eax,%eax
f011442a:	75 25                	jne    f0114451 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011442c:	83 ec 04             	sub    $0x4,%esp
f011442f:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0114434:	68 ff 04 00 00       	push   $0x4ff
f0114439:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011443e:	e8 d0 bf fe ff       	call   f0100413 <_warn>
f0114443:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114446:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011444a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114451:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114455:	74 04                	je     f011445b <test_allocate_chunk+0x3bd>
f0114457:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011445b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011445f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114463:	74 5a                	je     f01144bf <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114465:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114468:	01 c0                	add    %eax,%eax
f011446a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011446d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114470:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114473:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114476:	01 c0                	add    %eax,%eax
f0114478:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011447b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011447e:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114481:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114484:	8a 00                	mov    (%eax),%al
f0114486:	3c 4b                	cmp    $0x4b,%al
f0114488:	75 09                	jne    f0114493 <test_allocate_chunk+0x3f5>
f011448a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011448d:	8a 00                	mov    (%eax),%al
f011448f:	3c 4d                	cmp    $0x4d,%al
f0114491:	74 1e                	je     f01144b1 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114493:	83 ec 04             	sub    $0x4,%esp
f0114496:	68 f4 a5 13 f0       	push   $0xf013a5f4
f011449b:	68 0d 05 00 00       	push   $0x50d
f01144a0:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01144a5:	e8 69 bf fe ff       	call   f0100413 <_warn>
f01144aa:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01144ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01144b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144b5:	74 04                	je     f01144bb <test_allocate_chunk+0x41d>
f01144b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01144bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01144bf:	83 ec 0c             	sub    $0xc,%esp
f01144c2:	68 63 99 13 f0       	push   $0xf0139963
f01144c7:	e8 42 c8 fe ff       	call   f0100d0e <cprintf>
f01144cc:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01144cf:	83 ec 0c             	sub    $0xc,%esp
f01144d2:	68 cc a6 13 f0       	push   $0xf013a6cc
f01144d7:	e8 32 c8 fe ff       	call   f0100d0e <cprintf>
f01144dc:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01144df:	e8 b9 86 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01144e4:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01144e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144ea:	c1 e0 06             	shl    $0x6,%eax
f01144ed:	89 c2                	mov    %eax,%edx
f01144ef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144f2:	c1 e0 05             	shl    $0x5,%eax
f01144f5:	6a 00                	push   $0x0
f01144f7:	52                   	push   %edx
f01144f8:	50                   	push   %eax
f01144f9:	ff 75 d0             	pushl  -0x30(%ebp)
f01144fc:	e8 24 46 ff ff       	call   f0108b25 <allocate_chunk>
f0114501:	83 c4 10             	add    $0x10,%esp
f0114504:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114507:	e8 91 86 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011450c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f011450f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114513:	75 36                	jne    f011454b <test_allocate_chunk+0x4ad>
f0114515:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114518:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011451b:	89 c1                	mov    %eax,%ecx
f011451d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114520:	c1 e0 06             	shl    $0x6,%eax
f0114523:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114526:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011452d:	99                   	cltd   
f011452e:	f7 ff                	idiv   %edi
f0114530:	89 c3                	mov    %eax,%ebx
f0114532:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114535:	c1 e0 06             	shl    $0x6,%eax
f0114538:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011453b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114542:	99                   	cltd   
f0114543:	f7 fe                	idiv   %esi
f0114545:	01 d8                	add    %ebx,%eax
f0114547:	39 c1                	cmp    %eax,%ecx
f0114549:	74 54                	je     f011459f <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011454b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011454e:	c1 e0 06             	shl    $0x6,%eax
f0114551:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114554:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011455b:	99                   	cltd   
f011455c:	f7 fb                	idiv   %ebx
f011455e:	89 c1                	mov    %eax,%ecx
f0114560:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114563:	c1 e0 06             	shl    $0x6,%eax
f0114566:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114569:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114570:	99                   	cltd   
f0114571:	f7 ff                	idiv   %edi
f0114573:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114576:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114579:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011457c:	83 ec 08             	sub    $0x8,%esp
f011457f:	52                   	push   %edx
f0114580:	50                   	push   %eax
f0114581:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114584:	68 6c a6 13 f0       	push   $0xf013a66c
f0114589:	68 23 05 00 00       	push   $0x523
f011458e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114593:	e8 7b be fe ff       	call   f0100413 <_warn>
f0114598:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011459b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011459f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145a3:	74 04                	je     f01145a9 <test_allocate_chunk+0x50b>
f01145a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145a9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145ad:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01145b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145b7:	c1 e0 06             	shl    $0x6,%eax
f01145ba:	89 c2                	mov    %eax,%edx
f01145bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145bf:	c1 e0 05             	shl    $0x5,%eax
f01145c2:	83 ec 08             	sub    $0x8,%esp
f01145c5:	6a 03                	push   $0x3
f01145c7:	6a 00                	push   $0x0
f01145c9:	6a 00                	push   $0x0
f01145cb:	68 07 0e 00 00       	push   $0xe07
f01145d0:	6a 01                	push   $0x1
f01145d2:	6a 01                	push   $0x1
f01145d4:	52                   	push   %edx
f01145d5:	50                   	push   %eax
f01145d6:	6a 00                	push   $0x0
f01145d8:	ff 75 d0             	pushl  -0x30(%ebp)
f01145db:	e8 94 1b 00 00       	call   f0116174 <CCP>
f01145e0:	83 c4 30             	add    $0x30,%esp
f01145e3:	85 c0                	test   %eax,%eax
f01145e5:	75 25                	jne    f011460c <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01145e7:	83 ec 04             	sub    $0x4,%esp
f01145ea:	68 a8 a5 13 f0       	push   $0xf013a5a8
f01145ef:	68 2c 05 00 00       	push   $0x52c
f01145f4:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01145f9:	e8 15 be fe ff       	call   f0100413 <_warn>
f01145fe:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114601:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114605:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011460c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114610:	74 04                	je     f0114616 <test_allocate_chunk+0x578>
f0114612:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114616:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011461a:	83 ec 0c             	sub    $0xc,%esp
f011461d:	68 c6 99 13 f0       	push   $0xf01399c6
f0114622:	e8 e7 c6 fe ff       	call   f0100d0e <cprintf>
f0114627:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011462a:	83 ec 0c             	sub    $0xc,%esp
f011462d:	68 0c a7 13 f0       	push   $0xf013a70c
f0114632:	e8 d7 c6 fe ff       	call   f0100d0e <cprintf>
f0114637:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011463a:	e8 5e 85 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011463f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114642:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114645:	c1 e0 06             	shl    $0x6,%eax
f0114648:	68 06 0e 00 00       	push   $0xe06
f011464d:	50                   	push   %eax
f011464e:	68 00 00 00 80       	push   $0x80000000
f0114653:	ff 75 d0             	pushl  -0x30(%ebp)
f0114656:	e8 ca 44 ff ff       	call   f0108b25 <allocate_chunk>
f011465b:	83 c4 10             	add    $0x10,%esp
f011465e:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114661:	e8 37 85 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114666:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114669:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f011466d:	75 36                	jne    f01146a5 <test_allocate_chunk+0x607>
f011466f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114672:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114675:	89 c1                	mov    %eax,%ecx
f0114677:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011467a:	c1 e0 06             	shl    $0x6,%eax
f011467d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114680:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114687:	99                   	cltd   
f0114688:	f7 fb                	idiv   %ebx
f011468a:	89 c3                	mov    %eax,%ebx
f011468c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011468f:	c1 e0 06             	shl    $0x6,%eax
f0114692:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114695:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011469c:	99                   	cltd   
f011469d:	f7 fe                	idiv   %esi
f011469f:	01 d8                	add    %ebx,%eax
f01146a1:	39 c1                	cmp    %eax,%ecx
f01146a3:	74 54                	je     f01146f9 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01146a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146a8:	c1 e0 06             	shl    $0x6,%eax
f01146ab:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01146ae:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01146b5:	99                   	cltd   
f01146b6:	f7 ff                	idiv   %edi
f01146b8:	89 c1                	mov    %eax,%ecx
f01146ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146bd:	c1 e0 06             	shl    $0x6,%eax
f01146c0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146c3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01146ca:	99                   	cltd   
f01146cb:	f7 fb                	idiv   %ebx
f01146cd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01146d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146d3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146d6:	83 ec 08             	sub    $0x8,%esp
f01146d9:	52                   	push   %edx
f01146da:	50                   	push   %eax
f01146db:	ff 75 9c             	pushl  -0x64(%ebp)
f01146de:	68 6c a6 13 f0       	push   $0xf013a66c
f01146e3:	68 42 05 00 00       	push   $0x542
f01146e8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01146ed:	e8 21 bd fe ff       	call   f0100413 <_warn>
f01146f2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146f9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146fd:	74 04                	je     f0114703 <test_allocate_chunk+0x665>
f01146ff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114703:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114707:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011470e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114711:	c1 e0 06             	shl    $0x6,%eax
f0114714:	83 ec 08             	sub    $0x8,%esp
f0114717:	6a 03                	push   $0x3
f0114719:	6a 00                	push   $0x0
f011471b:	6a 00                	push   $0x0
f011471d:	68 07 0e 00 00       	push   $0xe07
f0114722:	68 07 0e 00 00       	push   $0xe07
f0114727:	6a 01                	push   $0x1
f0114729:	50                   	push   %eax
f011472a:	68 00 00 00 80       	push   $0x80000000
f011472f:	6a 00                	push   $0x0
f0114731:	ff 75 d0             	pushl  -0x30(%ebp)
f0114734:	e8 3b 1a 00 00       	call   f0116174 <CCP>
f0114739:	83 c4 30             	add    $0x30,%esp
f011473c:	85 c0                	test   %eax,%eax
f011473e:	75 25                	jne    f0114765 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114740:	83 ec 04             	sub    $0x4,%esp
f0114743:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0114748:	68 4b 05 00 00       	push   $0x54b
f011474d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114752:	e8 bc bc fe ff       	call   f0100413 <_warn>
f0114757:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011475a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011475e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114765:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114769:	74 04                	je     f011476f <test_allocate_chunk+0x6d1>
f011476b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011476f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114773:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114777:	74 6f                	je     f01147e8 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114779:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011477c:	01 c0                	add    %eax,%eax
f011477e:	05 00 00 00 80       	add    $0x80000000,%eax
f0114783:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114786:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114789:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f011478c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011478f:	89 d0                	mov    %edx,%eax
f0114791:	c1 e0 02             	shl    $0x2,%eax
f0114794:	01 d0                	add    %edx,%eax
f0114796:	01 c0                	add    %eax,%eax
f0114798:	01 d0                	add    %edx,%eax
f011479a:	01 c0                	add    %eax,%eax
f011479c:	05 00 00 00 80       	add    $0x80000000,%eax
f01147a1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01147a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147a7:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01147aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147ad:	8a 00                	mov    (%eax),%al
f01147af:	3c 4b                	cmp    $0x4b,%al
f01147b1:	75 09                	jne    f01147bc <test_allocate_chunk+0x71e>
f01147b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147b6:	8a 00                	mov    (%eax),%al
f01147b8:	3c 4d                	cmp    $0x4d,%al
f01147ba:	74 1e                	je     f01147da <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01147bc:	83 ec 04             	sub    $0x4,%esp
f01147bf:	68 f4 a5 13 f0       	push   $0xf013a5f4
f01147c4:	68 59 05 00 00       	push   $0x559
f01147c9:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01147ce:	e8 40 bc fe ff       	call   f0100413 <_warn>
f01147d3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147d6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147da:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147de:	74 04                	je     f01147e4 <test_allocate_chunk+0x746>
f01147e0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01147e4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01147e8:	83 ec 0c             	sub    $0xc,%esp
f01147eb:	68 98 a4 13 f0       	push   $0xf013a498
f01147f0:	e8 19 c5 fe ff       	call   f0100d0e <cprintf>
f01147f5:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01147f8:	83 ec 0c             	sub    $0xc,%esp
f01147fb:	68 48 a7 13 f0       	push   $0xf013a748
f0114800:	e8 09 c5 fe ff       	call   f0100d0e <cprintf>
f0114805:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114808:	e8 90 83 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011480d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114810:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114813:	89 d0                	mov    %edx,%eax
f0114815:	01 c0                	add    %eax,%eax
f0114817:	01 d0                	add    %edx,%eax
f0114819:	01 c0                	add    %eax,%eax
f011481b:	01 d0                	add    %edx,%eax
f011481d:	68 04 0e 00 00       	push   $0xe04
f0114822:	50                   	push   %eax
f0114823:	68 00 fc 3f 40       	push   $0x403ffc00
f0114828:	ff 75 d0             	pushl  -0x30(%ebp)
f011482b:	e8 f5 42 ff ff       	call   f0108b25 <allocate_chunk>
f0114830:	83 c4 10             	add    $0x10,%esp
f0114833:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114836:	e8 62 83 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011483b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011483e:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114842:	75 0b                	jne    f011484f <test_allocate_chunk+0x7b1>
f0114844:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114847:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011484a:	83 f8 05             	cmp    $0x5,%eax
f011484d:	74 2a                	je     f0114879 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f011484f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114852:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114855:	83 ec 08             	sub    $0x8,%esp
f0114858:	6a 05                	push   $0x5
f011485a:	50                   	push   %eax
f011485b:	ff 75 98             	pushl  -0x68(%ebp)
f011485e:	68 6c a6 13 f0       	push   $0xf013a66c
f0114863:	68 70 05 00 00       	push   $0x570
f0114868:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011486d:	e8 a1 bb fe ff       	call   f0100413 <_warn>
f0114872:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114875:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114879:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011487d:	74 04                	je     f0114883 <test_allocate_chunk+0x7e5>
f011487f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114883:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114887:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011488e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114891:	89 d0                	mov    %edx,%eax
f0114893:	01 c0                	add    %eax,%eax
f0114895:	01 d0                	add    %edx,%eax
f0114897:	c1 e0 02             	shl    $0x2,%eax
f011489a:	83 ec 08             	sub    $0x8,%esp
f011489d:	6a 03                	push   $0x3
f011489f:	6a 00                	push   $0x0
f01148a1:	6a 00                	push   $0x0
f01148a3:	68 07 0e 00 00       	push   $0xe07
f01148a8:	68 05 0e 00 00       	push   $0xe05
f01148ad:	6a 01                	push   $0x1
f01148af:	50                   	push   %eax
f01148b0:	68 00 f0 3f 40       	push   $0x403ff000
f01148b5:	6a 00                	push   $0x0
f01148b7:	ff 75 d0             	pushl  -0x30(%ebp)
f01148ba:	e8 b5 18 00 00       	call   f0116174 <CCP>
f01148bf:	83 c4 30             	add    $0x30,%esp
f01148c2:	85 c0                	test   %eax,%eax
f01148c4:	75 25                	jne    f01148eb <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01148c6:	83 ec 04             	sub    $0x4,%esp
f01148c9:	68 a8 a5 13 f0       	push   $0xf013a5a8
f01148ce:	68 79 05 00 00       	push   $0x579
f01148d3:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01148d8:	e8 36 bb fe ff       	call   f0100413 <_warn>
f01148dd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01148e4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01148eb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148ef:	74 04                	je     f01148f5 <test_allocate_chunk+0x857>
f01148f1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148f5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01148f9:	83 ec 0c             	sub    $0xc,%esp
f01148fc:	68 7f a7 13 f0       	push   $0xf013a77f
f0114901:	e8 08 c4 fe ff       	call   f0100d0e <cprintf>
f0114906:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114909:	83 ec 08             	sub    $0x8,%esp
f011490c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011490f:	68 90 a7 13 f0       	push   $0xf013a790
f0114914:	e8 f5 c3 fe ff       	call   f0100d0e <cprintf>
f0114919:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011491c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114920:	75 10                	jne    f0114932 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114922:	83 ec 0c             	sub    $0xc,%esp
f0114925:	68 c4 a7 13 f0       	push   $0xf013a7c4
f011492a:	e8 df c3 fe ff       	call   f0100d0e <cprintf>
f011492f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114932:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0114937:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011493a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011493d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114945:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114948:	5b                   	pop    %ebx
f0114949:	5e                   	pop    %esi
f011494a:	5f                   	pop    %edi
f011494b:	5d                   	pop    %ebp
f011494c:	c3                   	ret    

f011494d <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f011494d:	55                   	push   %ebp
f011494e:	89 e5                	mov    %esp,%ebp
f0114950:	57                   	push   %edi
f0114951:	56                   	push   %esi
f0114952:	53                   	push   %ebx
f0114953:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114959:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011495c:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f0114961:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114966:	89 c7                	mov    %eax,%edi
f0114968:	89 de                	mov    %ebx,%esi
f011496a:	89 d1                	mov    %edx,%ecx
f011496c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011496e:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114971:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114976:	b0 00                	mov    $0x0,%al
f0114978:	89 d7                	mov    %edx,%edi
f011497a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011497c:	6a 00                	push   $0x0
f011497e:	6a 0a                	push   $0xa
f0114980:	6a 14                	push   $0x14
f0114982:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114985:	50                   	push   %eax
f0114986:	e8 d8 44 ff ff       	call   f0108e63 <env_create>
f011498b:	83 c4 10             	add    $0x10,%esp
f011498e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114991:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114994:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114997:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011499a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011499d:	8b 40 60             	mov    0x60(%eax),%eax
f01149a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01149a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149a6:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01149a9:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01149b0:	75 70 20 
f01149b3:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01149ba:	00 00 00 
f01149bd:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01149c0:	b9 03 00 00 00       	mov    $0x3,%ecx
f01149c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01149ca:	89 d7                	mov    %edx,%edi
f01149cc:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01149ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01149d1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01149d4:	83 ec 08             	sub    $0x8,%esp
f01149d7:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01149dd:	52                   	push   %edx
f01149de:	50                   	push   %eax
f01149df:	e8 5b cd 01 00       	call   f013173f <ltostr>
f01149e4:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01149e7:	83 ec 04             	sub    $0x4,%esp
f01149ea:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149f0:	50                   	push   %eax
f01149f1:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01149f7:	50                   	push   %eax
f01149f8:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01149fe:	50                   	push   %eax
f01149ff:	e8 33 ce 01 00       	call   f0131837 <strcconcat>
f0114a04:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114a07:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114a0e:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114a15:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114a1c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114a23:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114a27:	83 ec 0c             	sub    $0xc,%esp
f0114a2a:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a2d:	e8 0e 17 00 00       	call   f0116140 <ClearUserSpace>
f0114a32:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114a35:	83 ec 0c             	sub    $0xc,%esp
f0114a38:	68 04 a8 13 f0       	push   $0xf013a804
f0114a3d:	e8 cc c2 fe ff       	call   f0100d0e <cprintf>
f0114a42:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114a45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a48:	c1 e0 03             	shl    $0x3,%eax
f0114a4b:	83 ec 04             	sub    $0x4,%esp
f0114a4e:	50                   	push   %eax
f0114a4f:	6a 00                	push   $0x0
f0114a51:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a54:	e8 e7 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a59:	83 c4 10             	add    $0x10,%esp
f0114a5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114a5f:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114a63:	74 23                	je     f0114a88 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114a65:	83 ec 0c             	sub    $0xc,%esp
f0114a68:	6a 03                	push   $0x3
f0114a6a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a6d:	68 38 a8 13 f0       	push   $0xf013a838
f0114a72:	68 b2 05 00 00       	push   $0x5b2
f0114a77:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114a7c:	e8 92 b9 fe ff       	call   f0100413 <_warn>
f0114a81:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a84:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a88:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a8c:	74 04                	je     f0114a92 <test_calculate_required_frames+0x145>
f0114a8e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a92:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114a96:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a99:	c1 e0 02             	shl    $0x2,%eax
f0114a9c:	83 ec 04             	sub    $0x4,%esp
f0114a9f:	50                   	push   %eax
f0114aa0:	6a 00                	push   $0x0
f0114aa2:	ff 75 d8             	pushl  -0x28(%ebp)
f0114aa5:	e8 96 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114aaa:	83 c4 10             	add    $0x10,%esp
f0114aad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114ab0:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114ab7:	74 26                	je     f0114adf <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114ab9:	83 ec 0c             	sub    $0xc,%esp
f0114abc:	68 01 04 00 00       	push   $0x401
f0114ac1:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ac4:	68 38 a8 13 f0       	push   $0xf013a838
f0114ac9:	68 bc 05 00 00       	push   $0x5bc
f0114ace:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114ad3:	e8 3b b9 fe ff       	call   f0100413 <_warn>
f0114ad8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114adb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114adf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ae3:	74 04                	je     f0114ae9 <test_calculate_required_frames+0x19c>
f0114ae5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ae9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114aed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114af0:	c1 e0 0a             	shl    $0xa,%eax
f0114af3:	83 ec 04             	sub    $0x4,%esp
f0114af6:	50                   	push   %eax
f0114af7:	6a 00                	push   $0x0
f0114af9:	ff 75 d8             	pushl  -0x28(%ebp)
f0114afc:	e8 3f 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114b01:	83 c4 10             	add    $0x10,%esp
f0114b04:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114b07:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b0a:	c1 e0 0a             	shl    $0xa,%eax
f0114b0d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114b10:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b17:	99                   	cltd   
f0114b18:	f7 fb                	idiv   %ebx
f0114b1a:	89 c1                	mov    %eax,%ecx
f0114b1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b1f:	c1 e0 0a             	shl    $0xa,%eax
f0114b22:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114b25:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b2c:	99                   	cltd   
f0114b2d:	f7 fe                	idiv   %esi
f0114b2f:	01 c8                	add    %ecx,%eax
f0114b31:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114b34:	74 4c                	je     f0114b82 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114b36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b39:	c1 e0 0a             	shl    $0xa,%eax
f0114b3c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114b3f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b46:	99                   	cltd   
f0114b47:	f7 fb                	idiv   %ebx
f0114b49:	89 c1                	mov    %eax,%ecx
f0114b4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b4e:	c1 e0 0a             	shl    $0xa,%eax
f0114b51:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114b54:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b5b:	99                   	cltd   
f0114b5c:	f7 fe                	idiv   %esi
f0114b5e:	01 c8                	add    %ecx,%eax
f0114b60:	83 ec 0c             	sub    $0xc,%esp
f0114b63:	50                   	push   %eax
f0114b64:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b67:	68 38 a8 13 f0       	push   $0xf013a838
f0114b6c:	68 c6 05 00 00       	push   $0x5c6
f0114b71:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114b76:	e8 98 b8 fe ff       	call   f0100413 <_warn>
f0114b7b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b7e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b82:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b86:	74 04                	je     f0114b8c <test_calculate_required_frames+0x23f>
f0114b88:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114b90:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114b93:	89 d0                	mov    %edx,%eax
f0114b95:	01 c0                	add    %eax,%eax
f0114b97:	01 d0                	add    %edx,%eax
f0114b99:	01 c0                	add    %eax,%eax
f0114b9b:	83 ec 04             	sub    $0x4,%esp
f0114b9e:	50                   	push   %eax
f0114b9f:	68 00 10 00 00       	push   $0x1000
f0114ba4:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ba7:	e8 94 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114bac:	83 c4 10             	add    $0x10,%esp
f0114baf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114bb2:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114bb6:	74 23                	je     f0114bdb <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114bb8:	83 ec 0c             	sub    $0xc,%esp
f0114bbb:	6a 03                	push   $0x3
f0114bbd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114bc0:	68 38 a8 13 f0       	push   $0xf013a838
f0114bc5:	68 d2 05 00 00       	push   $0x5d2
f0114bca:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114bcf:	e8 3f b8 fe ff       	call   f0100413 <_warn>
f0114bd4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114bdb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bdf:	74 04                	je     f0114be5 <test_calculate_required_frames+0x298>
f0114be1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114be5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114bec:	89 c2                	mov    %eax,%edx
f0114bee:	01 d2                	add    %edx,%edx
f0114bf0:	01 d0                	add    %edx,%eax
f0114bf2:	83 ec 04             	sub    $0x4,%esp
f0114bf5:	50                   	push   %eax
f0114bf6:	68 00 18 00 00       	push   $0x1800
f0114bfb:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bfe:	e8 3d 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c03:	83 c4 10             	add    $0x10,%esp
f0114c06:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114c09:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114c0d:	74 23                	je     f0114c32 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114c0f:	83 ec 0c             	sub    $0xc,%esp
f0114c12:	6a 03                	push   $0x3
f0114c14:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c17:	68 38 a8 13 f0       	push   $0xf013a838
f0114c1c:	68 dc 05 00 00       	push   $0x5dc
f0114c21:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114c26:	e8 e8 b7 fe ff       	call   f0100413 <_warn>
f0114c2b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c2e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c32:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c36:	74 04                	je     f0114c3c <test_calculate_required_frames+0x2ef>
f0114c38:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c3c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114c40:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114c43:	89 d0                	mov    %edx,%eax
f0114c45:	c1 e0 02             	shl    $0x2,%eax
f0114c48:	01 d0                	add    %edx,%eax
f0114c4a:	01 c0                	add    %eax,%eax
f0114c4c:	83 ec 04             	sub    $0x4,%esp
f0114c4f:	50                   	push   %eax
f0114c50:	68 00 00 40 00       	push   $0x400000
f0114c55:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c58:	e8 e3 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c5d:	83 c4 10             	add    $0x10,%esp
f0114c60:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114c63:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114c6a:	74 26                	je     f0114c92 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114c6c:	83 ec 0c             	sub    $0xc,%esp
f0114c6f:	68 03 0a 00 00       	push   $0xa03
f0114c74:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c77:	68 38 a8 13 f0       	push   $0xf013a838
f0114c7c:	68 e6 05 00 00       	push   $0x5e6
f0114c81:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114c86:	e8 88 b7 fe ff       	call   f0100413 <_warn>
f0114c8b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c8e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c92:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c96:	74 04                	je     f0114c9c <test_calculate_required_frames+0x34f>
f0114c98:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c9c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114ca0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ca3:	01 c0                	add    %eax,%eax
f0114ca5:	83 ec 04             	sub    $0x4,%esp
f0114ca8:	50                   	push   %eax
f0114ca9:	68 00 00 70 00       	push   $0x700000
f0114cae:	ff 75 d8             	pushl  -0x28(%ebp)
f0114cb1:	e8 8a 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114cb6:	83 c4 10             	add    $0x10,%esp
f0114cb9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114cbc:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114cc3:	74 26                	je     f0114ceb <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114cc5:	83 ec 0c             	sub    $0xc,%esp
f0114cc8:	68 02 02 00 00       	push   $0x202
f0114ccd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114cd0:	68 38 a8 13 f0       	push   $0xf013a838
f0114cd5:	68 f2 05 00 00       	push   $0x5f2
f0114cda:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114cdf:	e8 2f b7 fe ff       	call   f0100413 <_warn>
f0114ce4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ce7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ceb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cef:	74 04                	je     f0114cf5 <test_calculate_required_frames+0x3a8>
f0114cf1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114cf5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114cf9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114cfc:	83 ec 04             	sub    $0x4,%esp
f0114cff:	50                   	push   %eax
f0114d00:	68 ff ff 3f 00       	push   $0x3fffff
f0114d05:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d08:	e8 33 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114d0d:	83 c4 10             	add    $0x10,%esp
f0114d10:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114d13:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114d17:	74 23                	je     f0114d3c <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114d19:	83 ec 0c             	sub    $0xc,%esp
f0114d1c:	6a 04                	push   $0x4
f0114d1e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d21:	68 38 a8 13 f0       	push   $0xf013a838
f0114d26:	68 fc 05 00 00       	push   $0x5fc
f0114d2b:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114d30:	e8 de b6 fe ff       	call   f0100413 <_warn>
f0114d35:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d38:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114d3c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d40:	74 04                	je     f0114d46 <test_calculate_required_frames+0x3f9>
f0114d42:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d46:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114d4a:	83 ec 0c             	sub    $0xc,%esp
f0114d4d:	68 89 a3 13 f0       	push   $0xf013a389
f0114d52:	e8 b7 bf fe ff       	call   f0100d0e <cprintf>
f0114d57:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114d5a:	83 ec 0c             	sub    $0xc,%esp
f0114d5d:	68 90 a8 13 f0       	push   $0xf013a890
f0114d62:	e8 a7 bf fe ff       	call   f0100d0e <cprintf>
f0114d67:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114d6a:	83 ec 04             	sub    $0x4,%esp
f0114d6d:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114d73:	50                   	push   %eax
f0114d74:	68 42 97 13 f0       	push   $0xf0139742
f0114d79:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d7f:	50                   	push   %eax
f0114d80:	e8 b2 ca 01 00       	call   f0131837 <strcconcat>
f0114d85:	83 c4 10             	add    $0x10,%esp
f0114d88:	83 ec 0c             	sub    $0xc,%esp
f0114d8b:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114d91:	50                   	push   %eax
f0114d92:	e8 d9 bf fe ff       	call   f0100d70 <execute_command>
f0114d97:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114d9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114d9d:	c1 e0 03             	shl    $0x3,%eax
f0114da0:	83 ec 04             	sub    $0x4,%esp
f0114da3:	50                   	push   %eax
f0114da4:	6a 00                	push   $0x0
f0114da6:	ff 75 d8             	pushl  -0x28(%ebp)
f0114da9:	e8 92 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114dae:	83 c4 10             	add    $0x10,%esp
f0114db1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114db4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114dbb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114dbe:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114dc1:	74 24                	je     f0114de7 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114dc3:	83 ec 0c             	sub    $0xc,%esp
f0114dc6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114dc9:	ff 75 c8             	pushl  -0x38(%ebp)
f0114dcc:	68 38 a8 13 f0       	push   $0xf013a838
f0114dd1:	68 10 06 00 00       	push   $0x610
f0114dd6:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114ddb:	e8 33 b6 fe ff       	call   f0100413 <_warn>
f0114de0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114de3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114de7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114deb:	74 04                	je     f0114df1 <test_calculate_required_frames+0x4a4>
f0114ded:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114df1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114df5:	83 ec 04             	sub    $0x4,%esp
f0114df8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114dfe:	50                   	push   %eax
f0114dff:	68 4f 97 13 f0       	push   $0xf013974f
f0114e04:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e0a:	50                   	push   %eax
f0114e0b:	e8 27 ca 01 00       	call   f0131837 <strcconcat>
f0114e10:	83 c4 10             	add    $0x10,%esp
f0114e13:	83 ec 0c             	sub    $0xc,%esp
f0114e16:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114e1c:	50                   	push   %eax
f0114e1d:	e8 4e bf fe ff       	call   f0100d70 <execute_command>
f0114e22:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114e25:	83 ec 04             	sub    $0x4,%esp
f0114e28:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114e2e:	50                   	push   %eax
f0114e2f:	68 c4 a8 13 f0       	push   $0xf013a8c4
f0114e34:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e3a:	50                   	push   %eax
f0114e3b:	e8 f7 c9 01 00       	call   f0131837 <strcconcat>
f0114e40:	83 c4 10             	add    $0x10,%esp
f0114e43:	83 ec 0c             	sub    $0xc,%esp
f0114e46:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114e4c:	50                   	push   %eax
f0114e4d:	e8 1e bf fe ff       	call   f0100d70 <execute_command>
f0114e52:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114e55:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e58:	c1 e0 03             	shl    $0x3,%eax
f0114e5b:	83 ec 04             	sub    $0x4,%esp
f0114e5e:	50                   	push   %eax
f0114e5f:	6a 00                	push   $0x0
f0114e61:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e64:	e8 d7 3e ff ff       	call   f0108d40 <calculate_required_frames>
f0114e69:	83 c4 10             	add    $0x10,%esp
f0114e6c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114e6f:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114e76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e79:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e7c:	74 24                	je     f0114ea2 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114e7e:	83 ec 0c             	sub    $0xc,%esp
f0114e81:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114e84:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e87:	68 38 a8 13 f0       	push   $0xf013a838
f0114e8c:	68 1e 06 00 00       	push   $0x61e
f0114e91:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114e96:	e8 78 b5 fe ff       	call   f0100413 <_warn>
f0114e9b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e9e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ea2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ea6:	74 04                	je     f0114eac <test_calculate_required_frames+0x55f>
f0114ea8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114eac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114eb0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114eb3:	c1 e0 0a             	shl    $0xa,%eax
f0114eb6:	83 ec 04             	sub    $0x4,%esp
f0114eb9:	50                   	push   %eax
f0114eba:	6a 00                	push   $0x0
f0114ebc:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ebf:	e8 7c 3e ff ff       	call   f0108d40 <calculate_required_frames>
f0114ec4:	83 c4 10             	add    $0x10,%esp
f0114ec7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114eca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ecd:	c1 e0 0a             	shl    $0xa,%eax
f0114ed0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114ed3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114eda:	99                   	cltd   
f0114edb:	f7 fb                	idiv   %ebx
f0114edd:	89 c1                	mov    %eax,%ecx
f0114edf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ee2:	c1 e0 0a             	shl    $0xa,%eax
f0114ee5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114ee8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114eef:	99                   	cltd   
f0114ef0:	f7 fe                	idiv   %esi
f0114ef2:	01 c8                	add    %ecx,%eax
f0114ef4:	83 e8 05             	sub    $0x5,%eax
f0114ef7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0114efa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114efd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f00:	74 24                	je     f0114f26 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114f02:	83 ec 0c             	sub    $0xc,%esp
f0114f05:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f08:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f0b:	68 38 a8 13 f0       	push   $0xf013a838
f0114f10:	68 29 06 00 00       	push   $0x629
f0114f15:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114f1a:	e8 f4 b4 fe ff       	call   f0100413 <_warn>
f0114f1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114f26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f2a:	74 04                	je     f0114f30 <test_calculate_required_frames+0x5e3>
f0114f2c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114f34:	83 ec 04             	sub    $0x4,%esp
f0114f37:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114f3d:	50                   	push   %eax
f0114f3e:	68 d0 a8 13 f0       	push   $0xf013a8d0
f0114f43:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114f49:	50                   	push   %eax
f0114f4a:	e8 e8 c8 01 00       	call   f0131837 <strcconcat>
f0114f4f:	83 c4 10             	add    $0x10,%esp
f0114f52:	83 ec 0c             	sub    $0xc,%esp
f0114f55:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114f5b:	50                   	push   %eax
f0114f5c:	e8 0f be fe ff       	call   f0100d70 <execute_command>
f0114f61:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114f64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f67:	89 c2                	mov    %eax,%edx
f0114f69:	01 d2                	add    %edx,%edx
f0114f6b:	01 d0                	add    %edx,%eax
f0114f6d:	83 ec 04             	sub    $0x4,%esp
f0114f70:	50                   	push   %eax
f0114f71:	68 00 18 00 00       	push   $0x1800
f0114f76:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f79:	e8 c2 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0114f7e:	83 c4 10             	add    $0x10,%esp
f0114f81:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114f84:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114f8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114f8e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f91:	74 24                	je     f0114fb7 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114f93:	83 ec 0c             	sub    $0xc,%esp
f0114f96:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f99:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f9c:	68 38 a8 13 f0       	push   $0xf013a838
f0114fa1:	68 38 06 00 00       	push   $0x638
f0114fa6:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0114fab:	e8 63 b4 fe ff       	call   f0100413 <_warn>
f0114fb0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fb3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fb7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fbb:	74 04                	je     f0114fc1 <test_calculate_required_frames+0x674>
f0114fbd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fc1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114fc5:	83 ec 04             	sub    $0x4,%esp
f0114fc8:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114fce:	50                   	push   %eax
f0114fcf:	68 a8 99 13 f0       	push   $0xf01399a8
f0114fd4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114fda:	50                   	push   %eax
f0114fdb:	e8 57 c8 01 00       	call   f0131837 <strcconcat>
f0114fe0:	83 c4 10             	add    $0x10,%esp
f0114fe3:	83 ec 0c             	sub    $0xc,%esp
f0114fe6:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114fec:	50                   	push   %eax
f0114fed:	e8 7e bd fe ff       	call   f0100d70 <execute_command>
f0114ff2:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114ff5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114ff8:	89 d0                	mov    %edx,%eax
f0114ffa:	c1 e0 02             	shl    $0x2,%eax
f0114ffd:	01 d0                	add    %edx,%eax
f0114fff:	01 c0                	add    %eax,%eax
f0115001:	83 ec 04             	sub    $0x4,%esp
f0115004:	50                   	push   %eax
f0115005:	68 00 00 40 00       	push   $0x400000
f011500a:	ff 75 d8             	pushl  -0x28(%ebp)
f011500d:	e8 2e 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0115012:	83 c4 10             	add    $0x10,%esp
f0115015:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115018:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011501f:	74 26                	je     f0115047 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115021:	83 ec 0c             	sub    $0xc,%esp
f0115024:	68 03 0a 00 00       	push   $0xa03
f0115029:	ff 75 c8             	pushl  -0x38(%ebp)
f011502c:	68 38 a8 13 f0       	push   $0xf013a838
f0115031:	68 44 06 00 00       	push   $0x644
f0115036:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011503b:	e8 d3 b3 fe ff       	call   f0100413 <_warn>
f0115040:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115043:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115047:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011504b:	74 04                	je     f0115051 <test_calculate_required_frames+0x704>
f011504d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115051:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115055:	83 ec 04             	sub    $0x4,%esp
f0115058:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011505e:	50                   	push   %eax
f011505f:	68 b2 99 13 f0       	push   $0xf01399b2
f0115064:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011506a:	50                   	push   %eax
f011506b:	e8 c7 c7 01 00       	call   f0131837 <strcconcat>
f0115070:	83 c4 10             	add    $0x10,%esp
f0115073:	83 ec 0c             	sub    $0xc,%esp
f0115076:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011507c:	50                   	push   %eax
f011507d:	e8 ee bc fe ff       	call   f0100d70 <execute_command>
f0115082:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115085:	83 ec 04             	sub    $0x4,%esp
f0115088:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011508e:	50                   	push   %eax
f011508f:	68 d8 a8 13 f0       	push   $0xf013a8d8
f0115094:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011509a:	50                   	push   %eax
f011509b:	e8 97 c7 01 00       	call   f0131837 <strcconcat>
f01150a0:	83 c4 10             	add    $0x10,%esp
f01150a3:	83 ec 0c             	sub    $0xc,%esp
f01150a6:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01150ac:	50                   	push   %eax
f01150ad:	e8 be bc fe ff       	call   f0100d70 <execute_command>
f01150b2:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01150b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150b8:	01 c0                	add    %eax,%eax
f01150ba:	83 ec 04             	sub    $0x4,%esp
f01150bd:	50                   	push   %eax
f01150be:	68 00 00 70 00       	push   $0x700000
f01150c3:	ff 75 d8             	pushl  -0x28(%ebp)
f01150c6:	e8 75 3c ff ff       	call   f0108d40 <calculate_required_frames>
f01150cb:	83 c4 10             	add    $0x10,%esp
f01150ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01150d1:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01150d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01150db:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01150de:	74 24                	je     f0115104 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01150e0:	83 ec 0c             	sub    $0xc,%esp
f01150e3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01150e6:	ff 75 c8             	pushl  -0x38(%ebp)
f01150e9:	68 38 a8 13 f0       	push   $0xf013a838
f01150ee:	68 54 06 00 00       	push   $0x654
f01150f3:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01150f8:	e8 16 b3 fe ff       	call   f0100413 <_warn>
f01150fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115100:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115104:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115108:	74 04                	je     f011510e <test_calculate_required_frames+0x7c1>
f011510a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011510e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115112:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115115:	83 ec 04             	sub    $0x4,%esp
f0115118:	50                   	push   %eax
f0115119:	68 ff ff 3f 00       	push   $0x3fffff
f011511e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115121:	e8 1a 3c ff ff       	call   f0108d40 <calculate_required_frames>
f0115126:	83 c4 10             	add    $0x10,%esp
f0115129:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f011512c:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115133:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115136:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115139:	74 24                	je     f011515f <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011513b:	83 ec 0c             	sub    $0xc,%esp
f011513e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115141:	ff 75 c8             	pushl  -0x38(%ebp)
f0115144:	68 38 a8 13 f0       	push   $0xf013a838
f0115149:	68 5f 06 00 00       	push   $0x65f
f011514e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115153:	e8 bb b2 fe ff       	call   f0100413 <_warn>
f0115158:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011515b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011515f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115163:	74 04                	je     f0115169 <test_calculate_required_frames+0x81c>
f0115165:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115169:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011516d:	83 ec 0c             	sub    $0xc,%esp
f0115170:	68 63 99 13 f0       	push   $0xf0139963
f0115175:	e8 94 bb fe ff       	call   f0100d0e <cprintf>
f011517a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011517d:	83 ec 08             	sub    $0x8,%esp
f0115180:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115183:	68 e4 a8 13 f0       	push   $0xf013a8e4
f0115188:	e8 81 bb fe ff       	call   f0100d0e <cprintf>
f011518d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115190:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115194:	75 10                	jne    f01151a6 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115196:	83 ec 0c             	sub    $0xc,%esp
f0115199:	68 24 a9 13 f0       	push   $0xf013a924
f011519e:	e8 6b bb fe ff       	call   f0100d0e <cprintf>
f01151a3:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01151a6:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01151ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01151ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01151b1:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01151b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01151b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01151bc:	5b                   	pop    %ebx
f01151bd:	5e                   	pop    %esi
f01151be:	5f                   	pop    %edi
f01151bf:	5d                   	pop    %ebp
f01151c0:	c3                   	ret    

f01151c1 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01151c1:	55                   	push   %ebp
f01151c2:	89 e5                	mov    %esp,%ebp
f01151c4:	57                   	push   %edi
f01151c5:	56                   	push   %esi
f01151c6:	53                   	push   %ebx
f01151c7:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01151cd:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151d0:	bb d8 96 13 f0       	mov    $0xf01396d8,%ebx
f01151d5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01151da:	89 c7                	mov    %eax,%edi
f01151dc:	89 de                	mov    %ebx,%esi
f01151de:	89 d1                	mov    %edx,%ecx
f01151e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01151e2:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01151e5:	b9 23 00 00 00       	mov    $0x23,%ecx
f01151ea:	b0 00                	mov    $0x0,%al
f01151ec:	89 d7                	mov    %edx,%edi
f01151ee:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01151f0:	6a 00                	push   $0x0
f01151f2:	6a 0a                	push   $0xa
f01151f4:	6a 14                	push   $0x14
f01151f6:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151f9:	50                   	push   %eax
f01151fa:	e8 64 3c ff ff       	call   f0108e63 <env_create>
f01151ff:	83 c4 10             	add    $0x10,%esp
f0115202:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115205:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115208:	8b 40 5c             	mov    0x5c(%eax),%eax
f011520b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011520e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115211:	8b 40 60             	mov    0x60(%eax),%eax
f0115214:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115217:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011521a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011521d:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115224:	75 70 20 
f0115227:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011522e:	00 00 00 
f0115231:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115234:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115239:	b8 00 00 00 00       	mov    $0x0,%eax
f011523e:	89 d7                	mov    %edx,%edi
f0115240:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115242:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115245:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115248:	83 ec 08             	sub    $0x8,%esp
f011524b:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115251:	52                   	push   %edx
f0115252:	50                   	push   %eax
f0115253:	e8 e7 c4 01 00       	call   f013173f <ltostr>
f0115258:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011525b:	83 ec 04             	sub    $0x4,%esp
f011525e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115264:	50                   	push   %eax
f0115265:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011526b:	50                   	push   %eax
f011526c:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115272:	50                   	push   %eax
f0115273:	e8 bf c5 01 00       	call   f0131837 <strcconcat>
f0115278:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011527b:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115282:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115289:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115290:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115294:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011529b:	00 00 00 
	uint32 num_tables = 0;
f011529e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01152a5:	00 00 00 
	ClearUserSpace(proc_directory);
f01152a8:	83 ec 0c             	sub    $0xc,%esp
f01152ab:	ff 75 d8             	pushl  -0x28(%ebp)
f01152ae:	e8 8d 0e 00 00       	call   f0116140 <ClearUserSpace>
f01152b3:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01152b6:	83 ec 0c             	sub    $0xc,%esp
f01152b9:	68 04 a8 13 f0       	push   $0xf013a804
f01152be:	e8 4b ba fe ff       	call   f0100d0e <cprintf>
f01152c3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01152c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152c9:	c1 e0 03             	shl    $0x3,%eax
f01152cc:	89 c2                	mov    %eax,%edx
f01152ce:	83 ec 0c             	sub    $0xc,%esp
f01152d1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01152d7:	50                   	push   %eax
f01152d8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01152de:	50                   	push   %eax
f01152df:	52                   	push   %edx
f01152e0:	6a 00                	push   $0x0
f01152e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01152e5:	e8 61 39 ff ff       	call   f0108c4b <calculate_allocated_space>
f01152ea:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01152ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152f3:	85 c0                	test   %eax,%eax
f01152f5:	74 27                	je     f011531e <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01152f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152fd:	83 ec 0c             	sub    $0xc,%esp
f0115300:	6a 00                	push   $0x0
f0115302:	50                   	push   %eax
f0115303:	68 70 a9 13 f0       	push   $0xf013a970
f0115308:	68 94 06 00 00       	push   $0x694
f011530d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115312:	e8 fc b0 fe ff       	call   f0100413 <_warn>
f0115317:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011531a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011531e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115324:	85 c0                	test   %eax,%eax
f0115326:	74 27                	je     f011534f <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115328:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011532e:	83 ec 0c             	sub    $0xc,%esp
f0115331:	6a 00                	push   $0x0
f0115333:	50                   	push   %eax
f0115334:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115339:	68 99 06 00 00       	push   $0x699
f011533e:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115343:	e8 cb b0 fe ff       	call   f0100413 <_warn>
f0115348:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011534f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115353:	74 04                	je     f0115359 <test_calculate_allocated_space+0x198>
f0115355:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115359:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f011535d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115364:	00 00 00 
		num_pages = 0;
f0115367:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011536e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115371:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115374:	c1 e0 02             	shl    $0x2,%eax
f0115377:	89 c2                	mov    %eax,%edx
f0115379:	83 ec 0c             	sub    $0xc,%esp
f011537c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115382:	50                   	push   %eax
f0115383:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115389:	50                   	push   %eax
f011538a:	52                   	push   %edx
f011538b:	6a 00                	push   $0x0
f011538d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115390:	e8 b6 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115395:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115398:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011539e:	85 c0                	test   %eax,%eax
f01153a0:	74 27                	je     f01153c9 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01153a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153a8:	83 ec 0c             	sub    $0xc,%esp
f01153ab:	6a 00                	push   $0x0
f01153ad:	50                   	push   %eax
f01153ae:	68 70 a9 13 f0       	push   $0xf013a970
f01153b3:	68 a5 06 00 00       	push   $0x6a5
f01153b8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01153bd:	e8 51 b0 fe ff       	call   f0100413 <_warn>
f01153c2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153c5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01153c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153cf:	85 c0                	test   %eax,%eax
f01153d1:	74 27                	je     f01153fa <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01153d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153d9:	83 ec 0c             	sub    $0xc,%esp
f01153dc:	6a 00                	push   $0x0
f01153de:	50                   	push   %eax
f01153df:	68 d0 a9 13 f0       	push   $0xf013a9d0
f01153e4:	68 aa 06 00 00       	push   $0x6aa
f01153e9:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01153ee:	e8 20 b0 fe ff       	call   f0100413 <_warn>
f01153f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153fe:	74 04                	je     f0115404 <test_calculate_allocated_space+0x243>
f0115400:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115404:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115408:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011540f:	00 00 00 
		num_pages = 0;
f0115412:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115419:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011541c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011541f:	c1 e0 0a             	shl    $0xa,%eax
f0115422:	89 c2                	mov    %eax,%edx
f0115424:	83 ec 0c             	sub    $0xc,%esp
f0115427:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011542d:	50                   	push   %eax
f011542e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115434:	50                   	push   %eax
f0115435:	52                   	push   %edx
f0115436:	6a 00                	push   $0x0
f0115438:	ff 75 d8             	pushl  -0x28(%ebp)
f011543b:	e8 0b 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115440:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115443:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115449:	85 c0                	test   %eax,%eax
f011544b:	74 27                	je     f0115474 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011544d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115453:	83 ec 0c             	sub    $0xc,%esp
f0115456:	6a 00                	push   $0x0
f0115458:	50                   	push   %eax
f0115459:	68 70 a9 13 f0       	push   $0xf013a970
f011545e:	68 b6 06 00 00       	push   $0x6b6
f0115463:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115468:	e8 a6 af fe ff       	call   f0100413 <_warn>
f011546d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115470:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115474:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011547a:	85 c0                	test   %eax,%eax
f011547c:	74 27                	je     f01154a5 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011547e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115484:	83 ec 0c             	sub    $0xc,%esp
f0115487:	6a 00                	push   $0x0
f0115489:	50                   	push   %eax
f011548a:	68 d0 a9 13 f0       	push   $0xf013a9d0
f011548f:	68 bb 06 00 00       	push   $0x6bb
f0115494:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115499:	e8 75 af fe ff       	call   f0100413 <_warn>
f011549e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154a9:	74 04                	je     f01154af <test_calculate_allocated_space+0x2ee>
f01154ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01154b3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154ba:	00 00 00 
		num_pages = 0;
f01154bd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154c4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01154c7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01154ca:	89 d0                	mov    %edx,%eax
f01154cc:	01 c0                	add    %eax,%eax
f01154ce:	01 d0                	add    %edx,%eax
f01154d0:	01 c0                	add    %eax,%eax
f01154d2:	05 00 10 00 00       	add    $0x1000,%eax
f01154d7:	89 c2                	mov    %eax,%edx
f01154d9:	83 ec 0c             	sub    $0xc,%esp
f01154dc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154e2:	50                   	push   %eax
f01154e3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154e9:	50                   	push   %eax
f01154ea:	52                   	push   %edx
f01154eb:	68 00 10 00 00       	push   $0x1000
f01154f0:	ff 75 d8             	pushl  -0x28(%ebp)
f01154f3:	e8 53 37 ff ff       	call   f0108c4b <calculate_allocated_space>
f01154f8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01154fb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115501:	85 c0                	test   %eax,%eax
f0115503:	74 27                	je     f011552c <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115505:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011550b:	83 ec 0c             	sub    $0xc,%esp
f011550e:	6a 00                	push   $0x0
f0115510:	50                   	push   %eax
f0115511:	68 70 a9 13 f0       	push   $0xf013a970
f0115516:	68 c8 06 00 00       	push   $0x6c8
f011551b:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115520:	e8 ee ae fe ff       	call   f0100413 <_warn>
f0115525:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115528:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011552c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115532:	85 c0                	test   %eax,%eax
f0115534:	74 27                	je     f011555d <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115536:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011553c:	83 ec 0c             	sub    $0xc,%esp
f011553f:	6a 00                	push   $0x0
f0115541:	50                   	push   %eax
f0115542:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115547:	68 cd 06 00 00       	push   $0x6cd
f011554c:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115551:	e8 bd ae fe ff       	call   f0100413 <_warn>
f0115556:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115559:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011555d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115561:	74 04                	je     f0115567 <test_calculate_allocated_space+0x3a6>
f0115563:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115567:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011556b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115572:	00 00 00 
		num_pages = 0;
f0115575:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011557c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011557f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115582:	89 c2                	mov    %eax,%edx
f0115584:	01 d2                	add    %edx,%edx
f0115586:	01 d0                	add    %edx,%eax
f0115588:	05 00 18 00 00       	add    $0x1800,%eax
f011558d:	89 c2                	mov    %eax,%edx
f011558f:	83 ec 0c             	sub    $0xc,%esp
f0115592:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115598:	50                   	push   %eax
f0115599:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011559f:	50                   	push   %eax
f01155a0:	52                   	push   %edx
f01155a1:	68 00 18 00 00       	push   $0x1800
f01155a6:	ff 75 d8             	pushl  -0x28(%ebp)
f01155a9:	e8 9d 36 ff ff       	call   f0108c4b <calculate_allocated_space>
f01155ae:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01155b1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155b7:	85 c0                	test   %eax,%eax
f01155b9:	74 27                	je     f01155e2 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01155bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155c1:	83 ec 0c             	sub    $0xc,%esp
f01155c4:	6a 00                	push   $0x0
f01155c6:	50                   	push   %eax
f01155c7:	68 70 a9 13 f0       	push   $0xf013a970
f01155cc:	68 d9 06 00 00       	push   $0x6d9
f01155d1:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01155d6:	e8 38 ae fe ff       	call   f0100413 <_warn>
f01155db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155de:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01155e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155e8:	85 c0                	test   %eax,%eax
f01155ea:	74 27                	je     f0115613 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01155ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155f2:	83 ec 0c             	sub    $0xc,%esp
f01155f5:	6a 00                	push   $0x0
f01155f7:	50                   	push   %eax
f01155f8:	68 d0 a9 13 f0       	push   $0xf013a9d0
f01155fd:	68 de 06 00 00       	push   $0x6de
f0115602:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115607:	e8 07 ae fe ff       	call   f0100413 <_warn>
f011560c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011560f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115613:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115617:	74 04                	je     f011561d <test_calculate_allocated_space+0x45c>
f0115619:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011561d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115621:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115628:	00 00 00 
		num_pages = 0;
f011562b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115632:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115635:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115638:	89 d0                	mov    %edx,%eax
f011563a:	c1 e0 02             	shl    $0x2,%eax
f011563d:	01 d0                	add    %edx,%eax
f011563f:	01 c0                	add    %eax,%eax
f0115641:	05 00 00 40 00       	add    $0x400000,%eax
f0115646:	89 c2                	mov    %eax,%edx
f0115648:	83 ec 0c             	sub    $0xc,%esp
f011564b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115651:	50                   	push   %eax
f0115652:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115658:	50                   	push   %eax
f0115659:	52                   	push   %edx
f011565a:	68 00 00 40 00       	push   $0x400000
f011565f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115662:	e8 e4 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115667:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011566a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115670:	85 c0                	test   %eax,%eax
f0115672:	74 27                	je     f011569b <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115674:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011567a:	83 ec 0c             	sub    $0xc,%esp
f011567d:	6a 00                	push   $0x0
f011567f:	50                   	push   %eax
f0115680:	68 70 a9 13 f0       	push   $0xf013a970
f0115685:	68 ea 06 00 00       	push   $0x6ea
f011568a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011568f:	e8 7f ad fe ff       	call   f0100413 <_warn>
f0115694:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115697:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011569b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156a1:	85 c0                	test   %eax,%eax
f01156a3:	74 27                	je     f01156cc <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01156a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156ab:	83 ec 0c             	sub    $0xc,%esp
f01156ae:	6a 00                	push   $0x0
f01156b0:	50                   	push   %eax
f01156b1:	68 d0 a9 13 f0       	push   $0xf013a9d0
f01156b6:	68 ef 06 00 00       	push   $0x6ef
f01156bb:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01156c0:	e8 4e ad fe ff       	call   f0100413 <_warn>
f01156c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156d0:	74 04                	je     f01156d6 <test_calculate_allocated_space+0x515>
f01156d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01156da:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156e1:	00 00 00 
		num_pages = 0;
f01156e4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156eb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01156ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156f1:	05 00 00 38 00       	add    $0x380000,%eax
f01156f6:	01 c0                	add    %eax,%eax
f01156f8:	89 c2                	mov    %eax,%edx
f01156fa:	83 ec 0c             	sub    $0xc,%esp
f01156fd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115703:	50                   	push   %eax
f0115704:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011570a:	50                   	push   %eax
f011570b:	52                   	push   %edx
f011570c:	68 00 00 70 00       	push   $0x700000
f0115711:	ff 75 d8             	pushl  -0x28(%ebp)
f0115714:	e8 32 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115719:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011571c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115722:	85 c0                	test   %eax,%eax
f0115724:	74 27                	je     f011574d <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115726:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011572c:	83 ec 0c             	sub    $0xc,%esp
f011572f:	6a 00                	push   $0x0
f0115731:	50                   	push   %eax
f0115732:	68 70 a9 13 f0       	push   $0xf013a970
f0115737:	68 fc 06 00 00       	push   $0x6fc
f011573c:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115741:	e8 cd ac fe ff       	call   f0100413 <_warn>
f0115746:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115749:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011574d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115753:	85 c0                	test   %eax,%eax
f0115755:	74 27                	je     f011577e <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115757:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011575d:	83 ec 0c             	sub    $0xc,%esp
f0115760:	6a 00                	push   $0x0
f0115762:	50                   	push   %eax
f0115763:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115768:	68 01 07 00 00       	push   $0x701
f011576d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115772:	e8 9c ac fe ff       	call   f0100413 <_warn>
f0115777:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011577a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011577e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115782:	74 04                	je     f0115788 <test_calculate_allocated_space+0x5c7>
f0115784:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115788:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011578c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115793:	00 00 00 
		num_pages = 0;
f0115796:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011579d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01157a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157a3:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01157a8:	89 c2                	mov    %eax,%edx
f01157aa:	83 ec 0c             	sub    $0xc,%esp
f01157ad:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157b3:	50                   	push   %eax
f01157b4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157ba:	50                   	push   %eax
f01157bb:	52                   	push   %edx
f01157bc:	68 ff ff 3f 00       	push   $0x3fffff
f01157c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01157c4:	e8 82 34 ff ff       	call   f0108c4b <calculate_allocated_space>
f01157c9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157d2:	85 c0                	test   %eax,%eax
f01157d4:	74 27                	je     f01157fd <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157d6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157dc:	83 ec 0c             	sub    $0xc,%esp
f01157df:	6a 00                	push   $0x0
f01157e1:	50                   	push   %eax
f01157e2:	68 70 a9 13 f0       	push   $0xf013a970
f01157e7:	68 0d 07 00 00       	push   $0x70d
f01157ec:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01157f1:	e8 1d ac fe ff       	call   f0100413 <_warn>
f01157f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157f9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01157fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115803:	85 c0                	test   %eax,%eax
f0115805:	74 27                	je     f011582e <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115807:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011580d:	83 ec 0c             	sub    $0xc,%esp
f0115810:	6a 00                	push   $0x0
f0115812:	50                   	push   %eax
f0115813:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115818:	68 12 07 00 00       	push   $0x712
f011581d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115822:	e8 ec ab fe ff       	call   f0100413 <_warn>
f0115827:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011582a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011582e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115832:	74 04                	je     f0115838 <test_calculate_allocated_space+0x677>
f0115834:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115838:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011583c:	83 ec 0c             	sub    $0xc,%esp
f011583f:	68 89 a3 13 f0       	push   $0xf013a389
f0115844:	e8 c5 b4 fe ff       	call   f0100d0e <cprintf>
f0115849:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011584c:	83 ec 0c             	sub    $0xc,%esp
f011584f:	68 90 a8 13 f0       	push   $0xf013a890
f0115854:	e8 b5 b4 fe ff       	call   f0100d0e <cprintf>
f0115859:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011585c:	83 ec 04             	sub    $0x4,%esp
f011585f:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115865:	50                   	push   %eax
f0115866:	68 42 97 13 f0       	push   $0xf0139742
f011586b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115871:	50                   	push   %eax
f0115872:	e8 c0 bf 01 00       	call   f0131837 <strcconcat>
f0115877:	83 c4 10             	add    $0x10,%esp
f011587a:	83 ec 0c             	sub    $0xc,%esp
f011587d:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115883:	50                   	push   %eax
f0115884:	e8 e7 b4 fe ff       	call   f0100d70 <execute_command>
f0115889:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011588c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115893:	00 00 00 
		num_pages = 0;
f0115896:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011589d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01158a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01158a3:	c1 e0 03             	shl    $0x3,%eax
f01158a6:	89 c2                	mov    %eax,%edx
f01158a8:	83 ec 0c             	sub    $0xc,%esp
f01158ab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158b1:	50                   	push   %eax
f01158b2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158b8:	50                   	push   %eax
f01158b9:	52                   	push   %edx
f01158ba:	6a 00                	push   $0x0
f01158bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01158bf:	e8 87 33 ff ff       	call   f0108c4b <calculate_allocated_space>
f01158c4:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01158c7:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01158ce:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01158d5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158db:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01158de:	74 28                	je     f0115908 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01158e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158e6:	83 ec 0c             	sub    $0xc,%esp
f01158e9:	ff 75 c8             	pushl  -0x38(%ebp)
f01158ec:	50                   	push   %eax
f01158ed:	68 70 a9 13 f0       	push   $0xf013a970
f01158f2:	68 29 07 00 00       	push   $0x729
f01158f7:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01158fc:	e8 12 ab fe ff       	call   f0100413 <_warn>
f0115901:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115904:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115908:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011590e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115911:	74 28                	je     f011593b <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115913:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115919:	83 ec 0c             	sub    $0xc,%esp
f011591c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011591f:	50                   	push   %eax
f0115920:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115925:	68 2e 07 00 00       	push   $0x72e
f011592a:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011592f:	e8 df aa fe ff       	call   f0100413 <_warn>
f0115934:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115937:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011593b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011593f:	74 04                	je     f0115945 <test_calculate_allocated_space+0x784>
f0115941:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115945:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115949:	83 ec 04             	sub    $0x4,%esp
f011594c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115952:	50                   	push   %eax
f0115953:	68 4f 97 13 f0       	push   $0xf013974f
f0115958:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011595e:	50                   	push   %eax
f011595f:	e8 d3 be 01 00       	call   f0131837 <strcconcat>
f0115964:	83 c4 10             	add    $0x10,%esp
f0115967:	83 ec 0c             	sub    $0xc,%esp
f011596a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115970:	50                   	push   %eax
f0115971:	e8 fa b3 fe ff       	call   f0100d70 <execute_command>
f0115976:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115979:	83 ec 04             	sub    $0x4,%esp
f011597c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115982:	50                   	push   %eax
f0115983:	68 c4 a8 13 f0       	push   $0xf013a8c4
f0115988:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011598e:	50                   	push   %eax
f011598f:	e8 a3 be 01 00       	call   f0131837 <strcconcat>
f0115994:	83 c4 10             	add    $0x10,%esp
f0115997:	83 ec 0c             	sub    $0xc,%esp
f011599a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01159a0:	50                   	push   %eax
f01159a1:	e8 ca b3 fe ff       	call   f0100d70 <execute_command>
f01159a6:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01159a9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159b0:	00 00 00 
		num_pages = 0;
f01159b3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159ba:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01159bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159c0:	c1 e0 03             	shl    $0x3,%eax
f01159c3:	89 c2                	mov    %eax,%edx
f01159c5:	83 ec 0c             	sub    $0xc,%esp
f01159c8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159ce:	50                   	push   %eax
f01159cf:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159d5:	50                   	push   %eax
f01159d6:	52                   	push   %edx
f01159d7:	6a 00                	push   $0x0
f01159d9:	ff 75 d8             	pushl  -0x28(%ebp)
f01159dc:	e8 6a 32 ff ff       	call   f0108c4b <calculate_allocated_space>
f01159e1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01159e4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01159eb:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01159f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159f8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01159fb:	74 28                	je     f0115a25 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01159fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a03:	83 ec 0c             	sub    $0xc,%esp
f0115a06:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a09:	50                   	push   %eax
f0115a0a:	68 70 a9 13 f0       	push   $0xf013a970
f0115a0f:	68 3f 07 00 00       	push   $0x73f
f0115a14:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115a19:	e8 f5 a9 fe ff       	call   f0100413 <_warn>
f0115a1e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115a25:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a2b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a2e:	74 28                	je     f0115a58 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115a30:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a36:	83 ec 0c             	sub    $0xc,%esp
f0115a39:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a3c:	50                   	push   %eax
f0115a3d:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115a42:	68 44 07 00 00       	push   $0x744
f0115a47:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115a4c:	e8 c2 a9 fe ff       	call   f0100413 <_warn>
f0115a51:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a54:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a58:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a5c:	74 04                	je     f0115a62 <test_calculate_allocated_space+0x8a1>
f0115a5e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a62:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115a66:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a6d:	00 00 00 
		num_pages = 0;
f0115a70:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a77:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115a7a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a7d:	c1 e0 0a             	shl    $0xa,%eax
f0115a80:	89 c2                	mov    %eax,%edx
f0115a82:	83 ec 0c             	sub    $0xc,%esp
f0115a85:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a8b:	50                   	push   %eax
f0115a8c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a92:	50                   	push   %eax
f0115a93:	52                   	push   %edx
f0115a94:	6a 00                	push   $0x0
f0115a96:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a99:	e8 ad 31 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115a9e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115aa1:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115aa8:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115aaf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ab5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115ab8:	74 28                	je     f0115ae2 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115aba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ac0:	83 ec 0c             	sub    $0xc,%esp
f0115ac3:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ac6:	50                   	push   %eax
f0115ac7:	68 70 a9 13 f0       	push   $0xf013a970
f0115acc:	68 52 07 00 00       	push   $0x752
f0115ad1:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115ad6:	e8 38 a9 fe ff       	call   f0100413 <_warn>
f0115adb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ade:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ae2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ae8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115aeb:	74 28                	je     f0115b15 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115aed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115af3:	83 ec 0c             	sub    $0xc,%esp
f0115af6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115af9:	50                   	push   %eax
f0115afa:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115aff:	68 57 07 00 00       	push   $0x757
f0115b04:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115b09:	e8 05 a9 fe ff       	call   f0100413 <_warn>
f0115b0e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b11:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b15:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b19:	74 04                	je     f0115b1f <test_calculate_allocated_space+0x95e>
f0115b1b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b1f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115b23:	83 ec 04             	sub    $0x4,%esp
f0115b26:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115b2c:	50                   	push   %eax
f0115b2d:	68 d0 a8 13 f0       	push   $0xf013a8d0
f0115b32:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b38:	50                   	push   %eax
f0115b39:	e8 f9 bc 01 00       	call   f0131837 <strcconcat>
f0115b3e:	83 c4 10             	add    $0x10,%esp
f0115b41:	83 ec 0c             	sub    $0xc,%esp
f0115b44:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115b4a:	50                   	push   %eax
f0115b4b:	e8 20 b2 fe ff       	call   f0100d70 <execute_command>
f0115b50:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115b53:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b5a:	00 00 00 
		num_pages = 0;
f0115b5d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b64:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115b67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b6a:	89 c2                	mov    %eax,%edx
f0115b6c:	01 d2                	add    %edx,%edx
f0115b6e:	01 d0                	add    %edx,%eax
f0115b70:	05 00 18 00 00       	add    $0x1800,%eax
f0115b75:	89 c2                	mov    %eax,%edx
f0115b77:	83 ec 0c             	sub    $0xc,%esp
f0115b7a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b80:	50                   	push   %eax
f0115b81:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b87:	50                   	push   %eax
f0115b88:	52                   	push   %edx
f0115b89:	68 00 18 00 00       	push   $0x1800
f0115b8e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b91:	e8 b5 30 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115b96:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115b99:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115ba0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ba7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bad:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115bb0:	74 28                	je     f0115bda <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115bb2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bb8:	83 ec 0c             	sub    $0xc,%esp
f0115bbb:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bbe:	50                   	push   %eax
f0115bbf:	68 70 a9 13 f0       	push   $0xf013a970
f0115bc4:	68 68 07 00 00       	push   $0x768
f0115bc9:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115bce:	e8 40 a8 fe ff       	call   f0100413 <_warn>
f0115bd3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bd6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115bda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115be0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115be3:	74 28                	je     f0115c0d <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115be5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115beb:	83 ec 0c             	sub    $0xc,%esp
f0115bee:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115bf1:	50                   	push   %eax
f0115bf2:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115bf7:	68 6d 07 00 00       	push   $0x76d
f0115bfc:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115c01:	e8 0d a8 fe ff       	call   f0100413 <_warn>
f0115c06:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c11:	74 04                	je     f0115c17 <test_calculate_allocated_space+0xa56>
f0115c13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115c1b:	83 ec 04             	sub    $0x4,%esp
f0115c1e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115c24:	50                   	push   %eax
f0115c25:	68 a8 99 13 f0       	push   $0xf01399a8
f0115c2a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c30:	50                   	push   %eax
f0115c31:	e8 01 bc 01 00       	call   f0131837 <strcconcat>
f0115c36:	83 c4 10             	add    $0x10,%esp
f0115c39:	83 ec 0c             	sub    $0xc,%esp
f0115c3c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115c42:	50                   	push   %eax
f0115c43:	e8 28 b1 fe ff       	call   f0100d70 <execute_command>
f0115c48:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115c4b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c52:	00 00 00 
		num_pages = 0;
f0115c55:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c5c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115c5f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115c62:	89 d0                	mov    %edx,%eax
f0115c64:	c1 e0 02             	shl    $0x2,%eax
f0115c67:	01 d0                	add    %edx,%eax
f0115c69:	01 c0                	add    %eax,%eax
f0115c6b:	05 00 00 40 00       	add    $0x400000,%eax
f0115c70:	89 c2                	mov    %eax,%edx
f0115c72:	83 ec 0c             	sub    $0xc,%esp
f0115c75:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c7b:	50                   	push   %eax
f0115c7c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c82:	50                   	push   %eax
f0115c83:	52                   	push   %edx
f0115c84:	68 00 00 40 00       	push   $0x400000
f0115c89:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c8c:	e8 ba 2f ff ff       	call   f0108c4b <calculate_allocated_space>
f0115c91:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115c94:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115c9b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ca2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ca8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115cab:	74 28                	je     f0115cd5 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115cad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cb3:	83 ec 0c             	sub    $0xc,%esp
f0115cb6:	ff 75 c8             	pushl  -0x38(%ebp)
f0115cb9:	50                   	push   %eax
f0115cba:	68 70 a9 13 f0       	push   $0xf013a970
f0115cbf:	68 7d 07 00 00       	push   $0x77d
f0115cc4:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115cc9:	e8 45 a7 fe ff       	call   f0100413 <_warn>
f0115cce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cd1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115cd5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cdb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115cde:	74 28                	je     f0115d08 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ce0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ce6:	83 ec 0c             	sub    $0xc,%esp
f0115ce9:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115cec:	50                   	push   %eax
f0115ced:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115cf2:	68 82 07 00 00       	push   $0x782
f0115cf7:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115cfc:	e8 12 a7 fe ff       	call   f0100413 <_warn>
f0115d01:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d04:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d08:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d0c:	74 04                	je     f0115d12 <test_calculate_allocated_space+0xb51>
f0115d0e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d12:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115d16:	83 ec 04             	sub    $0x4,%esp
f0115d19:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d1f:	50                   	push   %eax
f0115d20:	68 b2 99 13 f0       	push   $0xf01399b2
f0115d25:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d2b:	50                   	push   %eax
f0115d2c:	e8 06 bb 01 00       	call   f0131837 <strcconcat>
f0115d31:	83 c4 10             	add    $0x10,%esp
f0115d34:	83 ec 0c             	sub    $0xc,%esp
f0115d37:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d3d:	50                   	push   %eax
f0115d3e:	e8 2d b0 fe ff       	call   f0100d70 <execute_command>
f0115d43:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115d46:	83 ec 04             	sub    $0x4,%esp
f0115d49:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115d4f:	50                   	push   %eax
f0115d50:	68 d8 a8 13 f0       	push   $0xf013a8d8
f0115d55:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d5b:	50                   	push   %eax
f0115d5c:	e8 d6 ba 01 00       	call   f0131837 <strcconcat>
f0115d61:	83 c4 10             	add    $0x10,%esp
f0115d64:	83 ec 0c             	sub    $0xc,%esp
f0115d67:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115d6d:	50                   	push   %eax
f0115d6e:	e8 fd af fe ff       	call   f0100d70 <execute_command>
f0115d73:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115d76:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d7d:	00 00 00 
		num_pages = 0;
f0115d80:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d87:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115d8a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d8d:	05 00 00 38 00       	add    $0x380000,%eax
f0115d92:	01 c0                	add    %eax,%eax
f0115d94:	89 c2                	mov    %eax,%edx
f0115d96:	83 ec 0c             	sub    $0xc,%esp
f0115d99:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d9f:	50                   	push   %eax
f0115da0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115da6:	50                   	push   %eax
f0115da7:	52                   	push   %edx
f0115da8:	68 00 00 70 00       	push   $0x700000
f0115dad:	ff 75 d8             	pushl  -0x28(%ebp)
f0115db0:	e8 96 2e ff ff       	call   f0108c4b <calculate_allocated_space>
f0115db5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115db8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115dbf:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115dc6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dcc:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115dcf:	74 28                	je     f0115df9 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115dd1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dd7:	83 ec 0c             	sub    $0xc,%esp
f0115dda:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ddd:	50                   	push   %eax
f0115dde:	68 70 a9 13 f0       	push   $0xf013a970
f0115de3:	68 94 07 00 00       	push   $0x794
f0115de8:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115ded:	e8 21 a6 fe ff       	call   f0100413 <_warn>
f0115df2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115df5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115df9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dff:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e02:	74 28                	je     f0115e2c <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e04:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e0a:	83 ec 0c             	sub    $0xc,%esp
f0115e0d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e10:	50                   	push   %eax
f0115e11:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115e16:	68 99 07 00 00       	push   $0x799
f0115e1b:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115e20:	e8 ee a5 fe ff       	call   f0100413 <_warn>
f0115e25:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e28:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e2c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e30:	74 04                	je     f0115e36 <test_calculate_allocated_space+0xc75>
f0115e32:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e36:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115e3a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e41:	00 00 00 
		num_pages = 0;
f0115e44:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e4b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115e4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e51:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115e56:	89 c2                	mov    %eax,%edx
f0115e58:	83 ec 0c             	sub    $0xc,%esp
f0115e5b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e61:	50                   	push   %eax
f0115e62:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e68:	50                   	push   %eax
f0115e69:	52                   	push   %edx
f0115e6a:	68 ff ff 3f 00       	push   $0x3fffff
f0115e6f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e72:	e8 d4 2d ff ff       	call   f0108c4b <calculate_allocated_space>
f0115e77:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115e7a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115e81:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115e88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e8e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115e91:	74 28                	je     f0115ebb <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115e93:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e99:	83 ec 0c             	sub    $0xc,%esp
f0115e9c:	ff 75 c8             	pushl  -0x38(%ebp)
f0115e9f:	50                   	push   %eax
f0115ea0:	68 70 a9 13 f0       	push   $0xf013a970
f0115ea5:	68 a7 07 00 00       	push   $0x7a7
f0115eaa:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115eaf:	e8 5f a5 fe ff       	call   f0100413 <_warn>
f0115eb4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eb7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ebb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ec1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ec4:	74 28                	je     f0115eee <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ec6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ecc:	83 ec 0c             	sub    $0xc,%esp
f0115ecf:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ed2:	50                   	push   %eax
f0115ed3:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115ed8:	68 ac 07 00 00       	push   $0x7ac
f0115edd:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115ee2:	e8 2c a5 fe ff       	call   f0100413 <_warn>
f0115ee7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115eee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ef2:	74 04                	je     f0115ef8 <test_calculate_allocated_space+0xd37>
f0115ef4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ef8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115efc:	83 ec 0c             	sub    $0xc,%esp
f0115eff:	68 63 99 13 f0       	push   $0xf0139963
f0115f04:	e8 05 ae fe ff       	call   f0100d0e <cprintf>
f0115f09:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0115f0c:	83 ec 08             	sub    $0x8,%esp
f0115f0f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115f12:	68 2c aa 13 f0       	push   $0xf013aa2c
f0115f17:	e8 f2 ad fe ff       	call   f0100d0e <cprintf>
f0115f1c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115f1f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115f23:	75 10                	jne    f0115f35 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115f25:	83 ec 0c             	sub    $0xc,%esp
f0115f28:	68 6c aa 13 f0       	push   $0xf013aa6c
f0115f2d:	e8 dc ad fe ff       	call   f0100d0e <cprintf>
f0115f32:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115f35:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0115f3a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115f3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115f40:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115f43:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115f48:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115f4b:	5b                   	pop    %ebx
f0115f4c:	5e                   	pop    %esi
f0115f4d:	5f                   	pop    %edi
f0115f4e:	5d                   	pop    %ebp
f0115f4f:	c3                   	ret    

f0115f50 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115f50:	55                   	push   %ebp
f0115f51:	89 e5                	mov    %esp,%ebp
f0115f53:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115f56:	8b 45 10             	mov    0x10(%ebp),%eax
f0115f59:	ba 01 00 00 00       	mov    $0x1,%edx
f0115f5e:	88 c1                	mov    %al,%cl
f0115f60:	d3 e2                	shl    %cl,%edx
f0115f62:	89 d0                	mov    %edx,%eax
f0115f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115f67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115f6a:	c1 e8 16             	shr    $0x16,%eax
f0115f6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0115f77:	01 d0                	add    %edx,%eax
f0115f79:	8b 00                	mov    (%eax),%eax
f0115f7b:	83 e0 01             	and    $0x1,%eax
f0115f7e:	85 c0                	test   %eax,%eax
f0115f80:	75 07                	jne    f0115f89 <CB+0x39>
f0115f82:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f87:	eb 76                	jmp    f0115fff <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115f89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115f8c:	c1 e8 16             	shr    $0x16,%eax
f0115f8f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115f96:	8b 45 08             	mov    0x8(%ebp),%eax
f0115f99:	01 d0                	add    %edx,%eax
f0115f9b:	8b 00                	mov    (%eax),%eax
f0115f9d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115fa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115fa8:	c1 e8 0c             	shr    $0xc,%eax
f0115fab:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115fae:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0115fb3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115fb6:	72 17                	jb     f0115fcf <CB+0x7f>
f0115fb8:	ff 75 f0             	pushl  -0x10(%ebp)
f0115fbb:	68 b8 aa 13 f0       	push   $0xf013aab8
f0115fc0:	68 c7 07 00 00       	push   $0x7c7
f0115fc5:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0115fca:	e8 36 a2 fe ff       	call   f0100205 <_panic>
f0115fcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115fd2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115fd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115fda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115fdd:	c1 e8 0c             	shr    $0xc,%eax
f0115fe0:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115fe5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115fec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115fef:	01 d0                	add    %edx,%eax
f0115ff1:	8b 00                	mov    (%eax),%eax
f0115ff3:	23 45 f4             	and    -0xc(%ebp),%eax
f0115ff6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115ff9:	0f 94 c0             	sete   %al
f0115ffc:	0f b6 c0             	movzbl %al,%eax
}
f0115fff:	c9                   	leave  
f0116000:	c3                   	ret    

f0116001 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116001:	55                   	push   %ebp
f0116002:	89 e5                	mov    %esp,%ebp
f0116004:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116007:	68 e7 aa 13 f0       	push   $0xf013aae7
f011600c:	68 f6 aa 13 f0       	push   $0xf013aaf6
f0116011:	68 cc 07 00 00       	push   $0x7cc
f0116016:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011601b:	e8 e5 a1 fe ff       	call   f0100205 <_panic>

f0116020 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116020:	55                   	push   %ebp
f0116021:	89 e5                	mov    %esp,%ebp
f0116023:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116026:	68 e7 aa 13 f0       	push   $0xf013aae7
f011602b:	68 f6 aa 13 f0       	push   $0xf013aaf6
f0116030:	68 d6 07 00 00       	push   $0x7d6
f0116035:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011603a:	e8 c6 a1 fe ff       	call   f0100205 <_panic>

f011603f <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f011603f:	55                   	push   %ebp
f0116040:	89 e5                	mov    %esp,%ebp
f0116042:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116045:	68 e7 aa 13 f0       	push   $0xf013aae7
f011604a:	68 f6 aa 13 f0       	push   $0xf013aaf6
f011604f:	68 e5 07 00 00       	push   $0x7e5
f0116054:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0116059:	e8 a7 a1 fe ff       	call   f0100205 <_panic>

f011605e <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f011605e:	55                   	push   %ebp
f011605f:	89 e5                	mov    %esp,%ebp
f0116061:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116064:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116067:	c1 e8 16             	shr    $0x16,%eax
f011606a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116071:	8b 45 08             	mov    0x8(%ebp),%eax
f0116074:	01 d0                	add    %edx,%eax
f0116076:	8b 00                	mov    (%eax),%eax
f0116078:	83 e0 01             	and    $0x1,%eax
f011607b:	85 c0                	test   %eax,%eax
f011607d:	75 07                	jne    f0116086 <CE+0x28>
f011607f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116084:	eb 7a                	jmp    f0116100 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116086:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116089:	c1 e8 16             	shr    $0x16,%eax
f011608c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116093:	8b 45 08             	mov    0x8(%ebp),%eax
f0116096:	01 d0                	add    %edx,%eax
f0116098:	8b 00                	mov    (%eax),%eax
f011609a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011609f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01160a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01160a5:	c1 e8 0c             	shr    $0xc,%eax
f01160a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01160ab:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01160b0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01160b3:	72 17                	jb     f01160cc <CE+0x6e>
f01160b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01160b8:	68 b8 aa 13 f0       	push   $0xf013aab8
f01160bd:	68 ee 07 00 00       	push   $0x7ee
f01160c2:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01160c7:	e8 39 a1 fe ff       	call   f0100205 <_panic>
f01160cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01160cf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01160d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01160d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01160da:	c1 e8 0c             	shr    $0xc,%eax
f01160dd:	25 ff 03 00 00       	and    $0x3ff,%eax
f01160e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01160e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01160ec:	01 d0                	add    %edx,%eax
f01160ee:	8b 00                	mov    (%eax),%eax
f01160f0:	85 c0                	test   %eax,%eax
f01160f2:	74 07                	je     f01160fb <CE+0x9d>
f01160f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01160f9:	eb 05                	jmp    f0116100 <CE+0xa2>
	return 1;
f01160fb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116100:	c9                   	leave  
f0116101:	c3                   	ret    

f0116102 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116102:	55                   	push   %ebp
f0116103:	89 e5                	mov    %esp,%ebp
f0116105:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116108:	68 e7 aa 13 f0       	push   $0xf013aae7
f011610d:	68 f6 aa 13 f0       	push   $0xf013aaf6
f0116112:	68 f5 07 00 00       	push   $0x7f5
f0116117:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011611c:	e8 e4 a0 fe ff       	call   f0100205 <_panic>

f0116121 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116121:	55                   	push   %ebp
f0116122:	89 e5                	mov    %esp,%ebp
f0116124:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116127:	68 e7 aa 13 f0       	push   $0xf013aae7
f011612c:	68 f6 aa 13 f0       	push   $0xf013aaf6
f0116131:	68 05 08 00 00       	push   $0x805
f0116136:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011613b:	e8 c5 a0 fe ff       	call   f0100205 <_panic>

f0116140 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116140:	55                   	push   %ebp
f0116141:	89 e5                	mov    %esp,%ebp
f0116143:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116146:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011614d:	eb 18                	jmp    f0116167 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011614f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116152:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116159:	8b 45 08             	mov    0x8(%ebp),%eax
f011615c:	01 d0                	add    %edx,%eax
f011615e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116164:	ff 45 fc             	incl   -0x4(%ebp)
f0116167:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011616a:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f011616f:	76 de                	jbe    f011614f <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116171:	90                   	nop
f0116172:	c9                   	leave  
f0116173:	c3                   	ret    

f0116174 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116174:	55                   	push   %ebp
f0116175:	89 e5                	mov    %esp,%ebp
f0116177:	83 ec 38             	sub    $0x38,%esp
f011617a:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011617d:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116180:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116183:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116188:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011618b:	8b 45 10             	mov    0x10(%ebp),%eax
f011618e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116193:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116196:	e9 ea 01 00 00       	jmp    f0116385 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011619b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011619f:	74 44                	je     f01161e5 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01161a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01161a4:	83 ec 04             	sub    $0x4,%esp
f01161a7:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01161aa:	52                   	push   %edx
f01161ab:	50                   	push   %eax
f01161ac:	ff 75 08             	pushl  0x8(%ebp)
f01161af:	e8 52 0c ff ff       	call   f0106e06 <get_frame_info>
f01161b4:	83 c4 10             	add    $0x10,%esp
f01161b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01161ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01161bd:	85 c0                	test   %eax,%eax
f01161bf:	75 24                	jne    f01161e5 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01161c1:	83 ec 04             	sub    $0x4,%esp
f01161c4:	68 0c ab 13 f0       	push   $0xf013ab0c
f01161c9:	68 22 08 00 00       	push   $0x822
f01161ce:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01161d3:	e8 3b a2 fe ff       	call   f0100413 <_warn>
f01161d8:	83 c4 10             	add    $0x10,%esp
				return 0;
f01161db:	b8 00 00 00 00       	mov    $0x0,%eax
f01161e0:	e9 b6 01 00 00       	jmp    f011639b <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01161e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01161e8:	83 ec 04             	sub    $0x4,%esp
f01161eb:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01161ee:	52                   	push   %edx
f01161ef:	50                   	push   %eax
f01161f0:	ff 75 08             	pushl  0x8(%ebp)
f01161f3:	e8 0e 0c ff ff       	call   f0106e06 <get_frame_info>
f01161f8:	83 c4 10             	add    $0x10,%esp
f01161fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01161fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116201:	85 c0                	test   %eax,%eax
f0116203:	75 24                	jne    f0116229 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116205:	83 ec 04             	sub    $0x4,%esp
f0116208:	68 38 ab 13 f0       	push   $0xf013ab38
f011620d:	68 29 08 00 00       	push   $0x829
f0116212:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0116217:	e8 f7 a1 fe ff       	call   f0100413 <_warn>
f011621c:	83 c4 10             	add    $0x10,%esp
			return 0;
f011621f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116224:	e9 72 01 00 00       	jmp    f011639b <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116229:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f011622d:	75 70                	jne    f011629f <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011622f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116235:	c1 ea 0c             	shr    $0xc,%edx
f0116238:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011623e:	c1 e2 02             	shl    $0x2,%edx
f0116241:	01 d0                	add    %edx,%eax
f0116243:	8b 00                	mov    (%eax),%eax
f0116245:	c1 e8 0c             	shr    $0xc,%eax
f0116248:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011624b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011624e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116251:	c1 ea 0c             	shr    $0xc,%edx
f0116254:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011625a:	c1 e2 02             	shl    $0x2,%edx
f011625d:	01 d0                	add    %edx,%eax
f011625f:	8b 00                	mov    (%eax),%eax
f0116261:	c1 e8 0c             	shr    $0xc,%eax
f0116264:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116267:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011626a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011626d:	74 30                	je     f011629f <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f011626f:	83 ec 04             	sub    $0x4,%esp
f0116272:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116275:	ff 75 e8             	pushl  -0x18(%ebp)
f0116278:	ff 75 f0             	pushl  -0x10(%ebp)
f011627b:	ff 75 f4             	pushl  -0xc(%ebp)
f011627e:	68 64 ab 13 f0       	push   $0xf013ab64
f0116283:	68 33 08 00 00       	push   $0x833
f0116288:	68 3e 8c 13 f0       	push   $0xf0138c3e
f011628d:	e8 81 a1 fe ff       	call   f0100413 <_warn>
f0116292:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116295:	b8 00 00 00 00       	mov    $0x0,%eax
f011629a:	e9 fc 00 00 00       	jmp    f011639b <CCP+0x227>
			}
		}
		if (ref != -1)
f011629f:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01162a3:	74 52                	je     f01162f7 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01162a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01162a9:	74 0e                	je     f01162b9 <CCP+0x145>
f01162ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01162ae:	8b 40 08             	mov    0x8(%eax),%eax
f01162b1:	0f b7 c0             	movzwl %ax,%eax
f01162b4:	3b 45 18             	cmp    0x18(%ebp),%eax
f01162b7:	74 3e                	je     f01162f7 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01162b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01162bd:	74 0b                	je     f01162ca <CCP+0x156>
f01162bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01162c2:	8b 40 08             	mov    0x8(%eax),%eax
f01162c5:	0f b7 c0             	movzwl %ax,%eax
f01162c8:	eb 05                	jmp    f01162cf <CCP+0x15b>
f01162ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01162cf:	83 ec 0c             	sub    $0xc,%esp
f01162d2:	50                   	push   %eax
f01162d3:	ff 75 f0             	pushl  -0x10(%ebp)
f01162d6:	68 c0 ab 13 f0       	push   $0xf013abc0
f01162db:	68 3b 08 00 00       	push   $0x83b
f01162e0:	68 3e 8c 13 f0       	push   $0xf0138c3e
f01162e5:	e8 29 a1 fe ff       	call   f0100413 <_warn>
f01162ea:	83 c4 20             	add    $0x20,%esp
				return 0;
f01162ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01162f2:	e9 a4 00 00 00       	jmp    f011639b <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01162f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01162fa:	ff 75 20             	pushl  0x20(%ebp)
f01162fd:	ff 75 1c             	pushl  0x1c(%ebp)
f0116300:	50                   	push   %eax
f0116301:	ff 75 08             	pushl  0x8(%ebp)
f0116304:	e8 17 fd ff ff       	call   f0116020 <CPs>
f0116309:	83 c4 10             	add    $0x10,%esp
f011630c:	85 c0                	test   %eax,%eax
f011630e:	7f 21                	jg     f0116331 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116310:	83 ec 04             	sub    $0x4,%esp
f0116313:	68 30 ac 13 f0       	push   $0xf013ac30
f0116318:	68 41 08 00 00       	push   $0x841
f011631d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0116322:	e8 ec a0 fe ff       	call   f0100413 <_warn>
f0116327:	83 c4 10             	add    $0x10,%esp
			return 0;
f011632a:	b8 00 00 00 00       	mov    $0x0,%eax
f011632f:	eb 6a                	jmp    f011639b <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116331:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116335:	74 3a                	je     f0116371 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116337:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011633a:	ff 75 28             	pushl  0x28(%ebp)
f011633d:	ff 75 24             	pushl  0x24(%ebp)
f0116340:	50                   	push   %eax
f0116341:	ff 75 08             	pushl  0x8(%ebp)
f0116344:	e8 d7 fc ff ff       	call   f0116020 <CPs>
f0116349:	83 c4 10             	add    $0x10,%esp
f011634c:	85 c0                	test   %eax,%eax
f011634e:	7f 21                	jg     f0116371 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116350:	83 ec 04             	sub    $0x4,%esp
f0116353:	68 78 ac 13 f0       	push   $0xf013ac78
f0116358:	68 48 08 00 00       	push   $0x848
f011635d:	68 3e 8c 13 f0       	push   $0xf0138c3e
f0116362:	e8 ac a0 fe ff       	call   f0100413 <_warn>
f0116367:	83 c4 10             	add    $0x10,%esp
				return 0;
f011636a:	b8 00 00 00 00       	mov    $0x0,%eax
f011636f:	eb 2a                	jmp    f011639b <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116371:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116375:	74 07                	je     f011637e <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116377:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011637e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116385:	8b 55 10             	mov    0x10(%ebp),%edx
f0116388:	8b 45 14             	mov    0x14(%ebp),%eax
f011638b:	01 d0                	add    %edx,%eax
f011638d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116390:	0f 87 05 fe ff ff    	ja     f011619b <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116396:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011639b:	c9                   	leave  
f011639c:	c3                   	ret    

f011639d <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011639d:	55                   	push   %ebp
f011639e:	89 e5                	mov    %esp,%ebp
f01163a0:	57                   	push   %edi
f01163a1:	56                   	push   %esi
f01163a2:	53                   	push   %ebx
f01163a3:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01163a9:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f01163ae:	84 c0                	test   %al,%al
f01163b0:	0f 84 b4 09 00 00    	je     f0116d6a <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01163b6:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f01163bd:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01163c3:	bb 18 af 13 f0       	mov    $0xf013af18,%ebx
f01163c8:	ba 04 00 00 00       	mov    $0x4,%edx
f01163cd:	89 c7                	mov    %eax,%edi
f01163cf:	89 de                	mov    %ebx,%esi
f01163d1:	89 d1                	mov    %edx,%ecx
f01163d3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01163d5:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01163db:	b9 15 00 00 00       	mov    $0x15,%ecx
f01163e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01163e5:	89 d7                	mov    %edx,%edi
f01163e7:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01163e9:	83 ec 0c             	sub    $0xc,%esp
f01163ec:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01163f2:	50                   	push   %eax
f01163f3:	e8 78 a9 fe ff       	call   f0100d70 <execute_command>
f01163f8:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f01163fb:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116401:	bb 7c af 13 f0       	mov    $0xf013af7c,%ebx
f0116406:	ba 0d 00 00 00       	mov    $0xd,%edx
f011640b:	89 c7                	mov    %eax,%edi
f011640d:	89 de                	mov    %ebx,%esi
f011640f:	89 d1                	mov    %edx,%ecx
f0116411:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116413:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116419:	b9 57 00 00 00       	mov    $0x57,%ecx
f011641e:	b0 00                	mov    $0x0,%al
f0116420:	89 d7                	mov    %edx,%edi
f0116422:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116424:	83 ec 0c             	sub    $0xc,%esp
f0116427:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011642d:	50                   	push   %eax
f011642e:	e8 3d a9 fe ff       	call   f0100d70 <execute_command>
f0116433:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116436:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011643c:	bb e0 af 13 f0       	mov    $0xf013afe0,%ebx
f0116441:	ba 17 00 00 00       	mov    $0x17,%edx
f0116446:	89 c7                	mov    %eax,%edi
f0116448:	89 de                	mov    %ebx,%esi
f011644a:	89 d1                	mov    %edx,%ecx
f011644c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011644e:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116454:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116459:	b0 00                	mov    $0x0,%al
f011645b:	89 d7                	mov    %edx,%edi
f011645d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011645f:	83 ec 0c             	sub    $0xc,%esp
f0116462:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116468:	50                   	push   %eax
f0116469:	e8 02 a9 fe ff       	call   f0100d70 <execute_command>
f011646e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116471:	83 ec 04             	sub    $0x4,%esp
f0116474:	6a 00                	push   $0x0
f0116476:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116479:	50                   	push   %eax
f011647a:	68 00 10 00 00       	push   $0x1000
f011647f:	e8 86 36 ff ff       	call   f0109b0a <envid2env>
f0116484:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116487:	83 ec 04             	sub    $0x4,%esp
f011648a:	6a 00                	push   $0x0
f011648c:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011648f:	50                   	push   %eax
f0116490:	68 01 10 00 00       	push   $0x1001
f0116495:	e8 70 36 ff ff       	call   f0109b0a <envid2env>
f011649a:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011649d:	83 ec 04             	sub    $0x4,%esp
f01164a0:	6a 00                	push   $0x0
f01164a2:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01164a5:	50                   	push   %eax
f01164a6:	68 02 10 00 00       	push   $0x1002
f01164ab:	e8 5a 36 ff ff       	call   f0109b0a <envid2env>
f01164b0:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01164b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01164b6:	85 c0                	test   %eax,%eax
f01164b8:	74 0e                	je     f01164c8 <test_priority_normal_and_higher+0x12b>
f01164ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164bd:	85 c0                	test   %eax,%eax
f01164bf:	74 07                	je     f01164c8 <test_priority_normal_and_higher+0x12b>
f01164c1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164c4:	85 c0                	test   %eax,%eax
f01164c6:	75 14                	jne    f01164dc <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01164c8:	83 ec 04             	sub    $0x4,%esp
f01164cb:	68 b8 ac 13 f0       	push   $0xf013acb8
f01164d0:	6a 26                	push   $0x26
f01164d2:	68 d1 ac 13 f0       	push   $0xf013acd1
f01164d7:	e8 29 9d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01164dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01164df:	8b 40 74             	mov    0x74(%eax),%eax
f01164e2:	83 f8 14             	cmp    $0x14,%eax
f01164e5:	75 16                	jne    f01164fd <test_priority_normal_and_higher+0x160>
f01164e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164ea:	8b 40 74             	mov    0x74(%eax),%eax
f01164ed:	83 f8 0f             	cmp    $0xf,%eax
f01164f0:	75 0b                	jne    f01164fd <test_priority_normal_and_higher+0x160>
f01164f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164f5:	8b 40 74             	mov    0x74(%eax),%eax
f01164f8:	83 f8 0a             	cmp    $0xa,%eax
f01164fb:	74 14                	je     f0116511 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f01164fd:	83 ec 04             	sub    $0x4,%esp
f0116500:	68 ec ac 13 f0       	push   $0xf013acec
f0116505:	6a 29                	push   $0x29
f0116507:	68 d1 ac 13 f0       	push   $0xf013acd1
f011650c:	e8 f4 9c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116511:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116518:	eb 44                	jmp    f011655e <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011651a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011651d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116520:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116523:	89 d0                	mov    %edx,%eax
f0116525:	01 c0                	add    %eax,%eax
f0116527:	01 d0                	add    %edx,%eax
f0116529:	c1 e0 03             	shl    $0x3,%eax
f011652c:	01 c8                	add    %ecx,%eax
f011652e:	8b 10                	mov    (%eax),%edx
f0116530:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116533:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011653a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011653d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116540:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116543:	89 d0                	mov    %edx,%eax
f0116545:	01 c0                	add    %eax,%eax
f0116547:	01 d0                	add    %edx,%eax
f0116549:	c1 e0 03             	shl    $0x3,%eax
f011654c:	01 c8                	add    %ecx,%eax
f011654e:	8b 50 08             	mov    0x8(%eax),%edx
f0116551:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116554:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011655b:	ff 45 e4             	incl   -0x1c(%ebp)
f011655e:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116562:	7e b6                	jle    f011651a <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116564:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011656b:	eb 44                	jmp    f01165b1 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011656d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116570:	8b 48 78             	mov    0x78(%eax),%ecx
f0116573:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116576:	89 d0                	mov    %edx,%eax
f0116578:	01 c0                	add    %eax,%eax
f011657a:	01 d0                	add    %edx,%eax
f011657c:	c1 e0 03             	shl    $0x3,%eax
f011657f:	01 c8                	add    %ecx,%eax
f0116581:	8b 10                	mov    (%eax),%edx
f0116583:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116586:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011658d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116590:	8b 48 78             	mov    0x78(%eax),%ecx
f0116593:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116596:	89 d0                	mov    %edx,%eax
f0116598:	01 c0                	add    %eax,%eax
f011659a:	01 d0                	add    %edx,%eax
f011659c:	c1 e0 03             	shl    $0x3,%eax
f011659f:	01 c8                	add    %ecx,%eax
f01165a1:	8b 50 08             	mov    0x8(%eax),%edx
f01165a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01165a7:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01165ae:	ff 45 e0             	incl   -0x20(%ebp)
f01165b1:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01165b5:	7e b6                	jle    f011656d <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01165b7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01165be:	eb 44                	jmp    f0116604 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01165c0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01165c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01165c9:	89 d0                	mov    %edx,%eax
f01165cb:	01 c0                	add    %eax,%eax
f01165cd:	01 d0                	add    %edx,%eax
f01165cf:	c1 e0 03             	shl    $0x3,%eax
f01165d2:	01 c8                	add    %ecx,%eax
f01165d4:	8b 10                	mov    (%eax),%edx
f01165d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01165d9:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01165e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165e3:	8b 48 78             	mov    0x78(%eax),%ecx
f01165e6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01165e9:	89 d0                	mov    %edx,%eax
f01165eb:	01 c0                	add    %eax,%eax
f01165ed:	01 d0                	add    %edx,%eax
f01165ef:	c1 e0 03             	shl    $0x3,%eax
f01165f2:	01 c8                	add    %ecx,%eax
f01165f4:	8b 50 08             	mov    0x8(%eax),%edx
f01165f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01165fa:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116601:	ff 45 dc             	incl   -0x24(%ebp)
f0116604:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116608:	7e b6                	jle    f01165c0 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011660a:	e8 8e 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011660f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116612:	e8 b1 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116617:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011661a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011661d:	83 ec 08             	sub    $0x8,%esp
f0116620:	6a 03                	push   $0x3
f0116622:	50                   	push   %eax
f0116623:	e8 c0 49 ff ff       	call   f010afe8 <set_program_priority>
f0116628:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011662b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011662e:	83 ec 08             	sub    $0x8,%esp
f0116631:	6a 03                	push   $0x3
f0116633:	50                   	push   %eax
f0116634:	e8 af 49 ff ff       	call   f010afe8 <set_program_priority>
f0116639:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011663c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011663f:	83 ec 08             	sub    $0x8,%esp
f0116642:	6a 03                	push   $0x3
f0116644:	50                   	push   %eax
f0116645:	e8 9e 49 ff ff       	call   f010afe8 <set_program_priority>
f011664a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011664d:	e8 76 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116652:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116655:	74 14                	je     f011666b <test_priority_normal_and_higher+0x2ce>
f0116657:	83 ec 04             	sub    $0x4,%esp
f011665a:	68 38 ad 13 f0       	push   $0xf013ad38
f011665f:	6a 45                	push   $0x45
f0116661:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116666:	e8 9a 9b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011666b:	e8 2d 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116670:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116673:	74 14                	je     f0116689 <test_priority_normal_and_higher+0x2ec>
f0116675:	83 ec 04             	sub    $0x4,%esp
f0116678:	68 38 ad 13 f0       	push   $0xf013ad38
f011667d:	6a 46                	push   $0x46
f011667f:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116684:	e8 7c 9b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116689:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011668c:	8b 40 74             	mov    0x74(%eax),%eax
f011668f:	83 f8 14             	cmp    $0x14,%eax
f0116692:	75 16                	jne    f01166aa <test_priority_normal_and_higher+0x30d>
f0116694:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116697:	8b 40 74             	mov    0x74(%eax),%eax
f011669a:	83 f8 0f             	cmp    $0xf,%eax
f011669d:	75 0b                	jne    f01166aa <test_priority_normal_and_higher+0x30d>
f011669f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166a2:	8b 40 74             	mov    0x74(%eax),%eax
f01166a5:	83 f8 0a             	cmp    $0xa,%eax
f01166a8:	74 14                	je     f01166be <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01166aa:	83 ec 04             	sub    $0x4,%esp
f01166ad:	68 64 ad 13 f0       	push   $0xf013ad64
f01166b2:	6a 49                	push   $0x49
f01166b4:	68 d1 ac 13 f0       	push   $0xf013acd1
f01166b9:	e8 47 9b fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01166be:	e8 da 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01166c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01166c6:	e8 fd d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166cb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01166ce:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01166d1:	83 ec 08             	sub    $0x8,%esp
f01166d4:	6a 04                	push   $0x4
f01166d6:	50                   	push   %eax
f01166d7:	e8 0c 49 ff ff       	call   f010afe8 <set_program_priority>
f01166dc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01166df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166e2:	83 ec 08             	sub    $0x8,%esp
f01166e5:	6a 04                	push   $0x4
f01166e7:	50                   	push   %eax
f01166e8:	e8 fb 48 ff ff       	call   f010afe8 <set_program_priority>
f01166ed:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01166f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166f3:	83 ec 08             	sub    $0x8,%esp
f01166f6:	6a 04                	push   $0x4
f01166f8:	50                   	push   %eax
f01166f9:	e8 ea 48 ff ff       	call   f010afe8 <set_program_priority>
f01166fe:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116701:	e8 c2 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116706:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116709:	74 14                	je     f011671f <test_priority_normal_and_higher+0x382>
f011670b:	83 ec 04             	sub    $0x4,%esp
f011670e:	68 38 ad 13 f0       	push   $0xf013ad38
f0116713:	6a 53                	push   $0x53
f0116715:	68 d1 ac 13 f0       	push   $0xf013acd1
f011671a:	e8 e6 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011671f:	e8 79 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116724:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116727:	74 14                	je     f011673d <test_priority_normal_and_higher+0x3a0>
f0116729:	83 ec 04             	sub    $0x4,%esp
f011672c:	68 b8 ad 13 f0       	push   $0xf013adb8
f0116731:	6a 54                	push   $0x54
f0116733:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116738:	e8 c8 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011673d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116740:	8b 40 74             	mov    0x74(%eax),%eax
f0116743:	83 f8 14             	cmp    $0x14,%eax
f0116746:	75 16                	jne    f011675e <test_priority_normal_and_higher+0x3c1>
f0116748:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011674b:	8b 40 74             	mov    0x74(%eax),%eax
f011674e:	83 f8 0f             	cmp    $0xf,%eax
f0116751:	75 0b                	jne    f011675e <test_priority_normal_and_higher+0x3c1>
f0116753:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116756:	8b 40 74             	mov    0x74(%eax),%eax
f0116759:	83 f8 14             	cmp    $0x14,%eax
f011675c:	74 14                	je     f0116772 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f011675e:	83 ec 04             	sub    $0x4,%esp
f0116761:	68 e8 ad 13 f0       	push   $0xf013ade8
f0116766:	6a 57                	push   $0x57
f0116768:	68 d1 ac 13 f0       	push   $0xf013acd1
f011676d:	e8 93 9a fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116772:	e8 26 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116777:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011677a:	e8 49 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011677f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116782:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116785:	83 ec 08             	sub    $0x8,%esp
f0116788:	6a 04                	push   $0x4
f011678a:	50                   	push   %eax
f011678b:	e8 58 48 ff ff       	call   f010afe8 <set_program_priority>
f0116790:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116793:	e8 30 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116798:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011679b:	74 14                	je     f01167b1 <test_priority_normal_and_higher+0x414>
f011679d:	83 ec 04             	sub    $0x4,%esp
f01167a0:	68 38 ad 13 f0       	push   $0xf013ad38
f01167a5:	6a 5f                	push   $0x5f
f01167a7:	68 d1 ac 13 f0       	push   $0xf013acd1
f01167ac:	e8 54 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01167b1:	e8 e7 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01167b6:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01167b9:	74 14                	je     f01167cf <test_priority_normal_and_higher+0x432>
f01167bb:	83 ec 04             	sub    $0x4,%esp
f01167be:	68 38 ad 13 f0       	push   $0xf013ad38
f01167c3:	6a 60                	push   $0x60
f01167c5:	68 d1 ac 13 f0       	push   $0xf013acd1
f01167ca:	e8 36 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01167cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167d2:	8b 40 74             	mov    0x74(%eax),%eax
f01167d5:	83 f8 14             	cmp    $0x14,%eax
f01167d8:	75 16                	jne    f01167f0 <test_priority_normal_and_higher+0x453>
f01167da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167dd:	8b 40 74             	mov    0x74(%eax),%eax
f01167e0:	83 f8 0f             	cmp    $0xf,%eax
f01167e3:	75 0b                	jne    f01167f0 <test_priority_normal_and_higher+0x453>
f01167e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167e8:	8b 40 74             	mov    0x74(%eax),%eax
f01167eb:	83 f8 14             	cmp    $0x14,%eax
f01167ee:	74 14                	je     f0116804 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f01167f0:	83 ec 04             	sub    $0x4,%esp
f01167f3:	68 30 ae 13 f0       	push   $0xf013ae30
f01167f8:	6a 63                	push   $0x63
f01167fa:	68 d1 ac 13 f0       	push   $0xf013acd1
f01167ff:	e8 01 9a fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116804:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011680b:	eb 1b                	jmp    f0116828 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011680d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116810:	8b 48 78             	mov    0x78(%eax),%ecx
f0116813:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116816:	89 d0                	mov    %edx,%eax
f0116818:	01 c0                	add    %eax,%eax
f011681a:	01 d0                	add    %edx,%eax
f011681c:	c1 e0 03             	shl    $0x3,%eax
f011681f:	01 c8                	add    %ecx,%eax
f0116821:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116825:	ff 45 d8             	incl   -0x28(%ebp)
f0116828:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011682c:	7e df                	jle    f011680d <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011682e:	e8 6a 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116833:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116836:	e8 8d d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011683b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011683e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116841:	83 ec 08             	sub    $0x8,%esp
f0116844:	6a 04                	push   $0x4
f0116846:	50                   	push   %eax
f0116847:	e8 9c 47 ff ff       	call   f010afe8 <set_program_priority>
f011684c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011684f:	e8 74 d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116854:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116857:	74 14                	je     f011686d <test_priority_normal_and_higher+0x4d0>
f0116859:	83 ec 04             	sub    $0x4,%esp
f011685c:	68 38 ad 13 f0       	push   $0xf013ad38
f0116861:	6a 70                	push   $0x70
f0116863:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116868:	e8 98 99 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011686d:	e8 2b 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116872:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116875:	74 14                	je     f011688b <test_priority_normal_and_higher+0x4ee>
f0116877:	83 ec 04             	sub    $0x4,%esp
f011687a:	68 38 ad 13 f0       	push   $0xf013ad38
f011687f:	6a 71                	push   $0x71
f0116881:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116886:	e8 7a 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011688b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011688e:	8b 40 74             	mov    0x74(%eax),%eax
f0116891:	83 f8 14             	cmp    $0x14,%eax
f0116894:	75 16                	jne    f01168ac <test_priority_normal_and_higher+0x50f>
f0116896:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116899:	8b 40 74             	mov    0x74(%eax),%eax
f011689c:	83 f8 0f             	cmp    $0xf,%eax
f011689f:	75 0b                	jne    f01168ac <test_priority_normal_and_higher+0x50f>
f01168a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168a4:	8b 40 74             	mov    0x74(%eax),%eax
f01168a7:	83 f8 14             	cmp    $0x14,%eax
f01168aa:	74 14                	je     f01168c0 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f01168ac:	83 ec 04             	sub    $0x4,%esp
f01168af:	68 30 ae 13 f0       	push   $0xf013ae30
f01168b4:	6a 74                	push   $0x74
f01168b6:	68 d1 ac 13 f0       	push   $0xf013acd1
f01168bb:	e8 45 99 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f01168c0:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01168c7:	eb 1b                	jmp    f01168e4 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01168c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168cc:	8b 48 78             	mov    0x78(%eax),%ecx
f01168cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01168d2:	89 d0                	mov    %edx,%eax
f01168d4:	01 c0                	add    %eax,%eax
f01168d6:	01 d0                	add    %edx,%eax
f01168d8:	c1 e0 03             	shl    $0x3,%eax
f01168db:	01 c8                	add    %ecx,%eax
f01168dd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01168e1:	ff 45 d4             	incl   -0x2c(%ebp)
f01168e4:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01168e8:	7e df                	jle    f01168c9 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01168ea:	e8 ae 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01168ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168f2:	e8 d1 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01168f7:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01168fa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168fd:	83 ec 08             	sub    $0x8,%esp
f0116900:	6a 05                	push   $0x5
f0116902:	50                   	push   %eax
f0116903:	e8 e0 46 ff ff       	call   f010afe8 <set_program_priority>
f0116908:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011690b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011690e:	83 ec 08             	sub    $0x8,%esp
f0116911:	6a 05                	push   $0x5
f0116913:	50                   	push   %eax
f0116914:	e8 cf 46 ff ff       	call   f010afe8 <set_program_priority>
f0116919:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011691c:	e8 a7 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116921:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116924:	74 14                	je     f011693a <test_priority_normal_and_higher+0x59d>
f0116926:	83 ec 04             	sub    $0x4,%esp
f0116929:	68 38 ad 13 f0       	push   $0xf013ad38
f011692e:	6a 7f                	push   $0x7f
f0116930:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116935:	e8 cb 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011693a:	e8 5e 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011693f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116942:	74 17                	je     f011695b <test_priority_normal_and_higher+0x5be>
f0116944:	83 ec 04             	sub    $0x4,%esp
f0116947:	68 38 ad 13 f0       	push   $0xf013ad38
f011694c:	68 80 00 00 00       	push   $0x80
f0116951:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116956:	e8 aa 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011695b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011695e:	8b 40 74             	mov    0x74(%eax),%eax
f0116961:	83 f8 14             	cmp    $0x14,%eax
f0116964:	75 16                	jne    f011697c <test_priority_normal_and_higher+0x5df>
f0116966:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116969:	8b 40 74             	mov    0x74(%eax),%eax
f011696c:	83 f8 1e             	cmp    $0x1e,%eax
f011696f:	75 0b                	jne    f011697c <test_priority_normal_and_higher+0x5df>
f0116971:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116974:	8b 40 74             	mov    0x74(%eax),%eax
f0116977:	83 f8 28             	cmp    $0x28,%eax
f011697a:	74 17                	je     f0116993 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f011697c:	83 ec 04             	sub    $0x4,%esp
f011697f:	68 6c ae 13 f0       	push   $0xf013ae6c
f0116984:	68 83 00 00 00       	push   $0x83
f0116989:	68 d1 ac 13 f0       	push   $0xf013acd1
f011698e:	e8 72 98 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116993:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011699a:	eb 1b                	jmp    f01169b7 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011699c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011699f:	8b 48 78             	mov    0x78(%eax),%ecx
f01169a2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01169a5:	89 d0                	mov    %edx,%eax
f01169a7:	01 c0                	add    %eax,%eax
f01169a9:	01 d0                	add    %edx,%eax
f01169ab:	c1 e0 03             	shl    $0x3,%eax
f01169ae:	01 c8                	add    %ecx,%eax
f01169b0:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01169b4:	ff 45 d0             	incl   -0x30(%ebp)
f01169b7:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01169bb:	7e df                	jle    f011699c <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01169bd:	e8 db 61 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01169c2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169c5:	e8 fe d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01169ca:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01169cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169d0:	83 ec 08             	sub    $0x8,%esp
f01169d3:	6a 05                	push   $0x5
f01169d5:	50                   	push   %eax
f01169d6:	e8 0d 46 ff ff       	call   f010afe8 <set_program_priority>
f01169db:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01169de:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169e1:	83 ec 08             	sub    $0x8,%esp
f01169e4:	6a 04                	push   $0x4
f01169e6:	50                   	push   %eax
f01169e7:	e8 fc 45 ff ff       	call   f010afe8 <set_program_priority>
f01169ec:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01169ef:	e8 d4 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01169f4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01169f7:	74 17                	je     f0116a10 <test_priority_normal_and_higher+0x673>
f01169f9:	83 ec 04             	sub    $0x4,%esp
f01169fc:	68 38 ad 13 f0       	push   $0xf013ad38
f0116a01:	68 8e 00 00 00       	push   $0x8e
f0116a06:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116a0b:	e8 f5 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116a10:	e8 88 61 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116a15:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a18:	74 17                	je     f0116a31 <test_priority_normal_and_higher+0x694>
f0116a1a:	83 ec 04             	sub    $0x4,%esp
f0116a1d:	68 38 ad 13 f0       	push   $0xf013ad38
f0116a22:	68 8f 00 00 00       	push   $0x8f
f0116a27:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116a2c:	e8 d4 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116a31:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a34:	8b 40 74             	mov    0x74(%eax),%eax
f0116a37:	83 f8 14             	cmp    $0x14,%eax
f0116a3a:	75 16                	jne    f0116a52 <test_priority_normal_and_higher+0x6b5>
f0116a3c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a3f:	8b 40 74             	mov    0x74(%eax),%eax
f0116a42:	83 f8 1e             	cmp    $0x1e,%eax
f0116a45:	75 0b                	jne    f0116a52 <test_priority_normal_and_higher+0x6b5>
f0116a47:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a4a:	8b 40 74             	mov    0x74(%eax),%eax
f0116a4d:	83 f8 28             	cmp    $0x28,%eax
f0116a50:	74 17                	je     f0116a69 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116a52:	83 ec 04             	sub    $0x4,%esp
f0116a55:	68 6c ae 13 f0       	push   $0xf013ae6c
f0116a5a:	68 92 00 00 00       	push   $0x92
f0116a5f:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116a64:	e8 9c 97 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116a69:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116a70:	eb 1b                	jmp    f0116a8d <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116a72:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a75:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a78:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116a7b:	89 d0                	mov    %edx,%eax
f0116a7d:	01 c0                	add    %eax,%eax
f0116a7f:	01 d0                	add    %edx,%eax
f0116a81:	c1 e0 03             	shl    $0x3,%eax
f0116a84:	01 c8                	add    %ecx,%eax
f0116a86:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116a8a:	ff 45 cc             	incl   -0x34(%ebp)
f0116a8d:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116a91:	7e df                	jle    f0116a72 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116a93:	e8 05 61 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116a98:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a9b:	e8 28 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116aa0:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116aa3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116aa6:	83 ec 08             	sub    $0x8,%esp
f0116aa9:	6a 05                	push   $0x5
f0116aab:	50                   	push   %eax
f0116aac:	e8 37 45 ff ff       	call   f010afe8 <set_program_priority>
f0116ab1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116ab4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ab7:	83 ec 08             	sub    $0x8,%esp
f0116aba:	6a 04                	push   $0x4
f0116abc:	50                   	push   %eax
f0116abd:	e8 26 45 ff ff       	call   f010afe8 <set_program_priority>
f0116ac2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ac5:	e8 fe d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116aca:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116acd:	74 17                	je     f0116ae6 <test_priority_normal_and_higher+0x749>
f0116acf:	83 ec 04             	sub    $0x4,%esp
f0116ad2:	68 38 ad 13 f0       	push   $0xf013ad38
f0116ad7:	68 9d 00 00 00       	push   $0x9d
f0116adc:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116ae1:	e8 1f 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116ae6:	e8 b2 60 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116aeb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116aee:	74 17                	je     f0116b07 <test_priority_normal_and_higher+0x76a>
f0116af0:	83 ec 04             	sub    $0x4,%esp
f0116af3:	68 38 ad 13 f0       	push   $0xf013ad38
f0116af8:	68 9e 00 00 00       	push   $0x9e
f0116afd:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116b02:	e8 fe 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116b07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b0a:	8b 40 74             	mov    0x74(%eax),%eax
f0116b0d:	83 f8 14             	cmp    $0x14,%eax
f0116b10:	75 16                	jne    f0116b28 <test_priority_normal_and_higher+0x78b>
f0116b12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b15:	8b 40 74             	mov    0x74(%eax),%eax
f0116b18:	83 f8 3c             	cmp    $0x3c,%eax
f0116b1b:	75 0b                	jne    f0116b28 <test_priority_normal_and_higher+0x78b>
f0116b1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b20:	8b 40 74             	mov    0x74(%eax),%eax
f0116b23:	83 f8 28             	cmp    $0x28,%eax
f0116b26:	74 17                	je     f0116b3f <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116b28:	83 ec 04             	sub    $0x4,%esp
f0116b2b:	68 6c ae 13 f0       	push   $0xf013ae6c
f0116b30:	68 a1 00 00 00       	push   $0xa1
f0116b35:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116b3a:	e8 c6 96 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116b3f:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116b46:	eb 1b                	jmp    f0116b63 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116b48:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b4b:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b4e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116b51:	89 d0                	mov    %edx,%eax
f0116b53:	01 c0                	add    %eax,%eax
f0116b55:	01 d0                	add    %edx,%eax
f0116b57:	c1 e0 03             	shl    $0x3,%eax
f0116b5a:	01 c8                	add    %ecx,%eax
f0116b5c:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116b60:	ff 45 c8             	incl   -0x38(%ebp)
f0116b63:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116b67:	7e df                	jle    f0116b48 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116b69:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116b70:	eb 1b                	jmp    f0116b8d <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116b72:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b75:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b78:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116b7b:	89 d0                	mov    %edx,%eax
f0116b7d:	01 c0                	add    %eax,%eax
f0116b7f:	01 d0                	add    %edx,%eax
f0116b81:	c1 e0 03             	shl    $0x3,%eax
f0116b84:	01 c8                	add    %ecx,%eax
f0116b86:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116b8a:	ff 45 c4             	incl   -0x3c(%ebp)
f0116b8d:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116b91:	7e df                	jle    f0116b72 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116b93:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116b9a:	eb 7a                	jmp    f0116c16 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116b9f:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116ba6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ba9:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bac:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116baf:	89 d0                	mov    %edx,%eax
f0116bb1:	01 c0                	add    %eax,%eax
f0116bb3:	01 d0                	add    %edx,%eax
f0116bb5:	c1 e0 03             	shl    $0x3,%eax
f0116bb8:	01 d8                	add    %ebx,%eax
f0116bba:	8b 00                	mov    (%eax),%eax
f0116bbc:	39 c1                	cmp    %eax,%ecx
f0116bbe:	74 17                	je     f0116bd7 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116bc0:	83 ec 04             	sub    $0x4,%esp
f0116bc3:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116bc8:	68 af 00 00 00       	push   $0xaf
f0116bcd:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116bd2:	e8 2e 96 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116bd7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116bda:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116be1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116be4:	8b 58 78             	mov    0x78(%eax),%ebx
f0116be7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116bea:	89 d0                	mov    %edx,%eax
f0116bec:	01 c0                	add    %eax,%eax
f0116bee:	01 d0                	add    %edx,%eax
f0116bf0:	c1 e0 03             	shl    $0x3,%eax
f0116bf3:	01 d8                	add    %ebx,%eax
f0116bf5:	8b 40 08             	mov    0x8(%eax),%eax
f0116bf8:	39 c1                	cmp    %eax,%ecx
f0116bfa:	74 17                	je     f0116c13 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116bfc:	83 ec 04             	sub    $0x4,%esp
f0116bff:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116c04:	68 b2 00 00 00       	push   $0xb2
f0116c09:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116c0e:	e8 f2 95 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116c13:	ff 45 c0             	incl   -0x40(%ebp)
f0116c16:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116c1a:	7e 80                	jle    f0116b9c <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116c1c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116c23:	eb 7a                	jmp    f0116c9f <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c25:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116c28:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116c2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c32:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c35:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116c38:	89 d0                	mov    %edx,%eax
f0116c3a:	01 c0                	add    %eax,%eax
f0116c3c:	01 d0                	add    %edx,%eax
f0116c3e:	c1 e0 03             	shl    $0x3,%eax
f0116c41:	01 d8                	add    %ebx,%eax
f0116c43:	8b 00                	mov    (%eax),%eax
f0116c45:	39 c1                	cmp    %eax,%ecx
f0116c47:	74 17                	je     f0116c60 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116c49:	83 ec 04             	sub    $0x4,%esp
f0116c4c:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116c51:	68 b8 00 00 00       	push   $0xb8
f0116c56:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116c5b:	e8 a5 95 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116c63:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116c6a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c6d:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c70:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116c73:	89 d0                	mov    %edx,%eax
f0116c75:	01 c0                	add    %eax,%eax
f0116c77:	01 d0                	add    %edx,%eax
f0116c79:	c1 e0 03             	shl    $0x3,%eax
f0116c7c:	01 d8                	add    %ebx,%eax
f0116c7e:	8b 40 08             	mov    0x8(%eax),%eax
f0116c81:	39 c1                	cmp    %eax,%ecx
f0116c83:	74 17                	je     f0116c9c <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116c85:	83 ec 04             	sub    $0x4,%esp
f0116c88:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116c8d:	68 bb 00 00 00       	push   $0xbb
f0116c92:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116c97:	e8 69 95 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116c9c:	ff 45 bc             	incl   -0x44(%ebp)
f0116c9f:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116ca3:	7e 80                	jle    f0116c25 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116ca5:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116cac:	eb 7a                	jmp    f0116d28 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116cae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cb1:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116cb8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cbb:	8b 58 78             	mov    0x78(%eax),%ebx
f0116cbe:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116cc1:	89 d0                	mov    %edx,%eax
f0116cc3:	01 c0                	add    %eax,%eax
f0116cc5:	01 d0                	add    %edx,%eax
f0116cc7:	c1 e0 03             	shl    $0x3,%eax
f0116cca:	01 d8                	add    %ebx,%eax
f0116ccc:	8b 00                	mov    (%eax),%eax
f0116cce:	39 c1                	cmp    %eax,%ecx
f0116cd0:	74 17                	je     f0116ce9 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116cd2:	83 ec 04             	sub    $0x4,%esp
f0116cd5:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116cda:	68 c1 00 00 00       	push   $0xc1
f0116cdf:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116ce4:	e8 1c 95 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ce9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cec:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116cf3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cf6:	8b 58 78             	mov    0x78(%eax),%ebx
f0116cf9:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116cfc:	89 d0                	mov    %edx,%eax
f0116cfe:	01 c0                	add    %eax,%eax
f0116d00:	01 d0                	add    %edx,%eax
f0116d02:	c1 e0 03             	shl    $0x3,%eax
f0116d05:	01 d8                	add    %ebx,%eax
f0116d07:	8b 40 08             	mov    0x8(%eax),%eax
f0116d0a:	39 c1                	cmp    %eax,%ecx
f0116d0c:	74 17                	je     f0116d25 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116d0e:	83 ec 04             	sub    $0x4,%esp
f0116d11:	68 a8 ae 13 f0       	push   $0xf013aea8
f0116d16:	68 c4 00 00 00       	push   $0xc4
f0116d1b:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116d20:	e8 e0 94 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116d25:	ff 45 b8             	incl   -0x48(%ebp)
f0116d28:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116d2c:	7e 80                	jle    f0116cae <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116d2e:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116d35:	75 6e 61 
f0116d38:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116d3f:	6c 00 00 
f0116d42:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116d48:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116d4d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d52:	89 d7                	mov    %edx,%edi
f0116d54:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116d56:	83 ec 0c             	sub    $0xc,%esp
f0116d59:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116d5f:	50                   	push   %eax
f0116d60:	e8 0b a0 fe ff       	call   f0100d70 <execute_command>
f0116d65:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116d68:	eb 10                	jmp    f0116d7a <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116d6a:	83 ec 0c             	sub    $0xc,%esp
f0116d6d:	68 dc ae 13 f0       	push   $0xf013aedc
f0116d72:	e8 97 9f fe ff       	call   f0100d0e <cprintf>
f0116d77:	83 c4 10             	add    $0x10,%esp
	}
}
f0116d7a:	90                   	nop
f0116d7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116d7e:	5b                   	pop    %ebx
f0116d7f:	5e                   	pop    %esi
f0116d80:	5f                   	pop    %edi
f0116d81:	5d                   	pop    %ebp
f0116d82:	c3                   	ret    

f0116d83 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116d83:	55                   	push   %ebp
f0116d84:	89 e5                	mov    %esp,%ebp
f0116d86:	57                   	push   %edi
f0116d87:	56                   	push   %esi
f0116d88:	53                   	push   %ebx
f0116d89:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116d8f:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0116d94:	84 c0                	test   %al,%al
f0116d96:	0f 84 be 09 00 00    	je     f011775a <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116d9c:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0116da3:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116da9:	bb 18 af 13 f0       	mov    $0xf013af18,%ebx
f0116dae:	ba 04 00 00 00       	mov    $0x4,%edx
f0116db3:	89 c7                	mov    %eax,%edi
f0116db5:	89 de                	mov    %ebx,%esi
f0116db7:	89 d1                	mov    %edx,%ecx
f0116db9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116dbb:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116dc1:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116dc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0116dcb:	89 d7                	mov    %edx,%edi
f0116dcd:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116dcf:	83 ec 0c             	sub    $0xc,%esp
f0116dd2:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116dd8:	50                   	push   %eax
f0116dd9:	e8 92 9f fe ff       	call   f0100d70 <execute_command>
f0116dde:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116de1:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116de7:	bb d4 b1 13 f0       	mov    $0xf013b1d4,%ebx
f0116dec:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116df1:	89 c7                	mov    %eax,%edi
f0116df3:	89 de                	mov    %ebx,%esi
f0116df5:	89 d1                	mov    %edx,%ecx
f0116df7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116df9:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116dff:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116e04:	b0 00                	mov    $0x0,%al
f0116e06:	89 d7                	mov    %edx,%edi
f0116e08:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116e0a:	83 ec 0c             	sub    $0xc,%esp
f0116e0d:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116e13:	50                   	push   %eax
f0116e14:	e8 57 9f fe ff       	call   f0100d70 <execute_command>
f0116e19:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116e1c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116e22:	bb 38 b2 13 f0       	mov    $0xf013b238,%ebx
f0116e27:	ba 17 00 00 00       	mov    $0x17,%edx
f0116e2c:	89 c7                	mov    %eax,%edi
f0116e2e:	89 de                	mov    %ebx,%esi
f0116e30:	89 d1                	mov    %edx,%ecx
f0116e32:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116e34:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116e3a:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116e3f:	b0 00                	mov    $0x0,%al
f0116e41:	89 d7                	mov    %edx,%edi
f0116e43:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116e45:	83 ec 0c             	sub    $0xc,%esp
f0116e48:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116e4e:	50                   	push   %eax
f0116e4f:	e8 1c 9f fe ff       	call   f0100d70 <execute_command>
f0116e54:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116e57:	83 ec 04             	sub    $0x4,%esp
f0116e5a:	6a 00                	push   $0x0
f0116e5c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116e5f:	50                   	push   %eax
f0116e60:	68 00 10 00 00       	push   $0x1000
f0116e65:	e8 a0 2c ff ff       	call   f0109b0a <envid2env>
f0116e6a:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116e6d:	83 ec 04             	sub    $0x4,%esp
f0116e70:	6a 00                	push   $0x0
f0116e72:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116e75:	50                   	push   %eax
f0116e76:	68 01 10 00 00       	push   $0x1001
f0116e7b:	e8 8a 2c ff ff       	call   f0109b0a <envid2env>
f0116e80:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116e83:	83 ec 04             	sub    $0x4,%esp
f0116e86:	6a 00                	push   $0x0
f0116e88:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116e8b:	50                   	push   %eax
f0116e8c:	68 02 10 00 00       	push   $0x1002
f0116e91:	e8 74 2c ff ff       	call   f0109b0a <envid2env>
f0116e96:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116e99:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e9c:	85 c0                	test   %eax,%eax
f0116e9e:	74 0e                	je     f0116eae <test_priority_normal_and_lower+0x12b>
f0116ea0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ea3:	85 c0                	test   %eax,%eax
f0116ea5:	74 07                	je     f0116eae <test_priority_normal_and_lower+0x12b>
f0116ea7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116eaa:	85 c0                	test   %eax,%eax
f0116eac:	75 17                	jne    f0116ec5 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116eae:	83 ec 04             	sub    $0x4,%esp
f0116eb1:	68 b8 ac 13 f0       	push   $0xf013acb8
f0116eb6:	68 eb 00 00 00       	push   $0xeb
f0116ebb:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116ec0:	e8 40 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116ec5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ec8:	8b 40 74             	mov    0x74(%eax),%eax
f0116ecb:	83 f8 14             	cmp    $0x14,%eax
f0116ece:	75 16                	jne    f0116ee6 <test_priority_normal_and_lower+0x163>
f0116ed0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ed3:	8b 40 74             	mov    0x74(%eax),%eax
f0116ed6:	83 f8 1e             	cmp    $0x1e,%eax
f0116ed9:	75 0b                	jne    f0116ee6 <test_priority_normal_and_lower+0x163>
f0116edb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ede:	8b 40 74             	mov    0x74(%eax),%eax
f0116ee1:	83 f8 28             	cmp    $0x28,%eax
f0116ee4:	74 17                	je     f0116efd <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116ee6:	83 ec 04             	sub    $0x4,%esp
f0116ee9:	68 ec ac 13 f0       	push   $0xf013acec
f0116eee:	68 ee 00 00 00       	push   $0xee
f0116ef3:	68 d1 ac 13 f0       	push   $0xf013acd1
f0116ef8:	e8 08 93 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116efd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116f04:	eb 44                	jmp    f0116f4a <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116f06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f09:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f0c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116f0f:	89 d0                	mov    %edx,%eax
f0116f11:	01 c0                	add    %eax,%eax
f0116f13:	01 d0                	add    %edx,%eax
f0116f15:	c1 e0 03             	shl    $0x3,%eax
f0116f18:	01 c8                	add    %ecx,%eax
f0116f1a:	8b 10                	mov    (%eax),%edx
f0116f1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116f1f:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116f26:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f29:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f2c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116f2f:	89 d0                	mov    %edx,%eax
f0116f31:	01 c0                	add    %eax,%eax
f0116f33:	01 d0                	add    %edx,%eax
f0116f35:	c1 e0 03             	shl    $0x3,%eax
f0116f38:	01 c8                	add    %ecx,%eax
f0116f3a:	8b 50 08             	mov    0x8(%eax),%edx
f0116f3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116f40:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116f47:	ff 45 e4             	incl   -0x1c(%ebp)
f0116f4a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116f4e:	7e b6                	jle    f0116f06 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116f50:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116f57:	eb 44                	jmp    f0116f9d <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116f59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f5c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116f62:	89 d0                	mov    %edx,%eax
f0116f64:	01 c0                	add    %eax,%eax
f0116f66:	01 d0                	add    %edx,%eax
f0116f68:	c1 e0 03             	shl    $0x3,%eax
f0116f6b:	01 c8                	add    %ecx,%eax
f0116f6d:	8b 10                	mov    (%eax),%edx
f0116f6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116f72:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116f79:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116f82:	89 d0                	mov    %edx,%eax
f0116f84:	01 c0                	add    %eax,%eax
f0116f86:	01 d0                	add    %edx,%eax
f0116f88:	c1 e0 03             	shl    $0x3,%eax
f0116f8b:	01 c8                	add    %ecx,%eax
f0116f8d:	8b 50 08             	mov    0x8(%eax),%edx
f0116f90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116f93:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116f9a:	ff 45 e0             	incl   -0x20(%ebp)
f0116f9d:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116fa1:	7e b6                	jle    f0116f59 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116fa3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116faa:	eb 44                	jmp    f0116ff0 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116fac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116faf:	8b 48 78             	mov    0x78(%eax),%ecx
f0116fb2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116fb5:	89 d0                	mov    %edx,%eax
f0116fb7:	01 c0                	add    %eax,%eax
f0116fb9:	01 d0                	add    %edx,%eax
f0116fbb:	c1 e0 03             	shl    $0x3,%eax
f0116fbe:	01 c8                	add    %ecx,%eax
f0116fc0:	8b 10                	mov    (%eax),%edx
f0116fc2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116fc5:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116fcc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fcf:	8b 48 78             	mov    0x78(%eax),%ecx
f0116fd2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116fd5:	89 d0                	mov    %edx,%eax
f0116fd7:	01 c0                	add    %eax,%eax
f0116fd9:	01 d0                	add    %edx,%eax
f0116fdb:	c1 e0 03             	shl    $0x3,%eax
f0116fde:	01 c8                	add    %ecx,%eax
f0116fe0:	8b 50 08             	mov    0x8(%eax),%edx
f0116fe3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116fe6:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116fed:	ff 45 dc             	incl   -0x24(%ebp)
f0116ff0:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116ff4:	7e b6                	jle    f0116fac <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116ff6:	e8 a2 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116ffb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116ffe:	e8 c5 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117003:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117006:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117009:	83 ec 08             	sub    $0x8,%esp
f011700c:	6a 03                	push   $0x3
f011700e:	50                   	push   %eax
f011700f:	e8 d4 3f ff ff       	call   f010afe8 <set_program_priority>
f0117014:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117017:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011701a:	83 ec 08             	sub    $0x8,%esp
f011701d:	6a 03                	push   $0x3
f011701f:	50                   	push   %eax
f0117020:	e8 c3 3f ff ff       	call   f010afe8 <set_program_priority>
f0117025:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117028:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011702b:	83 ec 08             	sub    $0x8,%esp
f011702e:	6a 03                	push   $0x3
f0117030:	50                   	push   %eax
f0117031:	e8 b2 3f ff ff       	call   f010afe8 <set_program_priority>
f0117036:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117039:	e8 8a cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011703e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117041:	74 17                	je     f011705a <test_priority_normal_and_lower+0x2d7>
f0117043:	83 ec 04             	sub    $0x4,%esp
f0117046:	68 38 ad 13 f0       	push   $0xf013ad38
f011704b:	68 0a 01 00 00       	push   $0x10a
f0117050:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117055:	e8 ab 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011705a:	e8 3e 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011705f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117062:	74 17                	je     f011707b <test_priority_normal_and_lower+0x2f8>
f0117064:	83 ec 04             	sub    $0x4,%esp
f0117067:	68 38 ad 13 f0       	push   $0xf013ad38
f011706c:	68 0b 01 00 00       	push   $0x10b
f0117071:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117076:	e8 8a 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011707b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011707e:	8b 40 74             	mov    0x74(%eax),%eax
f0117081:	83 f8 14             	cmp    $0x14,%eax
f0117084:	75 16                	jne    f011709c <test_priority_normal_and_lower+0x319>
f0117086:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117089:	8b 40 74             	mov    0x74(%eax),%eax
f011708c:	83 f8 1e             	cmp    $0x1e,%eax
f011708f:	75 0b                	jne    f011709c <test_priority_normal_and_lower+0x319>
f0117091:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117094:	8b 40 74             	mov    0x74(%eax),%eax
f0117097:	83 f8 28             	cmp    $0x28,%eax
f011709a:	74 17                	je     f01170b3 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011709c:	83 ec 04             	sub    $0x4,%esp
f011709f:	68 64 ad 13 f0       	push   $0xf013ad64
f01170a4:	68 0e 01 00 00       	push   $0x10e
f01170a9:	68 d1 ac 13 f0       	push   $0xf013acd1
f01170ae:	e8 52 91 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01170b3:	e8 e5 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01170b8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170bb:	e8 08 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170c0:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01170c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170c6:	83 ec 08             	sub    $0x8,%esp
f01170c9:	6a 02                	push   $0x2
f01170cb:	50                   	push   %eax
f01170cc:	e8 17 3f ff ff       	call   f010afe8 <set_program_priority>
f01170d1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01170d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170d7:	83 ec 08             	sub    $0x8,%esp
f01170da:	6a 02                	push   $0x2
f01170dc:	50                   	push   %eax
f01170dd:	e8 06 3f ff ff       	call   f010afe8 <set_program_priority>
f01170e2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01170e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170e8:	83 ec 08             	sub    $0x8,%esp
f01170eb:	6a 02                	push   $0x2
f01170ed:	50                   	push   %eax
f01170ee:	e8 f5 3e ff ff       	call   f010afe8 <set_program_priority>
f01170f3:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01170f6:	e8 cd cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170fb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01170fe:	74 17                	je     f0117117 <test_priority_normal_and_lower+0x394>
f0117100:	83 ec 04             	sub    $0x4,%esp
f0117103:	68 38 ad 13 f0       	push   $0xf013ad38
f0117108:	68 18 01 00 00       	push   $0x118
f011710d:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117112:	e8 ee 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117117:	e8 81 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011711c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011711f:	74 21                	je     f0117142 <test_priority_normal_and_lower+0x3bf>
f0117121:	e8 77 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117126:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117129:	29 c2                	sub    %eax,%edx
f011712b:	89 d0                	mov    %edx,%eax
f011712d:	50                   	push   %eax
f011712e:	68 b8 ad 13 f0       	push   $0xf013adb8
f0117133:	68 19 01 00 00       	push   $0x119
f0117138:	68 d1 ac 13 f0       	push   $0xf013acd1
f011713d:	e8 c3 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117142:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117145:	8b 40 74             	mov    0x74(%eax),%eax
f0117148:	83 f8 0a             	cmp    $0xa,%eax
f011714b:	75 16                	jne    f0117163 <test_priority_normal_and_lower+0x3e0>
f011714d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117150:	8b 40 74             	mov    0x74(%eax),%eax
f0117153:	83 f8 0f             	cmp    $0xf,%eax
f0117156:	75 0b                	jne    f0117163 <test_priority_normal_and_lower+0x3e0>
f0117158:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011715b:	8b 40 74             	mov    0x74(%eax),%eax
f011715e:	83 f8 14             	cmp    $0x14,%eax
f0117161:	74 17                	je     f011717a <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117163:	83 ec 04             	sub    $0x4,%esp
f0117166:	68 e8 ad 13 f0       	push   $0xf013ade8
f011716b:	68 1c 01 00 00       	push   $0x11c
f0117170:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117175:	e8 8b 90 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011717a:	e8 1e 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011717f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117182:	e8 41 cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117187:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011718a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011718d:	83 ec 08             	sub    $0x8,%esp
f0117190:	6a 02                	push   $0x2
f0117192:	50                   	push   %eax
f0117193:	e8 50 3e ff ff       	call   f010afe8 <set_program_priority>
f0117198:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011719b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011719e:	83 ec 08             	sub    $0x8,%esp
f01171a1:	6a 02                	push   $0x2
f01171a3:	50                   	push   %eax
f01171a4:	e8 3f 3e ff ff       	call   f010afe8 <set_program_priority>
f01171a9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01171ac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171af:	83 ec 08             	sub    $0x8,%esp
f01171b2:	6a 02                	push   $0x2
f01171b4:	50                   	push   %eax
f01171b5:	e8 2e 3e ff ff       	call   f010afe8 <set_program_priority>
f01171ba:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01171bd:	e8 06 cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01171c2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01171c5:	74 17                	je     f01171de <test_priority_normal_and_lower+0x45b>
f01171c7:	83 ec 04             	sub    $0x4,%esp
f01171ca:	68 38 ad 13 f0       	push   $0xf013ad38
f01171cf:	68 26 01 00 00       	push   $0x126
f01171d4:	68 d1 ac 13 f0       	push   $0xf013acd1
f01171d9:	e8 27 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01171de:	e8 ba 59 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01171e3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01171e6:	74 21                	je     f0117209 <test_priority_normal_and_lower+0x486>
f01171e8:	e8 b0 59 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01171ed:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01171f0:	29 c2                	sub    %eax,%edx
f01171f2:	89 d0                	mov    %edx,%eax
f01171f4:	50                   	push   %eax
f01171f5:	68 b8 ad 13 f0       	push   $0xf013adb8
f01171fa:	68 27 01 00 00       	push   $0x127
f01171ff:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117204:	e8 fc 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117209:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011720c:	8b 40 74             	mov    0x74(%eax),%eax
f011720f:	83 f8 0a             	cmp    $0xa,%eax
f0117212:	75 16                	jne    f011722a <test_priority_normal_and_lower+0x4a7>
f0117214:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117217:	8b 40 74             	mov    0x74(%eax),%eax
f011721a:	83 f8 0f             	cmp    $0xf,%eax
f011721d:	75 0b                	jne    f011722a <test_priority_normal_and_lower+0x4a7>
f011721f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117222:	8b 40 74             	mov    0x74(%eax),%eax
f0117225:	83 f8 0a             	cmp    $0xa,%eax
f0117228:	74 17                	je     f0117241 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f011722a:	83 ec 04             	sub    $0x4,%esp
f011722d:	68 e8 ad 13 f0       	push   $0xf013ade8
f0117232:	68 2a 01 00 00       	push   $0x12a
f0117237:	68 d1 ac 13 f0       	push   $0xf013acd1
f011723c:	e8 c4 8f fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117241:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117248:	eb 7a                	jmp    f01172c4 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011724a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011724d:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117254:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117257:	8b 58 78             	mov    0x78(%eax),%ebx
f011725a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011725d:	89 d0                	mov    %edx,%eax
f011725f:	01 c0                	add    %eax,%eax
f0117261:	01 d0                	add    %edx,%eax
f0117263:	c1 e0 03             	shl    $0x3,%eax
f0117266:	01 d8                	add    %ebx,%eax
f0117268:	8b 00                	mov    (%eax),%eax
f011726a:	39 c1                	cmp    %eax,%ecx
f011726c:	74 17                	je     f0117285 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f011726e:	83 ec 04             	sub    $0x4,%esp
f0117271:	68 a8 ae 13 f0       	push   $0xf013aea8
f0117276:	68 2f 01 00 00       	push   $0x12f
f011727b:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117280:	e8 80 8f fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117285:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117288:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011728f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117292:	8b 58 78             	mov    0x78(%eax),%ebx
f0117295:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117298:	89 d0                	mov    %edx,%eax
f011729a:	01 c0                	add    %eax,%eax
f011729c:	01 d0                	add    %edx,%eax
f011729e:	c1 e0 03             	shl    $0x3,%eax
f01172a1:	01 d8                	add    %ebx,%eax
f01172a3:	8b 40 08             	mov    0x8(%eax),%eax
f01172a6:	39 c1                	cmp    %eax,%ecx
f01172a8:	74 17                	je     f01172c1 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01172aa:	83 ec 04             	sub    $0x4,%esp
f01172ad:	68 a8 ae 13 f0       	push   $0xf013aea8
f01172b2:	68 32 01 00 00       	push   $0x132
f01172b7:	68 d1 ac 13 f0       	push   $0xf013acd1
f01172bc:	e8 44 8f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01172c1:	ff 45 d8             	incl   -0x28(%ebp)
f01172c4:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01172c8:	7e 80                	jle    f011724a <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01172ca:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01172d1:	eb 7a                	jmp    f011734d <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01172d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01172d6:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01172dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172e0:	8b 58 78             	mov    0x78(%eax),%ebx
f01172e3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01172e6:	89 d0                	mov    %edx,%eax
f01172e8:	01 c0                	add    %eax,%eax
f01172ea:	01 d0                	add    %edx,%eax
f01172ec:	c1 e0 03             	shl    $0x3,%eax
f01172ef:	01 d8                	add    %ebx,%eax
f01172f1:	8b 00                	mov    (%eax),%eax
f01172f3:	39 c1                	cmp    %eax,%ecx
f01172f5:	74 17                	je     f011730e <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f01172f7:	83 ec 04             	sub    $0x4,%esp
f01172fa:	68 a8 ae 13 f0       	push   $0xf013aea8
f01172ff:	68 38 01 00 00       	push   $0x138
f0117304:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117309:	e8 f7 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011730e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117311:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117318:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011731b:	8b 58 78             	mov    0x78(%eax),%ebx
f011731e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117321:	89 d0                	mov    %edx,%eax
f0117323:	01 c0                	add    %eax,%eax
f0117325:	01 d0                	add    %edx,%eax
f0117327:	c1 e0 03             	shl    $0x3,%eax
f011732a:	01 d8                	add    %ebx,%eax
f011732c:	8b 40 08             	mov    0x8(%eax),%eax
f011732f:	39 c1                	cmp    %eax,%ecx
f0117331:	74 17                	je     f011734a <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117333:	83 ec 04             	sub    $0x4,%esp
f0117336:	68 a8 ae 13 f0       	push   $0xf013aea8
f011733b:	68 3b 01 00 00       	push   $0x13b
f0117340:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117345:	e8 bb 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011734a:	ff 45 d4             	incl   -0x2c(%ebp)
f011734d:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117351:	7e 80                	jle    f01172d3 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117353:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011735a:	eb 7a                	jmp    f01173d6 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011735c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011735f:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117366:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117369:	8b 58 78             	mov    0x78(%eax),%ebx
f011736c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011736f:	89 d0                	mov    %edx,%eax
f0117371:	01 c0                	add    %eax,%eax
f0117373:	01 d0                	add    %edx,%eax
f0117375:	c1 e0 03             	shl    $0x3,%eax
f0117378:	01 d8                	add    %ebx,%eax
f011737a:	8b 00                	mov    (%eax),%eax
f011737c:	39 c1                	cmp    %eax,%ecx
f011737e:	74 17                	je     f0117397 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117380:	83 ec 04             	sub    $0x4,%esp
f0117383:	68 a8 ae 13 f0       	push   $0xf013aea8
f0117388:	68 41 01 00 00       	push   $0x141
f011738d:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117392:	e8 6e 8e fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117397:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011739a:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01173a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173a4:	8b 58 78             	mov    0x78(%eax),%ebx
f01173a7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01173aa:	89 d0                	mov    %edx,%eax
f01173ac:	01 c0                	add    %eax,%eax
f01173ae:	01 d0                	add    %edx,%eax
f01173b0:	c1 e0 03             	shl    $0x3,%eax
f01173b3:	01 d8                	add    %ebx,%eax
f01173b5:	8b 40 08             	mov    0x8(%eax),%eax
f01173b8:	39 c1                	cmp    %eax,%ecx
f01173ba:	74 17                	je     f01173d3 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01173bc:	83 ec 04             	sub    $0x4,%esp
f01173bf:	68 a8 ae 13 f0       	push   $0xf013aea8
f01173c4:	68 44 01 00 00       	push   $0x144
f01173c9:	68 d1 ac 13 f0       	push   $0xf013acd1
f01173ce:	e8 32 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01173d3:	ff 45 d0             	incl   -0x30(%ebp)
f01173d6:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01173da:	7e 80                	jle    f011735c <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01173dc:	e8 bc 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01173e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173e4:	e8 df c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01173e9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01173ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173ef:	83 ec 08             	sub    $0x8,%esp
f01173f2:	6a 01                	push   $0x1
f01173f4:	50                   	push   %eax
f01173f5:	e8 ee 3b ff ff       	call   f010afe8 <set_program_priority>
f01173fa:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01173fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117400:	83 ec 08             	sub    $0x8,%esp
f0117403:	6a 01                	push   $0x1
f0117405:	50                   	push   %eax
f0117406:	e8 dd 3b ff ff       	call   f010afe8 <set_program_priority>
f011740b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011740e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117411:	83 ec 08             	sub    $0x8,%esp
f0117414:	6a 01                	push   $0x1
f0117416:	50                   	push   %eax
f0117417:	e8 cc 3b ff ff       	call   f010afe8 <set_program_priority>
f011741c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011741f:	e8 a4 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117424:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117427:	74 17                	je     f0117440 <test_priority_normal_and_lower+0x6bd>
f0117429:	83 ec 04             	sub    $0x4,%esp
f011742c:	68 38 ad 13 f0       	push   $0xf013ad38
f0117431:	68 4d 01 00 00       	push   $0x14d
f0117436:	68 d1 ac 13 f0       	push   $0xf013acd1
f011743b:	e8 c5 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117440:	e8 58 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117445:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117448:	83 f8 0d             	cmp    $0xd,%eax
f011744b:	74 17                	je     f0117464 <test_priority_normal_and_lower+0x6e1>
f011744d:	83 ec 04             	sub    $0x4,%esp
f0117450:	68 44 b0 13 f0       	push   $0xf013b044
f0117455:	68 4e 01 00 00       	push   $0x14e
f011745a:	68 d1 ac 13 f0       	push   $0xf013acd1
f011745f:	e8 a1 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117464:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117467:	8b 40 74             	mov    0x74(%eax),%eax
f011746a:	83 f8 05             	cmp    $0x5,%eax
f011746d:	75 16                	jne    f0117485 <test_priority_normal_and_lower+0x702>
f011746f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117472:	8b 40 74             	mov    0x74(%eax),%eax
f0117475:	83 f8 07             	cmp    $0x7,%eax
f0117478:	75 0b                	jne    f0117485 <test_priority_normal_and_lower+0x702>
f011747a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011747d:	8b 40 74             	mov    0x74(%eax),%eax
f0117480:	83 f8 05             	cmp    $0x5,%eax
f0117483:	74 17                	je     f011749c <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117485:	83 ec 04             	sub    $0x4,%esp
f0117488:	68 8c b0 13 f0       	push   $0xf013b08c
f011748d:	68 51 01 00 00       	push   $0x151
f0117492:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117497:	e8 69 8d fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f011749c:	e8 fc 56 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01174a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174a4:	e8 1f c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01174a9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01174ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174af:	83 ec 08             	sub    $0x8,%esp
f01174b2:	6a 01                	push   $0x1
f01174b4:	50                   	push   %eax
f01174b5:	e8 2e 3b ff ff       	call   f010afe8 <set_program_priority>
f01174ba:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174bd:	e8 06 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01174c2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01174c5:	74 17                	je     f01174de <test_priority_normal_and_lower+0x75b>
f01174c7:	83 ec 04             	sub    $0x4,%esp
f01174ca:	68 38 ad 13 f0       	push   $0xf013ad38
f01174cf:	68 57 01 00 00       	push   $0x157
f01174d4:	68 d1 ac 13 f0       	push   $0xf013acd1
f01174d9:	e8 27 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01174de:	e8 ba 56 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01174e3:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01174e6:	83 f8 03             	cmp    $0x3,%eax
f01174e9:	74 17                	je     f0117502 <test_priority_normal_and_lower+0x77f>
f01174eb:	83 ec 04             	sub    $0x4,%esp
f01174ee:	68 38 ad 13 f0       	push   $0xf013ad38
f01174f3:	68 58 01 00 00       	push   $0x158
f01174f8:	68 d1 ac 13 f0       	push   $0xf013acd1
f01174fd:	e8 03 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117502:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117505:	8b 40 74             	mov    0x74(%eax),%eax
f0117508:	83 f8 02             	cmp    $0x2,%eax
f011750b:	75 16                	jne    f0117523 <test_priority_normal_and_lower+0x7a0>
f011750d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117510:	8b 40 74             	mov    0x74(%eax),%eax
f0117513:	83 f8 07             	cmp    $0x7,%eax
f0117516:	75 0b                	jne    f0117523 <test_priority_normal_and_lower+0x7a0>
f0117518:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011751b:	8b 40 74             	mov    0x74(%eax),%eax
f011751e:	83 f8 05             	cmp    $0x5,%eax
f0117521:	74 17                	je     f011753a <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117523:	83 ec 04             	sub    $0x4,%esp
f0117526:	68 6c ae 13 f0       	push   $0xf013ae6c
f011752b:	68 5b 01 00 00       	push   $0x15b
f0117530:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117535:	e8 cb 8c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f011753a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117541:	e9 80 00 00 00       	jmp    f01175c6 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117546:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117549:	83 c0 08             	add    $0x8,%eax
f011754c:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117553:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117556:	8b 58 78             	mov    0x78(%eax),%ebx
f0117559:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011755c:	89 d0                	mov    %edx,%eax
f011755e:	01 c0                	add    %eax,%eax
f0117560:	01 d0                	add    %edx,%eax
f0117562:	c1 e0 03             	shl    $0x3,%eax
f0117565:	01 d8                	add    %ebx,%eax
f0117567:	8b 00                	mov    (%eax),%eax
f0117569:	39 c1                	cmp    %eax,%ecx
f011756b:	74 17                	je     f0117584 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011756d:	83 ec 04             	sub    $0x4,%esp
f0117570:	68 bc b0 13 f0       	push   $0xf013b0bc
f0117575:	68 60 01 00 00       	push   $0x160
f011757a:	68 d1 ac 13 f0       	push   $0xf013acd1
f011757f:	e8 81 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117584:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117587:	83 c0 08             	add    $0x8,%eax
f011758a:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117591:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117594:	8b 58 78             	mov    0x78(%eax),%ebx
f0117597:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011759a:	89 d0                	mov    %edx,%eax
f011759c:	01 c0                	add    %eax,%eax
f011759e:	01 d0                	add    %edx,%eax
f01175a0:	c1 e0 03             	shl    $0x3,%eax
f01175a3:	01 d8                	add    %ebx,%eax
f01175a5:	8b 40 08             	mov    0x8(%eax),%eax
f01175a8:	39 c1                	cmp    %eax,%ecx
f01175aa:	74 17                	je     f01175c3 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01175ac:	83 ec 04             	sub    $0x4,%esp
f01175af:	68 bc b0 13 f0       	push   $0xf013b0bc
f01175b4:	68 63 01 00 00       	push   $0x163
f01175b9:	68 d1 ac 13 f0       	push   $0xf013acd1
f01175be:	e8 42 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01175c3:	ff 45 cc             	incl   -0x34(%ebp)
f01175c6:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01175ca:	0f 8e 76 ff ff ff    	jle    f0117546 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01175d0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01175d7:	e9 80 00 00 00       	jmp    f011765c <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01175dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01175df:	83 c0 03             	add    $0x3,%eax
f01175e2:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01175e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175ec:	8b 58 78             	mov    0x78(%eax),%ebx
f01175ef:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01175f2:	89 d0                	mov    %edx,%eax
f01175f4:	01 c0                	add    %eax,%eax
f01175f6:	01 d0                	add    %edx,%eax
f01175f8:	c1 e0 03             	shl    $0x3,%eax
f01175fb:	01 d8                	add    %ebx,%eax
f01175fd:	8b 00                	mov    (%eax),%eax
f01175ff:	39 c1                	cmp    %eax,%ecx
f0117601:	74 17                	je     f011761a <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117603:	ff 75 c8             	pushl  -0x38(%ebp)
f0117606:	68 28 b1 13 f0       	push   $0xf013b128
f011760b:	68 69 01 00 00       	push   $0x169
f0117610:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117615:	e8 eb 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011761a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011761d:	83 c0 03             	add    $0x3,%eax
f0117620:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117627:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011762a:	8b 58 78             	mov    0x78(%eax),%ebx
f011762d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117630:	89 d0                	mov    %edx,%eax
f0117632:	01 c0                	add    %eax,%eax
f0117634:	01 d0                	add    %edx,%eax
f0117636:	c1 e0 03             	shl    $0x3,%eax
f0117639:	01 d8                	add    %ebx,%eax
f011763b:	8b 40 08             	mov    0x8(%eax),%eax
f011763e:	39 c1                	cmp    %eax,%ecx
f0117640:	74 17                	je     f0117659 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117642:	83 ec 04             	sub    $0x4,%esp
f0117645:	68 bc b0 13 f0       	push   $0xf013b0bc
f011764a:	68 6c 01 00 00       	push   $0x16c
f011764f:	68 d1 ac 13 f0       	push   $0xf013acd1
f0117654:	e8 ac 8b fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117659:	ff 45 c8             	incl   -0x38(%ebp)
f011765c:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117660:	0f 8e 76 ff ff ff    	jle    f01175dc <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117666:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011766d:	e9 80 00 00 00       	jmp    f01176f2 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117672:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117675:	83 c0 05             	add    $0x5,%eax
f0117678:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011767f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117682:	8b 58 78             	mov    0x78(%eax),%ebx
f0117685:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117688:	89 d0                	mov    %edx,%eax
f011768a:	01 c0                	add    %eax,%eax
f011768c:	01 d0                	add    %edx,%eax
f011768e:	c1 e0 03             	shl    $0x3,%eax
f0117691:	01 d8                	add    %ebx,%eax
f0117693:	8b 00                	mov    (%eax),%eax
f0117695:	39 c1                	cmp    %eax,%ecx
f0117697:	74 17                	je     f01176b0 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117699:	83 ec 04             	sub    $0x4,%esp
f011769c:	68 bc b0 13 f0       	push   $0xf013b0bc
f01176a1:	68 72 01 00 00       	push   $0x172
f01176a6:	68 d1 ac 13 f0       	push   $0xf013acd1
f01176ab:	e8 55 8b fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01176b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01176b3:	83 c0 05             	add    $0x5,%eax
f01176b6:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01176bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176c0:	8b 58 78             	mov    0x78(%eax),%ebx
f01176c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01176c6:	89 d0                	mov    %edx,%eax
f01176c8:	01 c0                	add    %eax,%eax
f01176ca:	01 d0                	add    %edx,%eax
f01176cc:	c1 e0 03             	shl    $0x3,%eax
f01176cf:	01 d8                	add    %ebx,%eax
f01176d1:	8b 40 08             	mov    0x8(%eax),%eax
f01176d4:	39 c1                	cmp    %eax,%ecx
f01176d6:	74 17                	je     f01176ef <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01176d8:	83 ec 04             	sub    $0x4,%esp
f01176db:	68 bc b0 13 f0       	push   $0xf013b0bc
f01176e0:	68 75 01 00 00       	push   $0x175
f01176e5:	68 d1 ac 13 f0       	push   $0xf013acd1
f01176ea:	e8 16 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01176ef:	ff 45 c4             	incl   -0x3c(%ebp)
f01176f2:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01176f6:	0f 8e 76 ff ff ff    	jle    f0117672 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01176fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176ff:	83 ec 08             	sub    $0x8,%esp
f0117702:	6a 05                	push   $0x5
f0117704:	50                   	push   %eax
f0117705:	e8 de 38 ff ff       	call   f010afe8 <set_program_priority>
f011770a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011770d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117710:	83 ec 08             	sub    $0x8,%esp
f0117713:	6a 05                	push   $0x5
f0117715:	50                   	push   %eax
f0117716:	e8 cd 38 ff ff       	call   f010afe8 <set_program_priority>
f011771b:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011771e:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117725:	75 6e 61 
f0117728:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011772f:	6c 00 00 
f0117732:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117738:	b9 17 00 00 00       	mov    $0x17,%ecx
f011773d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117742:	89 d7                	mov    %edx,%edi
f0117744:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117746:	83 ec 0c             	sub    $0xc,%esp
f0117749:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011774f:	50                   	push   %eax
f0117750:	e8 1b 96 fe ff       	call   f0100d70 <execute_command>
f0117755:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117758:	eb 10                	jmp    f011776a <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011775a:	83 ec 0c             	sub    $0xc,%esp
f011775d:	68 98 b1 13 f0       	push   $0xf013b198
f0117762:	e8 a7 95 fe ff       	call   f0100d0e <cprintf>
f0117767:	83 c4 10             	add    $0x10,%esp
	}
}
f011776a:	90                   	nop
f011776b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011776e:	5b                   	pop    %ebx
f011776f:	5e                   	pop    %esi
f0117770:	5f                   	pop    %edi
f0117771:	5d                   	pop    %ebp
f0117772:	c3                   	ret    

f0117773 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117773:	55                   	push   %ebp
f0117774:	89 e5                	mov    %esp,%ebp
f0117776:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f011777b:	83 f8 03             	cmp    $0x3,%eax
f011777e:	75 04                	jne    f0117784 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117780:	b0 01                	mov    $0x1,%al
f0117782:	eb 02                	jmp    f0117786 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117784:	b0 00                	mov    $0x0,%al
f0117786:	5d                   	pop    %ebp
f0117787:	c3                   	ret    

f0117788 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117788:	55                   	push   %ebp
f0117789:	89 e5                	mov    %esp,%ebp
f011778b:	57                   	push   %edi
f011778c:	53                   	push   %ebx
f011778d:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117793:	83 ec 0c             	sub    $0xc,%esp
f0117796:	68 9c b2 13 f0       	push   $0xf013b29c
f011779b:	e8 6e 95 fe ff       	call   f0100d0e <cprintf>
f01177a0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01177a3:	83 ec 0c             	sub    $0xc,%esp
f01177a6:	68 cc b2 13 f0       	push   $0xf013b2cc
f01177ab:	e8 5e 95 fe ff       	call   f0100d0e <cprintf>
f01177b0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01177b3:	83 ec 0c             	sub    $0xc,%esp
f01177b6:	68 9c b2 13 f0       	push   $0xf013b29c
f01177bb:	e8 4e 95 fe ff       	call   f0100d0e <cprintf>
f01177c0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01177c3:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01177c7:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01177cb:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01177d1:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01177d7:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01177de:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01177e5:	e8 b3 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01177ea:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01177ed:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f01177f3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01177f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01177fd:	89 d7                	mov    %edx,%edi
f01177ff:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117801:	e8 97 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117806:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117809:	e8 ba c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011780e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117811:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117818:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011781b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117820:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117823:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117826:	ba 00 00 00 00       	mov    $0x0,%edx
f011782b:	f7 75 d4             	divl   -0x2c(%ebp)
f011782e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117831:	29 d0                	sub    %edx,%eax
f0117833:	89 c1                	mov    %eax,%ecx
f0117835:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011783c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117841:	0f b6 d0             	movzbl %al,%edx
f0117844:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117847:	01 d0                	add    %edx,%eax
f0117849:	48                   	dec    %eax
f011784a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011784d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117850:	ba 00 00 00 00       	mov    $0x0,%edx
f0117855:	f7 75 cc             	divl   -0x34(%ebp)
f0117858:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011785b:	29 d0                	sub    %edx,%eax
f011785d:	01 c1                	add    %eax,%ecx
f011785f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117866:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011786b:	0f b6 c0             	movzbl %al,%eax
f011786e:	c1 e0 04             	shl    $0x4,%eax
f0117871:	89 c2                	mov    %eax,%edx
f0117873:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117876:	01 d0                	add    %edx,%eax
f0117878:	48                   	dec    %eax
f0117879:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011787c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011787f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117884:	f7 75 c4             	divl   -0x3c(%ebp)
f0117887:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011788a:	29 d0                	sub    %edx,%eax
f011788c:	01 c8                	add    %ecx,%eax
f011788e:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117893:	29 c2                	sub    %eax,%edx
f0117895:	89 d0                	mov    %edx,%eax
f0117897:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011789a:	83 ec 0c             	sub    $0xc,%esp
f011789d:	ff 75 bc             	pushl  -0x44(%ebp)
f01178a0:	e8 e0 ff fe ff       	call   f0107885 <kmalloc>
f01178a5:	83 c4 10             	add    $0x10,%esp
f01178a8:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01178ae:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01178b4:	85 c0                	test   %eax,%eax
f01178b6:	74 14                	je     f01178cc <test_kmalloc+0x144>
f01178b8:	83 ec 04             	sub    $0x4,%esp
f01178bb:	68 28 b3 13 f0       	push   $0xf013b328
f01178c0:	6a 40                	push   $0x40
f01178c2:	68 5a b3 13 f0       	push   $0xf013b35a
f01178c7:	e8 39 89 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01178cc:	e8 f7 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01178d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01178d4:	74 14                	je     f01178ea <test_kmalloc+0x162>
f01178d6:	83 ec 04             	sub    $0x4,%esp
f01178d9:	68 74 b3 13 f0       	push   $0xf013b374
f01178de:	6a 41                	push   $0x41
f01178e0:	68 5a b3 13 f0       	push   $0xf013b35a
f01178e5:	e8 1b 89 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01178ea:	e8 ae 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01178ef:	89 c2                	mov    %eax,%edx
f01178f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01178f4:	39 c2                	cmp    %eax,%edx
f01178f6:	74 14                	je     f011790c <test_kmalloc+0x184>
f01178f8:	83 ec 04             	sub    $0x4,%esp
f01178fb:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117900:	6a 42                	push   $0x42
f0117902:	68 5a b3 13 f0       	push   $0xf013b35a
f0117907:	e8 f9 88 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f011790c:	83 ec 0c             	sub    $0xc,%esp
f011790f:	68 1c b4 13 f0       	push   $0xf013b41c
f0117914:	e8 f5 93 fe ff       	call   f0100d0e <cprintf>
f0117919:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011791c:	e8 7c 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117921:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117924:	e8 9f c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117929:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011792c:	83 ec 0c             	sub    $0xc,%esp
f011792f:	68 00 fc 1f 00       	push   $0x1ffc00
f0117934:	e8 4c ff fe ff       	call   f0107885 <kmalloc>
f0117939:	83 c4 10             	add    $0x10,%esp
f011793c:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117942:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117948:	89 c1                	mov    %eax,%ecx
f011794a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117951:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117954:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117959:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011795c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011795f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117964:	f7 75 b8             	divl   -0x48(%ebp)
f0117967:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011796a:	29 d0                	sub    %edx,%eax
f011796c:	89 c3                	mov    %eax,%ebx
f011796e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117975:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011797a:	0f b6 d0             	movzbl %al,%edx
f011797d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117980:	01 d0                	add    %edx,%eax
f0117982:	48                   	dec    %eax
f0117983:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117986:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117989:	ba 00 00 00 00       	mov    $0x0,%edx
f011798e:	f7 75 b0             	divl   -0x50(%ebp)
f0117991:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117994:	29 d0                	sub    %edx,%eax
f0117996:	01 c3                	add    %eax,%ebx
f0117998:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011799f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01179a4:	0f b6 c0             	movzbl %al,%eax
f01179a7:	c1 e0 04             	shl    $0x4,%eax
f01179aa:	89 c2                	mov    %eax,%edx
f01179ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01179af:	01 d0                	add    %edx,%eax
f01179b1:	48                   	dec    %eax
f01179b2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01179b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01179b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01179bd:	f7 75 a8             	divl   -0x58(%ebp)
f01179c0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01179c3:	29 d0                	sub    %edx,%eax
f01179c5:	01 d8                	add    %ebx,%eax
f01179c7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01179cc:	39 c1                	cmp    %eax,%ecx
f01179ce:	74 14                	je     f01179e4 <test_kmalloc+0x25c>
f01179d0:	83 ec 04             	sub    $0x4,%esp
f01179d3:	68 40 b4 13 f0       	push   $0xf013b440
f01179d8:	6a 49                	push   $0x49
f01179da:	68 5a b3 13 f0       	push   $0xf013b35a
f01179df:	e8 21 88 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01179e4:	e8 df c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01179e9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01179ec:	74 14                	je     f0117a02 <test_kmalloc+0x27a>
f01179ee:	83 ec 04             	sub    $0x4,%esp
f01179f1:	68 74 b3 13 f0       	push   $0xf013b374
f01179f6:	6a 4a                	push   $0x4a
f01179f8:	68 5a b3 13 f0       	push   $0xf013b35a
f01179fd:	e8 03 88 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a02:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117a05:	e8 93 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117a0a:	29 c3                	sub    %eax,%ebx
f0117a0c:	89 d8                	mov    %ebx,%eax
f0117a0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117a13:	74 14                	je     f0117a29 <test_kmalloc+0x2a1>
f0117a15:	83 ec 04             	sub    $0x4,%esp
f0117a18:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117a1d:	6a 4b                	push   $0x4b
f0117a1f:	68 5a b3 13 f0       	push   $0xf013b35a
f0117a24:	e8 dc 87 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117a29:	e8 6f 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117a2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a31:	e8 92 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a36:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117a39:	83 ec 0c             	sub    $0xc,%esp
f0117a3c:	68 00 fc 1f 00       	push   $0x1ffc00
f0117a41:	e8 3f fe fe ff       	call   f0107885 <kmalloc>
f0117a46:	83 c4 10             	add    $0x10,%esp
f0117a49:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117a4f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117a55:	89 c1                	mov    %eax,%ecx
f0117a57:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117a5e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117a61:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a66:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117a69:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117a6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a71:	f7 75 a0             	divl   -0x60(%ebp)
f0117a74:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117a77:	29 d0                	sub    %edx,%eax
f0117a79:	89 c3                	mov    %eax,%ebx
f0117a7b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117a82:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117a87:	0f b6 d0             	movzbl %al,%edx
f0117a8a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117a8d:	01 d0                	add    %edx,%eax
f0117a8f:	48                   	dec    %eax
f0117a90:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117a93:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117a96:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a9b:	f7 75 98             	divl   -0x68(%ebp)
f0117a9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117aa1:	29 d0                	sub    %edx,%eax
f0117aa3:	01 c3                	add    %eax,%ebx
f0117aa5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117aac:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117ab1:	0f b6 c0             	movzbl %al,%eax
f0117ab4:	c1 e0 04             	shl    $0x4,%eax
f0117ab7:	89 c2                	mov    %eax,%edx
f0117ab9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117abc:	01 d0                	add    %edx,%eax
f0117abe:	48                   	dec    %eax
f0117abf:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117ac2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ac5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117aca:	f7 75 90             	divl   -0x70(%ebp)
f0117acd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ad0:	29 d0                	sub    %edx,%eax
f0117ad2:	01 d8                	add    %ebx,%eax
f0117ad4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117ad9:	39 c1                	cmp    %eax,%ecx
f0117adb:	74 14                	je     f0117af1 <test_kmalloc+0x369>
f0117add:	83 ec 04             	sub    $0x4,%esp
f0117ae0:	68 40 b4 13 f0       	push   $0xf013b440
f0117ae5:	6a 51                	push   $0x51
f0117ae7:	68 5a b3 13 f0       	push   $0xf013b35a
f0117aec:	e8 14 87 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117af1:	e8 d2 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117af6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117af9:	74 14                	je     f0117b0f <test_kmalloc+0x387>
f0117afb:	83 ec 04             	sub    $0x4,%esp
f0117afe:	68 74 b3 13 f0       	push   $0xf013b374
f0117b03:	6a 52                	push   $0x52
f0117b05:	68 5a b3 13 f0       	push   $0xf013b35a
f0117b0a:	e8 f6 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117b0f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117b12:	e8 86 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117b17:	29 c3                	sub    %eax,%ebx
f0117b19:	89 d8                	mov    %ebx,%eax
f0117b1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117b20:	74 14                	je     f0117b36 <test_kmalloc+0x3ae>
f0117b22:	83 ec 04             	sub    $0x4,%esp
f0117b25:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117b2a:	6a 53                	push   $0x53
f0117b2c:	68 5a b3 13 f0       	push   $0xf013b35a
f0117b31:	e8 cf 86 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117b36:	e8 62 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117b3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b3e:	e8 85 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b43:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117b46:	83 ec 0c             	sub    $0xc,%esp
f0117b49:	68 00 08 00 00       	push   $0x800
f0117b4e:	e8 32 fd fe ff       	call   f0107885 <kmalloc>
f0117b53:	83 c4 10             	add    $0x10,%esp
f0117b56:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b5c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117b62:	89 c1                	mov    %eax,%ecx
f0117b64:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117b6b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117b6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b73:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117b76:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117b79:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b7e:	f7 75 88             	divl   -0x78(%ebp)
f0117b81:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117b84:	29 d0                	sub    %edx,%eax
f0117b86:	89 c3                	mov    %eax,%ebx
f0117b88:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117b8f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117b94:	0f b6 d0             	movzbl %al,%edx
f0117b97:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117b9a:	01 d0                	add    %edx,%eax
f0117b9c:	48                   	dec    %eax
f0117b9d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117ba3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117ba9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bae:	f7 75 80             	divl   -0x80(%ebp)
f0117bb1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117bb7:	29 d0                	sub    %edx,%eax
f0117bb9:	01 c3                	add    %eax,%ebx
f0117bbb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117bc2:	10 00 00 
f0117bc5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117bca:	0f b6 c0             	movzbl %al,%eax
f0117bcd:	c1 e0 04             	shl    $0x4,%eax
f0117bd0:	89 c2                	mov    %eax,%edx
f0117bd2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117bd8:	01 d0                	add    %edx,%eax
f0117bda:	48                   	dec    %eax
f0117bdb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117be1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bec:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117bf2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117bf8:	29 d0                	sub    %edx,%eax
f0117bfa:	01 d8                	add    %ebx,%eax
f0117bfc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117c01:	39 c1                	cmp    %eax,%ecx
f0117c03:	74 14                	je     f0117c19 <test_kmalloc+0x491>
f0117c05:	83 ec 04             	sub    $0x4,%esp
f0117c08:	68 40 b4 13 f0       	push   $0xf013b440
f0117c0d:	6a 59                	push   $0x59
f0117c0f:	68 5a b3 13 f0       	push   $0xf013b35a
f0117c14:	e8 ec 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c19:	e8 aa c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c1e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117c21:	74 14                	je     f0117c37 <test_kmalloc+0x4af>
f0117c23:	83 ec 04             	sub    $0x4,%esp
f0117c26:	68 74 b3 13 f0       	push   $0xf013b374
f0117c2b:	6a 5a                	push   $0x5a
f0117c2d:	68 5a b3 13 f0       	push   $0xf013b35a
f0117c32:	e8 ce 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c37:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117c3a:	e8 5e 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c3f:	29 c3                	sub    %eax,%ebx
f0117c41:	89 d8                	mov    %ebx,%eax
f0117c43:	83 f8 01             	cmp    $0x1,%eax
f0117c46:	74 14                	je     f0117c5c <test_kmalloc+0x4d4>
f0117c48:	83 ec 04             	sub    $0x4,%esp
f0117c4b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117c50:	6a 5b                	push   $0x5b
f0117c52:	68 5a b3 13 f0       	push   $0xf013b35a
f0117c57:	e8 a9 85 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117c5c:	e8 3c 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c61:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c64:	e8 5f c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c69:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117c6c:	83 ec 0c             	sub    $0xc,%esp
f0117c6f:	68 00 08 00 00       	push   $0x800
f0117c74:	e8 0c fc fe ff       	call   f0107885 <kmalloc>
f0117c79:	83 c4 10             	add    $0x10,%esp
f0117c7c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c82:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117c88:	89 c1                	mov    %eax,%ecx
f0117c8a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117c91:	10 00 00 
f0117c94:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117c9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c9f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117ca5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117cab:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cb0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117cb6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117cbc:	29 d0                	sub    %edx,%eax
f0117cbe:	89 c3                	mov    %eax,%ebx
f0117cc0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117cc7:	10 00 00 
f0117cca:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117ccf:	0f b6 d0             	movzbl %al,%edx
f0117cd2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117cd8:	01 d0                	add    %edx,%eax
f0117cda:	48                   	dec    %eax
f0117cdb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117ce1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117ce7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cec:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117cf2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117cf8:	29 d0                	sub    %edx,%eax
f0117cfa:	01 c3                	add    %eax,%ebx
f0117cfc:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117d03:	10 00 00 
f0117d06:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117d0b:	0f b6 c0             	movzbl %al,%eax
f0117d0e:	c1 e0 04             	shl    $0x4,%eax
f0117d11:	89 c2                	mov    %eax,%edx
f0117d13:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117d19:	01 d0                	add    %edx,%eax
f0117d1b:	48                   	dec    %eax
f0117d1c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117d22:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117d28:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d2d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117d33:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117d39:	29 d0                	sub    %edx,%eax
f0117d3b:	01 d8                	add    %ebx,%eax
f0117d3d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117d42:	39 c1                	cmp    %eax,%ecx
f0117d44:	74 14                	je     f0117d5a <test_kmalloc+0x5d2>
f0117d46:	83 ec 04             	sub    $0x4,%esp
f0117d49:	68 40 b4 13 f0       	push   $0xf013b440
f0117d4e:	6a 61                	push   $0x61
f0117d50:	68 5a b3 13 f0       	push   $0xf013b35a
f0117d55:	e8 ab 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d5a:	e8 69 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d62:	74 14                	je     f0117d78 <test_kmalloc+0x5f0>
f0117d64:	83 ec 04             	sub    $0x4,%esp
f0117d67:	68 74 b3 13 f0       	push   $0xf013b374
f0117d6c:	6a 62                	push   $0x62
f0117d6e:	68 5a b3 13 f0       	push   $0xf013b35a
f0117d73:	e8 8d 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d78:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d7b:	e8 1d 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117d80:	29 c3                	sub    %eax,%ebx
f0117d82:	89 d8                	mov    %ebx,%eax
f0117d84:	83 f8 01             	cmp    $0x1,%eax
f0117d87:	74 14                	je     f0117d9d <test_kmalloc+0x615>
f0117d89:	83 ec 04             	sub    $0x4,%esp
f0117d8c:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117d91:	6a 63                	push   $0x63
f0117d93:	68 5a b3 13 f0       	push   $0xf013b35a
f0117d98:	e8 68 84 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117d9d:	e8 fb 4d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117da2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117da5:	e8 1e c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117daa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117dad:	83 ec 0c             	sub    $0xc,%esp
f0117db0:	68 00 1c 00 00       	push   $0x1c00
f0117db5:	e8 cb fa fe ff       	call   f0107885 <kmalloc>
f0117dba:	83 c4 10             	add    $0x10,%esp
f0117dbd:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117dc3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117dc9:	89 c1                	mov    %eax,%ecx
f0117dcb:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117dd2:	10 00 00 
f0117dd5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117ddb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117de0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117de6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117dec:	ba 00 00 00 00       	mov    $0x0,%edx
f0117df1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117df7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117dfd:	29 d0                	sub    %edx,%eax
f0117dff:	89 c3                	mov    %eax,%ebx
f0117e01:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117e08:	10 00 00 
f0117e0b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117e10:	0f b6 d0             	movzbl %al,%edx
f0117e13:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117e19:	01 d0                	add    %edx,%eax
f0117e1b:	48                   	dec    %eax
f0117e1c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117e22:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117e28:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e2d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117e33:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117e39:	29 d0                	sub    %edx,%eax
f0117e3b:	01 c3                	add    %eax,%ebx
f0117e3d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117e44:	10 00 00 
f0117e47:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117e4c:	0f b6 c0             	movzbl %al,%eax
f0117e4f:	c1 e0 04             	shl    $0x4,%eax
f0117e52:	89 c2                	mov    %eax,%edx
f0117e54:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117e5a:	01 d0                	add    %edx,%eax
f0117e5c:	48                   	dec    %eax
f0117e5d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117e63:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117e69:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e6e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117e74:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117e7a:	29 d0                	sub    %edx,%eax
f0117e7c:	01 d8                	add    %ebx,%eax
f0117e7e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117e83:	39 c1                	cmp    %eax,%ecx
f0117e85:	74 14                	je     f0117e9b <test_kmalloc+0x713>
f0117e87:	83 ec 04             	sub    $0x4,%esp
f0117e8a:	68 40 b4 13 f0       	push   $0xf013b440
f0117e8f:	6a 69                	push   $0x69
f0117e91:	68 5a b3 13 f0       	push   $0xf013b35a
f0117e96:	e8 6a 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e9b:	e8 28 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117ea0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ea3:	74 14                	je     f0117eb9 <test_kmalloc+0x731>
f0117ea5:	83 ec 04             	sub    $0x4,%esp
f0117ea8:	68 74 b3 13 f0       	push   $0xf013b374
f0117ead:	6a 6a                	push   $0x6a
f0117eaf:	68 5a b3 13 f0       	push   $0xf013b35a
f0117eb4:	e8 4c 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117eb9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117ebc:	e8 dc 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ec1:	29 c3                	sub    %eax,%ebx
f0117ec3:	89 d8                	mov    %ebx,%eax
f0117ec5:	83 f8 02             	cmp    $0x2,%eax
f0117ec8:	74 14                	je     f0117ede <test_kmalloc+0x756>
f0117eca:	83 ec 04             	sub    $0x4,%esp
f0117ecd:	68 dc b3 13 f0       	push   $0xf013b3dc
f0117ed2:	6a 6b                	push   $0x6b
f0117ed4:	68 5a b3 13 f0       	push   $0xf013b35a
f0117ed9:	e8 27 83 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117ede:	e8 ba 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ee3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ee6:	e8 dd be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117eeb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117eee:	83 ec 0c             	sub    $0xc,%esp
f0117ef1:	68 00 fc 2f 00       	push   $0x2ffc00
f0117ef6:	e8 8a f9 fe ff       	call   f0107885 <kmalloc>
f0117efb:	83 c4 10             	add    $0x10,%esp
f0117efe:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f04:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117f0a:	89 c1                	mov    %eax,%ecx
f0117f0c:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117f13:	10 00 00 
f0117f16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117f1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f21:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117f27:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f32:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117f38:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f3e:	29 d0                	sub    %edx,%eax
f0117f40:	89 c3                	mov    %eax,%ebx
f0117f42:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117f49:	10 00 00 
f0117f4c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117f51:	0f b6 d0             	movzbl %al,%edx
f0117f54:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117f5a:	01 d0                	add    %edx,%eax
f0117f5c:	48                   	dec    %eax
f0117f5d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117f63:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f69:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f6e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117f74:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f7a:	29 d0                	sub    %edx,%eax
f0117f7c:	01 c3                	add    %eax,%ebx
f0117f7e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117f85:	10 00 00 
f0117f88:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117f8d:	0f b6 c0             	movzbl %al,%eax
f0117f90:	c1 e0 04             	shl    $0x4,%eax
f0117f93:	89 c2                	mov    %eax,%edx
f0117f95:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117f9b:	01 d0                	add    %edx,%eax
f0117f9d:	48                   	dec    %eax
f0117f9e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117fa4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117faa:	ba 00 00 00 00       	mov    $0x0,%edx
f0117faf:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117fb5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117fbb:	29 d0                	sub    %edx,%eax
f0117fbd:	01 d8                	add    %ebx,%eax
f0117fbf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117fc4:	39 c1                	cmp    %eax,%ecx
f0117fc6:	74 14                	je     f0117fdc <test_kmalloc+0x854>
f0117fc8:	83 ec 04             	sub    $0x4,%esp
f0117fcb:	68 40 b4 13 f0       	push   $0xf013b440
f0117fd0:	6a 71                	push   $0x71
f0117fd2:	68 5a b3 13 f0       	push   $0xf013b35a
f0117fd7:	e8 29 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117fdc:	e8 e7 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117fe1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117fe4:	74 14                	je     f0117ffa <test_kmalloc+0x872>
f0117fe6:	83 ec 04             	sub    $0x4,%esp
f0117fe9:	68 74 b3 13 f0       	push   $0xf013b374
f0117fee:	6a 72                	push   $0x72
f0117ff0:	68 5a b3 13 f0       	push   $0xf013b35a
f0117ff5:	e8 0b 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ffa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117ffd:	e8 9b 4b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118002:	29 c3                	sub    %eax,%ebx
f0118004:	89 d8                	mov    %ebx,%eax
f0118006:	3d 00 03 00 00       	cmp    $0x300,%eax
f011800b:	74 14                	je     f0118021 <test_kmalloc+0x899>
f011800d:	83 ec 04             	sub    $0x4,%esp
f0118010:	68 dc b3 13 f0       	push   $0xf013b3dc
f0118015:	6a 73                	push   $0x73
f0118017:	68 5a b3 13 f0       	push   $0xf013b35a
f011801c:	e8 e4 81 fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118021:	e8 77 4b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118026:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118029:	e8 9a bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011802e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118031:	83 ec 0c             	sub    $0xc,%esp
f0118034:	68 00 fc 5f 00       	push   $0x5ffc00
f0118039:	e8 47 f8 fe ff       	call   f0107885 <kmalloc>
f011803e:	83 c4 10             	add    $0x10,%esp
f0118041:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118047:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011804d:	89 c1                	mov    %eax,%ecx
f011804f:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118056:	10 00 00 
f0118059:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011805f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118064:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011806a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118070:	ba 00 00 00 00       	mov    $0x0,%edx
f0118075:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011807b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118081:	29 d0                	sub    %edx,%eax
f0118083:	89 c3                	mov    %eax,%ebx
f0118085:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011808c:	10 00 00 
f011808f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118094:	0f b6 d0             	movzbl %al,%edx
f0118097:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011809d:	01 d0                	add    %edx,%eax
f011809f:	48                   	dec    %eax
f01180a0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01180a6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01180ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01180b1:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01180b7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01180bd:	29 d0                	sub    %edx,%eax
f01180bf:	01 c3                	add    %eax,%ebx
f01180c1:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01180c8:	10 00 00 
f01180cb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01180d0:	0f b6 c0             	movzbl %al,%eax
f01180d3:	c1 e0 04             	shl    $0x4,%eax
f01180d6:	89 c2                	mov    %eax,%edx
f01180d8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01180de:	01 d0                	add    %edx,%eax
f01180e0:	48                   	dec    %eax
f01180e1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01180e7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01180ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01180f2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01180f8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01180fe:	29 d0                	sub    %edx,%eax
f0118100:	01 d8                	add    %ebx,%eax
f0118102:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118107:	39 c1                	cmp    %eax,%ecx
f0118109:	74 14                	je     f011811f <test_kmalloc+0x997>
f011810b:	83 ec 04             	sub    $0x4,%esp
f011810e:	68 40 b4 13 f0       	push   $0xf013b440
f0118113:	6a 79                	push   $0x79
f0118115:	68 5a b3 13 f0       	push   $0xf013b35a
f011811a:	e8 e6 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011811f:	e8 a4 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118124:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118127:	74 14                	je     f011813d <test_kmalloc+0x9b5>
f0118129:	83 ec 04             	sub    $0x4,%esp
f011812c:	68 74 b3 13 f0       	push   $0xf013b374
f0118131:	6a 7a                	push   $0x7a
f0118133:	68 5a b3 13 f0       	push   $0xf013b35a
f0118138:	e8 c8 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011813d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118140:	e8 58 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118145:	29 c3                	sub    %eax,%ebx
f0118147:	89 d8                	mov    %ebx,%eax
f0118149:	3d 00 06 00 00       	cmp    $0x600,%eax
f011814e:	74 14                	je     f0118164 <test_kmalloc+0x9dc>
f0118150:	83 ec 04             	sub    $0x4,%esp
f0118153:	68 dc b3 13 f0       	push   $0xf013b3dc
f0118158:	6a 7b                	push   $0x7b
f011815a:	68 5a b3 13 f0       	push   $0xf013b35a
f011815f:	e8 a1 80 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118164:	e8 34 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118169:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011816c:	e8 57 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118171:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118174:	83 ec 0c             	sub    $0xc,%esp
f0118177:	68 00 38 00 00       	push   $0x3800
f011817c:	e8 04 f7 fe ff       	call   f0107885 <kmalloc>
f0118181:	83 c4 10             	add    $0x10,%esp
f0118184:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011818a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118190:	89 c1                	mov    %eax,%ecx
f0118192:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118199:	10 00 00 
f011819c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01181a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181a7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01181ad:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01181b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01181b8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01181be:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01181c4:	29 d0                	sub    %edx,%eax
f01181c6:	89 c3                	mov    %eax,%ebx
f01181c8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01181cf:	10 00 00 
f01181d2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01181d7:	0f b6 d0             	movzbl %al,%edx
f01181da:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01181e0:	01 d0                	add    %edx,%eax
f01181e2:	48                   	dec    %eax
f01181e3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01181e9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01181ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01181f4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01181fa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118200:	29 d0                	sub    %edx,%eax
f0118202:	01 c3                	add    %eax,%ebx
f0118204:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011820b:	10 00 00 
f011820e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118213:	0f b6 c0             	movzbl %al,%eax
f0118216:	c1 e0 04             	shl    $0x4,%eax
f0118219:	89 c2                	mov    %eax,%edx
f011821b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118221:	01 d0                	add    %edx,%eax
f0118223:	48                   	dec    %eax
f0118224:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011822a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118230:	ba 00 00 00 00       	mov    $0x0,%edx
f0118235:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011823b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118241:	29 d0                	sub    %edx,%eax
f0118243:	01 d8                	add    %ebx,%eax
f0118245:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011824a:	39 c1                	cmp    %eax,%ecx
f011824c:	74 17                	je     f0118265 <test_kmalloc+0xadd>
f011824e:	83 ec 04             	sub    $0x4,%esp
f0118251:	68 40 b4 13 f0       	push   $0xf013b440
f0118256:	68 81 00 00 00       	push   $0x81
f011825b:	68 5a b3 13 f0       	push   $0xf013b35a
f0118260:	e8 a0 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118265:	e8 5e bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011826a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011826d:	74 17                	je     f0118286 <test_kmalloc+0xafe>
f011826f:	83 ec 04             	sub    $0x4,%esp
f0118272:	68 74 b3 13 f0       	push   $0xf013b374
f0118277:	68 82 00 00 00       	push   $0x82
f011827c:	68 5a b3 13 f0       	push   $0xf013b35a
f0118281:	e8 7f 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118286:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118289:	e8 0f 49 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011828e:	29 c3                	sub    %eax,%ebx
f0118290:	89 d8                	mov    %ebx,%eax
f0118292:	83 f8 04             	cmp    $0x4,%eax
f0118295:	74 17                	je     f01182ae <test_kmalloc+0xb26>
f0118297:	83 ec 04             	sub    $0x4,%esp
f011829a:	68 dc b3 13 f0       	push   $0xf013b3dc
f011829f:	68 83 00 00 00       	push   $0x83
f01182a4:	68 5a b3 13 f0       	push   $0xf013b35a
f01182a9:	e8 57 7f fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01182ae:	83 ec 0c             	sub    $0xc,%esp
f01182b1:	68 a6 b4 13 f0       	push   $0xf013b4a6
f01182b6:	e8 53 8a fe ff       	call   f0100d0e <cprintf>
f01182bb:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01182be:	e8 da 48 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01182c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01182c6:	e8 fd ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182cb:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01182ce:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01182d5:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01182d8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01182de:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01182e4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182ea:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01182ed:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01182ef:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01182f5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182fb:	01 c2                	add    %eax,%edx
f01182fd:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118300:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118302:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118308:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011830e:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118315:	fd 0f 00 
			shortArr[0] = minShort;
f0118318:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f011831e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118321:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118324:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011832a:	01 c0                	add    %eax,%eax
f011832c:	89 c2                	mov    %eax,%edx
f011832e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118334:	01 c2                	add    %eax,%edx
f0118336:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011833a:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f011833d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118343:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118349:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118350:	01 00 00 
			intArr[0] = minInt;
f0118353:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118359:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011835c:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f011835e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118364:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011836b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118371:	01 c2                	add    %eax,%edx
f0118373:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118376:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118378:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011837e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118384:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011838b:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011838e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118394:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118397:	88 10                	mov    %dl,(%eax)
f0118399:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f011839f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01183a2:	66 89 42 02          	mov    %ax,0x2(%edx)
f01183a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01183af:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01183b2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01183bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183c5:	01 c2                	add    %eax,%edx
f01183c7:	8a 45 f2             	mov    -0xe(%ebp),%al
f01183ca:	88 02                	mov    %al,(%edx)
f01183cc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183d2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01183d9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183df:	01 c2                	add    %eax,%edx
f01183e1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01183e5:	66 89 42 02          	mov    %ax,0x2(%edx)
f01183e9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01183f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01183fc:	01 c2                	add    %eax,%edx
f01183fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118401:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118404:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f011840b:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f011840e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118414:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f011841a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118420:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118423:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118425:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011842b:	89 c2                	mov    %eax,%edx
f011842d:	c1 ea 1f             	shr    $0x1f,%edx
f0118430:	01 d0                	add    %edx,%eax
f0118432:	d1 f8                	sar    %eax
f0118434:	89 c2                	mov    %eax,%edx
f0118436:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011843c:	01 c2                	add    %eax,%edx
f011843e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118441:	88 c1                	mov    %al,%cl
f0118443:	c0 e9 07             	shr    $0x7,%cl
f0118446:	01 c8                	add    %ecx,%eax
f0118448:	d0 f8                	sar    %al
f011844a:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f011844c:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118452:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118458:	01 c2                	add    %eax,%edx
f011845a:	8a 45 f2             	mov    -0xe(%ebp),%al
f011845d:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f011845f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118465:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011846b:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118472:	1b 00 00 
			shortArr2[0] = minShort;
f0118475:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011847b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011847e:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118481:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118487:	01 c0                	add    %eax,%eax
f0118489:	89 c2                	mov    %eax,%edx
f011848b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118491:	01 c2                	add    %eax,%edx
f0118493:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118497:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011849a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01184a0:	8a 00                	mov    (%eax),%al
f01184a2:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01184a5:	75 15                	jne    f01184bc <test_kmalloc+0xd34>
f01184a7:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01184ad:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01184b3:	01 d0                	add    %edx,%eax
f01184b5:	8a 00                	mov    (%eax),%al
f01184b7:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01184ba:	74 17                	je     f01184d3 <test_kmalloc+0xd4b>
f01184bc:	83 ec 04             	sub    $0x4,%esp
f01184bf:	68 b0 b4 13 f0       	push   $0xf013b4b0
f01184c4:	68 b2 00 00 00       	push   $0xb2
f01184c9:	68 5a b3 13 f0       	push   $0xf013b35a
f01184ce:	e8 32 7d fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01184d3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01184d9:	66 8b 00             	mov    (%eax),%ax
f01184dc:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01184e0:	75 1b                	jne    f01184fd <test_kmalloc+0xd75>
f01184e2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01184e8:	01 c0                	add    %eax,%eax
f01184ea:	89 c2                	mov    %eax,%edx
f01184ec:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01184f2:	01 d0                	add    %edx,%eax
f01184f4:	66 8b 00             	mov    (%eax),%ax
f01184f7:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01184fb:	74 17                	je     f0118514 <test_kmalloc+0xd8c>
f01184fd:	83 ec 04             	sub    $0x4,%esp
f0118500:	68 b0 b4 13 f0       	push   $0xf013b4b0
f0118505:	68 b3 00 00 00       	push   $0xb3
f011850a:	68 5a b3 13 f0       	push   $0xf013b35a
f011850f:	e8 f1 7c fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118514:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011851a:	8b 00                	mov    (%eax),%eax
f011851c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011851f:	75 1c                	jne    f011853d <test_kmalloc+0xdb5>
f0118521:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118527:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011852e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118534:	01 d0                	add    %edx,%eax
f0118536:	8b 00                	mov    (%eax),%eax
f0118538:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011853b:	74 17                	je     f0118554 <test_kmalloc+0xdcc>
f011853d:	83 ec 04             	sub    $0x4,%esp
f0118540:	68 b0 b4 13 f0       	push   $0xf013b4b0
f0118545:	68 b4 00 00 00       	push   $0xb4
f011854a:	68 5a b3 13 f0       	push   $0xf013b35a
f011854f:	e8 b1 7c fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118554:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011855a:	8a 00                	mov    (%eax),%al
f011855c:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011855f:	75 1c                	jne    f011857d <test_kmalloc+0xdf5>
f0118561:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118567:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011856e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118574:	01 d0                	add    %edx,%eax
f0118576:	8a 00                	mov    (%eax),%al
f0118578:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011857b:	74 17                	je     f0118594 <test_kmalloc+0xe0c>
f011857d:	83 ec 04             	sub    $0x4,%esp
f0118580:	68 b0 b4 13 f0       	push   $0xf013b4b0
f0118585:	68 b6 00 00 00       	push   $0xb6
f011858a:	68 5a b3 13 f0       	push   $0xf013b35a
f011858f:	e8 71 7c fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118594:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011859a:	66 8b 40 02          	mov    0x2(%eax),%ax
f011859e:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01185a2:	75 1f                	jne    f01185c3 <test_kmalloc+0xe3b>
f01185a4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01185aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01185b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185b7:	01 d0                	add    %edx,%eax
f01185b9:	66 8b 40 02          	mov    0x2(%eax),%ax
f01185bd:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01185c1:	74 17                	je     f01185da <test_kmalloc+0xe52>
f01185c3:	83 ec 04             	sub    $0x4,%esp
f01185c6:	68 b0 b4 13 f0       	push   $0xf013b4b0
f01185cb:	68 b7 00 00 00       	push   $0xb7
f01185d0:	68 5a b3 13 f0       	push   $0xf013b35a
f01185d5:	e8 2b 7c fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01185da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185e0:	8b 40 04             	mov    0x4(%eax),%eax
f01185e3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01185e6:	75 1d                	jne    f0118605 <test_kmalloc+0xe7d>
f01185e8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01185ee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01185f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185fb:	01 d0                	add    %edx,%eax
f01185fd:	8b 40 04             	mov    0x4(%eax),%eax
f0118600:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118603:	74 17                	je     f011861c <test_kmalloc+0xe94>
f0118605:	83 ec 04             	sub    $0x4,%esp
f0118608:	68 b0 b4 13 f0       	push   $0xf013b4b0
f011860d:	68 b8 00 00 00       	push   $0xb8
f0118612:	68 5a b3 13 f0       	push   $0xf013b35a
f0118617:	e8 e9 7b fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011861c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118622:	8a 00                	mov    (%eax),%al
f0118624:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118627:	75 40                	jne    f0118669 <test_kmalloc+0xee1>
f0118629:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011862f:	89 c2                	mov    %eax,%edx
f0118631:	c1 ea 1f             	shr    $0x1f,%edx
f0118634:	01 d0                	add    %edx,%eax
f0118636:	d1 f8                	sar    %eax
f0118638:	89 c2                	mov    %eax,%edx
f011863a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118640:	01 d0                	add    %edx,%eax
f0118642:	8a 10                	mov    (%eax),%dl
f0118644:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118647:	88 c1                	mov    %al,%cl
f0118649:	c0 e9 07             	shr    $0x7,%cl
f011864c:	01 c8                	add    %ecx,%eax
f011864e:	d0 f8                	sar    %al
f0118650:	38 c2                	cmp    %al,%dl
f0118652:	75 15                	jne    f0118669 <test_kmalloc+0xee1>
f0118654:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011865a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118660:	01 d0                	add    %edx,%eax
f0118662:	8a 00                	mov    (%eax),%al
f0118664:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118667:	74 17                	je     f0118680 <test_kmalloc+0xef8>
f0118669:	83 ec 04             	sub    $0x4,%esp
f011866c:	68 b0 b4 13 f0       	push   $0xf013b4b0
f0118671:	68 ba 00 00 00       	push   $0xba
f0118676:	68 5a b3 13 f0       	push   $0xf013b35a
f011867b:	e8 85 7b fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118680:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118686:	66 8b 00             	mov    (%eax),%ax
f0118689:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011868d:	75 1b                	jne    f01186aa <test_kmalloc+0xf22>
f011868f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118695:	01 c0                	add    %eax,%eax
f0118697:	89 c2                	mov    %eax,%edx
f0118699:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011869f:	01 d0                	add    %edx,%eax
f01186a1:	66 8b 00             	mov    (%eax),%ax
f01186a4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01186a8:	74 17                	je     f01186c1 <test_kmalloc+0xf39>
f01186aa:	83 ec 04             	sub    $0x4,%esp
f01186ad:	68 b0 b4 13 f0       	push   $0xf013b4b0
f01186b2:	68 bb 00 00 00       	push   $0xbb
f01186b7:	68 5a b3 13 f0       	push   $0xf013b35a
f01186bc:	e8 44 7b fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01186c1:	e8 d7 44 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01186c6:	89 c2                	mov    %eax,%edx
f01186c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01186cb:	39 c2                	cmp    %eax,%edx
f01186cd:	74 17                	je     f01186e6 <test_kmalloc+0xf5e>
f01186cf:	83 ec 04             	sub    $0x4,%esp
f01186d2:	68 dc b3 13 f0       	push   $0xf013b3dc
f01186d7:	68 bd 00 00 00       	push   $0xbd
f01186dc:	68 5a b3 13 f0       	push   $0xf013b35a
f01186e1:	e8 1f 7b fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01186e6:	e8 dd b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01186eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01186ee:	74 17                	je     f0118707 <test_kmalloc+0xf7f>
f01186f0:	83 ec 04             	sub    $0x4,%esp
f01186f3:	68 74 b3 13 f0       	push   $0xf013b374
f01186f8:	68 be 00 00 00       	push   $0xbe
f01186fd:	68 5a b3 13 f0       	push   $0xf013b35a
f0118702:	e8 fe 7a fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118707:	83 ec 0c             	sub    $0xc,%esp
f011870a:	68 e5 b4 13 f0       	push   $0xf013b4e5
f011870f:	e8 fa 85 fe ff       	call   f0100d0e <cprintf>
f0118714:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118717:	e8 81 44 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011871c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011871f:	e8 a4 b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118724:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118727:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011872e:	10 00 00 
f0118731:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118737:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011873c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118742:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118748:	ba 00 00 00 00       	mov    $0x0,%edx
f011874d:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118753:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118759:	29 d0                	sub    %edx,%eax
f011875b:	89 c1                	mov    %eax,%ecx
f011875d:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118764:	10 00 00 
f0118767:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011876c:	0f b6 d0             	movzbl %al,%edx
f011876f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118775:	01 d0                	add    %edx,%eax
f0118777:	48                   	dec    %eax
f0118778:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011877e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118784:	ba 00 00 00 00       	mov    $0x0,%edx
f0118789:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011878f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118795:	29 d0                	sub    %edx,%eax
f0118797:	01 c1                	add    %eax,%ecx
f0118799:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01187a0:	10 00 00 
f01187a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01187a8:	0f b6 c0             	movzbl %al,%eax
f01187ab:	c1 e0 04             	shl    $0x4,%eax
f01187ae:	89 c2                	mov    %eax,%edx
f01187b0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01187b6:	01 d0                	add    %edx,%eax
f01187b8:	48                   	dec    %eax
f01187b9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01187bf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01187c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01187ca:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01187d0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01187d6:	29 d0                	sub    %edx,%eax
f01187d8:	01 c8                	add    %ecx,%eax
f01187da:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01187df:	29 c2                	sub    %eax,%edx
f01187e1:	89 d0                	mov    %edx,%eax
f01187e3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01187e9:	83 ec 0c             	sub    $0xc,%esp
f01187ec:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01187f2:	e8 8e f0 fe ff       	call   f0107885 <kmalloc>
f01187f7:	83 c4 10             	add    $0x10,%esp
f01187fa:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118800:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118806:	85 c0                	test   %eax,%eax
f0118808:	74 17                	je     f0118821 <test_kmalloc+0x1099>
f011880a:	83 ec 04             	sub    $0x4,%esp
f011880d:	68 28 b3 13 f0       	push   $0xf013b328
f0118812:	68 c8 00 00 00       	push   $0xc8
f0118817:	68 5a b3 13 f0       	push   $0xf013b35a
f011881c:	e8 e4 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118821:	e8 a2 b5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118826:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118829:	74 17                	je     f0118842 <test_kmalloc+0x10ba>
f011882b:	83 ec 04             	sub    $0x4,%esp
f011882e:	68 74 b3 13 f0       	push   $0xf013b374
f0118833:	68 c9 00 00 00       	push   $0xc9
f0118838:	68 5a b3 13 f0       	push   $0xf013b35a
f011883d:	e8 c3 79 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118842:	e8 56 43 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118847:	89 c2                	mov    %eax,%edx
f0118849:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011884c:	39 c2                	cmp    %eax,%edx
f011884e:	74 17                	je     f0118867 <test_kmalloc+0x10df>
f0118850:	83 ec 04             	sub    $0x4,%esp
f0118853:	68 dc b3 13 f0       	push   $0xf013b3dc
f0118858:	68 ca 00 00 00       	push   $0xca
f011885d:	68 5a b3 13 f0       	push   $0xf013b35a
f0118862:	e8 9e 79 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118867:	83 ec 0c             	sub    $0xc,%esp
f011886a:	68 ec b4 13 f0       	push   $0xf013b4ec
f011886f:	e8 9a 84 fe ff       	call   f0100d0e <cprintf>
f0118874:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118877:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011887d:	05 00 40 00 00       	add    $0x4000,%eax
f0118882:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118888:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011888f:	10 00 00 
f0118892:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118898:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011889d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01188a3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01188a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ae:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01188b4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01188ba:	29 d0                	sub    %edx,%eax
f01188bc:	89 c1                	mov    %eax,%ecx
f01188be:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01188c5:	10 00 00 
f01188c8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01188cd:	0f b6 d0             	movzbl %al,%edx
f01188d0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01188d6:	01 d0                	add    %edx,%eax
f01188d8:	48                   	dec    %eax
f01188d9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01188df:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01188e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ea:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01188f0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01188f6:	29 d0                	sub    %edx,%eax
f01188f8:	01 c1                	add    %eax,%ecx
f01188fa:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118901:	10 00 00 
f0118904:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118909:	0f b6 c0             	movzbl %al,%eax
f011890c:	c1 e0 04             	shl    $0x4,%eax
f011890f:	89 c2                	mov    %eax,%edx
f0118911:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118917:	01 d0                	add    %edx,%eax
f0118919:	48                   	dec    %eax
f011891a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118920:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118926:	ba 00 00 00 00       	mov    $0x0,%edx
f011892b:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118931:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118937:	29 d0                	sub    %edx,%eax
f0118939:	01 c8                	add    %ecx,%eax
f011893b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118940:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118943:	eb 6a                	jmp    f01189af <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118945:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011894a:	83 ec 04             	sub    $0x4,%esp
f011894d:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118953:	52                   	push   %edx
f0118954:	ff 75 f4             	pushl  -0xc(%ebp)
f0118957:	50                   	push   %eax
f0118958:	e8 54 e1 fe ff       	call   f0106ab1 <get_page_table>
f011895d:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118960:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118966:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118969:	c1 ea 0c             	shr    $0xc,%edx
f011896c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118972:	c1 e2 02             	shl    $0x2,%edx
f0118975:	01 d0                	add    %edx,%eax
f0118977:	8b 00                	mov    (%eax),%eax
f0118979:	25 ff 0f 00 00       	and    $0xfff,%eax
f011897e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118984:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011898a:	83 e0 04             	and    $0x4,%eax
f011898d:	85 c0                	test   %eax,%eax
f011898f:	74 17                	je     f01189a8 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118991:	83 ec 04             	sub    $0x4,%esp
f0118994:	68 f4 b4 13 f0       	push   $0xf013b4f4
f0118999:	68 d7 00 00 00       	push   $0xd7
f011899e:	68 5a b3 13 f0       	push   $0xf013b35a
f01189a3:	e8 5d 78 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01189a8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01189af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01189b2:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01189b8:	72 8b                	jb     f0118945 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01189ba:	83 ec 0c             	sub    $0xc,%esp
f01189bd:	68 3e b5 13 f0       	push   $0xf013b53e
f01189c2:	e8 47 83 fe ff       	call   f0100d0e <cprintf>
f01189c7:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01189ca:	83 ec 0c             	sub    $0xc,%esp
f01189cd:	68 48 b5 13 f0       	push   $0xf013b548
f01189d2:	e8 37 83 fe ff       	call   f0100d0e <cprintf>
f01189d7:	83 c4 10             	add    $0x10,%esp

	return 1;
f01189da:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01189df:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01189e2:	5b                   	pop    %ebx
f01189e3:	5f                   	pop    %edi
f01189e4:	5d                   	pop    %ebp
f01189e5:	c3                   	ret    

f01189e6 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01189e6:	55                   	push   %ebp
f01189e7:	89 e5                	mov    %esp,%ebp
f01189e9:	57                   	push   %edi
f01189ea:	53                   	push   %ebx
f01189eb:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01189f1:	83 ec 0c             	sub    $0xc,%esp
f01189f4:	68 9c b2 13 f0       	push   $0xf013b29c
f01189f9:	e8 10 83 fe ff       	call   f0100d0e <cprintf>
f01189fe:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118a01:	83 ec 0c             	sub    $0xc,%esp
f0118a04:	68 cc b2 13 f0       	push   $0xf013b2cc
f0118a09:	e8 00 83 fe ff       	call   f0100d0e <cprintf>
f0118a0e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118a11:	83 ec 0c             	sub    $0xc,%esp
f0118a14:	68 9c b2 13 f0       	push   $0xf013b29c
f0118a19:	e8 f0 82 fe ff       	call   f0100d0e <cprintf>
f0118a1e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118a21:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118a27:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a31:	89 d7                	mov    %edx,%edi
f0118a33:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118a35:	83 ec 0c             	sub    $0xc,%esp
f0118a38:	68 84 b5 13 f0       	push   $0xf013b584
f0118a3d:	e8 cc 82 fe ff       	call   f0100d0e <cprintf>
f0118a42:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118a45:	e8 53 41 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118a4d:	e8 76 b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118a52:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118a55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118a5c:	eb 1f                	jmp    f0118a7d <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118a5e:	83 ec 0c             	sub    $0xc,%esp
f0118a61:	68 00 00 20 00       	push   $0x200000
f0118a66:	e8 1a ee fe ff       	call   f0107885 <kmalloc>
f0118a6b:	83 c4 10             	add    $0x10,%esp
f0118a6e:	89 c2                	mov    %eax,%edx
f0118a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118a73:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118a7a:	ff 45 f4             	incl   -0xc(%ebp)
f0118a7d:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118a81:	7e db                	jle    f0118a5e <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118a83:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118a8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118a8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118a95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118a98:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a9d:	f7 75 e8             	divl   -0x18(%ebp)
f0118aa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118aa3:	29 d0                	sub    %edx,%eax
f0118aa5:	89 c1                	mov    %eax,%ecx
f0118aa7:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118aae:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ab3:	0f b6 d0             	movzbl %al,%edx
f0118ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118ab9:	01 d0                	add    %edx,%eax
f0118abb:	48                   	dec    %eax
f0118abc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118abf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ac2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ac7:	f7 75 e0             	divl   -0x20(%ebp)
f0118aca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118acd:	29 d0                	sub    %edx,%eax
f0118acf:	01 c1                	add    %eax,%ecx
f0118ad1:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118ad8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118add:	0f b6 c0             	movzbl %al,%eax
f0118ae0:	c1 e0 04             	shl    $0x4,%eax
f0118ae3:	89 c2                	mov    %eax,%edx
f0118ae5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118ae8:	01 d0                	add    %edx,%eax
f0118aea:	48                   	dec    %eax
f0118aeb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118aee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118af6:	f7 75 d8             	divl   -0x28(%ebp)
f0118af9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118afc:	29 d0                	sub    %edx,%eax
f0118afe:	01 c8                	add    %ecx,%eax
f0118b00:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118b05:	29 c2                	sub    %eax,%edx
f0118b07:	89 d0                	mov    %edx,%eax
f0118b09:	83 ec 0c             	sub    $0xc,%esp
f0118b0c:	50                   	push   %eax
f0118b0d:	e8 73 ed fe ff       	call   f0107885 <kmalloc>
f0118b12:	83 c4 10             	add    $0x10,%esp
f0118b15:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118b1b:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118b21:	89 c1                	mov    %eax,%ecx
f0118b23:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118b2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118b2d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b32:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118b35:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118b38:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b3d:	f7 75 d0             	divl   -0x30(%ebp)
f0118b40:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118b43:	29 d0                	sub    %edx,%eax
f0118b45:	89 c3                	mov    %eax,%ebx
f0118b47:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118b4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118b53:	0f b6 d0             	movzbl %al,%edx
f0118b56:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118b59:	01 d0                	add    %edx,%eax
f0118b5b:	48                   	dec    %eax
f0118b5c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118b5f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118b62:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b67:	f7 75 c8             	divl   -0x38(%ebp)
f0118b6a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118b6d:	29 d0                	sub    %edx,%eax
f0118b6f:	01 c3                	add    %eax,%ebx
f0118b71:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118b78:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118b7d:	0f b6 c0             	movzbl %al,%eax
f0118b80:	c1 e0 04             	shl    $0x4,%eax
f0118b83:	89 c2                	mov    %eax,%edx
f0118b85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118b88:	01 d0                	add    %edx,%eax
f0118b8a:	48                   	dec    %eax
f0118b8b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118b8e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118b91:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b96:	f7 75 c0             	divl   -0x40(%ebp)
f0118b99:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118b9c:	29 d0                	sub    %edx,%eax
f0118b9e:	01 d8                	add    %ebx,%eax
f0118ba0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118ba5:	39 c1                	cmp    %eax,%ecx
f0118ba7:	0f 85 ed 04 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118bad:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118bb3:	89 c1                	mov    %eax,%ecx
f0118bb5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118bbc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118bbf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118bc4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118bc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118bca:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bcf:	f7 75 b8             	divl   -0x48(%ebp)
f0118bd2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118bd5:	29 d0                	sub    %edx,%eax
f0118bd7:	89 c3                	mov    %eax,%ebx
f0118bd9:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118be0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118be5:	0f b6 d0             	movzbl %al,%edx
f0118be8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118beb:	01 d0                	add    %edx,%eax
f0118bed:	48                   	dec    %eax
f0118bee:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118bf1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bf9:	f7 75 b0             	divl   -0x50(%ebp)
f0118bfc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118bff:	29 d0                	sub    %edx,%eax
f0118c01:	01 c3                	add    %eax,%ebx
f0118c03:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118c0a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118c0f:	0f b6 c0             	movzbl %al,%eax
f0118c12:	c1 e0 04             	shl    $0x4,%eax
f0118c15:	89 c2                	mov    %eax,%edx
f0118c17:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c1a:	01 d0                	add    %edx,%eax
f0118c1c:	48                   	dec    %eax
f0118c1d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118c20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c23:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c28:	f7 75 a8             	divl   -0x58(%ebp)
f0118c2b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c2e:	29 d0                	sub    %edx,%eax
f0118c30:	01 d8                	add    %ebx,%eax
f0118c32:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118c37:	39 c1                	cmp    %eax,%ecx
f0118c39:	0f 85 5b 04 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118c3f:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118c45:	89 c1                	mov    %eax,%ecx
f0118c47:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118c4e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118c51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c56:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118c59:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118c5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c61:	f7 75 a0             	divl   -0x60(%ebp)
f0118c64:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118c67:	29 d0                	sub    %edx,%eax
f0118c69:	89 c3                	mov    %eax,%ebx
f0118c6b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118c72:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118c77:	0f b6 d0             	movzbl %al,%edx
f0118c7a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118c7d:	01 d0                	add    %edx,%eax
f0118c7f:	48                   	dec    %eax
f0118c80:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118c83:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118c86:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c8b:	f7 75 98             	divl   -0x68(%ebp)
f0118c8e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118c91:	29 d0                	sub    %edx,%eax
f0118c93:	01 c3                	add    %eax,%ebx
f0118c95:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118c9c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ca1:	0f b6 c0             	movzbl %al,%eax
f0118ca4:	c1 e0 04             	shl    $0x4,%eax
f0118ca7:	89 c2                	mov    %eax,%edx
f0118ca9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118cac:	01 d0                	add    %edx,%eax
f0118cae:	48                   	dec    %eax
f0118caf:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118cb2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118cb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cba:	f7 75 90             	divl   -0x70(%ebp)
f0118cbd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118cc0:	29 d0                	sub    %edx,%eax
f0118cc2:	01 d8                	add    %ebx,%eax
f0118cc4:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118cc9:	39 c1                	cmp    %eax,%ecx
f0118ccb:	0f 85 c9 03 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118cd1:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118cd7:	89 c1                	mov    %eax,%ecx
f0118cd9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118ce0:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118ce3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ce8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118ceb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118cee:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cf3:	f7 75 88             	divl   -0x78(%ebp)
f0118cf6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118cf9:	29 d0                	sub    %edx,%eax
f0118cfb:	89 c3                	mov    %eax,%ebx
f0118cfd:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118d04:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118d09:	0f b6 d0             	movzbl %al,%edx
f0118d0c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118d0f:	01 d0                	add    %edx,%eax
f0118d11:	48                   	dec    %eax
f0118d12:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118d18:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d23:	f7 75 80             	divl   -0x80(%ebp)
f0118d26:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118d2c:	29 d0                	sub    %edx,%eax
f0118d2e:	01 c3                	add    %eax,%ebx
f0118d30:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118d37:	10 00 00 
f0118d3a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118d3f:	0f b6 c0             	movzbl %al,%eax
f0118d42:	c1 e0 04             	shl    $0x4,%eax
f0118d45:	89 c2                	mov    %eax,%edx
f0118d47:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118d4d:	01 d0                	add    %edx,%eax
f0118d4f:	48                   	dec    %eax
f0118d50:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118d56:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118d5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d61:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118d67:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118d6d:	29 d0                	sub    %edx,%eax
f0118d6f:	01 d8                	add    %ebx,%eax
f0118d71:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118d76:	39 c1                	cmp    %eax,%ecx
f0118d78:	0f 85 1c 03 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118d7e:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118d84:	89 c1                	mov    %eax,%ecx
f0118d86:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118d8d:	10 00 00 
f0118d90:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118d96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d9b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118da1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118da7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dac:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118db2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118db8:	29 d0                	sub    %edx,%eax
f0118dba:	89 c3                	mov    %eax,%ebx
f0118dbc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118dc3:	10 00 00 
f0118dc6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118dcb:	0f b6 d0             	movzbl %al,%edx
f0118dce:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118dd4:	01 d0                	add    %edx,%eax
f0118dd6:	48                   	dec    %eax
f0118dd7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118ddd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118de3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118de8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118dee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118df4:	29 d0                	sub    %edx,%eax
f0118df6:	01 c3                	add    %eax,%ebx
f0118df8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118dff:	10 00 00 
f0118e02:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118e07:	0f b6 c0             	movzbl %al,%eax
f0118e0a:	c1 e0 04             	shl    $0x4,%eax
f0118e0d:	89 c2                	mov    %eax,%edx
f0118e0f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118e15:	01 d0                	add    %edx,%eax
f0118e17:	48                   	dec    %eax
f0118e18:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118e1e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118e24:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e29:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118e2f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118e35:	29 d0                	sub    %edx,%eax
f0118e37:	01 d8                	add    %ebx,%eax
f0118e39:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118e3e:	39 c1                	cmp    %eax,%ecx
f0118e40:	0f 85 54 02 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118e46:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118e4c:	89 c1                	mov    %eax,%ecx
f0118e4e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118e55:	10 00 00 
f0118e58:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118e5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e63:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118e69:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e74:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118e7a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e80:	29 d0                	sub    %edx,%eax
f0118e82:	89 c3                	mov    %eax,%ebx
f0118e84:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118e8b:	10 00 00 
f0118e8e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118e93:	0f b6 d0             	movzbl %al,%edx
f0118e96:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118e9c:	01 d0                	add    %edx,%eax
f0118e9e:	48                   	dec    %eax
f0118e9f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118ea5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb0:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118eb6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118ebc:	29 d0                	sub    %edx,%eax
f0118ebe:	01 c3                	add    %eax,%ebx
f0118ec0:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118ec7:	10 00 00 
f0118eca:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ecf:	0f b6 c0             	movzbl %al,%eax
f0118ed2:	c1 e0 04             	shl    $0x4,%eax
f0118ed5:	89 c2                	mov    %eax,%edx
f0118ed7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118edd:	01 d0                	add    %edx,%eax
f0118edf:	48                   	dec    %eax
f0118ee0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118ee6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118eec:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef1:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118ef7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118efd:	29 d0                	sub    %edx,%eax
f0118eff:	01 d8                	add    %ebx,%eax
f0118f01:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118f06:	39 c1                	cmp    %eax,%ecx
f0118f08:	0f 85 8c 01 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118f0e:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118f14:	89 c1                	mov    %eax,%ecx
f0118f16:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118f1d:	10 00 00 
f0118f20:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118f26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f2b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118f31:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f37:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f3c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118f42:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f48:	29 d0                	sub    %edx,%eax
f0118f4a:	89 c3                	mov    %eax,%ebx
f0118f4c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118f53:	10 00 00 
f0118f56:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118f5b:	0f b6 d0             	movzbl %al,%edx
f0118f5e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118f64:	01 d0                	add    %edx,%eax
f0118f66:	48                   	dec    %eax
f0118f67:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118f6d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118f73:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f78:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118f7e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118f84:	29 d0                	sub    %edx,%eax
f0118f86:	01 c3                	add    %eax,%ebx
f0118f88:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118f8f:	10 00 00 
f0118f92:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118f97:	0f b6 c0             	movzbl %al,%eax
f0118f9a:	c1 e0 04             	shl    $0x4,%eax
f0118f9d:	89 c2                	mov    %eax,%edx
f0118f9f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118fa5:	01 d0                	add    %edx,%eax
f0118fa7:	48                   	dec    %eax
f0118fa8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118fae:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fb9:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118fbf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118fc5:	29 d0                	sub    %edx,%eax
f0118fc7:	01 d8                	add    %ebx,%eax
f0118fc9:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118fce:	39 c1                	cmp    %eax,%ecx
f0118fd0:	0f 85 c4 00 00 00    	jne    f011909a <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118fd6:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118fdc:	89 c1                	mov    %eax,%ecx
f0118fde:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118fe5:	10 00 00 
f0118fe8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118fee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ff3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118ff9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119004:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011900a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119010:	29 d0                	sub    %edx,%eax
f0119012:	89 c3                	mov    %eax,%ebx
f0119014:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011901b:	10 00 00 
f011901e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119023:	0f b6 d0             	movzbl %al,%edx
f0119026:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011902c:	01 d0                	add    %edx,%eax
f011902e:	48                   	dec    %eax
f011902f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0119035:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011903b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119040:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0119046:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011904c:	29 d0                	sub    %edx,%eax
f011904e:	01 c3                	add    %eax,%ebx
f0119050:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0119057:	10 00 00 
f011905a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011905f:	0f b6 c0             	movzbl %al,%eax
f0119062:	c1 e0 04             	shl    $0x4,%eax
f0119065:	89 c2                	mov    %eax,%edx
f0119067:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011906d:	01 d0                	add    %edx,%eax
f011906f:	48                   	dec    %eax
f0119070:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0119076:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011907c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119081:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0119087:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011908d:	29 d0                	sub    %edx,%eax
f011908f:	01 d8                	add    %ebx,%eax
f0119091:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119096:	39 c1                	cmp    %eax,%ecx
f0119098:	74 17                	je     f01190b1 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f011909a:	83 ec 04             	sub    $0x4,%esp
f011909d:	68 d4 b5 13 f0       	push   $0xf013b5d4
f01190a2:	68 03 01 00 00       	push   $0x103
f01190a7:	68 5a b3 13 f0       	push   $0xf013b35a
f01190ac:	e8 54 71 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190b1:	e8 12 ad fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01190b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01190b9:	74 17                	je     f01190d2 <test_kmalloc_nextfit+0x6ec>
f01190bb:	83 ec 04             	sub    $0x4,%esp
f01190be:	68 74 b3 13 f0       	push   $0xf013b374
f01190c3:	68 05 01 00 00       	push   $0x105
f01190c8:	68 5a b3 13 f0       	push   $0xf013b35a
f01190cd:	e8 33 71 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01190d2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01190d5:	e8 c3 3a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01190da:	29 c3                	sub    %eax,%ebx
f01190dc:	89 d9                	mov    %ebx,%ecx
f01190de:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01190e5:	10 00 00 
f01190e8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01190ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190f3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01190f9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01190ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119104:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011910a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119110:	29 d0                	sub    %edx,%eax
f0119112:	89 c3                	mov    %eax,%ebx
f0119114:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011911b:	10 00 00 
f011911e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119123:	0f b6 d0             	movzbl %al,%edx
f0119126:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011912c:	01 d0                	add    %edx,%eax
f011912e:	48                   	dec    %eax
f011912f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119135:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011913b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119140:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119146:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011914c:	29 d0                	sub    %edx,%eax
f011914e:	01 c3                	add    %eax,%ebx
f0119150:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0119157:	10 00 00 
f011915a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011915f:	0f b6 c0             	movzbl %al,%eax
f0119162:	c1 e0 04             	shl    $0x4,%eax
f0119165:	89 c2                	mov    %eax,%edx
f0119167:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011916d:	01 d0                	add    %edx,%eax
f011916f:	48                   	dec    %eax
f0119170:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0119176:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011917c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119181:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0119187:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011918d:	29 d0                	sub    %edx,%eax
f011918f:	01 d8                	add    %ebx,%eax
f0119191:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119196:	29 c2                	sub    %eax,%edx
f0119198:	89 d0                	mov    %edx,%eax
f011919a:	c1 e8 0c             	shr    $0xc,%eax
f011919d:	39 c1                	cmp    %eax,%ecx
f011919f:	74 17                	je     f01191b8 <test_kmalloc_nextfit+0x7d2>
f01191a1:	83 ec 04             	sub    $0x4,%esp
f01191a4:	68 17 b6 13 f0       	push   $0xf013b617
f01191a9:	68 06 01 00 00       	push   $0x106
f01191ae:	68 5a b3 13 f0       	push   $0xf013b35a
f01191b3:	e8 4d 70 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01191b8:	e8 0b ac fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01191bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01191c0:	e8 d8 39 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01191c5:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01191c8:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01191ce:	83 ec 0c             	sub    $0xc,%esp
f01191d1:	50                   	push   %eax
f01191d2:	e8 79 e7 fe ff       	call   f0107950 <kfree>
f01191d7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01191da:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01191e0:	83 ec 0c             	sub    $0xc,%esp
f01191e3:	50                   	push   %eax
f01191e4:	e8 67 e7 fe ff       	call   f0107950 <kfree>
f01191e9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01191ec:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01191f2:	83 ec 0c             	sub    $0xc,%esp
f01191f5:	50                   	push   %eax
f01191f6:	e8 55 e7 fe ff       	call   f0107950 <kfree>
f01191fb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01191fe:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119204:	83 ec 0c             	sub    $0xc,%esp
f0119207:	50                   	push   %eax
f0119208:	e8 43 e7 fe ff       	call   f0107950 <kfree>
f011920d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119210:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119216:	83 ec 0c             	sub    $0xc,%esp
f0119219:	50                   	push   %eax
f011921a:	e8 31 e7 fe ff       	call   f0107950 <kfree>
f011921f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119222:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119228:	83 ec 0c             	sub    $0xc,%esp
f011922b:	50                   	push   %eax
f011922c:	e8 1f e7 fe ff       	call   f0107950 <kfree>
f0119231:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119234:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011923a:	83 ec 0c             	sub    $0xc,%esp
f011923d:	50                   	push   %eax
f011923e:	e8 0d e7 fe ff       	call   f0107950 <kfree>
f0119243:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119246:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f011924c:	83 ec 0c             	sub    $0xc,%esp
f011924f:	50                   	push   %eax
f0119250:	e8 fb e6 fe ff       	call   f0107950 <kfree>
f0119255:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119258:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011925e:	83 ec 0c             	sub    $0xc,%esp
f0119261:	50                   	push   %eax
f0119262:	e8 e9 e6 fe ff       	call   f0107950 <kfree>
f0119267:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011926a:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119270:	83 ec 0c             	sub    $0xc,%esp
f0119273:	50                   	push   %eax
f0119274:	e8 d7 e6 fe ff       	call   f0107950 <kfree>
f0119279:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011927c:	e8 47 ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119281:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119284:	74 17                	je     f011929d <test_kmalloc_nextfit+0x8b7>
f0119286:	83 ec 04             	sub    $0x4,%esp
f0119289:	68 74 b3 13 f0       	push   $0xf013b374
f011928e:	68 17 01 00 00       	push   $0x117
f0119293:	68 5a b3 13 f0       	push   $0xf013b35a
f0119298:	e8 68 6f fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011929d:	e8 fb 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01192a2:	89 c2                	mov    %eax,%edx
f01192a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01192a7:	89 d1                	mov    %edx,%ecx
f01192a9:	29 c1                	sub    %eax,%ecx
f01192ab:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01192b2:	10 00 00 
f01192b5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01192bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192c0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01192c6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01192cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d1:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01192d7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01192dd:	29 d0                	sub    %edx,%eax
f01192df:	89 c3                	mov    %eax,%ebx
f01192e1:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01192e8:	10 00 00 
f01192eb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01192f0:	0f b6 d0             	movzbl %al,%edx
f01192f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01192f9:	01 d0                	add    %edx,%eax
f01192fb:	48                   	dec    %eax
f01192fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119302:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119308:	ba 00 00 00 00       	mov    $0x0,%edx
f011930d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119313:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119319:	29 d0                	sub    %edx,%eax
f011931b:	01 c3                	add    %eax,%ebx
f011931d:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119324:	10 00 00 
f0119327:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011932c:	0f b6 c0             	movzbl %al,%eax
f011932f:	c1 e0 04             	shl    $0x4,%eax
f0119332:	89 c2                	mov    %eax,%edx
f0119334:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011933a:	01 d0                	add    %edx,%eax
f011933c:	48                   	dec    %eax
f011933d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119343:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119349:	ba 00 00 00 00       	mov    $0x0,%edx
f011934e:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119354:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011935a:	29 d0                	sub    %edx,%eax
f011935c:	01 d8                	add    %ebx,%eax
f011935e:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119363:	29 c2                	sub    %eax,%edx
f0119365:	89 d0                	mov    %edx,%eax
f0119367:	c1 e8 0c             	shr    $0xc,%eax
f011936a:	39 c1                	cmp    %eax,%ecx
f011936c:	74 17                	je     f0119385 <test_kmalloc_nextfit+0x99f>
f011936e:	83 ec 04             	sub    $0x4,%esp
f0119371:	68 28 b6 13 f0       	push   $0xf013b628
f0119376:	68 18 01 00 00       	push   $0x118
f011937b:	68 5a b3 13 f0       	push   $0xf013b35a
f0119380:	e8 80 6e fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119385:	e8 3e aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011938a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011938d:	e8 0b 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119392:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119395:	83 ec 0c             	sub    $0xc,%esp
f0119398:	68 00 fc 0f 00       	push   $0xffc00
f011939d:	e8 e3 e4 fe ff       	call   f0107885 <kmalloc>
f01193a2:	83 c4 10             	add    $0x10,%esp
f01193a5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01193ab:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01193b2:	10 00 00 
f01193b5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01193bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193c0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01193c6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01193cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d1:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01193d7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01193dd:	29 d0                	sub    %edx,%eax
f01193df:	89 c1                	mov    %eax,%ecx
f01193e1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01193e8:	10 00 00 
f01193eb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01193f0:	0f b6 d0             	movzbl %al,%edx
f01193f3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01193f9:	01 d0                	add    %edx,%eax
f01193fb:	48                   	dec    %eax
f01193fc:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119402:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119408:	ba 00 00 00 00       	mov    $0x0,%edx
f011940d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119413:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119419:	29 d0                	sub    %edx,%eax
f011941b:	01 c1                	add    %eax,%ecx
f011941d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119424:	10 00 00 
f0119427:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011942c:	0f b6 c0             	movzbl %al,%eax
f011942f:	c1 e0 04             	shl    $0x4,%eax
f0119432:	89 c2                	mov    %eax,%edx
f0119434:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011943a:	01 d0                	add    %edx,%eax
f011943c:	48                   	dec    %eax
f011943d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119443:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119449:	ba 00 00 00 00       	mov    $0x0,%edx
f011944e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119454:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011945a:	29 d0                	sub    %edx,%eax
f011945c:	01 c8                	add    %ecx,%eax
f011945e:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119464:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011946a:	39 c2                	cmp    %eax,%edx
f011946c:	74 17                	je     f0119485 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f011946e:	83 ec 04             	sub    $0x4,%esp
f0119471:	68 68 b6 13 f0       	push   $0xf013b668
f0119476:	68 1f 01 00 00       	push   $0x11f
f011947b:	68 5a b3 13 f0       	push   $0xf013b35a
f0119480:	e8 80 6d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119485:	e8 3e a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011948a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011948d:	74 17                	je     f01194a6 <test_kmalloc_nextfit+0xac0>
f011948f:	83 ec 04             	sub    $0x4,%esp
f0119492:	68 74 b3 13 f0       	push   $0xf013b374
f0119497:	68 20 01 00 00       	push   $0x120
f011949c:	68 5a b3 13 f0       	push   $0xf013b35a
f01194a1:	e8 5f 6d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01194a6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194a9:	e8 ef 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01194ae:	29 c3                	sub    %eax,%ebx
f01194b0:	89 d8                	mov    %ebx,%eax
f01194b2:	3d 00 01 00 00       	cmp    $0x100,%eax
f01194b7:	74 17                	je     f01194d0 <test_kmalloc_nextfit+0xaea>
f01194b9:	83 ec 04             	sub    $0x4,%esp
f01194bc:	68 17 b6 13 f0       	push   $0xf013b617
f01194c1:	68 21 01 00 00       	push   $0x121
f01194c6:	68 5a b3 13 f0       	push   $0xf013b35a
f01194cb:	e8 35 6d fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01194d0:	e8 f3 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01194d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194d8:	e8 c0 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01194dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01194e0:	83 ec 0c             	sub    $0xc,%esp
f01194e3:	68 00 04 00 00       	push   $0x400
f01194e8:	e8 98 e3 fe ff       	call   f0107885 <kmalloc>
f01194ed:	83 c4 10             	add    $0x10,%esp
f01194f0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01194f6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01194fd:	10 00 00 
f0119500:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119506:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011950b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119511:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119517:	ba 00 00 00 00       	mov    $0x0,%edx
f011951c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119522:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119528:	29 d0                	sub    %edx,%eax
f011952a:	89 c1                	mov    %eax,%ecx
f011952c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119533:	10 00 00 
f0119536:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011953b:	0f b6 d0             	movzbl %al,%edx
f011953e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119544:	01 d0                	add    %edx,%eax
f0119546:	48                   	dec    %eax
f0119547:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011954d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119553:	ba 00 00 00 00       	mov    $0x0,%edx
f0119558:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011955e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119564:	29 d0                	sub    %edx,%eax
f0119566:	01 c1                	add    %eax,%ecx
f0119568:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011956f:	10 00 00 
f0119572:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119577:	0f b6 c0             	movzbl %al,%eax
f011957a:	c1 e0 04             	shl    $0x4,%eax
f011957d:	89 c2                	mov    %eax,%edx
f011957f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119585:	01 d0                	add    %edx,%eax
f0119587:	48                   	dec    %eax
f0119588:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011958e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119594:	ba 00 00 00 00       	mov    $0x0,%edx
f0119599:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011959f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01195a5:	29 d0                	sub    %edx,%eax
f01195a7:	01 c8                	add    %ecx,%eax
f01195a9:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01195af:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01195b5:	39 c2                	cmp    %eax,%edx
f01195b7:	74 17                	je     f01195d0 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01195b9:	83 ec 04             	sub    $0x4,%esp
f01195bc:	68 68 b6 13 f0       	push   $0xf013b668
f01195c1:	68 27 01 00 00       	push   $0x127
f01195c6:	68 5a b3 13 f0       	push   $0xf013b35a
f01195cb:	e8 35 6c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01195d0:	e8 f3 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01195d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01195d8:	74 17                	je     f01195f1 <test_kmalloc_nextfit+0xc0b>
f01195da:	83 ec 04             	sub    $0x4,%esp
f01195dd:	68 74 b3 13 f0       	push   $0xf013b374
f01195e2:	68 28 01 00 00       	push   $0x128
f01195e7:	68 5a b3 13 f0       	push   $0xf013b35a
f01195ec:	e8 14 6c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01195f1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01195f4:	e8 a4 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01195f9:	29 c3                	sub    %eax,%ebx
f01195fb:	89 d8                	mov    %ebx,%eax
f01195fd:	83 f8 01             	cmp    $0x1,%eax
f0119600:	74 17                	je     f0119619 <test_kmalloc_nextfit+0xc33>
f0119602:	83 ec 04             	sub    $0x4,%esp
f0119605:	68 17 b6 13 f0       	push   $0xf013b617
f011960a:	68 29 01 00 00       	push   $0x129
f011960f:	68 5a b3 13 f0       	push   $0xf013b35a
f0119614:	e8 ec 6b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119619:	e8 aa a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011961e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119621:	e8 77 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119626:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119629:	83 ec 0c             	sub    $0xc,%esp
f011962c:	68 00 00 50 00       	push   $0x500000
f0119631:	e8 4f e2 fe ff       	call   f0107885 <kmalloc>
f0119636:	83 c4 10             	add    $0x10,%esp
f0119639:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011963f:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119646:	10 00 00 
f0119649:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011964f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119654:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011965a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119660:	ba 00 00 00 00       	mov    $0x0,%edx
f0119665:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011966b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119671:	29 d0                	sub    %edx,%eax
f0119673:	89 c1                	mov    %eax,%ecx
f0119675:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011967c:	10 00 00 
f011967f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119684:	0f b6 d0             	movzbl %al,%edx
f0119687:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011968d:	01 d0                	add    %edx,%eax
f011968f:	48                   	dec    %eax
f0119690:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119696:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011969c:	ba 00 00 00 00       	mov    $0x0,%edx
f01196a1:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01196a7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01196ad:	29 d0                	sub    %edx,%eax
f01196af:	01 c1                	add    %eax,%ecx
f01196b1:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01196b8:	10 00 00 
f01196bb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01196c0:	0f b6 c0             	movzbl %al,%eax
f01196c3:	c1 e0 04             	shl    $0x4,%eax
f01196c6:	89 c2                	mov    %eax,%edx
f01196c8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01196ce:	01 d0                	add    %edx,%eax
f01196d0:	48                   	dec    %eax
f01196d1:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01196d7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01196dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e2:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01196e8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01196ee:	29 d0                	sub    %edx,%eax
f01196f0:	01 c8                	add    %ecx,%eax
f01196f2:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01196f8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01196fe:	39 c2                	cmp    %eax,%edx
f0119700:	74 17                	je     f0119719 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119702:	83 ec 04             	sub    $0x4,%esp
f0119705:	68 68 b6 13 f0       	push   $0xf013b668
f011970a:	68 2f 01 00 00       	push   $0x12f
f011970f:	68 5a b3 13 f0       	push   $0xf013b35a
f0119714:	e8 ec 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119719:	e8 aa a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011971e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119721:	74 17                	je     f011973a <test_kmalloc_nextfit+0xd54>
f0119723:	83 ec 04             	sub    $0x4,%esp
f0119726:	68 74 b3 13 f0       	push   $0xf013b374
f011972b:	68 30 01 00 00       	push   $0x130
f0119730:	68 5a b3 13 f0       	push   $0xf013b35a
f0119735:	e8 cb 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011973a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011973d:	e8 5b 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119742:	29 c3                	sub    %eax,%ebx
f0119744:	89 d8                	mov    %ebx,%eax
f0119746:	3d 00 05 00 00       	cmp    $0x500,%eax
f011974b:	74 17                	je     f0119764 <test_kmalloc_nextfit+0xd7e>
f011974d:	83 ec 04             	sub    $0x4,%esp
f0119750:	68 17 b6 13 f0       	push   $0xf013b617
f0119755:	68 31 01 00 00       	push   $0x131
f011975a:	68 5a b3 13 f0       	push   $0xf013b35a
f011975f:	e8 a1 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119764:	e8 5f a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119769:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011976c:	e8 2c 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119771:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119774:	83 ec 0c             	sub    $0xc,%esp
f0119777:	68 00 00 10 00       	push   $0x100000
f011977c:	e8 04 e1 fe ff       	call   f0107885 <kmalloc>
f0119781:	83 c4 10             	add    $0x10,%esp
f0119784:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011978a:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119791:	10 00 00 
f0119794:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011979a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011979f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01197a5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01197ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01197b0:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01197b6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01197bc:	29 d0                	sub    %edx,%eax
f01197be:	89 c1                	mov    %eax,%ecx
f01197c0:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01197c7:	10 00 00 
f01197ca:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01197cf:	0f b6 d0             	movzbl %al,%edx
f01197d2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01197d8:	01 d0                	add    %edx,%eax
f01197da:	48                   	dec    %eax
f01197db:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01197e1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01197e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01197ec:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01197f2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01197f8:	29 d0                	sub    %edx,%eax
f01197fa:	01 c1                	add    %eax,%ecx
f01197fc:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119803:	10 00 00 
f0119806:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011980b:	0f b6 c0             	movzbl %al,%eax
f011980e:	c1 e0 04             	shl    $0x4,%eax
f0119811:	89 c2                	mov    %eax,%edx
f0119813:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119819:	01 d0                	add    %edx,%eax
f011981b:	48                   	dec    %eax
f011981c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119822:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119828:	ba 00 00 00 00       	mov    $0x0,%edx
f011982d:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119833:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119839:	29 d0                	sub    %edx,%eax
f011983b:	01 c8                	add    %ecx,%eax
f011983d:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119843:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119849:	39 c2                	cmp    %eax,%edx
f011984b:	74 17                	je     f0119864 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f011984d:	83 ec 04             	sub    $0x4,%esp
f0119850:	68 68 b6 13 f0       	push   $0xf013b668
f0119855:	68 37 01 00 00       	push   $0x137
f011985a:	68 5a b3 13 f0       	push   $0xf013b35a
f011985f:	e8 a1 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119864:	e8 5f a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119869:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011986c:	74 17                	je     f0119885 <test_kmalloc_nextfit+0xe9f>
f011986e:	83 ec 04             	sub    $0x4,%esp
f0119871:	68 74 b3 13 f0       	push   $0xf013b374
f0119876:	68 38 01 00 00       	push   $0x138
f011987b:	68 5a b3 13 f0       	push   $0xf013b35a
f0119880:	e8 80 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119885:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119888:	e8 10 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011988d:	29 c3                	sub    %eax,%ebx
f011988f:	89 d8                	mov    %ebx,%eax
f0119891:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119896:	74 17                	je     f01198af <test_kmalloc_nextfit+0xec9>
f0119898:	83 ec 04             	sub    $0x4,%esp
f011989b:	68 17 b6 13 f0       	push   $0xf013b617
f01198a0:	68 39 01 00 00       	push   $0x139
f01198a5:	68 5a b3 13 f0       	push   $0xf013b35a
f01198aa:	e8 56 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01198af:	e8 14 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198b7:	e8 e1 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01198bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01198bf:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01198c5:	83 ec 0c             	sub    $0xc,%esp
f01198c8:	50                   	push   %eax
f01198c9:	e8 82 e0 fe ff       	call   f0107950 <kfree>
f01198ce:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198d1:	e8 f2 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198d9:	74 17                	je     f01198f2 <test_kmalloc_nextfit+0xf0c>
f01198db:	83 ec 04             	sub    $0x4,%esp
f01198de:	68 74 b3 13 f0       	push   $0xf013b374
f01198e3:	68 3e 01 00 00       	push   $0x13e
f01198e8:	68 5a b3 13 f0       	push   $0xf013b35a
f01198ed:	e8 13 69 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01198f2:	e8 a6 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01198f7:	89 c2                	mov    %eax,%edx
f01198f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01198fc:	29 c2                	sub    %eax,%edx
f01198fe:	89 d0                	mov    %edx,%eax
f0119900:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119905:	74 17                	je     f011991e <test_kmalloc_nextfit+0xf38>
f0119907:	83 ec 04             	sub    $0x4,%esp
f011990a:	68 28 b6 13 f0       	push   $0xf013b628
f011990f:	68 3f 01 00 00       	push   $0x13f
f0119914:	68 5a b3 13 f0       	push   $0xf013b35a
f0119919:	e8 e7 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011991e:	e8 a5 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119923:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119926:	e8 72 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011992b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011992e:	83 ec 0c             	sub    $0xc,%esp
f0119931:	68 00 04 00 00       	push   $0x400
f0119936:	e8 4a df fe ff       	call   f0107885 <kmalloc>
f011993b:	83 c4 10             	add    $0x10,%esp
f011993e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119944:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011994b:	10 00 00 
f011994e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119954:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119959:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011995f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119965:	ba 00 00 00 00       	mov    $0x0,%edx
f011996a:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119970:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119976:	29 d0                	sub    %edx,%eax
f0119978:	89 c1                	mov    %eax,%ecx
f011997a:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119981:	10 00 00 
f0119984:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119989:	0f b6 d0             	movzbl %al,%edx
f011998c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119992:	01 d0                	add    %edx,%eax
f0119994:	48                   	dec    %eax
f0119995:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011999b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01199a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01199a6:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f01199ac:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01199b2:	29 d0                	sub    %edx,%eax
f01199b4:	01 c1                	add    %eax,%ecx
f01199b6:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01199bd:	10 00 00 
f01199c0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01199c5:	0f b6 c0             	movzbl %al,%eax
f01199c8:	c1 e0 04             	shl    $0x4,%eax
f01199cb:	89 c2                	mov    %eax,%edx
f01199cd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01199d3:	01 d0                	add    %edx,%eax
f01199d5:	48                   	dec    %eax
f01199d6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01199dc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01199e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01199e7:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01199ed:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01199f3:	29 d0                	sub    %edx,%eax
f01199f5:	01 c8                	add    %ecx,%eax
f01199f7:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01199fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a03:	39 c2                	cmp    %eax,%edx
f0119a05:	74 17                	je     f0119a1e <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119a07:	83 ec 04             	sub    $0x4,%esp
f0119a0a:	68 68 b6 13 f0       	push   $0xf013b668
f0119a0f:	68 45 01 00 00       	push   $0x145
f0119a14:	68 5a b3 13 f0       	push   $0xf013b35a
f0119a19:	e8 e7 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a1e:	e8 a5 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a23:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a26:	74 17                	je     f0119a3f <test_kmalloc_nextfit+0x1059>
f0119a28:	83 ec 04             	sub    $0x4,%esp
f0119a2b:	68 74 b3 13 f0       	push   $0xf013b374
f0119a30:	68 46 01 00 00       	push   $0x146
f0119a35:	68 5a b3 13 f0       	push   $0xf013b35a
f0119a3a:	e8 c6 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119a3f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a42:	e8 56 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a47:	29 c3                	sub    %eax,%ebx
f0119a49:	89 d8                	mov    %ebx,%eax
f0119a4b:	83 f8 01             	cmp    $0x1,%eax
f0119a4e:	74 17                	je     f0119a67 <test_kmalloc_nextfit+0x1081>
f0119a50:	83 ec 04             	sub    $0x4,%esp
f0119a53:	68 17 b6 13 f0       	push   $0xf013b617
f0119a58:	68 47 01 00 00       	push   $0x147
f0119a5d:	68 5a b3 13 f0       	push   $0xf013b35a
f0119a62:	e8 9e 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a67:	e8 5c a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a6f:	e8 29 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a74:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119a77:	83 ec 0c             	sub    $0xc,%esp
f0119a7a:	68 00 e0 1f 00       	push   $0x1fe000
f0119a7f:	e8 01 de fe ff       	call   f0107885 <kmalloc>
f0119a84:	83 c4 10             	add    $0x10,%esp
f0119a87:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119a8d:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119a94:	10 00 00 
f0119a97:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119a9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119aa2:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119aa8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ab3:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119ab9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119abf:	29 d0                	sub    %edx,%eax
f0119ac1:	89 c1                	mov    %eax,%ecx
f0119ac3:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119aca:	10 00 00 
f0119acd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119ad2:	0f b6 d0             	movzbl %al,%edx
f0119ad5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119adb:	01 d0                	add    %edx,%eax
f0119add:	48                   	dec    %eax
f0119ade:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119ae4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119aea:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aef:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119af5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119afb:	29 d0                	sub    %edx,%eax
f0119afd:	01 c1                	add    %eax,%ecx
f0119aff:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119b06:	10 00 00 
f0119b09:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119b0e:	0f b6 c0             	movzbl %al,%eax
f0119b11:	c1 e0 04             	shl    $0x4,%eax
f0119b14:	89 c2                	mov    %eax,%edx
f0119b16:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119b1c:	01 d0                	add    %edx,%eax
f0119b1e:	48                   	dec    %eax
f0119b1f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119b25:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119b2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b30:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119b36:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119b3c:	29 d0                	sub    %edx,%eax
f0119b3e:	01 c8                	add    %ecx,%eax
f0119b40:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119b46:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b4c:	39 c2                	cmp    %eax,%edx
f0119b4e:	74 17                	je     f0119b67 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119b50:	83 ec 04             	sub    $0x4,%esp
f0119b53:	68 68 b6 13 f0       	push   $0xf013b668
f0119b58:	68 4d 01 00 00       	push   $0x14d
f0119b5d:	68 5a b3 13 f0       	push   $0xf013b35a
f0119b62:	e8 9e 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b67:	e8 5c a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b6c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b6f:	74 17                	je     f0119b88 <test_kmalloc_nextfit+0x11a2>
f0119b71:	83 ec 04             	sub    $0x4,%esp
f0119b74:	68 74 b3 13 f0       	push   $0xf013b374
f0119b79:	68 4e 01 00 00       	push   $0x14e
f0119b7e:	68 5a b3 13 f0       	push   $0xf013b35a
f0119b83:	e8 7d 66 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119b88:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b8b:	e8 0d 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119b90:	29 c3                	sub    %eax,%ebx
f0119b92:	89 d8                	mov    %ebx,%eax
f0119b94:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119b99:	74 17                	je     f0119bb2 <test_kmalloc_nextfit+0x11cc>
f0119b9b:	83 ec 04             	sub    $0x4,%esp
f0119b9e:	68 17 b6 13 f0       	push   $0xf013b617
f0119ba3:	68 50 01 00 00       	push   $0x150
f0119ba8:	68 5a b3 13 f0       	push   $0xf013b35a
f0119bad:	e8 53 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119bb2:	e8 11 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119bb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119bba:	e8 de 2f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119bc2:	83 ec 0c             	sub    $0xc,%esp
f0119bc5:	68 00 00 08 00       	push   $0x80000
f0119bca:	e8 b6 dc fe ff       	call   f0107885 <kmalloc>
f0119bcf:	83 c4 10             	add    $0x10,%esp
f0119bd2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119bd8:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119bdf:	10 00 00 
f0119be2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119be8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bed:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119bf3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119bf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bfe:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119c04:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119c0a:	29 d0                	sub    %edx,%eax
f0119c0c:	89 c1                	mov    %eax,%ecx
f0119c0e:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119c15:	10 00 00 
f0119c18:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119c1d:	0f b6 d0             	movzbl %al,%edx
f0119c20:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119c26:	01 d0                	add    %edx,%eax
f0119c28:	48                   	dec    %eax
f0119c29:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119c2f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119c35:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c3a:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119c40:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119c46:	29 d0                	sub    %edx,%eax
f0119c48:	01 c1                	add    %eax,%ecx
f0119c4a:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119c51:	10 00 00 
f0119c54:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119c59:	0f b6 c0             	movzbl %al,%eax
f0119c5c:	c1 e0 04             	shl    $0x4,%eax
f0119c5f:	89 c2                	mov    %eax,%edx
f0119c61:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119c67:	01 d0                	add    %edx,%eax
f0119c69:	48                   	dec    %eax
f0119c6a:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119c70:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119c76:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c7b:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119c81:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119c87:	29 d0                	sub    %edx,%eax
f0119c89:	01 c8                	add    %ecx,%eax
f0119c8b:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119c91:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119c97:	39 c2                	cmp    %eax,%edx
f0119c99:	74 17                	je     f0119cb2 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119c9b:	83 ec 04             	sub    $0x4,%esp
f0119c9e:	68 68 b6 13 f0       	push   $0xf013b668
f0119ca3:	68 56 01 00 00       	push   $0x156
f0119ca8:	68 5a b3 13 f0       	push   $0xf013b35a
f0119cad:	e8 53 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cb2:	e8 11 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119cb7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119cba:	74 17                	je     f0119cd3 <test_kmalloc_nextfit+0x12ed>
f0119cbc:	83 ec 04             	sub    $0x4,%esp
f0119cbf:	68 74 b3 13 f0       	push   $0xf013b374
f0119cc4:	68 57 01 00 00       	push   $0x157
f0119cc9:	68 5a b3 13 f0       	push   $0xf013b35a
f0119cce:	e8 32 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119cd3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119cd6:	e8 c2 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119cdb:	29 c3                	sub    %eax,%ebx
f0119cdd:	89 d8                	mov    %ebx,%eax
f0119cdf:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119ce4:	74 17                	je     f0119cfd <test_kmalloc_nextfit+0x1317>
f0119ce6:	83 ec 04             	sub    $0x4,%esp
f0119ce9:	68 17 b6 13 f0       	push   $0xf013b617
f0119cee:	68 58 01 00 00       	push   $0x158
f0119cf3:	68 5a b3 13 f0       	push   $0xf013b35a
f0119cf8:	e8 08 65 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119cfd:	83 ec 0c             	sub    $0xc,%esp
f0119d00:	68 88 b6 13 f0       	push   $0xf013b688
f0119d05:	e8 04 70 fe ff       	call   f0100d0e <cprintf>
f0119d0a:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119d0d:	e8 b6 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d12:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d15:	e8 83 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119d1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119d1d:	83 ec 0c             	sub    $0xc,%esp
f0119d20:	68 00 00 38 00       	push   $0x380000
f0119d25:	e8 5b db fe ff       	call   f0107885 <kmalloc>
f0119d2a:	83 c4 10             	add    $0x10,%esp
f0119d2d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119d33:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119d3a:	10 00 00 
f0119d3d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119d43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d48:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119d4e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d59:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119d5f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119d65:	29 d0                	sub    %edx,%eax
f0119d67:	89 c1                	mov    %eax,%ecx
f0119d69:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119d70:	10 00 00 
f0119d73:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119d78:	0f b6 d0             	movzbl %al,%edx
f0119d7b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119d81:	01 d0                	add    %edx,%eax
f0119d83:	48                   	dec    %eax
f0119d84:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119d8a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119d90:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d95:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119d9b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119da1:	29 d0                	sub    %edx,%eax
f0119da3:	01 c1                	add    %eax,%ecx
f0119da5:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119dac:	10 00 00 
f0119daf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119db4:	0f b6 c0             	movzbl %al,%eax
f0119db7:	c1 e0 04             	shl    $0x4,%eax
f0119dba:	89 c2                	mov    %eax,%edx
f0119dbc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119dc2:	01 d0                	add    %edx,%eax
f0119dc4:	48                   	dec    %eax
f0119dc5:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0119dcb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119dd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd6:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119ddc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119de2:	29 d0                	sub    %edx,%eax
f0119de4:	01 c8                	add    %ecx,%eax
f0119de6:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119dec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119df2:	39 c2                	cmp    %eax,%edx
f0119df4:	74 17                	je     f0119e0d <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119df6:	83 ec 04             	sub    $0x4,%esp
f0119df9:	68 68 b6 13 f0       	push   $0xf013b668
f0119dfe:	68 62 01 00 00       	push   $0x162
f0119e03:	68 5a b3 13 f0       	push   $0xf013b35a
f0119e08:	e8 f8 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e0d:	e8 b6 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e15:	74 17                	je     f0119e2e <test_kmalloc_nextfit+0x1448>
f0119e17:	83 ec 04             	sub    $0x4,%esp
f0119e1a:	68 74 b3 13 f0       	push   $0xf013b374
f0119e1f:	68 63 01 00 00       	push   $0x163
f0119e24:	68 5a b3 13 f0       	push   $0xf013b35a
f0119e29:	e8 d7 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119e2e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e31:	e8 67 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e36:	29 c3                	sub    %eax,%ebx
f0119e38:	89 d8                	mov    %ebx,%eax
f0119e3a:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119e3f:	74 17                	je     f0119e58 <test_kmalloc_nextfit+0x1472>
f0119e41:	83 ec 04             	sub    $0x4,%esp
f0119e44:	68 17 b6 13 f0       	push   $0xf013b617
f0119e49:	68 64 01 00 00       	push   $0x164
f0119e4e:	68 5a b3 13 f0       	push   $0xf013b35a
f0119e53:	e8 ad 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119e58:	e8 6b 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e60:	e8 38 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119e68:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119e6e:	83 ec 0c             	sub    $0xc,%esp
f0119e71:	50                   	push   %eax
f0119e72:	e8 d9 da fe ff       	call   f0107950 <kfree>
f0119e77:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e7a:	e8 49 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e7f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e82:	74 17                	je     f0119e9b <test_kmalloc_nextfit+0x14b5>
f0119e84:	83 ec 04             	sub    $0x4,%esp
f0119e87:	68 74 b3 13 f0       	push   $0xf013b374
f0119e8c:	68 69 01 00 00       	push   $0x169
f0119e91:	68 5a b3 13 f0       	push   $0xf013b35a
f0119e96:	e8 6a 63 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119e9b:	e8 fd 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ea0:	89 c2                	mov    %eax,%edx
f0119ea2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119ea5:	29 c2                	sub    %eax,%edx
f0119ea7:	89 d0                	mov    %edx,%eax
f0119ea9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119eae:	74 17                	je     f0119ec7 <test_kmalloc_nextfit+0x14e1>
f0119eb0:	83 ec 04             	sub    $0x4,%esp
f0119eb3:	68 28 b6 13 f0       	push   $0xf013b628
f0119eb8:	68 6a 01 00 00       	push   $0x16a
f0119ebd:	68 5a b3 13 f0       	push   $0xf013b35a
f0119ec2:	e8 3e 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ec7:	e8 fc 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ecc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ecf:	e8 c9 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ed4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119ed7:	83 ec 0c             	sub    $0xc,%esp
f0119eda:	68 00 fc 3f 00       	push   $0x3ffc00
f0119edf:	e8 a1 d9 fe ff       	call   f0107885 <kmalloc>
f0119ee4:	83 c4 10             	add    $0x10,%esp
f0119ee7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119eed:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119ef4:	10 00 00 
f0119ef7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0119efd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f02:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0119f08:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f13:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119f19:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119f1f:	29 d0                	sub    %edx,%eax
f0119f21:	89 c1                	mov    %eax,%ecx
f0119f23:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119f2a:	10 00 00 
f0119f2d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119f32:	0f b6 d0             	movzbl %al,%edx
f0119f35:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119f3b:	01 d0                	add    %edx,%eax
f0119f3d:	48                   	dec    %eax
f0119f3e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119f44:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119f4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f4f:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119f55:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119f5b:	29 d0                	sub    %edx,%eax
f0119f5d:	01 c1                	add    %eax,%ecx
f0119f5f:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119f66:	10 00 00 
f0119f69:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119f6e:	0f b6 c0             	movzbl %al,%eax
f0119f71:	c1 e0 04             	shl    $0x4,%eax
f0119f74:	89 c2                	mov    %eax,%edx
f0119f76:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119f7c:	01 d0                	add    %edx,%eax
f0119f7e:	48                   	dec    %eax
f0119f7f:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119f85:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119f8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f90:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119f96:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119f9c:	29 d0                	sub    %edx,%eax
f0119f9e:	01 c8                	add    %ecx,%eax
f0119fa0:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119fa6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fac:	39 c2                	cmp    %eax,%edx
f0119fae:	74 17                	je     f0119fc7 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119fb0:	83 ec 04             	sub    $0x4,%esp
f0119fb3:	68 68 b6 13 f0       	push   $0xf013b668
f0119fb8:	68 70 01 00 00       	push   $0x170
f0119fbd:	68 5a b3 13 f0       	push   $0xf013b35a
f0119fc2:	e8 3e 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fc7:	e8 fc 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fcc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fcf:	74 17                	je     f0119fe8 <test_kmalloc_nextfit+0x1602>
f0119fd1:	83 ec 04             	sub    $0x4,%esp
f0119fd4:	68 74 b3 13 f0       	push   $0xf013b374
f0119fd9:	68 71 01 00 00       	push   $0x171
f0119fde:	68 5a b3 13 f0       	push   $0xf013b35a
f0119fe3:	e8 1d 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119fe8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119feb:	e8 ad 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ff0:	29 c3                	sub    %eax,%ebx
f0119ff2:	89 d8                	mov    %ebx,%eax
f0119ff4:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119ff9:	74 17                	je     f011a012 <test_kmalloc_nextfit+0x162c>
f0119ffb:	83 ec 04             	sub    $0x4,%esp
f0119ffe:	68 17 b6 13 f0       	push   $0xf013b617
f011a003:	68 72 01 00 00       	push   $0x172
f011a008:	68 5a b3 13 f0       	push   $0xf013b35a
f011a00d:	e8 f3 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a012:	83 ec 0c             	sub    $0xc,%esp
f011a015:	68 c4 b6 13 f0       	push   $0xf013b6c4
f011a01a:	e8 ef 6c fe ff       	call   f0100d0e <cprintf>
f011a01f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a022:	e8 a1 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a027:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a02a:	e8 6e 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a02f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a032:	83 ec 0c             	sub    $0xc,%esp
f011a035:	68 00 00 60 00       	push   $0x600000
f011a03a:	e8 46 d8 fe ff       	call   f0107885 <kmalloc>
f011a03f:	83 c4 10             	add    $0x10,%esp
f011a042:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a048:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a04e:	85 c0                	test   %eax,%eax
f011a050:	74 17                	je     f011a069 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a052:	83 ec 04             	sub    $0x4,%esp
f011a055:	68 68 b6 13 f0       	push   $0xf013b668
f011a05a:	68 7c 01 00 00       	push   $0x17c
f011a05f:	68 5a b3 13 f0       	push   $0xf013b35a
f011a064:	e8 9c 61 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a069:	e8 5a 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a06e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a071:	74 17                	je     f011a08a <test_kmalloc_nextfit+0x16a4>
f011a073:	83 ec 04             	sub    $0x4,%esp
f011a076:	68 74 b3 13 f0       	push   $0xf013b374
f011a07b:	68 7d 01 00 00       	push   $0x17d
f011a080:	68 5a b3 13 f0       	push   $0xf013b35a
f011a085:	e8 7b 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a08a:	e8 0e 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a08f:	89 c2                	mov    %eax,%edx
f011a091:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a094:	39 c2                	cmp    %eax,%edx
f011a096:	74 17                	je     f011a0af <test_kmalloc_nextfit+0x16c9>
f011a098:	83 ec 04             	sub    $0x4,%esp
f011a09b:	68 17 b6 13 f0       	push   $0xf013b617
f011a0a0:	68 7e 01 00 00       	push   $0x17e
f011a0a5:	68 5a b3 13 f0       	push   $0xf013b35a
f011a0aa:	e8 56 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a0af:	83 ec 0c             	sub    $0xc,%esp
f011a0b2:	68 fc b6 13 f0       	push   $0xf013b6fc
f011a0b7:	e8 52 6c fe ff       	call   f0100d0e <cprintf>
f011a0bc:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a0bf:	83 ec 0c             	sub    $0xc,%esp
f011a0c2:	68 38 b7 13 f0       	push   $0xf013b738
f011a0c7:	e8 42 6c fe ff       	call   f0100d0e <cprintf>
f011a0cc:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a0cf:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a0d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a0d7:	5b                   	pop    %ebx
f011a0d8:	5f                   	pop    %edi
f011a0d9:	5d                   	pop    %ebp
f011a0da:	c3                   	ret    

f011a0db <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a0db:	55                   	push   %ebp
f011a0dc:	89 e5                	mov    %esp,%ebp
f011a0de:	57                   	push   %edi
f011a0df:	53                   	push   %ebx
f011a0e0:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a0e6:	83 ec 0c             	sub    $0xc,%esp
f011a0e9:	68 9c b2 13 f0       	push   $0xf013b29c
f011a0ee:	e8 1b 6c fe ff       	call   f0100d0e <cprintf>
f011a0f3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a0f6:	83 ec 0c             	sub    $0xc,%esp
f011a0f9:	68 cc b2 13 f0       	push   $0xf013b2cc
f011a0fe:	e8 0b 6c fe ff       	call   f0100d0e <cprintf>
f011a103:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a106:	83 ec 0c             	sub    $0xc,%esp
f011a109:	68 9c b2 13 f0       	push   $0xf013b29c
f011a10e:	e8 fb 6b fe ff       	call   f0100d0e <cprintf>
f011a113:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a116:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a11c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a121:	b8 00 00 00 00       	mov    $0x0,%eax
f011a126:	89 d7                	mov    %edx,%edi
f011a128:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a12a:	e8 6e 2a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a12f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a132:	e8 91 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a137:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a13a:	83 ec 0c             	sub    $0xc,%esp
f011a13d:	68 00 fc 2f 00       	push   $0x2ffc00
f011a142:	e8 3e d7 fe ff       	call   f0107885 <kmalloc>
f011a147:	83 c4 10             	add    $0x10,%esp
f011a14a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a150:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a156:	89 c1                	mov    %eax,%ecx
f011a158:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a15f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a162:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a167:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a16a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a16d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a172:	f7 75 ec             	divl   -0x14(%ebp)
f011a175:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a178:	29 d0                	sub    %edx,%eax
f011a17a:	89 c3                	mov    %eax,%ebx
f011a17c:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a183:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a188:	0f b6 d0             	movzbl %al,%edx
f011a18b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a18e:	01 d0                	add    %edx,%eax
f011a190:	48                   	dec    %eax
f011a191:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a194:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a197:	ba 00 00 00 00       	mov    $0x0,%edx
f011a19c:	f7 75 e4             	divl   -0x1c(%ebp)
f011a19f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a1a2:	29 d0                	sub    %edx,%eax
f011a1a4:	01 c3                	add    %eax,%ebx
f011a1a6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a1ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a1b2:	0f b6 c0             	movzbl %al,%eax
f011a1b5:	c1 e0 04             	shl    $0x4,%eax
f011a1b8:	89 c2                	mov    %eax,%edx
f011a1ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a1bd:	01 d0                	add    %edx,%eax
f011a1bf:	48                   	dec    %eax
f011a1c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a1c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a1c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1cb:	f7 75 dc             	divl   -0x24(%ebp)
f011a1ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a1d1:	29 d0                	sub    %edx,%eax
f011a1d3:	01 d8                	add    %ebx,%eax
f011a1d5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a1da:	39 c1                	cmp    %eax,%ecx
f011a1dc:	74 17                	je     f011a1f5 <test_kmalloc_bestfit1+0x11a>
f011a1de:	83 ec 04             	sub    $0x4,%esp
f011a1e1:	68 74 b7 13 f0       	push   $0xf013b774
f011a1e6:	68 98 01 00 00       	push   $0x198
f011a1eb:	68 5a b3 13 f0       	push   $0xf013b35a
f011a1f0:	e8 10 60 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1f5:	e8 ce 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1fd:	74 17                	je     f011a216 <test_kmalloc_bestfit1+0x13b>
f011a1ff:	83 ec 04             	sub    $0x4,%esp
f011a202:	68 74 b3 13 f0       	push   $0xf013b374
f011a207:	68 99 01 00 00       	push   $0x199
f011a20c:	68 5a b3 13 f0       	push   $0xf013b35a
f011a211:	e8 ef 5f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a216:	e8 82 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a21b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a21e:	29 c2                	sub    %eax,%edx
f011a220:	89 d0                	mov    %edx,%eax
f011a222:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a227:	74 17                	je     f011a240 <test_kmalloc_bestfit1+0x165>
f011a229:	83 ec 04             	sub    $0x4,%esp
f011a22c:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a231:	68 9a 01 00 00       	push   $0x19a
f011a236:	68 5a b3 13 f0       	push   $0xf013b35a
f011a23b:	e8 c5 5f fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a240:	e8 58 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a245:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a248:	e8 7b 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a24d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a250:	83 ec 0c             	sub    $0xc,%esp
f011a253:	68 00 fc 2f 00       	push   $0x2ffc00
f011a258:	e8 28 d6 fe ff       	call   f0107885 <kmalloc>
f011a25d:	83 c4 10             	add    $0x10,%esp
f011a260:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a266:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a26c:	89 c1                	mov    %eax,%ecx
f011a26e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a275:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a278:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a27d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a280:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a283:	ba 00 00 00 00       	mov    $0x0,%edx
f011a288:	f7 75 d4             	divl   -0x2c(%ebp)
f011a28b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a28e:	29 d0                	sub    %edx,%eax
f011a290:	89 c3                	mov    %eax,%ebx
f011a292:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a299:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a29e:	0f b6 d0             	movzbl %al,%edx
f011a2a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a2a4:	01 d0                	add    %edx,%eax
f011a2a6:	48                   	dec    %eax
f011a2a7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a2aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a2ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2b2:	f7 75 cc             	divl   -0x34(%ebp)
f011a2b5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a2b8:	29 d0                	sub    %edx,%eax
f011a2ba:	01 c3                	add    %eax,%ebx
f011a2bc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a2c3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a2c8:	0f b6 c0             	movzbl %al,%eax
f011a2cb:	c1 e0 04             	shl    $0x4,%eax
f011a2ce:	89 c2                	mov    %eax,%edx
f011a2d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a2d3:	01 d0                	add    %edx,%eax
f011a2d5:	48                   	dec    %eax
f011a2d6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a2d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a2dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2e1:	f7 75 c4             	divl   -0x3c(%ebp)
f011a2e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a2e7:	29 d0                	sub    %edx,%eax
f011a2e9:	01 d8                	add    %ebx,%eax
f011a2eb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a2f0:	39 c1                	cmp    %eax,%ecx
f011a2f2:	74 17                	je     f011a30b <test_kmalloc_bestfit1+0x230>
f011a2f4:	83 ec 04             	sub    $0x4,%esp
f011a2f7:	68 74 b7 13 f0       	push   $0xf013b774
f011a2fc:	68 a0 01 00 00       	push   $0x1a0
f011a301:	68 5a b3 13 f0       	push   $0xf013b35a
f011a306:	e8 fa 5e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a30b:	e8 b8 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a310:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a313:	74 17                	je     f011a32c <test_kmalloc_bestfit1+0x251>
f011a315:	83 ec 04             	sub    $0x4,%esp
f011a318:	68 74 b3 13 f0       	push   $0xf013b374
f011a31d:	68 a1 01 00 00       	push   $0x1a1
f011a322:	68 5a b3 13 f0       	push   $0xf013b35a
f011a327:	e8 d9 5e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a32c:	e8 6c 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a331:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a334:	29 c2                	sub    %eax,%edx
f011a336:	89 d0                	mov    %edx,%eax
f011a338:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a33d:	74 17                	je     f011a356 <test_kmalloc_bestfit1+0x27b>
f011a33f:	83 ec 04             	sub    $0x4,%esp
f011a342:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a347:	68 a2 01 00 00       	push   $0x1a2
f011a34c:	68 5a b3 13 f0       	push   $0xf013b35a
f011a351:	e8 af 5e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a356:	e8 42 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a35b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a35e:	e8 65 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a363:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a366:	83 ec 0c             	sub    $0xc,%esp
f011a369:	68 00 fc 1f 00       	push   $0x1ffc00
f011a36e:	e8 12 d5 fe ff       	call   f0107885 <kmalloc>
f011a373:	83 c4 10             	add    $0x10,%esp
f011a376:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a37c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a382:	89 c1                	mov    %eax,%ecx
f011a384:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a38b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a38e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a393:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a396:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a399:	ba 00 00 00 00       	mov    $0x0,%edx
f011a39e:	f7 75 bc             	divl   -0x44(%ebp)
f011a3a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a3a4:	29 d0                	sub    %edx,%eax
f011a3a6:	89 c3                	mov    %eax,%ebx
f011a3a8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a3af:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a3b4:	0f b6 d0             	movzbl %al,%edx
f011a3b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a3ba:	01 d0                	add    %edx,%eax
f011a3bc:	48                   	dec    %eax
f011a3bd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a3c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a3c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3c8:	f7 75 b4             	divl   -0x4c(%ebp)
f011a3cb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a3ce:	29 d0                	sub    %edx,%eax
f011a3d0:	01 c3                	add    %eax,%ebx
f011a3d2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a3d9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a3de:	0f b6 c0             	movzbl %al,%eax
f011a3e1:	c1 e0 04             	shl    $0x4,%eax
f011a3e4:	89 c2                	mov    %eax,%edx
f011a3e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a3e9:	01 d0                	add    %edx,%eax
f011a3eb:	48                   	dec    %eax
f011a3ec:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a3ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a3f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3f7:	f7 75 ac             	divl   -0x54(%ebp)
f011a3fa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a3fd:	29 d0                	sub    %edx,%eax
f011a3ff:	01 d8                	add    %ebx,%eax
f011a401:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a406:	39 c1                	cmp    %eax,%ecx
f011a408:	74 17                	je     f011a421 <test_kmalloc_bestfit1+0x346>
f011a40a:	83 ec 04             	sub    $0x4,%esp
f011a40d:	68 74 b7 13 f0       	push   $0xf013b774
f011a412:	68 a8 01 00 00       	push   $0x1a8
f011a417:	68 5a b3 13 f0       	push   $0xf013b35a
f011a41c:	e8 e4 5d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a421:	e8 a2 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a426:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a429:	74 17                	je     f011a442 <test_kmalloc_bestfit1+0x367>
f011a42b:	83 ec 04             	sub    $0x4,%esp
f011a42e:	68 74 b3 13 f0       	push   $0xf013b374
f011a433:	68 a9 01 00 00       	push   $0x1a9
f011a438:	68 5a b3 13 f0       	push   $0xf013b35a
f011a43d:	e8 c3 5d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a442:	e8 56 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a447:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a44a:	29 c2                	sub    %eax,%edx
f011a44c:	89 d0                	mov    %edx,%eax
f011a44e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a453:	74 17                	je     f011a46c <test_kmalloc_bestfit1+0x391>
f011a455:	83 ec 04             	sub    $0x4,%esp
f011a458:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a45d:	68 aa 01 00 00       	push   $0x1aa
f011a462:	68 5a b3 13 f0       	push   $0xf013b35a
f011a467:	e8 99 5d fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a46c:	e8 2c 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a471:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a474:	e8 4f 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a479:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a47c:	83 ec 0c             	sub    $0xc,%esp
f011a47f:	68 00 fc 1f 00       	push   $0x1ffc00
f011a484:	e8 fc d3 fe ff       	call   f0107885 <kmalloc>
f011a489:	83 c4 10             	add    $0x10,%esp
f011a48c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a492:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a498:	89 c1                	mov    %eax,%ecx
f011a49a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a4a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a4a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a4a9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a4ac:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a4af:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b4:	f7 75 a4             	divl   -0x5c(%ebp)
f011a4b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a4ba:	29 d0                	sub    %edx,%eax
f011a4bc:	89 c3                	mov    %eax,%ebx
f011a4be:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a4c5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a4ca:	0f b6 d0             	movzbl %al,%edx
f011a4cd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a4d0:	01 d0                	add    %edx,%eax
f011a4d2:	48                   	dec    %eax
f011a4d3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a4d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a4d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4de:	f7 75 9c             	divl   -0x64(%ebp)
f011a4e1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a4e4:	29 d0                	sub    %edx,%eax
f011a4e6:	01 c3                	add    %eax,%ebx
f011a4e8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a4ef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a4f4:	0f b6 c0             	movzbl %al,%eax
f011a4f7:	c1 e0 04             	shl    $0x4,%eax
f011a4fa:	89 c2                	mov    %eax,%edx
f011a4fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a4ff:	01 d0                	add    %edx,%eax
f011a501:	48                   	dec    %eax
f011a502:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a505:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a508:	ba 00 00 00 00       	mov    $0x0,%edx
f011a50d:	f7 75 94             	divl   -0x6c(%ebp)
f011a510:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a513:	29 d0                	sub    %edx,%eax
f011a515:	01 d8                	add    %ebx,%eax
f011a517:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a51c:	39 c1                	cmp    %eax,%ecx
f011a51e:	74 17                	je     f011a537 <test_kmalloc_bestfit1+0x45c>
f011a520:	83 ec 04             	sub    $0x4,%esp
f011a523:	68 74 b7 13 f0       	push   $0xf013b774
f011a528:	68 b0 01 00 00       	push   $0x1b0
f011a52d:	68 5a b3 13 f0       	push   $0xf013b35a
f011a532:	e8 ce 5c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a537:	e8 8c 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a53c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a53f:	74 17                	je     f011a558 <test_kmalloc_bestfit1+0x47d>
f011a541:	83 ec 04             	sub    $0x4,%esp
f011a544:	68 74 b3 13 f0       	push   $0xf013b374
f011a549:	68 b1 01 00 00       	push   $0x1b1
f011a54e:	68 5a b3 13 f0       	push   $0xf013b35a
f011a553:	e8 ad 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a558:	e8 40 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a55d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a560:	29 c2                	sub    %eax,%edx
f011a562:	89 d0                	mov    %edx,%eax
f011a564:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a569:	74 17                	je     f011a582 <test_kmalloc_bestfit1+0x4a7>
f011a56b:	83 ec 04             	sub    $0x4,%esp
f011a56e:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a573:	68 b2 01 00 00       	push   $0x1b2
f011a578:	68 5a b3 13 f0       	push   $0xf013b35a
f011a57d:	e8 83 5c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a582:	e8 16 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a587:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a58a:	e8 39 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a58f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a592:	83 ec 0c             	sub    $0xc,%esp
f011a595:	68 00 fc 0f 00       	push   $0xffc00
f011a59a:	e8 e6 d2 fe ff       	call   f0107885 <kmalloc>
f011a59f:	83 c4 10             	add    $0x10,%esp
f011a5a2:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a5a8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a5ae:	89 c1                	mov    %eax,%ecx
f011a5b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a5b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a5ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5bf:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a5c2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a5c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5ca:	f7 75 8c             	divl   -0x74(%ebp)
f011a5cd:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a5d0:	29 d0                	sub    %edx,%eax
f011a5d2:	89 c3                	mov    %eax,%ebx
f011a5d4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a5db:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a5e0:	0f b6 d0             	movzbl %al,%edx
f011a5e3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a5e6:	01 d0                	add    %edx,%eax
f011a5e8:	48                   	dec    %eax
f011a5e9:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a5ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a5ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5f4:	f7 75 84             	divl   -0x7c(%ebp)
f011a5f7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a5fa:	29 d0                	sub    %edx,%eax
f011a5fc:	01 c3                	add    %eax,%ebx
f011a5fe:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a605:	10 00 00 
f011a608:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a60d:	0f b6 c0             	movzbl %al,%eax
f011a610:	c1 e0 04             	shl    $0x4,%eax
f011a613:	89 c2                	mov    %eax,%edx
f011a615:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a61b:	01 d0                	add    %edx,%eax
f011a61d:	48                   	dec    %eax
f011a61e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a624:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a62a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a62f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a635:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a63b:	29 d0                	sub    %edx,%eax
f011a63d:	01 d8                	add    %ebx,%eax
f011a63f:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a644:	39 c1                	cmp    %eax,%ecx
f011a646:	74 17                	je     f011a65f <test_kmalloc_bestfit1+0x584>
f011a648:	83 ec 04             	sub    $0x4,%esp
f011a64b:	68 74 b7 13 f0       	push   $0xf013b774
f011a650:	68 b8 01 00 00       	push   $0x1b8
f011a655:	68 5a b3 13 f0       	push   $0xf013b35a
f011a65a:	e8 a6 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a65f:	e8 64 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a664:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a667:	74 17                	je     f011a680 <test_kmalloc_bestfit1+0x5a5>
f011a669:	83 ec 04             	sub    $0x4,%esp
f011a66c:	68 74 b3 13 f0       	push   $0xf013b374
f011a671:	68 b9 01 00 00       	push   $0x1b9
f011a676:	68 5a b3 13 f0       	push   $0xf013b35a
f011a67b:	e8 85 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a680:	e8 18 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a685:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a688:	29 c2                	sub    %eax,%edx
f011a68a:	89 d0                	mov    %edx,%eax
f011a68c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a691:	74 17                	je     f011a6aa <test_kmalloc_bestfit1+0x5cf>
f011a693:	83 ec 04             	sub    $0x4,%esp
f011a696:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a69b:	68 ba 01 00 00       	push   $0x1ba
f011a6a0:	68 5a b3 13 f0       	push   $0xf013b35a
f011a6a5:	e8 5b 5b fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6aa:	e8 ee 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a6af:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6b2:	e8 11 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a6b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a6ba:	83 ec 0c             	sub    $0xc,%esp
f011a6bd:	68 00 fc 0f 00       	push   $0xffc00
f011a6c2:	e8 be d1 fe ff       	call   f0107885 <kmalloc>
f011a6c7:	83 c4 10             	add    $0x10,%esp
f011a6ca:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a6d0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a6d6:	89 c1                	mov    %eax,%ecx
f011a6d8:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a6df:	10 00 00 
f011a6e2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a6e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6ed:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a6f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6fe:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a704:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a70a:	29 d0                	sub    %edx,%eax
f011a70c:	89 c3                	mov    %eax,%ebx
f011a70e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a715:	10 00 00 
f011a718:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a71d:	0f b6 d0             	movzbl %al,%edx
f011a720:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a726:	01 d0                	add    %edx,%eax
f011a728:	48                   	dec    %eax
f011a729:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a72f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a735:	ba 00 00 00 00       	mov    $0x0,%edx
f011a73a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a740:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a746:	29 d0                	sub    %edx,%eax
f011a748:	01 c3                	add    %eax,%ebx
f011a74a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a751:	10 00 00 
f011a754:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a759:	0f b6 c0             	movzbl %al,%eax
f011a75c:	c1 e0 04             	shl    $0x4,%eax
f011a75f:	89 c2                	mov    %eax,%edx
f011a761:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a767:	01 d0                	add    %edx,%eax
f011a769:	48                   	dec    %eax
f011a76a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a770:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a776:	ba 00 00 00 00       	mov    $0x0,%edx
f011a77b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a781:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a787:	29 d0                	sub    %edx,%eax
f011a789:	01 d8                	add    %ebx,%eax
f011a78b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a790:	39 c1                	cmp    %eax,%ecx
f011a792:	74 17                	je     f011a7ab <test_kmalloc_bestfit1+0x6d0>
f011a794:	83 ec 04             	sub    $0x4,%esp
f011a797:	68 74 b7 13 f0       	push   $0xf013b774
f011a79c:	68 c0 01 00 00       	push   $0x1c0
f011a7a1:	68 5a b3 13 f0       	push   $0xf013b35a
f011a7a6:	e8 5a 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7ab:	e8 18 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a7b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7b3:	74 17                	je     f011a7cc <test_kmalloc_bestfit1+0x6f1>
f011a7b5:	83 ec 04             	sub    $0x4,%esp
f011a7b8:	68 74 b3 13 f0       	push   $0xf013b374
f011a7bd:	68 c1 01 00 00       	push   $0x1c1
f011a7c2:	68 5a b3 13 f0       	push   $0xf013b35a
f011a7c7:	e8 39 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a7cc:	e8 cc 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a7d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7d4:	29 c2                	sub    %eax,%edx
f011a7d6:	89 d0                	mov    %edx,%eax
f011a7d8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a7dd:	74 17                	je     f011a7f6 <test_kmalloc_bestfit1+0x71b>
f011a7df:	83 ec 04             	sub    $0x4,%esp
f011a7e2:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a7e7:	68 c2 01 00 00       	push   $0x1c2
f011a7ec:	68 5a b3 13 f0       	push   $0xf013b35a
f011a7f1:	e8 0f 5a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7f6:	e8 a2 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a7fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7fe:	e8 c5 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a803:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a806:	83 ec 0c             	sub    $0xc,%esp
f011a809:	68 00 fc 0f 00       	push   $0xffc00
f011a80e:	e8 72 d0 fe ff       	call   f0107885 <kmalloc>
f011a813:	83 c4 10             	add    $0x10,%esp
f011a816:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a81c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a822:	89 c1                	mov    %eax,%ecx
f011a824:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a82b:	10 00 00 
f011a82e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a834:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a839:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a83f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a845:	ba 00 00 00 00       	mov    $0x0,%edx
f011a84a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a850:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a856:	29 d0                	sub    %edx,%eax
f011a858:	89 c3                	mov    %eax,%ebx
f011a85a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a861:	10 00 00 
f011a864:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a869:	0f b6 d0             	movzbl %al,%edx
f011a86c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a872:	01 d0                	add    %edx,%eax
f011a874:	48                   	dec    %eax
f011a875:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a87b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a881:	ba 00 00 00 00       	mov    $0x0,%edx
f011a886:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a88c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a892:	29 d0                	sub    %edx,%eax
f011a894:	01 c3                	add    %eax,%ebx
f011a896:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a89d:	10 00 00 
f011a8a0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a8a5:	0f b6 c0             	movzbl %al,%eax
f011a8a8:	c1 e0 04             	shl    $0x4,%eax
f011a8ab:	89 c2                	mov    %eax,%edx
f011a8ad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a8b3:	01 d0                	add    %edx,%eax
f011a8b5:	48                   	dec    %eax
f011a8b6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a8bc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a8c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8c7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a8cd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a8d3:	29 d0                	sub    %edx,%eax
f011a8d5:	01 d8                	add    %ebx,%eax
f011a8d7:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a8dc:	39 c1                	cmp    %eax,%ecx
f011a8de:	74 17                	je     f011a8f7 <test_kmalloc_bestfit1+0x81c>
f011a8e0:	83 ec 04             	sub    $0x4,%esp
f011a8e3:	68 74 b7 13 f0       	push   $0xf013b774
f011a8e8:	68 c8 01 00 00       	push   $0x1c8
f011a8ed:	68 5a b3 13 f0       	push   $0xf013b35a
f011a8f2:	e8 0e 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8f7:	e8 cc 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a8fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8ff:	74 17                	je     f011a918 <test_kmalloc_bestfit1+0x83d>
f011a901:	83 ec 04             	sub    $0x4,%esp
f011a904:	68 74 b3 13 f0       	push   $0xf013b374
f011a909:	68 c9 01 00 00       	push   $0x1c9
f011a90e:	68 5a b3 13 f0       	push   $0xf013b35a
f011a913:	e8 ed 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a918:	e8 80 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a91d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a920:	29 c2                	sub    %eax,%edx
f011a922:	89 d0                	mov    %edx,%eax
f011a924:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a929:	74 17                	je     f011a942 <test_kmalloc_bestfit1+0x867>
f011a92b:	83 ec 04             	sub    $0x4,%esp
f011a92e:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011a933:	68 ca 01 00 00       	push   $0x1ca
f011a938:	68 5a b3 13 f0       	push   $0xf013b35a
f011a93d:	e8 c3 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a942:	e8 56 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a947:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a94a:	e8 79 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a94f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a952:	83 ec 0c             	sub    $0xc,%esp
f011a955:	68 00 fc 0f 00       	push   $0xffc00
f011a95a:	e8 26 cf fe ff       	call   f0107885 <kmalloc>
f011a95f:	83 c4 10             	add    $0x10,%esp
f011a962:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a968:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a96e:	89 c1                	mov    %eax,%ecx
f011a970:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a977:	10 00 00 
f011a97a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a980:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a985:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a98b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a991:	ba 00 00 00 00       	mov    $0x0,%edx
f011a996:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a99c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a9a2:	29 d0                	sub    %edx,%eax
f011a9a4:	89 c3                	mov    %eax,%ebx
f011a9a6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a9ad:	10 00 00 
f011a9b0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a9b5:	0f b6 d0             	movzbl %al,%edx
f011a9b8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a9be:	01 d0                	add    %edx,%eax
f011a9c0:	48                   	dec    %eax
f011a9c1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a9c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a9cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9d2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a9d8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a9de:	29 d0                	sub    %edx,%eax
f011a9e0:	01 c3                	add    %eax,%ebx
f011a9e2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a9e9:	10 00 00 
f011a9ec:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a9f1:	0f b6 c0             	movzbl %al,%eax
f011a9f4:	c1 e0 04             	shl    $0x4,%eax
f011a9f7:	89 c2                	mov    %eax,%edx
f011a9f9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a9ff:	01 d0                	add    %edx,%eax
f011aa01:	48                   	dec    %eax
f011aa02:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011aa08:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011aa0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa13:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011aa19:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011aa1f:	29 d0                	sub    %edx,%eax
f011aa21:	01 d8                	add    %ebx,%eax
f011aa23:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011aa28:	39 c1                	cmp    %eax,%ecx
f011aa2a:	74 17                	je     f011aa43 <test_kmalloc_bestfit1+0x968>
f011aa2c:	83 ec 04             	sub    $0x4,%esp
f011aa2f:	68 74 b7 13 f0       	push   $0xf013b774
f011aa34:	68 d0 01 00 00       	push   $0x1d0
f011aa39:	68 5a b3 13 f0       	push   $0xf013b35a
f011aa3e:	e8 c2 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa43:	e8 80 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa4b:	74 17                	je     f011aa64 <test_kmalloc_bestfit1+0x989>
f011aa4d:	83 ec 04             	sub    $0x4,%esp
f011aa50:	68 74 b3 13 f0       	push   $0xf013b374
f011aa55:	68 d1 01 00 00       	push   $0x1d1
f011aa5a:	68 5a b3 13 f0       	push   $0xf013b35a
f011aa5f:	e8 a1 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aa64:	e8 34 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa6c:	29 c2                	sub    %eax,%edx
f011aa6e:	89 d0                	mov    %edx,%eax
f011aa70:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa75:	74 17                	je     f011aa8e <test_kmalloc_bestfit1+0x9b3>
f011aa77:	83 ec 04             	sub    $0x4,%esp
f011aa7a:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011aa7f:	68 d2 01 00 00       	push   $0x1d2
f011aa84:	68 5a b3 13 f0       	push   $0xf013b35a
f011aa89:	e8 77 57 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aa8e:	e8 0a 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa93:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa96:	e8 2d 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011aa9e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011aaa4:	83 ec 0c             	sub    $0xc,%esp
f011aaa7:	50                   	push   %eax
f011aaa8:	e8 a3 ce fe ff       	call   f0107950 <kfree>
f011aaad:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aab0:	e8 13 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aab5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aab8:	74 17                	je     f011aad1 <test_kmalloc_bestfit1+0x9f6>
f011aaba:	83 ec 04             	sub    $0x4,%esp
f011aabd:	68 74 b3 13 f0       	push   $0xf013b374
f011aac2:	68 db 01 00 00       	push   $0x1db
f011aac7:	68 5a b3 13 f0       	push   $0xf013b35a
f011aacc:	e8 34 57 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aad1:	e8 c7 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aad6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aad9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aade:	74 17                	je     f011aaf7 <test_kmalloc_bestfit1+0xa1c>
f011aae0:	83 ec 04             	sub    $0x4,%esp
f011aae3:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011aae8:	68 dc 01 00 00       	push   $0x1dc
f011aaed:	68 5a b3 13 f0       	push   $0xf013b35a
f011aaf2:	e8 0e 57 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aaf7:	e8 a1 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aafc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aaff:	e8 c4 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab04:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011ab07:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ab0d:	83 ec 0c             	sub    $0xc,%esp
f011ab10:	50                   	push   %eax
f011ab11:	e8 3a ce fe ff       	call   f0107950 <kfree>
f011ab16:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab19:	e8 aa 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab21:	74 17                	je     f011ab3a <test_kmalloc_bestfit1+0xa5f>
f011ab23:	83 ec 04             	sub    $0x4,%esp
f011ab26:	68 74 b3 13 f0       	push   $0xf013b374
f011ab2b:	68 e2 01 00 00       	push   $0x1e2
f011ab30:	68 5a b3 13 f0       	push   $0xf013b35a
f011ab35:	e8 cb 56 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ab3a:	e8 5e 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab3f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab42:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ab47:	74 17                	je     f011ab60 <test_kmalloc_bestfit1+0xa85>
f011ab49:	83 ec 04             	sub    $0x4,%esp
f011ab4c:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011ab51:	68 e3 01 00 00       	push   $0x1e3
f011ab56:	68 5a b3 13 f0       	push   $0xf013b35a
f011ab5b:	e8 a5 56 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ab60:	e8 38 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab65:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab68:	e8 5b 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ab70:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ab76:	83 ec 0c             	sub    $0xc,%esp
f011ab79:	50                   	push   %eax
f011ab7a:	e8 d1 cd fe ff       	call   f0107950 <kfree>
f011ab7f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab82:	e8 41 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab8a:	74 17                	je     f011aba3 <test_kmalloc_bestfit1+0xac8>
f011ab8c:	83 ec 04             	sub    $0x4,%esp
f011ab8f:	68 74 b3 13 f0       	push   $0xf013b374
f011ab94:	68 e9 01 00 00       	push   $0x1e9
f011ab99:	68 5a b3 13 f0       	push   $0xf013b35a
f011ab9e:	e8 62 56 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aba3:	e8 f5 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aba8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011abab:	3d 00 01 00 00       	cmp    $0x100,%eax
f011abb0:	74 17                	je     f011abc9 <test_kmalloc_bestfit1+0xaee>
f011abb2:	83 ec 04             	sub    $0x4,%esp
f011abb5:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011abba:	68 ea 01 00 00       	push   $0x1ea
f011abbf:	68 5a b3 13 f0       	push   $0xf013b35a
f011abc4:	e8 3c 56 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011abc9:	e8 cf 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011abce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abd1:	e8 f2 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011abd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011abd9:	83 ec 0c             	sub    $0xc,%esp
f011abdc:	68 00 00 08 00       	push   $0x80000
f011abe1:	e8 9f cc fe ff       	call   f0107885 <kmalloc>
f011abe6:	83 c4 10             	add    $0x10,%esp
f011abe9:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011abef:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011abf5:	89 c1                	mov    %eax,%ecx
f011abf7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011abfe:	10 00 00 
f011ac01:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ac07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac0c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ac12:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ac18:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac1d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ac23:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ac29:	29 d0                	sub    %edx,%eax
f011ac2b:	89 c3                	mov    %eax,%ebx
f011ac2d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ac34:	10 00 00 
f011ac37:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ac3c:	0f b6 d0             	movzbl %al,%edx
f011ac3f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ac45:	01 d0                	add    %edx,%eax
f011ac47:	48                   	dec    %eax
f011ac48:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ac4e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ac54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac59:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ac5f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ac65:	29 d0                	sub    %edx,%eax
f011ac67:	01 c3                	add    %eax,%ebx
f011ac69:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ac70:	10 00 00 
f011ac73:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ac78:	0f b6 c0             	movzbl %al,%eax
f011ac7b:	c1 e0 04             	shl    $0x4,%eax
f011ac7e:	89 c2                	mov    %eax,%edx
f011ac80:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ac86:	01 d0                	add    %edx,%eax
f011ac88:	48                   	dec    %eax
f011ac89:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ac8f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ac95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac9a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011aca0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011aca6:	29 d0                	sub    %edx,%eax
f011aca8:	01 d8                	add    %ebx,%eax
f011acaa:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011acaf:	39 c1                	cmp    %eax,%ecx
f011acb1:	74 17                	je     f011acca <test_kmalloc_bestfit1+0xbef>
f011acb3:	83 ec 04             	sub    $0x4,%esp
f011acb6:	68 74 b7 13 f0       	push   $0xf013b774
f011acbb:	68 f3 01 00 00       	push   $0x1f3
f011acc0:	68 5a b3 13 f0       	push   $0xf013b35a
f011acc5:	e8 3b 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acca:	e8 f9 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011accf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acd2:	74 17                	je     f011aceb <test_kmalloc_bestfit1+0xc10>
f011acd4:	83 ec 04             	sub    $0x4,%esp
f011acd7:	68 74 b3 13 f0       	push   $0xf013b374
f011acdc:	68 f4 01 00 00       	push   $0x1f4
f011ace1:	68 5a b3 13 f0       	push   $0xf013b35a
f011ace6:	e8 1a 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011aceb:	e8 ad 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011acf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acf3:	29 c2                	sub    %eax,%edx
f011acf5:	89 d0                	mov    %edx,%eax
f011acf7:	3d 80 00 00 00       	cmp    $0x80,%eax
f011acfc:	74 17                	je     f011ad15 <test_kmalloc_bestfit1+0xc3a>
f011acfe:	83 ec 04             	sub    $0x4,%esp
f011ad01:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011ad06:	68 f5 01 00 00       	push   $0x1f5
f011ad0b:	68 5a b3 13 f0       	push   $0xf013b35a
f011ad10:	e8 f0 54 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ad15:	e8 83 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad1d:	e8 a6 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad22:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ad25:	83 ec 0c             	sub    $0xc,%esp
f011ad28:	68 00 fc 0f 00       	push   $0xffc00
f011ad2d:	e8 53 cb fe ff       	call   f0107885 <kmalloc>
f011ad32:	83 c4 10             	add    $0x10,%esp
f011ad35:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ad3b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ad41:	89 c1                	mov    %eax,%ecx
f011ad43:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ad4a:	10 00 00 
f011ad4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ad53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad58:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ad5e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ad64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad69:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ad6f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ad75:	29 d0                	sub    %edx,%eax
f011ad77:	89 c3                	mov    %eax,%ebx
f011ad79:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ad80:	10 00 00 
f011ad83:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ad88:	0f b6 d0             	movzbl %al,%edx
f011ad8b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ad91:	01 d0                	add    %edx,%eax
f011ad93:	48                   	dec    %eax
f011ad94:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ad9a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ada0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ada5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011adab:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011adb1:	29 d0                	sub    %edx,%eax
f011adb3:	01 c3                	add    %eax,%ebx
f011adb5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011adbc:	10 00 00 
f011adbf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011adc4:	0f b6 c0             	movzbl %al,%eax
f011adc7:	c1 e0 04             	shl    $0x4,%eax
f011adca:	89 c2                	mov    %eax,%edx
f011adcc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011add2:	01 d0                	add    %edx,%eax
f011add4:	48                   	dec    %eax
f011add5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011addb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ade1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011adec:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011adf2:	29 d0                	sub    %edx,%eax
f011adf4:	01 d8                	add    %ebx,%eax
f011adf6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011adfb:	39 c1                	cmp    %eax,%ecx
f011adfd:	74 17                	je     f011ae16 <test_kmalloc_bestfit1+0xd3b>
f011adff:	83 ec 04             	sub    $0x4,%esp
f011ae02:	68 74 b7 13 f0       	push   $0xf013b774
f011ae07:	68 fb 01 00 00       	push   $0x1fb
f011ae0c:	68 5a b3 13 f0       	push   $0xf013b35a
f011ae11:	e8 ef 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae16:	e8 ad 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae1e:	74 17                	je     f011ae37 <test_kmalloc_bestfit1+0xd5c>
f011ae20:	83 ec 04             	sub    $0x4,%esp
f011ae23:	68 74 b3 13 f0       	push   $0xf013b374
f011ae28:	68 fc 01 00 00       	push   $0x1fc
f011ae2d:	68 5a b3 13 f0       	push   $0xf013b35a
f011ae32:	e8 ce 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae37:	e8 61 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ae3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae3f:	29 c2                	sub    %eax,%edx
f011ae41:	89 d0                	mov    %edx,%eax
f011ae43:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae48:	74 17                	je     f011ae61 <test_kmalloc_bestfit1+0xd86>
f011ae4a:	83 ec 04             	sub    $0x4,%esp
f011ae4d:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011ae52:	68 fd 01 00 00       	push   $0x1fd
f011ae57:	68 5a b3 13 f0       	push   $0xf013b35a
f011ae5c:	e8 a4 53 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ae61:	e8 37 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ae66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae69:	e8 5a 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ae71:	83 ec 0c             	sub    $0xc,%esp
f011ae74:	68 00 fc 03 00       	push   $0x3fc00
f011ae79:	e8 07 ca fe ff       	call   f0107885 <kmalloc>
f011ae7e:	83 c4 10             	add    $0x10,%esp
f011ae81:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ae87:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ae8d:	89 c1                	mov    %eax,%ecx
f011ae8f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ae96:	10 00 00 
f011ae99:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ae9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aea4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011aeaa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011aeb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeb5:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011aebb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011aec1:	29 d0                	sub    %edx,%eax
f011aec3:	89 c3                	mov    %eax,%ebx
f011aec5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011aecc:	10 00 00 
f011aecf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011aed4:	0f b6 d0             	movzbl %al,%edx
f011aed7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011aedd:	01 d0                	add    %edx,%eax
f011aedf:	48                   	dec    %eax
f011aee0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011aee6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011aeec:	ba 00 00 00 00       	mov    $0x0,%edx
f011aef1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011aef7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011aefd:	29 d0                	sub    %edx,%eax
f011aeff:	01 c3                	add    %eax,%ebx
f011af01:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011af08:	10 00 00 
f011af0b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011af10:	0f b6 c0             	movzbl %al,%eax
f011af13:	c1 e0 04             	shl    $0x4,%eax
f011af16:	89 c2                	mov    %eax,%edx
f011af18:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011af1e:	01 d0                	add    %edx,%eax
f011af20:	48                   	dec    %eax
f011af21:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011af27:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011af2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011af32:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011af38:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011af3e:	29 d0                	sub    %edx,%eax
f011af40:	01 d8                	add    %ebx,%eax
f011af42:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011af47:	39 c1                	cmp    %eax,%ecx
f011af49:	74 17                	je     f011af62 <test_kmalloc_bestfit1+0xe87>
f011af4b:	83 ec 04             	sub    $0x4,%esp
f011af4e:	68 74 b7 13 f0       	push   $0xf013b774
f011af53:	68 03 02 00 00       	push   $0x203
f011af58:	68 5a b3 13 f0       	push   $0xf013b35a
f011af5d:	e8 a3 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af62:	e8 61 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af6a:	74 17                	je     f011af83 <test_kmalloc_bestfit1+0xea8>
f011af6c:	83 ec 04             	sub    $0x4,%esp
f011af6f:	68 74 b3 13 f0       	push   $0xf013b374
f011af74:	68 04 02 00 00       	push   $0x204
f011af79:	68 5a b3 13 f0       	push   $0xf013b35a
f011af7e:	e8 82 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011af83:	e8 15 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011af88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af8b:	29 c2                	sub    %eax,%edx
f011af8d:	89 d0                	mov    %edx,%eax
f011af8f:	83 f8 40             	cmp    $0x40,%eax
f011af92:	74 17                	je     f011afab <test_kmalloc_bestfit1+0xed0>
f011af94:	83 ec 04             	sub    $0x4,%esp
f011af97:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011af9c:	68 05 02 00 00       	push   $0x205
f011afa1:	68 5a b3 13 f0       	push   $0xf013b35a
f011afa6:	e8 5a 52 fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011afab:	e8 ed 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011afb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afb3:	e8 10 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011afb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011afbb:	83 ec 0c             	sub    $0xc,%esp
f011afbe:	68 00 fc 3f 00       	push   $0x3ffc00
f011afc3:	e8 bd c8 fe ff       	call   f0107885 <kmalloc>
f011afc8:	83 c4 10             	add    $0x10,%esp
f011afcb:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011afd1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011afd7:	89 c1                	mov    %eax,%ecx
f011afd9:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011afe0:	10 00 00 
f011afe3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011afe9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afee:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011aff4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011affa:	ba 00 00 00 00       	mov    $0x0,%edx
f011afff:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b005:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b00b:	29 d0                	sub    %edx,%eax
f011b00d:	89 c3                	mov    %eax,%ebx
f011b00f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b016:	10 00 00 
f011b019:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b01e:	0f b6 d0             	movzbl %al,%edx
f011b021:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b027:	01 d0                	add    %edx,%eax
f011b029:	48                   	dec    %eax
f011b02a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b030:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b036:	ba 00 00 00 00       	mov    $0x0,%edx
f011b03b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b041:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b047:	29 d0                	sub    %edx,%eax
f011b049:	01 c3                	add    %eax,%ebx
f011b04b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b052:	10 00 00 
f011b055:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b05a:	0f b6 c0             	movzbl %al,%eax
f011b05d:	c1 e0 04             	shl    $0x4,%eax
f011b060:	89 c2                	mov    %eax,%edx
f011b062:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b068:	01 d0                	add    %edx,%eax
f011b06a:	48                   	dec    %eax
f011b06b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b071:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b077:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b082:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b088:	29 d0                	sub    %edx,%eax
f011b08a:	01 d8                	add    %ebx,%eax
f011b08c:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b091:	39 c1                	cmp    %eax,%ecx
f011b093:	74 17                	je     f011b0ac <test_kmalloc_bestfit1+0xfd1>
f011b095:	83 ec 04             	sub    $0x4,%esp
f011b098:	68 74 b7 13 f0       	push   $0xf013b774
f011b09d:	68 0b 02 00 00       	push   $0x20b
f011b0a2:	68 5a b3 13 f0       	push   $0xf013b35a
f011b0a7:	e8 59 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0ac:	e8 17 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0b4:	74 17                	je     f011b0cd <test_kmalloc_bestfit1+0xff2>
f011b0b6:	83 ec 04             	sub    $0x4,%esp
f011b0b9:	68 74 b3 13 f0       	push   $0xf013b374
f011b0be:	68 0c 02 00 00       	push   $0x20c
f011b0c3:	68 5a b3 13 f0       	push   $0xf013b35a
f011b0c8:	e8 38 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b0cd:	e8 cb 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b0d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0d5:	29 c2                	sub    %eax,%edx
f011b0d7:	89 d0                	mov    %edx,%eax
f011b0d9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b0de:	74 17                	je     f011b0f7 <test_kmalloc_bestfit1+0x101c>
f011b0e0:	83 ec 04             	sub    $0x4,%esp
f011b0e3:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b0e8:	68 0d 02 00 00       	push   $0x20d
f011b0ed:	68 5a b3 13 f0       	push   $0xf013b35a
f011b0f2:	e8 0e 51 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b0f7:	e8 a1 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b0fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0ff:	e8 c4 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b104:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b107:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b10d:	83 ec 0c             	sub    $0xc,%esp
f011b110:	50                   	push   %eax
f011b111:	e8 3a c8 fe ff       	call   f0107950 <kfree>
f011b116:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b119:	e8 aa 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b11e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b121:	74 17                	je     f011b13a <test_kmalloc_bestfit1+0x105f>
f011b123:	83 ec 04             	sub    $0x4,%esp
f011b126:	68 74 b3 13 f0       	push   $0xf013b374
f011b12b:	68 16 02 00 00       	push   $0x216
f011b130:	68 5a b3 13 f0       	push   $0xf013b35a
f011b135:	e8 cb 50 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b13a:	e8 5e 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b13f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b142:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b147:	74 17                	je     f011b160 <test_kmalloc_bestfit1+0x1085>
f011b149:	83 ec 04             	sub    $0x4,%esp
f011b14c:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011b151:	68 17 02 00 00       	push   $0x217
f011b156:	68 5a b3 13 f0       	push   $0xf013b35a
f011b15b:	e8 a5 50 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b160:	e8 38 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b165:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b168:	e8 5b 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b16d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b170:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b176:	83 ec 0c             	sub    $0xc,%esp
f011b179:	50                   	push   %eax
f011b17a:	e8 d1 c7 fe ff       	call   f0107950 <kfree>
f011b17f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b182:	e8 41 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b187:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b18a:	74 17                	je     f011b1a3 <test_kmalloc_bestfit1+0x10c8>
f011b18c:	83 ec 04             	sub    $0x4,%esp
f011b18f:	68 74 b3 13 f0       	push   $0xf013b374
f011b194:	68 1d 02 00 00       	push   $0x21d
f011b199:	68 5a b3 13 f0       	push   $0xf013b35a
f011b19e:	e8 62 50 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b1a3:	e8 f5 19 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b1a8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b1ab:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b1b0:	74 17                	je     f011b1c9 <test_kmalloc_bestfit1+0x10ee>
f011b1b2:	83 ec 04             	sub    $0x4,%esp
f011b1b5:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011b1ba:	68 1e 02 00 00       	push   $0x21e
f011b1bf:	68 5a b3 13 f0       	push   $0xf013b35a
f011b1c4:	e8 3c 50 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b1c9:	e8 cf 19 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b1ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1d1:	e8 f2 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b1d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b1d9:	83 ec 0c             	sub    $0xc,%esp
f011b1dc:	68 00 fc 1f 00       	push   $0x1ffc00
f011b1e1:	e8 9f c6 fe ff       	call   f0107885 <kmalloc>
f011b1e6:	83 c4 10             	add    $0x10,%esp
f011b1e9:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b1ef:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b1f5:	89 c1                	mov    %eax,%ecx
f011b1f7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b1fe:	10 00 00 
f011b201:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b207:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b20c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b212:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b218:	ba 00 00 00 00       	mov    $0x0,%edx
f011b21d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b223:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b229:	29 d0                	sub    %edx,%eax
f011b22b:	89 c3                	mov    %eax,%ebx
f011b22d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b234:	10 00 00 
f011b237:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b23c:	0f b6 d0             	movzbl %al,%edx
f011b23f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b245:	01 d0                	add    %edx,%eax
f011b247:	48                   	dec    %eax
f011b248:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b24e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b254:	ba 00 00 00 00       	mov    $0x0,%edx
f011b259:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b25f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b265:	29 d0                	sub    %edx,%eax
f011b267:	01 c3                	add    %eax,%ebx
f011b269:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b270:	10 00 00 
f011b273:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b278:	0f b6 c0             	movzbl %al,%eax
f011b27b:	c1 e0 04             	shl    $0x4,%eax
f011b27e:	89 c2                	mov    %eax,%edx
f011b280:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b286:	01 d0                	add    %edx,%eax
f011b288:	48                   	dec    %eax
f011b289:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b28f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b295:	ba 00 00 00 00       	mov    $0x0,%edx
f011b29a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b2a0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b2a6:	29 d0                	sub    %edx,%eax
f011b2a8:	01 d8                	add    %ebx,%eax
f011b2aa:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b2af:	39 c1                	cmp    %eax,%ecx
f011b2b1:	74 17                	je     f011b2ca <test_kmalloc_bestfit1+0x11ef>
f011b2b3:	83 ec 04             	sub    $0x4,%esp
f011b2b6:	68 74 b7 13 f0       	push   $0xf013b774
f011b2bb:	68 27 02 00 00       	push   $0x227
f011b2c0:	68 5a b3 13 f0       	push   $0xf013b35a
f011b2c5:	e8 3b 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2ca:	e8 f9 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2d2:	74 17                	je     f011b2eb <test_kmalloc_bestfit1+0x1210>
f011b2d4:	83 ec 04             	sub    $0x4,%esp
f011b2d7:	68 74 b3 13 f0       	push   $0xf013b374
f011b2dc:	68 28 02 00 00       	push   $0x228
f011b2e1:	68 5a b3 13 f0       	push   $0xf013b35a
f011b2e6:	e8 1a 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b2eb:	e8 ad 18 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b2f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2f3:	29 c2                	sub    %eax,%edx
f011b2f5:	89 d0                	mov    %edx,%eax
f011b2f7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b2fc:	74 17                	je     f011b315 <test_kmalloc_bestfit1+0x123a>
f011b2fe:	83 ec 04             	sub    $0x4,%esp
f011b301:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b306:	68 29 02 00 00       	push   $0x229
f011b30b:	68 5a b3 13 f0       	push   $0xf013b35a
f011b310:	e8 f0 4e fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b315:	83 ec 0c             	sub    $0xc,%esp
f011b318:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b31d:	e8 ec 59 fe ff       	call   f0100d0e <cprintf>
f011b322:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b325:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b32a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b32d:	5b                   	pop    %ebx
f011b32e:	5f                   	pop    %edi
f011b32f:	5d                   	pop    %ebp
f011b330:	c3                   	ret    

f011b331 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b331:	55                   	push   %ebp
f011b332:	89 e5                	mov    %esp,%ebp
f011b334:	57                   	push   %edi
f011b335:	53                   	push   %ebx
f011b336:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b33c:	83 ec 0c             	sub    $0xc,%esp
f011b33f:	68 9c b2 13 f0       	push   $0xf013b29c
f011b344:	e8 c5 59 fe ff       	call   f0100d0e <cprintf>
f011b349:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b34c:	83 ec 0c             	sub    $0xc,%esp
f011b34f:	68 cc b2 13 f0       	push   $0xf013b2cc
f011b354:	e8 b5 59 fe ff       	call   f0100d0e <cprintf>
f011b359:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b35c:	83 ec 0c             	sub    $0xc,%esp
f011b35f:	68 9c b2 13 f0       	push   $0xf013b29c
f011b364:	e8 a5 59 fe ff       	call   f0100d0e <cprintf>
f011b369:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b36c:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b372:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b377:	b8 00 00 00 00       	mov    $0x0,%eax
f011b37c:	89 d7                	mov    %edx,%edi
f011b37e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b380:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b387:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b38a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b38f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b392:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b395:	ba 00 00 00 00       	mov    $0x0,%edx
f011b39a:	f7 75 f4             	divl   -0xc(%ebp)
f011b39d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b3a0:	29 d0                	sub    %edx,%eax
f011b3a2:	89 c1                	mov    %eax,%ecx
f011b3a4:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b3ab:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b3b0:	0f b6 d0             	movzbl %al,%edx
f011b3b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b3b6:	01 d0                	add    %edx,%eax
f011b3b8:	48                   	dec    %eax
f011b3b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b3bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b3bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3c4:	f7 75 ec             	divl   -0x14(%ebp)
f011b3c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b3ca:	29 d0                	sub    %edx,%eax
f011b3cc:	01 c1                	add    %eax,%ecx
f011b3ce:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b3d5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b3da:	0f b6 c0             	movzbl %al,%eax
f011b3dd:	c1 e0 04             	shl    $0x4,%eax
f011b3e0:	89 c2                	mov    %eax,%edx
f011b3e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b3e5:	01 d0                	add    %edx,%eax
f011b3e7:	48                   	dec    %eax
f011b3e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b3eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b3ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3f3:	f7 75 e4             	divl   -0x1c(%ebp)
f011b3f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b3f9:	29 d0                	sub    %edx,%eax
f011b3fb:	01 c8                	add    %ecx,%eax
f011b3fd:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b402:	29 c2                	sub    %eax,%edx
f011b404:	89 d0                	mov    %edx,%eax
f011b406:	83 ec 0c             	sub    $0xc,%esp
f011b409:	50                   	push   %eax
f011b40a:	e8 76 c4 fe ff       	call   f0107885 <kmalloc>
f011b40f:	83 c4 10             	add    $0x10,%esp
f011b412:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b418:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b41e:	85 c0                	test   %eax,%eax
f011b420:	74 17                	je     f011b439 <test_kmalloc_bestfit2+0x108>
f011b422:	83 ec 04             	sub    $0x4,%esp
f011b425:	68 0c b8 13 f0       	push   $0xf013b80c
f011b42a:	68 3f 02 00 00       	push   $0x23f
f011b42f:	68 5a b3 13 f0       	push   $0xf013b35a
f011b434:	e8 cc 4d fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b439:	e8 5f 17 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b43e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b441:	e8 82 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b446:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b449:	83 ec 0c             	sub    $0xc,%esp
f011b44c:	68 00 fc 1f 00       	push   $0x1ffc00
f011b451:	e8 2f c4 fe ff       	call   f0107885 <kmalloc>
f011b456:	83 c4 10             	add    $0x10,%esp
f011b459:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b45f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b465:	89 c1                	mov    %eax,%ecx
f011b467:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b46e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b471:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b476:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b479:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b47c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b481:	f7 75 d4             	divl   -0x2c(%ebp)
f011b484:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b487:	29 d0                	sub    %edx,%eax
f011b489:	89 c3                	mov    %eax,%ebx
f011b48b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b492:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b497:	0f b6 d0             	movzbl %al,%edx
f011b49a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b49d:	01 d0                	add    %edx,%eax
f011b49f:	48                   	dec    %eax
f011b4a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b4a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b4a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4ab:	f7 75 cc             	divl   -0x34(%ebp)
f011b4ae:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b4b1:	29 d0                	sub    %edx,%eax
f011b4b3:	01 c3                	add    %eax,%ebx
f011b4b5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b4bc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b4c1:	0f b6 c0             	movzbl %al,%eax
f011b4c4:	c1 e0 04             	shl    $0x4,%eax
f011b4c7:	89 c2                	mov    %eax,%edx
f011b4c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b4cc:	01 d0                	add    %edx,%eax
f011b4ce:	48                   	dec    %eax
f011b4cf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b4d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b4d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4da:	f7 75 c4             	divl   -0x3c(%ebp)
f011b4dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b4e0:	29 d0                	sub    %edx,%eax
f011b4e2:	01 d8                	add    %ebx,%eax
f011b4e4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b4e9:	39 c1                	cmp    %eax,%ecx
f011b4eb:	74 17                	je     f011b504 <test_kmalloc_bestfit2+0x1d3>
f011b4ed:	83 ec 04             	sub    $0x4,%esp
f011b4f0:	68 74 b7 13 f0       	push   $0xf013b774
f011b4f5:	68 49 02 00 00       	push   $0x249
f011b4fa:	68 5a b3 13 f0       	push   $0xf013b35a
f011b4ff:	e8 01 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b504:	e8 bf 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b509:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b50c:	74 17                	je     f011b525 <test_kmalloc_bestfit2+0x1f4>
f011b50e:	83 ec 04             	sub    $0x4,%esp
f011b511:	68 74 b3 13 f0       	push   $0xf013b374
f011b516:	68 4a 02 00 00       	push   $0x24a
f011b51b:	68 5a b3 13 f0       	push   $0xf013b35a
f011b520:	e8 e0 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b525:	e8 73 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b52a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b52d:	29 c2                	sub    %eax,%edx
f011b52f:	89 d0                	mov    %edx,%eax
f011b531:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b536:	74 17                	je     f011b54f <test_kmalloc_bestfit2+0x21e>
f011b538:	83 ec 04             	sub    $0x4,%esp
f011b53b:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b540:	68 4b 02 00 00       	push   $0x24b
f011b545:	68 5a b3 13 f0       	push   $0xf013b35a
f011b54a:	e8 b6 4c fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b54f:	e8 49 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b554:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b557:	e8 6c 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b55c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b55f:	83 ec 0c             	sub    $0xc,%esp
f011b562:	68 00 fc 1f 00       	push   $0x1ffc00
f011b567:	e8 19 c3 fe ff       	call   f0107885 <kmalloc>
f011b56c:	83 c4 10             	add    $0x10,%esp
f011b56f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b575:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b57b:	89 c1                	mov    %eax,%ecx
f011b57d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b584:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b587:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b58c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b58f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b592:	ba 00 00 00 00       	mov    $0x0,%edx
f011b597:	f7 75 bc             	divl   -0x44(%ebp)
f011b59a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b59d:	29 d0                	sub    %edx,%eax
f011b59f:	89 c3                	mov    %eax,%ebx
f011b5a1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b5a8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b5ad:	0f b6 d0             	movzbl %al,%edx
f011b5b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b5b3:	01 d0                	add    %edx,%eax
f011b5b5:	48                   	dec    %eax
f011b5b6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b5b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b5bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5c1:	f7 75 b4             	divl   -0x4c(%ebp)
f011b5c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b5c7:	29 d0                	sub    %edx,%eax
f011b5c9:	01 c3                	add    %eax,%ebx
f011b5cb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b5d2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b5d7:	0f b6 c0             	movzbl %al,%eax
f011b5da:	c1 e0 04             	shl    $0x4,%eax
f011b5dd:	89 c2                	mov    %eax,%edx
f011b5df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b5e2:	01 d0                	add    %edx,%eax
f011b5e4:	48                   	dec    %eax
f011b5e5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b5e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b5eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5f0:	f7 75 ac             	divl   -0x54(%ebp)
f011b5f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b5f6:	29 d0                	sub    %edx,%eax
f011b5f8:	01 d8                	add    %ebx,%eax
f011b5fa:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b5ff:	39 c1                	cmp    %eax,%ecx
f011b601:	74 17                	je     f011b61a <test_kmalloc_bestfit2+0x2e9>
f011b603:	83 ec 04             	sub    $0x4,%esp
f011b606:	68 74 b7 13 f0       	push   $0xf013b774
f011b60b:	68 51 02 00 00       	push   $0x251
f011b610:	68 5a b3 13 f0       	push   $0xf013b35a
f011b615:	e8 eb 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b61a:	e8 a9 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b61f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b622:	74 17                	je     f011b63b <test_kmalloc_bestfit2+0x30a>
f011b624:	83 ec 04             	sub    $0x4,%esp
f011b627:	68 74 b3 13 f0       	push   $0xf013b374
f011b62c:	68 52 02 00 00       	push   $0x252
f011b631:	68 5a b3 13 f0       	push   $0xf013b35a
f011b636:	e8 ca 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b63b:	e8 5d 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b640:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b643:	29 c2                	sub    %eax,%edx
f011b645:	89 d0                	mov    %edx,%eax
f011b647:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b64c:	74 17                	je     f011b665 <test_kmalloc_bestfit2+0x334>
f011b64e:	83 ec 04             	sub    $0x4,%esp
f011b651:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b656:	68 53 02 00 00       	push   $0x253
f011b65b:	68 5a b3 13 f0       	push   $0xf013b35a
f011b660:	e8 a0 4b fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b665:	e8 33 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b66a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b66d:	e8 56 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b672:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b675:	83 ec 0c             	sub    $0xc,%esp
f011b678:	68 00 08 00 00       	push   $0x800
f011b67d:	e8 03 c2 fe ff       	call   f0107885 <kmalloc>
f011b682:	83 c4 10             	add    $0x10,%esp
f011b685:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b68b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b691:	89 c1                	mov    %eax,%ecx
f011b693:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b69a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b69d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6a2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b6a5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b6a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ad:	f7 75 a4             	divl   -0x5c(%ebp)
f011b6b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b6b3:	29 d0                	sub    %edx,%eax
f011b6b5:	89 c3                	mov    %eax,%ebx
f011b6b7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b6be:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b6c3:	0f b6 d0             	movzbl %al,%edx
f011b6c6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b6c9:	01 d0                	add    %edx,%eax
f011b6cb:	48                   	dec    %eax
f011b6cc:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b6cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b6d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6d7:	f7 75 9c             	divl   -0x64(%ebp)
f011b6da:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b6dd:	29 d0                	sub    %edx,%eax
f011b6df:	01 c3                	add    %eax,%ebx
f011b6e1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b6e8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b6ed:	0f b6 c0             	movzbl %al,%eax
f011b6f0:	c1 e0 04             	shl    $0x4,%eax
f011b6f3:	89 c2                	mov    %eax,%edx
f011b6f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b6f8:	01 d0                	add    %edx,%eax
f011b6fa:	48                   	dec    %eax
f011b6fb:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b6fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b701:	ba 00 00 00 00       	mov    $0x0,%edx
f011b706:	f7 75 94             	divl   -0x6c(%ebp)
f011b709:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b70c:	29 d0                	sub    %edx,%eax
f011b70e:	01 d8                	add    %ebx,%eax
f011b710:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b715:	39 c1                	cmp    %eax,%ecx
f011b717:	74 17                	je     f011b730 <test_kmalloc_bestfit2+0x3ff>
f011b719:	83 ec 04             	sub    $0x4,%esp
f011b71c:	68 74 b7 13 f0       	push   $0xf013b774
f011b721:	68 59 02 00 00       	push   $0x259
f011b726:	68 5a b3 13 f0       	push   $0xf013b35a
f011b72b:	e8 d5 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b730:	e8 93 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b735:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b738:	74 17                	je     f011b751 <test_kmalloc_bestfit2+0x420>
f011b73a:	83 ec 04             	sub    $0x4,%esp
f011b73d:	68 74 b3 13 f0       	push   $0xf013b374
f011b742:	68 5a 02 00 00       	push   $0x25a
f011b747:	68 5a b3 13 f0       	push   $0xf013b35a
f011b74c:	e8 b4 4a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b751:	e8 47 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b756:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b759:	29 c2                	sub    %eax,%edx
f011b75b:	89 d0                	mov    %edx,%eax
f011b75d:	83 f8 01             	cmp    $0x1,%eax
f011b760:	74 17                	je     f011b779 <test_kmalloc_bestfit2+0x448>
f011b762:	83 ec 04             	sub    $0x4,%esp
f011b765:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b76a:	68 5b 02 00 00       	push   $0x25b
f011b76f:	68 5a b3 13 f0       	push   $0xf013b35a
f011b774:	e8 8c 4a fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b779:	e8 1f 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b77e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b781:	e8 42 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b786:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b789:	83 ec 0c             	sub    $0xc,%esp
f011b78c:	68 00 08 00 00       	push   $0x800
f011b791:	e8 ef c0 fe ff       	call   f0107885 <kmalloc>
f011b796:	83 c4 10             	add    $0x10,%esp
f011b799:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b79f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b7a5:	89 c1                	mov    %eax,%ecx
f011b7a7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b7ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b7b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7b6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b7b9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b7bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7c1:	f7 75 8c             	divl   -0x74(%ebp)
f011b7c4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b7c7:	29 d0                	sub    %edx,%eax
f011b7c9:	89 c3                	mov    %eax,%ebx
f011b7cb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b7d2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b7d7:	0f b6 d0             	movzbl %al,%edx
f011b7da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b7dd:	01 d0                	add    %edx,%eax
f011b7df:	48                   	dec    %eax
f011b7e0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b7e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b7e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7eb:	f7 75 84             	divl   -0x7c(%ebp)
f011b7ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b7f1:	29 d0                	sub    %edx,%eax
f011b7f3:	01 c3                	add    %eax,%ebx
f011b7f5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b7fc:	10 00 00 
f011b7ff:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b804:	0f b6 c0             	movzbl %al,%eax
f011b807:	c1 e0 04             	shl    $0x4,%eax
f011b80a:	89 c2                	mov    %eax,%edx
f011b80c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b812:	01 d0                	add    %edx,%eax
f011b814:	48                   	dec    %eax
f011b815:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b81b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b821:	ba 00 00 00 00       	mov    $0x0,%edx
f011b826:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b82c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b832:	29 d0                	sub    %edx,%eax
f011b834:	01 d8                	add    %ebx,%eax
f011b836:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b83b:	39 c1                	cmp    %eax,%ecx
f011b83d:	74 17                	je     f011b856 <test_kmalloc_bestfit2+0x525>
f011b83f:	83 ec 04             	sub    $0x4,%esp
f011b842:	68 74 b7 13 f0       	push   $0xf013b774
f011b847:	68 61 02 00 00       	push   $0x261
f011b84c:	68 5a b3 13 f0       	push   $0xf013b35a
f011b851:	e8 af 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b856:	e8 6d 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b85b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b85e:	74 17                	je     f011b877 <test_kmalloc_bestfit2+0x546>
f011b860:	83 ec 04             	sub    $0x4,%esp
f011b863:	68 74 b3 13 f0       	push   $0xf013b374
f011b868:	68 62 02 00 00       	push   $0x262
f011b86d:	68 5a b3 13 f0       	push   $0xf013b35a
f011b872:	e8 8e 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b877:	e8 21 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b87c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b87f:	29 c2                	sub    %eax,%edx
f011b881:	89 d0                	mov    %edx,%eax
f011b883:	83 f8 01             	cmp    $0x1,%eax
f011b886:	74 17                	je     f011b89f <test_kmalloc_bestfit2+0x56e>
f011b888:	83 ec 04             	sub    $0x4,%esp
f011b88b:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b890:	68 63 02 00 00       	push   $0x263
f011b895:	68 5a b3 13 f0       	push   $0xf013b35a
f011b89a:	e8 66 49 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b89f:	e8 f9 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b8a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8a7:	e8 1c 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b8ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b8af:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b8b5:	83 ec 0c             	sub    $0xc,%esp
f011b8b8:	50                   	push   %eax
f011b8b9:	e8 92 c0 fe ff       	call   f0107950 <kfree>
f011b8be:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8c1:	e8 02 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b8c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b8c9:	74 17                	je     f011b8e2 <test_kmalloc_bestfit2+0x5b1>
f011b8cb:	83 ec 04             	sub    $0x4,%esp
f011b8ce:	68 74 b3 13 f0       	push   $0xf013b374
f011b8d3:	68 69 02 00 00       	push   $0x269
f011b8d8:	68 5a b3 13 f0       	push   $0xf013b35a
f011b8dd:	e8 23 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b8e2:	e8 b6 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b8e7:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b8ea:	83 f8 01             	cmp    $0x1,%eax
f011b8ed:	74 17                	je     f011b906 <test_kmalloc_bestfit2+0x5d5>
f011b8ef:	83 ec 04             	sub    $0x4,%esp
f011b8f2:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011b8f7:	68 6a 02 00 00       	push   $0x26a
f011b8fc:	68 5a b3 13 f0       	push   $0xf013b35a
f011b901:	e8 ff 48 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b906:	e8 92 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b90b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b90e:	e8 b5 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b913:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b916:	83 ec 0c             	sub    $0xc,%esp
f011b919:	68 00 1c 00 00       	push   $0x1c00
f011b91e:	e8 62 bf fe ff       	call   f0107885 <kmalloc>
f011b923:	83 c4 10             	add    $0x10,%esp
f011b926:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b92c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b932:	89 c1                	mov    %eax,%ecx
f011b934:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b93b:	10 00 00 
f011b93e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b944:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b949:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b94f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b955:	ba 00 00 00 00       	mov    $0x0,%edx
f011b95a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b960:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b966:	29 d0                	sub    %edx,%eax
f011b968:	89 c3                	mov    %eax,%ebx
f011b96a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b971:	10 00 00 
f011b974:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b979:	0f b6 d0             	movzbl %al,%edx
f011b97c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b982:	01 d0                	add    %edx,%eax
f011b984:	48                   	dec    %eax
f011b985:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b98b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b991:	ba 00 00 00 00       	mov    $0x0,%edx
f011b996:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b99c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b9a2:	29 d0                	sub    %edx,%eax
f011b9a4:	01 c3                	add    %eax,%ebx
f011b9a6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b9ad:	10 00 00 
f011b9b0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b9b5:	0f b6 c0             	movzbl %al,%eax
f011b9b8:	c1 e0 04             	shl    $0x4,%eax
f011b9bb:	89 c2                	mov    %eax,%edx
f011b9bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b9c3:	01 d0                	add    %edx,%eax
f011b9c5:	48                   	dec    %eax
f011b9c6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b9cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b9d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9d7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b9dd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b9e3:	29 d0                	sub    %edx,%eax
f011b9e5:	01 d8                	add    %ebx,%eax
f011b9e7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b9ec:	39 c1                	cmp    %eax,%ecx
f011b9ee:	74 17                	je     f011ba07 <test_kmalloc_bestfit2+0x6d6>
f011b9f0:	83 ec 04             	sub    $0x4,%esp
f011b9f3:	68 74 b7 13 f0       	push   $0xf013b774
f011b9f8:	68 70 02 00 00       	push   $0x270
f011b9fd:	68 5a b3 13 f0       	push   $0xf013b35a
f011ba02:	e8 fe 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba07:	e8 bc 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba0f:	74 17                	je     f011ba28 <test_kmalloc_bestfit2+0x6f7>
f011ba11:	83 ec 04             	sub    $0x4,%esp
f011ba14:	68 74 b3 13 f0       	push   $0xf013b374
f011ba19:	68 71 02 00 00       	push   $0x271
f011ba1e:	68 5a b3 13 f0       	push   $0xf013b35a
f011ba23:	e8 dd 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011ba28:	e8 70 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba2d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba30:	29 c2                	sub    %eax,%edx
f011ba32:	89 d0                	mov    %edx,%eax
f011ba34:	83 f8 02             	cmp    $0x2,%eax
f011ba37:	74 17                	je     f011ba50 <test_kmalloc_bestfit2+0x71f>
f011ba39:	83 ec 04             	sub    $0x4,%esp
f011ba3c:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011ba41:	68 72 02 00 00       	push   $0x272
f011ba46:	68 5a b3 13 f0       	push   $0xf013b35a
f011ba4b:	e8 b5 47 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ba50:	e8 48 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba58:	e8 6b 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011ba60:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ba66:	83 ec 0c             	sub    $0xc,%esp
f011ba69:	50                   	push   %eax
f011ba6a:	e8 e1 be fe ff       	call   f0107950 <kfree>
f011ba6f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba72:	e8 51 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba77:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba7a:	74 17                	je     f011ba93 <test_kmalloc_bestfit2+0x762>
f011ba7c:	83 ec 04             	sub    $0x4,%esp
f011ba7f:	68 74 b3 13 f0       	push   $0xf013b374
f011ba84:	68 78 02 00 00       	push   $0x278
f011ba89:	68 5a b3 13 f0       	push   $0xf013b35a
f011ba8e:	e8 72 47 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011ba93:	e8 05 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba98:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ba9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011baa0:	74 17                	je     f011bab9 <test_kmalloc_bestfit2+0x788>
f011baa2:	83 ec 04             	sub    $0x4,%esp
f011baa5:	68 28 b6 13 f0       	push   $0xf013b628
f011baaa:	68 79 02 00 00       	push   $0x279
f011baaf:	68 5a b3 13 f0       	push   $0xf013b35a
f011bab4:	e8 4c 47 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bab9:	e8 df 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011babe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bac1:	e8 02 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bac6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bac9:	83 ec 0c             	sub    $0xc,%esp
f011bacc:	68 00 fc 2f 00       	push   $0x2ffc00
f011bad1:	e8 af bd fe ff       	call   f0107885 <kmalloc>
f011bad6:	83 c4 10             	add    $0x10,%esp
f011bad9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011badf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bae5:	89 c1                	mov    %eax,%ecx
f011bae7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011baee:	10 00 00 
f011baf1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011baf7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bafc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bb02:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bb08:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb0d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bb13:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bb19:	29 d0                	sub    %edx,%eax
f011bb1b:	89 c3                	mov    %eax,%ebx
f011bb1d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bb24:	10 00 00 
f011bb27:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bb2c:	0f b6 d0             	movzbl %al,%edx
f011bb2f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bb35:	01 d0                	add    %edx,%eax
f011bb37:	48                   	dec    %eax
f011bb38:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bb3e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bb44:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb49:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bb4f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bb55:	29 d0                	sub    %edx,%eax
f011bb57:	01 c3                	add    %eax,%ebx
f011bb59:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bb60:	10 00 00 
f011bb63:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bb68:	0f b6 c0             	movzbl %al,%eax
f011bb6b:	c1 e0 04             	shl    $0x4,%eax
f011bb6e:	89 c2                	mov    %eax,%edx
f011bb70:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bb76:	01 d0                	add    %edx,%eax
f011bb78:	48                   	dec    %eax
f011bb79:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bb7f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bb85:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb8a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bb90:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bb96:	29 d0                	sub    %edx,%eax
f011bb98:	01 d8                	add    %ebx,%eax
f011bb9a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bb9f:	39 c1                	cmp    %eax,%ecx
f011bba1:	74 17                	je     f011bbba <test_kmalloc_bestfit2+0x889>
f011bba3:	83 ec 04             	sub    $0x4,%esp
f011bba6:	68 74 b7 13 f0       	push   $0xf013b774
f011bbab:	68 7f 02 00 00       	push   $0x27f
f011bbb0:	68 5a b3 13 f0       	push   $0xf013b35a
f011bbb5:	e8 4b 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbba:	e8 09 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bbc2:	74 17                	je     f011bbdb <test_kmalloc_bestfit2+0x8aa>
f011bbc4:	83 ec 04             	sub    $0x4,%esp
f011bbc7:	68 74 b3 13 f0       	push   $0xf013b374
f011bbcc:	68 80 02 00 00       	push   $0x280
f011bbd1:	68 5a b3 13 f0       	push   $0xf013b35a
f011bbd6:	e8 2a 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bbdb:	e8 bd 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bbe0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bbe3:	29 c2                	sub    %eax,%edx
f011bbe5:	89 d0                	mov    %edx,%eax
f011bbe7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bbec:	74 17                	je     f011bc05 <test_kmalloc_bestfit2+0x8d4>
f011bbee:	83 ec 04             	sub    $0x4,%esp
f011bbf1:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011bbf6:	68 81 02 00 00       	push   $0x281
f011bbfb:	68 5a b3 13 f0       	push   $0xf013b35a
f011bc00:	e8 00 46 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bc05:	e8 93 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bc0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc0d:	e8 b6 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bc15:	83 ec 0c             	sub    $0xc,%esp
f011bc18:	68 00 18 20 00       	push   $0x201800
f011bc1d:	e8 63 bc fe ff       	call   f0107885 <kmalloc>
f011bc22:	83 c4 10             	add    $0x10,%esp
f011bc25:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bc2b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bc31:	89 c1                	mov    %eax,%ecx
f011bc33:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bc3a:	10 00 00 
f011bc3d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bc43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc48:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bc4e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bc54:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc59:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bc5f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bc65:	29 d0                	sub    %edx,%eax
f011bc67:	89 c3                	mov    %eax,%ebx
f011bc69:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bc70:	10 00 00 
f011bc73:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bc78:	0f b6 d0             	movzbl %al,%edx
f011bc7b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bc81:	01 d0                	add    %edx,%eax
f011bc83:	48                   	dec    %eax
f011bc84:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bc8a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bc90:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc95:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bc9b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bca1:	29 d0                	sub    %edx,%eax
f011bca3:	01 c3                	add    %eax,%ebx
f011bca5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bcac:	10 00 00 
f011bcaf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bcb4:	0f b6 c0             	movzbl %al,%eax
f011bcb7:	c1 e0 04             	shl    $0x4,%eax
f011bcba:	89 c2                	mov    %eax,%edx
f011bcbc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bcc2:	01 d0                	add    %edx,%eax
f011bcc4:	48                   	dec    %eax
f011bcc5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bccb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bcd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcd6:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bcdc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bce2:	29 d0                	sub    %edx,%eax
f011bce4:	01 d8                	add    %ebx,%eax
f011bce6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bceb:	39 c1                	cmp    %eax,%ecx
f011bced:	74 17                	je     f011bd06 <test_kmalloc_bestfit2+0x9d5>
f011bcef:	83 ec 04             	sub    $0x4,%esp
f011bcf2:	68 74 b7 13 f0       	push   $0xf013b774
f011bcf7:	68 87 02 00 00       	push   $0x287
f011bcfc:	68 5a b3 13 f0       	push   $0xf013b35a
f011bd01:	e8 ff 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd06:	e8 bd 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd0e:	74 17                	je     f011bd27 <test_kmalloc_bestfit2+0x9f6>
f011bd10:	83 ec 04             	sub    $0x4,%esp
f011bd13:	68 74 b3 13 f0       	push   $0xf013b374
f011bd18:	68 88 02 00 00       	push   $0x288
f011bd1d:	68 5a b3 13 f0       	push   $0xf013b35a
f011bd22:	e8 de 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bd27:	e8 71 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bd2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd2f:	29 c2                	sub    %eax,%edx
f011bd31:	89 d0                	mov    %edx,%eax
f011bd33:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bd38:	74 17                	je     f011bd51 <test_kmalloc_bestfit2+0xa20>
f011bd3a:	83 ec 04             	sub    $0x4,%esp
f011bd3d:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011bd42:	68 89 02 00 00       	push   $0x289
f011bd47:	68 5a b3 13 f0       	push   $0xf013b35a
f011bd4c:	e8 b4 44 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd51:	e8 47 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bd56:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd59:	e8 6a 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bd61:	83 ec 0c             	sub    $0xc,%esp
f011bd64:	68 00 fc 4f 00       	push   $0x4ffc00
f011bd69:	e8 17 bb fe ff       	call   f0107885 <kmalloc>
f011bd6e:	83 c4 10             	add    $0x10,%esp
f011bd71:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bd77:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011bd7d:	89 c1                	mov    %eax,%ecx
f011bd7f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011bd86:	10 00 00 
f011bd89:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011bd8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd94:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011bd9a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bda0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bda5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011bdab:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bdb1:	29 d0                	sub    %edx,%eax
f011bdb3:	89 c3                	mov    %eax,%ebx
f011bdb5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011bdbc:	10 00 00 
f011bdbf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bdc4:	0f b6 d0             	movzbl %al,%edx
f011bdc7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011bdcd:	01 d0                	add    %edx,%eax
f011bdcf:	48                   	dec    %eax
f011bdd0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011bdd6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bddc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011bde7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bded:	29 d0                	sub    %edx,%eax
f011bdef:	01 c3                	add    %eax,%ebx
f011bdf1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011bdf8:	10 00 00 
f011bdfb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011be00:	0f b6 c0             	movzbl %al,%eax
f011be03:	c1 e0 04             	shl    $0x4,%eax
f011be06:	89 c2                	mov    %eax,%edx
f011be08:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011be0e:	01 d0                	add    %edx,%eax
f011be10:	48                   	dec    %eax
f011be11:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011be17:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011be1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011be22:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011be28:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011be2e:	29 d0                	sub    %edx,%eax
f011be30:	01 d8                	add    %ebx,%eax
f011be32:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011be37:	39 c1                	cmp    %eax,%ecx
f011be39:	74 17                	je     f011be52 <test_kmalloc_bestfit2+0xb21>
f011be3b:	83 ec 04             	sub    $0x4,%esp
f011be3e:	68 74 b7 13 f0       	push   $0xf013b774
f011be43:	68 8f 02 00 00       	push   $0x28f
f011be48:	68 5a b3 13 f0       	push   $0xf013b35a
f011be4d:	e8 b3 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be52:	e8 71 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be57:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be5a:	74 17                	je     f011be73 <test_kmalloc_bestfit2+0xb42>
f011be5c:	83 ec 04             	sub    $0x4,%esp
f011be5f:	68 74 b3 13 f0       	push   $0xf013b374
f011be64:	68 90 02 00 00       	push   $0x290
f011be69:	68 5a b3 13 f0       	push   $0xf013b35a
f011be6e:	e8 92 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011be73:	e8 25 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be78:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be7b:	29 c2                	sub    %eax,%edx
f011be7d:	89 d0                	mov    %edx,%eax
f011be7f:	3d 00 05 00 00       	cmp    $0x500,%eax
f011be84:	74 17                	je     f011be9d <test_kmalloc_bestfit2+0xb6c>
f011be86:	83 ec 04             	sub    $0x4,%esp
f011be89:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011be8e:	68 91 02 00 00       	push   $0x291
f011be93:	68 5a b3 13 f0       	push   $0xf013b35a
f011be98:	e8 68 43 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011be9d:	e8 fb 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bea2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bea5:	e8 1e 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011beaa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011bead:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011beb3:	83 ec 0c             	sub    $0xc,%esp
f011beb6:	50                   	push   %eax
f011beb7:	e8 94 ba fe ff       	call   f0107950 <kfree>
f011bebc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bebf:	e8 04 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bec4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bec7:	74 17                	je     f011bee0 <test_kmalloc_bestfit2+0xbaf>
f011bec9:	83 ec 04             	sub    $0x4,%esp
f011becc:	68 74 b3 13 f0       	push   $0xf013b374
f011bed1:	68 97 02 00 00       	push   $0x297
f011bed6:	68 5a b3 13 f0       	push   $0xf013b35a
f011bedb:	e8 25 43 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011bee0:	e8 b8 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bee5:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bee8:	3d 02 02 00 00       	cmp    $0x202,%eax
f011beed:	74 17                	je     f011bf06 <test_kmalloc_bestfit2+0xbd5>
f011beef:	83 ec 04             	sub    $0x4,%esp
f011bef2:	68 28 b6 13 f0       	push   $0xf013b628
f011bef7:	68 98 02 00 00       	push   $0x298
f011befc:	68 5a b3 13 f0       	push   $0xf013b35a
f011bf01:	e8 ff 42 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bf06:	e8 92 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bf0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf0e:	e8 b5 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf13:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011bf16:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bf1c:	83 ec 0c             	sub    $0xc,%esp
f011bf1f:	50                   	push   %eax
f011bf20:	e8 2b ba fe ff       	call   f0107950 <kfree>
f011bf25:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf28:	e8 9b 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf2d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf30:	74 17                	je     f011bf49 <test_kmalloc_bestfit2+0xc18>
f011bf32:	83 ec 04             	sub    $0x4,%esp
f011bf35:	68 74 b3 13 f0       	push   $0xf013b374
f011bf3a:	68 9e 02 00 00       	push   $0x29e
f011bf3f:	68 5a b3 13 f0       	push   $0xf013b35a
f011bf44:	e8 bc 42 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bf49:	e8 4f 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bf4e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bf51:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bf56:	74 17                	je     f011bf6f <test_kmalloc_bestfit2+0xc3e>
f011bf58:	83 ec 04             	sub    $0x4,%esp
f011bf5b:	68 54 b8 13 f0       	push   $0xf013b854
f011bf60:	68 9f 02 00 00       	push   $0x29f
f011bf65:	68 5a b3 13 f0       	push   $0xf013b35a
f011bf6a:	e8 96 42 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf6f:	e8 29 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bf74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf77:	e8 4c 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011bf7f:	83 ec 0c             	sub    $0xc,%esp
f011bf82:	68 00 fc 1f 00       	push   $0x1ffc00
f011bf87:	e8 f9 b8 fe ff       	call   f0107885 <kmalloc>
f011bf8c:	83 c4 10             	add    $0x10,%esp
f011bf8f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf95:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011bf9b:	89 c1                	mov    %eax,%ecx
f011bf9d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011bfa4:	10 00 00 
f011bfa7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011bfad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bfb2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011bfb8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bfbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfc3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011bfc9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bfcf:	29 d0                	sub    %edx,%eax
f011bfd1:	89 c3                	mov    %eax,%ebx
f011bfd3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011bfda:	10 00 00 
f011bfdd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bfe2:	0f b6 d0             	movzbl %al,%edx
f011bfe5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011bfeb:	01 d0                	add    %edx,%eax
f011bfed:	48                   	dec    %eax
f011bfee:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011bff4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bffa:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfff:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c005:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c00b:	29 d0                	sub    %edx,%eax
f011c00d:	01 c3                	add    %eax,%ebx
f011c00f:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c016:	10 00 00 
f011c019:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c01e:	0f b6 c0             	movzbl %al,%eax
f011c021:	c1 e0 04             	shl    $0x4,%eax
f011c024:	89 c2                	mov    %eax,%edx
f011c026:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c02c:	01 d0                	add    %edx,%eax
f011c02e:	48                   	dec    %eax
f011c02f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c035:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c03b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c040:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c046:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c04c:	29 d0                	sub    %edx,%eax
f011c04e:	01 d8                	add    %ebx,%eax
f011c050:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c055:	39 c1                	cmp    %eax,%ecx
f011c057:	74 17                	je     f011c070 <test_kmalloc_bestfit2+0xd3f>
f011c059:	83 ec 04             	sub    $0x4,%esp
f011c05c:	68 74 b7 13 f0       	push   $0xf013b774
f011c061:	68 a5 02 00 00       	push   $0x2a5
f011c066:	68 5a b3 13 f0       	push   $0xf013b35a
f011c06b:	e8 95 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c070:	e8 53 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c075:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c078:	74 17                	je     f011c091 <test_kmalloc_bestfit2+0xd60>
f011c07a:	83 ec 04             	sub    $0x4,%esp
f011c07d:	68 74 b3 13 f0       	push   $0xf013b374
f011c082:	68 a6 02 00 00       	push   $0x2a6
f011c087:	68 5a b3 13 f0       	push   $0xf013b35a
f011c08c:	e8 74 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c091:	e8 07 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c096:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c099:	29 c2                	sub    %eax,%edx
f011c09b:	89 d0                	mov    %edx,%eax
f011c09d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0a2:	74 17                	je     f011c0bb <test_kmalloc_bestfit2+0xd8a>
f011c0a4:	83 ec 04             	sub    $0x4,%esp
f011c0a7:	68 92 b8 13 f0       	push   $0xf013b892
f011c0ac:	68 a7 02 00 00       	push   $0x2a7
f011c0b1:	68 5a b3 13 f0       	push   $0xf013b35a
f011c0b6:	e8 4a 41 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c0bb:	e8 dd 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c0c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0c3:	e8 00 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c0cb:	83 ec 0c             	sub    $0xc,%esp
f011c0ce:	68 00 18 00 00       	push   $0x1800
f011c0d3:	e8 ad b7 fe ff       	call   f0107885 <kmalloc>
f011c0d8:	83 c4 10             	add    $0x10,%esp
f011c0db:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c0e1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c0e7:	89 c1                	mov    %eax,%ecx
f011c0e9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c0f0:	10 00 00 
f011c0f3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c0f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c0fe:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c104:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c10a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c10f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c115:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c11b:	29 d0                	sub    %edx,%eax
f011c11d:	89 c3                	mov    %eax,%ebx
f011c11f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c126:	10 00 00 
f011c129:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c12e:	0f b6 d0             	movzbl %al,%edx
f011c131:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c137:	01 d0                	add    %edx,%eax
f011c139:	48                   	dec    %eax
f011c13a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c140:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c146:	ba 00 00 00 00       	mov    $0x0,%edx
f011c14b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c151:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c157:	29 d0                	sub    %edx,%eax
f011c159:	01 c3                	add    %eax,%ebx
f011c15b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c162:	10 00 00 
f011c165:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c16a:	0f b6 c0             	movzbl %al,%eax
f011c16d:	c1 e0 04             	shl    $0x4,%eax
f011c170:	89 c2                	mov    %eax,%edx
f011c172:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c178:	01 d0                	add    %edx,%eax
f011c17a:	48                   	dec    %eax
f011c17b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c181:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c187:	ba 00 00 00 00       	mov    $0x0,%edx
f011c18c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c192:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c198:	29 d0                	sub    %edx,%eax
f011c19a:	01 d8                	add    %ebx,%eax
f011c19c:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c1a1:	39 c1                	cmp    %eax,%ecx
f011c1a3:	74 17                	je     f011c1bc <test_kmalloc_bestfit2+0xe8b>
f011c1a5:	83 ec 04             	sub    $0x4,%esp
f011c1a8:	68 74 b7 13 f0       	push   $0xf013b774
f011c1ad:	68 ad 02 00 00       	push   $0x2ad
f011c1b2:	68 5a b3 13 f0       	push   $0xf013b35a
f011c1b7:	e8 49 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1bc:	e8 07 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1c4:	74 17                	je     f011c1dd <test_kmalloc_bestfit2+0xeac>
f011c1c6:	83 ec 04             	sub    $0x4,%esp
f011c1c9:	68 74 b3 13 f0       	push   $0xf013b374
f011c1ce:	68 ae 02 00 00       	push   $0x2ae
f011c1d3:	68 5a b3 13 f0       	push   $0xf013b35a
f011c1d8:	e8 28 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c1dd:	e8 bb 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c1e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c1e5:	29 c2                	sub    %eax,%edx
f011c1e7:	89 d0                	mov    %edx,%eax
f011c1e9:	83 f8 02             	cmp    $0x2,%eax
f011c1ec:	74 17                	je     f011c205 <test_kmalloc_bestfit2+0xed4>
f011c1ee:	83 ec 04             	sub    $0x4,%esp
f011c1f1:	68 92 b8 13 f0       	push   $0xf013b892
f011c1f6:	68 af 02 00 00       	push   $0x2af
f011c1fb:	68 5a b3 13 f0       	push   $0xf013b35a
f011c200:	e8 00 40 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c205:	e8 93 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c20a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c20d:	e8 b6 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c212:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c215:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c21b:	83 ec 0c             	sub    $0xc,%esp
f011c21e:	50                   	push   %eax
f011c21f:	e8 2c b7 fe ff       	call   f0107950 <kfree>
f011c224:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c227:	e8 9c 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c22c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c22f:	74 17                	je     f011c248 <test_kmalloc_bestfit2+0xf17>
f011c231:	83 ec 04             	sub    $0x4,%esp
f011c234:	68 74 b3 13 f0       	push   $0xf013b374
f011c239:	68 b5 02 00 00       	push   $0x2b5
f011c23e:	68 5a b3 13 f0       	push   $0xf013b35a
f011c243:	e8 bd 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c248:	e8 50 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c24d:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c250:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c255:	74 17                	je     f011c26e <test_kmalloc_bestfit2+0xf3d>
f011c257:	83 ec 04             	sub    $0x4,%esp
f011c25a:	68 54 b8 13 f0       	push   $0xf013b854
f011c25f:	68 b6 02 00 00       	push   $0x2b6
f011c264:	68 5a b3 13 f0       	push   $0xf013b35a
f011c269:	e8 97 3f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c26e:	e8 2a 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c273:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c276:	e8 4d 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c27b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c27e:	83 ec 0c             	sub    $0xc,%esp
f011c281:	68 00 fc 2f 00       	push   $0x2ffc00
f011c286:	e8 fa b5 fe ff       	call   f0107885 <kmalloc>
f011c28b:	83 c4 10             	add    $0x10,%esp
f011c28e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c294:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c29a:	89 c1                	mov    %eax,%ecx
f011c29c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c2a3:	10 00 00 
f011c2a6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c2ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c2b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c2bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2c2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c2c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c2ce:	29 d0                	sub    %edx,%eax
f011c2d0:	89 c3                	mov    %eax,%ebx
f011c2d2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c2d9:	10 00 00 
f011c2dc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c2e1:	0f b6 d0             	movzbl %al,%edx
f011c2e4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c2ea:	01 d0                	add    %edx,%eax
f011c2ec:	48                   	dec    %eax
f011c2ed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c2f3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c2f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2fe:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c304:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c30a:	29 d0                	sub    %edx,%eax
f011c30c:	01 c3                	add    %eax,%ebx
f011c30e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c315:	10 00 00 
f011c318:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c31d:	0f b6 c0             	movzbl %al,%eax
f011c320:	c1 e0 04             	shl    $0x4,%eax
f011c323:	89 c2                	mov    %eax,%edx
f011c325:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c32b:	01 d0                	add    %edx,%eax
f011c32d:	48                   	dec    %eax
f011c32e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c334:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c33a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c33f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c345:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c34b:	29 d0                	sub    %edx,%eax
f011c34d:	01 d8                	add    %ebx,%eax
f011c34f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c354:	39 c1                	cmp    %eax,%ecx
f011c356:	74 17                	je     f011c36f <test_kmalloc_bestfit2+0x103e>
f011c358:	83 ec 04             	sub    $0x4,%esp
f011c35b:	68 74 b7 13 f0       	push   $0xf013b774
f011c360:	68 bc 02 00 00       	push   $0x2bc
f011c365:	68 5a b3 13 f0       	push   $0xf013b35a
f011c36a:	e8 96 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c36f:	e8 54 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c374:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c377:	74 17                	je     f011c390 <test_kmalloc_bestfit2+0x105f>
f011c379:	83 ec 04             	sub    $0x4,%esp
f011c37c:	68 74 b3 13 f0       	push   $0xf013b374
f011c381:	68 bd 02 00 00       	push   $0x2bd
f011c386:	68 5a b3 13 f0       	push   $0xf013b35a
f011c38b:	e8 75 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c390:	e8 08 08 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c395:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c398:	29 c2                	sub    %eax,%edx
f011c39a:	89 d0                	mov    %edx,%eax
f011c39c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c3a1:	74 17                	je     f011c3ba <test_kmalloc_bestfit2+0x1089>
f011c3a3:	83 ec 04             	sub    $0x4,%esp
f011c3a6:	68 54 b8 13 f0       	push   $0xf013b854
f011c3ab:	68 be 02 00 00       	push   $0x2be
f011c3b0:	68 5a b3 13 f0       	push   $0xf013b35a
f011c3b5:	e8 4b 3e fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3ba:	e8 de 07 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c3bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3c2:	e8 01 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c3ca:	83 ec 0c             	sub    $0xc,%esp
f011c3cd:	68 00 fc 3f 00       	push   $0x3ffc00
f011c3d2:	e8 ae b4 fe ff       	call   f0107885 <kmalloc>
f011c3d7:	83 c4 10             	add    $0x10,%esp
f011c3da:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c3e0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c3e6:	89 c1                	mov    %eax,%ecx
f011c3e8:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c3ef:	10 00 00 
f011c3f2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c3f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3fd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c403:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c409:	ba 00 00 00 00       	mov    $0x0,%edx
f011c40e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c414:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c41a:	29 d0                	sub    %edx,%eax
f011c41c:	89 c3                	mov    %eax,%ebx
f011c41e:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c425:	10 00 00 
f011c428:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c42d:	0f b6 d0             	movzbl %al,%edx
f011c430:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c436:	01 d0                	add    %edx,%eax
f011c438:	48                   	dec    %eax
f011c439:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c43f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c445:	ba 00 00 00 00       	mov    $0x0,%edx
f011c44a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c450:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c456:	29 d0                	sub    %edx,%eax
f011c458:	01 c3                	add    %eax,%ebx
f011c45a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c461:	10 00 00 
f011c464:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c469:	0f b6 c0             	movzbl %al,%eax
f011c46c:	c1 e0 04             	shl    $0x4,%eax
f011c46f:	89 c2                	mov    %eax,%edx
f011c471:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c477:	01 d0                	add    %edx,%eax
f011c479:	48                   	dec    %eax
f011c47a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c480:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c486:	ba 00 00 00 00       	mov    $0x0,%edx
f011c48b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c491:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c497:	29 d0                	sub    %edx,%eax
f011c499:	01 d8                	add    %ebx,%eax
f011c49b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c4a0:	39 c1                	cmp    %eax,%ecx
f011c4a2:	74 17                	je     f011c4bb <test_kmalloc_bestfit2+0x118a>
f011c4a4:	83 ec 04             	sub    $0x4,%esp
f011c4a7:	68 74 b7 13 f0       	push   $0xf013b774
f011c4ac:	68 c4 02 00 00       	push   $0x2c4
f011c4b1:	68 5a b3 13 f0       	push   $0xf013b35a
f011c4b6:	e8 4a 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4bb:	e8 08 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c4c3:	74 17                	je     f011c4dc <test_kmalloc_bestfit2+0x11ab>
f011c4c5:	83 ec 04             	sub    $0x4,%esp
f011c4c8:	68 74 b3 13 f0       	push   $0xf013b374
f011c4cd:	68 c5 02 00 00       	push   $0x2c5
f011c4d2:	68 5a b3 13 f0       	push   $0xf013b35a
f011c4d7:	e8 29 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c4dc:	e8 bc 06 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c4e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4e4:	29 c2                	sub    %eax,%edx
f011c4e6:	89 d0                	mov    %edx,%eax
f011c4e8:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c4ed:	74 17                	je     f011c506 <test_kmalloc_bestfit2+0x11d5>
f011c4ef:	83 ec 04             	sub    $0x4,%esp
f011c4f2:	68 54 b8 13 f0       	push   $0xf013b854
f011c4f7:	68 c6 02 00 00       	push   $0x2c6
f011c4fc:	68 5a b3 13 f0       	push   $0xf013b35a
f011c501:	e8 ff 3c fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c506:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c50d:	10 00 00 
f011c510:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c516:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c51b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c521:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c527:	ba 00 00 00 00       	mov    $0x0,%edx
f011c52c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c532:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c538:	29 d0                	sub    %edx,%eax
f011c53a:	89 c1                	mov    %eax,%ecx
f011c53c:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c543:	10 00 00 
f011c546:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c54b:	0f b6 d0             	movzbl %al,%edx
f011c54e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c554:	01 d0                	add    %edx,%eax
f011c556:	48                   	dec    %eax
f011c557:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c55d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c563:	ba 00 00 00 00       	mov    $0x0,%edx
f011c568:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c56e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c574:	29 d0                	sub    %edx,%eax
f011c576:	01 c1                	add    %eax,%ecx
f011c578:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c57f:	10 00 00 
f011c582:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c587:	0f b6 c0             	movzbl %al,%eax
f011c58a:	c1 e0 04             	shl    $0x4,%eax
f011c58d:	89 c2                	mov    %eax,%edx
f011c58f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c595:	01 d0                	add    %edx,%eax
f011c597:	48                   	dec    %eax
f011c598:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c59e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c5a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5a9:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c5af:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c5b5:	29 d0                	sub    %edx,%eax
f011c5b7:	01 c8                	add    %ecx,%eax
f011c5b9:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c5be:	29 c2                	sub    %eax,%edx
f011c5c0:	89 d0                	mov    %edx,%eax
f011c5c2:	83 ec 0c             	sub    $0xc,%esp
f011c5c5:	50                   	push   %eax
f011c5c6:	e8 ba b2 fe ff       	call   f0107885 <kmalloc>
f011c5cb:	83 c4 10             	add    $0x10,%esp
f011c5ce:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c5d4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c5da:	85 c0                	test   %eax,%eax
f011c5dc:	74 17                	je     f011c5f5 <test_kmalloc_bestfit2+0x12c4>
f011c5de:	83 ec 04             	sub    $0x4,%esp
f011c5e1:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c5e6:	68 ce 02 00 00       	push   $0x2ce
f011c5eb:	68 5a b3 13 f0       	push   $0xf013b35a
f011c5f0:	e8 10 3c fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c5f5:	83 ec 0c             	sub    $0xc,%esp
f011c5f8:	68 08 b9 13 f0       	push   $0xf013b908
f011c5fd:	e8 0c 47 fe ff       	call   f0100d0e <cprintf>
f011c602:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c605:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c60a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c60d:	5b                   	pop    %ebx
f011c60e:	5f                   	pop    %edi
f011c60f:	5d                   	pop    %ebp
f011c610:	c3                   	ret    

f011c611 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c611:	55                   	push   %ebp
f011c612:	89 e5                	mov    %esp,%ebp
f011c614:	57                   	push   %edi
f011c615:	53                   	push   %ebx
f011c616:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c61c:	83 ec 0c             	sub    $0xc,%esp
f011c61f:	68 9c b2 13 f0       	push   $0xf013b29c
f011c624:	e8 e5 46 fe ff       	call   f0100d0e <cprintf>
f011c629:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c62c:	83 ec 0c             	sub    $0xc,%esp
f011c62f:	68 cc b2 13 f0       	push   $0xf013b2cc
f011c634:	e8 d5 46 fe ff       	call   f0100d0e <cprintf>
f011c639:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c63c:	83 ec 0c             	sub    $0xc,%esp
f011c63f:	68 9c b2 13 f0       	push   $0xf013b29c
f011c644:	e8 c5 46 fe ff       	call   f0100d0e <cprintf>
f011c649:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c64c:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c652:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c657:	b8 00 00 00 00       	mov    $0x0,%eax
f011c65c:	89 d7                	mov    %edx,%edi
f011c65e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c660:	e8 38 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c665:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c668:	e8 5b 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c66d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c670:	83 ec 0c             	sub    $0xc,%esp
f011c673:	68 00 fc 0f 00       	push   $0xffc00
f011c678:	e8 08 b2 fe ff       	call   f0107885 <kmalloc>
f011c67d:	83 c4 10             	add    $0x10,%esp
f011c680:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c686:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c68c:	89 c1                	mov    %eax,%ecx
f011c68e:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c695:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c698:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c69d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c6a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6a8:	f7 75 ec             	divl   -0x14(%ebp)
f011c6ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c6ae:	29 d0                	sub    %edx,%eax
f011c6b0:	89 c3                	mov    %eax,%ebx
f011c6b2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c6b9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c6be:	0f b6 d0             	movzbl %al,%edx
f011c6c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c6c4:	01 d0                	add    %edx,%eax
f011c6c6:	48                   	dec    %eax
f011c6c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c6ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c6cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6d2:	f7 75 e4             	divl   -0x1c(%ebp)
f011c6d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c6d8:	29 d0                	sub    %edx,%eax
f011c6da:	01 c3                	add    %eax,%ebx
f011c6dc:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c6e3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c6e8:	0f b6 c0             	movzbl %al,%eax
f011c6eb:	c1 e0 04             	shl    $0x4,%eax
f011c6ee:	89 c2                	mov    %eax,%edx
f011c6f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c6f3:	01 d0                	add    %edx,%eax
f011c6f5:	48                   	dec    %eax
f011c6f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c6f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c701:	f7 75 dc             	divl   -0x24(%ebp)
f011c704:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c707:	29 d0                	sub    %edx,%eax
f011c709:	01 d8                	add    %ebx,%eax
f011c70b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c710:	39 c1                	cmp    %eax,%ecx
f011c712:	74 17                	je     f011c72b <test_kmalloc_firstfit1+0x11a>
f011c714:	83 ec 04             	sub    $0x4,%esp
f011c717:	68 74 b7 13 f0       	push   $0xf013b774
f011c71c:	68 e6 02 00 00       	push   $0x2e6
f011c721:	68 5a b3 13 f0       	push   $0xf013b35a
f011c726:	e8 da 3a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c72b:	e8 98 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c730:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c733:	74 17                	je     f011c74c <test_kmalloc_firstfit1+0x13b>
f011c735:	83 ec 04             	sub    $0x4,%esp
f011c738:	68 74 b3 13 f0       	push   $0xf013b374
f011c73d:	68 e7 02 00 00       	push   $0x2e7
f011c742:	68 5a b3 13 f0       	push   $0xf013b35a
f011c747:	e8 b9 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c74c:	e8 4c 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c754:	29 c2                	sub    %eax,%edx
f011c756:	89 d0                	mov    %edx,%eax
f011c758:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c75d:	74 17                	je     f011c776 <test_kmalloc_firstfit1+0x165>
f011c75f:	83 ec 04             	sub    $0x4,%esp
f011c762:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011c767:	68 e8 02 00 00       	push   $0x2e8
f011c76c:	68 5a b3 13 f0       	push   $0xf013b35a
f011c771:	e8 8f 3a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c776:	e8 22 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c77b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c77e:	e8 45 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c783:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c786:	83 ec 0c             	sub    $0xc,%esp
f011c789:	68 00 fc 0f 00       	push   $0xffc00
f011c78e:	e8 f2 b0 fe ff       	call   f0107885 <kmalloc>
f011c793:	83 c4 10             	add    $0x10,%esp
f011c796:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c79c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c7a2:	89 c1                	mov    %eax,%ecx
f011c7a4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c7ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c7ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c7b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c7b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c7b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7be:	f7 75 d4             	divl   -0x2c(%ebp)
f011c7c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c7c4:	29 d0                	sub    %edx,%eax
f011c7c6:	89 c3                	mov    %eax,%ebx
f011c7c8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c7cf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c7d4:	0f b6 d0             	movzbl %al,%edx
f011c7d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c7da:	01 d0                	add    %edx,%eax
f011c7dc:	48                   	dec    %eax
f011c7dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c7e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c7e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7e8:	f7 75 cc             	divl   -0x34(%ebp)
f011c7eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c7ee:	29 d0                	sub    %edx,%eax
f011c7f0:	01 c3                	add    %eax,%ebx
f011c7f2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c7f9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c7fe:	0f b6 c0             	movzbl %al,%eax
f011c801:	c1 e0 04             	shl    $0x4,%eax
f011c804:	89 c2                	mov    %eax,%edx
f011c806:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c809:	01 d0                	add    %edx,%eax
f011c80b:	48                   	dec    %eax
f011c80c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c80f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c812:	ba 00 00 00 00       	mov    $0x0,%edx
f011c817:	f7 75 c4             	divl   -0x3c(%ebp)
f011c81a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c81d:	29 d0                	sub    %edx,%eax
f011c81f:	01 d8                	add    %ebx,%eax
f011c821:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c826:	39 c1                	cmp    %eax,%ecx
f011c828:	74 17                	je     f011c841 <test_kmalloc_firstfit1+0x230>
f011c82a:	83 ec 04             	sub    $0x4,%esp
f011c82d:	68 74 b7 13 f0       	push   $0xf013b774
f011c832:	68 ee 02 00 00       	push   $0x2ee
f011c837:	68 5a b3 13 f0       	push   $0xf013b35a
f011c83c:	e8 c4 39 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c841:	e8 82 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c846:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c849:	74 17                	je     f011c862 <test_kmalloc_firstfit1+0x251>
f011c84b:	83 ec 04             	sub    $0x4,%esp
f011c84e:	68 74 b3 13 f0       	push   $0xf013b374
f011c853:	68 ef 02 00 00       	push   $0x2ef
f011c858:	68 5a b3 13 f0       	push   $0xf013b35a
f011c85d:	e8 a3 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c862:	e8 36 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c86a:	29 c2                	sub    %eax,%edx
f011c86c:	89 d0                	mov    %edx,%eax
f011c86e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c873:	74 17                	je     f011c88c <test_kmalloc_firstfit1+0x27b>
f011c875:	83 ec 04             	sub    $0x4,%esp
f011c878:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011c87d:	68 f0 02 00 00       	push   $0x2f0
f011c882:	68 5a b3 13 f0       	push   $0xf013b35a
f011c887:	e8 79 39 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c88c:	e8 0c 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c891:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c894:	e8 2f 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c899:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c89c:	83 ec 0c             	sub    $0xc,%esp
f011c89f:	68 00 fc 0f 00       	push   $0xffc00
f011c8a4:	e8 dc af fe ff       	call   f0107885 <kmalloc>
f011c8a9:	83 c4 10             	add    $0x10,%esp
f011c8ac:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c8b2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c8b8:	89 c1                	mov    %eax,%ecx
f011c8ba:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c8c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c8c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8c9:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c8cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c8cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8d4:	f7 75 bc             	divl   -0x44(%ebp)
f011c8d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c8da:	29 d0                	sub    %edx,%eax
f011c8dc:	89 c3                	mov    %eax,%ebx
f011c8de:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c8e5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c8ea:	0f b6 d0             	movzbl %al,%edx
f011c8ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c8f0:	01 d0                	add    %edx,%eax
f011c8f2:	48                   	dec    %eax
f011c8f3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c8f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c8f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8fe:	f7 75 b4             	divl   -0x4c(%ebp)
f011c901:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c904:	29 d0                	sub    %edx,%eax
f011c906:	01 c3                	add    %eax,%ebx
f011c908:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c90f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c914:	0f b6 c0             	movzbl %al,%eax
f011c917:	c1 e0 04             	shl    $0x4,%eax
f011c91a:	89 c2                	mov    %eax,%edx
f011c91c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c91f:	01 d0                	add    %edx,%eax
f011c921:	48                   	dec    %eax
f011c922:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c925:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c928:	ba 00 00 00 00       	mov    $0x0,%edx
f011c92d:	f7 75 ac             	divl   -0x54(%ebp)
f011c930:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c933:	29 d0                	sub    %edx,%eax
f011c935:	01 d8                	add    %ebx,%eax
f011c937:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c93c:	39 c1                	cmp    %eax,%ecx
f011c93e:	74 17                	je     f011c957 <test_kmalloc_firstfit1+0x346>
f011c940:	83 ec 04             	sub    $0x4,%esp
f011c943:	68 74 b7 13 f0       	push   $0xf013b774
f011c948:	68 f6 02 00 00       	push   $0x2f6
f011c94d:	68 5a b3 13 f0       	push   $0xf013b35a
f011c952:	e8 ae 38 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c957:	e8 6c 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c95c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c95f:	74 17                	je     f011c978 <test_kmalloc_firstfit1+0x367>
f011c961:	83 ec 04             	sub    $0x4,%esp
f011c964:	68 74 b3 13 f0       	push   $0xf013b374
f011c969:	68 f7 02 00 00       	push   $0x2f7
f011c96e:	68 5a b3 13 f0       	push   $0xf013b35a
f011c973:	e8 8d 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c978:	e8 20 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c97d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c980:	29 c2                	sub    %eax,%edx
f011c982:	89 d0                	mov    %edx,%eax
f011c984:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c989:	74 17                	je     f011c9a2 <test_kmalloc_firstfit1+0x391>
f011c98b:	83 ec 04             	sub    $0x4,%esp
f011c98e:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011c993:	68 f8 02 00 00       	push   $0x2f8
f011c998:	68 5a b3 13 f0       	push   $0xf013b35a
f011c99d:	e8 63 38 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9a2:	e8 f6 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c9a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9aa:	e8 19 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c9af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c9b2:	83 ec 0c             	sub    $0xc,%esp
f011c9b5:	68 00 fc 0f 00       	push   $0xffc00
f011c9ba:	e8 c6 ae fe ff       	call   f0107885 <kmalloc>
f011c9bf:	83 c4 10             	add    $0x10,%esp
f011c9c2:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c9c8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c9ce:	89 c1                	mov    %eax,%ecx
f011c9d0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c9d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c9da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9df:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c9e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c9e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9ea:	f7 75 a4             	divl   -0x5c(%ebp)
f011c9ed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c9f0:	29 d0                	sub    %edx,%eax
f011c9f2:	89 c3                	mov    %eax,%ebx
f011c9f4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c9fb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ca00:	0f b6 d0             	movzbl %al,%edx
f011ca03:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ca06:	01 d0                	add    %edx,%eax
f011ca08:	48                   	dec    %eax
f011ca09:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ca0c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ca0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca14:	f7 75 9c             	divl   -0x64(%ebp)
f011ca17:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ca1a:	29 d0                	sub    %edx,%eax
f011ca1c:	01 c3                	add    %eax,%ebx
f011ca1e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ca25:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ca2a:	0f b6 c0             	movzbl %al,%eax
f011ca2d:	c1 e0 04             	shl    $0x4,%eax
f011ca30:	89 c2                	mov    %eax,%edx
f011ca32:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ca35:	01 d0                	add    %edx,%eax
f011ca37:	48                   	dec    %eax
f011ca38:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ca3b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ca3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca43:	f7 75 94             	divl   -0x6c(%ebp)
f011ca46:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ca49:	29 d0                	sub    %edx,%eax
f011ca4b:	01 d8                	add    %ebx,%eax
f011ca4d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ca52:	39 c1                	cmp    %eax,%ecx
f011ca54:	74 17                	je     f011ca6d <test_kmalloc_firstfit1+0x45c>
f011ca56:	83 ec 04             	sub    $0x4,%esp
f011ca59:	68 74 b7 13 f0       	push   $0xf013b774
f011ca5e:	68 fe 02 00 00       	push   $0x2fe
f011ca63:	68 5a b3 13 f0       	push   $0xf013b35a
f011ca68:	e8 98 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca6d:	e8 56 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca75:	74 17                	je     f011ca8e <test_kmalloc_firstfit1+0x47d>
f011ca77:	83 ec 04             	sub    $0x4,%esp
f011ca7a:	68 74 b3 13 f0       	push   $0xf013b374
f011ca7f:	68 ff 02 00 00       	push   $0x2ff
f011ca84:	68 5a b3 13 f0       	push   $0xf013b35a
f011ca89:	e8 77 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca8e:	e8 0a 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ca93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca96:	29 c2                	sub    %eax,%edx
f011ca98:	89 d0                	mov    %edx,%eax
f011ca9a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca9f:	74 17                	je     f011cab8 <test_kmalloc_firstfit1+0x4a7>
f011caa1:	83 ec 04             	sub    $0x4,%esp
f011caa4:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011caa9:	68 00 03 00 00       	push   $0x300
f011caae:	68 5a b3 13 f0       	push   $0xf013b35a
f011cab3:	e8 4d 37 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cab8:	e8 e0 00 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011cabd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cac0:	e8 03 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cac5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cac8:	83 ec 0c             	sub    $0xc,%esp
f011cacb:	68 00 fc 1f 00       	push   $0x1ffc00
f011cad0:	e8 b0 ad fe ff       	call   f0107885 <kmalloc>
f011cad5:	83 c4 10             	add    $0x10,%esp
f011cad8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cade:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cae4:	89 c1                	mov    %eax,%ecx
f011cae6:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011caed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011caf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011caf5:	89 45 88             	mov    %eax,-0x78(%ebp)
f011caf8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cafb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb00:	f7 75 8c             	divl   -0x74(%ebp)
f011cb03:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cb06:	29 d0                	sub    %edx,%eax
f011cb08:	89 c3                	mov    %eax,%ebx
f011cb0a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cb11:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cb16:	0f b6 d0             	movzbl %al,%edx
f011cb19:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cb1c:	01 d0                	add    %edx,%eax
f011cb1e:	48                   	dec    %eax
f011cb1f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cb22:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cb25:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb2a:	f7 75 84             	divl   -0x7c(%ebp)
f011cb2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cb30:	29 d0                	sub    %edx,%eax
f011cb32:	01 c3                	add    %eax,%ebx
f011cb34:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cb3b:	10 00 00 
f011cb3e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cb43:	0f b6 c0             	movzbl %al,%eax
f011cb46:	c1 e0 04             	shl    $0x4,%eax
f011cb49:	89 c2                	mov    %eax,%edx
f011cb4b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cb51:	01 d0                	add    %edx,%eax
f011cb53:	48                   	dec    %eax
f011cb54:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cb5a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cb60:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb65:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cb6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cb71:	29 d0                	sub    %edx,%eax
f011cb73:	01 d8                	add    %ebx,%eax
f011cb75:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cb7a:	39 c1                	cmp    %eax,%ecx
f011cb7c:	74 17                	je     f011cb95 <test_kmalloc_firstfit1+0x584>
f011cb7e:	83 ec 04             	sub    $0x4,%esp
f011cb81:	68 74 b7 13 f0       	push   $0xf013b774
f011cb86:	68 06 03 00 00       	push   $0x306
f011cb8b:	68 5a b3 13 f0       	push   $0xf013b35a
f011cb90:	e8 70 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb95:	e8 2e 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb9a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb9d:	74 17                	je     f011cbb6 <test_kmalloc_firstfit1+0x5a5>
f011cb9f:	83 ec 04             	sub    $0x4,%esp
f011cba2:	68 74 b3 13 f0       	push   $0xf013b374
f011cba7:	68 07 03 00 00       	push   $0x307
f011cbac:	68 5a b3 13 f0       	push   $0xf013b35a
f011cbb1:	e8 4f 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cbb6:	e8 e2 ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cbbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cbbe:	29 c2                	sub    %eax,%edx
f011cbc0:	89 d0                	mov    %edx,%eax
f011cbc2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cbc7:	74 17                	je     f011cbe0 <test_kmalloc_firstfit1+0x5cf>
f011cbc9:	83 ec 04             	sub    $0x4,%esp
f011cbcc:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011cbd1:	68 08 03 00 00       	push   $0x308
f011cbd6:	68 5a b3 13 f0       	push   $0xf013b35a
f011cbdb:	e8 25 36 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbe0:	e8 b8 ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cbe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbe8:	e8 db 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cbed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cbf0:	83 ec 0c             	sub    $0xc,%esp
f011cbf3:	68 00 fc 1f 00       	push   $0x1ffc00
f011cbf8:	e8 88 ac fe ff       	call   f0107885 <kmalloc>
f011cbfd:	83 c4 10             	add    $0x10,%esp
f011cc00:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cc06:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011cc0c:	89 c1                	mov    %eax,%ecx
f011cc0e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cc15:	10 00 00 
f011cc18:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cc1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc23:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cc29:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cc2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc34:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cc3a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cc40:	29 d0                	sub    %edx,%eax
f011cc42:	89 c3                	mov    %eax,%ebx
f011cc44:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cc4b:	10 00 00 
f011cc4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cc53:	0f b6 d0             	movzbl %al,%edx
f011cc56:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cc5c:	01 d0                	add    %edx,%eax
f011cc5e:	48                   	dec    %eax
f011cc5f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cc65:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cc6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc70:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cc76:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cc7c:	29 d0                	sub    %edx,%eax
f011cc7e:	01 c3                	add    %eax,%ebx
f011cc80:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cc87:	10 00 00 
f011cc8a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cc8f:	0f b6 c0             	movzbl %al,%eax
f011cc92:	c1 e0 04             	shl    $0x4,%eax
f011cc95:	89 c2                	mov    %eax,%edx
f011cc97:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cc9d:	01 d0                	add    %edx,%eax
f011cc9f:	48                   	dec    %eax
f011cca0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cca6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ccac:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccb1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ccb7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ccbd:	29 d0                	sub    %edx,%eax
f011ccbf:	01 d8                	add    %ebx,%eax
f011ccc1:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ccc6:	39 c1                	cmp    %eax,%ecx
f011ccc8:	74 17                	je     f011cce1 <test_kmalloc_firstfit1+0x6d0>
f011ccca:	83 ec 04             	sub    $0x4,%esp
f011cccd:	68 74 b7 13 f0       	push   $0xf013b774
f011ccd2:	68 0e 03 00 00       	push   $0x30e
f011ccd7:	68 5a b3 13 f0       	push   $0xf013b35a
f011ccdc:	e8 24 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cce1:	e8 e2 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cce6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cce9:	74 17                	je     f011cd02 <test_kmalloc_firstfit1+0x6f1>
f011cceb:	83 ec 04             	sub    $0x4,%esp
f011ccee:	68 74 b3 13 f0       	push   $0xf013b374
f011ccf3:	68 0f 03 00 00       	push   $0x30f
f011ccf8:	68 5a b3 13 f0       	push   $0xf013b35a
f011ccfd:	e8 03 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cd02:	e8 96 fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cd07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd0a:	29 c2                	sub    %eax,%edx
f011cd0c:	89 d0                	mov    %edx,%eax
f011cd0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cd13:	74 17                	je     f011cd2c <test_kmalloc_firstfit1+0x71b>
f011cd15:	83 ec 04             	sub    $0x4,%esp
f011cd18:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011cd1d:	68 10 03 00 00       	push   $0x310
f011cd22:	68 5a b3 13 f0       	push   $0xf013b35a
f011cd27:	e8 d9 34 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd2c:	e8 6c fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cd31:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd34:	e8 8f 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd39:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cd3c:	83 ec 0c             	sub    $0xc,%esp
f011cd3f:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd44:	e8 3c ab fe ff       	call   f0107885 <kmalloc>
f011cd49:	83 c4 10             	add    $0x10,%esp
f011cd4c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cd52:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cd58:	89 c1                	mov    %eax,%ecx
f011cd5a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011cd61:	10 00 00 
f011cd64:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011cd6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd6f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011cd75:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cd7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd80:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011cd86:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cd8c:	29 d0                	sub    %edx,%eax
f011cd8e:	89 c3                	mov    %eax,%ebx
f011cd90:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011cd97:	10 00 00 
f011cd9a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cd9f:	0f b6 d0             	movzbl %al,%edx
f011cda2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cda8:	01 d0                	add    %edx,%eax
f011cdaa:	48                   	dec    %eax
f011cdab:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cdb1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cdb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdbc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cdc2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cdc8:	29 d0                	sub    %edx,%eax
f011cdca:	01 c3                	add    %eax,%ebx
f011cdcc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011cdd3:	10 00 00 
f011cdd6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cddb:	0f b6 c0             	movzbl %al,%eax
f011cdde:	c1 e0 04             	shl    $0x4,%eax
f011cde1:	89 c2                	mov    %eax,%edx
f011cde3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011cde9:	01 d0                	add    %edx,%eax
f011cdeb:	48                   	dec    %eax
f011cdec:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011cdf2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cdf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdfd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ce03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ce09:	29 d0                	sub    %edx,%eax
f011ce0b:	01 d8                	add    %ebx,%eax
f011ce0d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ce12:	39 c1                	cmp    %eax,%ecx
f011ce14:	74 17                	je     f011ce2d <test_kmalloc_firstfit1+0x81c>
f011ce16:	83 ec 04             	sub    $0x4,%esp
f011ce19:	68 74 b7 13 f0       	push   $0xf013b774
f011ce1e:	68 16 03 00 00       	push   $0x316
f011ce23:	68 5a b3 13 f0       	push   $0xf013b35a
f011ce28:	e8 d8 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce2d:	e8 96 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce35:	74 17                	je     f011ce4e <test_kmalloc_firstfit1+0x83d>
f011ce37:	83 ec 04             	sub    $0x4,%esp
f011ce3a:	68 74 b3 13 f0       	push   $0xf013b374
f011ce3f:	68 17 03 00 00       	push   $0x317
f011ce44:	68 5a b3 13 f0       	push   $0xf013b35a
f011ce49:	e8 b7 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ce4e:	e8 4a fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce56:	29 c2                	sub    %eax,%edx
f011ce58:	89 d0                	mov    %edx,%eax
f011ce5a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce5f:	74 17                	je     f011ce78 <test_kmalloc_firstfit1+0x867>
f011ce61:	83 ec 04             	sub    $0x4,%esp
f011ce64:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011ce69:	68 18 03 00 00       	push   $0x318
f011ce6e:	68 5a b3 13 f0       	push   $0xf013b35a
f011ce73:	e8 8d 33 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce78:	e8 20 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce80:	e8 43 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce85:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011ce88:	83 ec 0c             	sub    $0xc,%esp
f011ce8b:	68 00 fc 2f 00       	push   $0x2ffc00
f011ce90:	e8 f0 a9 fe ff       	call   f0107885 <kmalloc>
f011ce95:	83 c4 10             	add    $0x10,%esp
f011ce98:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ce9e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011cea4:	89 c1                	mov    %eax,%ecx
f011cea6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011cead:	10 00 00 
f011ceb0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ceb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cebb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011cec1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cec7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cecc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ced2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ced8:	29 d0                	sub    %edx,%eax
f011ceda:	89 c3                	mov    %eax,%ebx
f011cedc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011cee3:	10 00 00 
f011cee6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ceeb:	0f b6 d0             	movzbl %al,%edx
f011ceee:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011cef4:	01 d0                	add    %edx,%eax
f011cef6:	48                   	dec    %eax
f011cef7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011cefd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cf03:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf08:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011cf0e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cf14:	29 d0                	sub    %edx,%eax
f011cf16:	01 c3                	add    %eax,%ebx
f011cf18:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011cf1f:	10 00 00 
f011cf22:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cf27:	0f b6 c0             	movzbl %al,%eax
f011cf2a:	c1 e0 04             	shl    $0x4,%eax
f011cf2d:	89 c2                	mov    %eax,%edx
f011cf2f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011cf35:	01 d0                	add    %edx,%eax
f011cf37:	48                   	dec    %eax
f011cf38:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011cf3e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cf44:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf49:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011cf4f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cf55:	29 d0                	sub    %edx,%eax
f011cf57:	01 d8                	add    %ebx,%eax
f011cf59:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011cf5e:	39 c1                	cmp    %eax,%ecx
f011cf60:	74 17                	je     f011cf79 <test_kmalloc_firstfit1+0x968>
f011cf62:	83 ec 04             	sub    $0x4,%esp
f011cf65:	68 74 b7 13 f0       	push   $0xf013b774
f011cf6a:	68 1e 03 00 00       	push   $0x31e
f011cf6f:	68 5a b3 13 f0       	push   $0xf013b35a
f011cf74:	e8 8c 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf79:	e8 4a 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf81:	74 17                	je     f011cf9a <test_kmalloc_firstfit1+0x989>
f011cf83:	83 ec 04             	sub    $0x4,%esp
f011cf86:	68 74 b3 13 f0       	push   $0xf013b374
f011cf8b:	68 1f 03 00 00       	push   $0x31f
f011cf90:	68 5a b3 13 f0       	push   $0xf013b35a
f011cf95:	e8 6b 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cf9a:	e8 fe fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfa2:	29 c2                	sub    %eax,%edx
f011cfa4:	89 d0                	mov    %edx,%eax
f011cfa6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cfab:	74 17                	je     f011cfc4 <test_kmalloc_firstfit1+0x9b3>
f011cfad:	83 ec 04             	sub    $0x4,%esp
f011cfb0:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011cfb5:	68 20 03 00 00       	push   $0x320
f011cfba:	68 5a b3 13 f0       	push   $0xf013b35a
f011cfbf:	e8 41 32 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cfc4:	e8 d4 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cfc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfcc:	e8 f7 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cfd4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cfda:	83 ec 0c             	sub    $0xc,%esp
f011cfdd:	50                   	push   %eax
f011cfde:	e8 6d a9 fe ff       	call   f0107950 <kfree>
f011cfe3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfe6:	e8 dd 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfeb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfee:	74 17                	je     f011d007 <test_kmalloc_firstfit1+0x9f6>
f011cff0:	83 ec 04             	sub    $0x4,%esp
f011cff3:	68 74 b3 13 f0       	push   $0xf013b374
f011cff8:	68 29 03 00 00       	push   $0x329
f011cffd:	68 5a b3 13 f0       	push   $0xf013b35a
f011d002:	e8 fe 31 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d007:	e8 91 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d00c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d00f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d014:	74 17                	je     f011d02d <test_kmalloc_firstfit1+0xa1c>
f011d016:	83 ec 04             	sub    $0x4,%esp
f011d019:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011d01e:	68 2a 03 00 00       	push   $0x32a
f011d023:	68 5a b3 13 f0       	push   $0xf013b35a
f011d028:	e8 d8 31 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d02d:	e8 6b fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d032:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d035:	e8 8e 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d03a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d03d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d043:	83 ec 0c             	sub    $0xc,%esp
f011d046:	50                   	push   %eax
f011d047:	e8 04 a9 fe ff       	call   f0107950 <kfree>
f011d04c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d04f:	e8 74 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d054:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d057:	74 17                	je     f011d070 <test_kmalloc_firstfit1+0xa5f>
f011d059:	83 ec 04             	sub    $0x4,%esp
f011d05c:	68 74 b3 13 f0       	push   $0xf013b374
f011d061:	68 30 03 00 00       	push   $0x330
f011d066:	68 5a b3 13 f0       	push   $0xf013b35a
f011d06b:	e8 95 31 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d070:	e8 28 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d075:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d078:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d07d:	74 17                	je     f011d096 <test_kmalloc_firstfit1+0xa85>
f011d07f:	83 ec 04             	sub    $0x4,%esp
f011d082:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011d087:	68 31 03 00 00       	push   $0x331
f011d08c:	68 5a b3 13 f0       	push   $0xf013b35a
f011d091:	e8 6f 31 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d096:	e8 02 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d09b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d09e:	e8 25 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d0a6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d0ac:	83 ec 0c             	sub    $0xc,%esp
f011d0af:	50                   	push   %eax
f011d0b0:	e8 9b a8 fe ff       	call   f0107950 <kfree>
f011d0b5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0b8:	e8 0b 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0c0:	74 17                	je     f011d0d9 <test_kmalloc_firstfit1+0xac8>
f011d0c2:	83 ec 04             	sub    $0x4,%esp
f011d0c5:	68 74 b3 13 f0       	push   $0xf013b374
f011d0ca:	68 37 03 00 00       	push   $0x337
f011d0cf:	68 5a b3 13 f0       	push   $0xf013b35a
f011d0d4:	e8 2c 31 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d0d9:	e8 bf fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d0de:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d0e1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d0e6:	74 17                	je     f011d0ff <test_kmalloc_firstfit1+0xaee>
f011d0e8:	83 ec 04             	sub    $0x4,%esp
f011d0eb:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011d0f0:	68 38 03 00 00       	push   $0x338
f011d0f5:	68 5a b3 13 f0       	push   $0xf013b35a
f011d0fa:	e8 06 31 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d0ff:	e8 99 fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d104:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d107:	e8 bc 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d10c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d10f:	83 ec 0c             	sub    $0xc,%esp
f011d112:	68 00 fc 07 00       	push   $0x7fc00
f011d117:	e8 69 a7 fe ff       	call   f0107885 <kmalloc>
f011d11c:	83 c4 10             	add    $0x10,%esp
f011d11f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d125:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d12b:	89 c1                	mov    %eax,%ecx
f011d12d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d134:	10 00 00 
f011d137:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d13d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d142:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d148:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d14e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d153:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d159:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d15f:	29 d0                	sub    %edx,%eax
f011d161:	89 c3                	mov    %eax,%ebx
f011d163:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d16a:	10 00 00 
f011d16d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d172:	0f b6 d0             	movzbl %al,%edx
f011d175:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d17b:	01 d0                	add    %edx,%eax
f011d17d:	48                   	dec    %eax
f011d17e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d184:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d18a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d18f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d195:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d19b:	29 d0                	sub    %edx,%eax
f011d19d:	01 c3                	add    %eax,%ebx
f011d19f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d1a6:	10 00 00 
f011d1a9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d1ae:	0f b6 c0             	movzbl %al,%eax
f011d1b1:	c1 e0 04             	shl    $0x4,%eax
f011d1b4:	89 c2                	mov    %eax,%edx
f011d1b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d1bc:	01 d0                	add    %edx,%eax
f011d1be:	48                   	dec    %eax
f011d1bf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d1c5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d1cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1d0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d1d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d1dc:	29 d0                	sub    %edx,%eax
f011d1de:	01 d8                	add    %ebx,%eax
f011d1e0:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d1e5:	39 c1                	cmp    %eax,%ecx
f011d1e7:	74 17                	je     f011d200 <test_kmalloc_firstfit1+0xbef>
f011d1e9:	83 ec 04             	sub    $0x4,%esp
f011d1ec:	68 74 b7 13 f0       	push   $0xf013b774
f011d1f1:	68 41 03 00 00       	push   $0x341
f011d1f6:	68 5a b3 13 f0       	push   $0xf013b35a
f011d1fb:	e8 05 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d200:	e8 c3 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d205:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d208:	74 17                	je     f011d221 <test_kmalloc_firstfit1+0xc10>
f011d20a:	83 ec 04             	sub    $0x4,%esp
f011d20d:	68 74 b3 13 f0       	push   $0xf013b374
f011d212:	68 42 03 00 00       	push   $0x342
f011d217:	68 5a b3 13 f0       	push   $0xf013b35a
f011d21c:	e8 e4 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d221:	e8 77 f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d229:	29 c2                	sub    %eax,%edx
f011d22b:	89 d0                	mov    %edx,%eax
f011d22d:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d232:	74 17                	je     f011d24b <test_kmalloc_firstfit1+0xc3a>
f011d234:	83 ec 04             	sub    $0x4,%esp
f011d237:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d23c:	68 43 03 00 00       	push   $0x343
f011d241:	68 5a b3 13 f0       	push   $0xf013b35a
f011d246:	e8 ba 2f fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d24b:	e8 4d f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d250:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d253:	e8 70 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d258:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d25b:	83 ec 0c             	sub    $0xc,%esp
f011d25e:	68 00 fc 0f 00       	push   $0xffc00
f011d263:	e8 1d a6 fe ff       	call   f0107885 <kmalloc>
f011d268:	83 c4 10             	add    $0x10,%esp
f011d26b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d271:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d277:	89 c1                	mov    %eax,%ecx
f011d279:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d280:	10 00 00 
f011d283:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d289:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d28e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d294:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d29a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d29f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d2a5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d2ab:	29 d0                	sub    %edx,%eax
f011d2ad:	89 c3                	mov    %eax,%ebx
f011d2af:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d2b6:	10 00 00 
f011d2b9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d2be:	0f b6 d0             	movzbl %al,%edx
f011d2c1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d2c7:	01 d0                	add    %edx,%eax
f011d2c9:	48                   	dec    %eax
f011d2ca:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d2d0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d2d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2db:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d2e1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d2e7:	29 d0                	sub    %edx,%eax
f011d2e9:	01 c3                	add    %eax,%ebx
f011d2eb:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d2f2:	10 00 00 
f011d2f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d2fa:	0f b6 c0             	movzbl %al,%eax
f011d2fd:	c1 e0 04             	shl    $0x4,%eax
f011d300:	89 c2                	mov    %eax,%edx
f011d302:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d308:	01 d0                	add    %edx,%eax
f011d30a:	48                   	dec    %eax
f011d30b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d311:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d317:	ba 00 00 00 00       	mov    $0x0,%edx
f011d31c:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d322:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d328:	29 d0                	sub    %edx,%eax
f011d32a:	01 d8                	add    %ebx,%eax
f011d32c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d331:	39 c1                	cmp    %eax,%ecx
f011d333:	74 17                	je     f011d34c <test_kmalloc_firstfit1+0xd3b>
f011d335:	83 ec 04             	sub    $0x4,%esp
f011d338:	68 74 b7 13 f0       	push   $0xf013b774
f011d33d:	68 49 03 00 00       	push   $0x349
f011d342:	68 5a b3 13 f0       	push   $0xf013b35a
f011d347:	e8 b9 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d34c:	e8 77 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d351:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d354:	74 17                	je     f011d36d <test_kmalloc_firstfit1+0xd5c>
f011d356:	83 ec 04             	sub    $0x4,%esp
f011d359:	68 74 b3 13 f0       	push   $0xf013b374
f011d35e:	68 4a 03 00 00       	push   $0x34a
f011d363:	68 5a b3 13 f0       	push   $0xf013b35a
f011d368:	e8 98 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d36d:	e8 2b f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d372:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d375:	29 c2                	sub    %eax,%edx
f011d377:	89 d0                	mov    %edx,%eax
f011d379:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d37e:	74 17                	je     f011d397 <test_kmalloc_firstfit1+0xd86>
f011d380:	83 ec 04             	sub    $0x4,%esp
f011d383:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d388:	68 4b 03 00 00       	push   $0x34b
f011d38d:	68 5a b3 13 f0       	push   $0xf013b35a
f011d392:	e8 6e 2e fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d397:	e8 01 f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d39c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d39f:	e8 24 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d3a7:	83 ec 0c             	sub    $0xc,%esp
f011d3aa:	68 00 fc 03 00       	push   $0x3fc00
f011d3af:	e8 d1 a4 fe ff       	call   f0107885 <kmalloc>
f011d3b4:	83 c4 10             	add    $0x10,%esp
f011d3b7:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d3bd:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d3c3:	89 c1                	mov    %eax,%ecx
f011d3c5:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d3cc:	10 00 00 
f011d3cf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d3d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3da:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d3e0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d3e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3eb:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d3f1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d3f7:	29 d0                	sub    %edx,%eax
f011d3f9:	89 c3                	mov    %eax,%ebx
f011d3fb:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d402:	10 00 00 
f011d405:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d40a:	0f b6 d0             	movzbl %al,%edx
f011d40d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d413:	01 d0                	add    %edx,%eax
f011d415:	48                   	dec    %eax
f011d416:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d41c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d422:	ba 00 00 00 00       	mov    $0x0,%edx
f011d427:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d42d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d433:	29 d0                	sub    %edx,%eax
f011d435:	01 c3                	add    %eax,%ebx
f011d437:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d43e:	10 00 00 
f011d441:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d446:	0f b6 c0             	movzbl %al,%eax
f011d449:	c1 e0 04             	shl    $0x4,%eax
f011d44c:	89 c2                	mov    %eax,%edx
f011d44e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d454:	01 d0                	add    %edx,%eax
f011d456:	48                   	dec    %eax
f011d457:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d45d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d463:	ba 00 00 00 00       	mov    $0x0,%edx
f011d468:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d46e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d474:	29 d0                	sub    %edx,%eax
f011d476:	01 d8                	add    %ebx,%eax
f011d478:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d47d:	39 c1                	cmp    %eax,%ecx
f011d47f:	74 17                	je     f011d498 <test_kmalloc_firstfit1+0xe87>
f011d481:	83 ec 04             	sub    $0x4,%esp
f011d484:	68 74 b7 13 f0       	push   $0xf013b774
f011d489:	68 52 03 00 00       	push   $0x352
f011d48e:	68 5a b3 13 f0       	push   $0xf013b35a
f011d493:	e8 6d 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d498:	e8 2b 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d49d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4a0:	74 17                	je     f011d4b9 <test_kmalloc_firstfit1+0xea8>
f011d4a2:	83 ec 04             	sub    $0x4,%esp
f011d4a5:	68 74 b3 13 f0       	push   $0xf013b374
f011d4aa:	68 53 03 00 00       	push   $0x353
f011d4af:	68 5a b3 13 f0       	push   $0xf013b35a
f011d4b4:	e8 4c 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d4b9:	e8 df f6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d4be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4c1:	29 c2                	sub    %eax,%edx
f011d4c3:	89 d0                	mov    %edx,%eax
f011d4c5:	83 f8 40             	cmp    $0x40,%eax
f011d4c8:	74 17                	je     f011d4e1 <test_kmalloc_firstfit1+0xed0>
f011d4ca:	83 ec 04             	sub    $0x4,%esp
f011d4cd:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d4d2:	68 54 03 00 00       	push   $0x354
f011d4d7:	68 5a b3 13 f0       	push   $0xf013b35a
f011d4dc:	e8 24 2d fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d4e1:	e8 b7 f6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d4e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4e9:	e8 da 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d4ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d4f1:	83 ec 0c             	sub    $0xc,%esp
f011d4f4:	68 00 00 20 00       	push   $0x200000
f011d4f9:	e8 87 a3 fe ff       	call   f0107885 <kmalloc>
f011d4fe:	83 c4 10             	add    $0x10,%esp
f011d501:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d507:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d50d:	89 c1                	mov    %eax,%ecx
f011d50f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d516:	10 00 00 
f011d519:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d51f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d524:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d52a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d530:	ba 00 00 00 00       	mov    $0x0,%edx
f011d535:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d53b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d541:	29 d0                	sub    %edx,%eax
f011d543:	89 c3                	mov    %eax,%ebx
f011d545:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d54c:	10 00 00 
f011d54f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d554:	0f b6 d0             	movzbl %al,%edx
f011d557:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d55d:	01 d0                	add    %edx,%eax
f011d55f:	48                   	dec    %eax
f011d560:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d566:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d56c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d571:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d577:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d57d:	29 d0                	sub    %edx,%eax
f011d57f:	01 c3                	add    %eax,%ebx
f011d581:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d588:	10 00 00 
f011d58b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d590:	0f b6 c0             	movzbl %al,%eax
f011d593:	c1 e0 04             	shl    $0x4,%eax
f011d596:	89 c2                	mov    %eax,%edx
f011d598:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d59e:	01 d0                	add    %edx,%eax
f011d5a0:	48                   	dec    %eax
f011d5a1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d5a7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d5ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5b2:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d5b8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d5be:	29 d0                	sub    %edx,%eax
f011d5c0:	01 d8                	add    %ebx,%eax
f011d5c2:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d5c7:	39 c1                	cmp    %eax,%ecx
f011d5c9:	74 17                	je     f011d5e2 <test_kmalloc_firstfit1+0xfd1>
f011d5cb:	83 ec 04             	sub    $0x4,%esp
f011d5ce:	68 74 b7 13 f0       	push   $0xf013b774
f011d5d3:	68 5a 03 00 00       	push   $0x35a
f011d5d8:	68 5a b3 13 f0       	push   $0xf013b35a
f011d5dd:	e8 23 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d5e2:	e8 b6 f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d5e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5ea:	29 c2                	sub    %eax,%edx
f011d5ec:	89 d0                	mov    %edx,%eax
f011d5ee:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d5f3:	74 17                	je     f011d60c <test_kmalloc_firstfit1+0xffb>
f011d5f5:	83 ec 04             	sub    $0x4,%esp
f011d5f8:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d5fd:	68 5b 03 00 00       	push   $0x35b
f011d602:	68 5a b3 13 f0       	push   $0xf013b35a
f011d607:	e8 f9 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d60c:	e8 b7 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d611:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d614:	74 17                	je     f011d62d <test_kmalloc_firstfit1+0x101c>
f011d616:	83 ec 04             	sub    $0x4,%esp
f011d619:	68 74 b3 13 f0       	push   $0xf013b374
f011d61e:	68 5c 03 00 00       	push   $0x35c
f011d623:	68 5a b3 13 f0       	push   $0xf013b35a
f011d628:	e8 d8 2b fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d62d:	e8 6b f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d632:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d635:	e8 8e 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d63a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d63d:	83 ec 0c             	sub    $0xc,%esp
f011d640:	68 00 fc 3f 00       	push   $0x3ffc00
f011d645:	e8 3b a2 fe ff       	call   f0107885 <kmalloc>
f011d64a:	83 c4 10             	add    $0x10,%esp
f011d64d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d653:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d659:	89 c1                	mov    %eax,%ecx
f011d65b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d662:	10 00 00 
f011d665:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d66b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d670:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d676:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d67c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d681:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d687:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d68d:	29 d0                	sub    %edx,%eax
f011d68f:	89 c3                	mov    %eax,%ebx
f011d691:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d698:	10 00 00 
f011d69b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d6a0:	0f b6 d0             	movzbl %al,%edx
f011d6a3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d6a9:	01 d0                	add    %edx,%eax
f011d6ab:	48                   	dec    %eax
f011d6ac:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d6b2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d6b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6bd:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d6c3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d6c9:	29 d0                	sub    %edx,%eax
f011d6cb:	01 c3                	add    %eax,%ebx
f011d6cd:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d6d4:	10 00 00 
f011d6d7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d6dc:	0f b6 c0             	movzbl %al,%eax
f011d6df:	c1 e0 04             	shl    $0x4,%eax
f011d6e2:	89 c2                	mov    %eax,%edx
f011d6e4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d6ea:	01 d0                	add    %edx,%eax
f011d6ec:	48                   	dec    %eax
f011d6ed:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d6f3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6fe:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d704:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d70a:	29 d0                	sub    %edx,%eax
f011d70c:	01 d8                	add    %ebx,%eax
f011d70e:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d713:	39 c1                	cmp    %eax,%ecx
f011d715:	74 17                	je     f011d72e <test_kmalloc_firstfit1+0x111d>
f011d717:	83 ec 04             	sub    $0x4,%esp
f011d71a:	68 74 b7 13 f0       	push   $0xf013b774
f011d71f:	68 63 03 00 00       	push   $0x363
f011d724:	68 5a b3 13 f0       	push   $0xf013b35a
f011d729:	e8 d7 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d72e:	e8 95 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d733:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d736:	74 17                	je     f011d74f <test_kmalloc_firstfit1+0x113e>
f011d738:	83 ec 04             	sub    $0x4,%esp
f011d73b:	68 74 b3 13 f0       	push   $0xf013b374
f011d740:	68 64 03 00 00       	push   $0x364
f011d745:	68 5a b3 13 f0       	push   $0xf013b35a
f011d74a:	e8 b6 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d74f:	e8 49 f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d754:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d757:	29 c2                	sub    %eax,%edx
f011d759:	89 d0                	mov    %edx,%eax
f011d75b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d760:	74 17                	je     f011d779 <test_kmalloc_firstfit1+0x1168>
f011d762:	83 ec 04             	sub    $0x4,%esp
f011d765:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d76a:	68 65 03 00 00       	push   $0x365
f011d76f:	68 5a b3 13 f0       	push   $0xf013b35a
f011d774:	e8 8c 2a fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d779:	e8 1f f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d77e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d781:	e8 42 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d786:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d789:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d78f:	83 ec 0c             	sub    $0xc,%esp
f011d792:	50                   	push   %eax
f011d793:	e8 b8 a1 fe ff       	call   f0107950 <kfree>
f011d798:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d79b:	e8 28 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7a3:	74 17                	je     f011d7bc <test_kmalloc_firstfit1+0x11ab>
f011d7a5:	83 ec 04             	sub    $0x4,%esp
f011d7a8:	68 74 b3 13 f0       	push   $0xf013b374
f011d7ad:	68 6e 03 00 00       	push   $0x36e
f011d7b2:	68 5a b3 13 f0       	push   $0xf013b35a
f011d7b7:	e8 49 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d7bc:	e8 dc f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d7c1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d7c9:	74 17                	je     f011d7e2 <test_kmalloc_firstfit1+0x11d1>
f011d7cb:	83 ec 04             	sub    $0x4,%esp
f011d7ce:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011d7d3:	68 6f 03 00 00       	push   $0x36f
f011d7d8:	68 5a b3 13 f0       	push   $0xf013b35a
f011d7dd:	e8 23 2a fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d7e2:	e8 b6 f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d7e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7ea:	e8 d9 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d7f2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d7f8:	83 ec 0c             	sub    $0xc,%esp
f011d7fb:	50                   	push   %eax
f011d7fc:	e8 4f a1 fe ff       	call   f0107950 <kfree>
f011d801:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d804:	e8 bf 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d809:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d80c:	74 17                	je     f011d825 <test_kmalloc_firstfit1+0x1214>
f011d80e:	83 ec 04             	sub    $0x4,%esp
f011d811:	68 74 b3 13 f0       	push   $0xf013b374
f011d816:	68 75 03 00 00       	push   $0x375
f011d81b:	68 5a b3 13 f0       	push   $0xf013b35a
f011d820:	e8 e0 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d825:	e8 73 f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d82a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d82d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d832:	74 17                	je     f011d84b <test_kmalloc_firstfit1+0x123a>
f011d834:	83 ec 04             	sub    $0x4,%esp
f011d837:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011d83c:	68 76 03 00 00       	push   $0x376
f011d841:	68 5a b3 13 f0       	push   $0xf013b35a
f011d846:	e8 ba 29 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d84b:	e8 4d f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d850:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d853:	e8 70 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d858:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d85b:	83 ec 0c             	sub    $0xc,%esp
f011d85e:	68 00 00 10 00       	push   $0x100000
f011d863:	e8 1d a0 fe ff       	call   f0107885 <kmalloc>
f011d868:	83 c4 10             	add    $0x10,%esp
f011d86b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d871:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d877:	89 c1                	mov    %eax,%ecx
f011d879:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d880:	10 00 00 
f011d883:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d889:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d88e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d894:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d89a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d89f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d8a5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d8ab:	29 d0                	sub    %edx,%eax
f011d8ad:	89 c3                	mov    %eax,%ebx
f011d8af:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d8b6:	10 00 00 
f011d8b9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d8be:	0f b6 d0             	movzbl %al,%edx
f011d8c1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d8c7:	01 d0                	add    %edx,%eax
f011d8c9:	48                   	dec    %eax
f011d8ca:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d8d0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d8d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8db:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d8e1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d8e7:	29 d0                	sub    %edx,%eax
f011d8e9:	01 c3                	add    %eax,%ebx
f011d8eb:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d8f2:	10 00 00 
f011d8f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d8fa:	0f b6 c0             	movzbl %al,%eax
f011d8fd:	c1 e0 04             	shl    $0x4,%eax
f011d900:	89 c2                	mov    %eax,%edx
f011d902:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d908:	01 d0                	add    %edx,%eax
f011d90a:	48                   	dec    %eax
f011d90b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d911:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d917:	ba 00 00 00 00       	mov    $0x0,%edx
f011d91c:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d922:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d928:	29 d0                	sub    %edx,%eax
f011d92a:	01 d8                	add    %ebx,%eax
f011d92c:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d931:	39 c1                	cmp    %eax,%ecx
f011d933:	74 17                	je     f011d94c <test_kmalloc_firstfit1+0x133b>
f011d935:	83 ec 04             	sub    $0x4,%esp
f011d938:	68 74 b7 13 f0       	push   $0xf013b774
f011d93d:	68 80 03 00 00       	push   $0x380
f011d942:	68 5a b3 13 f0       	push   $0xf013b35a
f011d947:	e8 b9 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d94c:	e8 77 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d951:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d954:	74 17                	je     f011d96d <test_kmalloc_firstfit1+0x135c>
f011d956:	83 ec 04             	sub    $0x4,%esp
f011d959:	68 74 b3 13 f0       	push   $0xf013b374
f011d95e:	68 81 03 00 00       	push   $0x381
f011d963:	68 5a b3 13 f0       	push   $0xf013b35a
f011d968:	e8 98 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d96d:	e8 2b f2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d972:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d975:	29 c2                	sub    %eax,%edx
f011d977:	89 d0                	mov    %edx,%eax
f011d979:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d97e:	74 17                	je     f011d997 <test_kmalloc_firstfit1+0x1386>
f011d980:	83 ec 04             	sub    $0x4,%esp
f011d983:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011d988:	68 82 03 00 00       	push   $0x382
f011d98d:	68 5a b3 13 f0       	push   $0xf013b35a
f011d992:	e8 6e 28 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d997:	83 ec 0c             	sub    $0xc,%esp
f011d99a:	68 50 b9 13 f0       	push   $0xf013b950
f011d99f:	e8 6a 33 fe ff       	call   f0100d0e <cprintf>
f011d9a4:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d9a7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d9ac:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d9af:	5b                   	pop    %ebx
f011d9b0:	5f                   	pop    %edi
f011d9b1:	5d                   	pop    %ebp
f011d9b2:	c3                   	ret    

f011d9b3 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d9b3:	55                   	push   %ebp
f011d9b4:	89 e5                	mov    %esp,%ebp
f011d9b6:	57                   	push   %edi
f011d9b7:	53                   	push   %ebx
f011d9b8:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d9be:	83 ec 0c             	sub    $0xc,%esp
f011d9c1:	68 9c b2 13 f0       	push   $0xf013b29c
f011d9c6:	e8 43 33 fe ff       	call   f0100d0e <cprintf>
f011d9cb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d9ce:	83 ec 0c             	sub    $0xc,%esp
f011d9d1:	68 cc b2 13 f0       	push   $0xf013b2cc
f011d9d6:	e8 33 33 fe ff       	call   f0100d0e <cprintf>
f011d9db:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d9de:	83 ec 0c             	sub    $0xc,%esp
f011d9e1:	68 9c b2 13 f0       	push   $0xf013b29c
f011d9e6:	e8 23 33 fe ff       	call   f0100d0e <cprintf>
f011d9eb:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d9ee:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d9f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d9f9:	b8 00 00 00 00       	mov    $0x0,%eax
f011d9fe:	89 d7                	mov    %edx,%edi
f011da00:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011da02:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011da09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011da0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da11:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011da14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011da17:	ba 00 00 00 00       	mov    $0x0,%edx
f011da1c:	f7 75 f4             	divl   -0xc(%ebp)
f011da1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011da22:	29 d0                	sub    %edx,%eax
f011da24:	89 c1                	mov    %eax,%ecx
f011da26:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011da2d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011da32:	0f b6 d0             	movzbl %al,%edx
f011da35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011da38:	01 d0                	add    %edx,%eax
f011da3a:	48                   	dec    %eax
f011da3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011da3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011da41:	ba 00 00 00 00       	mov    $0x0,%edx
f011da46:	f7 75 ec             	divl   -0x14(%ebp)
f011da49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011da4c:	29 d0                	sub    %edx,%eax
f011da4e:	01 c1                	add    %eax,%ecx
f011da50:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011da57:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011da5c:	0f b6 c0             	movzbl %al,%eax
f011da5f:	c1 e0 04             	shl    $0x4,%eax
f011da62:	89 c2                	mov    %eax,%edx
f011da64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011da67:	01 d0                	add    %edx,%eax
f011da69:	48                   	dec    %eax
f011da6a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011da6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011da70:	ba 00 00 00 00       	mov    $0x0,%edx
f011da75:	f7 75 e4             	divl   -0x1c(%ebp)
f011da78:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011da7b:	29 d0                	sub    %edx,%eax
f011da7d:	01 c8                	add    %ecx,%eax
f011da7f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011da84:	29 c2                	sub    %eax,%edx
f011da86:	89 d0                	mov    %edx,%eax
f011da88:	83 ec 0c             	sub    $0xc,%esp
f011da8b:	50                   	push   %eax
f011da8c:	e8 f4 9d fe ff       	call   f0107885 <kmalloc>
f011da91:	83 c4 10             	add    $0x10,%esp
f011da94:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011da9a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011daa0:	85 c0                	test   %eax,%eax
f011daa2:	74 17                	je     f011dabb <test_kmalloc_firstfit2+0x108>
f011daa4:	83 ec 04             	sub    $0x4,%esp
f011daa7:	68 9c b9 13 f0       	push   $0xf013b99c
f011daac:	68 97 03 00 00       	push   $0x397
f011dab1:	68 5a b3 13 f0       	push   $0xf013b35a
f011dab6:	e8 4a 27 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dabb:	e8 dd f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dac0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dac3:	e8 00 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dac8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011dacb:	83 ec 0c             	sub    $0xc,%esp
f011dace:	68 00 fc 1f 00       	push   $0x1ffc00
f011dad3:	e8 ad 9d fe ff       	call   f0107885 <kmalloc>
f011dad8:	83 c4 10             	add    $0x10,%esp
f011dadb:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011dae1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dae7:	89 c1                	mov    %eax,%ecx
f011dae9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011daf0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011daf3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011daf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011dafb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dafe:	ba 00 00 00 00       	mov    $0x0,%edx
f011db03:	f7 75 d4             	divl   -0x2c(%ebp)
f011db06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011db09:	29 d0                	sub    %edx,%eax
f011db0b:	89 c3                	mov    %eax,%ebx
f011db0d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011db14:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011db19:	0f b6 d0             	movzbl %al,%edx
f011db1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011db1f:	01 d0                	add    %edx,%eax
f011db21:	48                   	dec    %eax
f011db22:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011db25:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011db28:	ba 00 00 00 00       	mov    $0x0,%edx
f011db2d:	f7 75 cc             	divl   -0x34(%ebp)
f011db30:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011db33:	29 d0                	sub    %edx,%eax
f011db35:	01 c3                	add    %eax,%ebx
f011db37:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011db3e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011db43:	0f b6 c0             	movzbl %al,%eax
f011db46:	c1 e0 04             	shl    $0x4,%eax
f011db49:	89 c2                	mov    %eax,%edx
f011db4b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011db4e:	01 d0                	add    %edx,%eax
f011db50:	48                   	dec    %eax
f011db51:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011db54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011db57:	ba 00 00 00 00       	mov    $0x0,%edx
f011db5c:	f7 75 c4             	divl   -0x3c(%ebp)
f011db5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011db62:	29 d0                	sub    %edx,%eax
f011db64:	01 d8                	add    %ebx,%eax
f011db66:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011db6b:	39 c1                	cmp    %eax,%ecx
f011db6d:	74 17                	je     f011db86 <test_kmalloc_firstfit2+0x1d3>
f011db6f:	83 ec 04             	sub    $0x4,%esp
f011db72:	68 74 b7 13 f0       	push   $0xf013b774
f011db77:	68 a1 03 00 00       	push   $0x3a1
f011db7c:	68 5a b3 13 f0       	push   $0xf013b35a
f011db81:	e8 7f 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db86:	e8 3d 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db8b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db8e:	74 17                	je     f011dba7 <test_kmalloc_firstfit2+0x1f4>
f011db90:	83 ec 04             	sub    $0x4,%esp
f011db93:	68 74 b3 13 f0       	push   $0xf013b374
f011db98:	68 a2 03 00 00       	push   $0x3a2
f011db9d:	68 5a b3 13 f0       	push   $0xf013b35a
f011dba2:	e8 5e 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dba7:	e8 f1 ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dbac:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dbaf:	29 c2                	sub    %eax,%edx
f011dbb1:	89 d0                	mov    %edx,%eax
f011dbb3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dbb8:	74 17                	je     f011dbd1 <test_kmalloc_firstfit2+0x21e>
f011dbba:	83 ec 04             	sub    $0x4,%esp
f011dbbd:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011dbc2:	68 a3 03 00 00       	push   $0x3a3
f011dbc7:	68 5a b3 13 f0       	push   $0xf013b35a
f011dbcc:	e8 34 26 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dbd1:	e8 c7 ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dbd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbd9:	e8 ea 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dbde:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011dbe1:	83 ec 0c             	sub    $0xc,%esp
f011dbe4:	68 00 fc 1f 00       	push   $0x1ffc00
f011dbe9:	e8 97 9c fe ff       	call   f0107885 <kmalloc>
f011dbee:	83 c4 10             	add    $0x10,%esp
f011dbf1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011dbf7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011dbfd:	89 c1                	mov    %eax,%ecx
f011dbff:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011dc06:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011dc09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc0e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011dc11:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dc14:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc19:	f7 75 bc             	divl   -0x44(%ebp)
f011dc1c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dc1f:	29 d0                	sub    %edx,%eax
f011dc21:	89 c3                	mov    %eax,%ebx
f011dc23:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011dc2a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dc2f:	0f b6 d0             	movzbl %al,%edx
f011dc32:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dc35:	01 d0                	add    %edx,%eax
f011dc37:	48                   	dec    %eax
f011dc38:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011dc3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dc3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc43:	f7 75 b4             	divl   -0x4c(%ebp)
f011dc46:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dc49:	29 d0                	sub    %edx,%eax
f011dc4b:	01 c3                	add    %eax,%ebx
f011dc4d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dc54:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dc59:	0f b6 c0             	movzbl %al,%eax
f011dc5c:	c1 e0 04             	shl    $0x4,%eax
f011dc5f:	89 c2                	mov    %eax,%edx
f011dc61:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dc64:	01 d0                	add    %edx,%eax
f011dc66:	48                   	dec    %eax
f011dc67:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011dc6a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dc6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc72:	f7 75 ac             	divl   -0x54(%ebp)
f011dc75:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dc78:	29 d0                	sub    %edx,%eax
f011dc7a:	01 d8                	add    %ebx,%eax
f011dc7c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011dc81:	39 c1                	cmp    %eax,%ecx
f011dc83:	74 17                	je     f011dc9c <test_kmalloc_firstfit2+0x2e9>
f011dc85:	83 ec 04             	sub    $0x4,%esp
f011dc88:	68 74 b7 13 f0       	push   $0xf013b774
f011dc8d:	68 a9 03 00 00       	push   $0x3a9
f011dc92:	68 5a b3 13 f0       	push   $0xf013b35a
f011dc97:	e8 69 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc9c:	e8 27 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dca1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dca4:	74 17                	je     f011dcbd <test_kmalloc_firstfit2+0x30a>
f011dca6:	83 ec 04             	sub    $0x4,%esp
f011dca9:	68 74 b3 13 f0       	push   $0xf013b374
f011dcae:	68 aa 03 00 00       	push   $0x3aa
f011dcb3:	68 5a b3 13 f0       	push   $0xf013b35a
f011dcb8:	e8 48 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dcbd:	e8 db ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dcc2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dcc5:	29 c2                	sub    %eax,%edx
f011dcc7:	89 d0                	mov    %edx,%eax
f011dcc9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dcce:	74 17                	je     f011dce7 <test_kmalloc_firstfit2+0x334>
f011dcd0:	83 ec 04             	sub    $0x4,%esp
f011dcd3:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011dcd8:	68 ab 03 00 00       	push   $0x3ab
f011dcdd:	68 5a b3 13 f0       	push   $0xf013b35a
f011dce2:	e8 1e 25 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dce7:	e8 b1 ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dcec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcef:	e8 d4 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dcf4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011dcf7:	83 ec 0c             	sub    $0xc,%esp
f011dcfa:	68 00 08 00 00       	push   $0x800
f011dcff:	e8 81 9b fe ff       	call   f0107885 <kmalloc>
f011dd04:	83 c4 10             	add    $0x10,%esp
f011dd07:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011dd0d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dd13:	89 c1                	mov    %eax,%ecx
f011dd15:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011dd1c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dd1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd24:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011dd27:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dd2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd2f:	f7 75 a4             	divl   -0x5c(%ebp)
f011dd32:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dd35:	29 d0                	sub    %edx,%eax
f011dd37:	89 c3                	mov    %eax,%ebx
f011dd39:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dd40:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dd45:	0f b6 d0             	movzbl %al,%edx
f011dd48:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dd4b:	01 d0                	add    %edx,%eax
f011dd4d:	48                   	dec    %eax
f011dd4e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dd51:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd59:	f7 75 9c             	divl   -0x64(%ebp)
f011dd5c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dd5f:	29 d0                	sub    %edx,%eax
f011dd61:	01 c3                	add    %eax,%ebx
f011dd63:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dd6a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dd6f:	0f b6 c0             	movzbl %al,%eax
f011dd72:	c1 e0 04             	shl    $0x4,%eax
f011dd75:	89 c2                	mov    %eax,%edx
f011dd77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dd7a:	01 d0                	add    %edx,%eax
f011dd7c:	48                   	dec    %eax
f011dd7d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dd80:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dd83:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd88:	f7 75 94             	divl   -0x6c(%ebp)
f011dd8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dd8e:	29 d0                	sub    %edx,%eax
f011dd90:	01 d8                	add    %ebx,%eax
f011dd92:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dd97:	39 c1                	cmp    %eax,%ecx
f011dd99:	73 17                	jae    f011ddb2 <test_kmalloc_firstfit2+0x3ff>
f011dd9b:	83 ec 04             	sub    $0x4,%esp
f011dd9e:	68 74 b7 13 f0       	push   $0xf013b774
f011dda3:	68 b1 03 00 00       	push   $0x3b1
f011dda8:	68 5a b3 13 f0       	push   $0xf013b35a
f011ddad:	e8 53 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddb2:	e8 11 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddb7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ddba:	74 17                	je     f011ddd3 <test_kmalloc_firstfit2+0x420>
f011ddbc:	83 ec 04             	sub    $0x4,%esp
f011ddbf:	68 74 b3 13 f0       	push   $0xf013b374
f011ddc4:	68 b2 03 00 00       	push   $0x3b2
f011ddc9:	68 5a b3 13 f0       	push   $0xf013b35a
f011ddce:	e8 32 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011ddd3:	e8 c5 ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ddd8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dddb:	29 c2                	sub    %eax,%edx
f011dddd:	89 d0                	mov    %edx,%eax
f011dddf:	83 f8 01             	cmp    $0x1,%eax
f011dde2:	74 17                	je     f011ddfb <test_kmalloc_firstfit2+0x448>
f011dde4:	83 ec 04             	sub    $0x4,%esp
f011dde7:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011ddec:	68 b3 03 00 00       	push   $0x3b3
f011ddf1:	68 5a b3 13 f0       	push   $0xf013b35a
f011ddf6:	e8 0a 24 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ddfb:	e8 9d ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011de00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de03:	e8 c0 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de08:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011de0b:	83 ec 0c             	sub    $0xc,%esp
f011de0e:	68 00 08 00 00       	push   $0x800
f011de13:	e8 6d 9a fe ff       	call   f0107885 <kmalloc>
f011de18:	83 c4 10             	add    $0x10,%esp
f011de1b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011de21:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011de27:	89 c1                	mov    %eax,%ecx
f011de29:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011de30:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011de33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de38:	89 45 88             	mov    %eax,-0x78(%ebp)
f011de3b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011de3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011de43:	f7 75 8c             	divl   -0x74(%ebp)
f011de46:	8b 45 88             	mov    -0x78(%ebp),%eax
f011de49:	29 d0                	sub    %edx,%eax
f011de4b:	89 c3                	mov    %eax,%ebx
f011de4d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011de54:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011de59:	0f b6 d0             	movzbl %al,%edx
f011de5c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011de5f:	01 d0                	add    %edx,%eax
f011de61:	48                   	dec    %eax
f011de62:	89 45 80             	mov    %eax,-0x80(%ebp)
f011de65:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de68:	ba 00 00 00 00       	mov    $0x0,%edx
f011de6d:	f7 75 84             	divl   -0x7c(%ebp)
f011de70:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de73:	29 d0                	sub    %edx,%eax
f011de75:	01 c3                	add    %eax,%ebx
f011de77:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011de7e:	10 00 00 
f011de81:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011de86:	0f b6 c0             	movzbl %al,%eax
f011de89:	c1 e0 04             	shl    $0x4,%eax
f011de8c:	89 c2                	mov    %eax,%edx
f011de8e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011de94:	01 d0                	add    %edx,%eax
f011de96:	48                   	dec    %eax
f011de97:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011de9d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dea3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dea8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011deae:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011deb4:	29 d0                	sub    %edx,%eax
f011deb6:	01 d8                	add    %ebx,%eax
f011deb8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011debd:	39 c1                	cmp    %eax,%ecx
f011debf:	74 17                	je     f011ded8 <test_kmalloc_firstfit2+0x525>
f011dec1:	83 ec 04             	sub    $0x4,%esp
f011dec4:	68 74 b7 13 f0       	push   $0xf013b774
f011dec9:	68 b9 03 00 00       	push   $0x3b9
f011dece:	68 5a b3 13 f0       	push   $0xf013b35a
f011ded3:	e8 2d 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ded8:	e8 eb 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dedd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dee0:	74 17                	je     f011def9 <test_kmalloc_firstfit2+0x546>
f011dee2:	83 ec 04             	sub    $0x4,%esp
f011dee5:	68 74 b3 13 f0       	push   $0xf013b374
f011deea:	68 ba 03 00 00       	push   $0x3ba
f011deef:	68 5a b3 13 f0       	push   $0xf013b35a
f011def4:	e8 0c 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011def9:	e8 9f ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011defe:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011df01:	29 c2                	sub    %eax,%edx
f011df03:	89 d0                	mov    %edx,%eax
f011df05:	83 f8 01             	cmp    $0x1,%eax
f011df08:	74 17                	je     f011df21 <test_kmalloc_firstfit2+0x56e>
f011df0a:	83 ec 04             	sub    $0x4,%esp
f011df0d:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011df12:	68 bb 03 00 00       	push   $0x3bb
f011df17:	68 5a b3 13 f0       	push   $0xf013b35a
f011df1c:	e8 e4 22 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011df21:	e8 77 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df26:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df29:	e8 9a 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011df31:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011df37:	83 ec 0c             	sub    $0xc,%esp
f011df3a:	50                   	push   %eax
f011df3b:	e8 10 9a fe ff       	call   f0107950 <kfree>
f011df40:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df43:	e8 80 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df48:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df4b:	74 17                	je     f011df64 <test_kmalloc_firstfit2+0x5b1>
f011df4d:	83 ec 04             	sub    $0x4,%esp
f011df50:	68 74 b3 13 f0       	push   $0xf013b374
f011df55:	68 c1 03 00 00       	push   $0x3c1
f011df5a:	68 5a b3 13 f0       	push   $0xf013b35a
f011df5f:	e8 a1 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011df64:	e8 34 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df69:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011df6c:	83 f8 01             	cmp    $0x1,%eax
f011df6f:	74 17                	je     f011df88 <test_kmalloc_firstfit2+0x5d5>
f011df71:	83 ec 04             	sub    $0x4,%esp
f011df74:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011df79:	68 c2 03 00 00       	push   $0x3c2
f011df7e:	68 5a b3 13 f0       	push   $0xf013b35a
f011df83:	e8 7d 22 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011df88:	e8 10 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011df8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df90:	e8 33 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df95:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011df98:	83 ec 0c             	sub    $0xc,%esp
f011df9b:	68 00 1c 00 00       	push   $0x1c00
f011dfa0:	e8 e0 98 fe ff       	call   f0107885 <kmalloc>
f011dfa5:	83 c4 10             	add    $0x10,%esp
f011dfa8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dfae:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dfb4:	89 c1                	mov    %eax,%ecx
f011dfb6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011dfbd:	10 00 00 
f011dfc0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011dfc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfcb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011dfd1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dfd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfdc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dfe2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dfe8:	29 d0                	sub    %edx,%eax
f011dfea:	89 c3                	mov    %eax,%ebx
f011dfec:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dff3:	10 00 00 
f011dff6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dffb:	0f b6 d0             	movzbl %al,%edx
f011dffe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e004:	01 d0                	add    %edx,%eax
f011e006:	48                   	dec    %eax
f011e007:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e00d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e013:	ba 00 00 00 00       	mov    $0x0,%edx
f011e018:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e01e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e024:	29 d0                	sub    %edx,%eax
f011e026:	01 c3                	add    %eax,%ebx
f011e028:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e02f:	10 00 00 
f011e032:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e037:	0f b6 c0             	movzbl %al,%eax
f011e03a:	c1 e0 04             	shl    $0x4,%eax
f011e03d:	89 c2                	mov    %eax,%edx
f011e03f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e045:	01 d0                	add    %edx,%eax
f011e047:	48                   	dec    %eax
f011e048:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e04e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e054:	ba 00 00 00 00       	mov    $0x0,%edx
f011e059:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e05f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e065:	29 d0                	sub    %edx,%eax
f011e067:	01 d8                	add    %ebx,%eax
f011e069:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e06e:	39 c1                	cmp    %eax,%ecx
f011e070:	74 17                	je     f011e089 <test_kmalloc_firstfit2+0x6d6>
f011e072:	83 ec 04             	sub    $0x4,%esp
f011e075:	68 74 b7 13 f0       	push   $0xf013b774
f011e07a:	68 c8 03 00 00       	push   $0x3c8
f011e07f:	68 5a b3 13 f0       	push   $0xf013b35a
f011e084:	e8 7c 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e089:	e8 3a 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e08e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e091:	74 17                	je     f011e0aa <test_kmalloc_firstfit2+0x6f7>
f011e093:	83 ec 04             	sub    $0x4,%esp
f011e096:	68 74 b3 13 f0       	push   $0xf013b374
f011e09b:	68 c9 03 00 00       	push   $0x3c9
f011e0a0:	68 5a b3 13 f0       	push   $0xf013b35a
f011e0a5:	e8 5b 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e0aa:	e8 ee ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e0af:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0b2:	29 c2                	sub    %eax,%edx
f011e0b4:	89 d0                	mov    %edx,%eax
f011e0b6:	83 f8 02             	cmp    $0x2,%eax
f011e0b9:	74 17                	je     f011e0d2 <test_kmalloc_firstfit2+0x71f>
f011e0bb:	83 ec 04             	sub    $0x4,%esp
f011e0be:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011e0c3:	68 ca 03 00 00       	push   $0x3ca
f011e0c8:	68 5a b3 13 f0       	push   $0xf013b35a
f011e0cd:	e8 33 21 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e0d2:	e8 c6 ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e0d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e0da:	e8 e9 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e0e2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e0e8:	83 ec 0c             	sub    $0xc,%esp
f011e0eb:	50                   	push   %eax
f011e0ec:	e8 5f 98 fe ff       	call   f0107950 <kfree>
f011e0f1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0f4:	e8 cf 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0fc:	74 17                	je     f011e115 <test_kmalloc_firstfit2+0x762>
f011e0fe:	83 ec 04             	sub    $0x4,%esp
f011e101:	68 74 b3 13 f0       	push   $0xf013b374
f011e106:	68 d0 03 00 00       	push   $0x3d0
f011e10b:	68 5a b3 13 f0       	push   $0xf013b35a
f011e110:	e8 f0 20 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e115:	e8 83 ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e11a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e11d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e122:	74 17                	je     f011e13b <test_kmalloc_firstfit2+0x788>
f011e124:	83 ec 04             	sub    $0x4,%esp
f011e127:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011e12c:	68 d1 03 00 00       	push   $0x3d1
f011e131:	68 5a b3 13 f0       	push   $0xf013b35a
f011e136:	e8 ca 20 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e13b:	e8 5d ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e140:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e143:	e8 80 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e148:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e14b:	83 ec 0c             	sub    $0xc,%esp
f011e14e:	68 00 fc 2f 00       	push   $0x2ffc00
f011e153:	e8 2d 97 fe ff       	call   f0107885 <kmalloc>
f011e158:	83 c4 10             	add    $0x10,%esp
f011e15b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e161:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e167:	89 c1                	mov    %eax,%ecx
f011e169:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e170:	10 00 00 
f011e173:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e179:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e17e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e184:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e18a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e18f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e195:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e19b:	29 d0                	sub    %edx,%eax
f011e19d:	89 c3                	mov    %eax,%ebx
f011e19f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e1a6:	10 00 00 
f011e1a9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e1ae:	0f b6 d0             	movzbl %al,%edx
f011e1b1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e1b7:	01 d0                	add    %edx,%eax
f011e1b9:	48                   	dec    %eax
f011e1ba:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e1c0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e1c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1cb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e1d1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e1d7:	29 d0                	sub    %edx,%eax
f011e1d9:	01 c3                	add    %eax,%ebx
f011e1db:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e1e2:	10 00 00 
f011e1e5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e1ea:	0f b6 c0             	movzbl %al,%eax
f011e1ed:	c1 e0 04             	shl    $0x4,%eax
f011e1f0:	89 c2                	mov    %eax,%edx
f011e1f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e1f8:	01 d0                	add    %edx,%eax
f011e1fa:	48                   	dec    %eax
f011e1fb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e201:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e207:	ba 00 00 00 00       	mov    $0x0,%edx
f011e20c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e212:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e218:	29 d0                	sub    %edx,%eax
f011e21a:	01 d8                	add    %ebx,%eax
f011e21c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e221:	39 c1                	cmp    %eax,%ecx
f011e223:	74 17                	je     f011e23c <test_kmalloc_firstfit2+0x889>
f011e225:	83 ec 04             	sub    $0x4,%esp
f011e228:	68 74 b7 13 f0       	push   $0xf013b774
f011e22d:	68 d7 03 00 00       	push   $0x3d7
f011e232:	68 5a b3 13 f0       	push   $0xf013b35a
f011e237:	e8 c9 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e23c:	e8 87 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e241:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e244:	74 17                	je     f011e25d <test_kmalloc_firstfit2+0x8aa>
f011e246:	83 ec 04             	sub    $0x4,%esp
f011e249:	68 74 b3 13 f0       	push   $0xf013b374
f011e24e:	68 d8 03 00 00       	push   $0x3d8
f011e253:	68 5a b3 13 f0       	push   $0xf013b35a
f011e258:	e8 a8 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e25d:	e8 3b e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e262:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e265:	29 c2                	sub    %eax,%edx
f011e267:	89 d0                	mov    %edx,%eax
f011e269:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e26e:	74 17                	je     f011e287 <test_kmalloc_firstfit2+0x8d4>
f011e270:	83 ec 04             	sub    $0x4,%esp
f011e273:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011e278:	68 d9 03 00 00       	push   $0x3d9
f011e27d:	68 5a b3 13 f0       	push   $0xf013b35a
f011e282:	e8 7e 1f fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e287:	e8 11 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e28c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e28f:	e8 34 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e294:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e297:	83 ec 0c             	sub    $0xc,%esp
f011e29a:	68 00 18 20 00       	push   $0x201800
f011e29f:	e8 e1 95 fe ff       	call   f0107885 <kmalloc>
f011e2a4:	83 c4 10             	add    $0x10,%esp
f011e2a7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e2ad:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e2b3:	89 c1                	mov    %eax,%ecx
f011e2b5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e2bc:	10 00 00 
f011e2bf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e2c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2ca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e2d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2db:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e2e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e2e7:	29 d0                	sub    %edx,%eax
f011e2e9:	89 c3                	mov    %eax,%ebx
f011e2eb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e2f2:	10 00 00 
f011e2f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e2fa:	0f b6 d0             	movzbl %al,%edx
f011e2fd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e303:	01 d0                	add    %edx,%eax
f011e305:	48                   	dec    %eax
f011e306:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e30c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e312:	ba 00 00 00 00       	mov    $0x0,%edx
f011e317:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e31d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e323:	29 d0                	sub    %edx,%eax
f011e325:	01 c3                	add    %eax,%ebx
f011e327:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e32e:	10 00 00 
f011e331:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e336:	0f b6 c0             	movzbl %al,%eax
f011e339:	c1 e0 04             	shl    $0x4,%eax
f011e33c:	89 c2                	mov    %eax,%edx
f011e33e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e344:	01 d0                	add    %edx,%eax
f011e346:	48                   	dec    %eax
f011e347:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e34d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e353:	ba 00 00 00 00       	mov    $0x0,%edx
f011e358:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e35e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e364:	29 d0                	sub    %edx,%eax
f011e366:	01 d8                	add    %ebx,%eax
f011e368:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e36d:	39 c1                	cmp    %eax,%ecx
f011e36f:	74 17                	je     f011e388 <test_kmalloc_firstfit2+0x9d5>
f011e371:	83 ec 04             	sub    $0x4,%esp
f011e374:	68 74 b7 13 f0       	push   $0xf013b774
f011e379:	68 df 03 00 00       	push   $0x3df
f011e37e:	68 5a b3 13 f0       	push   $0xf013b35a
f011e383:	e8 7d 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e388:	e8 3b 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e38d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e390:	74 17                	je     f011e3a9 <test_kmalloc_firstfit2+0x9f6>
f011e392:	83 ec 04             	sub    $0x4,%esp
f011e395:	68 74 b3 13 f0       	push   $0xf013b374
f011e39a:	68 e0 03 00 00       	push   $0x3e0
f011e39f:	68 5a b3 13 f0       	push   $0xf013b35a
f011e3a4:	e8 5c 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e3a9:	e8 ef e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e3ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e3b1:	29 c2                	sub    %eax,%edx
f011e3b3:	89 d0                	mov    %edx,%eax
f011e3b5:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e3ba:	74 17                	je     f011e3d3 <test_kmalloc_firstfit2+0xa20>
f011e3bc:	83 ec 04             	sub    $0x4,%esp
f011e3bf:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011e3c4:	68 e1 03 00 00       	push   $0x3e1
f011e3c9:	68 5a b3 13 f0       	push   $0xf013b35a
f011e3ce:	e8 32 1e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e3d3:	e8 c5 e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e3d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3db:	e8 e8 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e3e3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e3e9:	83 ec 0c             	sub    $0xc,%esp
f011e3ec:	50                   	push   %eax
f011e3ed:	e8 5e 95 fe ff       	call   f0107950 <kfree>
f011e3f2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3f5:	e8 ce 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e3fd:	74 17                	je     f011e416 <test_kmalloc_firstfit2+0xa63>
f011e3ff:	83 ec 04             	sub    $0x4,%esp
f011e402:	68 74 b3 13 f0       	push   $0xf013b374
f011e407:	68 e7 03 00 00       	push   $0x3e7
f011e40c:	68 5a b3 13 f0       	push   $0xf013b35a
f011e411:	e8 ef 1d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e416:	e8 82 e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e41b:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e41e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e423:	74 17                	je     f011e43c <test_kmalloc_firstfit2+0xa89>
f011e425:	83 ec 04             	sub    $0x4,%esp
f011e428:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011e42d:	68 e8 03 00 00       	push   $0x3e8
f011e432:	68 5a b3 13 f0       	push   $0xf013b35a
f011e437:	e8 c9 1d fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e43c:	e8 5c e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e441:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e444:	e8 7f 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e449:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e44c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e452:	83 ec 0c             	sub    $0xc,%esp
f011e455:	50                   	push   %eax
f011e456:	e8 f5 94 fe ff       	call   f0107950 <kfree>
f011e45b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e45e:	e8 3a e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e463:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e466:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e46b:	74 17                	je     f011e484 <test_kmalloc_firstfit2+0xad1>
f011e46d:	83 ec 04             	sub    $0x4,%esp
f011e470:	68 b7 b7 13 f0       	push   $0xf013b7b7
f011e475:	68 ee 03 00 00       	push   $0x3ee
f011e47a:	68 5a b3 13 f0       	push   $0xf013b35a
f011e47f:	e8 81 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e484:	e8 3f 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e489:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e48c:	74 17                	je     f011e4a5 <test_kmalloc_firstfit2+0xaf2>
f011e48e:	83 ec 04             	sub    $0x4,%esp
f011e491:	68 74 b3 13 f0       	push   $0xf013b374
f011e496:	68 ef 03 00 00       	push   $0x3ef
f011e49b:	68 5a b3 13 f0       	push   $0xf013b35a
f011e4a0:	e8 60 1d fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e4a5:	e8 f3 e6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e4aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4ad:	e8 16 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e4b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e4b5:	83 ec 0c             	sub    $0xc,%esp
f011e4b8:	68 00 fc 4f 00       	push   $0x4ffc00
f011e4bd:	e8 c3 93 fe ff       	call   f0107885 <kmalloc>
f011e4c2:	83 c4 10             	add    $0x10,%esp
f011e4c5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e4cb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e4d1:	89 c1                	mov    %eax,%ecx
f011e4d3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e4da:	10 00 00 
f011e4dd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e4e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4e8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e4ee:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e4f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4f9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e4ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e505:	29 d0                	sub    %edx,%eax
f011e507:	89 c3                	mov    %eax,%ebx
f011e509:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e510:	10 00 00 
f011e513:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e518:	0f b6 d0             	movzbl %al,%edx
f011e51b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e521:	01 d0                	add    %edx,%eax
f011e523:	48                   	dec    %eax
f011e524:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e52a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e530:	ba 00 00 00 00       	mov    $0x0,%edx
f011e535:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e53b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e541:	29 d0                	sub    %edx,%eax
f011e543:	01 c3                	add    %eax,%ebx
f011e545:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e54c:	10 00 00 
f011e54f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e554:	0f b6 c0             	movzbl %al,%eax
f011e557:	c1 e0 04             	shl    $0x4,%eax
f011e55a:	89 c2                	mov    %eax,%edx
f011e55c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e562:	01 d0                	add    %edx,%eax
f011e564:	48                   	dec    %eax
f011e565:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e56b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e571:	ba 00 00 00 00       	mov    $0x0,%edx
f011e576:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e57c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e582:	29 d0                	sub    %edx,%eax
f011e584:	01 d8                	add    %ebx,%eax
f011e586:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e58b:	39 c1                	cmp    %eax,%ecx
f011e58d:	74 17                	je     f011e5a6 <test_kmalloc_firstfit2+0xbf3>
f011e58f:	83 ec 04             	sub    $0x4,%esp
f011e592:	68 74 b7 13 f0       	push   $0xf013b774
f011e597:	68 f5 03 00 00       	push   $0x3f5
f011e59c:	68 5a b3 13 f0       	push   $0xf013b35a
f011e5a1:	e8 5f 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e5a6:	e8 1d 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e5ae:	74 17                	je     f011e5c7 <test_kmalloc_firstfit2+0xc14>
f011e5b0:	83 ec 04             	sub    $0x4,%esp
f011e5b3:	68 74 b3 13 f0       	push   $0xf013b374
f011e5b8:	68 f6 03 00 00       	push   $0x3f6
f011e5bd:	68 5a b3 13 f0       	push   $0xf013b35a
f011e5c2:	e8 3e 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e5c7:	e8 d1 e5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e5cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e5cf:	29 c2                	sub    %eax,%edx
f011e5d1:	89 d0                	mov    %edx,%eax
f011e5d3:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e5d8:	74 17                	je     f011e5f1 <test_kmalloc_firstfit2+0xc3e>
f011e5da:	83 ec 04             	sub    $0x4,%esp
f011e5dd:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011e5e2:	68 f7 03 00 00       	push   $0x3f7
f011e5e7:	68 5a b3 13 f0       	push   $0xf013b35a
f011e5ec:	e8 14 1c fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e5f1:	e8 a7 e5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e5f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5f9:	e8 ca 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e601:	83 ec 0c             	sub    $0xc,%esp
f011e604:	68 00 fc 2f 00       	push   $0x2ffc00
f011e609:	e8 77 92 fe ff       	call   f0107885 <kmalloc>
f011e60e:	83 c4 10             	add    $0x10,%esp
f011e611:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e617:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e61d:	89 c1                	mov    %eax,%ecx
f011e61f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e626:	10 00 00 
f011e629:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e62f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e634:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e63a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e640:	ba 00 00 00 00       	mov    $0x0,%edx
f011e645:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e64b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e651:	29 d0                	sub    %edx,%eax
f011e653:	89 c3                	mov    %eax,%ebx
f011e655:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e65c:	10 00 00 
f011e65f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e664:	0f b6 d0             	movzbl %al,%edx
f011e667:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e66d:	01 d0                	add    %edx,%eax
f011e66f:	48                   	dec    %eax
f011e670:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e676:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e67c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e681:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e687:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e68d:	29 d0                	sub    %edx,%eax
f011e68f:	01 c3                	add    %eax,%ebx
f011e691:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e698:	10 00 00 
f011e69b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e6a0:	0f b6 c0             	movzbl %al,%eax
f011e6a3:	c1 e0 04             	shl    $0x4,%eax
f011e6a6:	89 c2                	mov    %eax,%edx
f011e6a8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e6ae:	01 d0                	add    %edx,%eax
f011e6b0:	48                   	dec    %eax
f011e6b1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e6b7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e6bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c2:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e6c8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e6ce:	29 d0                	sub    %edx,%eax
f011e6d0:	01 d8                	add    %ebx,%eax
f011e6d2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e6d7:	39 c1                	cmp    %eax,%ecx
f011e6d9:	74 17                	je     f011e6f2 <test_kmalloc_firstfit2+0xd3f>
f011e6db:	83 ec 04             	sub    $0x4,%esp
f011e6de:	68 74 b7 13 f0       	push   $0xf013b774
f011e6e3:	68 05 04 00 00       	push   $0x405
f011e6e8:	68 5a b3 13 f0       	push   $0xf013b35a
f011e6ed:	e8 13 1b fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6f2:	e8 d1 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6fa:	74 17                	je     f011e713 <test_kmalloc_firstfit2+0xd60>
f011e6fc:	83 ec 04             	sub    $0x4,%esp
f011e6ff:	68 74 b3 13 f0       	push   $0xf013b374
f011e704:	68 06 04 00 00       	push   $0x406
f011e709:	68 5a b3 13 f0       	push   $0xf013b35a
f011e70e:	e8 f2 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e713:	e8 85 e4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e718:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e71b:	29 c2                	sub    %eax,%edx
f011e71d:	89 d0                	mov    %edx,%eax
f011e71f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e724:	74 17                	je     f011e73d <test_kmalloc_firstfit2+0xd8a>
f011e726:	83 ec 04             	sub    $0x4,%esp
f011e729:	68 a4 b7 13 f0       	push   $0xf013b7a4
f011e72e:	68 07 04 00 00       	push   $0x407
f011e733:	68 5a b3 13 f0       	push   $0xf013b35a
f011e738:	e8 c8 1a fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e73d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e744:	10 00 00 
f011e747:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e74d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e752:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e758:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e75e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e763:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e769:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e76f:	29 d0                	sub    %edx,%eax
f011e771:	89 c1                	mov    %eax,%ecx
f011e773:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e77a:	10 00 00 
f011e77d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e782:	0f b6 d0             	movzbl %al,%edx
f011e785:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e78b:	01 d0                	add    %edx,%eax
f011e78d:	48                   	dec    %eax
f011e78e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e794:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e79a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e79f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e7a5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e7ab:	29 d0                	sub    %edx,%eax
f011e7ad:	01 c1                	add    %eax,%ecx
f011e7af:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e7b6:	10 00 00 
f011e7b9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e7be:	0f b6 c0             	movzbl %al,%eax
f011e7c1:	c1 e0 04             	shl    $0x4,%eax
f011e7c4:	89 c2                	mov    %eax,%edx
f011e7c6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e7cc:	01 d0                	add    %edx,%eax
f011e7ce:	48                   	dec    %eax
f011e7cf:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e7d5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e7db:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7e0:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e7e6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e7ec:	29 d0                	sub    %edx,%eax
f011e7ee:	01 c8                	add    %ecx,%eax
f011e7f0:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e7f5:	29 c2                	sub    %eax,%edx
f011e7f7:	89 d0                	mov    %edx,%eax
f011e7f9:	83 ec 0c             	sub    $0xc,%esp
f011e7fc:	50                   	push   %eax
f011e7fd:	e8 83 90 fe ff       	call   f0107885 <kmalloc>
f011e802:	83 c4 10             	add    $0x10,%esp
f011e805:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e80b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e811:	85 c0                	test   %eax,%eax
f011e813:	74 17                	je     f011e82c <test_kmalloc_firstfit2+0xe79>
f011e815:	83 ec 04             	sub    $0x4,%esp
f011e818:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e81d:	68 0d 04 00 00       	push   $0x40d
f011e822:	68 5a b3 13 f0       	push   $0xf013b35a
f011e827:	e8 d9 19 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e82c:	83 ec 0c             	sub    $0xc,%esp
f011e82f:	68 e4 b9 13 f0       	push   $0xf013b9e4
f011e834:	e8 d5 24 fe ff       	call   f0100d0e <cprintf>
f011e839:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e83c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e841:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e844:	5b                   	pop    %ebx
f011e845:	5f                   	pop    %edi
f011e846:	5d                   	pop    %ebp
f011e847:	c3                   	ret    

f011e848 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e848:	55                   	push   %ebp
f011e849:	89 e5                	mov    %esp,%ebp
f011e84b:	57                   	push   %edi
f011e84c:	53                   	push   %ebx
f011e84d:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e853:	83 ec 0c             	sub    $0xc,%esp
f011e856:	68 9c b2 13 f0       	push   $0xf013b29c
f011e85b:	e8 ae 24 fe ff       	call   f0100d0e <cprintf>
f011e860:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e863:	83 ec 0c             	sub    $0xc,%esp
f011e866:	68 cc b2 13 f0       	push   $0xf013b2cc
f011e86b:	e8 9e 24 fe ff       	call   f0100d0e <cprintf>
f011e870:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e873:	83 ec 0c             	sub    $0xc,%esp
f011e876:	68 9c b2 13 f0       	push   $0xf013b29c
f011e87b:	e8 8e 24 fe ff       	call   f0100d0e <cprintf>
f011e880:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e883:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e889:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e88e:	b8 00 00 00 00       	mov    $0x0,%eax
f011e893:	89 d7                	mov    %edx,%edi
f011e895:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e897:	e8 01 e3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e89c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e89f:	e8 24 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8a4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e8a7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e8ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e8b5:	eb 1f                	jmp    f011e8d6 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e8b7:	83 ec 0c             	sub    $0xc,%esp
f011e8ba:	68 00 00 20 00       	push   $0x200000
f011e8bf:	e8 c1 8f fe ff       	call   f0107885 <kmalloc>
f011e8c4:	83 c4 10             	add    $0x10,%esp
f011e8c7:	89 c2                	mov    %eax,%edx
f011e8c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e8cc:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e8d3:	ff 45 f4             	incl   -0xc(%ebp)
f011e8d6:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e8da:	7e db                	jle    f011e8b7 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e8dc:	83 ec 0c             	sub    $0xc,%esp
f011e8df:	68 00 b0 1f 00       	push   $0x1fb000
f011e8e4:	e8 9c 8f fe ff       	call   f0107885 <kmalloc>
f011e8e9:	83 c4 10             	add    $0x10,%esp
f011e8ec:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e8f2:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e8f8:	89 c1                	mov    %eax,%ecx
f011e8fa:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e901:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e904:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e909:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e90c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e90f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e914:	f7 75 e4             	divl   -0x1c(%ebp)
f011e917:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e91a:	29 d0                	sub    %edx,%eax
f011e91c:	89 c3                	mov    %eax,%ebx
f011e91e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e925:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e92a:	0f b6 d0             	movzbl %al,%edx
f011e92d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e930:	01 d0                	add    %edx,%eax
f011e932:	48                   	dec    %eax
f011e933:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e936:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e939:	ba 00 00 00 00       	mov    $0x0,%edx
f011e93e:	f7 75 dc             	divl   -0x24(%ebp)
f011e941:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e944:	29 d0                	sub    %edx,%eax
f011e946:	01 c3                	add    %eax,%ebx
f011e948:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e94f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e954:	0f b6 c0             	movzbl %al,%eax
f011e957:	c1 e0 04             	shl    $0x4,%eax
f011e95a:	89 c2                	mov    %eax,%edx
f011e95c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e95f:	01 d0                	add    %edx,%eax
f011e961:	48                   	dec    %eax
f011e962:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e965:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e968:	ba 00 00 00 00       	mov    $0x0,%edx
f011e96d:	f7 75 d4             	divl   -0x2c(%ebp)
f011e970:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e973:	29 d0                	sub    %edx,%eax
f011e975:	01 d8                	add    %ebx,%eax
f011e977:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e97c:	39 c1                	cmp    %eax,%ecx
f011e97e:	0f 85 c0 04 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e984:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e98a:	89 c1                	mov    %eax,%ecx
f011e98c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e993:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e996:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e99b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e99e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e9a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9a6:	f7 75 cc             	divl   -0x34(%ebp)
f011e9a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e9ac:	29 d0                	sub    %edx,%eax
f011e9ae:	89 c3                	mov    %eax,%ebx
f011e9b0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e9b7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e9bc:	0f b6 d0             	movzbl %al,%edx
f011e9bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e9c2:	01 d0                	add    %edx,%eax
f011e9c4:	48                   	dec    %eax
f011e9c5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e9c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e9cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d0:	f7 75 c4             	divl   -0x3c(%ebp)
f011e9d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e9d6:	29 d0                	sub    %edx,%eax
f011e9d8:	01 c3                	add    %eax,%ebx
f011e9da:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e9e1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e9e6:	0f b6 c0             	movzbl %al,%eax
f011e9e9:	c1 e0 04             	shl    $0x4,%eax
f011e9ec:	89 c2                	mov    %eax,%edx
f011e9ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e9f1:	01 d0                	add    %edx,%eax
f011e9f3:	48                   	dec    %eax
f011e9f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e9f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e9fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9ff:	f7 75 bc             	divl   -0x44(%ebp)
f011ea02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ea05:	29 d0                	sub    %edx,%eax
f011ea07:	01 d8                	add    %ebx,%eax
f011ea09:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ea0e:	39 c1                	cmp    %eax,%ecx
f011ea10:	0f 85 2e 04 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ea16:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ea1c:	89 c1                	mov    %eax,%ecx
f011ea1e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ea25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ea28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea2d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ea30:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ea33:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea38:	f7 75 b4             	divl   -0x4c(%ebp)
f011ea3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ea3e:	29 d0                	sub    %edx,%eax
f011ea40:	89 c3                	mov    %eax,%ebx
f011ea42:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ea49:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ea4e:	0f b6 d0             	movzbl %al,%edx
f011ea51:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ea54:	01 d0                	add    %edx,%eax
f011ea56:	48                   	dec    %eax
f011ea57:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ea5a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ea5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea62:	f7 75 ac             	divl   -0x54(%ebp)
f011ea65:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ea68:	29 d0                	sub    %edx,%eax
f011ea6a:	01 c3                	add    %eax,%ebx
f011ea6c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ea73:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ea78:	0f b6 c0             	movzbl %al,%eax
f011ea7b:	c1 e0 04             	shl    $0x4,%eax
f011ea7e:	89 c2                	mov    %eax,%edx
f011ea80:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ea83:	01 d0                	add    %edx,%eax
f011ea85:	48                   	dec    %eax
f011ea86:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ea89:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea91:	f7 75 a4             	divl   -0x5c(%ebp)
f011ea94:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea97:	29 d0                	sub    %edx,%eax
f011ea99:	01 d8                	add    %ebx,%eax
f011ea9b:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011eaa0:	39 c1                	cmp    %eax,%ecx
f011eaa2:	0f 85 9c 03 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eaa8:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011eaae:	89 c1                	mov    %eax,%ecx
f011eab0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011eab7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011eaba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eabf:	89 45 98             	mov    %eax,-0x68(%ebp)
f011eac2:	8b 45 98             	mov    -0x68(%ebp),%eax
f011eac5:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaca:	f7 75 9c             	divl   -0x64(%ebp)
f011eacd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ead0:	29 d0                	sub    %edx,%eax
f011ead2:	89 c3                	mov    %eax,%ebx
f011ead4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011eadb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eae0:	0f b6 d0             	movzbl %al,%edx
f011eae3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011eae6:	01 d0                	add    %edx,%eax
f011eae8:	48                   	dec    %eax
f011eae9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011eaec:	8b 45 90             	mov    -0x70(%ebp),%eax
f011eaef:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaf4:	f7 75 94             	divl   -0x6c(%ebp)
f011eaf7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011eafa:	29 d0                	sub    %edx,%eax
f011eafc:	01 c3                	add    %eax,%ebx
f011eafe:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011eb05:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eb0a:	0f b6 c0             	movzbl %al,%eax
f011eb0d:	c1 e0 04             	shl    $0x4,%eax
f011eb10:	89 c2                	mov    %eax,%edx
f011eb12:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011eb15:	01 d0                	add    %edx,%eax
f011eb17:	48                   	dec    %eax
f011eb18:	89 45 88             	mov    %eax,-0x78(%ebp)
f011eb1b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011eb1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb23:	f7 75 8c             	divl   -0x74(%ebp)
f011eb26:	8b 45 88             	mov    -0x78(%ebp),%eax
f011eb29:	29 d0                	sub    %edx,%eax
f011eb2b:	01 d8                	add    %ebx,%eax
f011eb2d:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011eb32:	39 c1                	cmp    %eax,%ecx
f011eb34:	0f 85 0a 03 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011eb3a:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011eb40:	89 c1                	mov    %eax,%ecx
f011eb42:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011eb49:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011eb4c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb51:	89 45 80             	mov    %eax,-0x80(%ebp)
f011eb54:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eb57:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb5c:	f7 75 84             	divl   -0x7c(%ebp)
f011eb5f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eb62:	29 d0                	sub    %edx,%eax
f011eb64:	89 c3                	mov    %eax,%ebx
f011eb66:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011eb6d:	10 00 00 
f011eb70:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eb75:	0f b6 d0             	movzbl %al,%edx
f011eb78:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011eb7e:	01 d0                	add    %edx,%eax
f011eb80:	48                   	dec    %eax
f011eb81:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011eb87:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eb8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb92:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011eb98:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eb9e:	29 d0                	sub    %edx,%eax
f011eba0:	01 c3                	add    %eax,%ebx
f011eba2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011eba9:	10 00 00 
f011ebac:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ebb1:	0f b6 c0             	movzbl %al,%eax
f011ebb4:	c1 e0 04             	shl    $0x4,%eax
f011ebb7:	89 c2                	mov    %eax,%edx
f011ebb9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ebbf:	01 d0                	add    %edx,%eax
f011ebc1:	48                   	dec    %eax
f011ebc2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ebc8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ebce:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebd3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ebd9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ebdf:	29 d0                	sub    %edx,%eax
f011ebe1:	01 d8                	add    %ebx,%eax
f011ebe3:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ebe8:	39 c1                	cmp    %eax,%ecx
f011ebea:	0f 85 54 02 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ebf0:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011ebf6:	89 c1                	mov    %eax,%ecx
f011ebf8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ebff:	10 00 00 
f011ec02:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ec08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec0d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ec13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ec19:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec1e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ec24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ec2a:	29 d0                	sub    %edx,%eax
f011ec2c:	89 c3                	mov    %eax,%ebx
f011ec2e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ec35:	10 00 00 
f011ec38:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ec3d:	0f b6 d0             	movzbl %al,%edx
f011ec40:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec46:	01 d0                	add    %edx,%eax
f011ec48:	48                   	dec    %eax
f011ec49:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ec4f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ec55:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec5a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ec60:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ec66:	29 d0                	sub    %edx,%eax
f011ec68:	01 c3                	add    %eax,%ebx
f011ec6a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ec71:	10 00 00 
f011ec74:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ec79:	0f b6 c0             	movzbl %al,%eax
f011ec7c:	c1 e0 04             	shl    $0x4,%eax
f011ec7f:	89 c2                	mov    %eax,%edx
f011ec81:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ec87:	01 d0                	add    %edx,%eax
f011ec89:	48                   	dec    %eax
f011ec8a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ec90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ec96:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec9b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011eca1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011eca7:	29 d0                	sub    %edx,%eax
f011eca9:	01 d8                	add    %ebx,%eax
f011ecab:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ecb0:	39 c1                	cmp    %eax,%ecx
f011ecb2:	0f 85 8c 01 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ecb8:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011ecbe:	89 c1                	mov    %eax,%ecx
f011ecc0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ecc7:	10 00 00 
f011ecca:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ecd0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecd5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ecdb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ece1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ecec:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ecf2:	29 d0                	sub    %edx,%eax
f011ecf4:	89 c3                	mov    %eax,%ebx
f011ecf6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ecfd:	10 00 00 
f011ed00:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ed05:	0f b6 d0             	movzbl %al,%edx
f011ed08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ed0e:	01 d0                	add    %edx,%eax
f011ed10:	48                   	dec    %eax
f011ed11:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ed17:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ed1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed22:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ed28:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ed2e:	29 d0                	sub    %edx,%eax
f011ed30:	01 c3                	add    %eax,%ebx
f011ed32:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ed39:	10 00 00 
f011ed3c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ed41:	0f b6 c0             	movzbl %al,%eax
f011ed44:	c1 e0 04             	shl    $0x4,%eax
f011ed47:	89 c2                	mov    %eax,%edx
f011ed49:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ed4f:	01 d0                	add    %edx,%eax
f011ed51:	48                   	dec    %eax
f011ed52:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ed58:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ed5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed63:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ed69:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ed6f:	29 d0                	sub    %edx,%eax
f011ed71:	01 d8                	add    %ebx,%eax
f011ed73:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ed78:	39 c1                	cmp    %eax,%ecx
f011ed7a:	0f 85 c4 00 00 00    	jne    f011ee44 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011ed80:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011ed86:	89 c1                	mov    %eax,%ecx
f011ed88:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ed8f:	10 00 00 
f011ed92:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ed98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed9d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011eda3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011eda9:	ba 00 00 00 00       	mov    $0x0,%edx
f011edae:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011edb4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011edba:	29 d0                	sub    %edx,%eax
f011edbc:	89 c3                	mov    %eax,%ebx
f011edbe:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011edc5:	10 00 00 
f011edc8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011edcd:	0f b6 d0             	movzbl %al,%edx
f011edd0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011edd6:	01 d0                	add    %edx,%eax
f011edd8:	48                   	dec    %eax
f011edd9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011eddf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ede5:	ba 00 00 00 00       	mov    $0x0,%edx
f011edea:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011edf0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011edf6:	29 d0                	sub    %edx,%eax
f011edf8:	01 c3                	add    %eax,%ebx
f011edfa:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ee01:	10 00 00 
f011ee04:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ee09:	0f b6 c0             	movzbl %al,%eax
f011ee0c:	c1 e0 04             	shl    $0x4,%eax
f011ee0f:	89 c2                	mov    %eax,%edx
f011ee11:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ee17:	01 d0                	add    %edx,%eax
f011ee19:	48                   	dec    %eax
f011ee1a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ee20:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ee26:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ee31:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ee37:	29 d0                	sub    %edx,%eax
f011ee39:	01 d8                	add    %ebx,%eax
f011ee3b:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ee40:	39 c1                	cmp    %eax,%ecx
f011ee42:	74 17                	je     f011ee5b <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ee44:	83 ec 04             	sub    $0x4,%esp
f011ee47:	68 30 ba 13 f0       	push   $0xf013ba30
f011ee4c:	68 31 04 00 00       	push   $0x431
f011ee51:	68 5a b3 13 f0       	push   $0xf013b35a
f011ee56:	e8 aa 13 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee5b:	e8 68 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ee60:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee63:	74 17                	je     f011ee7c <test_kmalloc_worstfit+0x634>
f011ee65:	83 ec 04             	sub    $0x4,%esp
f011ee68:	68 74 b3 13 f0       	push   $0xf013b374
f011ee6d:	68 33 04 00 00       	push   $0x433
f011ee72:	68 5a b3 13 f0       	push   $0xf013b35a
f011ee77:	e8 89 13 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011ee7c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee7f:	e8 19 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ee84:	29 c3                	sub    %eax,%ebx
f011ee86:	89 d8                	mov    %ebx,%eax
f011ee88:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011ee8d:	74 17                	je     f011eea6 <test_kmalloc_worstfit+0x65e>
f011ee8f:	83 ec 04             	sub    $0x4,%esp
f011ee92:	68 17 b6 13 f0       	push   $0xf013b617
f011ee97:	68 34 04 00 00       	push   $0x434
f011ee9c:	68 5a b3 13 f0       	push   $0xf013b35a
f011eea1:	e8 5f 13 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011eea6:	e8 f2 dc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eeab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011eeae:	e8 15 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eeb3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011eeb6:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011eebc:	83 ec 0c             	sub    $0xc,%esp
f011eebf:	50                   	push   %eax
f011eec0:	e8 8b 8a fe ff       	call   f0107950 <kfree>
f011eec5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011eec8:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011eece:	83 ec 0c             	sub    $0xc,%esp
f011eed1:	50                   	push   %eax
f011eed2:	e8 79 8a fe ff       	call   f0107950 <kfree>
f011eed7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011eeda:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011eee0:	83 ec 0c             	sub    $0xc,%esp
f011eee3:	50                   	push   %eax
f011eee4:	e8 67 8a fe ff       	call   f0107950 <kfree>
f011eee9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011eeec:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011eef2:	83 ec 0c             	sub    $0xc,%esp
f011eef5:	50                   	push   %eax
f011eef6:	e8 55 8a fe ff       	call   f0107950 <kfree>
f011eefb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011eefe:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011ef04:	83 ec 0c             	sub    $0xc,%esp
f011ef07:	50                   	push   %eax
f011ef08:	e8 43 8a fe ff       	call   f0107950 <kfree>
f011ef0d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011ef10:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011ef16:	83 ec 0c             	sub    $0xc,%esp
f011ef19:	50                   	push   %eax
f011ef1a:	e8 31 8a fe ff       	call   f0107950 <kfree>
f011ef1f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011ef22:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011ef28:	83 ec 0c             	sub    $0xc,%esp
f011ef2b:	50                   	push   %eax
f011ef2c:	e8 1f 8a fe ff       	call   f0107950 <kfree>
f011ef31:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011ef34:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011ef3a:	83 ec 0c             	sub    $0xc,%esp
f011ef3d:	50                   	push   %eax
f011ef3e:	e8 0d 8a fe ff       	call   f0107950 <kfree>
f011ef43:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011ef46:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011ef4c:	83 ec 0c             	sub    $0xc,%esp
f011ef4f:	50                   	push   %eax
f011ef50:	e8 fb 89 fe ff       	call   f0107950 <kfree>
f011ef55:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011ef58:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011ef5e:	83 ec 0c             	sub    $0xc,%esp
f011ef61:	50                   	push   %eax
f011ef62:	e8 e9 89 fe ff       	call   f0107950 <kfree>
f011ef67:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011ef6a:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011ef70:	83 ec 0c             	sub    $0xc,%esp
f011ef73:	50                   	push   %eax
f011ef74:	e8 d7 89 fe ff       	call   f0107950 <kfree>
f011ef79:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011ef7c:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011ef82:	83 ec 0c             	sub    $0xc,%esp
f011ef85:	50                   	push   %eax
f011ef86:	e8 c5 89 fe ff       	call   f0107950 <kfree>
f011ef8b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011ef8e:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011ef94:	83 ec 0c             	sub    $0xc,%esp
f011ef97:	50                   	push   %eax
f011ef98:	e8 b3 89 fe ff       	call   f0107950 <kfree>
f011ef9d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011efa0:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011efa6:	83 ec 0c             	sub    $0xc,%esp
f011efa9:	50                   	push   %eax
f011efaa:	e8 a1 89 fe ff       	call   f0107950 <kfree>
f011efaf:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011efb2:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011efb8:	83 ec 0c             	sub    $0xc,%esp
f011efbb:	50                   	push   %eax
f011efbc:	e8 8f 89 fe ff       	call   f0107950 <kfree>
f011efc1:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efc4:	e8 ff 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011efc9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efcc:	74 17                	je     f011efe5 <test_kmalloc_worstfit+0x79d>
f011efce:	83 ec 04             	sub    $0x4,%esp
f011efd1:	68 74 b3 13 f0       	push   $0xf013b374
f011efd6:	68 4a 04 00 00       	push   $0x44a
f011efdb:	68 5a b3 13 f0       	push   $0xf013b35a
f011efe0:	e8 20 12 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011efe5:	e8 b3 db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011efea:	89 c2                	mov    %eax,%edx
f011efec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011efef:	29 c2                	sub    %eax,%edx
f011eff1:	89 d0                	mov    %edx,%eax
f011eff3:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011eff8:	74 17                	je     f011f011 <test_kmalloc_worstfit+0x7c9>
f011effa:	83 ec 04             	sub    $0x4,%esp
f011effd:	68 28 b6 13 f0       	push   $0xf013b628
f011f002:	68 4b 04 00 00       	push   $0x44b
f011f007:	68 5a b3 13 f0       	push   $0xf013b35a
f011f00c:	e8 f4 11 fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f011:	e8 87 db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f016:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f019:	e8 aa 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f01e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f021:	83 ec 0c             	sub    $0xc,%esp
f011f024:	68 00 00 10 00       	push   $0x100000
f011f029:	e8 57 88 fe ff       	call   f0107885 <kmalloc>
f011f02e:	83 c4 10             	add    $0x10,%esp
f011f031:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f037:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f03e:	10 00 00 
f011f041:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f047:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f04c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f052:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f058:	ba 00 00 00 00       	mov    $0x0,%edx
f011f05d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f063:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f069:	29 d0                	sub    %edx,%eax
f011f06b:	89 c1                	mov    %eax,%ecx
f011f06d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f074:	10 00 00 
f011f077:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f07c:	0f b6 d0             	movzbl %al,%edx
f011f07f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f085:	01 d0                	add    %edx,%eax
f011f087:	48                   	dec    %eax
f011f088:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f08e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f094:	ba 00 00 00 00       	mov    $0x0,%edx
f011f099:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f09f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f0a5:	29 d0                	sub    %edx,%eax
f011f0a7:	01 c1                	add    %eax,%ecx
f011f0a9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f0b0:	10 00 00 
f011f0b3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f0b8:	0f b6 c0             	movzbl %al,%eax
f011f0bb:	c1 e0 04             	shl    $0x4,%eax
f011f0be:	89 c2                	mov    %eax,%edx
f011f0c0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f0c6:	01 d0                	add    %edx,%eax
f011f0c8:	48                   	dec    %eax
f011f0c9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f0cf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f0d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0da:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f0e0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f0e6:	29 d0                	sub    %edx,%eax
f011f0e8:	01 c8                	add    %ecx,%eax
f011f0ea:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f0f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f0f6:	39 c2                	cmp    %eax,%edx
f011f0f8:	74 17                	je     f011f111 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f0fa:	83 ec 04             	sub    $0x4,%esp
f011f0fd:	68 74 ba 13 f0       	push   $0xf013ba74
f011f102:	68 52 04 00 00       	push   $0x452
f011f107:	68 5a b3 13 f0       	push   $0xf013b35a
f011f10c:	e8 f4 10 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f111:	e8 b2 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f116:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f119:	74 17                	je     f011f132 <test_kmalloc_worstfit+0x8ea>
f011f11b:	83 ec 04             	sub    $0x4,%esp
f011f11e:	68 74 b3 13 f0       	push   $0xf013b374
f011f123:	68 53 04 00 00       	push   $0x453
f011f128:	68 5a b3 13 f0       	push   $0xf013b35a
f011f12d:	e8 d3 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f132:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f135:	e8 63 da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f13a:	29 c3                	sub    %eax,%ebx
f011f13c:	89 d8                	mov    %ebx,%eax
f011f13e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f143:	74 17                	je     f011f15c <test_kmalloc_worstfit+0x914>
f011f145:	83 ec 04             	sub    $0x4,%esp
f011f148:	68 92 b8 13 f0       	push   $0xf013b892
f011f14d:	68 54 04 00 00       	push   $0x454
f011f152:	68 5a b3 13 f0       	push   $0xf013b35a
f011f157:	e8 a9 10 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f15c:	ff 45 e8             	incl   -0x18(%ebp)
f011f15f:	83 ec 08             	sub    $0x8,%esp
f011f162:	ff 75 e8             	pushl  -0x18(%ebp)
f011f165:	68 94 ba 13 f0       	push   $0xf013ba94
f011f16a:	e8 9f 1b fe ff       	call   f0100d0e <cprintf>
f011f16f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f172:	e8 26 da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f177:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f17a:	e8 49 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f17f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f182:	83 ec 0c             	sub    $0xc,%esp
f011f185:	68 00 00 40 00       	push   $0x400000
f011f18a:	e8 f6 86 fe ff       	call   f0107885 <kmalloc>
f011f18f:	83 c4 10             	add    $0x10,%esp
f011f192:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f198:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f19f:	10 00 00 
f011f1a2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f1a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1ad:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f1b3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f1b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1be:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f1c4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f1ca:	29 d0                	sub    %edx,%eax
f011f1cc:	89 c1                	mov    %eax,%ecx
f011f1ce:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f1d5:	10 00 00 
f011f1d8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f1dd:	0f b6 d0             	movzbl %al,%edx
f011f1e0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f1e6:	01 d0                	add    %edx,%eax
f011f1e8:	48                   	dec    %eax
f011f1e9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f1ef:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f1f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1fa:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f200:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f206:	29 d0                	sub    %edx,%eax
f011f208:	01 c1                	add    %eax,%ecx
f011f20a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f211:	10 00 00 
f011f214:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f219:	0f b6 c0             	movzbl %al,%eax
f011f21c:	c1 e0 04             	shl    $0x4,%eax
f011f21f:	89 c2                	mov    %eax,%edx
f011f221:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f227:	01 d0                	add    %edx,%eax
f011f229:	48                   	dec    %eax
f011f22a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f230:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f236:	ba 00 00 00 00       	mov    $0x0,%edx
f011f23b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f241:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f247:	29 d0                	sub    %edx,%eax
f011f249:	01 c8                	add    %ecx,%eax
f011f24b:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f251:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f257:	39 c2                	cmp    %eax,%edx
f011f259:	74 17                	je     f011f272 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f25b:	83 ec 04             	sub    $0x4,%esp
f011f25e:	68 74 ba 13 f0       	push   $0xf013ba74
f011f263:	68 5b 04 00 00       	push   $0x45b
f011f268:	68 5a b3 13 f0       	push   $0xf013b35a
f011f26d:	e8 93 0f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f272:	e8 51 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f277:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f27a:	74 17                	je     f011f293 <test_kmalloc_worstfit+0xa4b>
f011f27c:	83 ec 04             	sub    $0x4,%esp
f011f27f:	68 74 b3 13 f0       	push   $0xf013b374
f011f284:	68 5c 04 00 00       	push   $0x45c
f011f289:	68 5a b3 13 f0       	push   $0xf013b35a
f011f28e:	e8 72 0f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f293:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f296:	e8 02 d9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f29b:	29 c3                	sub    %eax,%ebx
f011f29d:	89 d8                	mov    %ebx,%eax
f011f29f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f2a4:	74 17                	je     f011f2bd <test_kmalloc_worstfit+0xa75>
f011f2a6:	83 ec 04             	sub    $0x4,%esp
f011f2a9:	68 92 b8 13 f0       	push   $0xf013b892
f011f2ae:	68 5d 04 00 00       	push   $0x45d
f011f2b3:	68 5a b3 13 f0       	push   $0xf013b35a
f011f2b8:	e8 48 0f fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2bd:	ff 45 e8             	incl   -0x18(%ebp)
f011f2c0:	83 ec 08             	sub    $0x8,%esp
f011f2c3:	ff 75 e8             	pushl  -0x18(%ebp)
f011f2c6:	68 94 ba 13 f0       	push   $0xf013ba94
f011f2cb:	e8 3e 1a fe ff       	call   f0100d0e <cprintf>
f011f2d0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f2d3:	e8 c5 d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f2d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f2db:	e8 e8 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f2e3:	83 ec 0c             	sub    $0xc,%esp
f011f2e6:	68 00 00 60 00       	push   $0x600000
f011f2eb:	e8 95 85 fe ff       	call   f0107885 <kmalloc>
f011f2f0:	83 c4 10             	add    $0x10,%esp
f011f2f3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f2f9:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f300:	10 00 00 
f011f303:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f309:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f30e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f314:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f31a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f31f:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f325:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f32b:	29 d0                	sub    %edx,%eax
f011f32d:	89 c1                	mov    %eax,%ecx
f011f32f:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f336:	10 00 00 
f011f339:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f33e:	0f b6 d0             	movzbl %al,%edx
f011f341:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f347:	01 d0                	add    %edx,%eax
f011f349:	48                   	dec    %eax
f011f34a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f350:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f356:	ba 00 00 00 00       	mov    $0x0,%edx
f011f35b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f361:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f367:	29 d0                	sub    %edx,%eax
f011f369:	01 c1                	add    %eax,%ecx
f011f36b:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f372:	10 00 00 
f011f375:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f37a:	0f b6 c0             	movzbl %al,%eax
f011f37d:	c1 e0 04             	shl    $0x4,%eax
f011f380:	89 c2                	mov    %eax,%edx
f011f382:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f388:	01 d0                	add    %edx,%eax
f011f38a:	48                   	dec    %eax
f011f38b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f391:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f397:	ba 00 00 00 00       	mov    $0x0,%edx
f011f39c:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f3a2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f3a8:	29 d0                	sub    %edx,%eax
f011f3aa:	01 c8                	add    %ecx,%eax
f011f3ac:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f3b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f3b8:	39 c2                	cmp    %eax,%edx
f011f3ba:	74 17                	je     f011f3d3 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f3bc:	83 ec 04             	sub    $0x4,%esp
f011f3bf:	68 74 ba 13 f0       	push   $0xf013ba74
f011f3c4:	68 64 04 00 00       	push   $0x464
f011f3c9:	68 5a b3 13 f0       	push   $0xf013b35a
f011f3ce:	e8 32 0e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3d3:	e8 f0 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f3d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3db:	74 17                	je     f011f3f4 <test_kmalloc_worstfit+0xbac>
f011f3dd:	83 ec 04             	sub    $0x4,%esp
f011f3e0:	68 74 b3 13 f0       	push   $0xf013b374
f011f3e5:	68 65 04 00 00       	push   $0x465
f011f3ea:	68 5a b3 13 f0       	push   $0xf013b35a
f011f3ef:	e8 11 0e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f3f4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f3f7:	e8 a1 d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f3fc:	29 c3                	sub    %eax,%ebx
f011f3fe:	89 d8                	mov    %ebx,%eax
f011f400:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f405:	74 17                	je     f011f41e <test_kmalloc_worstfit+0xbd6>
f011f407:	83 ec 04             	sub    $0x4,%esp
f011f40a:	68 92 b8 13 f0       	push   $0xf013b892
f011f40f:	68 66 04 00 00       	push   $0x466
f011f414:	68 5a b3 13 f0       	push   $0xf013b35a
f011f419:	e8 e7 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f41e:	ff 45 e8             	incl   -0x18(%ebp)
f011f421:	83 ec 08             	sub    $0x8,%esp
f011f424:	ff 75 e8             	pushl  -0x18(%ebp)
f011f427:	68 94 ba 13 f0       	push   $0xf013ba94
f011f42c:	e8 dd 18 fe ff       	call   f0100d0e <cprintf>
f011f431:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f434:	e8 64 d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f439:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f43c:	e8 87 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f441:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f444:	83 ec 0c             	sub    $0xc,%esp
f011f447:	68 00 00 50 00       	push   $0x500000
f011f44c:	e8 34 84 fe ff       	call   f0107885 <kmalloc>
f011f451:	83 c4 10             	add    $0x10,%esp
f011f454:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f45a:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f461:	10 00 00 
f011f464:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f46a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f46f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f475:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f47b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f480:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f486:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f48c:	29 d0                	sub    %edx,%eax
f011f48e:	89 c1                	mov    %eax,%ecx
f011f490:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f497:	10 00 00 
f011f49a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f49f:	0f b6 d0             	movzbl %al,%edx
f011f4a2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f4a8:	01 d0                	add    %edx,%eax
f011f4aa:	48                   	dec    %eax
f011f4ab:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f4b1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f4b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4bc:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f4c2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f4c8:	29 d0                	sub    %edx,%eax
f011f4ca:	01 c1                	add    %eax,%ecx
f011f4cc:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f4d3:	10 00 00 
f011f4d6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f4db:	0f b6 c0             	movzbl %al,%eax
f011f4de:	c1 e0 04             	shl    $0x4,%eax
f011f4e1:	89 c2                	mov    %eax,%edx
f011f4e3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f4e9:	01 d0                	add    %edx,%eax
f011f4eb:	48                   	dec    %eax
f011f4ec:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f4f2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f4f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4fd:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f503:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f509:	29 d0                	sub    %edx,%eax
f011f50b:	01 c8                	add    %ecx,%eax
f011f50d:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f513:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f519:	39 c2                	cmp    %eax,%edx
f011f51b:	74 17                	je     f011f534 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f51d:	83 ec 04             	sub    $0x4,%esp
f011f520:	68 74 ba 13 f0       	push   $0xf013ba74
f011f525:	68 6d 04 00 00       	push   $0x46d
f011f52a:	68 5a b3 13 f0       	push   $0xf013b35a
f011f52f:	e8 d1 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f534:	e8 8f 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f539:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f53c:	74 17                	je     f011f555 <test_kmalloc_worstfit+0xd0d>
f011f53e:	83 ec 04             	sub    $0x4,%esp
f011f541:	68 74 b3 13 f0       	push   $0xf013b374
f011f546:	68 6e 04 00 00       	push   $0x46e
f011f54b:	68 5a b3 13 f0       	push   $0xf013b35a
f011f550:	e8 b0 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f555:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f558:	e8 40 d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f55d:	29 c3                	sub    %eax,%ebx
f011f55f:	89 d8                	mov    %ebx,%eax
f011f561:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f566:	74 17                	je     f011f57f <test_kmalloc_worstfit+0xd37>
f011f568:	83 ec 04             	sub    $0x4,%esp
f011f56b:	68 92 b8 13 f0       	push   $0xf013b892
f011f570:	68 6f 04 00 00       	push   $0x46f
f011f575:	68 5a b3 13 f0       	push   $0xf013b35a
f011f57a:	e8 86 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f57f:	ff 45 e8             	incl   -0x18(%ebp)
f011f582:	83 ec 08             	sub    $0x8,%esp
f011f585:	ff 75 e8             	pushl  -0x18(%ebp)
f011f588:	68 94 ba 13 f0       	push   $0xf013ba94
f011f58d:	e8 7c 17 fe ff       	call   f0100d0e <cprintf>
f011f592:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f595:	e8 03 d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f59a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f59d:	e8 26 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f5a5:	83 ec 0c             	sub    $0xc,%esp
f011f5a8:	68 00 00 40 00       	push   $0x400000
f011f5ad:	e8 d3 82 fe ff       	call   f0107885 <kmalloc>
f011f5b2:	83 c4 10             	add    $0x10,%esp
f011f5b5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f5bb:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f5c2:	10 00 00 
f011f5c5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f5cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f5d0:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f5d6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5e1:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f5e7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f5ed:	29 d0                	sub    %edx,%eax
f011f5ef:	89 c1                	mov    %eax,%ecx
f011f5f1:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f5f8:	10 00 00 
f011f5fb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f600:	0f b6 d0             	movzbl %al,%edx
f011f603:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f609:	01 d0                	add    %edx,%eax
f011f60b:	48                   	dec    %eax
f011f60c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f612:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f618:	ba 00 00 00 00       	mov    $0x0,%edx
f011f61d:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f623:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f629:	29 d0                	sub    %edx,%eax
f011f62b:	01 c1                	add    %eax,%ecx
f011f62d:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f634:	10 00 00 
f011f637:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f63c:	0f b6 c0             	movzbl %al,%eax
f011f63f:	c1 e0 04             	shl    $0x4,%eax
f011f642:	89 c2                	mov    %eax,%edx
f011f644:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f64a:	01 d0                	add    %edx,%eax
f011f64c:	48                   	dec    %eax
f011f64d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f653:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f659:	ba 00 00 00 00       	mov    $0x0,%edx
f011f65e:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f664:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f66a:	29 d0                	sub    %edx,%eax
f011f66c:	01 c8                	add    %ecx,%eax
f011f66e:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f674:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f67a:	39 c2                	cmp    %eax,%edx
f011f67c:	74 17                	je     f011f695 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f67e:	83 ec 04             	sub    $0x4,%esp
f011f681:	68 74 ba 13 f0       	push   $0xf013ba74
f011f686:	68 76 04 00 00       	push   $0x476
f011f68b:	68 5a b3 13 f0       	push   $0xf013b35a
f011f690:	e8 70 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f695:	e8 2e 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f69a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f69d:	74 17                	je     f011f6b6 <test_kmalloc_worstfit+0xe6e>
f011f69f:	83 ec 04             	sub    $0x4,%esp
f011f6a2:	68 74 b3 13 f0       	push   $0xf013b374
f011f6a7:	68 77 04 00 00       	push   $0x477
f011f6ac:	68 5a b3 13 f0       	push   $0xf013b35a
f011f6b1:	e8 4f 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f6b6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6b9:	e8 df d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f6be:	29 c3                	sub    %eax,%ebx
f011f6c0:	89 d8                	mov    %ebx,%eax
f011f6c2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f6c7:	74 17                	je     f011f6e0 <test_kmalloc_worstfit+0xe98>
f011f6c9:	83 ec 04             	sub    $0x4,%esp
f011f6cc:	68 92 b8 13 f0       	push   $0xf013b892
f011f6d1:	68 78 04 00 00       	push   $0x478
f011f6d6:	68 5a b3 13 f0       	push   $0xf013b35a
f011f6db:	e8 25 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f6e0:	ff 45 e8             	incl   -0x18(%ebp)
f011f6e3:	83 ec 08             	sub    $0x8,%esp
f011f6e6:	ff 75 e8             	pushl  -0x18(%ebp)
f011f6e9:	68 94 ba 13 f0       	push   $0xf013ba94
f011f6ee:	e8 1b 16 fe ff       	call   f0100d0e <cprintf>
f011f6f3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f6f6:	e8 a2 d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f6fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f6fe:	e8 c5 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f703:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f706:	83 ec 0c             	sub    $0xc,%esp
f011f709:	68 00 00 20 00       	push   $0x200000
f011f70e:	e8 72 81 fe ff       	call   f0107885 <kmalloc>
f011f713:	83 c4 10             	add    $0x10,%esp
f011f716:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f71c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f723:	10 00 00 
f011f726:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f72c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f731:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f737:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f73d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f742:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f748:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f74e:	29 d0                	sub    %edx,%eax
f011f750:	89 c1                	mov    %eax,%ecx
f011f752:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f759:	10 00 00 
f011f75c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f761:	0f b6 d0             	movzbl %al,%edx
f011f764:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f76a:	01 d0                	add    %edx,%eax
f011f76c:	48                   	dec    %eax
f011f76d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f773:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f779:	ba 00 00 00 00       	mov    $0x0,%edx
f011f77e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f784:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f78a:	29 d0                	sub    %edx,%eax
f011f78c:	01 c1                	add    %eax,%ecx
f011f78e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f795:	10 00 00 
f011f798:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f79d:	0f b6 c0             	movzbl %al,%eax
f011f7a0:	c1 e0 04             	shl    $0x4,%eax
f011f7a3:	89 c2                	mov    %eax,%edx
f011f7a5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f7ab:	01 d0                	add    %edx,%eax
f011f7ad:	48                   	dec    %eax
f011f7ae:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f7b4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f7ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7bf:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f7c5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f7cb:	29 d0                	sub    %edx,%eax
f011f7cd:	01 c8                	add    %ecx,%eax
f011f7cf:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f7d5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f7db:	39 c2                	cmp    %eax,%edx
f011f7dd:	74 17                	je     f011f7f6 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f7df:	83 ec 04             	sub    $0x4,%esp
f011f7e2:	68 74 ba 13 f0       	push   $0xf013ba74
f011f7e7:	68 7f 04 00 00       	push   $0x47f
f011f7ec:	68 5a b3 13 f0       	push   $0xf013b35a
f011f7f1:	e8 0f 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7f6:	e8 cd 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f7fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f7fe:	74 17                	je     f011f817 <test_kmalloc_worstfit+0xfcf>
f011f800:	83 ec 04             	sub    $0x4,%esp
f011f803:	68 74 b3 13 f0       	push   $0xf013b374
f011f808:	68 80 04 00 00       	push   $0x480
f011f80d:	68 5a b3 13 f0       	push   $0xf013b35a
f011f812:	e8 ee 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f817:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f81a:	e8 7e d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f81f:	29 c3                	sub    %eax,%ebx
f011f821:	89 d8                	mov    %ebx,%eax
f011f823:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f828:	74 17                	je     f011f841 <test_kmalloc_worstfit+0xff9>
f011f82a:	83 ec 04             	sub    $0x4,%esp
f011f82d:	68 92 b8 13 f0       	push   $0xf013b892
f011f832:	68 81 04 00 00       	push   $0x481
f011f837:	68 5a b3 13 f0       	push   $0xf013b35a
f011f83c:	e8 c4 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f841:	ff 45 e8             	incl   -0x18(%ebp)
f011f844:	83 ec 08             	sub    $0x8,%esp
f011f847:	ff 75 e8             	pushl  -0x18(%ebp)
f011f84a:	68 94 ba 13 f0       	push   $0xf013ba94
f011f84f:	e8 ba 14 fe ff       	call   f0100d0e <cprintf>
f011f854:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f857:	e8 41 d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f85c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f85f:	e8 64 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f864:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f867:	83 ec 0c             	sub    $0xc,%esp
f011f86a:	68 00 00 18 00       	push   $0x180000
f011f86f:	e8 11 80 fe ff       	call   f0107885 <kmalloc>
f011f874:	83 c4 10             	add    $0x10,%esp
f011f877:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f87d:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f884:	10 00 00 
f011f887:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f88d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f892:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f898:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f89e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8a3:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f8a9:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f8af:	29 d0                	sub    %edx,%eax
f011f8b1:	89 c1                	mov    %eax,%ecx
f011f8b3:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f8ba:	10 00 00 
f011f8bd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f8c2:	0f b6 d0             	movzbl %al,%edx
f011f8c5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f8cb:	01 d0                	add    %edx,%eax
f011f8cd:	48                   	dec    %eax
f011f8ce:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f8d4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f8da:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8df:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f8e5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f8eb:	29 d0                	sub    %edx,%eax
f011f8ed:	01 c1                	add    %eax,%ecx
f011f8ef:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f8f6:	10 00 00 
f011f8f9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f8fe:	0f b6 c0             	movzbl %al,%eax
f011f901:	c1 e0 04             	shl    $0x4,%eax
f011f904:	89 c2                	mov    %eax,%edx
f011f906:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f90c:	01 d0                	add    %edx,%eax
f011f90e:	48                   	dec    %eax
f011f90f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f915:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f91b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f920:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f926:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f92c:	29 d0                	sub    %edx,%eax
f011f92e:	01 c8                	add    %ecx,%eax
f011f930:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f936:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f93c:	39 c2                	cmp    %eax,%edx
f011f93e:	74 17                	je     f011f957 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f940:	83 ec 04             	sub    $0x4,%esp
f011f943:	68 74 ba 13 f0       	push   $0xf013ba74
f011f948:	68 88 04 00 00       	push   $0x488
f011f94d:	68 5a b3 13 f0       	push   $0xf013b35a
f011f952:	e8 ae 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f957:	e8 6c 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f95c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f95f:	74 17                	je     f011f978 <test_kmalloc_worstfit+0x1130>
f011f961:	83 ec 04             	sub    $0x4,%esp
f011f964:	68 74 b3 13 f0       	push   $0xf013b374
f011f969:	68 89 04 00 00       	push   $0x489
f011f96e:	68 5a b3 13 f0       	push   $0xf013b35a
f011f973:	e8 8d 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f978:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f97b:	e8 1d d2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f980:	29 c3                	sub    %eax,%ebx
f011f982:	89 d8                	mov    %ebx,%eax
f011f984:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f989:	74 17                	je     f011f9a2 <test_kmalloc_worstfit+0x115a>
f011f98b:	83 ec 04             	sub    $0x4,%esp
f011f98e:	68 92 b8 13 f0       	push   $0xf013b892
f011f993:	68 8a 04 00 00       	push   $0x48a
f011f998:	68 5a b3 13 f0       	push   $0xf013b35a
f011f99d:	e8 63 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f9a2:	ff 45 e8             	incl   -0x18(%ebp)
f011f9a5:	83 ec 08             	sub    $0x8,%esp
f011f9a8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f9ab:	68 94 ba 13 f0       	push   $0xf013ba94
f011f9b0:	e8 59 13 fe ff       	call   f0100d0e <cprintf>
f011f9b5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f9b8:	e8 e0 d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f9bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f9c0:	e8 03 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f9c8:	83 ec 0c             	sub    $0xc,%esp
f011f9cb:	68 00 00 08 00       	push   $0x80000
f011f9d0:	e8 b0 7e fe ff       	call   f0107885 <kmalloc>
f011f9d5:	83 c4 10             	add    $0x10,%esp
f011f9d8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f9de:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f9e5:	10 00 00 
f011f9e8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f9ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9f3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f9f9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f9ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa04:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fa0a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fa10:	29 d0                	sub    %edx,%eax
f011fa12:	89 c1                	mov    %eax,%ecx
f011fa14:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fa1b:	10 00 00 
f011fa1e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fa23:	0f b6 d0             	movzbl %al,%edx
f011fa26:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fa2c:	01 d0                	add    %edx,%eax
f011fa2e:	48                   	dec    %eax
f011fa2f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fa35:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fa3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa40:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fa46:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fa4c:	29 d0                	sub    %edx,%eax
f011fa4e:	01 c1                	add    %eax,%ecx
f011fa50:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fa57:	10 00 00 
f011fa5a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fa5f:	0f b6 c0             	movzbl %al,%eax
f011fa62:	c1 e0 04             	shl    $0x4,%eax
f011fa65:	89 c2                	mov    %eax,%edx
f011fa67:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fa6d:	01 d0                	add    %edx,%eax
f011fa6f:	48                   	dec    %eax
f011fa70:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fa76:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fa7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa81:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fa87:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fa8d:	29 d0                	sub    %edx,%eax
f011fa8f:	01 c8                	add    %ecx,%eax
f011fa91:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011fa97:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa9d:	39 c2                	cmp    %eax,%edx
f011fa9f:	74 17                	je     f011fab8 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011faa1:	83 ec 04             	sub    $0x4,%esp
f011faa4:	68 74 ba 13 f0       	push   $0xf013ba74
f011faa9:	68 91 04 00 00       	push   $0x491
f011faae:	68 5a b3 13 f0       	push   $0xf013b35a
f011fab3:	e8 4d 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fab8:	e8 0b 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fabd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fac0:	74 17                	je     f011fad9 <test_kmalloc_worstfit+0x1291>
f011fac2:	83 ec 04             	sub    $0x4,%esp
f011fac5:	68 74 b3 13 f0       	push   $0xf013b374
f011faca:	68 92 04 00 00       	push   $0x492
f011facf:	68 5a b3 13 f0       	push   $0xf013b35a
f011fad4:	e8 2c 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fad9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fadc:	e8 bc d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fae1:	29 c3                	sub    %eax,%ebx
f011fae3:	89 d8                	mov    %ebx,%eax
f011fae5:	3d 80 00 00 00       	cmp    $0x80,%eax
f011faea:	74 17                	je     f011fb03 <test_kmalloc_worstfit+0x12bb>
f011faec:	83 ec 04             	sub    $0x4,%esp
f011faef:	68 92 b8 13 f0       	push   $0xf013b892
f011faf4:	68 93 04 00 00       	push   $0x493
f011faf9:	68 5a b3 13 f0       	push   $0xf013b35a
f011fafe:	e8 02 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb03:	ff 45 e8             	incl   -0x18(%ebp)
f011fb06:	83 ec 08             	sub    $0x8,%esp
f011fb09:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb0c:	68 94 ba 13 f0       	push   $0xf013ba94
f011fb11:	e8 f8 11 fe ff       	call   f0100d0e <cprintf>
f011fb16:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb19:	e8 7f d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fb1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb21:	e8 a2 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb26:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fb29:	83 ec 0c             	sub    $0xc,%esp
f011fb2c:	68 00 04 00 00       	push   $0x400
f011fb31:	e8 4f 7d fe ff       	call   f0107885 <kmalloc>
f011fb36:	83 c4 10             	add    $0x10,%esp
f011fb39:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011fb3f:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011fb46:	10 00 00 
f011fb49:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011fb4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb54:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fb5a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fb60:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb65:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011fb6b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fb71:	29 d0                	sub    %edx,%eax
f011fb73:	89 c1                	mov    %eax,%ecx
f011fb75:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011fb7c:	10 00 00 
f011fb7f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fb84:	0f b6 d0             	movzbl %al,%edx
f011fb87:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fb8d:	01 d0                	add    %edx,%eax
f011fb8f:	48                   	dec    %eax
f011fb90:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011fb96:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fb9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fba1:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011fba7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fbad:	29 d0                	sub    %edx,%eax
f011fbaf:	01 c1                	add    %eax,%ecx
f011fbb1:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fbb8:	10 00 00 
f011fbbb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fbc0:	0f b6 c0             	movzbl %al,%eax
f011fbc3:	c1 e0 04             	shl    $0x4,%eax
f011fbc6:	89 c2                	mov    %eax,%edx
f011fbc8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fbce:	01 d0                	add    %edx,%eax
f011fbd0:	48                   	dec    %eax
f011fbd1:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011fbd7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fbdd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbe2:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fbe8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fbee:	29 d0                	sub    %edx,%eax
f011fbf0:	01 c8                	add    %ecx,%eax
f011fbf2:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011fbf8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fbfe:	39 c2                	cmp    %eax,%edx
f011fc00:	74 17                	je     f011fc19 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011fc02:	83 ec 04             	sub    $0x4,%esp
f011fc05:	68 74 ba 13 f0       	push   $0xf013ba74
f011fc0a:	68 9a 04 00 00       	push   $0x49a
f011fc0f:	68 5a b3 13 f0       	push   $0xf013b35a
f011fc14:	e8 ec 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc19:	e8 aa 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc1e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc21:	74 17                	je     f011fc3a <test_kmalloc_worstfit+0x13f2>
f011fc23:	83 ec 04             	sub    $0x4,%esp
f011fc26:	68 74 b3 13 f0       	push   $0xf013b374
f011fc2b:	68 9b 04 00 00       	push   $0x49b
f011fc30:	68 5a b3 13 f0       	push   $0xf013b35a
f011fc35:	e8 cb 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fc3a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc3d:	e8 5b cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc42:	29 c3                	sub    %eax,%ebx
f011fc44:	89 d8                	mov    %ebx,%eax
f011fc46:	83 f8 01             	cmp    $0x1,%eax
f011fc49:	74 17                	je     f011fc62 <test_kmalloc_worstfit+0x141a>
f011fc4b:	83 ec 04             	sub    $0x4,%esp
f011fc4e:	68 92 b8 13 f0       	push   $0xf013b892
f011fc53:	68 9c 04 00 00       	push   $0x49c
f011fc58:	68 5a b3 13 f0       	push   $0xf013b35a
f011fc5d:	e8 a3 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fc62:	ff 45 e8             	incl   -0x18(%ebp)
f011fc65:	83 ec 08             	sub    $0x8,%esp
f011fc68:	ff 75 e8             	pushl  -0x18(%ebp)
f011fc6b:	68 94 ba 13 f0       	push   $0xf013ba94
f011fc70:	e8 99 10 fe ff       	call   f0100d0e <cprintf>
f011fc75:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fc78:	e8 20 cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fc80:	e8 43 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc85:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fc88:	83 ec 0c             	sub    $0xc,%esp
f011fc8b:	68 00 f0 1f 00       	push   $0x1ff000
f011fc90:	e8 f0 7b fe ff       	call   f0107885 <kmalloc>
f011fc95:	83 c4 10             	add    $0x10,%esp
f011fc98:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011fc9e:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011fca5:	10 00 00 
f011fca8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011fcae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fcb3:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011fcb9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fcbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcc4:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011fcca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fcd0:	29 d0                	sub    %edx,%eax
f011fcd2:	89 c1                	mov    %eax,%ecx
f011fcd4:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011fcdb:	10 00 00 
f011fcde:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fce3:	0f b6 d0             	movzbl %al,%edx
f011fce6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011fcec:	01 d0                	add    %edx,%eax
f011fcee:	48                   	dec    %eax
f011fcef:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011fcf5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fcfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd00:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011fd06:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fd0c:	29 d0                	sub    %edx,%eax
f011fd0e:	01 c1                	add    %eax,%ecx
f011fd10:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011fd17:	10 00 00 
f011fd1a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fd1f:	0f b6 c0             	movzbl %al,%eax
f011fd22:	c1 e0 04             	shl    $0x4,%eax
f011fd25:	89 c2                	mov    %eax,%edx
f011fd27:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011fd2d:	01 d0                	add    %edx,%eax
f011fd2f:	48                   	dec    %eax
f011fd30:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011fd36:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fd3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd41:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011fd47:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fd4d:	29 d0                	sub    %edx,%eax
f011fd4f:	01 c8                	add    %ecx,%eax
f011fd51:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011fd57:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fd5d:	39 c2                	cmp    %eax,%edx
f011fd5f:	74 17                	je     f011fd78 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011fd61:	83 ec 04             	sub    $0x4,%esp
f011fd64:	68 74 ba 13 f0       	push   $0xf013ba74
f011fd69:	68 a3 04 00 00       	push   $0x4a3
f011fd6e:	68 5a b3 13 f0       	push   $0xf013b35a
f011fd73:	e8 8d 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd78:	e8 4b 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd7d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd80:	74 17                	je     f011fd99 <test_kmalloc_worstfit+0x1551>
f011fd82:	83 ec 04             	sub    $0x4,%esp
f011fd85:	68 74 b3 13 f0       	push   $0xf013b374
f011fd8a:	68 a4 04 00 00       	push   $0x4a4
f011fd8f:	68 5a b3 13 f0       	push   $0xf013b35a
f011fd94:	e8 6c 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fd99:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fd9c:	e8 fc cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fda1:	29 c3                	sub    %eax,%ebx
f011fda3:	89 d8                	mov    %ebx,%eax
f011fda5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011fdaa:	74 17                	je     f011fdc3 <test_kmalloc_worstfit+0x157b>
f011fdac:	83 ec 04             	sub    $0x4,%esp
f011fdaf:	68 92 b8 13 f0       	push   $0xf013b892
f011fdb4:	68 a5 04 00 00       	push   $0x4a5
f011fdb9:	68 5a b3 13 f0       	push   $0xf013b35a
f011fdbe:	e8 42 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fdc3:	ff 45 e8             	incl   -0x18(%ebp)
f011fdc6:	83 ec 08             	sub    $0x8,%esp
f011fdc9:	ff 75 e8             	pushl  -0x18(%ebp)
f011fdcc:	68 94 ba 13 f0       	push   $0xf013ba94
f011fdd1:	e8 38 0f fe ff       	call   f0100d0e <cprintf>
f011fdd6:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011fdd9:	e8 bf cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fdde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fde1:	e8 e2 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fde6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011fde9:	83 ec 0c             	sub    $0xc,%esp
f011fdec:	68 00 00 40 00       	push   $0x400000
f011fdf1:	e8 8f 7a fe ff       	call   f0107885 <kmalloc>
f011fdf6:	83 c4 10             	add    $0x10,%esp
f011fdf9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011fdff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fe05:	85 c0                	test   %eax,%eax
f011fe07:	74 17                	je     f011fe20 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011fe09:	83 ec 04             	sub    $0x4,%esp
f011fe0c:	68 74 ba 13 f0       	push   $0xf013ba74
f011fe11:	68 ad 04 00 00       	push   $0x4ad
f011fe16:	68 5a b3 13 f0       	push   $0xf013b35a
f011fe1b:	e8 e5 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe20:	e8 a3 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe28:	74 17                	je     f011fe41 <test_kmalloc_worstfit+0x15f9>
f011fe2a:	83 ec 04             	sub    $0x4,%esp
f011fe2d:	68 74 b3 13 f0       	push   $0xf013b374
f011fe32:	68 ae 04 00 00       	push   $0x4ae
f011fe37:	68 5a b3 13 f0       	push   $0xf013b35a
f011fe3c:	e8 c4 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011fe41:	e8 57 cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fe46:	89 c2                	mov    %eax,%edx
f011fe48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fe4b:	39 c2                	cmp    %eax,%edx
f011fe4d:	74 17                	je     f011fe66 <test_kmalloc_worstfit+0x161e>
f011fe4f:	83 ec 04             	sub    $0x4,%esp
f011fe52:	68 92 b8 13 f0       	push   $0xf013b892
f011fe57:	68 af 04 00 00       	push   $0x4af
f011fe5c:	68 5a b3 13 f0       	push   $0xf013b35a
f011fe61:	e8 9f 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe66:	ff 45 e8             	incl   -0x18(%ebp)
f011fe69:	83 ec 08             	sub    $0x8,%esp
f011fe6c:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe6f:	68 94 ba 13 f0       	push   $0xf013ba94
f011fe74:	e8 95 0e fe ff       	call   f0100d0e <cprintf>
f011fe79:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011fe7c:	83 ec 0c             	sub    $0xc,%esp
f011fe7f:	68 a8 ba 13 f0       	push   $0xf013baa8
f011fe84:	e8 85 0e fe ff       	call   f0100d0e <cprintf>
f011fe89:	83 c4 10             	add    $0x10,%esp


	return 1;
f011fe8c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fe91:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011fe94:	5b                   	pop    %ebx
f011fe95:	5f                   	pop    %edi
f011fe96:	5d                   	pop    %ebp
f011fe97:	c3                   	ret    

f011fe98 <test_kfree>:

int test_kfree()
{
f011fe98:	55                   	push   %ebp
f011fe99:	89 e5                	mov    %esp,%ebp
f011fe9b:	57                   	push   %edi
f011fe9c:	53                   	push   %ebx
f011fe9d:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011fea3:	83 ec 0c             	sub    $0xc,%esp
f011fea6:	68 9c b2 13 f0       	push   $0xf013b29c
f011feab:	e8 5e 0e fe ff       	call   f0100d0e <cprintf>
f011feb0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011feb3:	83 ec 0c             	sub    $0xc,%esp
f011feb6:	68 cc b2 13 f0       	push   $0xf013b2cc
f011febb:	e8 4e 0e fe ff       	call   f0100d0e <cprintf>
f011fec0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011fec3:	83 ec 0c             	sub    $0xc,%esp
f011fec6:	68 9c b2 13 f0       	push   $0xf013b29c
f011fecb:	e8 3e 0e fe ff       	call   f0100d0e <cprintf>
f011fed0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011fed3:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011fed7:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011fedb:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011fee1:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011fee7:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011feee:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011fef5:	e8 a3 cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fefa:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011fefd:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011ff03:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ff08:	b8 00 00 00 00       	mov    $0x0,%eax
f011ff0d:	89 d7                	mov    %edx,%edi
f011ff0f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011ff11:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011ff17:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ff1c:	b8 00 00 00 00       	mov    $0x0,%eax
f011ff21:	89 d7                	mov    %edx,%edi
f011ff23:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011ff25:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011ff2b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ff30:	b8 00 00 00 00       	mov    $0x0,%eax
f011ff35:	89 d7                	mov    %edx,%edi
f011ff37:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff39:	e8 5f cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ff3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff41:	e8 82 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff46:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ff49:	83 ec 0c             	sub    $0xc,%esp
f011ff4c:	68 00 fc 1f 00       	push   $0x1ffc00
f011ff51:	e8 2f 79 fe ff       	call   f0107885 <kmalloc>
f011ff56:	83 c4 10             	add    $0x10,%esp
f011ff59:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff5f:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011ff65:	89 c1                	mov    %eax,%ecx
f011ff67:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011ff6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ff71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff76:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011ff79:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ff7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff81:	f7 75 c8             	divl   -0x38(%ebp)
f011ff84:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ff87:	29 d0                	sub    %edx,%eax
f011ff89:	89 c3                	mov    %eax,%ebx
f011ff8b:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011ff92:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ff97:	0f b6 d0             	movzbl %al,%edx
f011ff9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ff9d:	01 d0                	add    %edx,%eax
f011ff9f:	48                   	dec    %eax
f011ffa0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011ffa3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ffa6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffab:	f7 75 c0             	divl   -0x40(%ebp)
f011ffae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ffb1:	29 d0                	sub    %edx,%eax
f011ffb3:	01 c3                	add    %eax,%ebx
f011ffb5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011ffbc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ffc1:	0f b6 c0             	movzbl %al,%eax
f011ffc4:	c1 e0 04             	shl    $0x4,%eax
f011ffc7:	89 c2                	mov    %eax,%edx
f011ffc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ffcc:	01 d0                	add    %edx,%eax
f011ffce:	48                   	dec    %eax
f011ffcf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011ffd2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ffd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffda:	f7 75 b8             	divl   -0x48(%ebp)
f011ffdd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ffe0:	29 d0                	sub    %edx,%eax
f011ffe2:	01 d8                	add    %ebx,%eax
f011ffe4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ffe9:	39 c1                	cmp    %eax,%ecx
f011ffeb:	74 17                	je     f0120004 <test_kfree+0x16c>
f011ffed:	83 ec 04             	sub    $0x4,%esp
f011fff0:	68 40 b4 13 f0       	push   $0xf013b440
f011fff5:	68 d7 04 00 00       	push   $0x4d7
f011fffa:	68 5a b3 13 f0       	push   $0xf013b35a
f011ffff:	e8 01 02 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120004:	e8 bf 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120009:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012000c:	74 17                	je     f0120025 <test_kfree+0x18d>
f012000e:	83 ec 04             	sub    $0x4,%esp
f0120011:	68 74 b3 13 f0       	push   $0xf013b374
f0120016:	68 d8 04 00 00       	push   $0x4d8
f012001b:	68 5a b3 13 f0       	push   $0xf013b35a
f0120020:	e8 e0 01 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120025:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120028:	e8 70 cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012002d:	29 c3                	sub    %eax,%ebx
f012002f:	89 d8                	mov    %ebx,%eax
f0120031:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120036:	74 17                	je     f012004f <test_kfree+0x1b7>
f0120038:	83 ec 04             	sub    $0x4,%esp
f012003b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0120040:	68 d9 04 00 00       	push   $0x4d9
f0120045:	68 5a b3 13 f0       	push   $0xf013b35a
f012004a:	e8 b6 01 fe ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012004f:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f0120056:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120059:	e8 3f cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012005e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120061:	e8 62 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120066:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0120069:	83 ec 0c             	sub    $0xc,%esp
f012006c:	68 00 fc 1f 00       	push   $0x1ffc00
f0120071:	e8 0f 78 fe ff       	call   f0107885 <kmalloc>
f0120076:	83 c4 10             	add    $0x10,%esp
f0120079:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012007f:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120085:	89 c1                	mov    %eax,%ecx
f0120087:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012008e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0120091:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120096:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0120099:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012009c:	ba 00 00 00 00       	mov    $0x0,%edx
f01200a1:	f7 75 b0             	divl   -0x50(%ebp)
f01200a4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01200a7:	29 d0                	sub    %edx,%eax
f01200a9:	89 c3                	mov    %eax,%ebx
f01200ab:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01200b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01200b7:	0f b6 d0             	movzbl %al,%edx
f01200ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01200bd:	01 d0                	add    %edx,%eax
f01200bf:	48                   	dec    %eax
f01200c0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01200c3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01200c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01200cb:	f7 75 a8             	divl   -0x58(%ebp)
f01200ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01200d1:	29 d0                	sub    %edx,%eax
f01200d3:	01 c3                	add    %eax,%ebx
f01200d5:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01200dc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01200e1:	0f b6 c0             	movzbl %al,%eax
f01200e4:	c1 e0 04             	shl    $0x4,%eax
f01200e7:	89 c2                	mov    %eax,%edx
f01200e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01200ec:	01 d0                	add    %edx,%eax
f01200ee:	48                   	dec    %eax
f01200ef:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01200f2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01200f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01200fa:	f7 75 a0             	divl   -0x60(%ebp)
f01200fd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120100:	29 d0                	sub    %edx,%eax
f0120102:	01 d8                	add    %ebx,%eax
f0120104:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120109:	39 c1                	cmp    %eax,%ecx
f012010b:	74 17                	je     f0120124 <test_kfree+0x28c>
f012010d:	83 ec 04             	sub    $0x4,%esp
f0120110:	68 40 b4 13 f0       	push   $0xf013b440
f0120115:	68 e0 04 00 00       	push   $0x4e0
f012011a:	68 5a b3 13 f0       	push   $0xf013b35a
f012011f:	e8 e1 00 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120124:	e8 9f 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120129:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012012c:	74 17                	je     f0120145 <test_kfree+0x2ad>
f012012e:	83 ec 04             	sub    $0x4,%esp
f0120131:	68 74 b3 13 f0       	push   $0xf013b374
f0120136:	68 e1 04 00 00       	push   $0x4e1
f012013b:	68 5a b3 13 f0       	push   $0xf013b35a
f0120140:	e8 c0 00 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120145:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120148:	e8 50 ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012014d:	29 c3                	sub    %eax,%ebx
f012014f:	89 d8                	mov    %ebx,%eax
f0120151:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120156:	74 17                	je     f012016f <test_kfree+0x2d7>
f0120158:	83 ec 04             	sub    $0x4,%esp
f012015b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0120160:	68 e2 04 00 00       	push   $0x4e2
f0120165:	68 5a b3 13 f0       	push   $0xf013b35a
f012016a:	e8 96 00 fe ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012016f:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f0120176:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120179:	e8 1f ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012017e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120181:	e8 42 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120186:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0120189:	83 ec 0c             	sub    $0xc,%esp
f012018c:	68 00 08 00 00       	push   $0x800
f0120191:	e8 ef 76 fe ff       	call   f0107885 <kmalloc>
f0120196:	83 c4 10             	add    $0x10,%esp
f0120199:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012019f:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01201a5:	89 c1                	mov    %eax,%ecx
f01201a7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01201ae:	8b 45 98             	mov    -0x68(%ebp),%eax
f01201b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201b6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01201b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01201bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01201c1:	f7 75 98             	divl   -0x68(%ebp)
f01201c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01201c7:	29 d0                	sub    %edx,%eax
f01201c9:	89 c3                	mov    %eax,%ebx
f01201cb:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01201d2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01201d7:	0f b6 d0             	movzbl %al,%edx
f01201da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01201dd:	01 d0                	add    %edx,%eax
f01201df:	48                   	dec    %eax
f01201e0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01201e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01201e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01201eb:	f7 75 90             	divl   -0x70(%ebp)
f01201ee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01201f1:	29 d0                	sub    %edx,%eax
f01201f3:	01 c3                	add    %eax,%ebx
f01201f5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01201fc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120201:	0f b6 c0             	movzbl %al,%eax
f0120204:	c1 e0 04             	shl    $0x4,%eax
f0120207:	89 c2                	mov    %eax,%edx
f0120209:	8b 45 88             	mov    -0x78(%ebp),%eax
f012020c:	01 d0                	add    %edx,%eax
f012020e:	48                   	dec    %eax
f012020f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120212:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120215:	ba 00 00 00 00       	mov    $0x0,%edx
f012021a:	f7 75 88             	divl   -0x78(%ebp)
f012021d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120220:	29 d0                	sub    %edx,%eax
f0120222:	01 d8                	add    %ebx,%eax
f0120224:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120229:	39 c1                	cmp    %eax,%ecx
f012022b:	74 17                	je     f0120244 <test_kfree+0x3ac>
f012022d:	83 ec 04             	sub    $0x4,%esp
f0120230:	68 40 b4 13 f0       	push   $0xf013b440
f0120235:	68 e9 04 00 00       	push   $0x4e9
f012023a:	68 5a b3 13 f0       	push   $0xf013b35a
f012023f:	e8 c1 ff fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120244:	e8 7f 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120249:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012024c:	74 17                	je     f0120265 <test_kfree+0x3cd>
f012024e:	83 ec 04             	sub    $0x4,%esp
f0120251:	68 74 b3 13 f0       	push   $0xf013b374
f0120256:	68 ea 04 00 00       	push   $0x4ea
f012025b:	68 5a b3 13 f0       	push   $0xf013b35a
f0120260:	e8 a0 ff fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120265:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120268:	e8 30 c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012026d:	29 c3                	sub    %eax,%ebx
f012026f:	89 d8                	mov    %ebx,%eax
f0120271:	83 f8 01             	cmp    $0x1,%eax
f0120274:	74 17                	je     f012028d <test_kfree+0x3f5>
f0120276:	83 ec 04             	sub    $0x4,%esp
f0120279:	68 dc b3 13 f0       	push   $0xf013b3dc
f012027e:	68 eb 04 00 00       	push   $0x4eb
f0120283:	68 5a b3 13 f0       	push   $0xf013b35a
f0120288:	e8 78 ff fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012028d:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120294:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120297:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012029d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01202a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202a7:	eb 0e                	jmp    f01202b7 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01202a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01202ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01202af:	01 d0                	add    %edx,%eax
f01202b1:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01202b4:	ff 45 f4             	incl   -0xc(%ebp)
f01202b7:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01202bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202c0:	7f e7                	jg     f01202a9 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01202c2:	e8 d6 c8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01202c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202ca:	e8 f9 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01202cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01202d2:	83 ec 0c             	sub    $0xc,%esp
f01202d5:	68 00 08 00 00       	push   $0x800
f01202da:	e8 a6 75 fe ff       	call   f0107885 <kmalloc>
f01202df:	83 c4 10             	add    $0x10,%esp
f01202e2:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202e8:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01202ee:	89 c1                	mov    %eax,%ecx
f01202f0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01202f7:	10 00 00 
f01202fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120300:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120305:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012030b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120311:	ba 00 00 00 00       	mov    $0x0,%edx
f0120316:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012031c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120322:	29 d0                	sub    %edx,%eax
f0120324:	89 c3                	mov    %eax,%ebx
f0120326:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012032d:	10 00 00 
f0120330:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120335:	0f b6 d0             	movzbl %al,%edx
f0120338:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012033e:	01 d0                	add    %edx,%eax
f0120340:	48                   	dec    %eax
f0120341:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120347:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012034d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120352:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120358:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012035e:	29 d0                	sub    %edx,%eax
f0120360:	01 c3                	add    %eax,%ebx
f0120362:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120369:	10 00 00 
f012036c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120371:	0f b6 c0             	movzbl %al,%eax
f0120374:	c1 e0 04             	shl    $0x4,%eax
f0120377:	89 c2                	mov    %eax,%edx
f0120379:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012037f:	01 d0                	add    %edx,%eax
f0120381:	48                   	dec    %eax
f0120382:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120388:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012038e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120393:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120399:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012039f:	29 d0                	sub    %edx,%eax
f01203a1:	01 d8                	add    %ebx,%eax
f01203a3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01203a8:	39 c1                	cmp    %eax,%ecx
f01203aa:	74 17                	je     f01203c3 <test_kfree+0x52b>
f01203ac:	83 ec 04             	sub    $0x4,%esp
f01203af:	68 40 b4 13 f0       	push   $0xf013b440
f01203b4:	68 f7 04 00 00       	push   $0x4f7
f01203b9:	68 5a b3 13 f0       	push   $0xf013b35a
f01203be:	e8 42 fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203c3:	e8 00 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01203c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203cb:	74 17                	je     f01203e4 <test_kfree+0x54c>
f01203cd:	83 ec 04             	sub    $0x4,%esp
f01203d0:	68 74 b3 13 f0       	push   $0xf013b374
f01203d5:	68 f8 04 00 00       	push   $0x4f8
f01203da:	68 5a b3 13 f0       	push   $0xf013b35a
f01203df:	e8 21 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01203e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01203e7:	e8 b1 c7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01203ec:	29 c3                	sub    %eax,%ebx
f01203ee:	89 d8                	mov    %ebx,%eax
f01203f0:	83 f8 01             	cmp    $0x1,%eax
f01203f3:	74 17                	je     f012040c <test_kfree+0x574>
f01203f5:	83 ec 04             	sub    $0x4,%esp
f01203f8:	68 dc b3 13 f0       	push   $0xf013b3dc
f01203fd:	68 f9 04 00 00       	push   $0x4f9
f0120402:	68 5a b3 13 f0       	push   $0xf013b35a
f0120407:	e8 f9 fd fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012040c:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120413:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120416:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012041c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012041f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120426:	eb 0e                	jmp    f0120436 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120428:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012042b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012042e:	01 d0                	add    %edx,%eax
f0120430:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120433:	ff 45 f4             	incl   -0xc(%ebp)
f0120436:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012043c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012043f:	7f e7                	jg     f0120428 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120441:	e8 57 c7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120446:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120449:	e8 7a 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012044e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120451:	83 ec 0c             	sub    $0xc,%esp
f0120454:	68 00 1c 00 00       	push   $0x1c00
f0120459:	e8 27 74 fe ff       	call   f0107885 <kmalloc>
f012045e:	83 c4 10             	add    $0x10,%esp
f0120461:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120467:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012046d:	89 c1                	mov    %eax,%ecx
f012046f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120476:	10 00 00 
f0120479:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012047f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120484:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012048a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120490:	ba 00 00 00 00       	mov    $0x0,%edx
f0120495:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012049b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01204a1:	29 d0                	sub    %edx,%eax
f01204a3:	89 c3                	mov    %eax,%ebx
f01204a5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01204ac:	10 00 00 
f01204af:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01204b4:	0f b6 d0             	movzbl %al,%edx
f01204b7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01204bd:	01 d0                	add    %edx,%eax
f01204bf:	48                   	dec    %eax
f01204c0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01204c6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01204cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01204d1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01204d7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01204dd:	29 d0                	sub    %edx,%eax
f01204df:	01 c3                	add    %eax,%ebx
f01204e1:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01204e8:	10 00 00 
f01204eb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01204f0:	0f b6 c0             	movzbl %al,%eax
f01204f3:	c1 e0 04             	shl    $0x4,%eax
f01204f6:	89 c2                	mov    %eax,%edx
f01204f8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01204fe:	01 d0                	add    %edx,%eax
f0120500:	48                   	dec    %eax
f0120501:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120507:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012050d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120512:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120518:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012051e:	29 d0                	sub    %edx,%eax
f0120520:	01 d8                	add    %ebx,%eax
f0120522:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120527:	39 c1                	cmp    %eax,%ecx
f0120529:	74 17                	je     f0120542 <test_kfree+0x6aa>
f012052b:	83 ec 04             	sub    $0x4,%esp
f012052e:	68 40 b4 13 f0       	push   $0xf013b440
f0120533:	68 05 05 00 00       	push   $0x505
f0120538:	68 5a b3 13 f0       	push   $0xf013b35a
f012053d:	e8 c3 fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120542:	e8 81 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120547:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012054a:	74 17                	je     f0120563 <test_kfree+0x6cb>
f012054c:	83 ec 04             	sub    $0x4,%esp
f012054f:	68 74 b3 13 f0       	push   $0xf013b374
f0120554:	68 06 05 00 00       	push   $0x506
f0120559:	68 5a b3 13 f0       	push   $0xf013b35a
f012055e:	e8 a2 fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120563:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120566:	e8 32 c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012056b:	29 c3                	sub    %eax,%ebx
f012056d:	89 d8                	mov    %ebx,%eax
f012056f:	83 f8 02             	cmp    $0x2,%eax
f0120572:	74 17                	je     f012058b <test_kfree+0x6f3>
f0120574:	83 ec 04             	sub    $0x4,%esp
f0120577:	68 dc b3 13 f0       	push   $0xf013b3dc
f012057c:	68 07 05 00 00       	push   $0x507
f0120581:	68 5a b3 13 f0       	push   $0xf013b35a
f0120586:	e8 7a fc fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012058b:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120592:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120595:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012059b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012059e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205a5:	eb 0e                	jmp    f01205b5 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f01205a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205aa:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205ad:	01 d0                	add    %edx,%eax
f01205af:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01205b2:	ff 45 f4             	incl   -0xc(%ebp)
f01205b5:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01205bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205be:	7f e7                	jg     f01205a7 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01205c0:	e8 d8 c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01205c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205c8:	e8 fb 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01205d0:	83 ec 0c             	sub    $0xc,%esp
f01205d3:	68 00 fc 2f 00       	push   $0x2ffc00
f01205d8:	e8 a8 72 fe ff       	call   f0107885 <kmalloc>
f01205dd:	83 c4 10             	add    $0x10,%esp
f01205e0:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205e6:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01205ec:	89 c1                	mov    %eax,%ecx
f01205ee:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01205f5:	10 00 00 
f01205f8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01205fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120603:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120609:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012060f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120614:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012061a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120620:	29 d0                	sub    %edx,%eax
f0120622:	89 c3                	mov    %eax,%ebx
f0120624:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012062b:	10 00 00 
f012062e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120633:	0f b6 d0             	movzbl %al,%edx
f0120636:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012063c:	01 d0                	add    %edx,%eax
f012063e:	48                   	dec    %eax
f012063f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120645:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012064b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120650:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120656:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012065c:	29 d0                	sub    %edx,%eax
f012065e:	01 c3                	add    %eax,%ebx
f0120660:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120667:	10 00 00 
f012066a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012066f:	0f b6 c0             	movzbl %al,%eax
f0120672:	c1 e0 04             	shl    $0x4,%eax
f0120675:	89 c2                	mov    %eax,%edx
f0120677:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012067d:	01 d0                	add    %edx,%eax
f012067f:	48                   	dec    %eax
f0120680:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120686:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012068c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120691:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120697:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012069d:	29 d0                	sub    %edx,%eax
f012069f:	01 d8                	add    %ebx,%eax
f01206a1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01206a6:	39 c1                	cmp    %eax,%ecx
f01206a8:	74 17                	je     f01206c1 <test_kfree+0x829>
f01206aa:	83 ec 04             	sub    $0x4,%esp
f01206ad:	68 40 b4 13 f0       	push   $0xf013b440
f01206b2:	68 13 05 00 00       	push   $0x513
f01206b7:	68 5a b3 13 f0       	push   $0xf013b35a
f01206bc:	e8 44 fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206c1:	e8 02 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206c6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206c9:	74 17                	je     f01206e2 <test_kfree+0x84a>
f01206cb:	83 ec 04             	sub    $0x4,%esp
f01206ce:	68 74 b3 13 f0       	push   $0xf013b374
f01206d3:	68 14 05 00 00       	push   $0x514
f01206d8:	68 5a b3 13 f0       	push   $0xf013b35a
f01206dd:	e8 23 fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01206e2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01206e5:	e8 b3 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01206ea:	29 c3                	sub    %eax,%ebx
f01206ec:	89 d8                	mov    %ebx,%eax
f01206ee:	3d 00 03 00 00       	cmp    $0x300,%eax
f01206f3:	74 17                	je     f012070c <test_kfree+0x874>
f01206f5:	83 ec 04             	sub    $0x4,%esp
f01206f8:	68 dc b3 13 f0       	push   $0xf013b3dc
f01206fd:	68 15 05 00 00       	push   $0x515
f0120702:	68 5a b3 13 f0       	push   $0xf013b35a
f0120707:	e8 f9 fa fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012070c:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120713:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120716:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012071c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012071f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120726:	eb 0e                	jmp    f0120736 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120728:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012072b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012072e:	01 d0                	add    %edx,%eax
f0120730:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120733:	ff 45 f4             	incl   -0xc(%ebp)
f0120736:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012073c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012073f:	7f e7                	jg     f0120728 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120741:	e8 57 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120746:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120749:	e8 7a 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012074e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120751:	83 ec 0c             	sub    $0xc,%esp
f0120754:	68 00 fc 5f 00       	push   $0x5ffc00
f0120759:	e8 27 71 fe ff       	call   f0107885 <kmalloc>
f012075e:	83 c4 10             	add    $0x10,%esp
f0120761:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120767:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f012076d:	89 c1                	mov    %eax,%ecx
f012076f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120776:	10 00 00 
f0120779:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012077f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120784:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012078a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120790:	ba 00 00 00 00       	mov    $0x0,%edx
f0120795:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012079b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01207a1:	29 d0                	sub    %edx,%eax
f01207a3:	89 c3                	mov    %eax,%ebx
f01207a5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01207ac:	10 00 00 
f01207af:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01207b4:	0f b6 d0             	movzbl %al,%edx
f01207b7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01207bd:	01 d0                	add    %edx,%eax
f01207bf:	48                   	dec    %eax
f01207c0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01207c6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01207cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01207d1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01207d7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01207dd:	29 d0                	sub    %edx,%eax
f01207df:	01 c3                	add    %eax,%ebx
f01207e1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01207e8:	10 00 00 
f01207eb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01207f0:	0f b6 c0             	movzbl %al,%eax
f01207f3:	c1 e0 04             	shl    $0x4,%eax
f01207f6:	89 c2                	mov    %eax,%edx
f01207f8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01207fe:	01 d0                	add    %edx,%eax
f0120800:	48                   	dec    %eax
f0120801:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120807:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012080d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120812:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120818:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012081e:	29 d0                	sub    %edx,%eax
f0120820:	01 d8                	add    %ebx,%eax
f0120822:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120827:	39 c1                	cmp    %eax,%ecx
f0120829:	74 17                	je     f0120842 <test_kfree+0x9aa>
f012082b:	83 ec 04             	sub    $0x4,%esp
f012082e:	68 40 b4 13 f0       	push   $0xf013b440
f0120833:	68 21 05 00 00       	push   $0x521
f0120838:	68 5a b3 13 f0       	push   $0xf013b35a
f012083d:	e8 c3 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120842:	e8 81 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120847:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012084a:	74 17                	je     f0120863 <test_kfree+0x9cb>
f012084c:	83 ec 04             	sub    $0x4,%esp
f012084f:	68 74 b3 13 f0       	push   $0xf013b374
f0120854:	68 22 05 00 00       	push   $0x522
f0120859:	68 5a b3 13 f0       	push   $0xf013b35a
f012085e:	e8 a2 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120863:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120866:	e8 32 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012086b:	29 c3                	sub    %eax,%ebx
f012086d:	89 d8                	mov    %ebx,%eax
f012086f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120874:	74 17                	je     f012088d <test_kfree+0x9f5>
f0120876:	83 ec 04             	sub    $0x4,%esp
f0120879:	68 dc b3 13 f0       	push   $0xf013b3dc
f012087e:	68 23 05 00 00       	push   $0x523
f0120883:	68 5a b3 13 f0       	push   $0xf013b35a
f0120888:	e8 78 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012088d:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120894:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120897:	e8 01 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012089c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012089f:	e8 24 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01208a7:	83 ec 0c             	sub    $0xc,%esp
f01208aa:	68 00 38 00 00       	push   $0x3800
f01208af:	e8 d1 6f fe ff       	call   f0107885 <kmalloc>
f01208b4:	83 c4 10             	add    $0x10,%esp
f01208b7:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208bd:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01208c3:	89 c1                	mov    %eax,%ecx
f01208c5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01208cc:	10 00 00 
f01208cf:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01208d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208da:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01208e0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01208e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01208eb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01208f1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01208f7:	29 d0                	sub    %edx,%eax
f01208f9:	89 c3                	mov    %eax,%ebx
f01208fb:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120902:	10 00 00 
f0120905:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012090a:	0f b6 d0             	movzbl %al,%edx
f012090d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120913:	01 d0                	add    %edx,%eax
f0120915:	48                   	dec    %eax
f0120916:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012091c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120922:	ba 00 00 00 00       	mov    $0x0,%edx
f0120927:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012092d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120933:	29 d0                	sub    %edx,%eax
f0120935:	01 c3                	add    %eax,%ebx
f0120937:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012093e:	10 00 00 
f0120941:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120946:	0f b6 c0             	movzbl %al,%eax
f0120949:	c1 e0 04             	shl    $0x4,%eax
f012094c:	89 c2                	mov    %eax,%edx
f012094e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120954:	01 d0                	add    %edx,%eax
f0120956:	48                   	dec    %eax
f0120957:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012095d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120963:	ba 00 00 00 00       	mov    $0x0,%edx
f0120968:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012096e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120974:	29 d0                	sub    %edx,%eax
f0120976:	01 d8                	add    %ebx,%eax
f0120978:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012097d:	39 c1                	cmp    %eax,%ecx
f012097f:	74 17                	je     f0120998 <test_kfree+0xb00>
f0120981:	83 ec 04             	sub    $0x4,%esp
f0120984:	68 40 b4 13 f0       	push   $0xf013b440
f0120989:	68 2a 05 00 00       	push   $0x52a
f012098e:	68 5a b3 13 f0       	push   $0xf013b35a
f0120993:	e8 6d f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120998:	e8 2b 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012099d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209a0:	74 17                	je     f01209b9 <test_kfree+0xb21>
f01209a2:	83 ec 04             	sub    $0x4,%esp
f01209a5:	68 74 b3 13 f0       	push   $0xf013b374
f01209aa:	68 2b 05 00 00       	push   $0x52b
f01209af:	68 5a b3 13 f0       	push   $0xf013b35a
f01209b4:	e8 4c f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209b9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209bc:	e8 dc c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01209c1:	29 c3                	sub    %eax,%ebx
f01209c3:	89 d8                	mov    %ebx,%eax
f01209c5:	83 f8 04             	cmp    $0x4,%eax
f01209c8:	74 17                	je     f01209e1 <test_kfree+0xb49>
f01209ca:	83 ec 04             	sub    $0x4,%esp
f01209cd:	68 dc b3 13 f0       	push   $0xf013b3dc
f01209d2:	68 2c 05 00 00       	push   $0x52c
f01209d7:	68 5a b3 13 f0       	push   $0xf013b35a
f01209dc:	e8 24 f8 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01209e1:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f01209e8:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01209eb:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01209f1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01209f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209fb:	eb 0e                	jmp    f0120a0b <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01209fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a00:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a03:	01 d0                	add    %edx,%eax
f0120a05:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120a08:	ff 45 f4             	incl   -0xc(%ebp)
f0120a0b:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120a11:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a14:	7f e7                	jg     f01209fd <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120a16:	e8 82 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a1b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120a21:	e8 a2 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a26:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120a2c:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120a32:	83 ec 0c             	sub    $0xc,%esp
f0120a35:	50                   	push   %eax
f0120a36:	e8 15 6f fe ff       	call   f0107950 <kfree>
f0120a3b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a3e:	e8 85 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a43:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120a49:	74 17                	je     f0120a62 <test_kfree+0xbca>
f0120a4b:	83 ec 04             	sub    $0x4,%esp
f0120a4e:	68 74 b3 13 f0       	push   $0xf013b374
f0120a53:	68 3b 05 00 00       	push   $0x53b
f0120a58:	68 5a b3 13 f0       	push   $0xf013b35a
f0120a5d:	e8 a3 f7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a62:	e8 36 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a67:	89 c2                	mov    %eax,%edx
f0120a69:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120a6f:	29 c2                	sub    %eax,%edx
f0120a71:	89 d0                	mov    %edx,%eax
f0120a73:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120a78:	74 17                	je     f0120a91 <test_kfree+0xbf9>
f0120a7a:	83 ec 04             	sub    $0x4,%esp
f0120a7d:	68 e4 ba 13 f0       	push   $0xf013bae4
f0120a82:	68 3c 05 00 00       	push   $0x53c
f0120a87:	68 5a b3 13 f0       	push   $0xf013b35a
f0120a8c:	e8 74 f7 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a91:	e8 07 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a96:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a9c:	e8 27 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120aa1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120aa7:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120aad:	83 ec 0c             	sub    $0xc,%esp
f0120ab0:	50                   	push   %eax
f0120ab1:	e8 9a 6e fe ff       	call   f0107950 <kfree>
f0120ab6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ab9:	e8 0a 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120abe:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120ac4:	74 17                	je     f0120add <test_kfree+0xc45>
f0120ac6:	83 ec 04             	sub    $0x4,%esp
f0120ac9:	68 74 b3 13 f0       	push   $0xf013b374
f0120ace:	68 42 05 00 00       	push   $0x542
f0120ad3:	68 5a b3 13 f0       	push   $0xf013b35a
f0120ad8:	e8 28 f7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120add:	e8 bb c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120ae2:	89 c2                	mov    %eax,%edx
f0120ae4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120aea:	29 c2                	sub    %eax,%edx
f0120aec:	89 d0                	mov    %edx,%eax
f0120aee:	83 f8 01             	cmp    $0x1,%eax
f0120af1:	74 17                	je     f0120b0a <test_kfree+0xc72>
f0120af3:	83 ec 04             	sub    $0x4,%esp
f0120af6:	68 e4 ba 13 f0       	push   $0xf013bae4
f0120afb:	68 43 05 00 00       	push   $0x543
f0120b00:	68 5a b3 13 f0       	push   $0xf013b35a
f0120b05:	e8 fb f6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b0a:	e8 8e c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b0f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b15:	e8 ae 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b1a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120b20:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120b26:	83 ec 0c             	sub    $0xc,%esp
f0120b29:	50                   	push   %eax
f0120b2a:	e8 21 6e fe ff       	call   f0107950 <kfree>
f0120b2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b32:	e8 91 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b37:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120b3d:	74 17                	je     f0120b56 <test_kfree+0xcbe>
f0120b3f:	83 ec 04             	sub    $0x4,%esp
f0120b42:	68 74 b3 13 f0       	push   $0xf013b374
f0120b47:	68 49 05 00 00       	push   $0x549
f0120b4c:	68 5a b3 13 f0       	push   $0xf013b35a
f0120b51:	e8 af f6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b56:	e8 42 c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b5b:	89 c2                	mov    %eax,%edx
f0120b5d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120b63:	29 c2                	sub    %eax,%edx
f0120b65:	89 d0                	mov    %edx,%eax
f0120b67:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120b6c:	74 17                	je     f0120b85 <test_kfree+0xced>
f0120b6e:	83 ec 04             	sub    $0x4,%esp
f0120b71:	68 e4 ba 13 f0       	push   $0xf013bae4
f0120b76:	68 4a 05 00 00       	push   $0x54a
f0120b7b:	68 5a b3 13 f0       	push   $0xf013b35a
f0120b80:	e8 80 f6 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b85:	e8 13 c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b8a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b90:	e8 33 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b95:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120b9b:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120ba1:	83 ec 0c             	sub    $0xc,%esp
f0120ba4:	50                   	push   %eax
f0120ba5:	e8 a6 6d fe ff       	call   f0107950 <kfree>
f0120baa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bad:	e8 16 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120bb2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120bb8:	74 17                	je     f0120bd1 <test_kfree+0xd39>
f0120bba:	83 ec 04             	sub    $0x4,%esp
f0120bbd:	68 74 b3 13 f0       	push   $0xf013b374
f0120bc2:	68 50 05 00 00       	push   $0x550
f0120bc7:	68 5a b3 13 f0       	push   $0xf013b35a
f0120bcc:	e8 34 f6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bd1:	e8 c7 bf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120bd6:	89 c2                	mov    %eax,%edx
f0120bd8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120bde:	29 c2                	sub    %eax,%edx
f0120be0:	89 d0                	mov    %edx,%eax
f0120be2:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120be7:	74 17                	je     f0120c00 <test_kfree+0xd68>
f0120be9:	83 ec 04             	sub    $0x4,%esp
f0120bec:	68 e4 ba 13 f0       	push   $0xf013bae4
f0120bf1:	68 51 05 00 00       	push   $0x551
f0120bf6:	68 5a b3 13 f0       	push   $0xf013b35a
f0120bfb:	e8 05 f6 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120c00:	83 ec 0c             	sub    $0xc,%esp
f0120c03:	68 1c bb 13 f0       	push   $0xf013bb1c
f0120c08:	e8 01 01 fe ff       	call   f0100d0e <cprintf>
f0120c0d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120c10:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120c16:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120c19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c20:	eb 1e                	jmp    f0120c40 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120c22:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120c28:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120c2b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120c2e:	01 c8                	add    %ecx,%eax
f0120c30:	8a 00                	mov    (%eax),%al
f0120c32:	0f be c0             	movsbl %al,%eax
f0120c35:	01 d0                	add    %edx,%eax
f0120c37:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120c3d:	ff 45 f4             	incl   -0xc(%ebp)
f0120c40:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120c46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c49:	7f d7                	jg     f0120c22 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120c4b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120c51:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120c57:	89 c1                	mov    %eax,%ecx
f0120c59:	01 c9                	add    %ecx,%ecx
f0120c5b:	01 c8                	add    %ecx,%eax
f0120c5d:	39 c2                	cmp    %eax,%edx
f0120c5f:	74 17                	je     f0120c78 <test_kfree+0xde0>
f0120c61:	83 ec 04             	sub    $0x4,%esp
f0120c64:	68 40 bb 13 f0       	push   $0xf013bb40
f0120c69:	68 5e 05 00 00       	push   $0x55e
f0120c6e:	68 5a b3 13 f0       	push   $0xf013b35a
f0120c73:	e8 8d f5 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120c78:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120c7e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c88:	eb 1e                	jmp    f0120ca8 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120c8a:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120c90:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120c93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120c96:	01 c8                	add    %ecx,%eax
f0120c98:	8a 00                	mov    (%eax),%al
f0120c9a:	0f be c0             	movsbl %al,%eax
f0120c9d:	01 d0                	add    %edx,%eax
f0120c9f:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120ca5:	ff 45 f4             	incl   -0xc(%ebp)
f0120ca8:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120cae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cb1:	7f d7                	jg     f0120c8a <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120cb3:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120cb9:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120cbf:	c1 e2 02             	shl    $0x2,%edx
f0120cc2:	39 d0                	cmp    %edx,%eax
f0120cc4:	74 17                	je     f0120cdd <test_kfree+0xe45>
f0120cc6:	83 ec 04             	sub    $0x4,%esp
f0120cc9:	68 40 bb 13 f0       	push   $0xf013bb40
f0120cce:	68 66 05 00 00       	push   $0x566
f0120cd3:	68 5a b3 13 f0       	push   $0xf013b35a
f0120cd8:	e8 28 f5 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120cdd:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120ce3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120ce6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ced:	eb 1e                	jmp    f0120d0d <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120cef:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120cf5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120cf8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120cfb:	01 c8                	add    %ecx,%eax
f0120cfd:	8a 00                	mov    (%eax),%al
f0120cff:	0f be c0             	movsbl %al,%eax
f0120d02:	01 d0                	add    %edx,%eax
f0120d04:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120d0a:	ff 45 f4             	incl   -0xc(%ebp)
f0120d0d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120d13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d16:	7f d7                	jg     f0120cef <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120d18:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120d1e:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120d24:	89 d0                	mov    %edx,%eax
f0120d26:	c1 e0 02             	shl    $0x2,%eax
f0120d29:	01 d0                	add    %edx,%eax
f0120d2b:	39 c1                	cmp    %eax,%ecx
f0120d2d:	74 17                	je     f0120d46 <test_kfree+0xeae>
f0120d2f:	83 ec 04             	sub    $0x4,%esp
f0120d32:	68 40 bb 13 f0       	push   $0xf013bb40
f0120d37:	68 6e 05 00 00       	push   $0x56e
f0120d3c:	68 5a b3 13 f0       	push   $0xf013b35a
f0120d41:	e8 bf f4 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120d46:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120d4c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d56:	eb 1e                	jmp    f0120d76 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120d58:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120d5e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120d61:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d64:	01 c8                	add    %ecx,%eax
f0120d66:	8a 00                	mov    (%eax),%al
f0120d68:	0f be c0             	movsbl %al,%eax
f0120d6b:	01 d0                	add    %edx,%eax
f0120d6d:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120d73:	ff 45 f4             	incl   -0xc(%ebp)
f0120d76:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120d7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d7f:	7f d7                	jg     f0120d58 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120d81:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120d87:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120d8d:	89 d0                	mov    %edx,%eax
f0120d8f:	01 c0                	add    %eax,%eax
f0120d91:	01 d0                	add    %edx,%eax
f0120d93:	01 c0                	add    %eax,%eax
f0120d95:	01 d0                	add    %edx,%eax
f0120d97:	39 c1                	cmp    %eax,%ecx
f0120d99:	74 17                	je     f0120db2 <test_kfree+0xf1a>
f0120d9b:	83 ec 04             	sub    $0x4,%esp
f0120d9e:	68 40 bb 13 f0       	push   $0xf013bb40
f0120da3:	68 76 05 00 00       	push   $0x576
f0120da8:	68 5a b3 13 f0       	push   $0xf013b35a
f0120dad:	e8 53 f4 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0120db2:	83 ec 0c             	sub    $0xc,%esp
f0120db5:	68 73 bb 13 f0       	push   $0xf013bb73
f0120dba:	e8 4f ff fd ff       	call   f0100d0e <cprintf>
f0120dbf:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120dc2:	e8 d6 bd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120dc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dca:	e8 f9 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120dcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120dd2:	83 ec 0c             	sub    $0xc,%esp
f0120dd5:	68 00 50 00 00       	push   $0x5000
f0120dda:	e8 a6 6a fe ff       	call   f0107885 <kmalloc>
f0120ddf:	83 c4 10             	add    $0x10,%esp
f0120de2:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120de8:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120dee:	89 c1                	mov    %eax,%ecx
f0120df0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120df7:	10 00 00 
f0120dfa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120e00:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e05:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120e0b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120e11:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e16:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120e1c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120e22:	29 d0                	sub    %edx,%eax
f0120e24:	89 c3                	mov    %eax,%ebx
f0120e26:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120e2d:	10 00 00 
f0120e30:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120e35:	0f b6 d0             	movzbl %al,%edx
f0120e38:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120e3e:	01 d0                	add    %edx,%eax
f0120e40:	48                   	dec    %eax
f0120e41:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120e47:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120e4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e52:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120e58:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120e5e:	29 d0                	sub    %edx,%eax
f0120e60:	01 c3                	add    %eax,%ebx
f0120e62:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120e69:	10 00 00 
f0120e6c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120e71:	0f b6 c0             	movzbl %al,%eax
f0120e74:	c1 e0 04             	shl    $0x4,%eax
f0120e77:	89 c2                	mov    %eax,%edx
f0120e79:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120e7f:	01 d0                	add    %edx,%eax
f0120e81:	48                   	dec    %eax
f0120e82:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120e88:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120e8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e93:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120e99:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120e9f:	29 d0                	sub    %edx,%eax
f0120ea1:	01 d8                	add    %ebx,%eax
f0120ea3:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120ea8:	39 c1                	cmp    %eax,%ecx
f0120eaa:	74 17                	je     f0120ec3 <test_kfree+0x102b>
f0120eac:	83 ec 04             	sub    $0x4,%esp
f0120eaf:	68 40 b4 13 f0       	push   $0xf013b440
f0120eb4:	68 80 05 00 00       	push   $0x580
f0120eb9:	68 5a b3 13 f0       	push   $0xf013b35a
f0120ebe:	e8 42 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec3:	e8 00 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ec8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ecb:	74 17                	je     f0120ee4 <test_kfree+0x104c>
f0120ecd:	83 ec 04             	sub    $0x4,%esp
f0120ed0:	68 74 b3 13 f0       	push   $0xf013b374
f0120ed5:	68 81 05 00 00       	push   $0x581
f0120eda:	68 5a b3 13 f0       	push   $0xf013b35a
f0120edf:	e8 21 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ee4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ee7:	e8 b1 bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120eec:	29 c3                	sub    %eax,%ebx
f0120eee:	89 d8                	mov    %ebx,%eax
f0120ef0:	83 f8 05             	cmp    $0x5,%eax
f0120ef3:	74 17                	je     f0120f0c <test_kfree+0x1074>
f0120ef5:	83 ec 04             	sub    $0x4,%esp
f0120ef8:	68 dc b3 13 f0       	push   $0xf013b3dc
f0120efd:	68 82 05 00 00       	push   $0x582
f0120f02:	68 5a b3 13 f0       	push   $0xf013b35a
f0120f07:	e8 f9 f2 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120f0c:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120f13:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120f16:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120f1c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120f1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f26:	eb 0e                	jmp    f0120f36 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120f28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f2b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f2e:	01 d0                	add    %edx,%eax
f0120f30:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120f33:	ff 45 f4             	incl   -0xc(%ebp)
f0120f36:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120f3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f3f:	7f e7                	jg     f0120f28 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f41:	e8 57 bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120f46:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f49:	e8 7a 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120f4e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120f51:	83 ec 0c             	sub    $0xc,%esp
f0120f54:	68 00 00 10 00       	push   $0x100000
f0120f59:	e8 27 69 fe ff       	call   f0107885 <kmalloc>
f0120f5e:	83 c4 10             	add    $0x10,%esp
f0120f61:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f67:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120f6d:	89 c1                	mov    %eax,%ecx
f0120f6f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120f76:	10 00 00 
f0120f79:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120f7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f84:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120f8a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f95:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120f9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120fa1:	29 d0                	sub    %edx,%eax
f0120fa3:	89 c3                	mov    %eax,%ebx
f0120fa5:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120fac:	10 00 00 
f0120faf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120fb4:	0f b6 d0             	movzbl %al,%edx
f0120fb7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120fbd:	01 d0                	add    %edx,%eax
f0120fbf:	48                   	dec    %eax
f0120fc0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120fc6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120fcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fd1:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120fd7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120fdd:	29 d0                	sub    %edx,%eax
f0120fdf:	01 c3                	add    %eax,%ebx
f0120fe1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120fe8:	10 00 00 
f0120feb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120ff0:	0f b6 c0             	movzbl %al,%eax
f0120ff3:	c1 e0 04             	shl    $0x4,%eax
f0120ff6:	89 c2                	mov    %eax,%edx
f0120ff8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120ffe:	01 d0                	add    %edx,%eax
f0121000:	48                   	dec    %eax
f0121001:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121007:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012100d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121012:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121018:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012101e:	29 d0                	sub    %edx,%eax
f0121020:	01 d8                	add    %ebx,%eax
f0121022:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121027:	39 c1                	cmp    %eax,%ecx
f0121029:	74 17                	je     f0121042 <test_kfree+0x11aa>
f012102b:	83 ec 04             	sub    $0x4,%esp
f012102e:	68 40 b4 13 f0       	push   $0xf013b440
f0121033:	68 8e 05 00 00       	push   $0x58e
f0121038:	68 5a b3 13 f0       	push   $0xf013b35a
f012103d:	e8 c3 f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121042:	e8 81 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121047:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012104a:	74 17                	je     f0121063 <test_kfree+0x11cb>
f012104c:	83 ec 04             	sub    $0x4,%esp
f012104f:	68 74 b3 13 f0       	push   $0xf013b374
f0121054:	68 8f 05 00 00       	push   $0x58f
f0121059:	68 5a b3 13 f0       	push   $0xf013b35a
f012105e:	e8 a2 f1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121063:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121066:	e8 32 bb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012106b:	29 c3                	sub    %eax,%ebx
f012106d:	89 d8                	mov    %ebx,%eax
f012106f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121074:	74 17                	je     f012108d <test_kfree+0x11f5>
f0121076:	83 ec 04             	sub    $0x4,%esp
f0121079:	68 dc b3 13 f0       	push   $0xf013b3dc
f012107e:	68 90 05 00 00       	push   $0x590
f0121083:	68 5a b3 13 f0       	push   $0xf013b35a
f0121088:	e8 78 f1 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012108d:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0121094:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0121097:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012109d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01210a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210a7:	eb 0e                	jmp    f01210b7 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01210a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210af:	01 d0                	add    %edx,%eax
f01210b1:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01210b4:	ff 45 f4             	incl   -0xc(%ebp)
f01210b7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01210bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210c0:	7f e7                	jg     f01210a9 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01210c2:	e8 ac 66 ff ff       	call   f0117773 <isKHeapPlacementStrategyNEXTFIT>
f01210c7:	84 c0                	test   %al,%al
f01210c9:	0f 84 ac 06 00 00    	je     f012177b <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01210cf:	e8 c9 ba fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01210d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210d7:	e8 ec 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210dc:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01210df:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01210e6:	10 00 00 
f01210e9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01210ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210f4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01210fa:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121100:	ba 00 00 00 00       	mov    $0x0,%edx
f0121105:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012110b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121111:	29 d0                	sub    %edx,%eax
f0121113:	89 c1                	mov    %eax,%ecx
f0121115:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012111c:	10 00 00 
f012111f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121124:	0f b6 d0             	movzbl %al,%edx
f0121127:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012112d:	01 d0                	add    %edx,%eax
f012112f:	48                   	dec    %eax
f0121130:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0121136:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012113c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121141:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0121147:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012114d:	29 d0                	sub    %edx,%eax
f012114f:	01 c1                	add    %eax,%ecx
f0121151:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0121158:	10 00 00 
f012115b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121160:	0f b6 c0             	movzbl %al,%eax
f0121163:	c1 e0 04             	shl    $0x4,%eax
f0121166:	89 c2                	mov    %eax,%edx
f0121168:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012116e:	01 d0                	add    %edx,%eax
f0121170:	48                   	dec    %eax
f0121171:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0121177:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012117d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121182:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0121188:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012118e:	29 d0                	sub    %edx,%eax
f0121190:	01 c8                	add    %ecx,%eax
f0121192:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121197:	29 c2                	sub    %eax,%edx
f0121199:	89 d0                	mov    %edx,%eax
f012119b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01211a1:	83 ec 0c             	sub    $0xc,%esp
f01211a4:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01211aa:	e8 d6 66 fe ff       	call   f0107885 <kmalloc>
f01211af:	83 c4 10             	add    $0x10,%esp
f01211b2:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211b8:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01211be:	89 c1                	mov    %eax,%ecx
f01211c0:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01211c7:	10 00 00 
f01211ca:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01211d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01211d5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01211db:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01211e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01211e6:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01211ec:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01211f2:	29 d0                	sub    %edx,%eax
f01211f4:	89 c3                	mov    %eax,%ebx
f01211f6:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01211fd:	10 00 00 
f0121200:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121205:	0f b6 d0             	movzbl %al,%edx
f0121208:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012120e:	01 d0                	add    %edx,%eax
f0121210:	48                   	dec    %eax
f0121211:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121217:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012121d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121222:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121228:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012122e:	29 d0                	sub    %edx,%eax
f0121230:	01 c3                	add    %eax,%ebx
f0121232:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121239:	10 00 00 
f012123c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121241:	0f b6 c0             	movzbl %al,%eax
f0121244:	c1 e0 04             	shl    $0x4,%eax
f0121247:	89 c2                	mov    %eax,%edx
f0121249:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012124f:	01 d0                	add    %edx,%eax
f0121251:	48                   	dec    %eax
f0121252:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0121258:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012125e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121263:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0121269:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012126f:	29 d0                	sub    %edx,%eax
f0121271:	01 d8                	add    %ebx,%eax
f0121273:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0121278:	39 c1                	cmp    %eax,%ecx
f012127a:	74 17                	je     f0121293 <test_kfree+0x13fb>
f012127c:	83 ec 04             	sub    $0x4,%esp
f012127f:	68 40 b4 13 f0       	push   $0xf013b440
f0121284:	68 9f 05 00 00       	push   $0x59f
f0121289:	68 5a b3 13 f0       	push   $0xf013b35a
f012128e:	e8 72 ef fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121293:	e8 30 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121298:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012129b:	74 17                	je     f01212b4 <test_kfree+0x141c>
f012129d:	83 ec 04             	sub    $0x4,%esp
f01212a0:	68 74 b3 13 f0       	push   $0xf013b374
f01212a5:	68 a0 05 00 00       	push   $0x5a0
f01212aa:	68 5a b3 13 f0       	push   $0xf013b35a
f01212af:	e8 51 ef fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01212b4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01212b7:	e8 e1 b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01212bc:	29 c3                	sub    %eax,%ebx
f01212be:	89 da                	mov    %ebx,%edx
f01212c0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01212c6:	c1 e8 0c             	shr    $0xc,%eax
f01212c9:	39 c2                	cmp    %eax,%edx
f01212cb:	74 17                	je     f01212e4 <test_kfree+0x144c>
f01212cd:	83 ec 04             	sub    $0x4,%esp
f01212d0:	68 dc b3 13 f0       	push   $0xf013b3dc
f01212d5:	68 a1 05 00 00       	push   $0x5a1
f01212da:	68 5a b3 13 f0       	push   $0xf013b35a
f01212df:	e8 21 ef fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01212e4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01212ea:	48                   	dec    %eax
f01212eb:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01212f1:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01212f7:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01212fa:	e8 9e b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01212ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121302:	e8 c1 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121307:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f012130a:	83 ec 0c             	sub    $0xc,%esp
f012130d:	68 00 00 30 00       	push   $0x300000
f0121312:	e8 6e 65 fe ff       	call   f0107885 <kmalloc>
f0121317:	83 c4 10             	add    $0x10,%esp
f012131a:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121320:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121326:	89 c1                	mov    %eax,%ecx
f0121328:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012132f:	10 00 00 
f0121332:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121338:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012133d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121343:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121349:	ba 00 00 00 00       	mov    $0x0,%edx
f012134e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121354:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012135a:	29 d0                	sub    %edx,%eax
f012135c:	89 c3                	mov    %eax,%ebx
f012135e:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121365:	10 00 00 
f0121368:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012136d:	0f b6 d0             	movzbl %al,%edx
f0121370:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121376:	01 d0                	add    %edx,%eax
f0121378:	48                   	dec    %eax
f0121379:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012137f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121385:	ba 00 00 00 00       	mov    $0x0,%edx
f012138a:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121390:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121396:	29 d0                	sub    %edx,%eax
f0121398:	01 c3                	add    %eax,%ebx
f012139a:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01213a1:	10 00 00 
f01213a4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01213a9:	0f b6 c0             	movzbl %al,%eax
f01213ac:	c1 e0 04             	shl    $0x4,%eax
f01213af:	89 c2                	mov    %eax,%edx
f01213b1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01213b7:	01 d0                	add    %edx,%eax
f01213b9:	48                   	dec    %eax
f01213ba:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01213c0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01213c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01213cb:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01213d1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01213d7:	29 d0                	sub    %edx,%eax
f01213d9:	01 d8                	add    %ebx,%eax
f01213db:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01213e0:	39 c1                	cmp    %eax,%ecx
f01213e2:	74 17                	je     f01213fb <test_kfree+0x1563>
f01213e4:	83 ec 04             	sub    $0x4,%esp
f01213e7:	68 40 b4 13 f0       	push   $0xf013b440
f01213ec:	68 ae 05 00 00       	push   $0x5ae
f01213f1:	68 5a b3 13 f0       	push   $0xf013b35a
f01213f6:	e8 0a ee fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213fb:	e8 c8 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121400:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121403:	74 17                	je     f012141c <test_kfree+0x1584>
f0121405:	83 ec 04             	sub    $0x4,%esp
f0121408:	68 74 b3 13 f0       	push   $0xf013b374
f012140d:	68 af 05 00 00       	push   $0x5af
f0121412:	68 5a b3 13 f0       	push   $0xf013b35a
f0121417:	e8 e9 ed fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012141c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012141f:	e8 79 b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121424:	29 c3                	sub    %eax,%ebx
f0121426:	89 d8                	mov    %ebx,%eax
f0121428:	3d 00 03 00 00       	cmp    $0x300,%eax
f012142d:	74 17                	je     f0121446 <test_kfree+0x15ae>
f012142f:	83 ec 04             	sub    $0x4,%esp
f0121432:	68 dc b3 13 f0       	push   $0xf013b3dc
f0121437:	68 b0 05 00 00       	push   $0x5b0
f012143c:	68 5a b3 13 f0       	push   $0xf013b35a
f0121441:	e8 bf ed fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121446:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f012144d:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121450:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121456:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121460:	eb 0e                	jmp    f0121470 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121462:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121465:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121468:	01 d0                	add    %edx,%eax
f012146a:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f012146d:	ff 45 f4             	incl   -0xc(%ebp)
f0121470:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121476:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121479:	7f e7                	jg     f0121462 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012147b:	e8 1d b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121480:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121483:	e8 40 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121488:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012148b:	83 ec 0c             	sub    $0xc,%esp
f012148e:	68 00 08 00 00       	push   $0x800
f0121493:	e8 ed 63 fe ff       	call   f0107885 <kmalloc>
f0121498:	83 c4 10             	add    $0x10,%esp
f012149b:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214a1:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01214a7:	89 c1                	mov    %eax,%ecx
f01214a9:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01214b0:	10 00 00 
f01214b3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01214b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01214be:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01214c4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01214ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01214cf:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01214d5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01214db:	29 d0                	sub    %edx,%eax
f01214dd:	89 c3                	mov    %eax,%ebx
f01214df:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01214e6:	10 00 00 
f01214e9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01214ee:	0f b6 d0             	movzbl %al,%edx
f01214f1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01214f7:	01 d0                	add    %edx,%eax
f01214f9:	48                   	dec    %eax
f01214fa:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121500:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121506:	ba 00 00 00 00       	mov    $0x0,%edx
f012150b:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121511:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121517:	29 d0                	sub    %edx,%eax
f0121519:	01 c3                	add    %eax,%ebx
f012151b:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121522:	10 00 00 
f0121525:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012152a:	0f b6 c0             	movzbl %al,%eax
f012152d:	c1 e0 04             	shl    $0x4,%eax
f0121530:	89 c2                	mov    %eax,%edx
f0121532:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121538:	01 d0                	add    %edx,%eax
f012153a:	48                   	dec    %eax
f012153b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121541:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121547:	ba 00 00 00 00       	mov    $0x0,%edx
f012154c:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121552:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121558:	29 d0                	sub    %edx,%eax
f012155a:	01 d8                	add    %ebx,%eax
f012155c:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121561:	39 c1                	cmp    %eax,%ecx
f0121563:	74 17                	je     f012157c <test_kfree+0x16e4>
f0121565:	83 ec 04             	sub    $0x4,%esp
f0121568:	68 40 b4 13 f0       	push   $0xf013b440
f012156d:	68 bc 05 00 00       	push   $0x5bc
f0121572:	68 5a b3 13 f0       	push   $0xf013b35a
f0121577:	e8 89 ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012157c:	e8 47 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121581:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121584:	74 17                	je     f012159d <test_kfree+0x1705>
f0121586:	83 ec 04             	sub    $0x4,%esp
f0121589:	68 74 b3 13 f0       	push   $0xf013b374
f012158e:	68 bd 05 00 00       	push   $0x5bd
f0121593:	68 5a b3 13 f0       	push   $0xf013b35a
f0121598:	e8 68 ec fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012159d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215a0:	e8 f8 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01215a5:	29 c3                	sub    %eax,%ebx
f01215a7:	89 d8                	mov    %ebx,%eax
f01215a9:	83 f8 01             	cmp    $0x1,%eax
f01215ac:	74 17                	je     f01215c5 <test_kfree+0x172d>
f01215ae:	83 ec 04             	sub    $0x4,%esp
f01215b1:	68 dc b3 13 f0       	push   $0xf013b3dc
f01215b6:	68 be 05 00 00       	push   $0x5be
f01215bb:	68 5a b3 13 f0       	push   $0xf013b35a
f01215c0:	e8 40 ec fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01215c5:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01215cc:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01215cf:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01215d5:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01215d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01215df:	eb 0e                	jmp    f01215ef <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01215e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01215e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01215e7:	01 d0                	add    %edx,%eax
f01215e9:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01215ec:	ff 45 f4             	incl   -0xc(%ebp)
f01215ef:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01215f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01215f8:	7f e7                	jg     f01215e1 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01215fa:	e8 9e b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01215ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121602:	e8 c1 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121607:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f012160a:	83 ec 0c             	sub    $0xc,%esp
f012160d:	68 00 00 10 00       	push   $0x100000
f0121612:	e8 6e 62 fe ff       	call   f0107885 <kmalloc>
f0121617:	83 c4 10             	add    $0x10,%esp
f012161a:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121620:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121626:	89 c1                	mov    %eax,%ecx
f0121628:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012162f:	10 00 00 
f0121632:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012163d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121643:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121649:	ba 00 00 00 00       	mov    $0x0,%edx
f012164e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121654:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012165a:	29 d0                	sub    %edx,%eax
f012165c:	89 c3                	mov    %eax,%ebx
f012165e:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121665:	10 00 00 
f0121668:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012166d:	0f b6 d0             	movzbl %al,%edx
f0121670:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121676:	01 d0                	add    %edx,%eax
f0121678:	48                   	dec    %eax
f0121679:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012167f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121685:	ba 00 00 00 00       	mov    $0x0,%edx
f012168a:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121690:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121696:	29 d0                	sub    %edx,%eax
f0121698:	01 c3                	add    %eax,%ebx
f012169a:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01216a1:	10 00 00 
f01216a4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01216a9:	0f b6 c0             	movzbl %al,%eax
f01216ac:	c1 e0 04             	shl    $0x4,%eax
f01216af:	89 c2                	mov    %eax,%edx
f01216b1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01216b7:	01 d0                	add    %edx,%eax
f01216b9:	48                   	dec    %eax
f01216ba:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01216c0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01216c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01216cb:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01216d1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01216d7:	29 d0                	sub    %edx,%eax
f01216d9:	01 d8                	add    %ebx,%eax
f01216db:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01216e0:	39 c1                	cmp    %eax,%ecx
f01216e2:	74 17                	je     f01216fb <test_kfree+0x1863>
f01216e4:	83 ec 04             	sub    $0x4,%esp
f01216e7:	68 40 b4 13 f0       	push   $0xf013b440
f01216ec:	68 ca 05 00 00       	push   $0x5ca
f01216f1:	68 5a b3 13 f0       	push   $0xf013b35a
f01216f6:	e8 0a eb fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216fb:	e8 c8 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121700:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121703:	74 17                	je     f012171c <test_kfree+0x1884>
f0121705:	83 ec 04             	sub    $0x4,%esp
f0121708:	68 74 b3 13 f0       	push   $0xf013b374
f012170d:	68 cb 05 00 00       	push   $0x5cb
f0121712:	68 5a b3 13 f0       	push   $0xf013b35a
f0121717:	e8 e9 ea fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012171c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012171f:	e8 79 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121724:	29 c3                	sub    %eax,%ebx
f0121726:	89 d8                	mov    %ebx,%eax
f0121728:	3d 00 01 00 00       	cmp    $0x100,%eax
f012172d:	74 17                	je     f0121746 <test_kfree+0x18ae>
f012172f:	83 ec 04             	sub    $0x4,%esp
f0121732:	68 dc b3 13 f0       	push   $0xf013b3dc
f0121737:	68 cc 05 00 00       	push   $0x5cc
f012173c:	68 5a b3 13 f0       	push   $0xf013b35a
f0121741:	e8 bf ea fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121746:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f012174d:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121750:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121756:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121760:	eb 0e                	jmp    f0121770 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121762:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121765:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121768:	01 d0                	add    %edx,%eax
f012176a:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f012176d:	ff 45 f4             	incl   -0xc(%ebp)
f0121770:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121776:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121779:	7f e7                	jg     f0121762 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f012177b:	83 ec 0c             	sub    $0xc,%esp
f012177e:	68 7a bb 13 f0       	push   $0xf013bb7a
f0121783:	e8 86 f5 fd ff       	call   f0100d0e <cprintf>
f0121788:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012178b:	e8 0d b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121790:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121793:	e8 30 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121798:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012179b:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01217a1:	83 ec 0c             	sub    $0xc,%esp
f01217a4:	50                   	push   %eax
f01217a5:	e8 a6 61 fe ff       	call   f0107950 <kfree>
f01217aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217ad:	e8 16 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217b5:	74 17                	je     f01217ce <test_kfree+0x1936>
f01217b7:	83 ec 04             	sub    $0x4,%esp
f01217ba:	68 74 b3 13 f0       	push   $0xf013b374
f01217bf:	68 dd 05 00 00       	push   $0x5dd
f01217c4:	68 5a b3 13 f0       	push   $0xf013b35a
f01217c9:	e8 37 ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01217ce:	e8 ca b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01217d3:	89 c2                	mov    %eax,%edx
f01217d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217d8:	29 c2                	sub    %eax,%edx
f01217da:	89 d0                	mov    %edx,%eax
f01217dc:	83 f8 02             	cmp    $0x2,%eax
f01217df:	74 17                	je     f01217f8 <test_kfree+0x1960>
f01217e1:	83 ec 04             	sub    $0x4,%esp
f01217e4:	68 e4 ba 13 f0       	push   $0xf013bae4
f01217e9:	68 de 05 00 00       	push   $0x5de
f01217ee:	68 5a b3 13 f0       	push   $0xf013b35a
f01217f3:	e8 0d ea fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01217f8:	e8 a0 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01217fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121800:	e8 c3 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121805:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121808:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012180e:	83 ec 0c             	sub    $0xc,%esp
f0121811:	50                   	push   %eax
f0121812:	e8 39 61 fe ff       	call   f0107950 <kfree>
f0121817:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012181a:	e8 a9 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012181f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121822:	74 17                	je     f012183b <test_kfree+0x19a3>
f0121824:	83 ec 04             	sub    $0x4,%esp
f0121827:	68 74 b3 13 f0       	push   $0xf013b374
f012182c:	68 e4 05 00 00       	push   $0x5e4
f0121831:	68 5a b3 13 f0       	push   $0xf013b35a
f0121836:	e8 ca e9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012183b:	e8 5d b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121840:	89 c2                	mov    %eax,%edx
f0121842:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121845:	29 c2                	sub    %eax,%edx
f0121847:	89 d0                	mov    %edx,%eax
f0121849:	3d 00 03 00 00       	cmp    $0x300,%eax
f012184e:	74 17                	je     f0121867 <test_kfree+0x19cf>
f0121850:	83 ec 04             	sub    $0x4,%esp
f0121853:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121858:	68 e5 05 00 00       	push   $0x5e5
f012185d:	68 5a b3 13 f0       	push   $0xf013b35a
f0121862:	e8 9e e9 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121867:	e8 31 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012186c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012186f:	e8 54 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121874:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121877:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012187d:	83 ec 0c             	sub    $0xc,%esp
f0121880:	50                   	push   %eax
f0121881:	e8 ca 60 fe ff       	call   f0107950 <kfree>
f0121886:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121889:	e8 3a 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012188e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121891:	74 17                	je     f01218aa <test_kfree+0x1a12>
f0121893:	83 ec 04             	sub    $0x4,%esp
f0121896:	68 74 b3 13 f0       	push   $0xf013b374
f012189b:	68 eb 05 00 00       	push   $0x5eb
f01218a0:	68 5a b3 13 f0       	push   $0xf013b35a
f01218a5:	e8 5b e9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01218aa:	e8 ee b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218af:	89 c2                	mov    %eax,%edx
f01218b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218b4:	29 c2                	sub    %eax,%edx
f01218b6:	89 d0                	mov    %edx,%eax
f01218b8:	83 f8 01             	cmp    $0x1,%eax
f01218bb:	74 17                	je     f01218d4 <test_kfree+0x1a3c>
f01218bd:	83 ec 04             	sub    $0x4,%esp
f01218c0:	68 e4 ba 13 f0       	push   $0xf013bae4
f01218c5:	68 ec 05 00 00       	push   $0x5ec
f01218ca:	68 5a b3 13 f0       	push   $0xf013b35a
f01218cf:	e8 31 e9 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01218d4:	e8 c4 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218dc:	e8 e7 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01218e4:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01218ea:	83 ec 0c             	sub    $0xc,%esp
f01218ed:	50                   	push   %eax
f01218ee:	e8 5d 60 fe ff       	call   f0107950 <kfree>
f01218f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218f6:	e8 cd 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218fe:	74 17                	je     f0121917 <test_kfree+0x1a7f>
f0121900:	83 ec 04             	sub    $0x4,%esp
f0121903:	68 74 b3 13 f0       	push   $0xf013b374
f0121908:	68 f2 05 00 00       	push   $0x5f2
f012190d:	68 5a b3 13 f0       	push   $0xf013b35a
f0121912:	e8 ee e8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121917:	e8 81 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012191c:	89 c2                	mov    %eax,%edx
f012191e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121921:	29 c2                	sub    %eax,%edx
f0121923:	89 d0                	mov    %edx,%eax
f0121925:	83 f8 04             	cmp    $0x4,%eax
f0121928:	74 17                	je     f0121941 <test_kfree+0x1aa9>
f012192a:	83 ec 04             	sub    $0x4,%esp
f012192d:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121932:	68 f3 05 00 00       	push   $0x5f3
f0121937:	68 5a b3 13 f0       	push   $0xf013b35a
f012193c:	e8 c4 e8 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121941:	e8 57 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121946:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121949:	e8 7a 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012194e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121951:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121957:	83 ec 0c             	sub    $0xc,%esp
f012195a:	50                   	push   %eax
f012195b:	e8 f0 5f fe ff       	call   f0107950 <kfree>
f0121960:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121963:	e8 60 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121968:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012196b:	74 17                	je     f0121984 <test_kfree+0x1aec>
f012196d:	83 ec 04             	sub    $0x4,%esp
f0121970:	68 74 b3 13 f0       	push   $0xf013b374
f0121975:	68 f9 05 00 00       	push   $0x5f9
f012197a:	68 5a b3 13 f0       	push   $0xf013b35a
f012197f:	e8 81 e8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121984:	e8 14 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121989:	89 c2                	mov    %eax,%edx
f012198b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012198e:	29 c2                	sub    %eax,%edx
f0121990:	89 d0                	mov    %edx,%eax
f0121992:	83 f8 05             	cmp    $0x5,%eax
f0121995:	74 17                	je     f01219ae <test_kfree+0x1b16>
f0121997:	83 ec 04             	sub    $0x4,%esp
f012199a:	68 e4 ba 13 f0       	push   $0xf013bae4
f012199f:	68 fa 05 00 00       	push   $0x5fa
f01219a4:	68 5a b3 13 f0       	push   $0xf013b35a
f01219a9:	e8 57 e8 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01219ae:	e8 ea b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01219b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219b6:	e8 0d 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01219be:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01219c4:	83 ec 0c             	sub    $0xc,%esp
f01219c7:	50                   	push   %eax
f01219c8:	e8 83 5f fe ff       	call   f0107950 <kfree>
f01219cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219d0:	e8 f3 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219d8:	74 17                	je     f01219f1 <test_kfree+0x1b59>
f01219da:	83 ec 04             	sub    $0x4,%esp
f01219dd:	68 74 b3 13 f0       	push   $0xf013b374
f01219e2:	68 00 06 00 00       	push   $0x600
f01219e7:	68 5a b3 13 f0       	push   $0xf013b35a
f01219ec:	e8 14 e8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01219f1:	e8 a7 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01219f6:	89 c2                	mov    %eax,%edx
f01219f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01219fb:	29 c2                	sub    %eax,%edx
f01219fd:	89 d0                	mov    %edx,%eax
f01219ff:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121a04:	74 17                	je     f0121a1d <test_kfree+0x1b85>
f0121a06:	83 ec 04             	sub    $0x4,%esp
f0121a09:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121a0e:	68 01 06 00 00       	push   $0x601
f0121a13:	68 5a b3 13 f0       	push   $0xf013b35a
f0121a18:	e8 e8 e7 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121a1d:	e8 51 5d ff ff       	call   f0117773 <isKHeapPlacementStrategyNEXTFIT>
f0121a22:	84 c0                	test   %al,%al
f0121a24:	0f 84 80 02 00 00    	je     f0121caa <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121a2a:	e8 6e b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a32:	e8 91 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a37:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121a3a:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121a40:	83 ec 0c             	sub    $0xc,%esp
f0121a43:	50                   	push   %eax
f0121a44:	e8 07 5f fe ff       	call   f0107950 <kfree>
f0121a49:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121a4c:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121a53:	10 00 00 
f0121a56:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121a5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a61:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121a67:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a72:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121a78:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121a7e:	29 d0                	sub    %edx,%eax
f0121a80:	89 c1                	mov    %eax,%ecx
f0121a82:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121a89:	10 00 00 
f0121a8c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121a91:	0f b6 d0             	movzbl %al,%edx
f0121a94:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121a9a:	01 d0                	add    %edx,%eax
f0121a9c:	48                   	dec    %eax
f0121a9d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121aa3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121aa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aae:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121ab4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121aba:	29 d0                	sub    %edx,%eax
f0121abc:	01 c1                	add    %eax,%ecx
f0121abe:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121ac5:	10 00 00 
f0121ac8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121acd:	0f b6 c0             	movzbl %al,%eax
f0121ad0:	c1 e0 04             	shl    $0x4,%eax
f0121ad3:	89 c2                	mov    %eax,%edx
f0121ad5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121adb:	01 d0                	add    %edx,%eax
f0121add:	48                   	dec    %eax
f0121ade:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121ae4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121aea:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aef:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121af5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121afb:	29 d0                	sub    %edx,%eax
f0121afd:	01 c8                	add    %ecx,%eax
f0121aff:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121b04:	29 c2                	sub    %eax,%edx
f0121b06:	89 d0                	mov    %edx,%eax
f0121b08:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b0e:	e8 b5 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b13:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b16:	74 17                	je     f0121b2f <test_kfree+0x1c97>
f0121b18:	83 ec 04             	sub    $0x4,%esp
f0121b1b:	68 74 b3 13 f0       	push   $0xf013b374
f0121b20:	68 0b 06 00 00       	push   $0x60b
f0121b25:	68 5a b3 13 f0       	push   $0xf013b35a
f0121b2a:	e8 d6 e6 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b2f:	e8 69 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b34:	89 c2                	mov    %eax,%edx
f0121b36:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b39:	29 c2                	sub    %eax,%edx
f0121b3b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121b41:	c1 e8 0c             	shr    $0xc,%eax
f0121b44:	39 c2                	cmp    %eax,%edx
f0121b46:	74 17                	je     f0121b5f <test_kfree+0x1cc7>
f0121b48:	83 ec 04             	sub    $0x4,%esp
f0121b4b:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121b50:	68 0c 06 00 00       	push   $0x60c
f0121b55:	68 5a b3 13 f0       	push   $0xf013b35a
f0121b5a:	e8 a6 e6 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121b5f:	e8 39 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b64:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121b67:	e8 5c 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b6c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121b6f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121b75:	83 ec 0c             	sub    $0xc,%esp
f0121b78:	50                   	push   %eax
f0121b79:	e8 d2 5d fe ff       	call   f0107950 <kfree>
f0121b7e:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b81:	e8 42 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b89:	74 17                	je     f0121ba2 <test_kfree+0x1d0a>
f0121b8b:	83 ec 04             	sub    $0x4,%esp
f0121b8e:	68 74 b3 13 f0       	push   $0xf013b374
f0121b93:	68 12 06 00 00       	push   $0x612
f0121b98:	68 5a b3 13 f0       	push   $0xf013b35a
f0121b9d:	e8 63 e6 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ba2:	e8 f6 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ba7:	89 c2                	mov    %eax,%edx
f0121ba9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bac:	29 c2                	sub    %eax,%edx
f0121bae:	89 d0                	mov    %edx,%eax
f0121bb0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121bb5:	74 17                	je     f0121bce <test_kfree+0x1d36>
f0121bb7:	83 ec 04             	sub    $0x4,%esp
f0121bba:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121bbf:	68 13 06 00 00       	push   $0x613
f0121bc4:	68 5a b3 13 f0       	push   $0xf013b35a
f0121bc9:	e8 37 e6 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121bce:	e8 ca af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121bd3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121bd6:	e8 ed 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bdb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121bde:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121be4:	83 ec 0c             	sub    $0xc,%esp
f0121be7:	50                   	push   %eax
f0121be8:	e8 63 5d fe ff       	call   f0107950 <kfree>
f0121bed:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bf0:	e8 d3 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bf5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bf8:	74 17                	je     f0121c11 <test_kfree+0x1d79>
f0121bfa:	83 ec 04             	sub    $0x4,%esp
f0121bfd:	68 74 b3 13 f0       	push   $0xf013b374
f0121c02:	68 19 06 00 00       	push   $0x619
f0121c07:	68 5a b3 13 f0       	push   $0xf013b35a
f0121c0c:	e8 f4 e5 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c11:	e8 87 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c16:	89 c2                	mov    %eax,%edx
f0121c18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c1b:	29 c2                	sub    %eax,%edx
f0121c1d:	89 d0                	mov    %edx,%eax
f0121c1f:	83 f8 01             	cmp    $0x1,%eax
f0121c22:	74 17                	je     f0121c3b <test_kfree+0x1da3>
f0121c24:	83 ec 04             	sub    $0x4,%esp
f0121c27:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121c2c:	68 1a 06 00 00       	push   $0x61a
f0121c31:	68 5a b3 13 f0       	push   $0xf013b35a
f0121c36:	e8 ca e5 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121c3b:	e8 5d af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c40:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121c43:	e8 80 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c48:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121c4b:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121c51:	83 ec 0c             	sub    $0xc,%esp
f0121c54:	50                   	push   %eax
f0121c55:	e8 f6 5c fe ff       	call   f0107950 <kfree>
f0121c5a:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c5d:	e8 66 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c65:	74 17                	je     f0121c7e <test_kfree+0x1de6>
f0121c67:	83 ec 04             	sub    $0x4,%esp
f0121c6a:	68 74 b3 13 f0       	push   $0xf013b374
f0121c6f:	68 20 06 00 00       	push   $0x620
f0121c74:	68 5a b3 13 f0       	push   $0xf013b35a
f0121c79:	e8 87 e5 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c7e:	e8 1a af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c83:	89 c2                	mov    %eax,%edx
f0121c85:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c88:	29 c2                	sub    %eax,%edx
f0121c8a:	89 d0                	mov    %edx,%eax
f0121c8c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121c91:	74 17                	je     f0121caa <test_kfree+0x1e12>
f0121c93:	83 ec 04             	sub    $0x4,%esp
f0121c96:	68 e4 ba 13 f0       	push   $0xf013bae4
f0121c9b:	68 21 06 00 00       	push   $0x621
f0121ca0:	68 5a b3 13 f0       	push   $0xf013b35a
f0121ca5:	e8 5b e5 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121caa:	e8 ee ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121caf:	89 c2                	mov    %eax,%edx
f0121cb1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121cb4:	39 c2                	cmp    %eax,%edx
f0121cb6:	74 17                	je     f0121ccf <test_kfree+0x1e37>
f0121cb8:	83 ec 04             	sub    $0x4,%esp
f0121cbb:	68 84 bb 13 f0       	push   $0xf013bb84
f0121cc0:	68 24 06 00 00       	push   $0x624
f0121cc5:	68 5a b3 13 f0       	push   $0xf013b35a
f0121cca:	e8 36 e5 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121ccf:	83 ec 0c             	sub    $0xc,%esp
f0121cd2:	68 b8 bb 13 f0       	push   $0xf013bbb8
f0121cd7:	e8 32 f0 fd ff       	call   f0100d0e <cprintf>
f0121cdc:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121cdf:	83 ec 0c             	sub    $0xc,%esp
f0121ce2:	6a 03                	push   $0x3
f0121ce4:	e8 54 b3 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121ce9:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121cec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121cf3:	e9 82 00 00 00       	jmp    f0121d7a <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0121cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121cfb:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121d02:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121d05:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d08:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121d0b:	e8 1b b3 fe ff       	call   f010d02b <sys_rcr2>
f0121d10:	89 c2                	mov    %eax,%edx
f0121d12:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d15:	39 c2                	cmp    %eax,%edx
f0121d17:	74 17                	je     f0121d30 <test_kfree+0x1e98>
f0121d19:	83 ec 04             	sub    $0x4,%esp
f0121d1c:	68 c0 bb 13 f0       	push   $0xf013bbc0
f0121d21:	68 33 06 00 00       	push   $0x633
f0121d26:	68 5a b3 13 f0       	push   $0xf013b35a
f0121d2b:	e8 d5 e4 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0121d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121d33:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121d3a:	89 c2                	mov    %eax,%edx
f0121d3c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d3f:	01 d0                	add    %edx,%eax
f0121d41:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121d44:	e8 e2 b2 fe ff       	call   f010d02b <sys_rcr2>
f0121d49:	89 c2                	mov    %eax,%edx
f0121d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121d4e:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121d55:	89 c1                	mov    %eax,%ecx
f0121d57:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d5a:	01 c8                	add    %ecx,%eax
f0121d5c:	39 c2                	cmp    %eax,%edx
f0121d5e:	74 17                	je     f0121d77 <test_kfree+0x1edf>
f0121d60:	83 ec 04             	sub    $0x4,%esp
f0121d63:	68 c0 bb 13 f0       	push   $0xf013bbc0
f0121d68:	68 35 06 00 00       	push   $0x635
f0121d6d:	68 5a b3 13 f0       	push   $0xf013b35a
f0121d72:	e8 8e e4 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121d77:	ff 45 f4             	incl   -0xc(%ebp)
f0121d7a:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121d7e:	0f 8e 74 ff ff ff    	jle    f0121cf8 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121d84:	83 ec 0c             	sub    $0xc,%esp
f0121d87:	6a 00                	push   $0x0
f0121d89:	e8 af b2 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121d8e:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121d91:	83 ec 0c             	sub    $0xc,%esp
f0121d94:	68 05 bc 13 f0       	push   $0xf013bc05
f0121d99:	e8 70 ef fd ff       	call   f0100d0e <cprintf>
f0121d9e:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121da1:	e8 f7 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121da6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121da9:	e8 1a 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121db1:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121db7:	83 ec 0c             	sub    $0xc,%esp
f0121dba:	50                   	push   %eax
f0121dbb:	e8 90 5b fe ff       	call   f0107950 <kfree>
f0121dc0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121dc3:	e8 00 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dc8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121dcb:	74 17                	je     f0121de4 <test_kfree+0x1f4c>
f0121dcd:	83 ec 04             	sub    $0x4,%esp
f0121dd0:	68 74 b3 13 f0       	push   $0xf013b374
f0121dd5:	68 43 06 00 00       	push   $0x643
f0121dda:	68 5a b3 13 f0       	push   $0xf013b35a
f0121ddf:	e8 21 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121de4:	e8 b4 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121de9:	89 c2                	mov    %eax,%edx
f0121deb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121dee:	39 c2                	cmp    %eax,%edx
f0121df0:	74 17                	je     f0121e09 <test_kfree+0x1f71>
f0121df2:	83 ec 04             	sub    $0x4,%esp
f0121df5:	68 0c bc 13 f0       	push   $0xf013bc0c
f0121dfa:	68 44 06 00 00       	push   $0x644
f0121dff:	68 5a b3 13 f0       	push   $0xf013b35a
f0121e04:	e8 fc e3 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e09:	e8 8f ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e11:	e8 b2 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e16:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121e19:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121e1f:	83 ec 0c             	sub    $0xc,%esp
f0121e22:	50                   	push   %eax
f0121e23:	e8 28 5b fe ff       	call   f0107950 <kfree>
f0121e28:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e2b:	e8 98 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e33:	74 17                	je     f0121e4c <test_kfree+0x1fb4>
f0121e35:	83 ec 04             	sub    $0x4,%esp
f0121e38:	68 74 b3 13 f0       	push   $0xf013b374
f0121e3d:	68 4a 06 00 00       	push   $0x64a
f0121e42:	68 5a b3 13 f0       	push   $0xf013b35a
f0121e47:	e8 b9 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121e4c:	e8 4c ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e51:	89 c2                	mov    %eax,%edx
f0121e53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e56:	39 c2                	cmp    %eax,%edx
f0121e58:	74 17                	je     f0121e71 <test_kfree+0x1fd9>
f0121e5a:	83 ec 04             	sub    $0x4,%esp
f0121e5d:	68 0c bc 13 f0       	push   $0xf013bc0c
f0121e62:	68 4b 06 00 00       	push   $0x64b
f0121e67:	68 5a b3 13 f0       	push   $0xf013b35a
f0121e6c:	e8 94 e3 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e71:	e8 27 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e79:	e8 4a 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121e81:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121e87:	83 ec 0c             	sub    $0xc,%esp
f0121e8a:	50                   	push   %eax
f0121e8b:	e8 c0 5a fe ff       	call   f0107950 <kfree>
f0121e90:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e93:	e8 30 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e9b:	74 17                	je     f0121eb4 <test_kfree+0x201c>
f0121e9d:	83 ec 04             	sub    $0x4,%esp
f0121ea0:	68 74 b3 13 f0       	push   $0xf013b374
f0121ea5:	68 51 06 00 00       	push   $0x651
f0121eaa:	68 5a b3 13 f0       	push   $0xf013b35a
f0121eaf:	e8 51 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121eb4:	e8 e4 ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121eb9:	89 c2                	mov    %eax,%edx
f0121ebb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ebe:	39 c2                	cmp    %eax,%edx
f0121ec0:	74 17                	je     f0121ed9 <test_kfree+0x2041>
f0121ec2:	83 ec 04             	sub    $0x4,%esp
f0121ec5:	68 0c bc 13 f0       	push   $0xf013bc0c
f0121eca:	68 52 06 00 00       	push   $0x652
f0121ecf:	68 5a b3 13 f0       	push   $0xf013b35a
f0121ed4:	e8 2c e3 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ed9:	e8 bf ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ede:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ee1:	e8 e2 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ee6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121ee9:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121eef:	83 ec 0c             	sub    $0xc,%esp
f0121ef2:	50                   	push   %eax
f0121ef3:	e8 58 5a fe ff       	call   f0107950 <kfree>
f0121ef8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121efb:	e8 c8 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f00:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f03:	74 17                	je     f0121f1c <test_kfree+0x2084>
f0121f05:	83 ec 04             	sub    $0x4,%esp
f0121f08:	68 74 b3 13 f0       	push   $0xf013b374
f0121f0d:	68 58 06 00 00       	push   $0x658
f0121f12:	68 5a b3 13 f0       	push   $0xf013b35a
f0121f17:	e8 e9 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121f1c:	e8 7c ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121f21:	89 c2                	mov    %eax,%edx
f0121f23:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f26:	39 c2                	cmp    %eax,%edx
f0121f28:	74 17                	je     f0121f41 <test_kfree+0x20a9>
f0121f2a:	83 ec 04             	sub    $0x4,%esp
f0121f2d:	68 0c bc 13 f0       	push   $0xf013bc0c
f0121f32:	68 59 06 00 00       	push   $0x659
f0121f37:	68 5a b3 13 f0       	push   $0xf013b35a
f0121f3c:	e8 c4 e2 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0121f41:	83 ec 0c             	sub    $0xc,%esp
f0121f44:	68 53 bc 13 f0       	push   $0xf013bc53
f0121f49:	e8 c0 ed fd ff       	call   f0100d0e <cprintf>
f0121f4e:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121f51:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121f58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121f5f:	eb 48                	jmp    f0121fa9 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121f61:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121f64:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0121f69:	83 ec 04             	sub    $0x4,%esp
f0121f6c:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121f72:	51                   	push   %ecx
f0121f73:	52                   	push   %edx
f0121f74:	50                   	push   %eax
f0121f75:	e8 37 4b fe ff       	call   f0106ab1 <get_page_table>
f0121f7a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121f7d:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121f83:	85 c0                	test   %eax,%eax
f0121f85:	75 17                	jne    f0121f9e <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121f87:	83 ec 04             	sub    $0x4,%esp
f0121f8a:	68 5c bc 13 f0       	push   $0xf013bc5c
f0121f8f:	68 67 06 00 00       	push   $0x667
f0121f94:	68 5a b3 13 f0       	push   $0xf013b35a
f0121f99:	e8 67 e2 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121f9e:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121fa5:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121fa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121fad:	78 b2                	js     f0121f61 <test_kfree+0x20c9>
f0121faf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121fb3:	7f 09                	jg     f0121fbe <test_kfree+0x2126>
f0121fb5:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121fbc:	76 a3                	jbe    f0121f61 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121fbe:	83 ec 0c             	sub    $0xc,%esp
f0121fc1:	68 3e b5 13 f0       	push   $0xf013b53e
f0121fc6:	e8 43 ed fd ff       	call   f0100d0e <cprintf>
f0121fcb:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121fce:	83 ec 0c             	sub    $0xc,%esp
f0121fd1:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121fd6:	e8 33 ed fd ff       	call   f0100d0e <cprintf>
f0121fdb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121fde:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121fe3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121fe6:	5b                   	pop    %ebx
f0121fe7:	5f                   	pop    %edi
f0121fe8:	5d                   	pop    %ebp
f0121fe9:	c3                   	ret    

f0121fea <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121fea:	55                   	push   %ebp
f0121feb:	89 e5                	mov    %esp,%ebp
f0121fed:	57                   	push   %edi
f0121fee:	53                   	push   %ebx
f0121fef:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121ff5:	83 ec 0c             	sub    $0xc,%esp
f0121ff8:	68 9c b2 13 f0       	push   $0xf013b29c
f0121ffd:	e8 0c ed fd ff       	call   f0100d0e <cprintf>
f0122002:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122005:	83 ec 0c             	sub    $0xc,%esp
f0122008:	68 cc b2 13 f0       	push   $0xf013b2cc
f012200d:	e8 fc ec fd ff       	call   f0100d0e <cprintf>
f0122012:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122015:	83 ec 0c             	sub    $0xc,%esp
f0122018:	68 9c b2 13 f0       	push   $0xf013b29c
f012201d:	e8 ec ec fd ff       	call   f0100d0e <cprintf>
f0122022:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122025:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122029:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012202d:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0122033:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122039:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122040:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122047:	e8 51 ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012204c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012204f:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0122055:	b9 14 00 00 00       	mov    $0x14,%ecx
f012205a:	b8 00 00 00 00       	mov    $0x0,%eax
f012205f:	89 d7                	mov    %edx,%edi
f0122061:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122063:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0122069:	b9 14 00 00 00       	mov    $0x14,%ecx
f012206e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122073:	89 d7                	mov    %edx,%edi
f0122075:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122077:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012207d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122082:	b8 00 00 00 00       	mov    $0x0,%eax
f0122087:	89 d7                	mov    %edx,%edi
f0122089:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012208b:	e8 0d ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122090:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122093:	e8 30 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122098:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012209b:	83 ec 0c             	sub    $0xc,%esp
f012209e:	68 00 fc 1f 00       	push   $0x1ffc00
f01220a3:	e8 dd 57 fe ff       	call   f0107885 <kmalloc>
f01220a8:	83 c4 10             	add    $0x10,%esp
f01220ab:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220b1:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01220b7:	89 c1                	mov    %eax,%ecx
f01220b9:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01220c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01220c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220c8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01220cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01220ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01220d3:	f7 75 c8             	divl   -0x38(%ebp)
f01220d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01220d9:	29 d0                	sub    %edx,%eax
f01220db:	89 c3                	mov    %eax,%ebx
f01220dd:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01220e4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01220e9:	0f b6 d0             	movzbl %al,%edx
f01220ec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01220ef:	01 d0                	add    %edx,%eax
f01220f1:	48                   	dec    %eax
f01220f2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01220f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01220f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01220fd:	f7 75 c0             	divl   -0x40(%ebp)
f0122100:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122103:	29 d0                	sub    %edx,%eax
f0122105:	01 c3                	add    %eax,%ebx
f0122107:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012210e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122113:	0f b6 c0             	movzbl %al,%eax
f0122116:	c1 e0 04             	shl    $0x4,%eax
f0122119:	89 c2                	mov    %eax,%edx
f012211b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012211e:	01 d0                	add    %edx,%eax
f0122120:	48                   	dec    %eax
f0122121:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122124:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122127:	ba 00 00 00 00       	mov    $0x0,%edx
f012212c:	f7 75 b8             	divl   -0x48(%ebp)
f012212f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122132:	29 d0                	sub    %edx,%eax
f0122134:	01 d8                	add    %ebx,%eax
f0122136:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012213b:	39 c1                	cmp    %eax,%ecx
f012213d:	74 17                	je     f0122156 <test_kfree_bestfirstfit+0x16c>
f012213f:	83 ec 04             	sub    $0x4,%esp
f0122142:	68 40 b4 13 f0       	push   $0xf013b440
f0122147:	68 95 06 00 00       	push   $0x695
f012214c:	68 5a b3 13 f0       	push   $0xf013b35a
f0122151:	e8 af e0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122156:	e8 6d 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012215b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012215e:	74 17                	je     f0122177 <test_kfree_bestfirstfit+0x18d>
f0122160:	83 ec 04             	sub    $0x4,%esp
f0122163:	68 74 b3 13 f0       	push   $0xf013b374
f0122168:	68 96 06 00 00       	push   $0x696
f012216d:	68 5a b3 13 f0       	push   $0xf013b35a
f0122172:	e8 8e e0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122177:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012217a:	e8 1e aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012217f:	29 c3                	sub    %eax,%ebx
f0122181:	89 d8                	mov    %ebx,%eax
f0122183:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122188:	74 17                	je     f01221a1 <test_kfree_bestfirstfit+0x1b7>
f012218a:	83 ec 04             	sub    $0x4,%esp
f012218d:	68 dc b3 13 f0       	push   $0xf013b3dc
f0122192:	68 97 06 00 00       	push   $0x697
f0122197:	68 5a b3 13 f0       	push   $0xf013b35a
f012219c:	e8 64 e0 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01221a1:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01221a8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01221ab:	e8 ed a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01221b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221b3:	e8 10 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01221bb:	83 ec 0c             	sub    $0xc,%esp
f01221be:	68 00 fc 1f 00       	push   $0x1ffc00
f01221c3:	e8 bd 56 fe ff       	call   f0107885 <kmalloc>
f01221c8:	83 c4 10             	add    $0x10,%esp
f01221cb:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221d1:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01221d7:	89 c1                	mov    %eax,%ecx
f01221d9:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01221e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01221e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01221e8:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01221eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01221ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01221f3:	f7 75 b0             	divl   -0x50(%ebp)
f01221f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01221f9:	29 d0                	sub    %edx,%eax
f01221fb:	89 c3                	mov    %eax,%ebx
f01221fd:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122204:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122209:	0f b6 d0             	movzbl %al,%edx
f012220c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012220f:	01 d0                	add    %edx,%eax
f0122211:	48                   	dec    %eax
f0122212:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122215:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122218:	ba 00 00 00 00       	mov    $0x0,%edx
f012221d:	f7 75 a8             	divl   -0x58(%ebp)
f0122220:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122223:	29 d0                	sub    %edx,%eax
f0122225:	01 c3                	add    %eax,%ebx
f0122227:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012222e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122233:	0f b6 c0             	movzbl %al,%eax
f0122236:	c1 e0 04             	shl    $0x4,%eax
f0122239:	89 c2                	mov    %eax,%edx
f012223b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012223e:	01 d0                	add    %edx,%eax
f0122240:	48                   	dec    %eax
f0122241:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122244:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122247:	ba 00 00 00 00       	mov    $0x0,%edx
f012224c:	f7 75 a0             	divl   -0x60(%ebp)
f012224f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122252:	29 d0                	sub    %edx,%eax
f0122254:	01 d8                	add    %ebx,%eax
f0122256:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012225b:	39 c1                	cmp    %eax,%ecx
f012225d:	74 17                	je     f0122276 <test_kfree_bestfirstfit+0x28c>
f012225f:	83 ec 04             	sub    $0x4,%esp
f0122262:	68 40 b4 13 f0       	push   $0xf013b440
f0122267:	68 9e 06 00 00       	push   $0x69e
f012226c:	68 5a b3 13 f0       	push   $0xf013b35a
f0122271:	e8 8f df fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122276:	e8 4d 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012227b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012227e:	74 17                	je     f0122297 <test_kfree_bestfirstfit+0x2ad>
f0122280:	83 ec 04             	sub    $0x4,%esp
f0122283:	68 74 b3 13 f0       	push   $0xf013b374
f0122288:	68 9f 06 00 00       	push   $0x69f
f012228d:	68 5a b3 13 f0       	push   $0xf013b35a
f0122292:	e8 6e df fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122297:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012229a:	e8 fe a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012229f:	29 c3                	sub    %eax,%ebx
f01222a1:	89 d8                	mov    %ebx,%eax
f01222a3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01222a8:	74 17                	je     f01222c1 <test_kfree_bestfirstfit+0x2d7>
f01222aa:	83 ec 04             	sub    $0x4,%esp
f01222ad:	68 dc b3 13 f0       	push   $0xf013b3dc
f01222b2:	68 a0 06 00 00       	push   $0x6a0
f01222b7:	68 5a b3 13 f0       	push   $0xf013b35a
f01222bc:	e8 44 df fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01222c1:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01222c8:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01222cb:	e8 cd a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01222d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222d3:	e8 f0 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222d8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01222db:	83 ec 0c             	sub    $0xc,%esp
f01222de:	68 00 08 00 00       	push   $0x800
f01222e3:	e8 9d 55 fe ff       	call   f0107885 <kmalloc>
f01222e8:	83 c4 10             	add    $0x10,%esp
f01222eb:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222f1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01222f7:	89 c1                	mov    %eax,%ecx
f01222f9:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122300:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122303:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122308:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012230b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012230e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122313:	f7 75 98             	divl   -0x68(%ebp)
f0122316:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122319:	29 d0                	sub    %edx,%eax
f012231b:	89 c3                	mov    %eax,%ebx
f012231d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122324:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122329:	0f b6 d0             	movzbl %al,%edx
f012232c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012232f:	01 d0                	add    %edx,%eax
f0122331:	48                   	dec    %eax
f0122332:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122335:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122338:	ba 00 00 00 00       	mov    $0x0,%edx
f012233d:	f7 75 90             	divl   -0x70(%ebp)
f0122340:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122343:	29 d0                	sub    %edx,%eax
f0122345:	01 c3                	add    %eax,%ebx
f0122347:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012234e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122353:	0f b6 c0             	movzbl %al,%eax
f0122356:	c1 e0 04             	shl    $0x4,%eax
f0122359:	89 c2                	mov    %eax,%edx
f012235b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012235e:	01 d0                	add    %edx,%eax
f0122360:	48                   	dec    %eax
f0122361:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122364:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122367:	ba 00 00 00 00       	mov    $0x0,%edx
f012236c:	f7 75 88             	divl   -0x78(%ebp)
f012236f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122372:	29 d0                	sub    %edx,%eax
f0122374:	01 d8                	add    %ebx,%eax
f0122376:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012237b:	39 c1                	cmp    %eax,%ecx
f012237d:	74 17                	je     f0122396 <test_kfree_bestfirstfit+0x3ac>
f012237f:	83 ec 04             	sub    $0x4,%esp
f0122382:	68 40 b4 13 f0       	push   $0xf013b440
f0122387:	68 a7 06 00 00       	push   $0x6a7
f012238c:	68 5a b3 13 f0       	push   $0xf013b35a
f0122391:	e8 6f de fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122396:	e8 2d 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012239b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012239e:	74 17                	je     f01223b7 <test_kfree_bestfirstfit+0x3cd>
f01223a0:	83 ec 04             	sub    $0x4,%esp
f01223a3:	68 74 b3 13 f0       	push   $0xf013b374
f01223a8:	68 a8 06 00 00       	push   $0x6a8
f01223ad:	68 5a b3 13 f0       	push   $0xf013b35a
f01223b2:	e8 4e de fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223ba:	e8 de a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01223bf:	29 c3                	sub    %eax,%ebx
f01223c1:	89 d8                	mov    %ebx,%eax
f01223c3:	83 f8 01             	cmp    $0x1,%eax
f01223c6:	74 17                	je     f01223df <test_kfree_bestfirstfit+0x3f5>
f01223c8:	83 ec 04             	sub    $0x4,%esp
f01223cb:	68 dc b3 13 f0       	push   $0xf013b3dc
f01223d0:	68 a9 06 00 00       	push   $0x6a9
f01223d5:	68 5a b3 13 f0       	push   $0xf013b35a
f01223da:	e8 26 de fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01223df:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01223e6:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01223e9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01223ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01223f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01223f9:	eb 0e                	jmp    f0122409 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f01223fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01223fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122401:	01 d0                	add    %edx,%eax
f0122403:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122406:	ff 45 f4             	incl   -0xc(%ebp)
f0122409:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012240f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122412:	7f e7                	jg     f01223fb <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122414:	e8 84 a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122419:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012241c:	e8 a7 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122421:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122424:	83 ec 0c             	sub    $0xc,%esp
f0122427:	68 00 08 00 00       	push   $0x800
f012242c:	e8 54 54 fe ff       	call   f0107885 <kmalloc>
f0122431:	83 c4 10             	add    $0x10,%esp
f0122434:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012243a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122440:	89 c1                	mov    %eax,%ecx
f0122442:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122449:	10 00 00 
f012244c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122457:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012245d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122463:	ba 00 00 00 00       	mov    $0x0,%edx
f0122468:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012246e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122474:	29 d0                	sub    %edx,%eax
f0122476:	89 c3                	mov    %eax,%ebx
f0122478:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012247f:	10 00 00 
f0122482:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122487:	0f b6 d0             	movzbl %al,%edx
f012248a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122490:	01 d0                	add    %edx,%eax
f0122492:	48                   	dec    %eax
f0122493:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122499:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012249f:	ba 00 00 00 00       	mov    $0x0,%edx
f01224a4:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01224aa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01224b0:	29 d0                	sub    %edx,%eax
f01224b2:	01 c3                	add    %eax,%ebx
f01224b4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01224bb:	10 00 00 
f01224be:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01224c3:	0f b6 c0             	movzbl %al,%eax
f01224c6:	c1 e0 04             	shl    $0x4,%eax
f01224c9:	89 c2                	mov    %eax,%edx
f01224cb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01224d1:	01 d0                	add    %edx,%eax
f01224d3:	48                   	dec    %eax
f01224d4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01224da:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01224e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01224e5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01224eb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01224f1:	29 d0                	sub    %edx,%eax
f01224f3:	01 d8                	add    %ebx,%eax
f01224f5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01224fa:	39 c1                	cmp    %eax,%ecx
f01224fc:	74 17                	je     f0122515 <test_kfree_bestfirstfit+0x52b>
f01224fe:	83 ec 04             	sub    $0x4,%esp
f0122501:	68 40 b4 13 f0       	push   $0xf013b440
f0122506:	68 b5 06 00 00       	push   $0x6b5
f012250b:	68 5a b3 13 f0       	push   $0xf013b35a
f0122510:	e8 f0 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122515:	e8 ae 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012251a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012251d:	74 17                	je     f0122536 <test_kfree_bestfirstfit+0x54c>
f012251f:	83 ec 04             	sub    $0x4,%esp
f0122522:	68 74 b3 13 f0       	push   $0xf013b374
f0122527:	68 b6 06 00 00       	push   $0x6b6
f012252c:	68 5a b3 13 f0       	push   $0xf013b35a
f0122531:	e8 cf dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122536:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122539:	e8 5f a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012253e:	29 c3                	sub    %eax,%ebx
f0122540:	89 d8                	mov    %ebx,%eax
f0122542:	83 f8 01             	cmp    $0x1,%eax
f0122545:	74 17                	je     f012255e <test_kfree_bestfirstfit+0x574>
f0122547:	83 ec 04             	sub    $0x4,%esp
f012254a:	68 dc b3 13 f0       	push   $0xf013b3dc
f012254f:	68 b7 06 00 00       	push   $0x6b7
f0122554:	68 5a b3 13 f0       	push   $0xf013b35a
f0122559:	e8 a7 dc fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012255e:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122565:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122568:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012256e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122571:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122578:	eb 0e                	jmp    f0122588 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f012257a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012257d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122580:	01 d0                	add    %edx,%eax
f0122582:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122585:	ff 45 f4             	incl   -0xc(%ebp)
f0122588:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012258e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122591:	7f e7                	jg     f012257a <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122593:	e8 05 a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122598:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012259b:	e8 28 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01225a3:	83 ec 0c             	sub    $0xc,%esp
f01225a6:	68 00 1c 00 00       	push   $0x1c00
f01225ab:	e8 d5 52 fe ff       	call   f0107885 <kmalloc>
f01225b0:	83 c4 10             	add    $0x10,%esp
f01225b3:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225b9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01225bf:	89 c1                	mov    %eax,%ecx
f01225c1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01225c8:	10 00 00 
f01225cb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01225d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01225d6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01225dc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01225e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01225e7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01225ed:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01225f3:	29 d0                	sub    %edx,%eax
f01225f5:	89 c3                	mov    %eax,%ebx
f01225f7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01225fe:	10 00 00 
f0122601:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122606:	0f b6 d0             	movzbl %al,%edx
f0122609:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012260f:	01 d0                	add    %edx,%eax
f0122611:	48                   	dec    %eax
f0122612:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122618:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012261e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122623:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122629:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012262f:	29 d0                	sub    %edx,%eax
f0122631:	01 c3                	add    %eax,%ebx
f0122633:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012263a:	10 00 00 
f012263d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122642:	0f b6 c0             	movzbl %al,%eax
f0122645:	c1 e0 04             	shl    $0x4,%eax
f0122648:	89 c2                	mov    %eax,%edx
f012264a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122650:	01 d0                	add    %edx,%eax
f0122652:	48                   	dec    %eax
f0122653:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122659:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012265f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122664:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012266a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122670:	29 d0                	sub    %edx,%eax
f0122672:	01 d8                	add    %ebx,%eax
f0122674:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122679:	39 c1                	cmp    %eax,%ecx
f012267b:	74 17                	je     f0122694 <test_kfree_bestfirstfit+0x6aa>
f012267d:	83 ec 04             	sub    $0x4,%esp
f0122680:	68 40 b4 13 f0       	push   $0xf013b440
f0122685:	68 c3 06 00 00       	push   $0x6c3
f012268a:	68 5a b3 13 f0       	push   $0xf013b35a
f012268f:	e8 71 db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122694:	e8 2f 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122699:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012269c:	74 17                	je     f01226b5 <test_kfree_bestfirstfit+0x6cb>
f012269e:	83 ec 04             	sub    $0x4,%esp
f01226a1:	68 74 b3 13 f0       	push   $0xf013b374
f01226a6:	68 c4 06 00 00       	push   $0x6c4
f01226ab:	68 5a b3 13 f0       	push   $0xf013b35a
f01226b0:	e8 50 db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226b8:	e8 e0 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01226bd:	29 c3                	sub    %eax,%ebx
f01226bf:	89 d8                	mov    %ebx,%eax
f01226c1:	83 f8 02             	cmp    $0x2,%eax
f01226c4:	74 17                	je     f01226dd <test_kfree_bestfirstfit+0x6f3>
f01226c6:	83 ec 04             	sub    $0x4,%esp
f01226c9:	68 dc b3 13 f0       	push   $0xf013b3dc
f01226ce:	68 c5 06 00 00       	push   $0x6c5
f01226d3:	68 5a b3 13 f0       	push   $0xf013b35a
f01226d8:	e8 28 db fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01226dd:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01226e4:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01226e7:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01226ed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01226f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226f7:	eb 0e                	jmp    f0122707 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f01226f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01226fc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01226ff:	01 d0                	add    %edx,%eax
f0122701:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122704:	ff 45 f4             	incl   -0xc(%ebp)
f0122707:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012270d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122710:	7f e7                	jg     f01226f9 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122712:	e8 86 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122717:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012271a:	e8 a9 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012271f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122722:	83 ec 0c             	sub    $0xc,%esp
f0122725:	68 00 fc 2f 00       	push   $0x2ffc00
f012272a:	e8 56 51 fe ff       	call   f0107885 <kmalloc>
f012272f:	83 c4 10             	add    $0x10,%esp
f0122732:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122738:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012273e:	89 c1                	mov    %eax,%ecx
f0122740:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122747:	10 00 00 
f012274a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122750:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122755:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012275b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122761:	ba 00 00 00 00       	mov    $0x0,%edx
f0122766:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012276c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122772:	29 d0                	sub    %edx,%eax
f0122774:	89 c3                	mov    %eax,%ebx
f0122776:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012277d:	10 00 00 
f0122780:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122785:	0f b6 d0             	movzbl %al,%edx
f0122788:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012278e:	01 d0                	add    %edx,%eax
f0122790:	48                   	dec    %eax
f0122791:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122797:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012279d:	ba 00 00 00 00       	mov    $0x0,%edx
f01227a2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01227a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01227ae:	29 d0                	sub    %edx,%eax
f01227b0:	01 c3                	add    %eax,%ebx
f01227b2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01227b9:	10 00 00 
f01227bc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01227c1:	0f b6 c0             	movzbl %al,%eax
f01227c4:	c1 e0 04             	shl    $0x4,%eax
f01227c7:	89 c2                	mov    %eax,%edx
f01227c9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01227cf:	01 d0                	add    %edx,%eax
f01227d1:	48                   	dec    %eax
f01227d2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01227d8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01227de:	ba 00 00 00 00       	mov    $0x0,%edx
f01227e3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01227e9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01227ef:	29 d0                	sub    %edx,%eax
f01227f1:	01 d8                	add    %ebx,%eax
f01227f3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01227f8:	39 c1                	cmp    %eax,%ecx
f01227fa:	74 17                	je     f0122813 <test_kfree_bestfirstfit+0x829>
f01227fc:	83 ec 04             	sub    $0x4,%esp
f01227ff:	68 40 b4 13 f0       	push   $0xf013b440
f0122804:	68 d1 06 00 00       	push   $0x6d1
f0122809:	68 5a b3 13 f0       	push   $0xf013b35a
f012280e:	e8 f2 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122813:	e8 b0 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122818:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012281b:	74 17                	je     f0122834 <test_kfree_bestfirstfit+0x84a>
f012281d:	83 ec 04             	sub    $0x4,%esp
f0122820:	68 74 b3 13 f0       	push   $0xf013b374
f0122825:	68 d2 06 00 00       	push   $0x6d2
f012282a:	68 5a b3 13 f0       	push   $0xf013b35a
f012282f:	e8 d1 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122834:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122837:	e8 61 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012283c:	29 c3                	sub    %eax,%ebx
f012283e:	89 d8                	mov    %ebx,%eax
f0122840:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122845:	74 17                	je     f012285e <test_kfree_bestfirstfit+0x874>
f0122847:	83 ec 04             	sub    $0x4,%esp
f012284a:	68 dc b3 13 f0       	push   $0xf013b3dc
f012284f:	68 d3 06 00 00       	push   $0x6d3
f0122854:	68 5a b3 13 f0       	push   $0xf013b35a
f0122859:	e8 a7 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012285e:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122865:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122868:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012286e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122871:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122878:	eb 0e                	jmp    f0122888 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f012287a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012287d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122880:	01 d0                	add    %edx,%eax
f0122882:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122885:	ff 45 f4             	incl   -0xc(%ebp)
f0122888:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012288e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122891:	7f e7                	jg     f012287a <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122893:	e8 05 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122898:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012289b:	e8 28 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01228a3:	83 ec 0c             	sub    $0xc,%esp
f01228a6:	68 00 fc 5f 00       	push   $0x5ffc00
f01228ab:	e8 d5 4f fe ff       	call   f0107885 <kmalloc>
f01228b0:	83 c4 10             	add    $0x10,%esp
f01228b3:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228b9:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01228bf:	89 c1                	mov    %eax,%ecx
f01228c1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01228c8:	10 00 00 
f01228cb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01228d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228d6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01228dc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01228e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01228e7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01228ed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01228f3:	29 d0                	sub    %edx,%eax
f01228f5:	89 c3                	mov    %eax,%ebx
f01228f7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01228fe:	10 00 00 
f0122901:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122906:	0f b6 d0             	movzbl %al,%edx
f0122909:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012290f:	01 d0                	add    %edx,%eax
f0122911:	48                   	dec    %eax
f0122912:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122918:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012291e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122923:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122929:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012292f:	29 d0                	sub    %edx,%eax
f0122931:	01 c3                	add    %eax,%ebx
f0122933:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012293a:	10 00 00 
f012293d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122942:	0f b6 c0             	movzbl %al,%eax
f0122945:	c1 e0 04             	shl    $0x4,%eax
f0122948:	89 c2                	mov    %eax,%edx
f012294a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122950:	01 d0                	add    %edx,%eax
f0122952:	48                   	dec    %eax
f0122953:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122959:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012295f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122964:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012296a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122970:	29 d0                	sub    %edx,%eax
f0122972:	01 d8                	add    %ebx,%eax
f0122974:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122979:	39 c1                	cmp    %eax,%ecx
f012297b:	74 17                	je     f0122994 <test_kfree_bestfirstfit+0x9aa>
f012297d:	83 ec 04             	sub    $0x4,%esp
f0122980:	68 40 b4 13 f0       	push   $0xf013b440
f0122985:	68 df 06 00 00       	push   $0x6df
f012298a:	68 5a b3 13 f0       	push   $0xf013b35a
f012298f:	e8 71 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122994:	e8 2f 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122999:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012299c:	74 17                	je     f01229b5 <test_kfree_bestfirstfit+0x9cb>
f012299e:	83 ec 04             	sub    $0x4,%esp
f01229a1:	68 74 b3 13 f0       	push   $0xf013b374
f01229a6:	68 e0 06 00 00       	push   $0x6e0
f01229ab:	68 5a b3 13 f0       	push   $0xf013b35a
f01229b0:	e8 50 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229b8:	e8 e0 a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01229bd:	29 c3                	sub    %eax,%ebx
f01229bf:	89 d8                	mov    %ebx,%eax
f01229c1:	3d 00 06 00 00       	cmp    $0x600,%eax
f01229c6:	74 17                	je     f01229df <test_kfree_bestfirstfit+0x9f5>
f01229c8:	83 ec 04             	sub    $0x4,%esp
f01229cb:	68 dc b3 13 f0       	push   $0xf013b3dc
f01229d0:	68 e1 06 00 00       	push   $0x6e1
f01229d5:	68 5a b3 13 f0       	push   $0xf013b35a
f01229da:	e8 26 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01229df:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01229e6:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01229e9:	e8 af a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01229ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229f1:	e8 d2 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01229f9:	83 ec 0c             	sub    $0xc,%esp
f01229fc:	68 00 38 00 00       	push   $0x3800
f0122a01:	e8 7f 4e fe ff       	call   f0107885 <kmalloc>
f0122a06:	83 c4 10             	add    $0x10,%esp
f0122a09:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a0f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122a15:	89 c1                	mov    %eax,%ecx
f0122a17:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122a1e:	10 00 00 
f0122a21:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122a27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a2c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122a32:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122a38:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a3d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122a43:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122a49:	29 d0                	sub    %edx,%eax
f0122a4b:	89 c3                	mov    %eax,%ebx
f0122a4d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122a54:	10 00 00 
f0122a57:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122a5c:	0f b6 d0             	movzbl %al,%edx
f0122a5f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122a65:	01 d0                	add    %edx,%eax
f0122a67:	48                   	dec    %eax
f0122a68:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122a6e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a79:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122a7f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122a85:	29 d0                	sub    %edx,%eax
f0122a87:	01 c3                	add    %eax,%ebx
f0122a89:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122a90:	10 00 00 
f0122a93:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122a98:	0f b6 c0             	movzbl %al,%eax
f0122a9b:	c1 e0 04             	shl    $0x4,%eax
f0122a9e:	89 c2                	mov    %eax,%edx
f0122aa0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122aa6:	01 d0                	add    %edx,%eax
f0122aa8:	48                   	dec    %eax
f0122aa9:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122aaf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aba:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122ac0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122ac6:	29 d0                	sub    %edx,%eax
f0122ac8:	01 d8                	add    %ebx,%eax
f0122aca:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122acf:	39 c1                	cmp    %eax,%ecx
f0122ad1:	74 17                	je     f0122aea <test_kfree_bestfirstfit+0xb00>
f0122ad3:	83 ec 04             	sub    $0x4,%esp
f0122ad6:	68 40 b4 13 f0       	push   $0xf013b440
f0122adb:	68 e8 06 00 00       	push   $0x6e8
f0122ae0:	68 5a b3 13 f0       	push   $0xf013b35a
f0122ae5:	e8 1b d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aea:	e8 d9 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122aef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122af2:	74 17                	je     f0122b0b <test_kfree_bestfirstfit+0xb21>
f0122af4:	83 ec 04             	sub    $0x4,%esp
f0122af7:	68 74 b3 13 f0       	push   $0xf013b374
f0122afc:	68 e9 06 00 00       	push   $0x6e9
f0122b01:	68 5a b3 13 f0       	push   $0xf013b35a
f0122b06:	e8 fa d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b0b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b0e:	e8 8a a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b13:	29 c3                	sub    %eax,%ebx
f0122b15:	89 d8                	mov    %ebx,%eax
f0122b17:	83 f8 04             	cmp    $0x4,%eax
f0122b1a:	74 17                	je     f0122b33 <test_kfree_bestfirstfit+0xb49>
f0122b1c:	83 ec 04             	sub    $0x4,%esp
f0122b1f:	68 dc b3 13 f0       	push   $0xf013b3dc
f0122b24:	68 ea 06 00 00       	push   $0x6ea
f0122b29:	68 5a b3 13 f0       	push   $0xf013b35a
f0122b2e:	e8 d2 d6 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122b33:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122b3a:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122b3d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122b43:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122b46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b4d:	eb 0e                	jmp    f0122b5d <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122b4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b52:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b55:	01 d0                	add    %edx,%eax
f0122b57:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122b5a:	ff 45 f4             	incl   -0xc(%ebp)
f0122b5d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122b63:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b66:	7f e7                	jg     f0122b4f <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122b68:	e8 30 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b6d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122b73:	e8 50 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b78:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122b7e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122b84:	83 ec 0c             	sub    $0xc,%esp
f0122b87:	50                   	push   %eax
f0122b88:	e8 c3 4d fe ff       	call   f0107950 <kfree>
f0122b8d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b90:	e8 33 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b95:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122b9b:	74 17                	je     f0122bb4 <test_kfree_bestfirstfit+0xbca>
f0122b9d:	83 ec 04             	sub    $0x4,%esp
f0122ba0:	68 74 b3 13 f0       	push   $0xf013b374
f0122ba5:	68 f9 06 00 00       	push   $0x6f9
f0122baa:	68 5a b3 13 f0       	push   $0xf013b35a
f0122baf:	e8 51 d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122bb4:	e8 e4 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122bb9:	89 c2                	mov    %eax,%edx
f0122bbb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122bc1:	29 c2                	sub    %eax,%edx
f0122bc3:	89 d0                	mov    %edx,%eax
f0122bc5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122bca:	74 17                	je     f0122be3 <test_kfree_bestfirstfit+0xbf9>
f0122bcc:	83 ec 04             	sub    $0x4,%esp
f0122bcf:	68 e4 ba 13 f0       	push   $0xf013bae4
f0122bd4:	68 fa 06 00 00       	push   $0x6fa
f0122bd9:	68 5a b3 13 f0       	push   $0xf013b35a
f0122bde:	e8 22 d6 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122be3:	e8 b5 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122be8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bee:	e8 d5 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122bf3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122bf9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122bff:	83 ec 0c             	sub    $0xc,%esp
f0122c02:	50                   	push   %eax
f0122c03:	e8 48 4d fe ff       	call   f0107950 <kfree>
f0122c08:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c0b:	e8 b8 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c10:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122c16:	74 17                	je     f0122c2f <test_kfree_bestfirstfit+0xc45>
f0122c18:	83 ec 04             	sub    $0x4,%esp
f0122c1b:	68 74 b3 13 f0       	push   $0xf013b374
f0122c20:	68 00 07 00 00       	push   $0x700
f0122c25:	68 5a b3 13 f0       	push   $0xf013b35a
f0122c2a:	e8 d6 d5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c2f:	e8 69 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c34:	89 c2                	mov    %eax,%edx
f0122c36:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122c3c:	29 c2                	sub    %eax,%edx
f0122c3e:	89 d0                	mov    %edx,%eax
f0122c40:	83 f8 01             	cmp    $0x1,%eax
f0122c43:	74 17                	je     f0122c5c <test_kfree_bestfirstfit+0xc72>
f0122c45:	83 ec 04             	sub    $0x4,%esp
f0122c48:	68 e4 ba 13 f0       	push   $0xf013bae4
f0122c4d:	68 01 07 00 00       	push   $0x701
f0122c52:	68 5a b3 13 f0       	push   $0xf013b35a
f0122c57:	e8 a9 d5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c5c:	e8 3c 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c61:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c67:	e8 5c 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c6c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122c72:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122c78:	83 ec 0c             	sub    $0xc,%esp
f0122c7b:	50                   	push   %eax
f0122c7c:	e8 cf 4c fe ff       	call   f0107950 <kfree>
f0122c81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c84:	e8 3f 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c89:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122c8f:	74 17                	je     f0122ca8 <test_kfree_bestfirstfit+0xcbe>
f0122c91:	83 ec 04             	sub    $0x4,%esp
f0122c94:	68 74 b3 13 f0       	push   $0xf013b374
f0122c99:	68 07 07 00 00       	push   $0x707
f0122c9e:	68 5a b3 13 f0       	push   $0xf013b35a
f0122ca3:	e8 5d d5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ca8:	e8 f0 9e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122cad:	89 c2                	mov    %eax,%edx
f0122caf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122cb5:	29 c2                	sub    %eax,%edx
f0122cb7:	89 d0                	mov    %edx,%eax
f0122cb9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122cbe:	74 17                	je     f0122cd7 <test_kfree_bestfirstfit+0xced>
f0122cc0:	83 ec 04             	sub    $0x4,%esp
f0122cc3:	68 e4 ba 13 f0       	push   $0xf013bae4
f0122cc8:	68 08 07 00 00       	push   $0x708
f0122ccd:	68 5a b3 13 f0       	push   $0xf013b35a
f0122cd2:	e8 2e d5 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122cd7:	e8 c1 9e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122cdc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ce2:	e8 e1 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ce7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122ced:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122cf3:	83 ec 0c             	sub    $0xc,%esp
f0122cf6:	50                   	push   %eax
f0122cf7:	e8 54 4c fe ff       	call   f0107950 <kfree>
f0122cfc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cff:	e8 c4 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d04:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122d0a:	74 17                	je     f0122d23 <test_kfree_bestfirstfit+0xd39>
f0122d0c:	83 ec 04             	sub    $0x4,%esp
f0122d0f:	68 74 b3 13 f0       	push   $0xf013b374
f0122d14:	68 0e 07 00 00       	push   $0x70e
f0122d19:	68 5a b3 13 f0       	push   $0xf013b35a
f0122d1e:	e8 e2 d4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d23:	e8 75 9e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122d28:	89 c2                	mov    %eax,%edx
f0122d2a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122d30:	29 c2                	sub    %eax,%edx
f0122d32:	89 d0                	mov    %edx,%eax
f0122d34:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122d39:	74 17                	je     f0122d52 <test_kfree_bestfirstfit+0xd68>
f0122d3b:	83 ec 04             	sub    $0x4,%esp
f0122d3e:	68 e4 ba 13 f0       	push   $0xf013bae4
f0122d43:	68 0f 07 00 00       	push   $0x70f
f0122d48:	68 5a b3 13 f0       	push   $0xf013b35a
f0122d4d:	e8 b3 d4 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122d52:	83 ec 0c             	sub    $0xc,%esp
f0122d55:	68 1c bb 13 f0       	push   $0xf013bb1c
f0122d5a:	e8 af df fd ff       	call   f0100d0e <cprintf>
f0122d5f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122d62:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122d68:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122d6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d72:	eb 1e                	jmp    f0122d92 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122d74:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122d7a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122d7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d80:	01 c8                	add    %ecx,%eax
f0122d82:	8a 00                	mov    (%eax),%al
f0122d84:	0f be c0             	movsbl %al,%eax
f0122d87:	01 d0                	add    %edx,%eax
f0122d89:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122d8f:	ff 45 f4             	incl   -0xc(%ebp)
f0122d92:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122d98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d9b:	7f d7                	jg     f0122d74 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122d9d:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122da3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122da9:	89 c1                	mov    %eax,%ecx
f0122dab:	01 c9                	add    %ecx,%ecx
f0122dad:	01 c8                	add    %ecx,%eax
f0122daf:	39 c2                	cmp    %eax,%edx
f0122db1:	74 17                	je     f0122dca <test_kfree_bestfirstfit+0xde0>
f0122db3:	83 ec 04             	sub    $0x4,%esp
f0122db6:	68 40 bb 13 f0       	push   $0xf013bb40
f0122dbb:	68 1c 07 00 00       	push   $0x71c
f0122dc0:	68 5a b3 13 f0       	push   $0xf013b35a
f0122dc5:	e8 3b d4 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122dca:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122dd0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122dd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122dda:	eb 1e                	jmp    f0122dfa <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122ddc:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122de2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122de5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122de8:	01 c8                	add    %ecx,%eax
f0122dea:	8a 00                	mov    (%eax),%al
f0122dec:	0f be c0             	movsbl %al,%eax
f0122def:	01 d0                	add    %edx,%eax
f0122df1:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122df7:	ff 45 f4             	incl   -0xc(%ebp)
f0122dfa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e03:	7f d7                	jg     f0122ddc <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122e05:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122e0b:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122e11:	c1 e2 02             	shl    $0x2,%edx
f0122e14:	39 d0                	cmp    %edx,%eax
f0122e16:	74 17                	je     f0122e2f <test_kfree_bestfirstfit+0xe45>
f0122e18:	83 ec 04             	sub    $0x4,%esp
f0122e1b:	68 40 bb 13 f0       	push   $0xf013bb40
f0122e20:	68 24 07 00 00       	push   $0x724
f0122e25:	68 5a b3 13 f0       	push   $0xf013b35a
f0122e2a:	e8 d6 d3 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122e2f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122e35:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122e38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e3f:	eb 1e                	jmp    f0122e5f <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122e41:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122e47:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122e4a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e4d:	01 c8                	add    %ecx,%eax
f0122e4f:	8a 00                	mov    (%eax),%al
f0122e51:	0f be c0             	movsbl %al,%eax
f0122e54:	01 d0                	add    %edx,%eax
f0122e56:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122e5c:	ff 45 f4             	incl   -0xc(%ebp)
f0122e5f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122e65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e68:	7f d7                	jg     f0122e41 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122e6a:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122e70:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122e76:	89 d0                	mov    %edx,%eax
f0122e78:	c1 e0 02             	shl    $0x2,%eax
f0122e7b:	01 d0                	add    %edx,%eax
f0122e7d:	39 c1                	cmp    %eax,%ecx
f0122e7f:	74 17                	je     f0122e98 <test_kfree_bestfirstfit+0xeae>
f0122e81:	83 ec 04             	sub    $0x4,%esp
f0122e84:	68 40 bb 13 f0       	push   $0xf013bb40
f0122e89:	68 2c 07 00 00       	push   $0x72c
f0122e8e:	68 5a b3 13 f0       	push   $0xf013b35a
f0122e93:	e8 6d d3 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122e98:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e9e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122ea1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ea8:	eb 1e                	jmp    f0122ec8 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122eaa:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122eb0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122eb3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122eb6:	01 c8                	add    %ecx,%eax
f0122eb8:	8a 00                	mov    (%eax),%al
f0122eba:	0f be c0             	movsbl %al,%eax
f0122ebd:	01 d0                	add    %edx,%eax
f0122ebf:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122ec5:	ff 45 f4             	incl   -0xc(%ebp)
f0122ec8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122ece:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ed1:	7f d7                	jg     f0122eaa <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122ed3:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122ed9:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122edf:	89 d0                	mov    %edx,%eax
f0122ee1:	01 c0                	add    %eax,%eax
f0122ee3:	01 d0                	add    %edx,%eax
f0122ee5:	01 c0                	add    %eax,%eax
f0122ee7:	01 d0                	add    %edx,%eax
f0122ee9:	39 c1                	cmp    %eax,%ecx
f0122eeb:	74 17                	je     f0122f04 <test_kfree_bestfirstfit+0xf1a>
f0122eed:	83 ec 04             	sub    $0x4,%esp
f0122ef0:	68 40 bb 13 f0       	push   $0xf013bb40
f0122ef5:	68 34 07 00 00       	push   $0x734
f0122efa:	68 5a b3 13 f0       	push   $0xf013b35a
f0122eff:	e8 01 d3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0122f04:	83 ec 0c             	sub    $0xc,%esp
f0122f07:	68 73 bb 13 f0       	push   $0xf013bb73
f0122f0c:	e8 fd dd fd ff       	call   f0100d0e <cprintf>
f0122f11:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f14:	e8 84 9c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122f19:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f1c:	e8 a7 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f21:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122f24:	83 ec 0c             	sub    $0xc,%esp
f0122f27:	68 00 00 30 00       	push   $0x300000
f0122f2c:	e8 54 49 fe ff       	call   f0107885 <kmalloc>
f0122f31:	83 c4 10             	add    $0x10,%esp
f0122f34:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f3a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122f40:	89 c1                	mov    %eax,%ecx
f0122f42:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122f49:	10 00 00 
f0122f4c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122f52:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f57:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122f5d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f68:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122f6e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122f74:	29 d0                	sub    %edx,%eax
f0122f76:	89 c3                	mov    %eax,%ebx
f0122f78:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122f7f:	10 00 00 
f0122f82:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122f87:	0f b6 d0             	movzbl %al,%edx
f0122f8a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122f90:	01 d0                	add    %edx,%eax
f0122f92:	48                   	dec    %eax
f0122f93:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122f99:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122f9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fa4:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122faa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122fb0:	29 d0                	sub    %edx,%eax
f0122fb2:	01 c3                	add    %eax,%ebx
f0122fb4:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122fbb:	10 00 00 
f0122fbe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122fc3:	0f b6 c0             	movzbl %al,%eax
f0122fc6:	c1 e0 04             	shl    $0x4,%eax
f0122fc9:	89 c2                	mov    %eax,%edx
f0122fcb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122fd1:	01 d0                	add    %edx,%eax
f0122fd3:	48                   	dec    %eax
f0122fd4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122fda:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fe5:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122feb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122ff1:	29 d0                	sub    %edx,%eax
f0122ff3:	01 d8                	add    %ebx,%eax
f0122ff5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122ffa:	39 c1                	cmp    %eax,%ecx
f0122ffc:	74 17                	je     f0123015 <test_kfree_bestfirstfit+0x102b>
f0122ffe:	83 ec 04             	sub    $0x4,%esp
f0123001:	68 40 b4 13 f0       	push   $0xf013b440
f0123006:	68 3f 07 00 00       	push   $0x73f
f012300b:	68 5a b3 13 f0       	push   $0xf013b35a
f0123010:	e8 f0 d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123015:	e8 ae 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012301a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012301d:	74 17                	je     f0123036 <test_kfree_bestfirstfit+0x104c>
f012301f:	83 ec 04             	sub    $0x4,%esp
f0123022:	68 74 b3 13 f0       	push   $0xf013b374
f0123027:	68 40 07 00 00       	push   $0x740
f012302c:	68 5a b3 13 f0       	push   $0xf013b35a
f0123031:	e8 cf d1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123036:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123039:	e8 5f 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012303e:	29 c3                	sub    %eax,%ebx
f0123040:	89 d8                	mov    %ebx,%eax
f0123042:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123047:	74 17                	je     f0123060 <test_kfree_bestfirstfit+0x1076>
f0123049:	83 ec 04             	sub    $0x4,%esp
f012304c:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123051:	68 41 07 00 00       	push   $0x741
f0123056:	68 5a b3 13 f0       	push   $0xf013b35a
f012305b:	e8 a5 d1 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0123060:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0123067:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f012306a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123070:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0123073:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012307a:	eb 0e                	jmp    f012308a <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f012307c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012307f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123082:	01 d0                	add    %edx,%eax
f0123084:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0123087:	ff 45 f4             	incl   -0xc(%ebp)
f012308a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0123090:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123093:	7f e7                	jg     f012307c <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123095:	e8 03 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012309a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012309d:	e8 26 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01230a5:	83 ec 0c             	sub    $0xc,%esp
f01230a8:	68 00 08 00 00       	push   $0x800
f01230ad:	e8 d3 47 fe ff       	call   f0107885 <kmalloc>
f01230b2:	83 c4 10             	add    $0x10,%esp
f01230b5:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230bb:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01230c1:	89 c1                	mov    %eax,%ecx
f01230c3:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01230ca:	10 00 00 
f01230cd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01230d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230d8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01230de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01230e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01230e9:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01230ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01230f5:	29 d0                	sub    %edx,%eax
f01230f7:	89 c3                	mov    %eax,%ebx
f01230f9:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0123100:	10 00 00 
f0123103:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123108:	0f b6 d0             	movzbl %al,%edx
f012310b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123111:	01 d0                	add    %edx,%eax
f0123113:	48                   	dec    %eax
f0123114:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012311a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123120:	ba 00 00 00 00       	mov    $0x0,%edx
f0123125:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012312b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123131:	29 d0                	sub    %edx,%eax
f0123133:	01 c3                	add    %eax,%ebx
f0123135:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012313c:	10 00 00 
f012313f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123144:	0f b6 c0             	movzbl %al,%eax
f0123147:	c1 e0 04             	shl    $0x4,%eax
f012314a:	89 c2                	mov    %eax,%edx
f012314c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123152:	01 d0                	add    %edx,%eax
f0123154:	48                   	dec    %eax
f0123155:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012315b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123161:	ba 00 00 00 00       	mov    $0x0,%edx
f0123166:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012316c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123172:	29 d0                	sub    %edx,%eax
f0123174:	01 d8                	add    %ebx,%eax
f0123176:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012317b:	39 c1                	cmp    %eax,%ecx
f012317d:	74 17                	je     f0123196 <test_kfree_bestfirstfit+0x11ac>
f012317f:	83 ec 04             	sub    $0x4,%esp
f0123182:	68 40 b4 13 f0       	push   $0xf013b440
f0123187:	68 4d 07 00 00       	push   $0x74d
f012318c:	68 5a b3 13 f0       	push   $0xf013b35a
f0123191:	e8 6f d0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123196:	e8 2d 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012319b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012319e:	74 17                	je     f01231b7 <test_kfree_bestfirstfit+0x11cd>
f01231a0:	83 ec 04             	sub    $0x4,%esp
f01231a3:	68 74 b3 13 f0       	push   $0xf013b374
f01231a8:	68 4e 07 00 00       	push   $0x74e
f01231ad:	68 5a b3 13 f0       	push   $0xf013b35a
f01231b2:	e8 4e d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01231ba:	e8 de 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01231bf:	29 c3                	sub    %eax,%ebx
f01231c1:	89 d8                	mov    %ebx,%eax
f01231c3:	83 f8 01             	cmp    $0x1,%eax
f01231c6:	74 17                	je     f01231df <test_kfree_bestfirstfit+0x11f5>
f01231c8:	83 ec 04             	sub    $0x4,%esp
f01231cb:	68 dc b3 13 f0       	push   $0xf013b3dc
f01231d0:	68 4f 07 00 00       	push   $0x74f
f01231d5:	68 5a b3 13 f0       	push   $0xf013b35a
f01231da:	e8 26 d0 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01231df:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01231e6:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01231e9:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01231ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01231f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231f9:	eb 0e                	jmp    f0123209 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01231fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01231fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123201:	01 d0                	add    %edx,%eax
f0123203:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123206:	ff 45 f4             	incl   -0xc(%ebp)
f0123209:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012320f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123212:	7f e7                	jg     f01231fb <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123214:	e8 84 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123219:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012321c:	e8 a7 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123221:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123224:	83 ec 0c             	sub    $0xc,%esp
f0123227:	68 00 00 10 00       	push   $0x100000
f012322c:	e8 54 46 fe ff       	call   f0107885 <kmalloc>
f0123231:	83 c4 10             	add    $0x10,%esp
f0123234:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012323a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123240:	89 c1                	mov    %eax,%ecx
f0123242:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123249:	10 00 00 
f012324c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123252:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123257:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012325d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123263:	ba 00 00 00 00       	mov    $0x0,%edx
f0123268:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012326e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123274:	29 d0                	sub    %edx,%eax
f0123276:	89 c3                	mov    %eax,%ebx
f0123278:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012327f:	10 00 00 
f0123282:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123287:	0f b6 d0             	movzbl %al,%edx
f012328a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123290:	01 d0                	add    %edx,%eax
f0123292:	48                   	dec    %eax
f0123293:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123299:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012329f:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01232aa:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01232b0:	29 d0                	sub    %edx,%eax
f01232b2:	01 c3                	add    %eax,%ebx
f01232b4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01232bb:	10 00 00 
f01232be:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01232c3:	0f b6 c0             	movzbl %al,%eax
f01232c6:	c1 e0 04             	shl    $0x4,%eax
f01232c9:	89 c2                	mov    %eax,%edx
f01232cb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01232d1:	01 d0                	add    %edx,%eax
f01232d3:	48                   	dec    %eax
f01232d4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01232da:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01232e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01232e5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01232eb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01232f1:	29 d0                	sub    %edx,%eax
f01232f3:	01 d8                	add    %ebx,%eax
f01232f5:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01232fa:	39 c1                	cmp    %eax,%ecx
f01232fc:	74 17                	je     f0123315 <test_kfree_bestfirstfit+0x132b>
f01232fe:	83 ec 04             	sub    $0x4,%esp
f0123301:	68 40 b4 13 f0       	push   $0xf013b440
f0123306:	68 5b 07 00 00       	push   $0x75b
f012330b:	68 5a b3 13 f0       	push   $0xf013b35a
f0123310:	e8 f0 ce fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123315:	e8 ae 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012331a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012331d:	74 17                	je     f0123336 <test_kfree_bestfirstfit+0x134c>
f012331f:	83 ec 04             	sub    $0x4,%esp
f0123322:	68 74 b3 13 f0       	push   $0xf013b374
f0123327:	68 5c 07 00 00       	push   $0x75c
f012332c:	68 5a b3 13 f0       	push   $0xf013b35a
f0123331:	e8 cf ce fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123336:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123339:	e8 5f 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012333e:	29 c3                	sub    %eax,%ebx
f0123340:	89 d8                	mov    %ebx,%eax
f0123342:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123347:	74 17                	je     f0123360 <test_kfree_bestfirstfit+0x1376>
f0123349:	83 ec 04             	sub    $0x4,%esp
f012334c:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123351:	68 5d 07 00 00       	push   $0x75d
f0123356:	68 5a b3 13 f0       	push   $0xf013b35a
f012335b:	e8 a5 ce fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123360:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123367:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012336a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123370:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123373:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012337a:	eb 0e                	jmp    f012338a <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f012337c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012337f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123382:	01 d0                	add    %edx,%eax
f0123384:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123387:	ff 45 f4             	incl   -0xc(%ebp)
f012338a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123390:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123393:	7f e7                	jg     f012337c <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123395:	83 ec 0c             	sub    $0xc,%esp
f0123398:	68 7a bb 13 f0       	push   $0xf013bb7a
f012339d:	e8 6c d9 fd ff       	call   f0100d0e <cprintf>
f01233a2:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01233a5:	e8 f3 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233ad:	e8 16 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01233b5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01233bb:	83 ec 0c             	sub    $0xc,%esp
f01233be:	50                   	push   %eax
f01233bf:	e8 8c 45 fe ff       	call   f0107950 <kfree>
f01233c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233c7:	e8 fc 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01233cf:	74 17                	je     f01233e8 <test_kfree_bestfirstfit+0x13fe>
f01233d1:	83 ec 04             	sub    $0x4,%esp
f01233d4:	68 74 b3 13 f0       	push   $0xf013b374
f01233d9:	68 6d 07 00 00       	push   $0x76d
f01233de:	68 5a b3 13 f0       	push   $0xf013b35a
f01233e3:	e8 1d ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01233e8:	e8 b0 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233ed:	89 c2                	mov    %eax,%edx
f01233ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01233f2:	29 c2                	sub    %eax,%edx
f01233f4:	89 d0                	mov    %edx,%eax
f01233f6:	83 f8 02             	cmp    $0x2,%eax
f01233f9:	74 17                	je     f0123412 <test_kfree_bestfirstfit+0x1428>
f01233fb:	83 ec 04             	sub    $0x4,%esp
f01233fe:	68 e4 ba 13 f0       	push   $0xf013bae4
f0123403:	68 6e 07 00 00       	push   $0x76e
f0123408:	68 5a b3 13 f0       	push   $0xf013b35a
f012340d:	e8 f3 cd fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123412:	e8 86 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123417:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012341a:	e8 a9 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012341f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123422:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123428:	83 ec 0c             	sub    $0xc,%esp
f012342b:	50                   	push   %eax
f012342c:	e8 1f 45 fe ff       	call   f0107950 <kfree>
f0123431:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123434:	e8 8f 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123439:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012343c:	74 17                	je     f0123455 <test_kfree_bestfirstfit+0x146b>
f012343e:	83 ec 04             	sub    $0x4,%esp
f0123441:	68 74 b3 13 f0       	push   $0xf013b374
f0123446:	68 74 07 00 00       	push   $0x774
f012344b:	68 5a b3 13 f0       	push   $0xf013b35a
f0123450:	e8 b0 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123455:	e8 43 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012345a:	89 c2                	mov    %eax,%edx
f012345c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012345f:	29 c2                	sub    %eax,%edx
f0123461:	89 d0                	mov    %edx,%eax
f0123463:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123468:	74 17                	je     f0123481 <test_kfree_bestfirstfit+0x1497>
f012346a:	83 ec 04             	sub    $0x4,%esp
f012346d:	68 e4 ba 13 f0       	push   $0xf013bae4
f0123472:	68 75 07 00 00       	push   $0x775
f0123477:	68 5a b3 13 f0       	push   $0xf013b35a
f012347c:	e8 84 cd fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123481:	e8 17 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123486:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123489:	e8 3a 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012348e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123491:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123497:	83 ec 0c             	sub    $0xc,%esp
f012349a:	50                   	push   %eax
f012349b:	e8 b0 44 fe ff       	call   f0107950 <kfree>
f01234a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234a3:	e8 20 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234a8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234ab:	74 17                	je     f01234c4 <test_kfree_bestfirstfit+0x14da>
f01234ad:	83 ec 04             	sub    $0x4,%esp
f01234b0:	68 74 b3 13 f0       	push   $0xf013b374
f01234b5:	68 7b 07 00 00       	push   $0x77b
f01234ba:	68 5a b3 13 f0       	push   $0xf013b35a
f01234bf:	e8 41 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01234c4:	e8 d4 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234c9:	89 c2                	mov    %eax,%edx
f01234cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01234ce:	29 c2                	sub    %eax,%edx
f01234d0:	89 d0                	mov    %edx,%eax
f01234d2:	83 f8 01             	cmp    $0x1,%eax
f01234d5:	74 17                	je     f01234ee <test_kfree_bestfirstfit+0x1504>
f01234d7:	83 ec 04             	sub    $0x4,%esp
f01234da:	68 e4 ba 13 f0       	push   $0xf013bae4
f01234df:	68 7c 07 00 00       	push   $0x77c
f01234e4:	68 5a b3 13 f0       	push   $0xf013b35a
f01234e9:	e8 17 cd fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01234ee:	e8 aa 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234f6:	e8 cd 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01234fe:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123504:	83 ec 0c             	sub    $0xc,%esp
f0123507:	50                   	push   %eax
f0123508:	e8 43 44 fe ff       	call   f0107950 <kfree>
f012350d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123510:	e8 b3 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123515:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123518:	74 17                	je     f0123531 <test_kfree_bestfirstfit+0x1547>
f012351a:	83 ec 04             	sub    $0x4,%esp
f012351d:	68 74 b3 13 f0       	push   $0xf013b374
f0123522:	68 82 07 00 00       	push   $0x782
f0123527:	68 5a b3 13 f0       	push   $0xf013b35a
f012352c:	e8 d4 cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123531:	e8 67 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123536:	89 c2                	mov    %eax,%edx
f0123538:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012353b:	29 c2                	sub    %eax,%edx
f012353d:	89 d0                	mov    %edx,%eax
f012353f:	83 f8 04             	cmp    $0x4,%eax
f0123542:	74 17                	je     f012355b <test_kfree_bestfirstfit+0x1571>
f0123544:	83 ec 04             	sub    $0x4,%esp
f0123547:	68 e4 ba 13 f0       	push   $0xf013bae4
f012354c:	68 83 07 00 00       	push   $0x783
f0123551:	68 5a b3 13 f0       	push   $0xf013b35a
f0123556:	e8 aa cc fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012355b:	e8 3d 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123560:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123563:	e8 60 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123568:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012356b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123571:	83 ec 0c             	sub    $0xc,%esp
f0123574:	50                   	push   %eax
f0123575:	e8 d6 43 fe ff       	call   f0107950 <kfree>
f012357a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012357d:	e8 46 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123582:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123585:	74 17                	je     f012359e <test_kfree_bestfirstfit+0x15b4>
f0123587:	83 ec 04             	sub    $0x4,%esp
f012358a:	68 74 b3 13 f0       	push   $0xf013b374
f012358f:	68 89 07 00 00       	push   $0x789
f0123594:	68 5a b3 13 f0       	push   $0xf013b35a
f0123599:	e8 67 cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012359e:	e8 fa 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01235a3:	89 c2                	mov    %eax,%edx
f01235a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01235a8:	29 c2                	sub    %eax,%edx
f01235aa:	89 d0                	mov    %edx,%eax
f01235ac:	3d 00 03 00 00       	cmp    $0x300,%eax
f01235b1:	74 17                	je     f01235ca <test_kfree_bestfirstfit+0x15e0>
f01235b3:	83 ec 04             	sub    $0x4,%esp
f01235b6:	68 e4 ba 13 f0       	push   $0xf013bae4
f01235bb:	68 8a 07 00 00       	push   $0x78a
f01235c0:	68 5a b3 13 f0       	push   $0xf013b35a
f01235c5:	e8 3b cc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01235ca:	e8 ce 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01235cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01235d2:	e8 f1 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01235da:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01235e0:	83 ec 0c             	sub    $0xc,%esp
f01235e3:	50                   	push   %eax
f01235e4:	e8 67 43 fe ff       	call   f0107950 <kfree>
f01235e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235ec:	e8 d7 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01235f4:	74 17                	je     f012360d <test_kfree_bestfirstfit+0x1623>
f01235f6:	83 ec 04             	sub    $0x4,%esp
f01235f9:	68 74 b3 13 f0       	push   $0xf013b374
f01235fe:	68 90 07 00 00       	push   $0x790
f0123603:	68 5a b3 13 f0       	push   $0xf013b35a
f0123608:	e8 f8 cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012360d:	e8 8b 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123612:	89 c2                	mov    %eax,%edx
f0123614:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123617:	29 c2                	sub    %eax,%edx
f0123619:	89 d0                	mov    %edx,%eax
f012361b:	83 f8 01             	cmp    $0x1,%eax
f012361e:	74 17                	je     f0123637 <test_kfree_bestfirstfit+0x164d>
f0123620:	83 ec 04             	sub    $0x4,%esp
f0123623:	68 e4 ba 13 f0       	push   $0xf013bae4
f0123628:	68 91 07 00 00       	push   $0x791
f012362d:	68 5a b3 13 f0       	push   $0xf013b35a
f0123632:	e8 ce cb fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123637:	e8 61 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012363c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012363f:	e8 84 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123644:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123647:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012364d:	83 ec 0c             	sub    $0xc,%esp
f0123650:	50                   	push   %eax
f0123651:	e8 fa 42 fe ff       	call   f0107950 <kfree>
f0123656:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123659:	e8 6a 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012365e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123661:	74 17                	je     f012367a <test_kfree_bestfirstfit+0x1690>
f0123663:	83 ec 04             	sub    $0x4,%esp
f0123666:	68 74 b3 13 f0       	push   $0xf013b374
f012366b:	68 97 07 00 00       	push   $0x797
f0123670:	68 5a b3 13 f0       	push   $0xf013b35a
f0123675:	e8 8b cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012367a:	e8 1e 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012367f:	89 c2                	mov    %eax,%edx
f0123681:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123684:	29 c2                	sub    %eax,%edx
f0123686:	89 d0                	mov    %edx,%eax
f0123688:	3d 00 01 00 00       	cmp    $0x100,%eax
f012368d:	74 17                	je     f01236a6 <test_kfree_bestfirstfit+0x16bc>
f012368f:	83 ec 04             	sub    $0x4,%esp
f0123692:	68 e4 ba 13 f0       	push   $0xf013bae4
f0123697:	68 98 07 00 00       	push   $0x798
f012369c:	68 5a b3 13 f0       	push   $0xf013b35a
f01236a1:	e8 5f cb fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01236a6:	e8 f2 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01236ab:	89 c2                	mov    %eax,%edx
f01236ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01236b0:	39 c2                	cmp    %eax,%edx
f01236b2:	74 17                	je     f01236cb <test_kfree_bestfirstfit+0x16e1>
f01236b4:	83 ec 04             	sub    $0x4,%esp
f01236b7:	68 84 bb 13 f0       	push   $0xf013bb84
f01236bc:	68 9a 07 00 00       	push   $0x79a
f01236c1:	68 5a b3 13 f0       	push   $0xf013b35a
f01236c6:	e8 3a cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01236cb:	83 ec 0c             	sub    $0xc,%esp
f01236ce:	68 b8 bb 13 f0       	push   $0xf013bbb8
f01236d3:	e8 36 d6 fd ff       	call   f0100d0e <cprintf>
f01236d8:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01236db:	83 ec 0c             	sub    $0xc,%esp
f01236de:	6a 03                	push   $0x3
f01236e0:	e8 58 99 fe ff       	call   f010d03d <sys_bypassPageFault>
f01236e5:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01236e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236ef:	e9 82 00 00 00       	jmp    f0123776 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01236f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01236f7:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01236fe:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123701:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123704:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123707:	e8 1f 99 fe ff       	call   f010d02b <sys_rcr2>
f012370c:	89 c2                	mov    %eax,%edx
f012370e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123711:	39 c2                	cmp    %eax,%edx
f0123713:	74 17                	je     f012372c <test_kfree_bestfirstfit+0x1742>
f0123715:	83 ec 04             	sub    $0x4,%esp
f0123718:	68 c0 bb 13 f0       	push   $0xf013bbc0
f012371d:	68 a9 07 00 00       	push   $0x7a9
f0123722:	68 5a b3 13 f0       	push   $0xf013b35a
f0123727:	e8 d9 ca fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012372c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012372f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123736:	89 c2                	mov    %eax,%edx
f0123738:	8b 45 80             	mov    -0x80(%ebp),%eax
f012373b:	01 d0                	add    %edx,%eax
f012373d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123740:	e8 e6 98 fe ff       	call   f010d02b <sys_rcr2>
f0123745:	89 c2                	mov    %eax,%edx
f0123747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012374a:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123751:	89 c1                	mov    %eax,%ecx
f0123753:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123756:	01 c8                	add    %ecx,%eax
f0123758:	39 c2                	cmp    %eax,%edx
f012375a:	74 17                	je     f0123773 <test_kfree_bestfirstfit+0x1789>
f012375c:	83 ec 04             	sub    $0x4,%esp
f012375f:	68 c0 bb 13 f0       	push   $0xf013bbc0
f0123764:	68 ab 07 00 00       	push   $0x7ab
f0123769:	68 5a b3 13 f0       	push   $0xf013b35a
f012376e:	e8 92 ca fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123773:	ff 45 f4             	incl   -0xc(%ebp)
f0123776:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012377a:	0f 8e 74 ff ff ff    	jle    f01236f4 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123780:	83 ec 0c             	sub    $0xc,%esp
f0123783:	6a 00                	push   $0x0
f0123785:	e8 b3 98 fe ff       	call   f010d03d <sys_bypassPageFault>
f012378a:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012378d:	83 ec 0c             	sub    $0xc,%esp
f0123790:	68 05 bc 13 f0       	push   $0xf013bc05
f0123795:	e8 74 d5 fd ff       	call   f0100d0e <cprintf>
f012379a:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012379d:	e8 fb 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237a5:	e8 1e 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01237ad:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01237b3:	83 ec 0c             	sub    $0xc,%esp
f01237b6:	50                   	push   %eax
f01237b7:	e8 94 41 fe ff       	call   f0107950 <kfree>
f01237bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237bf:	e8 04 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237c4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237c7:	74 17                	je     f01237e0 <test_kfree_bestfirstfit+0x17f6>
f01237c9:	83 ec 04             	sub    $0x4,%esp
f01237cc:	68 74 b3 13 f0       	push   $0xf013b374
f01237d1:	68 b9 07 00 00       	push   $0x7b9
f01237d6:	68 5a b3 13 f0       	push   $0xf013b35a
f01237db:	e8 25 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01237e0:	e8 b8 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237e5:	89 c2                	mov    %eax,%edx
f01237e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237ea:	39 c2                	cmp    %eax,%edx
f01237ec:	74 17                	je     f0123805 <test_kfree_bestfirstfit+0x181b>
f01237ee:	83 ec 04             	sub    $0x4,%esp
f01237f1:	68 0c bc 13 f0       	push   $0xf013bc0c
f01237f6:	68 ba 07 00 00       	push   $0x7ba
f01237fb:	68 5a b3 13 f0       	push   $0xf013b35a
f0123800:	e8 00 ca fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123805:	e8 93 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012380a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012380d:	e8 b6 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123812:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123815:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012381b:	83 ec 0c             	sub    $0xc,%esp
f012381e:	50                   	push   %eax
f012381f:	e8 2c 41 fe ff       	call   f0107950 <kfree>
f0123824:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123827:	e8 9c 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012382c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012382f:	74 17                	je     f0123848 <test_kfree_bestfirstfit+0x185e>
f0123831:	83 ec 04             	sub    $0x4,%esp
f0123834:	68 74 b3 13 f0       	push   $0xf013b374
f0123839:	68 c0 07 00 00       	push   $0x7c0
f012383e:	68 5a b3 13 f0       	push   $0xf013b35a
f0123843:	e8 bd c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123848:	e8 50 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012384d:	89 c2                	mov    %eax,%edx
f012384f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123852:	39 c2                	cmp    %eax,%edx
f0123854:	74 17                	je     f012386d <test_kfree_bestfirstfit+0x1883>
f0123856:	83 ec 04             	sub    $0x4,%esp
f0123859:	68 0c bc 13 f0       	push   $0xf013bc0c
f012385e:	68 c1 07 00 00       	push   $0x7c1
f0123863:	68 5a b3 13 f0       	push   $0xf013b35a
f0123868:	e8 98 c9 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012386d:	e8 2b 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123872:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123875:	e8 4e 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012387a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012387d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123883:	83 ec 0c             	sub    $0xc,%esp
f0123886:	50                   	push   %eax
f0123887:	e8 c4 40 fe ff       	call   f0107950 <kfree>
f012388c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012388f:	e8 34 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123894:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123897:	74 17                	je     f01238b0 <test_kfree_bestfirstfit+0x18c6>
f0123899:	83 ec 04             	sub    $0x4,%esp
f012389c:	68 74 b3 13 f0       	push   $0xf013b374
f01238a1:	68 c7 07 00 00       	push   $0x7c7
f01238a6:	68 5a b3 13 f0       	push   $0xf013b35a
f01238ab:	e8 55 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01238b0:	e8 e8 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01238b5:	89 c2                	mov    %eax,%edx
f01238b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01238ba:	39 c2                	cmp    %eax,%edx
f01238bc:	74 17                	je     f01238d5 <test_kfree_bestfirstfit+0x18eb>
f01238be:	83 ec 04             	sub    $0x4,%esp
f01238c1:	68 0c bc 13 f0       	push   $0xf013bc0c
f01238c6:	68 c8 07 00 00       	push   $0x7c8
f01238cb:	68 5a b3 13 f0       	push   $0xf013b35a
f01238d0:	e8 30 c9 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01238d5:	e8 c3 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01238da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238dd:	e8 e6 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01238e5:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01238eb:	83 ec 0c             	sub    $0xc,%esp
f01238ee:	50                   	push   %eax
f01238ef:	e8 5c 40 fe ff       	call   f0107950 <kfree>
f01238f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238f7:	e8 cc 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238ff:	74 17                	je     f0123918 <test_kfree_bestfirstfit+0x192e>
f0123901:	83 ec 04             	sub    $0x4,%esp
f0123904:	68 74 b3 13 f0       	push   $0xf013b374
f0123909:	68 ce 07 00 00       	push   $0x7ce
f012390e:	68 5a b3 13 f0       	push   $0xf013b35a
f0123913:	e8 ed c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123918:	e8 80 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012391d:	89 c2                	mov    %eax,%edx
f012391f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123922:	39 c2                	cmp    %eax,%edx
f0123924:	74 17                	je     f012393d <test_kfree_bestfirstfit+0x1953>
f0123926:	83 ec 04             	sub    $0x4,%esp
f0123929:	68 0c bc 13 f0       	push   $0xf013bc0c
f012392e:	68 cf 07 00 00       	push   $0x7cf
f0123933:	68 5a b3 13 f0       	push   $0xf013b35a
f0123938:	e8 c8 c8 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012393d:	83 ec 0c             	sub    $0xc,%esp
f0123940:	68 53 bc 13 f0       	push   $0xf013bc53
f0123945:	e8 c4 d3 fd ff       	call   f0100d0e <cprintf>
f012394a:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012394d:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123954:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012395b:	eb 48                	jmp    f01239a5 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012395d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123960:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0123965:	83 ec 04             	sub    $0x4,%esp
f0123968:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012396e:	51                   	push   %ecx
f012396f:	52                   	push   %edx
f0123970:	50                   	push   %eax
f0123971:	e8 3b 31 fe ff       	call   f0106ab1 <get_page_table>
f0123976:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123979:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012397f:	85 c0                	test   %eax,%eax
f0123981:	75 17                	jne    f012399a <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123983:	83 ec 04             	sub    $0x4,%esp
f0123986:	68 5c bc 13 f0       	push   $0xf013bc5c
f012398b:	68 dd 07 00 00       	push   $0x7dd
f0123990:	68 5a b3 13 f0       	push   $0xf013b35a
f0123995:	e8 6b c8 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012399a:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01239a1:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01239a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01239a9:	78 b2                	js     f012395d <test_kfree_bestfirstfit+0x1973>
f01239ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01239af:	7f 09                	jg     f01239ba <test_kfree_bestfirstfit+0x19d0>
f01239b1:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01239b8:	76 a3                	jbe    f012395d <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01239ba:	83 ec 0c             	sub    $0xc,%esp
f01239bd:	68 3e b5 13 f0       	push   $0xf013b53e
f01239c2:	e8 47 d3 fd ff       	call   f0100d0e <cprintf>
f01239c7:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01239ca:	83 ec 0c             	sub    $0xc,%esp
f01239cd:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01239d2:	e8 37 d3 fd ff       	call   f0100d0e <cprintf>
f01239d7:	83 c4 10             	add    $0x10,%esp

	return 1;
f01239da:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01239df:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01239e2:	5b                   	pop    %ebx
f01239e3:	5f                   	pop    %edi
f01239e4:	5d                   	pop    %ebp
f01239e5:	c3                   	ret    

f01239e6 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01239e6:	55                   	push   %ebp
f01239e7:	89 e5                	mov    %esp,%ebp
f01239e9:	57                   	push   %edi
f01239ea:	56                   	push   %esi
f01239eb:	53                   	push   %ebx
f01239ec:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01239f2:	83 ec 0c             	sub    $0xc,%esp
f01239f5:	68 9c b2 13 f0       	push   $0xf013b29c
f01239fa:	e8 0f d3 fd ff       	call   f0100d0e <cprintf>
f01239ff:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123a02:	83 ec 0c             	sub    $0xc,%esp
f0123a05:	68 cc b2 13 f0       	push   $0xf013b2cc
f0123a0a:	e8 ff d2 fd ff       	call   f0100d0e <cprintf>
f0123a0f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123a12:	83 ec 0c             	sub    $0xc,%esp
f0123a15:	68 9c b2 13 f0       	push   $0xf013b29c
f0123a1a:	e8 ef d2 fd ff       	call   f0100d0e <cprintf>
f0123a1f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123a22:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123a26:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123a2a:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123a30:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123a36:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123a3d:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123a44:	e8 54 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123a49:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123a4c:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123a52:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123a57:	b8 00 00 00 00       	mov    $0x0,%eax
f0123a5c:	89 d7                	mov    %edx,%edi
f0123a5e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123a60:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123a66:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0123a70:	89 d7                	mov    %edx,%edi
f0123a72:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123a74:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123a7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123a7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0123a84:	89 d7                	mov    %edx,%edi
f0123a86:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a88:	e8 10 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123a8d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a90:	e8 33 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a95:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123a98:	83 ec 0c             	sub    $0xc,%esp
f0123a9b:	68 00 fc 1f 00       	push   $0x1ffc00
f0123aa0:	e8 e0 3d fe ff       	call   f0107885 <kmalloc>
f0123aa5:	83 c4 10             	add    $0x10,%esp
f0123aa8:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123aae:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123ab4:	89 c1                	mov    %eax,%ecx
f0123ab6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123abd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ac0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ac5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123ac8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123acb:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ad0:	f7 75 a0             	divl   -0x60(%ebp)
f0123ad3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123ad6:	29 d0                	sub    %edx,%eax
f0123ad8:	89 c3                	mov    %eax,%ebx
f0123ada:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123ae1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123ae6:	0f b6 d0             	movzbl %al,%edx
f0123ae9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123aec:	01 d0                	add    %edx,%eax
f0123aee:	48                   	dec    %eax
f0123aef:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123af2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123afa:	f7 75 98             	divl   -0x68(%ebp)
f0123afd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123b00:	29 d0                	sub    %edx,%eax
f0123b02:	01 c3                	add    %eax,%ebx
f0123b04:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123b0b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123b10:	0f b6 c0             	movzbl %al,%eax
f0123b13:	c1 e0 04             	shl    $0x4,%eax
f0123b16:	89 c2                	mov    %eax,%edx
f0123b18:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123b1b:	01 d0                	add    %edx,%eax
f0123b1d:	48                   	dec    %eax
f0123b1e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123b21:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b29:	f7 75 90             	divl   -0x70(%ebp)
f0123b2c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123b2f:	29 d0                	sub    %edx,%eax
f0123b31:	01 d8                	add    %ebx,%eax
f0123b33:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123b38:	39 c1                	cmp    %eax,%ecx
f0123b3a:	74 17                	je     f0123b53 <test_kheap_phys_addr+0x16d>
f0123b3c:	83 ec 04             	sub    $0x4,%esp
f0123b3f:	68 40 b4 13 f0       	push   $0xf013b440
f0123b44:	68 0a 08 00 00       	push   $0x80a
f0123b49:	68 5a b3 13 f0       	push   $0xf013b35a
f0123b4e:	e8 b2 c6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b53:	e8 70 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b58:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b5b:	74 17                	je     f0123b74 <test_kheap_phys_addr+0x18e>
f0123b5d:	83 ec 04             	sub    $0x4,%esp
f0123b60:	68 74 b3 13 f0       	push   $0xf013b374
f0123b65:	68 0b 08 00 00       	push   $0x80b
f0123b6a:	68 5a b3 13 f0       	push   $0xf013b35a
f0123b6f:	e8 91 c6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b74:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b77:	e8 21 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123b7c:	29 c3                	sub    %eax,%ebx
f0123b7e:	89 d8                	mov    %ebx,%eax
f0123b80:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123b85:	74 17                	je     f0123b9e <test_kheap_phys_addr+0x1b8>
f0123b87:	83 ec 04             	sub    $0x4,%esp
f0123b8a:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123b8f:	68 0c 08 00 00       	push   $0x80c
f0123b94:	68 5a b3 13 f0       	push   $0xf013b35a
f0123b99:	e8 67 c6 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b9e:	e8 fa 8f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123ba3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ba6:	e8 1d 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123bae:	83 ec 0c             	sub    $0xc,%esp
f0123bb1:	68 00 fc 1f 00       	push   $0x1ffc00
f0123bb6:	e8 ca 3c fe ff       	call   f0107885 <kmalloc>
f0123bbb:	83 c4 10             	add    $0x10,%esp
f0123bbe:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123bc4:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123bca:	89 c1                	mov    %eax,%ecx
f0123bcc:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123bd3:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123bd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123bdb:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123bde:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123be1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123be6:	f7 75 88             	divl   -0x78(%ebp)
f0123be9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123bec:	29 d0                	sub    %edx,%eax
f0123bee:	89 c3                	mov    %eax,%ebx
f0123bf0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123bf7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123bfc:	0f b6 d0             	movzbl %al,%edx
f0123bff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123c02:	01 d0                	add    %edx,%eax
f0123c04:	48                   	dec    %eax
f0123c05:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123c0b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123c11:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c16:	f7 75 80             	divl   -0x80(%ebp)
f0123c19:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123c1f:	29 d0                	sub    %edx,%eax
f0123c21:	01 c3                	add    %eax,%ebx
f0123c23:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123c2a:	10 00 00 
f0123c2d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123c32:	0f b6 c0             	movzbl %al,%eax
f0123c35:	c1 e0 04             	shl    $0x4,%eax
f0123c38:	89 c2                	mov    %eax,%edx
f0123c3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123c40:	01 d0                	add    %edx,%eax
f0123c42:	48                   	dec    %eax
f0123c43:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123c49:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c54:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123c5a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123c60:	29 d0                	sub    %edx,%eax
f0123c62:	01 d8                	add    %ebx,%eax
f0123c64:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123c69:	39 c1                	cmp    %eax,%ecx
f0123c6b:	74 17                	je     f0123c84 <test_kheap_phys_addr+0x29e>
f0123c6d:	83 ec 04             	sub    $0x4,%esp
f0123c70:	68 40 b4 13 f0       	push   $0xf013b440
f0123c75:	68 12 08 00 00       	push   $0x812
f0123c7a:	68 5a b3 13 f0       	push   $0xf013b35a
f0123c7f:	e8 81 c5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c84:	e8 3f 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c89:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c8c:	74 17                	je     f0123ca5 <test_kheap_phys_addr+0x2bf>
f0123c8e:	83 ec 04             	sub    $0x4,%esp
f0123c91:	68 74 b3 13 f0       	push   $0xf013b374
f0123c96:	68 13 08 00 00       	push   $0x813
f0123c9b:	68 5a b3 13 f0       	push   $0xf013b35a
f0123ca0:	e8 60 c5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ca5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123ca8:	e8 f0 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123cad:	29 c3                	sub    %eax,%ebx
f0123caf:	89 d8                	mov    %ebx,%eax
f0123cb1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123cb6:	74 17                	je     f0123ccf <test_kheap_phys_addr+0x2e9>
f0123cb8:	83 ec 04             	sub    $0x4,%esp
f0123cbb:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123cc0:	68 14 08 00 00       	push   $0x814
f0123cc5:	68 5a b3 13 f0       	push   $0xf013b35a
f0123cca:	e8 36 c5 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ccf:	e8 c9 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123cd4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cd7:	e8 ec 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123cdc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123cdf:	83 ec 0c             	sub    $0xc,%esp
f0123ce2:	68 00 08 00 00       	push   $0x800
f0123ce7:	e8 99 3b fe ff       	call   f0107885 <kmalloc>
f0123cec:	83 c4 10             	add    $0x10,%esp
f0123cef:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123cf5:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0123cfb:	89 c1                	mov    %eax,%ecx
f0123cfd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123d04:	10 00 00 
f0123d07:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123d0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d12:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123d18:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d23:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123d29:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123d2f:	29 d0                	sub    %edx,%eax
f0123d31:	89 c3                	mov    %eax,%ebx
f0123d33:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123d3a:	10 00 00 
f0123d3d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123d42:	0f b6 d0             	movzbl %al,%edx
f0123d45:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123d4b:	01 d0                	add    %edx,%eax
f0123d4d:	48                   	dec    %eax
f0123d4e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123d54:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123d5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d5f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123d65:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123d6b:	29 d0                	sub    %edx,%eax
f0123d6d:	01 c3                	add    %eax,%ebx
f0123d6f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123d76:	10 00 00 
f0123d79:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123d7e:	0f b6 c0             	movzbl %al,%eax
f0123d81:	c1 e0 04             	shl    $0x4,%eax
f0123d84:	89 c2                	mov    %eax,%edx
f0123d86:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123d8c:	01 d0                	add    %edx,%eax
f0123d8e:	48                   	dec    %eax
f0123d8f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123d95:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123d9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123da0:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123da6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123dac:	29 d0                	sub    %edx,%eax
f0123dae:	01 d8                	add    %ebx,%eax
f0123db0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123db5:	39 c1                	cmp    %eax,%ecx
f0123db7:	74 17                	je     f0123dd0 <test_kheap_phys_addr+0x3ea>
f0123db9:	83 ec 04             	sub    $0x4,%esp
f0123dbc:	68 40 b4 13 f0       	push   $0xf013b440
f0123dc1:	68 1a 08 00 00       	push   $0x81a
f0123dc6:	68 5a b3 13 f0       	push   $0xf013b35a
f0123dcb:	e8 35 c4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123dd0:	e8 f3 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123dd5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123dd8:	74 17                	je     f0123df1 <test_kheap_phys_addr+0x40b>
f0123dda:	83 ec 04             	sub    $0x4,%esp
f0123ddd:	68 74 b3 13 f0       	push   $0xf013b374
f0123de2:	68 1b 08 00 00       	push   $0x81b
f0123de7:	68 5a b3 13 f0       	push   $0xf013b35a
f0123dec:	e8 14 c4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123df1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123df4:	e8 a4 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123df9:	29 c3                	sub    %eax,%ebx
f0123dfb:	89 d8                	mov    %ebx,%eax
f0123dfd:	83 f8 01             	cmp    $0x1,%eax
f0123e00:	74 17                	je     f0123e19 <test_kheap_phys_addr+0x433>
f0123e02:	83 ec 04             	sub    $0x4,%esp
f0123e05:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123e0a:	68 1c 08 00 00       	push   $0x81c
f0123e0f:	68 5a b3 13 f0       	push   $0xf013b35a
f0123e14:	e8 ec c3 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123e19:	e8 7f 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123e1e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e21:	e8 a2 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e26:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123e29:	83 ec 0c             	sub    $0xc,%esp
f0123e2c:	68 00 08 00 00       	push   $0x800
f0123e31:	e8 4f 3a fe ff       	call   f0107885 <kmalloc>
f0123e36:	83 c4 10             	add    $0x10,%esp
f0123e39:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e3f:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123e45:	89 c1                	mov    %eax,%ecx
f0123e47:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123e4e:	10 00 00 
f0123e51:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123e57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e5c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123e62:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123e68:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e6d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123e73:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123e79:	29 d0                	sub    %edx,%eax
f0123e7b:	89 c3                	mov    %eax,%ebx
f0123e7d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123e84:	10 00 00 
f0123e87:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123e8c:	0f b6 d0             	movzbl %al,%edx
f0123e8f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123e95:	01 d0                	add    %edx,%eax
f0123e97:	48                   	dec    %eax
f0123e98:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123e9e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123ea4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ea9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123eaf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123eb5:	29 d0                	sub    %edx,%eax
f0123eb7:	01 c3                	add    %eax,%ebx
f0123eb9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123ec0:	10 00 00 
f0123ec3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123ec8:	0f b6 c0             	movzbl %al,%eax
f0123ecb:	c1 e0 04             	shl    $0x4,%eax
f0123ece:	89 c2                	mov    %eax,%edx
f0123ed0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123ed6:	01 d0                	add    %edx,%eax
f0123ed8:	48                   	dec    %eax
f0123ed9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123edf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123ee5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eea:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123ef0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123ef6:	29 d0                	sub    %edx,%eax
f0123ef8:	01 d8                	add    %ebx,%eax
f0123efa:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123eff:	39 c1                	cmp    %eax,%ecx
f0123f01:	74 17                	je     f0123f1a <test_kheap_phys_addr+0x534>
f0123f03:	83 ec 04             	sub    $0x4,%esp
f0123f06:	68 40 b4 13 f0       	push   $0xf013b440
f0123f0b:	68 22 08 00 00       	push   $0x822
f0123f10:	68 5a b3 13 f0       	push   $0xf013b35a
f0123f15:	e8 eb c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f1a:	e8 a9 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f1f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123f22:	74 17                	je     f0123f3b <test_kheap_phys_addr+0x555>
f0123f24:	83 ec 04             	sub    $0x4,%esp
f0123f27:	68 74 b3 13 f0       	push   $0xf013b374
f0123f2c:	68 23 08 00 00       	push   $0x823
f0123f31:	68 5a b3 13 f0       	push   $0xf013b35a
f0123f36:	e8 ca c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f3b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123f3e:	e8 5a 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f43:	29 c3                	sub    %eax,%ebx
f0123f45:	89 d8                	mov    %ebx,%eax
f0123f47:	83 f8 01             	cmp    $0x1,%eax
f0123f4a:	74 17                	je     f0123f63 <test_kheap_phys_addr+0x57d>
f0123f4c:	83 ec 04             	sub    $0x4,%esp
f0123f4f:	68 dc b3 13 f0       	push   $0xf013b3dc
f0123f54:	68 24 08 00 00       	push   $0x824
f0123f59:	68 5a b3 13 f0       	push   $0xf013b35a
f0123f5e:	e8 a2 c2 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f63:	e8 35 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f68:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f6b:	e8 58 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f70:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123f73:	83 ec 0c             	sub    $0xc,%esp
f0123f76:	68 00 1c 00 00       	push   $0x1c00
f0123f7b:	e8 05 39 fe ff       	call   f0107885 <kmalloc>
f0123f80:	83 c4 10             	add    $0x10,%esp
f0123f83:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f89:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123f8f:	89 c1                	mov    %eax,%ecx
f0123f91:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123f98:	10 00 00 
f0123f9b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123fa1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fa6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123fac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123fb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fb7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123fbd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123fc3:	29 d0                	sub    %edx,%eax
f0123fc5:	89 c3                	mov    %eax,%ebx
f0123fc7:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123fce:	10 00 00 
f0123fd1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123fd6:	0f b6 d0             	movzbl %al,%edx
f0123fd9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123fdf:	01 d0                	add    %edx,%eax
f0123fe1:	48                   	dec    %eax
f0123fe2:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123fe8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123fee:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ff3:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123ff9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123fff:	29 d0                	sub    %edx,%eax
f0124001:	01 c3                	add    %eax,%ebx
f0124003:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012400a:	10 00 00 
f012400d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124012:	0f b6 c0             	movzbl %al,%eax
f0124015:	c1 e0 04             	shl    $0x4,%eax
f0124018:	89 c2                	mov    %eax,%edx
f012401a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124020:	01 d0                	add    %edx,%eax
f0124022:	48                   	dec    %eax
f0124023:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124029:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012402f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124034:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012403a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124040:	29 d0                	sub    %edx,%eax
f0124042:	01 d8                	add    %ebx,%eax
f0124044:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124049:	39 c1                	cmp    %eax,%ecx
f012404b:	74 17                	je     f0124064 <test_kheap_phys_addr+0x67e>
f012404d:	83 ec 04             	sub    $0x4,%esp
f0124050:	68 40 b4 13 f0       	push   $0xf013b440
f0124055:	68 2a 08 00 00       	push   $0x82a
f012405a:	68 5a b3 13 f0       	push   $0xf013b35a
f012405f:	e8 a1 c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124064:	e8 5f fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124069:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012406c:	74 17                	je     f0124085 <test_kheap_phys_addr+0x69f>
f012406e:	83 ec 04             	sub    $0x4,%esp
f0124071:	68 74 b3 13 f0       	push   $0xf013b374
f0124076:	68 2b 08 00 00       	push   $0x82b
f012407b:	68 5a b3 13 f0       	push   $0xf013b35a
f0124080:	e8 80 c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124085:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124088:	e8 10 8b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012408d:	29 c3                	sub    %eax,%ebx
f012408f:	89 d8                	mov    %ebx,%eax
f0124091:	83 f8 02             	cmp    $0x2,%eax
f0124094:	74 17                	je     f01240ad <test_kheap_phys_addr+0x6c7>
f0124096:	83 ec 04             	sub    $0x4,%esp
f0124099:	68 dc b3 13 f0       	push   $0xf013b3dc
f012409e:	68 2c 08 00 00       	push   $0x82c
f01240a3:	68 5a b3 13 f0       	push   $0xf013b35a
f01240a8:	e8 58 c1 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01240ad:	e8 eb 8a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01240b2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240b5:	e8 0e fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01240ba:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01240bd:	83 ec 0c             	sub    $0xc,%esp
f01240c0:	68 00 fc 2f 00       	push   $0x2ffc00
f01240c5:	e8 bb 37 fe ff       	call   f0107885 <kmalloc>
f01240ca:	83 c4 10             	add    $0x10,%esp
f01240cd:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240d3:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01240d9:	89 c1                	mov    %eax,%ecx
f01240db:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01240e2:	10 00 00 
f01240e5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01240eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240f0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01240f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01240fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124101:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124107:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012410d:	29 d0                	sub    %edx,%eax
f012410f:	89 c3                	mov    %eax,%ebx
f0124111:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124118:	10 00 00 
f012411b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124120:	0f b6 d0             	movzbl %al,%edx
f0124123:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124129:	01 d0                	add    %edx,%eax
f012412b:	48                   	dec    %eax
f012412c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124132:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124138:	ba 00 00 00 00       	mov    $0x0,%edx
f012413d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0124143:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124149:	29 d0                	sub    %edx,%eax
f012414b:	01 c3                	add    %eax,%ebx
f012414d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0124154:	10 00 00 
f0124157:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012415c:	0f b6 c0             	movzbl %al,%eax
f012415f:	c1 e0 04             	shl    $0x4,%eax
f0124162:	89 c2                	mov    %eax,%edx
f0124164:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012416a:	01 d0                	add    %edx,%eax
f012416c:	48                   	dec    %eax
f012416d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0124173:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124179:	ba 00 00 00 00       	mov    $0x0,%edx
f012417e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0124184:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012418a:	29 d0                	sub    %edx,%eax
f012418c:	01 d8                	add    %ebx,%eax
f012418e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124193:	39 c1                	cmp    %eax,%ecx
f0124195:	74 17                	je     f01241ae <test_kheap_phys_addr+0x7c8>
f0124197:	83 ec 04             	sub    $0x4,%esp
f012419a:	68 40 b4 13 f0       	push   $0xf013b440
f012419f:	68 32 08 00 00       	push   $0x832
f01241a4:	68 5a b3 13 f0       	push   $0xf013b35a
f01241a9:	e8 57 c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241ae:	e8 15 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01241b3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01241b6:	74 17                	je     f01241cf <test_kheap_phys_addr+0x7e9>
f01241b8:	83 ec 04             	sub    $0x4,%esp
f01241bb:	68 74 b3 13 f0       	push   $0xf013b374
f01241c0:	68 33 08 00 00       	push   $0x833
f01241c5:	68 5a b3 13 f0       	push   $0xf013b35a
f01241ca:	e8 36 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241cf:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01241d2:	e8 c6 89 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01241d7:	29 c3                	sub    %eax,%ebx
f01241d9:	89 d8                	mov    %ebx,%eax
f01241db:	3d 00 03 00 00       	cmp    $0x300,%eax
f01241e0:	74 17                	je     f01241f9 <test_kheap_phys_addr+0x813>
f01241e2:	83 ec 04             	sub    $0x4,%esp
f01241e5:	68 dc b3 13 f0       	push   $0xf013b3dc
f01241ea:	68 34 08 00 00       	push   $0x834
f01241ef:	68 5a b3 13 f0       	push   $0xf013b35a
f01241f4:	e8 0c c0 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01241f9:	e8 9f 89 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01241fe:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124201:	e8 c2 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124206:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124209:	83 ec 0c             	sub    $0xc,%esp
f012420c:	68 00 fc 5f 00       	push   $0x5ffc00
f0124211:	e8 6f 36 fe ff       	call   f0107885 <kmalloc>
f0124216:	83 c4 10             	add    $0x10,%esp
f0124219:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012421f:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124225:	89 c1                	mov    %eax,%ecx
f0124227:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012422e:	10 00 00 
f0124231:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124237:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012423c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124242:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124248:	ba 00 00 00 00       	mov    $0x0,%edx
f012424d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0124253:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124259:	29 d0                	sub    %edx,%eax
f012425b:	89 c3                	mov    %eax,%ebx
f012425d:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124264:	10 00 00 
f0124267:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012426c:	0f b6 d0             	movzbl %al,%edx
f012426f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124275:	01 d0                	add    %edx,%eax
f0124277:	48                   	dec    %eax
f0124278:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012427e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124284:	ba 00 00 00 00       	mov    $0x0,%edx
f0124289:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012428f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124295:	29 d0                	sub    %edx,%eax
f0124297:	01 c3                	add    %eax,%ebx
f0124299:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01242a0:	10 00 00 
f01242a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01242a8:	0f b6 c0             	movzbl %al,%eax
f01242ab:	c1 e0 04             	shl    $0x4,%eax
f01242ae:	89 c2                	mov    %eax,%edx
f01242b0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01242b6:	01 d0                	add    %edx,%eax
f01242b8:	48                   	dec    %eax
f01242b9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01242bf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01242c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01242ca:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01242d0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01242d6:	29 d0                	sub    %edx,%eax
f01242d8:	01 d8                	add    %ebx,%eax
f01242da:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01242df:	39 c1                	cmp    %eax,%ecx
f01242e1:	74 17                	je     f01242fa <test_kheap_phys_addr+0x914>
f01242e3:	83 ec 04             	sub    $0x4,%esp
f01242e6:	68 40 b4 13 f0       	push   $0xf013b440
f01242eb:	68 3a 08 00 00       	push   $0x83a
f01242f0:	68 5a b3 13 f0       	push   $0xf013b35a
f01242f5:	e8 0b bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242fa:	e8 c9 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01242ff:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124302:	74 17                	je     f012431b <test_kheap_phys_addr+0x935>
f0124304:	83 ec 04             	sub    $0x4,%esp
f0124307:	68 74 b3 13 f0       	push   $0xf013b374
f012430c:	68 3b 08 00 00       	push   $0x83b
f0124311:	68 5a b3 13 f0       	push   $0xf013b35a
f0124316:	e8 ea be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012431b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012431e:	e8 7a 88 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124323:	29 c3                	sub    %eax,%ebx
f0124325:	89 d8                	mov    %ebx,%eax
f0124327:	3d 00 06 00 00       	cmp    $0x600,%eax
f012432c:	74 17                	je     f0124345 <test_kheap_phys_addr+0x95f>
f012432e:	83 ec 04             	sub    $0x4,%esp
f0124331:	68 dc b3 13 f0       	push   $0xf013b3dc
f0124336:	68 3c 08 00 00       	push   $0x83c
f012433b:	68 5a b3 13 f0       	push   $0xf013b35a
f0124340:	e8 c0 be fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124345:	e8 53 88 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012434a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012434d:	e8 76 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124352:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124355:	83 ec 0c             	sub    $0xc,%esp
f0124358:	68 00 38 00 00       	push   $0x3800
f012435d:	e8 23 35 fe ff       	call   f0107885 <kmalloc>
f0124362:	83 c4 10             	add    $0x10,%esp
f0124365:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012436b:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124371:	89 c1                	mov    %eax,%ecx
f0124373:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012437a:	10 00 00 
f012437d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124383:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124388:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012438e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124394:	ba 00 00 00 00       	mov    $0x0,%edx
f0124399:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012439f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01243a5:	29 d0                	sub    %edx,%eax
f01243a7:	89 c3                	mov    %eax,%ebx
f01243a9:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01243b0:	10 00 00 
f01243b3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01243b8:	0f b6 d0             	movzbl %al,%edx
f01243bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01243c1:	01 d0                	add    %edx,%eax
f01243c3:	48                   	dec    %eax
f01243c4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01243ca:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01243d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01243d5:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01243db:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01243e1:	29 d0                	sub    %edx,%eax
f01243e3:	01 c3                	add    %eax,%ebx
f01243e5:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01243ec:	10 00 00 
f01243ef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01243f4:	0f b6 c0             	movzbl %al,%eax
f01243f7:	c1 e0 04             	shl    $0x4,%eax
f01243fa:	89 c2                	mov    %eax,%edx
f01243fc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124402:	01 d0                	add    %edx,%eax
f0124404:	48                   	dec    %eax
f0124405:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012440b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124411:	ba 00 00 00 00       	mov    $0x0,%edx
f0124416:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012441c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124422:	29 d0                	sub    %edx,%eax
f0124424:	01 d8                	add    %ebx,%eax
f0124426:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012442b:	39 c1                	cmp    %eax,%ecx
f012442d:	74 17                	je     f0124446 <test_kheap_phys_addr+0xa60>
f012442f:	83 ec 04             	sub    $0x4,%esp
f0124432:	68 40 b4 13 f0       	push   $0xf013b440
f0124437:	68 42 08 00 00       	push   $0x842
f012443c:	68 5a b3 13 f0       	push   $0xf013b35a
f0124441:	e8 bf bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124446:	e8 7d f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012444b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012444e:	74 17                	je     f0124467 <test_kheap_phys_addr+0xa81>
f0124450:	83 ec 04             	sub    $0x4,%esp
f0124453:	68 74 b3 13 f0       	push   $0xf013b374
f0124458:	68 43 08 00 00       	push   $0x843
f012445d:	68 5a b3 13 f0       	push   $0xf013b35a
f0124462:	e8 9e bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124467:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012446a:	e8 2e 87 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012446f:	29 c3                	sub    %eax,%ebx
f0124471:	89 d8                	mov    %ebx,%eax
f0124473:	83 f8 04             	cmp    $0x4,%eax
f0124476:	74 17                	je     f012448f <test_kheap_phys_addr+0xaa9>
f0124478:	83 ec 04             	sub    $0x4,%esp
f012447b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0124480:	68 44 08 00 00       	push   $0x844
f0124485:	68 5a b3 13 f0       	push   $0xf013b35a
f012448a:	e8 76 bd fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f012448f:	89 e0                	mov    %esp,%eax
f0124491:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124493:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012449a:	10 00 00 
f012449d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01244a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244a8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01244ae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01244b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01244bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01244c5:	29 d0                	sub    %edx,%eax
f01244c7:	89 c1                	mov    %eax,%ecx
f01244c9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01244d0:	10 00 00 
f01244d3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01244d8:	0f b6 d0             	movzbl %al,%edx
f01244db:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01244e1:	01 d0                	add    %edx,%eax
f01244e3:	48                   	dec    %eax
f01244e4:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01244ea:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01244f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f5:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01244fb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124501:	29 d0                	sub    %edx,%eax
f0124503:	01 c1                	add    %eax,%ecx
f0124505:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012450c:	10 00 00 
f012450f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124514:	0f b6 c0             	movzbl %al,%eax
f0124517:	c1 e0 04             	shl    $0x4,%eax
f012451a:	89 c2                	mov    %eax,%edx
f012451c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124522:	01 d0                	add    %edx,%eax
f0124524:	48                   	dec    %eax
f0124525:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012452b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124531:	ba 00 00 00 00       	mov    $0x0,%edx
f0124536:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012453c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124542:	29 d0                	sub    %edx,%eax
f0124544:	01 c8                	add    %ecx,%eax
f0124546:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012454b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124551:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124558:	10 00 00 
f012455b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124561:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124566:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012456c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124572:	ba 00 00 00 00       	mov    $0x0,%edx
f0124577:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012457d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124583:	29 d0                	sub    %edx,%eax
f0124585:	89 c1                	mov    %eax,%ecx
f0124587:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012458e:	10 00 00 
f0124591:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124596:	0f b6 d0             	movzbl %al,%edx
f0124599:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012459f:	01 d0                	add    %edx,%eax
f01245a1:	48                   	dec    %eax
f01245a2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01245a8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01245ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01245b3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01245b9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01245bf:	29 d0                	sub    %edx,%eax
f01245c1:	01 c1                	add    %eax,%ecx
f01245c3:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01245ca:	10 00 00 
f01245cd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01245d2:	0f b6 c0             	movzbl %al,%eax
f01245d5:	c1 e0 04             	shl    $0x4,%eax
f01245d8:	89 c2                	mov    %eax,%edx
f01245da:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01245e0:	01 d0                	add    %edx,%eax
f01245e2:	48                   	dec    %eax
f01245e3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01245e9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01245ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01245f4:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01245fa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124600:	29 d0                	sub    %edx,%eax
f0124602:	01 c8                	add    %ecx,%eax
f0124604:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124609:	c1 e8 0c             	shr    $0xc,%eax
f012460c:	89 c2                	mov    %eax,%edx
f012460e:	4a                   	dec    %edx
f012460f:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124615:	c1 e0 02             	shl    $0x2,%eax
f0124618:	8d 50 03             	lea    0x3(%eax),%edx
f012461b:	b8 10 00 00 00       	mov    $0x10,%eax
f0124620:	48                   	dec    %eax
f0124621:	01 d0                	add    %edx,%eax
f0124623:	bf 10 00 00 00       	mov    $0x10,%edi
f0124628:	ba 00 00 00 00       	mov    $0x0,%edx
f012462d:	f7 f7                	div    %edi
f012462f:	6b c0 10             	imul   $0x10,%eax,%eax
f0124632:	29 c4                	sub    %eax,%esp
f0124634:	89 e0                	mov    %esp,%eax
f0124636:	83 c0 03             	add    $0x3,%eax
f0124639:	c1 e8 02             	shr    $0x2,%eax
f012463c:	c1 e0 02             	shl    $0x2,%eax
f012463f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124645:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012464c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124653:	10 00 00 
f0124656:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012465c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124661:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124667:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012466d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124672:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124678:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012467e:	29 d0                	sub    %edx,%eax
f0124680:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124685:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124688:	eb 29                	jmp    f01246b3 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f012468a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012468d:	8d 43 01             	lea    0x1(%ebx),%eax
f0124690:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124693:	83 ec 0c             	sub    $0xc,%esp
f0124696:	ff 75 e0             	pushl  -0x20(%ebp)
f0124699:	e8 05 34 fe ff       	call   f0107aa3 <kheap_physical_address>
f012469e:	83 c4 10             	add    $0x10,%esp
f01246a1:	89 c2                	mov    %eax,%edx
f01246a3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01246a9:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01246ac:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01246b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01246b6:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01246bc:	72 cc                	jb     f012468a <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01246be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01246c1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01246c7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01246ce:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01246d5:	10 00 00 
f01246d8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01246de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246e3:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01246e9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01246ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01246f4:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01246fa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124700:	29 d0                	sub    %edx,%eax
f0124702:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124707:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012470a:	e9 ab 00 00 00       	jmp    f01247ba <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012470f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124714:	83 ec 04             	sub    $0x4,%esp
f0124717:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f012471d:	52                   	push   %edx
f012471e:	ff 75 e0             	pushl  -0x20(%ebp)
f0124721:	50                   	push   %eax
f0124722:	e8 8a 23 fe ff       	call   f0106ab1 <get_page_table>
f0124727:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012472a:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124730:	85 c0                	test   %eax,%eax
f0124732:	75 17                	jne    f012474b <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124734:	83 ec 04             	sub    $0x4,%esp
f0124737:	68 fc bc 13 f0       	push   $0xf013bcfc
f012473c:	68 59 08 00 00       	push   $0x859
f0124741:	68 5a b3 13 f0       	push   $0xf013b35a
f0124746:	e8 ba ba fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012474b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012474e:	c1 e8 0c             	shr    $0xc,%eax
f0124751:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124756:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124759:	eb 4b                	jmp    f01247a6 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012475b:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124761:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124764:	c1 e2 02             	shl    $0x2,%edx
f0124767:	01 d0                	add    %edx,%eax
f0124769:	8b 00                	mov    (%eax),%eax
f012476b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124770:	89 c1                	mov    %eax,%ecx
f0124772:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124778:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012477b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012477e:	39 c1                	cmp    %eax,%ecx
f0124780:	74 17                	je     f0124799 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124782:	83 ec 04             	sub    $0x4,%esp
f0124785:	68 55 bd 13 f0       	push   $0xf013bd55
f012478a:	68 60 08 00 00       	push   $0x860
f012478f:	68 5a b3 13 f0       	push   $0xf013b35a
f0124794:	e8 6c ba fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124799:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01247a0:	ff 45 dc             	incl   -0x24(%ebp)
f01247a3:	ff 45 e4             	incl   -0x1c(%ebp)
f01247a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247a9:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01247af:	7d 09                	jge    f01247ba <test_kheap_phys_addr+0xdd4>
f01247b1:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01247b8:	7e a1                	jle    f012475b <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01247ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01247bd:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01247c3:	0f 82 46 ff ff ff    	jb     f012470f <test_kheap_phys_addr+0xd29>
f01247c9:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01247cb:	83 ec 0c             	sub    $0xc,%esp
f01247ce:	68 74 bd 13 f0       	push   $0xf013bd74
f01247d3:	e8 36 c5 fd ff       	call   f0100d0e <cprintf>
f01247d8:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01247db:	e8 bd 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01247e0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01247e6:	e8 dd f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01247eb:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f01247f1:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01247f7:	83 ec 0c             	sub    $0xc,%esp
f01247fa:	50                   	push   %eax
f01247fb:	e8 50 31 fe ff       	call   f0107950 <kfree>
f0124800:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124803:	e8 c0 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124808:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012480e:	74 17                	je     f0124827 <test_kheap_phys_addr+0xe41>
f0124810:	83 ec 04             	sub    $0x4,%esp
f0124813:	68 74 b3 13 f0       	push   $0xf013b374
f0124818:	68 6e 08 00 00       	push   $0x86e
f012481d:	68 5a b3 13 f0       	push   $0xf013b35a
f0124822:	e8 de b9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124827:	e8 71 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012482c:	89 c2                	mov    %eax,%edx
f012482e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124834:	29 c2                	sub    %eax,%edx
f0124836:	89 d0                	mov    %edx,%eax
f0124838:	3d 00 02 00 00       	cmp    $0x200,%eax
f012483d:	74 17                	je     f0124856 <test_kheap_phys_addr+0xe70>
f012483f:	83 ec 04             	sub    $0x4,%esp
f0124842:	68 e4 ba 13 f0       	push   $0xf013bae4
f0124847:	68 6f 08 00 00       	push   $0x86f
f012484c:	68 5a b3 13 f0       	push   $0xf013b35a
f0124851:	e8 af b9 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124856:	e8 42 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012485b:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124861:	e8 62 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124866:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f012486c:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124872:	83 ec 0c             	sub    $0xc,%esp
f0124875:	50                   	push   %eax
f0124876:	e8 d5 30 fe ff       	call   f0107950 <kfree>
f012487b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012487e:	e8 45 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124883:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124889:	74 17                	je     f01248a2 <test_kheap_phys_addr+0xebc>
f012488b:	83 ec 04             	sub    $0x4,%esp
f012488e:	68 74 b3 13 f0       	push   $0xf013b374
f0124893:	68 75 08 00 00       	push   $0x875
f0124898:	68 5a b3 13 f0       	push   $0xf013b35a
f012489d:	e8 63 b9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01248a2:	e8 f6 82 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01248a7:	89 c2                	mov    %eax,%edx
f01248a9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01248af:	29 c2                	sub    %eax,%edx
f01248b1:	89 d0                	mov    %edx,%eax
f01248b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01248b8:	74 17                	je     f01248d1 <test_kheap_phys_addr+0xeeb>
f01248ba:	83 ec 04             	sub    $0x4,%esp
f01248bd:	68 e4 ba 13 f0       	push   $0xf013bae4
f01248c2:	68 76 08 00 00       	push   $0x876
f01248c7:	68 5a b3 13 f0       	push   $0xf013b35a
f01248cc:	e8 34 b9 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01248d1:	e8 c7 82 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01248d6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248dc:	e8 e7 f4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01248e1:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01248e7:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01248ed:	83 ec 0c             	sub    $0xc,%esp
f01248f0:	50                   	push   %eax
f01248f1:	e8 5a 30 fe ff       	call   f0107950 <kfree>
f01248f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248f9:	e8 ca f4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01248fe:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124904:	74 17                	je     f012491d <test_kheap_phys_addr+0xf37>
f0124906:	83 ec 04             	sub    $0x4,%esp
f0124909:	68 74 b3 13 f0       	push   $0xf013b374
f012490e:	68 7c 08 00 00       	push   $0x87c
f0124913:	68 5a b3 13 f0       	push   $0xf013b35a
f0124918:	e8 e8 b8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012491d:	e8 7b 82 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124922:	89 c2                	mov    %eax,%edx
f0124924:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012492a:	29 c2                	sub    %eax,%edx
f012492c:	89 d0                	mov    %edx,%eax
f012492e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124933:	74 17                	je     f012494c <test_kheap_phys_addr+0xf66>
f0124935:	83 ec 04             	sub    $0x4,%esp
f0124938:	68 e4 ba 13 f0       	push   $0xf013bae4
f012493d:	68 7d 08 00 00       	push   $0x87d
f0124942:	68 5a b3 13 f0       	push   $0xf013b35a
f0124947:	e8 b9 b8 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f012494c:	89 e0                	mov    %esp,%eax
f012494e:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124950:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124957:	10 00 00 
f012495a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124960:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124965:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012496b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124971:	ba 00 00 00 00       	mov    $0x0,%edx
f0124976:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012497c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124982:	29 d0                	sub    %edx,%eax
f0124984:	89 c1                	mov    %eax,%ecx
f0124986:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012498d:	10 00 00 
f0124990:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124995:	0f b6 d0             	movzbl %al,%edx
f0124998:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012499e:	01 d0                	add    %edx,%eax
f01249a0:	48                   	dec    %eax
f01249a1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01249a7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01249ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01249b2:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01249b8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01249be:	29 d0                	sub    %edx,%eax
f01249c0:	01 c1                	add    %eax,%ecx
f01249c2:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01249c9:	10 00 00 
f01249cc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01249d1:	0f b6 c0             	movzbl %al,%eax
f01249d4:	c1 e0 04             	shl    $0x4,%eax
f01249d7:	89 c2                	mov    %eax,%edx
f01249d9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01249df:	01 d0                	add    %edx,%eax
f01249e1:	48                   	dec    %eax
f01249e2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01249e8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01249ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01249f3:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01249f9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01249ff:	29 d0                	sub    %edx,%eax
f0124a01:	01 c8                	add    %ecx,%eax
f0124a03:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124a08:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124a0e:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124a15:	10 00 00 
f0124a18:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124a1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a23:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124a29:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124a2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a34:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124a3a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124a40:	29 d0                	sub    %edx,%eax
f0124a42:	89 c1                	mov    %eax,%ecx
f0124a44:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124a4b:	10 00 00 
f0124a4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124a53:	0f b6 d0             	movzbl %al,%edx
f0124a56:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124a5c:	01 d0                	add    %edx,%eax
f0124a5e:	48                   	dec    %eax
f0124a5f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124a65:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124a6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a70:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124a76:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124a7c:	29 d0                	sub    %edx,%eax
f0124a7e:	01 c1                	add    %eax,%ecx
f0124a80:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124a87:	10 00 00 
f0124a8a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124a8f:	0f b6 c0             	movzbl %al,%eax
f0124a92:	c1 e0 04             	shl    $0x4,%eax
f0124a95:	89 c2                	mov    %eax,%edx
f0124a97:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124a9d:	01 d0                	add    %edx,%eax
f0124a9f:	48                   	dec    %eax
f0124aa0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124aa6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124aac:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ab1:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124ab7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124abd:	29 d0                	sub    %edx,%eax
f0124abf:	01 c8                	add    %ecx,%eax
f0124ac1:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124ac6:	c1 e8 0c             	shr    $0xc,%eax
f0124ac9:	89 c2                	mov    %eax,%edx
f0124acb:	4a                   	dec    %edx
f0124acc:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124ad2:	c1 e0 02             	shl    $0x2,%eax
f0124ad5:	8d 50 03             	lea    0x3(%eax),%edx
f0124ad8:	b8 10 00 00 00       	mov    $0x10,%eax
f0124add:	48                   	dec    %eax
f0124ade:	01 d0                	add    %edx,%eax
f0124ae0:	bf 10 00 00 00       	mov    $0x10,%edi
f0124ae5:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aea:	f7 f7                	div    %edi
f0124aec:	6b c0 10             	imul   $0x10,%eax,%eax
f0124aef:	29 c4                	sub    %eax,%esp
f0124af1:	89 e0                	mov    %esp,%eax
f0124af3:	83 c0 03             	add    $0x3,%eax
f0124af6:	c1 e8 02             	shr    $0x2,%eax
f0124af9:	c1 e0 02             	shl    $0x2,%eax
f0124afc:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124b02:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124b09:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124b10:	10 00 00 
f0124b13:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124b19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b1e:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124b24:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124b2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b2f:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124b35:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124b3b:	29 d0                	sub    %edx,%eax
f0124b3d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124b42:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b45:	eb 29                	jmp    f0124b70 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124b47:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124b4a:	8d 43 01             	lea    0x1(%ebx),%eax
f0124b4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124b50:	83 ec 0c             	sub    $0xc,%esp
f0124b53:	ff 75 d8             	pushl  -0x28(%ebp)
f0124b56:	e8 48 2f fe ff       	call   f0107aa3 <kheap_physical_address>
f0124b5b:	83 c4 10             	add    $0x10,%esp
f0124b5e:	89 c2                	mov    %eax,%edx
f0124b60:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124b66:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124b69:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124b70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124b73:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124b79:	72 cc                	jb     f0124b47 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124b7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124b7e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124b84:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124b8b:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124b92:	10 00 00 
f0124b95:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124b9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ba0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124ba6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bb1:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124bb7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124bbd:	29 d0                	sub    %edx,%eax
f0124bbf:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124bc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124bc7:	e9 ab 00 00 00       	jmp    f0124c77 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124bcc:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124bd1:	83 ec 04             	sub    $0x4,%esp
f0124bd4:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124bda:	52                   	push   %edx
f0124bdb:	ff 75 d8             	pushl  -0x28(%ebp)
f0124bde:	50                   	push   %eax
f0124bdf:	e8 cd 1e fe ff       	call   f0106ab1 <get_page_table>
f0124be4:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124be7:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124bed:	85 c0                	test   %eax,%eax
f0124bef:	75 17                	jne    f0124c08 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124bf1:	83 ec 04             	sub    $0x4,%esp
f0124bf4:	68 fc bc 13 f0       	push   $0xf013bcfc
f0124bf9:	68 93 08 00 00       	push   $0x893
f0124bfe:	68 5a b3 13 f0       	push   $0xf013b35a
f0124c03:	e8 fd b5 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124c08:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c0b:	c1 e8 0c             	shr    $0xc,%eax
f0124c0e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124c13:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124c16:	eb 4b                	jmp    f0124c63 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124c18:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124c1e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124c21:	c1 e2 02             	shl    $0x2,%edx
f0124c24:	01 d0                	add    %edx,%eax
f0124c26:	8b 00                	mov    (%eax),%eax
f0124c28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124c2d:	89 c1                	mov    %eax,%ecx
f0124c2f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124c35:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124c38:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c3b:	39 c1                	cmp    %eax,%ecx
f0124c3d:	74 17                	je     f0124c56 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124c3f:	83 ec 04             	sub    $0x4,%esp
f0124c42:	68 55 bd 13 f0       	push   $0xf013bd55
f0124c47:	68 9a 08 00 00       	push   $0x89a
f0124c4c:	68 5a b3 13 f0       	push   $0xf013b35a
f0124c51:	e8 af b5 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124c56:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124c5d:	ff 45 d4             	incl   -0x2c(%ebp)
f0124c60:	ff 45 e4             	incl   -0x1c(%ebp)
f0124c63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124c66:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124c6c:	7d 09                	jge    f0124c77 <test_kheap_phys_addr+0x1291>
f0124c6e:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124c75:	7e a1                	jle    f0124c18 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124c77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c7a:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124c80:	0f 82 46 ff ff ff    	jb     f0124bcc <test_kheap_phys_addr+0x11e6>
f0124c86:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124c88:	83 ec 0c             	sub    $0xc,%esp
f0124c8b:	68 e5 b4 13 f0       	push   $0xf013b4e5
f0124c90:	e8 79 c0 fd ff       	call   f0100d0e <cprintf>
f0124c95:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124c98:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124c9f:	10 00 00 
f0124ca2:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124ca8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cad:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124cb3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124cb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cbe:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124cc4:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124cca:	29 d0                	sub    %edx,%eax
f0124ccc:	89 c1                	mov    %eax,%ecx
f0124cce:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124cd5:	10 00 00 
f0124cd8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124cdd:	0f b6 d0             	movzbl %al,%edx
f0124ce0:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124ce6:	01 d0                	add    %edx,%eax
f0124ce8:	48                   	dec    %eax
f0124ce9:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124cef:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124cf5:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cfa:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124d00:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124d06:	29 d0                	sub    %edx,%eax
f0124d08:	01 c1                	add    %eax,%ecx
f0124d0a:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124d11:	10 00 00 
f0124d14:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124d19:	0f b6 c0             	movzbl %al,%eax
f0124d1c:	c1 e0 04             	shl    $0x4,%eax
f0124d1f:	89 c2                	mov    %eax,%edx
f0124d21:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124d27:	01 d0                	add    %edx,%eax
f0124d29:	48                   	dec    %eax
f0124d2a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124d30:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124d36:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d3b:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124d41:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124d47:	29 d0                	sub    %edx,%eax
f0124d49:	01 c8                	add    %ecx,%eax
f0124d4b:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124d50:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124d56:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124d5d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124d63:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124d66:	eb 0a                	jmp    f0124d72 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124d68:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124d6b:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124d72:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124d79:	76 ed                	jbe    f0124d68 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124d7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124d7e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124d84:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124d8b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124d91:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124d94:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124d9b:	e9 cc 00 00 00       	jmp    f0124e6c <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124da0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124da3:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124da8:	83 ec 04             	sub    $0x4,%esp
f0124dab:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124db1:	51                   	push   %ecx
f0124db2:	52                   	push   %edx
f0124db3:	50                   	push   %eax
f0124db4:	e8 f8 1c fe ff       	call   f0106ab1 <get_page_table>
f0124db9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124dbc:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124dc2:	85 c0                	test   %eax,%eax
f0124dc4:	75 17                	jne    f0124ddd <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124dc6:	83 ec 04             	sub    $0x4,%esp
f0124dc9:	68 fc bc 13 f0       	push   $0xf013bcfc
f0124dce:	68 b6 08 00 00       	push   $0x8b6
f0124dd3:	68 5a b3 13 f0       	push   $0xf013b35a
f0124dd8:	e8 28 b4 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124ddd:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124de4:	eb 67                	jmp    f0124e4d <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124de6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124de9:	c1 e0 0c             	shl    $0xc,%eax
f0124dec:	89 c2                	mov    %eax,%edx
f0124dee:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124df4:	01 d0                	add    %edx,%eax
f0124df6:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124dfc:	83 ec 0c             	sub    $0xc,%esp
f0124dff:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124e05:	e8 99 2c fe ff       	call   f0107aa3 <kheap_physical_address>
f0124e0a:	83 c4 10             	add    $0x10,%esp
f0124e0d:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124e13:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124e19:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124e1c:	c1 e2 02             	shl    $0x2,%edx
f0124e1f:	01 d0                	add    %edx,%eax
f0124e21:	8b 00                	mov    (%eax),%eax
f0124e23:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124e28:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124e2e:	74 17                	je     f0124e47 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124e30:	83 ec 04             	sub    $0x4,%esp
f0124e33:	68 55 bd 13 f0       	push   $0xf013bd55
f0124e38:	68 c0 08 00 00       	push   $0x8c0
f0124e3d:	68 5a b3 13 f0       	push   $0xf013b35a
f0124e42:	e8 be b3 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124e47:	ff 45 cc             	incl   -0x34(%ebp)
f0124e4a:	ff 45 e4             	incl   -0x1c(%ebp)
f0124e4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e50:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124e56:	7d 09                	jge    f0124e61 <test_kheap_phys_addr+0x147b>
f0124e58:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124e5f:	7e 85                	jle    f0124de6 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124e61:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124e68:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124e6c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124e70:	0f 88 2a ff ff ff    	js     f0124da0 <test_kheap_phys_addr+0x13ba>
f0124e76:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124e7a:	7f 0d                	jg     f0124e89 <test_kheap_phys_addr+0x14a3>
f0124e7c:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124e83:	0f 86 17 ff ff ff    	jbe    f0124da0 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124e89:	83 ec 0c             	sub    $0xc,%esp
f0124e8c:	68 3e b5 13 f0       	push   $0xf013b53e
f0124e91:	e8 78 be fd ff       	call   f0100d0e <cprintf>
f0124e96:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124e99:	83 ec 0c             	sub    $0xc,%esp
f0124e9c:	68 a8 bd 13 f0       	push   $0xf013bda8
f0124ea1:	e8 68 be fd ff       	call   f0100d0e <cprintf>
f0124ea6:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124ea9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124eae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124eb1:	5b                   	pop    %ebx
f0124eb2:	5e                   	pop    %esi
f0124eb3:	5f                   	pop    %edi
f0124eb4:	5d                   	pop    %ebp
f0124eb5:	c3                   	ret    

f0124eb6 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124eb6:	55                   	push   %ebp
f0124eb7:	89 e5                	mov    %esp,%ebp
f0124eb9:	57                   	push   %edi
f0124eba:	56                   	push   %esi
f0124ebb:	53                   	push   %ebx
f0124ebc:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124ec2:	89 e0                	mov    %esp,%eax
f0124ec4:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124ec6:	83 ec 0c             	sub    $0xc,%esp
f0124ec9:	68 9c b2 13 f0       	push   $0xf013b29c
f0124ece:	e8 3b be fd ff       	call   f0100d0e <cprintf>
f0124ed3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124ed6:	83 ec 0c             	sub    $0xc,%esp
f0124ed9:	68 cc b2 13 f0       	push   $0xf013b2cc
f0124ede:	e8 2b be fd ff       	call   f0100d0e <cprintf>
f0124ee3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124ee6:	83 ec 0c             	sub    $0xc,%esp
f0124ee9:	68 9c b2 13 f0       	push   $0xf013b29c
f0124eee:	e8 1b be fd ff       	call   f0100d0e <cprintf>
f0124ef3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124ef6:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124efa:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124efe:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124f04:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124f0a:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124f11:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124f18:	e8 80 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124f1d:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124f20:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124f26:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124f2b:	b8 00 00 00 00       	mov    $0x0,%eax
f0124f30:	89 d7                	mov    %edx,%edi
f0124f32:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124f34:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124f3a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124f3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0124f44:	89 d7                	mov    %edx,%edi
f0124f46:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124f48:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124f4e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0124f58:	89 d7                	mov    %edx,%edi
f0124f5a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124f5c:	e8 3c 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124f61:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124f64:	e8 5f ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f69:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124f6c:	83 ec 0c             	sub    $0xc,%esp
f0124f6f:	68 00 fc 1f 00       	push   $0x1ffc00
f0124f74:	e8 0c 29 fe ff       	call   f0107885 <kmalloc>
f0124f79:	83 c4 10             	add    $0x10,%esp
f0124f7c:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f82:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124f88:	89 c1                	mov    %eax,%ecx
f0124f8a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124f91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124f94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f99:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124f9c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124f9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fa4:	f7 75 b4             	divl   -0x4c(%ebp)
f0124fa7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124faa:	29 d0                	sub    %edx,%eax
f0124fac:	89 c3                	mov    %eax,%ebx
f0124fae:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124fb5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124fba:	0f b6 d0             	movzbl %al,%edx
f0124fbd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124fc0:	01 d0                	add    %edx,%eax
f0124fc2:	48                   	dec    %eax
f0124fc3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124fc6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124fc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fce:	f7 75 ac             	divl   -0x54(%ebp)
f0124fd1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124fd4:	29 d0                	sub    %edx,%eax
f0124fd6:	01 c3                	add    %eax,%ebx
f0124fd8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124fdf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124fe4:	0f b6 c0             	movzbl %al,%eax
f0124fe7:	c1 e0 04             	shl    $0x4,%eax
f0124fea:	89 c2                	mov    %eax,%edx
f0124fec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124fef:	01 d0                	add    %edx,%eax
f0124ff1:	48                   	dec    %eax
f0124ff2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124ff5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ffd:	f7 75 a4             	divl   -0x5c(%ebp)
f0125000:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125003:	29 d0                	sub    %edx,%eax
f0125005:	01 d8                	add    %ebx,%eax
f0125007:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012500c:	39 c1                	cmp    %eax,%ecx
f012500e:	74 17                	je     f0125027 <test_kheap_virt_addr+0x171>
f0125010:	83 ec 04             	sub    $0x4,%esp
f0125013:	68 40 b4 13 f0       	push   $0xf013b440
f0125018:	68 ed 08 00 00       	push   $0x8ed
f012501d:	68 5a b3 13 f0       	push   $0xf013b35a
f0125022:	e8 de b1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125027:	e8 9c ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012502c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012502f:	74 17                	je     f0125048 <test_kheap_virt_addr+0x192>
f0125031:	83 ec 04             	sub    $0x4,%esp
f0125034:	68 74 b3 13 f0       	push   $0xf013b374
f0125039:	68 ee 08 00 00       	push   $0x8ee
f012503e:	68 5a b3 13 f0       	push   $0xf013b35a
f0125043:	e8 bd b1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125048:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012504b:	e8 4d 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125050:	29 c3                	sub    %eax,%ebx
f0125052:	89 d8                	mov    %ebx,%eax
f0125054:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125059:	74 17                	je     f0125072 <test_kheap_virt_addr+0x1bc>
f012505b:	83 ec 04             	sub    $0x4,%esp
f012505e:	68 dc b3 13 f0       	push   $0xf013b3dc
f0125063:	68 ef 08 00 00       	push   $0x8ef
f0125068:	68 5a b3 13 f0       	push   $0xf013b35a
f012506d:	e8 93 b1 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125072:	e8 26 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125077:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012507a:	e8 49 ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012507f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125082:	83 ec 0c             	sub    $0xc,%esp
f0125085:	68 00 fc 1f 00       	push   $0x1ffc00
f012508a:	e8 f6 27 fe ff       	call   f0107885 <kmalloc>
f012508f:	83 c4 10             	add    $0x10,%esp
f0125092:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125098:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012509e:	89 c1                	mov    %eax,%ecx
f01250a0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01250a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01250aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250af:	89 45 98             	mov    %eax,-0x68(%ebp)
f01250b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01250b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01250ba:	f7 75 9c             	divl   -0x64(%ebp)
f01250bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01250c0:	29 d0                	sub    %edx,%eax
f01250c2:	89 c3                	mov    %eax,%ebx
f01250c4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01250cb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01250d0:	0f b6 d0             	movzbl %al,%edx
f01250d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01250d6:	01 d0                	add    %edx,%eax
f01250d8:	48                   	dec    %eax
f01250d9:	89 45 90             	mov    %eax,-0x70(%ebp)
f01250dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01250df:	ba 00 00 00 00       	mov    $0x0,%edx
f01250e4:	f7 75 94             	divl   -0x6c(%ebp)
f01250e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01250ea:	29 d0                	sub    %edx,%eax
f01250ec:	01 c3                	add    %eax,%ebx
f01250ee:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01250f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01250fa:	0f b6 c0             	movzbl %al,%eax
f01250fd:	c1 e0 04             	shl    $0x4,%eax
f0125100:	89 c2                	mov    %eax,%edx
f0125102:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125105:	01 d0                	add    %edx,%eax
f0125107:	48                   	dec    %eax
f0125108:	89 45 88             	mov    %eax,-0x78(%ebp)
f012510b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012510e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125113:	f7 75 8c             	divl   -0x74(%ebp)
f0125116:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125119:	29 d0                	sub    %edx,%eax
f012511b:	01 d8                	add    %ebx,%eax
f012511d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125122:	39 c1                	cmp    %eax,%ecx
f0125124:	74 17                	je     f012513d <test_kheap_virt_addr+0x287>
f0125126:	83 ec 04             	sub    $0x4,%esp
f0125129:	68 40 b4 13 f0       	push   $0xf013b440
f012512e:	68 f5 08 00 00       	push   $0x8f5
f0125133:	68 5a b3 13 f0       	push   $0xf013b35a
f0125138:	e8 c8 b0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012513d:	e8 86 ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125142:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125145:	74 17                	je     f012515e <test_kheap_virt_addr+0x2a8>
f0125147:	83 ec 04             	sub    $0x4,%esp
f012514a:	68 74 b3 13 f0       	push   $0xf013b374
f012514f:	68 f6 08 00 00       	push   $0x8f6
f0125154:	68 5a b3 13 f0       	push   $0xf013b35a
f0125159:	e8 a7 b0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012515e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125161:	e8 37 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125166:	29 c3                	sub    %eax,%ebx
f0125168:	89 d8                	mov    %ebx,%eax
f012516a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012516f:	74 17                	je     f0125188 <test_kheap_virt_addr+0x2d2>
f0125171:	83 ec 04             	sub    $0x4,%esp
f0125174:	68 dc b3 13 f0       	push   $0xf013b3dc
f0125179:	68 f7 08 00 00       	push   $0x8f7
f012517e:	68 5a b3 13 f0       	push   $0xf013b35a
f0125183:	e8 7d b0 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125188:	e8 10 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012518d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125190:	e8 33 ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125195:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125198:	83 ec 0c             	sub    $0xc,%esp
f012519b:	68 00 08 00 00       	push   $0x800
f01251a0:	e8 e0 26 fe ff       	call   f0107885 <kmalloc>
f01251a5:	83 c4 10             	add    $0x10,%esp
f01251a8:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01251ae:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01251b4:	89 c1                	mov    %eax,%ecx
f01251b6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01251bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01251c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251c5:	89 45 80             	mov    %eax,-0x80(%ebp)
f01251c8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01251cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01251d0:	f7 75 84             	divl   -0x7c(%ebp)
f01251d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01251d6:	29 d0                	sub    %edx,%eax
f01251d8:	89 c3                	mov    %eax,%ebx
f01251da:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01251e1:	10 00 00 
f01251e4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01251e9:	0f b6 d0             	movzbl %al,%edx
f01251ec:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01251f2:	01 d0                	add    %edx,%eax
f01251f4:	48                   	dec    %eax
f01251f5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01251fb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125201:	ba 00 00 00 00       	mov    $0x0,%edx
f0125206:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012520c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125212:	29 d0                	sub    %edx,%eax
f0125214:	01 c3                	add    %eax,%ebx
f0125216:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012521d:	10 00 00 
f0125220:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125225:	0f b6 c0             	movzbl %al,%eax
f0125228:	c1 e0 04             	shl    $0x4,%eax
f012522b:	89 c2                	mov    %eax,%edx
f012522d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125233:	01 d0                	add    %edx,%eax
f0125235:	48                   	dec    %eax
f0125236:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012523c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125242:	ba 00 00 00 00       	mov    $0x0,%edx
f0125247:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012524d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125253:	29 d0                	sub    %edx,%eax
f0125255:	01 d8                	add    %ebx,%eax
f0125257:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012525c:	39 c1                	cmp    %eax,%ecx
f012525e:	74 17                	je     f0125277 <test_kheap_virt_addr+0x3c1>
f0125260:	83 ec 04             	sub    $0x4,%esp
f0125263:	68 40 b4 13 f0       	push   $0xf013b440
f0125268:	68 fd 08 00 00       	push   $0x8fd
f012526d:	68 5a b3 13 f0       	push   $0xf013b35a
f0125272:	e8 8e af fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125277:	e8 4c eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012527c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012527f:	74 17                	je     f0125298 <test_kheap_virt_addr+0x3e2>
f0125281:	83 ec 04             	sub    $0x4,%esp
f0125284:	68 74 b3 13 f0       	push   $0xf013b374
f0125289:	68 fe 08 00 00       	push   $0x8fe
f012528e:	68 5a b3 13 f0       	push   $0xf013b35a
f0125293:	e8 6d af fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125298:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012529b:	e8 fd 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01252a0:	29 c3                	sub    %eax,%ebx
f01252a2:	89 d8                	mov    %ebx,%eax
f01252a4:	83 f8 01             	cmp    $0x1,%eax
f01252a7:	74 17                	je     f01252c0 <test_kheap_virt_addr+0x40a>
f01252a9:	83 ec 04             	sub    $0x4,%esp
f01252ac:	68 dc b3 13 f0       	push   $0xf013b3dc
f01252b1:	68 ff 08 00 00       	push   $0x8ff
f01252b6:	68 5a b3 13 f0       	push   $0xf013b35a
f01252bb:	e8 45 af fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01252c0:	e8 d8 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01252c5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252c8:	e8 fb ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01252cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01252d0:	83 ec 0c             	sub    $0xc,%esp
f01252d3:	68 00 08 00 00       	push   $0x800
f01252d8:	e8 a8 25 fe ff       	call   f0107885 <kmalloc>
f01252dd:	83 c4 10             	add    $0x10,%esp
f01252e0:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252e6:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01252ec:	89 c1                	mov    %eax,%ecx
f01252ee:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01252f5:	10 00 00 
f01252f8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01252fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125303:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125309:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012530f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125314:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012531a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125320:	29 d0                	sub    %edx,%eax
f0125322:	89 c3                	mov    %eax,%ebx
f0125324:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012532b:	10 00 00 
f012532e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125333:	0f b6 d0             	movzbl %al,%edx
f0125336:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012533c:	01 d0                	add    %edx,%eax
f012533e:	48                   	dec    %eax
f012533f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125345:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012534b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125350:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125356:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012535c:	29 d0                	sub    %edx,%eax
f012535e:	01 c3                	add    %eax,%ebx
f0125360:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125367:	10 00 00 
f012536a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012536f:	0f b6 c0             	movzbl %al,%eax
f0125372:	c1 e0 04             	shl    $0x4,%eax
f0125375:	89 c2                	mov    %eax,%edx
f0125377:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012537d:	01 d0                	add    %edx,%eax
f012537f:	48                   	dec    %eax
f0125380:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125386:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012538c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125391:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125397:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012539d:	29 d0                	sub    %edx,%eax
f012539f:	01 d8                	add    %ebx,%eax
f01253a1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01253a6:	39 c1                	cmp    %eax,%ecx
f01253a8:	74 17                	je     f01253c1 <test_kheap_virt_addr+0x50b>
f01253aa:	83 ec 04             	sub    $0x4,%esp
f01253ad:	68 40 b4 13 f0       	push   $0xf013b440
f01253b2:	68 05 09 00 00       	push   $0x905
f01253b7:	68 5a b3 13 f0       	push   $0xf013b35a
f01253bc:	e8 44 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253c1:	e8 02 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01253c6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01253c9:	74 17                	je     f01253e2 <test_kheap_virt_addr+0x52c>
f01253cb:	83 ec 04             	sub    $0x4,%esp
f01253ce:	68 74 b3 13 f0       	push   $0xf013b374
f01253d3:	68 06 09 00 00       	push   $0x906
f01253d8:	68 5a b3 13 f0       	push   $0xf013b35a
f01253dd:	e8 23 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253e2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01253e5:	e8 b3 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01253ea:	29 c3                	sub    %eax,%ebx
f01253ec:	89 d8                	mov    %ebx,%eax
f01253ee:	83 f8 01             	cmp    $0x1,%eax
f01253f1:	74 17                	je     f012540a <test_kheap_virt_addr+0x554>
f01253f3:	83 ec 04             	sub    $0x4,%esp
f01253f6:	68 dc b3 13 f0       	push   $0xf013b3dc
f01253fb:	68 07 09 00 00       	push   $0x907
f0125400:	68 5a b3 13 f0       	push   $0xf013b35a
f0125405:	e8 fb ad fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012540a:	e8 8e 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012540f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125412:	e8 b1 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125417:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012541a:	83 ec 0c             	sub    $0xc,%esp
f012541d:	68 00 1c 00 00       	push   $0x1c00
f0125422:	e8 5e 24 fe ff       	call   f0107885 <kmalloc>
f0125427:	83 c4 10             	add    $0x10,%esp
f012542a:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125430:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125436:	89 c1                	mov    %eax,%ecx
f0125438:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012543f:	10 00 00 
f0125442:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125448:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012544d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125453:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125459:	ba 00 00 00 00       	mov    $0x0,%edx
f012545e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125464:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012546a:	29 d0                	sub    %edx,%eax
f012546c:	89 c3                	mov    %eax,%ebx
f012546e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125475:	10 00 00 
f0125478:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012547d:	0f b6 d0             	movzbl %al,%edx
f0125480:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125486:	01 d0                	add    %edx,%eax
f0125488:	48                   	dec    %eax
f0125489:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012548f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125495:	ba 00 00 00 00       	mov    $0x0,%edx
f012549a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01254a0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01254a6:	29 d0                	sub    %edx,%eax
f01254a8:	01 c3                	add    %eax,%ebx
f01254aa:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01254b1:	10 00 00 
f01254b4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01254b9:	0f b6 c0             	movzbl %al,%eax
f01254bc:	c1 e0 04             	shl    $0x4,%eax
f01254bf:	89 c2                	mov    %eax,%edx
f01254c1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01254c7:	01 d0                	add    %edx,%eax
f01254c9:	48                   	dec    %eax
f01254ca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01254d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01254d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01254db:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01254e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01254e7:	29 d0                	sub    %edx,%eax
f01254e9:	01 d8                	add    %ebx,%eax
f01254eb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01254f0:	39 c1                	cmp    %eax,%ecx
f01254f2:	74 17                	je     f012550b <test_kheap_virt_addr+0x655>
f01254f4:	83 ec 04             	sub    $0x4,%esp
f01254f7:	68 40 b4 13 f0       	push   $0xf013b440
f01254fc:	68 0d 09 00 00       	push   $0x90d
f0125501:	68 5a b3 13 f0       	push   $0xf013b35a
f0125506:	e8 fa ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012550b:	e8 b8 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125510:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125513:	74 17                	je     f012552c <test_kheap_virt_addr+0x676>
f0125515:	83 ec 04             	sub    $0x4,%esp
f0125518:	68 74 b3 13 f0       	push   $0xf013b374
f012551d:	68 0e 09 00 00       	push   $0x90e
f0125522:	68 5a b3 13 f0       	push   $0xf013b35a
f0125527:	e8 d9 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012552c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012552f:	e8 69 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125534:	29 c3                	sub    %eax,%ebx
f0125536:	89 d8                	mov    %ebx,%eax
f0125538:	83 f8 02             	cmp    $0x2,%eax
f012553b:	74 17                	je     f0125554 <test_kheap_virt_addr+0x69e>
f012553d:	83 ec 04             	sub    $0x4,%esp
f0125540:	68 dc b3 13 f0       	push   $0xf013b3dc
f0125545:	68 0f 09 00 00       	push   $0x90f
f012554a:	68 5a b3 13 f0       	push   $0xf013b35a
f012554f:	e8 b1 ac fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125554:	e8 44 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125559:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012555c:	e8 67 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125561:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125564:	83 ec 0c             	sub    $0xc,%esp
f0125567:	68 00 fc 2f 00       	push   $0x2ffc00
f012556c:	e8 14 23 fe ff       	call   f0107885 <kmalloc>
f0125571:	83 c4 10             	add    $0x10,%esp
f0125574:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012557a:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125580:	89 c1                	mov    %eax,%ecx
f0125582:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125589:	10 00 00 
f012558c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125592:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125597:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012559d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01255a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01255a8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01255ae:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01255b4:	29 d0                	sub    %edx,%eax
f01255b6:	89 c3                	mov    %eax,%ebx
f01255b8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01255bf:	10 00 00 
f01255c2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01255c7:	0f b6 d0             	movzbl %al,%edx
f01255ca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01255d0:	01 d0                	add    %edx,%eax
f01255d2:	48                   	dec    %eax
f01255d3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01255d9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01255df:	ba 00 00 00 00       	mov    $0x0,%edx
f01255e4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01255ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01255f0:	29 d0                	sub    %edx,%eax
f01255f2:	01 c3                	add    %eax,%ebx
f01255f4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01255fb:	10 00 00 
f01255fe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125603:	0f b6 c0             	movzbl %al,%eax
f0125606:	c1 e0 04             	shl    $0x4,%eax
f0125609:	89 c2                	mov    %eax,%edx
f012560b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125611:	01 d0                	add    %edx,%eax
f0125613:	48                   	dec    %eax
f0125614:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012561a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125620:	ba 00 00 00 00       	mov    $0x0,%edx
f0125625:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012562b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125631:	29 d0                	sub    %edx,%eax
f0125633:	01 d8                	add    %ebx,%eax
f0125635:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012563a:	39 c1                	cmp    %eax,%ecx
f012563c:	74 17                	je     f0125655 <test_kheap_virt_addr+0x79f>
f012563e:	83 ec 04             	sub    $0x4,%esp
f0125641:	68 40 b4 13 f0       	push   $0xf013b440
f0125646:	68 15 09 00 00       	push   $0x915
f012564b:	68 5a b3 13 f0       	push   $0xf013b35a
f0125650:	e8 b0 ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125655:	e8 6e e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012565a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012565d:	74 17                	je     f0125676 <test_kheap_virt_addr+0x7c0>
f012565f:	83 ec 04             	sub    $0x4,%esp
f0125662:	68 74 b3 13 f0       	push   $0xf013b374
f0125667:	68 16 09 00 00       	push   $0x916
f012566c:	68 5a b3 13 f0       	push   $0xf013b35a
f0125671:	e8 8f ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125676:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125679:	e8 1f 75 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012567e:	29 c3                	sub    %eax,%ebx
f0125680:	89 d8                	mov    %ebx,%eax
f0125682:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125687:	74 17                	je     f01256a0 <test_kheap_virt_addr+0x7ea>
f0125689:	83 ec 04             	sub    $0x4,%esp
f012568c:	68 dc b3 13 f0       	push   $0xf013b3dc
f0125691:	68 17 09 00 00       	push   $0x917
f0125696:	68 5a b3 13 f0       	push   $0xf013b35a
f012569b:	e8 65 ab fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01256a0:	e8 f8 74 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01256a5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256a8:	e8 1b e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256ad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01256b0:	83 ec 0c             	sub    $0xc,%esp
f01256b3:	68 00 fc 5f 00       	push   $0x5ffc00
f01256b8:	e8 c8 21 fe ff       	call   f0107885 <kmalloc>
f01256bd:	83 c4 10             	add    $0x10,%esp
f01256c0:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256c6:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01256cc:	89 c1                	mov    %eax,%ecx
f01256ce:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01256d5:	10 00 00 
f01256d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01256de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256e3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01256e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01256ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01256f4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01256fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125700:	29 d0                	sub    %edx,%eax
f0125702:	89 c3                	mov    %eax,%ebx
f0125704:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012570b:	10 00 00 
f012570e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125713:	0f b6 d0             	movzbl %al,%edx
f0125716:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012571c:	01 d0                	add    %edx,%eax
f012571e:	48                   	dec    %eax
f012571f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125725:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012572b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125730:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125736:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012573c:	29 d0                	sub    %edx,%eax
f012573e:	01 c3                	add    %eax,%ebx
f0125740:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125747:	10 00 00 
f012574a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012574f:	0f b6 c0             	movzbl %al,%eax
f0125752:	c1 e0 04             	shl    $0x4,%eax
f0125755:	89 c2                	mov    %eax,%edx
f0125757:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012575d:	01 d0                	add    %edx,%eax
f012575f:	48                   	dec    %eax
f0125760:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125766:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012576c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125771:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125777:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012577d:	29 d0                	sub    %edx,%eax
f012577f:	01 d8                	add    %ebx,%eax
f0125781:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125786:	39 c1                	cmp    %eax,%ecx
f0125788:	74 17                	je     f01257a1 <test_kheap_virt_addr+0x8eb>
f012578a:	83 ec 04             	sub    $0x4,%esp
f012578d:	68 40 b4 13 f0       	push   $0xf013b440
f0125792:	68 1d 09 00 00       	push   $0x91d
f0125797:	68 5a b3 13 f0       	push   $0xf013b35a
f012579c:	e8 64 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257a1:	e8 22 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01257a6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01257a9:	74 17                	je     f01257c2 <test_kheap_virt_addr+0x90c>
f01257ab:	83 ec 04             	sub    $0x4,%esp
f01257ae:	68 74 b3 13 f0       	push   $0xf013b374
f01257b3:	68 1e 09 00 00       	push   $0x91e
f01257b8:	68 5a b3 13 f0       	push   $0xf013b35a
f01257bd:	e8 43 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257c2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01257c5:	e8 d3 73 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01257ca:	29 c3                	sub    %eax,%ebx
f01257cc:	89 d8                	mov    %ebx,%eax
f01257ce:	3d 00 06 00 00       	cmp    $0x600,%eax
f01257d3:	74 17                	je     f01257ec <test_kheap_virt_addr+0x936>
f01257d5:	83 ec 04             	sub    $0x4,%esp
f01257d8:	68 dc b3 13 f0       	push   $0xf013b3dc
f01257dd:	68 1f 09 00 00       	push   $0x91f
f01257e2:	68 5a b3 13 f0       	push   $0xf013b35a
f01257e7:	e8 19 aa fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01257ec:	e8 ac 73 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01257f1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257f4:	e8 cf e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01257f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01257fc:	83 ec 0c             	sub    $0xc,%esp
f01257ff:	68 00 38 00 00       	push   $0x3800
f0125804:	e8 7c 20 fe ff       	call   f0107885 <kmalloc>
f0125809:	83 c4 10             	add    $0x10,%esp
f012580c:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125812:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125818:	89 c1                	mov    %eax,%ecx
f012581a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125821:	10 00 00 
f0125824:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012582a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012582f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125835:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012583b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125840:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125846:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012584c:	29 d0                	sub    %edx,%eax
f012584e:	89 c3                	mov    %eax,%ebx
f0125850:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125857:	10 00 00 
f012585a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012585f:	0f b6 d0             	movzbl %al,%edx
f0125862:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125868:	01 d0                	add    %edx,%eax
f012586a:	48                   	dec    %eax
f012586b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125871:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125877:	ba 00 00 00 00       	mov    $0x0,%edx
f012587c:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125882:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125888:	29 d0                	sub    %edx,%eax
f012588a:	01 c3                	add    %eax,%ebx
f012588c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125893:	10 00 00 
f0125896:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012589b:	0f b6 c0             	movzbl %al,%eax
f012589e:	c1 e0 04             	shl    $0x4,%eax
f01258a1:	89 c2                	mov    %eax,%edx
f01258a3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01258a9:	01 d0                	add    %edx,%eax
f01258ab:	48                   	dec    %eax
f01258ac:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01258b2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01258b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01258bd:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01258c3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01258c9:	29 d0                	sub    %edx,%eax
f01258cb:	01 d8                	add    %ebx,%eax
f01258cd:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01258d2:	39 c1                	cmp    %eax,%ecx
f01258d4:	74 17                	je     f01258ed <test_kheap_virt_addr+0xa37>
f01258d6:	83 ec 04             	sub    $0x4,%esp
f01258d9:	68 40 b4 13 f0       	push   $0xf013b440
f01258de:	68 25 09 00 00       	push   $0x925
f01258e3:	68 5a b3 13 f0       	push   $0xf013b35a
f01258e8:	e8 18 a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258ed:	e8 d6 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01258f2:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01258f5:	74 17                	je     f012590e <test_kheap_virt_addr+0xa58>
f01258f7:	83 ec 04             	sub    $0x4,%esp
f01258fa:	68 74 b3 13 f0       	push   $0xf013b374
f01258ff:	68 26 09 00 00       	push   $0x926
f0125904:	68 5a b3 13 f0       	push   $0xf013b35a
f0125909:	e8 f7 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012590e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125911:	e8 87 72 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125916:	29 c3                	sub    %eax,%ebx
f0125918:	89 d8                	mov    %ebx,%eax
f012591a:	83 f8 04             	cmp    $0x4,%eax
f012591d:	74 17                	je     f0125936 <test_kheap_virt_addr+0xa80>
f012591f:	83 ec 04             	sub    $0x4,%esp
f0125922:	68 dc b3 13 f0       	push   $0xf013b3dc
f0125927:	68 27 09 00 00       	push   $0x927
f012592c:	68 5a b3 13 f0       	push   $0xf013b35a
f0125931:	e8 cf a8 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125936:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012593d:	10 00 00 
f0125940:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125946:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012594b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125951:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125957:	ba 00 00 00 00       	mov    $0x0,%edx
f012595c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125962:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125968:	29 d0                	sub    %edx,%eax
f012596a:	89 c1                	mov    %eax,%ecx
f012596c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125973:	10 00 00 
f0125976:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012597b:	0f b6 d0             	movzbl %al,%edx
f012597e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125984:	01 d0                	add    %edx,%eax
f0125986:	48                   	dec    %eax
f0125987:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012598d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125993:	ba 00 00 00 00       	mov    $0x0,%edx
f0125998:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012599e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01259a4:	29 d0                	sub    %edx,%eax
f01259a6:	01 c1                	add    %eax,%ecx
f01259a8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01259af:	10 00 00 
f01259b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01259b7:	0f b6 c0             	movzbl %al,%eax
f01259ba:	c1 e0 04             	shl    $0x4,%eax
f01259bd:	89 c2                	mov    %eax,%edx
f01259bf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01259c5:	01 d0                	add    %edx,%eax
f01259c7:	48                   	dec    %eax
f01259c8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01259ce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01259d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01259d9:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01259df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01259e5:	29 d0                	sub    %edx,%eax
f01259e7:	01 c1                	add    %eax,%ecx
f01259e9:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01259f0:	10 00 00 
f01259f3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01259f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259fe:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125a04:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125a0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a0f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125a15:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125a1b:	29 d0                	sub    %edx,%eax
f0125a1d:	29 c1                	sub    %eax,%ecx
f0125a1f:	89 c8                	mov    %ecx,%eax
f0125a21:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125a26:	c1 e8 0c             	shr    $0xc,%eax
f0125a29:	89 c2                	mov    %eax,%edx
f0125a2b:	4a                   	dec    %edx
f0125a2c:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125a32:	c1 e0 02             	shl    $0x2,%eax
f0125a35:	8d 50 03             	lea    0x3(%eax),%edx
f0125a38:	b8 10 00 00 00       	mov    $0x10,%eax
f0125a3d:	48                   	dec    %eax
f0125a3e:	01 d0                	add    %edx,%eax
f0125a40:	bf 10 00 00 00       	mov    $0x10,%edi
f0125a45:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a4a:	f7 f7                	div    %edi
f0125a4c:	6b c0 10             	imul   $0x10,%eax,%eax
f0125a4f:	29 c4                	sub    %eax,%esp
f0125a51:	89 e0                	mov    %esp,%eax
f0125a53:	83 c0 03             	add    $0x3,%eax
f0125a56:	c1 e8 02             	shr    $0x2,%eax
f0125a59:	c1 e0 02             	shl    $0x2,%eax
f0125a5c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125a62:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125a69:	10 00 00 
f0125a6c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125a72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a77:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125a7d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125a83:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a88:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125a8e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125a94:	29 d0                	sub    %edx,%eax
f0125a96:	89 c1                	mov    %eax,%ecx
f0125a98:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125a9f:	10 00 00 
f0125aa2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125aa7:	0f b6 d0             	movzbl %al,%edx
f0125aaa:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125ab0:	01 d0                	add    %edx,%eax
f0125ab2:	48                   	dec    %eax
f0125ab3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125ab9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ac4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125aca:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125ad0:	29 d0                	sub    %edx,%eax
f0125ad2:	01 c1                	add    %eax,%ecx
f0125ad4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125adb:	10 00 00 
f0125ade:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125ae3:	0f b6 c0             	movzbl %al,%eax
f0125ae6:	c1 e0 04             	shl    $0x4,%eax
f0125ae9:	89 c2                	mov    %eax,%edx
f0125aeb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125af1:	01 d0                	add    %edx,%eax
f0125af3:	48                   	dec    %eax
f0125af4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125afa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125b00:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b05:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125b0b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125b11:	29 d0                	sub    %edx,%eax
f0125b13:	01 c1                	add    %eax,%ecx
f0125b15:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125b1c:	10 00 00 
f0125b1f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125b25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b2a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125b30:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b3b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125b41:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125b47:	29 d0                	sub    %edx,%eax
f0125b49:	29 c1                	sub    %eax,%ecx
f0125b4b:	89 c8                	mov    %ecx,%eax
f0125b4d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125b52:	c1 e8 0c             	shr    $0xc,%eax
f0125b55:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125b5b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125b62:	10 00 00 
f0125b65:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125b6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b70:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125b76:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125b7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b81:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125b87:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125b8d:	29 d0                	sub    %edx,%eax
f0125b8f:	89 c1                	mov    %eax,%ecx
f0125b91:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125b98:	10 00 00 
f0125b9b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125ba0:	0f b6 d0             	movzbl %al,%edx
f0125ba3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125ba9:	01 d0                	add    %edx,%eax
f0125bab:	48                   	dec    %eax
f0125bac:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125bb2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125bb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bbd:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125bc3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125bc9:	29 d0                	sub    %edx,%eax
f0125bcb:	01 c1                	add    %eax,%ecx
f0125bcd:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125bd4:	10 00 00 
f0125bd7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125bdc:	0f b6 c0             	movzbl %al,%eax
f0125bdf:	c1 e0 04             	shl    $0x4,%eax
f0125be2:	89 c2                	mov    %eax,%edx
f0125be4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125bea:	01 d0                	add    %edx,%eax
f0125bec:	48                   	dec    %eax
f0125bed:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125bf3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125bf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bfe:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125c04:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125c0a:	29 d0                	sub    %edx,%eax
f0125c0c:	01 c8                	add    %ecx,%eax
f0125c0e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125c13:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125c19:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125c20:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125c27:	10 00 00 
f0125c2a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125c30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c35:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125c3b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125c41:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c46:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125c4c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125c52:	29 d0                	sub    %edx,%eax
f0125c54:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125c59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125c5c:	e9 21 01 00 00       	jmp    f0125d82 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125c61:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0125c66:	83 ec 04             	sub    $0x4,%esp
f0125c69:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125c6f:	52                   	push   %edx
f0125c70:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125c73:	50                   	push   %eax
f0125c74:	e8 38 0e fe ff       	call   f0106ab1 <get_page_table>
f0125c79:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125c7c:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125c82:	85 c0                	test   %eax,%eax
f0125c84:	75 17                	jne    f0125c9d <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125c86:	83 ec 04             	sub    $0x4,%esp
f0125c89:	68 fc bc 13 f0       	push   $0xf013bcfc
f0125c8e:	68 38 09 00 00       	push   $0x938
f0125c93:	68 5a b3 13 f0       	push   $0xf013b35a
f0125c98:	e8 68 a5 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125c9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125ca0:	c1 e8 0c             	shr    $0xc,%eax
f0125ca3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125ca8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125cab:	e9 ba 00 00 00       	jmp    f0125d6a <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125cb0:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125cb6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125cb9:	c1 e2 02             	shl    $0x2,%edx
f0125cbc:	01 d0                	add    %edx,%eax
f0125cbe:	8b 00                	mov    (%eax),%eax
f0125cc0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125cc5:	89 c1                	mov    %eax,%ecx
f0125cc7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125ccd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125cd0:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125cd3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125cd9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125cdc:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125cdf:	83 ec 0c             	sub    $0xc,%esp
f0125ce2:	50                   	push   %eax
f0125ce3:	e8 8f 1d fe ff       	call   f0107a77 <kheap_virtual_address>
f0125ce8:	83 c4 10             	add    $0x10,%esp
f0125ceb:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125cf1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125cf7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0125cfa:	74 61                	je     f0125d5d <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0125cfc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125d02:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125d05:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125d08:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125d0e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125d11:	c1 e1 02             	shl    $0x2,%ecx
f0125d14:	01 ca                	add    %ecx,%edx
f0125d16:	8b 12                	mov    (%edx),%edx
f0125d18:	89 d1                	mov    %edx,%ecx
f0125d1a:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125d20:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125d23:	c1 e2 0c             	shl    $0xc,%edx
f0125d26:	89 d3                	mov    %edx,%ebx
f0125d28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125d2b:	01 da                	add    %ebx,%edx
f0125d2d:	83 ec 0c             	sub    $0xc,%esp
f0125d30:	50                   	push   %eax
f0125d31:	51                   	push   %ecx
f0125d32:	52                   	push   %edx
f0125d33:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125d39:	68 f0 bd 13 f0       	push   $0xf013bdf0
f0125d3e:	e8 cb af fd ff       	call   f0100d0e <cprintf>
f0125d43:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125d46:	83 ec 04             	sub    $0x4,%esp
f0125d49:	68 33 be 13 f0       	push   $0xf013be33
f0125d4e:	68 42 09 00 00       	push   $0x942
f0125d53:	68 5a b3 13 f0       	push   $0xf013b35a
f0125d58:	e8 a8 a4 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0125d5d:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125d64:	ff 45 dc             	incl   -0x24(%ebp)
f0125d67:	ff 45 e0             	incl   -0x20(%ebp)
f0125d6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125d6d:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125d73:	7d 0d                	jge    f0125d82 <test_kheap_virt_addr+0xecc>
f0125d75:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125d7c:	0f 8e 2e ff ff ff    	jle    f0125cb0 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125d85:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125d8b:	0f 82 d0 fe ff ff    	jb     f0125c61 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125d91:	83 ec 0c             	sub    $0xc,%esp
f0125d94:	68 50 be 13 f0       	push   $0xf013be50
f0125d99:	e8 70 af fd ff       	call   f0100d0e <cprintf>
f0125d9e:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125da1:	e8 f7 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125da6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125dac:	e8 17 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125db1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125db7:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125dbd:	83 ec 0c             	sub    $0xc,%esp
f0125dc0:	50                   	push   %eax
f0125dc1:	e8 8a 1b fe ff       	call   f0107950 <kfree>
f0125dc6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125dc9:	e8 fa df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125dce:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125dd4:	74 17                	je     f0125ded <test_kheap_virt_addr+0xf37>
f0125dd6:	83 ec 04             	sub    $0x4,%esp
f0125dd9:	68 74 b3 13 f0       	push   $0xf013b374
f0125dde:	68 50 09 00 00       	push   $0x950
f0125de3:	68 5a b3 13 f0       	push   $0xf013b35a
f0125de8:	e8 18 a4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125ded:	e8 ab 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125df2:	89 c2                	mov    %eax,%edx
f0125df4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125dfa:	29 c2                	sub    %eax,%edx
f0125dfc:	89 d0                	mov    %edx,%eax
f0125dfe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125e03:	74 17                	je     f0125e1c <test_kheap_virt_addr+0xf66>
f0125e05:	83 ec 04             	sub    $0x4,%esp
f0125e08:	68 e4 ba 13 f0       	push   $0xf013bae4
f0125e0d:	68 51 09 00 00       	push   $0x951
f0125e12:	68 5a b3 13 f0       	push   $0xf013b35a
f0125e17:	e8 e9 a3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e1c:	e8 7c 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125e21:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e27:	e8 9c df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125e2c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125e32:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125e38:	83 ec 0c             	sub    $0xc,%esp
f0125e3b:	50                   	push   %eax
f0125e3c:	e8 0f 1b fe ff       	call   f0107950 <kfree>
f0125e41:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e44:	e8 7f df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125e49:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125e4f:	74 17                	je     f0125e68 <test_kheap_virt_addr+0xfb2>
f0125e51:	83 ec 04             	sub    $0x4,%esp
f0125e54:	68 74 b3 13 f0       	push   $0xf013b374
f0125e59:	68 57 09 00 00       	push   $0x957
f0125e5e:	68 5a b3 13 f0       	push   $0xf013b35a
f0125e63:	e8 9d a3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125e68:	e8 30 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125e6d:	89 c2                	mov    %eax,%edx
f0125e6f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125e75:	29 c2                	sub    %eax,%edx
f0125e77:	89 d0                	mov    %edx,%eax
f0125e79:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125e7e:	74 17                	je     f0125e97 <test_kheap_virt_addr+0xfe1>
f0125e80:	83 ec 04             	sub    $0x4,%esp
f0125e83:	68 e4 ba 13 f0       	push   $0xf013bae4
f0125e88:	68 58 09 00 00       	push   $0x958
f0125e8d:	68 5a b3 13 f0       	push   $0xf013b35a
f0125e92:	e8 6e a3 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e97:	e8 01 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125e9c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ea2:	e8 21 df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ea7:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125ead:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125eb3:	83 ec 0c             	sub    $0xc,%esp
f0125eb6:	50                   	push   %eax
f0125eb7:	e8 94 1a fe ff       	call   f0107950 <kfree>
f0125ebc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ebf:	e8 04 df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ec4:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125eca:	74 17                	je     f0125ee3 <test_kheap_virt_addr+0x102d>
f0125ecc:	83 ec 04             	sub    $0x4,%esp
f0125ecf:	68 74 b3 13 f0       	push   $0xf013b374
f0125ed4:	68 5e 09 00 00       	push   $0x95e
f0125ed9:	68 5a b3 13 f0       	push   $0xf013b35a
f0125ede:	e8 22 a3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125ee3:	e8 b5 6c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125ee8:	89 c2                	mov    %eax,%edx
f0125eea:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125ef0:	29 c2                	sub    %eax,%edx
f0125ef2:	89 d0                	mov    %edx,%eax
f0125ef4:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125ef9:	74 17                	je     f0125f12 <test_kheap_virt_addr+0x105c>
f0125efb:	83 ec 04             	sub    $0x4,%esp
f0125efe:	68 e4 ba 13 f0       	push   $0xf013bae4
f0125f03:	68 5f 09 00 00       	push   $0x95f
f0125f08:	68 5a b3 13 f0       	push   $0xf013b35a
f0125f0d:	e8 f3 a2 fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125f12:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125f19:	10 00 00 
f0125f1c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125f22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f27:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125f2d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125f33:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f38:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125f3e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125f44:	29 d0                	sub    %edx,%eax
f0125f46:	89 c1                	mov    %eax,%ecx
f0125f48:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125f4f:	10 00 00 
f0125f52:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125f57:	0f b6 d0             	movzbl %al,%edx
f0125f5a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125f60:	01 d0                	add    %edx,%eax
f0125f62:	48                   	dec    %eax
f0125f63:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125f69:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125f6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f74:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125f7a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125f80:	29 d0                	sub    %edx,%eax
f0125f82:	01 c1                	add    %eax,%ecx
f0125f84:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125f8b:	10 00 00 
f0125f8e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125f93:	0f b6 c0             	movzbl %al,%eax
f0125f96:	c1 e0 04             	shl    $0x4,%eax
f0125f99:	89 c2                	mov    %eax,%edx
f0125f9b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125fa1:	01 d0                	add    %edx,%eax
f0125fa3:	48                   	dec    %eax
f0125fa4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125faa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125fb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fb5:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125fbb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125fc1:	29 d0                	sub    %edx,%eax
f0125fc3:	01 c8                	add    %ecx,%eax
f0125fc5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125fca:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125fd0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125fd7:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125fde:	10 00 00 
f0125fe1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125fe7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125fec:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125ff2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ffd:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0126003:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126009:	29 d0                	sub    %edx,%eax
f012600b:	89 c1                	mov    %eax,%ecx
f012600d:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126014:	10 00 00 
f0126017:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012601c:	0f b6 d0             	movzbl %al,%edx
f012601f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126025:	01 d0                	add    %edx,%eax
f0126027:	48                   	dec    %eax
f0126028:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f012602e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126034:	ba 00 00 00 00       	mov    $0x0,%edx
f0126039:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f012603f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126045:	29 d0                	sub    %edx,%eax
f0126047:	01 c1                	add    %eax,%ecx
f0126049:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0126050:	10 00 00 
f0126053:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126058:	0f b6 c0             	movzbl %al,%eax
f012605b:	c1 e0 04             	shl    $0x4,%eax
f012605e:	89 c2                	mov    %eax,%edx
f0126060:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126066:	01 d0                	add    %edx,%eax
f0126068:	48                   	dec    %eax
f0126069:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012606f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126075:	ba 00 00 00 00       	mov    $0x0,%edx
f012607a:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0126080:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126086:	29 d0                	sub    %edx,%eax
f0126088:	01 c1                	add    %eax,%ecx
f012608a:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0126091:	10 00 00 
f0126094:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012609a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012609f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01260a5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01260ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01260b0:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01260b6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01260bc:	29 d0                	sub    %edx,%eax
f01260be:	29 c1                	sub    %eax,%ecx
f01260c0:	89 c8                	mov    %ecx,%eax
f01260c2:	05 00 40 00 00       	add    $0x4000,%eax
f01260c7:	c1 e8 0c             	shr    $0xc,%eax
f01260ca:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01260d0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01260d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01260d9:	eb 41                	jmp    f012611c <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01260db:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01260e1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01260e4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01260e7:	83 ec 0c             	sub    $0xc,%esp
f01260ea:	50                   	push   %eax
f01260eb:	e8 87 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f01260f0:	83 c4 10             	add    $0x10,%esp
f01260f3:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01260f9:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0126100:	74 17                	je     f0126119 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0126102:	83 ec 04             	sub    $0x4,%esp
f0126105:	68 33 be 13 f0       	push   $0xf013be33
f012610a:	68 70 09 00 00       	push   $0x970
f012610f:	68 5a b3 13 f0       	push   $0xf013b35a
f0126114:	e8 ec a0 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126119:	ff 45 d8             	incl   -0x28(%ebp)
f012611c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126122:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126128:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012612b:	39 c2                	cmp    %eax,%edx
f012612d:	77 ac                	ja     f01260db <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012612f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126135:	05 00 04 00 00       	add    $0x400,%eax
f012613a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012613d:	e9 83 00 00 00       	jmp    f01261c5 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126142:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126148:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012614b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012614e:	83 ec 0c             	sub    $0xc,%esp
f0126151:	50                   	push   %eax
f0126152:	e8 20 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126157:	83 c4 10             	add    $0x10,%esp
f012615a:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126160:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0126167:	10 00 00 
f012616a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0126170:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126175:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012617b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126181:	ba 00 00 00 00       	mov    $0x0,%edx
f0126186:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012618c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126192:	29 d0                	sub    %edx,%eax
f0126194:	89 c2                	mov    %eax,%edx
f0126196:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126199:	c1 e0 0c             	shl    $0xc,%eax
f012619c:	01 d0                	add    %edx,%eax
f012619e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01261a3:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01261a9:	74 17                	je     f01261c2 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01261ab:	83 ec 04             	sub    $0x4,%esp
f01261ae:	68 33 be 13 f0       	push   $0xf013be33
f01261b3:	68 7a 09 00 00       	push   $0x97a
f01261b8:	68 5a b3 13 f0       	push   $0xf013b35a
f01261bd:	e8 43 a0 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01261c2:	ff 45 d8             	incl   -0x28(%ebp)
f01261c5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01261cb:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01261d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01261d4:	39 c2                	cmp    %eax,%edx
f01261d6:	0f 87 66 ff ff ff    	ja     f0126142 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01261dc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01261e2:	05 04 07 00 00       	add    $0x704,%eax
f01261e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01261ea:	eb 41                	jmp    f012622d <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01261ec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01261f2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01261f5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01261f8:	83 ec 0c             	sub    $0xc,%esp
f01261fb:	50                   	push   %eax
f01261fc:	e8 76 18 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126201:	83 c4 10             	add    $0x10,%esp
f0126204:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f012620a:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126211:	74 17                	je     f012622a <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126213:	83 ec 04             	sub    $0x4,%esp
f0126216:	68 33 be 13 f0       	push   $0xf013be33
f012621b:	68 83 09 00 00       	push   $0x983
f0126220:	68 5a b3 13 f0       	push   $0xf013b35a
f0126225:	e8 db 9f fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012622a:	ff 45 d8             	incl   -0x28(%ebp)
f012622d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126233:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126239:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012623c:	39 c2                	cmp    %eax,%edx
f012623e:	77 ac                	ja     f01261ec <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126240:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126246:	05 04 0d 00 00       	add    $0xd04,%eax
f012624b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012624e:	e9 83 00 00 00       	jmp    f01262d6 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126253:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126259:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012625c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012625f:	83 ec 0c             	sub    $0xc,%esp
f0126262:	50                   	push   %eax
f0126263:	e8 0f 18 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126268:	83 c4 10             	add    $0x10,%esp
f012626b:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126271:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0126278:	10 00 00 
f012627b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126281:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126286:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f012628c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126292:	ba 00 00 00 00       	mov    $0x0,%edx
f0126297:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f012629d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01262a3:	29 d0                	sub    %edx,%eax
f01262a5:	89 c2                	mov    %eax,%edx
f01262a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01262aa:	c1 e0 0c             	shl    $0xc,%eax
f01262ad:	01 d0                	add    %edx,%eax
f01262af:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01262b4:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01262ba:	74 17                	je     f01262d3 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01262bc:	83 ec 04             	sub    $0x4,%esp
f01262bf:	68 33 be 13 f0       	push   $0xf013be33
f01262c4:	68 8c 09 00 00       	push   $0x98c
f01262c9:	68 5a b3 13 f0       	push   $0xf013b35a
f01262ce:	e8 32 9f fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01262d3:	ff 45 d8             	incl   -0x28(%ebp)
f01262d6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01262dc:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01262e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01262e5:	39 c2                	cmp    %eax,%edx
f01262e7:	0f 87 66 ff ff ff    	ja     f0126253 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f01262ed:	83 ec 0c             	sub    $0xc,%esp
f01262f0:	68 e5 b4 13 f0       	push   $0xf013b4e5
f01262f5:	e8 14 aa fd ff       	call   f0100d0e <cprintf>
f01262fa:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01262fd:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126304:	eb 54                	jmp    f012635a <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126306:	83 ec 0c             	sub    $0xc,%esp
f0126309:	ff 75 d4             	pushl  -0x2c(%ebp)
f012630c:	e8 66 17 fe ff       	call   f0107a77 <kheap_virtual_address>
f0126311:	83 c4 10             	add    $0x10,%esp
f0126314:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f012631a:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126321:	74 30                	je     f0126353 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126323:	83 ec 04             	sub    $0x4,%esp
f0126326:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012632c:	ff 75 d4             	pushl  -0x2c(%ebp)
f012632f:	68 81 be 13 f0       	push   $0xf013be81
f0126334:	e8 d5 a9 fd ff       	call   f0100d0e <cprintf>
f0126339:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f012633c:	83 ec 04             	sub    $0x4,%esp
f012633f:	68 33 be 13 f0       	push   $0xf013be33
f0126344:	68 9c 09 00 00       	push   $0x99c
f0126349:	68 5a b3 13 f0       	push   $0xf013b35a
f012634e:	e8 b2 9e fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126353:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f012635a:	b8 bc 1e 88 00       	mov    $0x881ebc,%eax
f012635f:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126362:	72 a2                	jb     f0126306 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126364:	83 ec 0c             	sub    $0xc,%esp
f0126367:	68 3e b5 13 f0       	push   $0xf013b53e
f012636c:	e8 9d a9 fd ff       	call   f0100d0e <cprintf>
f0126371:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126374:	83 ec 0c             	sub    $0xc,%esp
f0126377:	68 a0 be 13 f0       	push   $0xf013bea0
f012637c:	e8 8d a9 fd ff       	call   f0100d0e <cprintf>
f0126381:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126384:	b8 01 00 00 00       	mov    $0x1,%eax
f0126389:	89 f4                	mov    %esi,%esp

}
f012638b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012638e:	5b                   	pop    %ebx
f012638f:	5e                   	pop    %esi
f0126390:	5f                   	pop    %edi
f0126391:	5d                   	pop    %ebp
f0126392:	c3                   	ret    

f0126393 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126393:	55                   	push   %ebp
f0126394:	89 e5                	mov    %esp,%ebp
f0126396:	57                   	push   %edi
f0126397:	56                   	push   %esi
f0126398:	53                   	push   %ebx
f0126399:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f012639f:	a0 23 2d 19 f0       	mov    0xf0192d23,%al
f01263a4:	84 c0                	test   %al,%al
f01263a6:	74 56                	je     f01263fe <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01263a8:	c6 05 23 2d 19 f0 00 	movb   $0x0,0xf0192d23
		initFreeFrames = sys_calculate_free_frames() ;
f01263af:	e8 e9 67 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01263b4:	a3 b8 1e 88 f0       	mov    %eax,0xf0881eb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01263b9:	e8 0a da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01263be:	a3 b4 1e 88 f0       	mov    %eax,0xf0881eb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01263c3:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01263c9:	bb fd bf 13 f0       	mov    $0xf013bffd,%ebx
f01263ce:	ba 11 00 00 00       	mov    $0x11,%edx
f01263d3:	89 c7                	mov    %eax,%edi
f01263d5:	89 de                	mov    %ebx,%esi
f01263d7:	89 d1                	mov    %edx,%ecx
f01263d9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01263db:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01263e1:	b9 53 00 00 00       	mov    $0x53,%ecx
f01263e6:	b0 00                	mov    $0x0,%al
f01263e8:	89 d7                	mov    %edx,%edi
f01263ea:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f01263ec:	83 ec 0c             	sub    $0xc,%esp
f01263ef:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01263f5:	50                   	push   %eax
f01263f6:	e8 75 a9 fd ff       	call   f0100d70 <execute_command>
f01263fb:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f01263fe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126405:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012640c:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0126411:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126414:	eb 2d                	jmp    f0126443 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126416:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126419:	05 5c 05 00 00       	add    $0x55c,%eax
f012641e:	83 ec 08             	sub    $0x8,%esp
f0126421:	68 e7 be 13 f0       	push   $0xf013bee7
f0126426:	50                   	push   %eax
f0126427:	e8 79 af 00 00       	call   f01313a5 <strcmp>
f012642c:	83 c4 10             	add    $0x10,%esp
f012642f:	85 c0                	test   %eax,%eax
f0126431:	75 08                	jne    f012643b <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126433:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126436:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126439:	eb 2f                	jmp    f012646a <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012643b:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0126440:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126443:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126447:	74 08                	je     f0126451 <test_three_creation_functions+0xbe>
f0126449:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012644c:	8b 40 44             	mov    0x44(%eax),%eax
f012644f:	eb 05                	jmp    f0126456 <test_three_creation_functions+0xc3>
f0126451:	b8 00 00 00 00       	mov    $0x0,%eax
f0126456:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f012645b:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0126460:	85 c0                	test   %eax,%eax
f0126462:	75 b2                	jne    f0126416 <test_three_creation_functions+0x83>
f0126464:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126468:	75 ac                	jne    f0126416 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012646a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012646d:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126473:	85 c0                	test   %eax,%eax
f0126475:	74 17                	je     f012648e <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126477:	83 ec 04             	sub    $0x4,%esp
f012647a:	68 f0 be 13 f0       	push   $0xf013bef0
f012647f:	68 c6 09 00 00       	push   $0x9c6
f0126484:	68 5a b3 13 f0       	push   $0xf013b35a
f0126489:	e8 77 9d fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f012648e:	83 ec 0c             	sub    $0xc,%esp
f0126491:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126494:	e8 7d 19 fe ff       	call   f0107e16 <env_page_ws_get_size>
f0126499:	83 c4 10             	add    $0x10,%esp
f012649c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f012649f:	e8 f9 66 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01264a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01264a7:	e8 1c d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01264ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264af:	a1 b4 1e 88 f0       	mov    0xf0881eb4,%eax
f01264b4:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01264b7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01264ba:	74 17                	je     f01264d3 <test_three_creation_functions+0x140>
f01264bc:	83 ec 04             	sub    $0x4,%esp
f01264bf:	68 74 b3 13 f0       	push   $0xf013b374
f01264c4:	68 cc 09 00 00       	push   $0x9cc
f01264c9:	68 5a b3 13 f0       	push   $0xf013b35a
f01264ce:	e8 32 9d fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01264d3:	a1 b8 1e 88 f0       	mov    0xf0881eb8,%eax
f01264d8:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01264db:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01264de:	83 c2 15             	add    $0x15,%edx
f01264e1:	39 d0                	cmp    %edx,%eax
f01264e3:	74 17                	je     f01264fc <test_three_creation_functions+0x169>
f01264e5:	83 ec 04             	sub    $0x4,%esp
f01264e8:	68 dc b3 13 f0       	push   $0xf013b3dc
f01264ed:	68 ce 09 00 00       	push   $0x9ce
f01264f2:	68 5a b3 13 f0       	push   $0xf013b35a
f01264f7:	e8 09 9d fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f01264fc:	83 ec 0c             	sub    $0xc,%esp
f01264ff:	68 00 10 00 00       	push   $0x1000
f0126504:	e8 7c 13 fe ff       	call   f0107885 <kmalloc>
f0126509:	83 c4 10             	add    $0x10,%esp
f012650c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f012650f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126516:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126519:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012651e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126521:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126524:	ba 00 00 00 00       	mov    $0x0,%edx
f0126529:	f7 75 cc             	divl   -0x34(%ebp)
f012652c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012652f:	29 d0                	sub    %edx,%eax
f0126531:	89 c1                	mov    %eax,%ecx
f0126533:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012653a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012653f:	0f b6 d0             	movzbl %al,%edx
f0126542:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126545:	01 d0                	add    %edx,%eax
f0126547:	48                   	dec    %eax
f0126548:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012654b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012654e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126553:	f7 75 c4             	divl   -0x3c(%ebp)
f0126556:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126559:	29 d0                	sub    %edx,%eax
f012655b:	01 c1                	add    %eax,%ecx
f012655d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126564:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126569:	0f b6 c0             	movzbl %al,%eax
f012656c:	c1 e0 04             	shl    $0x4,%eax
f012656f:	89 c2                	mov    %eax,%edx
f0126571:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126574:	01 d0                	add    %edx,%eax
f0126576:	48                   	dec    %eax
f0126577:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012657a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012657d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126582:	f7 75 bc             	divl   -0x44(%ebp)
f0126585:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126588:	29 d0                	sub    %edx,%eax
f012658a:	01 c8                	add    %ecx,%eax
f012658c:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126592:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126595:	39 c2                	cmp    %eax,%edx
f0126597:	74 17                	je     f01265b0 <test_three_creation_functions+0x21d>
f0126599:	83 ec 04             	sub    $0x4,%esp
f012659c:	68 40 bf 13 f0       	push   $0xf013bf40
f01265a1:	68 d2 09 00 00       	push   $0x9d2
f01265a6:	68 5a b3 13 f0       	push   $0xf013b35a
f01265ab:	e8 55 9c fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01265b0:	83 ec 0c             	sub    $0xc,%esp
f01265b3:	68 b0 bf 13 f0       	push   $0xf013bfb0
f01265b8:	e8 51 a7 fd ff       	call   f0100d0e <cprintf>
f01265bd:	83 c4 10             	add    $0x10,%esp

	return 1;
f01265c0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01265c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01265c8:	5b                   	pop    %ebx
f01265c9:	5e                   	pop    %esi
f01265ca:	5f                   	pop    %edi
f01265cb:	5d                   	pop    %ebp
f01265cc:	c3                   	ret    

f01265cd <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01265cd:	55                   	push   %ebp
f01265ce:	89 e5                	mov    %esp,%ebp
f01265d0:	57                   	push   %edi
f01265d1:	53                   	push   %ebx
f01265d2:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01265d8:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01265dc:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01265e0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01265e6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01265ec:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01265f3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01265fa:	e8 9e 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01265ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126602:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126608:	b9 14 00 00 00       	mov    $0x14,%ecx
f012660d:	b8 00 00 00 00       	mov    $0x0,%eax
f0126612:	89 d7                	mov    %edx,%edi
f0126614:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126616:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012661c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126621:	b8 00 00 00 00       	mov    $0x0,%eax
f0126626:	89 d7                	mov    %edx,%edi
f0126628:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012662a:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126630:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126635:	b8 00 00 00 00       	mov    $0x0,%eax
f012663a:	89 d7                	mov    %edx,%edi
f012663c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012663e:	e8 5a 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126643:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126646:	e8 7d d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012664b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012664e:	83 ec 0c             	sub    $0xc,%esp
f0126651:	68 00 fc 1f 00       	push   $0x1ffc00
f0126656:	e8 2a 12 fe ff       	call   f0107885 <kmalloc>
f012665b:	83 c4 10             	add    $0x10,%esp
f012665e:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126664:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012666a:	89 c1                	mov    %eax,%ecx
f012666c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126673:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126676:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012667b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012667e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126681:	ba 00 00 00 00       	mov    $0x0,%edx
f0126686:	f7 75 c8             	divl   -0x38(%ebp)
f0126689:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012668c:	29 d0                	sub    %edx,%eax
f012668e:	89 c3                	mov    %eax,%ebx
f0126690:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126697:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012669c:	0f b6 d0             	movzbl %al,%edx
f012669f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01266a2:	01 d0                	add    %edx,%eax
f01266a4:	48                   	dec    %eax
f01266a5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01266a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01266ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01266b0:	f7 75 c0             	divl   -0x40(%ebp)
f01266b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01266b6:	29 d0                	sub    %edx,%eax
f01266b8:	01 c3                	add    %eax,%ebx
f01266ba:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01266c1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01266c6:	0f b6 c0             	movzbl %al,%eax
f01266c9:	c1 e0 04             	shl    $0x4,%eax
f01266cc:	89 c2                	mov    %eax,%edx
f01266ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01266d1:	01 d0                	add    %edx,%eax
f01266d3:	48                   	dec    %eax
f01266d4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01266d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01266da:	ba 00 00 00 00       	mov    $0x0,%edx
f01266df:	f7 75 b8             	divl   -0x48(%ebp)
f01266e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01266e5:	29 d0                	sub    %edx,%eax
f01266e7:	01 d8                	add    %ebx,%eax
f01266e9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01266ee:	39 c1                	cmp    %eax,%ecx
f01266f0:	74 17                	je     f0126709 <test_kfreeall+0x13c>
f01266f2:	83 ec 04             	sub    $0x4,%esp
f01266f5:	68 40 b4 13 f0       	push   $0xf013b440
f01266fa:	68 f9 09 00 00       	push   $0x9f9
f01266ff:	68 5a b3 13 f0       	push   $0xf013b35a
f0126704:	e8 fc 9a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126709:	e8 ba d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012670e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126711:	74 17                	je     f012672a <test_kfreeall+0x15d>
f0126713:	83 ec 04             	sub    $0x4,%esp
f0126716:	68 74 b3 13 f0       	push   $0xf013b374
f012671b:	68 fa 09 00 00       	push   $0x9fa
f0126720:	68 5a b3 13 f0       	push   $0xf013b35a
f0126725:	e8 db 9a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012672a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012672d:	e8 6b 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126732:	29 c3                	sub    %eax,%ebx
f0126734:	89 d8                	mov    %ebx,%eax
f0126736:	3d 00 02 00 00       	cmp    $0x200,%eax
f012673b:	74 17                	je     f0126754 <test_kfreeall+0x187>
f012673d:	83 ec 04             	sub    $0x4,%esp
f0126740:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126745:	68 fb 09 00 00       	push   $0x9fb
f012674a:	68 5a b3 13 f0       	push   $0xf013b35a
f012674f:	e8 b1 9a fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126754:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012675b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012675e:	e8 3a 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126763:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126766:	e8 5d d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012676b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012676e:	83 ec 0c             	sub    $0xc,%esp
f0126771:	68 00 fc 1f 00       	push   $0x1ffc00
f0126776:	e8 0a 11 fe ff       	call   f0107885 <kmalloc>
f012677b:	83 c4 10             	add    $0x10,%esp
f012677e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126784:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012678a:	89 c1                	mov    %eax,%ecx
f012678c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126793:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126796:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012679b:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012679e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01267a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01267a6:	f7 75 b0             	divl   -0x50(%ebp)
f01267a9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01267ac:	29 d0                	sub    %edx,%eax
f01267ae:	89 c3                	mov    %eax,%ebx
f01267b0:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01267b7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01267bc:	0f b6 d0             	movzbl %al,%edx
f01267bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01267c2:	01 d0                	add    %edx,%eax
f01267c4:	48                   	dec    %eax
f01267c5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01267c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01267cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01267d0:	f7 75 a8             	divl   -0x58(%ebp)
f01267d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01267d6:	29 d0                	sub    %edx,%eax
f01267d8:	01 c3                	add    %eax,%ebx
f01267da:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01267e1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01267e6:	0f b6 c0             	movzbl %al,%eax
f01267e9:	c1 e0 04             	shl    $0x4,%eax
f01267ec:	89 c2                	mov    %eax,%edx
f01267ee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01267f1:	01 d0                	add    %edx,%eax
f01267f3:	48                   	dec    %eax
f01267f4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01267f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01267fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01267ff:	f7 75 a0             	divl   -0x60(%ebp)
f0126802:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126805:	29 d0                	sub    %edx,%eax
f0126807:	01 d8                	add    %ebx,%eax
f0126809:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012680e:	39 c1                	cmp    %eax,%ecx
f0126810:	74 17                	je     f0126829 <test_kfreeall+0x25c>
f0126812:	83 ec 04             	sub    $0x4,%esp
f0126815:	68 40 b4 13 f0       	push   $0xf013b440
f012681a:	68 02 0a 00 00       	push   $0xa02
f012681f:	68 5a b3 13 f0       	push   $0xf013b35a
f0126824:	e8 dc 99 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126829:	e8 9a d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012682e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126831:	74 17                	je     f012684a <test_kfreeall+0x27d>
f0126833:	83 ec 04             	sub    $0x4,%esp
f0126836:	68 74 b3 13 f0       	push   $0xf013b374
f012683b:	68 03 0a 00 00       	push   $0xa03
f0126840:	68 5a b3 13 f0       	push   $0xf013b35a
f0126845:	e8 bb 99 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012684a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012684d:	e8 4b 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126852:	29 c3                	sub    %eax,%ebx
f0126854:	89 d8                	mov    %ebx,%eax
f0126856:	3d 00 02 00 00       	cmp    $0x200,%eax
f012685b:	74 17                	je     f0126874 <test_kfreeall+0x2a7>
f012685d:	83 ec 04             	sub    $0x4,%esp
f0126860:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126865:	68 04 0a 00 00       	push   $0xa04
f012686a:	68 5a b3 13 f0       	push   $0xf013b35a
f012686f:	e8 91 99 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126874:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f012687b:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012687e:	e8 1a 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126883:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126886:	e8 3d d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012688b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012688e:	83 ec 0c             	sub    $0xc,%esp
f0126891:	68 00 08 00 00       	push   $0x800
f0126896:	e8 ea 0f fe ff       	call   f0107885 <kmalloc>
f012689b:	83 c4 10             	add    $0x10,%esp
f012689e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01268a4:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01268aa:	89 c1                	mov    %eax,%ecx
f01268ac:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01268b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01268b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01268bb:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01268be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01268c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01268c6:	f7 75 98             	divl   -0x68(%ebp)
f01268c9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01268cc:	29 d0                	sub    %edx,%eax
f01268ce:	89 c3                	mov    %eax,%ebx
f01268d0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01268d7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01268dc:	0f b6 d0             	movzbl %al,%edx
f01268df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01268e2:	01 d0                	add    %edx,%eax
f01268e4:	48                   	dec    %eax
f01268e5:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01268e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01268eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01268f0:	f7 75 90             	divl   -0x70(%ebp)
f01268f3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01268f6:	29 d0                	sub    %edx,%eax
f01268f8:	01 c3                	add    %eax,%ebx
f01268fa:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126901:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126906:	0f b6 c0             	movzbl %al,%eax
f0126909:	c1 e0 04             	shl    $0x4,%eax
f012690c:	89 c2                	mov    %eax,%edx
f012690e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126911:	01 d0                	add    %edx,%eax
f0126913:	48                   	dec    %eax
f0126914:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126917:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012691a:	ba 00 00 00 00       	mov    $0x0,%edx
f012691f:	f7 75 88             	divl   -0x78(%ebp)
f0126922:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126925:	29 d0                	sub    %edx,%eax
f0126927:	01 d8                	add    %ebx,%eax
f0126929:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012692e:	39 c1                	cmp    %eax,%ecx
f0126930:	74 17                	je     f0126949 <test_kfreeall+0x37c>
f0126932:	83 ec 04             	sub    $0x4,%esp
f0126935:	68 40 b4 13 f0       	push   $0xf013b440
f012693a:	68 0b 0a 00 00       	push   $0xa0b
f012693f:	68 5a b3 13 f0       	push   $0xf013b35a
f0126944:	e8 bc 98 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126949:	e8 7a d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012694e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126951:	74 17                	je     f012696a <test_kfreeall+0x39d>
f0126953:	83 ec 04             	sub    $0x4,%esp
f0126956:	68 74 b3 13 f0       	push   $0xf013b374
f012695b:	68 0c 0a 00 00       	push   $0xa0c
f0126960:	68 5a b3 13 f0       	push   $0xf013b35a
f0126965:	e8 9b 98 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012696a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012696d:	e8 2b 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126972:	29 c3                	sub    %eax,%ebx
f0126974:	89 d8                	mov    %ebx,%eax
f0126976:	83 f8 01             	cmp    $0x1,%eax
f0126979:	74 17                	je     f0126992 <test_kfreeall+0x3c5>
f012697b:	83 ec 04             	sub    $0x4,%esp
f012697e:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126983:	68 0d 0a 00 00       	push   $0xa0d
f0126988:	68 5a b3 13 f0       	push   $0xf013b35a
f012698d:	e8 73 98 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126992:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126999:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012699c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01269a2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01269a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269ac:	eb 0e                	jmp    f01269bc <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f01269ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01269b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269b4:	01 d0                	add    %edx,%eax
f01269b6:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01269b9:	ff 45 f4             	incl   -0xc(%ebp)
f01269bc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01269c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269c5:	7f e7                	jg     f01269ae <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01269c7:	e8 d1 61 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01269cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269cf:	e8 f4 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01269d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01269d7:	83 ec 0c             	sub    $0xc,%esp
f01269da:	68 00 08 00 00       	push   $0x800
f01269df:	e8 a1 0e fe ff       	call   f0107885 <kmalloc>
f01269e4:	83 c4 10             	add    $0x10,%esp
f01269e7:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269ed:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01269f3:	89 c1                	mov    %eax,%ecx
f01269f5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01269fc:	10 00 00 
f01269ff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126a0a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126a10:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a1b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126a21:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126a27:	29 d0                	sub    %edx,%eax
f0126a29:	89 c3                	mov    %eax,%ebx
f0126a2b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126a32:	10 00 00 
f0126a35:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126a3a:	0f b6 d0             	movzbl %al,%edx
f0126a3d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a43:	01 d0                	add    %edx,%eax
f0126a45:	48                   	dec    %eax
f0126a46:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126a4c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a57:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126a5d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126a63:	29 d0                	sub    %edx,%eax
f0126a65:	01 c3                	add    %eax,%ebx
f0126a67:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126a6e:	10 00 00 
f0126a71:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126a76:	0f b6 c0             	movzbl %al,%eax
f0126a79:	c1 e0 04             	shl    $0x4,%eax
f0126a7c:	89 c2                	mov    %eax,%edx
f0126a7e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126a84:	01 d0                	add    %edx,%eax
f0126a86:	48                   	dec    %eax
f0126a87:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126a8d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a98:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126a9e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126aa4:	29 d0                	sub    %edx,%eax
f0126aa6:	01 d8                	add    %ebx,%eax
f0126aa8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126aad:	39 c1                	cmp    %eax,%ecx
f0126aaf:	74 17                	je     f0126ac8 <test_kfreeall+0x4fb>
f0126ab1:	83 ec 04             	sub    $0x4,%esp
f0126ab4:	68 40 b4 13 f0       	push   $0xf013b440
f0126ab9:	68 19 0a 00 00       	push   $0xa19
f0126abe:	68 5a b3 13 f0       	push   $0xf013b35a
f0126ac3:	e8 3d 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ac8:	e8 fb d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126acd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ad0:	74 17                	je     f0126ae9 <test_kfreeall+0x51c>
f0126ad2:	83 ec 04             	sub    $0x4,%esp
f0126ad5:	68 74 b3 13 f0       	push   $0xf013b374
f0126ada:	68 1a 0a 00 00       	push   $0xa1a
f0126adf:	68 5a b3 13 f0       	push   $0xf013b35a
f0126ae4:	e8 1c 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ae9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126aec:	e8 ac 60 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126af1:	29 c3                	sub    %eax,%ebx
f0126af3:	89 d8                	mov    %ebx,%eax
f0126af5:	83 f8 01             	cmp    $0x1,%eax
f0126af8:	74 17                	je     f0126b11 <test_kfreeall+0x544>
f0126afa:	83 ec 04             	sub    $0x4,%esp
f0126afd:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126b02:	68 1b 0a 00 00       	push   $0xa1b
f0126b07:	68 5a b3 13 f0       	push   $0xf013b35a
f0126b0c:	e8 f4 96 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126b11:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126b18:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126b1b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126b21:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126b24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b2b:	eb 0e                	jmp    f0126b3b <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126b2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b30:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126b33:	01 d0                	add    %edx,%eax
f0126b35:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126b38:	ff 45 f4             	incl   -0xc(%ebp)
f0126b3b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126b41:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b44:	7f e7                	jg     f0126b2d <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b46:	e8 52 60 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126b4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b4e:	e8 75 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b53:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126b56:	83 ec 0c             	sub    $0xc,%esp
f0126b59:	68 00 1c 00 00       	push   $0x1c00
f0126b5e:	e8 22 0d fe ff       	call   f0107885 <kmalloc>
f0126b63:	83 c4 10             	add    $0x10,%esp
f0126b66:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b6c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126b72:	89 c1                	mov    %eax,%ecx
f0126b74:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126b7b:	10 00 00 
f0126b7e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126b84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b89:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126b8f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b9a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126ba0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126ba6:	29 d0                	sub    %edx,%eax
f0126ba8:	89 c3                	mov    %eax,%ebx
f0126baa:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126bb1:	10 00 00 
f0126bb4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126bb9:	0f b6 d0             	movzbl %al,%edx
f0126bbc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126bc2:	01 d0                	add    %edx,%eax
f0126bc4:	48                   	dec    %eax
f0126bc5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126bcb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126bd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bd6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126bdc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126be2:	29 d0                	sub    %edx,%eax
f0126be4:	01 c3                	add    %eax,%ebx
f0126be6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126bed:	10 00 00 
f0126bf0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126bf5:	0f b6 c0             	movzbl %al,%eax
f0126bf8:	c1 e0 04             	shl    $0x4,%eax
f0126bfb:	89 c2                	mov    %eax,%edx
f0126bfd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126c03:	01 d0                	add    %edx,%eax
f0126c05:	48                   	dec    %eax
f0126c06:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126c0c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126c12:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c17:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126c1d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126c23:	29 d0                	sub    %edx,%eax
f0126c25:	01 d8                	add    %ebx,%eax
f0126c27:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126c2c:	39 c1                	cmp    %eax,%ecx
f0126c2e:	74 17                	je     f0126c47 <test_kfreeall+0x67a>
f0126c30:	83 ec 04             	sub    $0x4,%esp
f0126c33:	68 40 b4 13 f0       	push   $0xf013b440
f0126c38:	68 27 0a 00 00       	push   $0xa27
f0126c3d:	68 5a b3 13 f0       	push   $0xf013b35a
f0126c42:	e8 be 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c47:	e8 7c d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c4c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c4f:	74 17                	je     f0126c68 <test_kfreeall+0x69b>
f0126c51:	83 ec 04             	sub    $0x4,%esp
f0126c54:	68 74 b3 13 f0       	push   $0xf013b374
f0126c59:	68 28 0a 00 00       	push   $0xa28
f0126c5e:	68 5a b3 13 f0       	push   $0xf013b35a
f0126c63:	e8 9d 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c68:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c6b:	e8 2d 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126c70:	29 c3                	sub    %eax,%ebx
f0126c72:	89 d8                	mov    %ebx,%eax
f0126c74:	83 f8 02             	cmp    $0x2,%eax
f0126c77:	74 17                	je     f0126c90 <test_kfreeall+0x6c3>
f0126c79:	83 ec 04             	sub    $0x4,%esp
f0126c7c:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126c81:	68 29 0a 00 00       	push   $0xa29
f0126c86:	68 5a b3 13 f0       	push   $0xf013b35a
f0126c8b:	e8 75 95 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126c90:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126c97:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126c9a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126ca0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126ca3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126caa:	eb 0e                	jmp    f0126cba <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126cac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126caf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cb2:	01 d0                	add    %edx,%eax
f0126cb4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126cb7:	ff 45 f4             	incl   -0xc(%ebp)
f0126cba:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126cc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cc3:	7f e7                	jg     f0126cac <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cc5:	e8 d3 5e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126cca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ccd:	e8 f6 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126cd5:	83 ec 0c             	sub    $0xc,%esp
f0126cd8:	68 00 fc 2f 00       	push   $0x2ffc00
f0126cdd:	e8 a3 0b fe ff       	call   f0107885 <kmalloc>
f0126ce2:	83 c4 10             	add    $0x10,%esp
f0126ce5:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ceb:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126cf1:	89 c1                	mov    %eax,%ecx
f0126cf3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126cfa:	10 00 00 
f0126cfd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126d03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d08:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126d0e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d19:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126d1f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126d25:	29 d0                	sub    %edx,%eax
f0126d27:	89 c3                	mov    %eax,%ebx
f0126d29:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126d30:	10 00 00 
f0126d33:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126d38:	0f b6 d0             	movzbl %al,%edx
f0126d3b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126d41:	01 d0                	add    %edx,%eax
f0126d43:	48                   	dec    %eax
f0126d44:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126d4a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d55:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126d5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126d61:	29 d0                	sub    %edx,%eax
f0126d63:	01 c3                	add    %eax,%ebx
f0126d65:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126d6c:	10 00 00 
f0126d6f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126d74:	0f b6 c0             	movzbl %al,%eax
f0126d77:	c1 e0 04             	shl    $0x4,%eax
f0126d7a:	89 c2                	mov    %eax,%edx
f0126d7c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126d82:	01 d0                	add    %edx,%eax
f0126d84:	48                   	dec    %eax
f0126d85:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126d8b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126d91:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d96:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126d9c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126da2:	29 d0                	sub    %edx,%eax
f0126da4:	01 d8                	add    %ebx,%eax
f0126da6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126dab:	39 c1                	cmp    %eax,%ecx
f0126dad:	74 17                	je     f0126dc6 <test_kfreeall+0x7f9>
f0126daf:	83 ec 04             	sub    $0x4,%esp
f0126db2:	68 40 b4 13 f0       	push   $0xf013b440
f0126db7:	68 35 0a 00 00       	push   $0xa35
f0126dbc:	68 5a b3 13 f0       	push   $0xf013b35a
f0126dc1:	e8 3f 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dc6:	e8 fd cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126dcb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126dce:	74 17                	je     f0126de7 <test_kfreeall+0x81a>
f0126dd0:	83 ec 04             	sub    $0x4,%esp
f0126dd3:	68 74 b3 13 f0       	push   $0xf013b374
f0126dd8:	68 36 0a 00 00       	push   $0xa36
f0126ddd:	68 5a b3 13 f0       	push   $0xf013b35a
f0126de2:	e8 1e 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126de7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126dea:	e8 ae 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126def:	29 c3                	sub    %eax,%ebx
f0126df1:	89 d8                	mov    %ebx,%eax
f0126df3:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126df8:	74 17                	je     f0126e11 <test_kfreeall+0x844>
f0126dfa:	83 ec 04             	sub    $0x4,%esp
f0126dfd:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126e02:	68 37 0a 00 00       	push   $0xa37
f0126e07:	68 5a b3 13 f0       	push   $0xf013b35a
f0126e0c:	e8 f4 93 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126e11:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126e18:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126e1b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126e21:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126e24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e2b:	eb 0e                	jmp    f0126e3b <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126e2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e30:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e33:	01 d0                	add    %edx,%eax
f0126e35:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126e38:	ff 45 f4             	incl   -0xc(%ebp)
f0126e3b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126e41:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e44:	7f e7                	jg     f0126e2d <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e46:	e8 52 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126e4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e4e:	e8 75 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e53:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126e56:	83 ec 0c             	sub    $0xc,%esp
f0126e59:	68 00 fc 5f 00       	push   $0x5ffc00
f0126e5e:	e8 22 0a fe ff       	call   f0107885 <kmalloc>
f0126e63:	83 c4 10             	add    $0x10,%esp
f0126e66:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e6c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126e72:	89 c1                	mov    %eax,%ecx
f0126e74:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126e7b:	10 00 00 
f0126e7e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126e84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e89:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126e8f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126e95:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e9a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126ea0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126ea6:	29 d0                	sub    %edx,%eax
f0126ea8:	89 c3                	mov    %eax,%ebx
f0126eaa:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126eb1:	10 00 00 
f0126eb4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126eb9:	0f b6 d0             	movzbl %al,%edx
f0126ebc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126ec2:	01 d0                	add    %edx,%eax
f0126ec4:	48                   	dec    %eax
f0126ec5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126ecb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ed6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126edc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126ee2:	29 d0                	sub    %edx,%eax
f0126ee4:	01 c3                	add    %eax,%ebx
f0126ee6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126eed:	10 00 00 
f0126ef0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126ef5:	0f b6 c0             	movzbl %al,%eax
f0126ef8:	c1 e0 04             	shl    $0x4,%eax
f0126efb:	89 c2                	mov    %eax,%edx
f0126efd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126f03:	01 d0                	add    %edx,%eax
f0126f05:	48                   	dec    %eax
f0126f06:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126f0c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126f12:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f17:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126f1d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126f23:	29 d0                	sub    %edx,%eax
f0126f25:	01 d8                	add    %ebx,%eax
f0126f27:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126f2c:	39 c1                	cmp    %eax,%ecx
f0126f2e:	74 17                	je     f0126f47 <test_kfreeall+0x97a>
f0126f30:	83 ec 04             	sub    $0x4,%esp
f0126f33:	68 40 b4 13 f0       	push   $0xf013b440
f0126f38:	68 43 0a 00 00       	push   $0xa43
f0126f3d:	68 5a b3 13 f0       	push   $0xf013b35a
f0126f42:	e8 be 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f47:	e8 7c ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f4c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f4f:	74 17                	je     f0126f68 <test_kfreeall+0x99b>
f0126f51:	83 ec 04             	sub    $0x4,%esp
f0126f54:	68 74 b3 13 f0       	push   $0xf013b374
f0126f59:	68 44 0a 00 00       	push   $0xa44
f0126f5e:	68 5a b3 13 f0       	push   $0xf013b35a
f0126f63:	e8 9d 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f68:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f6b:	e8 2d 5c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126f70:	29 c3                	sub    %eax,%ebx
f0126f72:	89 d8                	mov    %ebx,%eax
f0126f74:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126f79:	74 17                	je     f0126f92 <test_kfreeall+0x9c5>
f0126f7b:	83 ec 04             	sub    $0x4,%esp
f0126f7e:	68 dc b3 13 f0       	push   $0xf013b3dc
f0126f83:	68 45 0a 00 00       	push   $0xa45
f0126f88:	68 5a b3 13 f0       	push   $0xf013b35a
f0126f8d:	e8 73 92 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126f92:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126f99:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f9c:	e8 fc 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126fa1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fa4:	e8 1f ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fa9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126fac:	83 ec 0c             	sub    $0xc,%esp
f0126faf:	68 00 38 00 00       	push   $0x3800
f0126fb4:	e8 cc 08 fe ff       	call   f0107885 <kmalloc>
f0126fb9:	83 c4 10             	add    $0x10,%esp
f0126fbc:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126fc2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126fc8:	89 c1                	mov    %eax,%ecx
f0126fca:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126fd1:	10 00 00 
f0126fd4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126fda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fdf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126fe5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126feb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ff0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126ff6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126ffc:	29 d0                	sub    %edx,%eax
f0126ffe:	89 c3                	mov    %eax,%ebx
f0127000:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127007:	10 00 00 
f012700a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012700f:	0f b6 d0             	movzbl %al,%edx
f0127012:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127018:	01 d0                	add    %edx,%eax
f012701a:	48                   	dec    %eax
f012701b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127021:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127027:	ba 00 00 00 00       	mov    $0x0,%edx
f012702c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127032:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127038:	29 d0                	sub    %edx,%eax
f012703a:	01 c3                	add    %eax,%ebx
f012703c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0127043:	10 00 00 
f0127046:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012704b:	0f b6 c0             	movzbl %al,%eax
f012704e:	c1 e0 04             	shl    $0x4,%eax
f0127051:	89 c2                	mov    %eax,%edx
f0127053:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127059:	01 d0                	add    %edx,%eax
f012705b:	48                   	dec    %eax
f012705c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0127062:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127068:	ba 00 00 00 00       	mov    $0x0,%edx
f012706d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0127073:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127079:	29 d0                	sub    %edx,%eax
f012707b:	01 d8                	add    %ebx,%eax
f012707d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0127082:	39 c1                	cmp    %eax,%ecx
f0127084:	74 17                	je     f012709d <test_kfreeall+0xad0>
f0127086:	83 ec 04             	sub    $0x4,%esp
f0127089:	68 40 b4 13 f0       	push   $0xf013b440
f012708e:	68 4c 0a 00 00       	push   $0xa4c
f0127093:	68 5a b3 13 f0       	push   $0xf013b35a
f0127098:	e8 68 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012709d:	e8 26 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270a5:	74 17                	je     f01270be <test_kfreeall+0xaf1>
f01270a7:	83 ec 04             	sub    $0x4,%esp
f01270aa:	68 74 b3 13 f0       	push   $0xf013b374
f01270af:	68 4d 0a 00 00       	push   $0xa4d
f01270b4:	68 5a b3 13 f0       	push   $0xf013b35a
f01270b9:	e8 47 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01270c1:	e8 d7 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01270c6:	29 c3                	sub    %eax,%ebx
f01270c8:	89 d8                	mov    %ebx,%eax
f01270ca:	83 f8 04             	cmp    $0x4,%eax
f01270cd:	74 17                	je     f01270e6 <test_kfreeall+0xb19>
f01270cf:	83 ec 04             	sub    $0x4,%esp
f01270d2:	68 dc b3 13 f0       	push   $0xf013b3dc
f01270d7:	68 4e 0a 00 00       	push   $0xa4e
f01270dc:	68 5a b3 13 f0       	push   $0xf013b35a
f01270e1:	e8 1f 91 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01270e6:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01270ed:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01270f0:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01270f6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01270f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127100:	eb 0e                	jmp    f0127110 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0127102:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127105:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127108:	01 d0                	add    %edx,%eax
f012710a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012710d:	ff 45 f4             	incl   -0xc(%ebp)
f0127110:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127116:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127119:	7f e7                	jg     f0127102 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012711b:	e8 7d 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127120:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127126:	e8 9d cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012712b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0127131:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127137:	83 ec 0c             	sub    $0xc,%esp
f012713a:	50                   	push   %eax
f012713b:	e8 10 08 fe ff       	call   f0107950 <kfree>
f0127140:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127143:	e8 80 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127148:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012714e:	74 17                	je     f0127167 <test_kfreeall+0xb9a>
f0127150:	83 ec 04             	sub    $0x4,%esp
f0127153:	68 74 b3 13 f0       	push   $0xf013b374
f0127158:	68 5d 0a 00 00       	push   $0xa5d
f012715d:	68 5a b3 13 f0       	push   $0xf013b35a
f0127162:	e8 9e 90 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0127167:	e8 31 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012716c:	89 c2                	mov    %eax,%edx
f012716e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127174:	29 c2                	sub    %eax,%edx
f0127176:	89 d0                	mov    %edx,%eax
f0127178:	3d 00 02 00 00       	cmp    $0x200,%eax
f012717d:	74 17                	je     f0127196 <test_kfreeall+0xbc9>
f012717f:	83 ec 04             	sub    $0x4,%esp
f0127182:	68 e4 ba 13 f0       	push   $0xf013bae4
f0127187:	68 5e 0a 00 00       	push   $0xa5e
f012718c:	68 5a b3 13 f0       	push   $0xf013b35a
f0127191:	e8 6f 90 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127196:	e8 02 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012719b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271a1:	e8 22 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01271a6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01271ac:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01271b2:	83 ec 0c             	sub    $0xc,%esp
f01271b5:	50                   	push   %eax
f01271b6:	e8 95 07 fe ff       	call   f0107950 <kfree>
f01271bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271be:	e8 05 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01271c3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01271c9:	74 17                	je     f01271e2 <test_kfreeall+0xc15>
f01271cb:	83 ec 04             	sub    $0x4,%esp
f01271ce:	68 74 b3 13 f0       	push   $0xf013b374
f01271d3:	68 64 0a 00 00       	push   $0xa64
f01271d8:	68 5a b3 13 f0       	push   $0xf013b35a
f01271dd:	e8 23 90 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01271e2:	e8 b6 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01271e7:	89 c2                	mov    %eax,%edx
f01271e9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01271ef:	29 c2                	sub    %eax,%edx
f01271f1:	89 d0                	mov    %edx,%eax
f01271f3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01271f8:	74 17                	je     f0127211 <test_kfreeall+0xc44>
f01271fa:	83 ec 04             	sub    $0x4,%esp
f01271fd:	68 e4 ba 13 f0       	push   $0xf013bae4
f0127202:	68 65 0a 00 00       	push   $0xa65
f0127207:	68 5a b3 13 f0       	push   $0xf013b35a
f012720c:	e8 f4 8f fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127211:	e8 87 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127216:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012721c:	e8 a7 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127221:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127227:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012722d:	83 ec 0c             	sub    $0xc,%esp
f0127230:	50                   	push   %eax
f0127231:	e8 1a 07 fe ff       	call   f0107950 <kfree>
f0127236:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127239:	e8 8a cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012723e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127244:	74 17                	je     f012725d <test_kfreeall+0xc90>
f0127246:	83 ec 04             	sub    $0x4,%esp
f0127249:	68 74 b3 13 f0       	push   $0xf013b374
f012724e:	68 6b 0a 00 00       	push   $0xa6b
f0127253:	68 5a b3 13 f0       	push   $0xf013b35a
f0127258:	e8 a8 8f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012725d:	e8 3b 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127262:	89 c2                	mov    %eax,%edx
f0127264:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012726a:	29 c2                	sub    %eax,%edx
f012726c:	89 d0                	mov    %edx,%eax
f012726e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127273:	74 17                	je     f012728c <test_kfreeall+0xcbf>
f0127275:	83 ec 04             	sub    $0x4,%esp
f0127278:	68 e4 ba 13 f0       	push   $0xf013bae4
f012727d:	68 6c 0a 00 00       	push   $0xa6c
f0127282:	68 5a b3 13 f0       	push   $0xf013b35a
f0127287:	e8 79 8f fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012728c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127292:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127295:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012729c:	eb 1e                	jmp    f01272bc <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f012729e:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01272a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01272a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272aa:	01 c8                	add    %ecx,%eax
f01272ac:	8a 00                	mov    (%eax),%al
f01272ae:	0f be c0             	movsbl %al,%eax
f01272b1:	01 d0                	add    %edx,%eax
f01272b3:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01272b9:	ff 45 f4             	incl   -0xc(%ebp)
f01272bc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01272c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01272c5:	7f d7                	jg     f012729e <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01272c7:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01272cd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01272d3:	01 c0                	add    %eax,%eax
f01272d5:	39 c2                	cmp    %eax,%edx
f01272d7:	74 17                	je     f01272f0 <test_kfreeall+0xd23>
f01272d9:	83 ec 04             	sub    $0x4,%esp
f01272dc:	68 40 bb 13 f0       	push   $0xf013bb40
f01272e1:	68 78 0a 00 00       	push   $0xa78
f01272e6:	68 5a b3 13 f0       	push   $0xf013b35a
f01272eb:	e8 15 8f fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01272f0:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01272f6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01272f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127300:	eb 1e                	jmp    f0127320 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127302:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127308:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012730b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012730e:	01 c8                	add    %ecx,%eax
f0127310:	8a 00                	mov    (%eax),%al
f0127312:	0f be c0             	movsbl %al,%eax
f0127315:	01 d0                	add    %edx,%eax
f0127317:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012731d:	ff 45 f4             	incl   -0xc(%ebp)
f0127320:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127326:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127329:	7f d7                	jg     f0127302 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012732b:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127331:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127337:	89 c1                	mov    %eax,%ecx
f0127339:	01 c9                	add    %ecx,%ecx
f012733b:	01 c8                	add    %ecx,%eax
f012733d:	39 c2                	cmp    %eax,%edx
f012733f:	74 17                	je     f0127358 <test_kfreeall+0xd8b>
f0127341:	83 ec 04             	sub    $0x4,%esp
f0127344:	68 40 bb 13 f0       	push   $0xf013bb40
f0127349:	68 80 0a 00 00       	push   $0xa80
f012734e:	68 5a b3 13 f0       	push   $0xf013b35a
f0127353:	e8 ad 8e fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127358:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012735e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127361:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127368:	eb 1e                	jmp    f0127388 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f012736a:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127370:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127373:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127376:	01 c8                	add    %ecx,%eax
f0127378:	8a 00                	mov    (%eax),%al
f012737a:	0f be c0             	movsbl %al,%eax
f012737d:	01 d0                	add    %edx,%eax
f012737f:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127385:	ff 45 f4             	incl   -0xc(%ebp)
f0127388:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012738e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127391:	7f d7                	jg     f012736a <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127393:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127399:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012739f:	c1 e2 02             	shl    $0x2,%edx
f01273a2:	39 d0                	cmp    %edx,%eax
f01273a4:	74 17                	je     f01273bd <test_kfreeall+0xdf0>
f01273a6:	83 ec 04             	sub    $0x4,%esp
f01273a9:	68 40 bb 13 f0       	push   $0xf013bb40
f01273ae:	68 88 0a 00 00       	push   $0xa88
f01273b3:	68 5a b3 13 f0       	push   $0xf013b35a
f01273b8:	e8 48 8e fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01273bd:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01273c3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01273c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273cd:	eb 1e                	jmp    f01273ed <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01273cf:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01273d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01273d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273db:	01 c8                	add    %ecx,%eax
f01273dd:	8a 00                	mov    (%eax),%al
f01273df:	0f be c0             	movsbl %al,%eax
f01273e2:	01 d0                	add    %edx,%eax
f01273e4:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01273ea:	ff 45 f4             	incl   -0xc(%ebp)
f01273ed:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01273f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01273f6:	7f d7                	jg     f01273cf <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01273f8:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01273fe:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127404:	89 d0                	mov    %edx,%eax
f0127406:	c1 e0 02             	shl    $0x2,%eax
f0127409:	01 d0                	add    %edx,%eax
f012740b:	39 c1                	cmp    %eax,%ecx
f012740d:	74 17                	je     f0127426 <test_kfreeall+0xe59>
f012740f:	83 ec 04             	sub    $0x4,%esp
f0127412:	68 40 bb 13 f0       	push   $0xf013bb40
f0127417:	68 90 0a 00 00       	push   $0xa90
f012741c:	68 5a b3 13 f0       	push   $0xf013b35a
f0127421:	e8 df 8d fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127426:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012742c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012742f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127436:	eb 1e                	jmp    f0127456 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127438:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012743e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127441:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127444:	01 c8                	add    %ecx,%eax
f0127446:	8a 00                	mov    (%eax),%al
f0127448:	0f be c0             	movsbl %al,%eax
f012744b:	01 d0                	add    %edx,%eax
f012744d:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127453:	ff 45 f4             	incl   -0xc(%ebp)
f0127456:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012745c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012745f:	7f d7                	jg     f0127438 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127461:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127467:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012746d:	89 d0                	mov    %edx,%eax
f012746f:	01 c0                	add    %eax,%eax
f0127471:	01 d0                	add    %edx,%eax
f0127473:	01 c0                	add    %eax,%eax
f0127475:	01 d0                	add    %edx,%eax
f0127477:	39 c1                	cmp    %eax,%ecx
f0127479:	74 17                	je     f0127492 <test_kfreeall+0xec5>
f012747b:	83 ec 04             	sub    $0x4,%esp
f012747e:	68 40 bb 13 f0       	push   $0xf013bb40
f0127483:	68 98 0a 00 00       	push   $0xa98
f0127488:	68 5a b3 13 f0       	push   $0xf013b35a
f012748d:	e8 73 8d fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127492:	e8 06 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127497:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012749a:	e8 29 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012749f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01274a2:	83 ec 0c             	sub    $0xc,%esp
f01274a5:	68 00 50 00 00       	push   $0x5000
f01274aa:	e8 d6 03 fe ff       	call   f0107885 <kmalloc>
f01274af:	83 c4 10             	add    $0x10,%esp
f01274b2:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274b8:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01274be:	89 c1                	mov    %eax,%ecx
f01274c0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01274c7:	10 00 00 
f01274ca:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01274d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01274d5:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01274db:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01274e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01274e6:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01274ec:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01274f2:	29 d0                	sub    %edx,%eax
f01274f4:	89 c3                	mov    %eax,%ebx
f01274f6:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01274fd:	10 00 00 
f0127500:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127505:	0f b6 d0             	movzbl %al,%edx
f0127508:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012750e:	01 d0                	add    %edx,%eax
f0127510:	48                   	dec    %eax
f0127511:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127517:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012751d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127522:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127528:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012752e:	29 d0                	sub    %edx,%eax
f0127530:	01 c3                	add    %eax,%ebx
f0127532:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127539:	10 00 00 
f012753c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127541:	0f b6 c0             	movzbl %al,%eax
f0127544:	c1 e0 04             	shl    $0x4,%eax
f0127547:	89 c2                	mov    %eax,%edx
f0127549:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012754f:	01 d0                	add    %edx,%eax
f0127551:	48                   	dec    %eax
f0127552:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127558:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012755e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127563:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127569:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012756f:	29 d0                	sub    %edx,%eax
f0127571:	01 d8                	add    %ebx,%eax
f0127573:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127578:	39 c1                	cmp    %eax,%ecx
f012757a:	74 17                	je     f0127593 <test_kfreeall+0xfc6>
f012757c:	83 ec 04             	sub    $0x4,%esp
f012757f:	68 40 b4 13 f0       	push   $0xf013b440
f0127584:	68 a1 0a 00 00       	push   $0xaa1
f0127589:	68 5a b3 13 f0       	push   $0xf013b35a
f012758e:	e8 72 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127593:	e8 30 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127598:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012759b:	74 17                	je     f01275b4 <test_kfreeall+0xfe7>
f012759d:	83 ec 04             	sub    $0x4,%esp
f01275a0:	68 74 b3 13 f0       	push   $0xf013b374
f01275a5:	68 a2 0a 00 00       	push   $0xaa2
f01275aa:	68 5a b3 13 f0       	push   $0xf013b35a
f01275af:	e8 51 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275b4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01275b7:	e8 e1 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01275bc:	29 c3                	sub    %eax,%ebx
f01275be:	89 d8                	mov    %ebx,%eax
f01275c0:	83 f8 05             	cmp    $0x5,%eax
f01275c3:	74 17                	je     f01275dc <test_kfreeall+0x100f>
f01275c5:	83 ec 04             	sub    $0x4,%esp
f01275c8:	68 dc b3 13 f0       	push   $0xf013b3dc
f01275cd:	68 a3 0a 00 00       	push   $0xaa3
f01275d2:	68 5a b3 13 f0       	push   $0xf013b35a
f01275d7:	e8 29 8c fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01275dc:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01275e3:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01275e6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01275ec:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01275ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275f6:	eb 0e                	jmp    f0127606 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f01275f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275fb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275fe:	01 d0                	add    %edx,%eax
f0127600:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127603:	ff 45 f4             	incl   -0xc(%ebp)
f0127606:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012760c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012760f:	7f e7                	jg     f01275f8 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127611:	e8 87 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127616:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127619:	e8 aa c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012761e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127621:	83 ec 0c             	sub    $0xc,%esp
f0127624:	68 00 00 10 00       	push   $0x100000
f0127629:	e8 57 02 fe ff       	call   f0107885 <kmalloc>
f012762e:	83 c4 10             	add    $0x10,%esp
f0127631:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127637:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012763d:	89 c1                	mov    %eax,%ecx
f012763f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127646:	10 00 00 
f0127649:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012764f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127654:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012765a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127660:	ba 00 00 00 00       	mov    $0x0,%edx
f0127665:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012766b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127671:	29 d0                	sub    %edx,%eax
f0127673:	89 c3                	mov    %eax,%ebx
f0127675:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012767c:	10 00 00 
f012767f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127684:	0f b6 d0             	movzbl %al,%edx
f0127687:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012768d:	01 d0                	add    %edx,%eax
f012768f:	48                   	dec    %eax
f0127690:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127696:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012769c:	ba 00 00 00 00       	mov    $0x0,%edx
f01276a1:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01276a7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01276ad:	29 d0                	sub    %edx,%eax
f01276af:	01 c3                	add    %eax,%ebx
f01276b1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01276b8:	10 00 00 
f01276bb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01276c0:	0f b6 c0             	movzbl %al,%eax
f01276c3:	c1 e0 04             	shl    $0x4,%eax
f01276c6:	89 c2                	mov    %eax,%edx
f01276c8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01276ce:	01 d0                	add    %edx,%eax
f01276d0:	48                   	dec    %eax
f01276d1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01276d7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01276dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01276e2:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01276e8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01276ee:	29 d0                	sub    %edx,%eax
f01276f0:	01 d8                	add    %ebx,%eax
f01276f2:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01276f7:	39 c1                	cmp    %eax,%ecx
f01276f9:	74 17                	je     f0127712 <test_kfreeall+0x1145>
f01276fb:	83 ec 04             	sub    $0x4,%esp
f01276fe:	68 40 b4 13 f0       	push   $0xf013b440
f0127703:	68 af 0a 00 00       	push   $0xaaf
f0127708:	68 5a b3 13 f0       	push   $0xf013b35a
f012770d:	e8 f3 8a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127712:	e8 b1 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127717:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012771a:	74 17                	je     f0127733 <test_kfreeall+0x1166>
f012771c:	83 ec 04             	sub    $0x4,%esp
f012771f:	68 74 b3 13 f0       	push   $0xf013b374
f0127724:	68 b0 0a 00 00       	push   $0xab0
f0127729:	68 5a b3 13 f0       	push   $0xf013b35a
f012772e:	e8 d2 8a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127733:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127736:	e8 62 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012773b:	29 c3                	sub    %eax,%ebx
f012773d:	89 d8                	mov    %ebx,%eax
f012773f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127744:	74 17                	je     f012775d <test_kfreeall+0x1190>
f0127746:	83 ec 04             	sub    $0x4,%esp
f0127749:	68 dc b3 13 f0       	push   $0xf013b3dc
f012774e:	68 b1 0a 00 00       	push   $0xab1
f0127753:	68 5a b3 13 f0       	push   $0xf013b35a
f0127758:	e8 a8 8a fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012775d:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127764:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127767:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012776d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127770:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127777:	eb 0e                	jmp    f0127787 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127779:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012777c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012777f:	01 d0                	add    %edx,%eax
f0127781:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127784:	ff 45 f4             	incl   -0xc(%ebp)
f0127787:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012778d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127790:	7f e7                	jg     f0127779 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127792:	e8 06 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127797:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012779a:	e8 29 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012779f:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01277a2:	e8 47 03 fe ff       	call   f0107aee <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277a7:	e8 1c c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01277af:	74 17                	je     f01277c8 <test_kfreeall+0x11fb>
f01277b1:	83 ec 04             	sub    $0x4,%esp
f01277b4:	68 74 b3 13 f0       	push   $0xf013b374
f01277b9:	68 c1 0a 00 00       	push   $0xac1
f01277be:	68 5a b3 13 f0       	push   $0xf013b35a
f01277c3:	e8 3d 8a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01277c8:	e8 d0 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01277cd:	89 c2                	mov    %eax,%edx
f01277cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01277d2:	89 d1                	mov    %edx,%ecx
f01277d4:	29 c1                	sub    %eax,%ecx
f01277d6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01277dd:	10 00 00 
f01277e0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01277e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277eb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01277f1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01277f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01277fc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127802:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127808:	29 d0                	sub    %edx,%eax
f012780a:	89 c3                	mov    %eax,%ebx
f012780c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127813:	10 00 00 
f0127816:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012781b:	0f b6 d0             	movzbl %al,%edx
f012781e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127824:	01 d0                	add    %edx,%eax
f0127826:	48                   	dec    %eax
f0127827:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012782d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127833:	ba 00 00 00 00       	mov    $0x0,%edx
f0127838:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012783e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127844:	29 d0                	sub    %edx,%eax
f0127846:	01 c3                	add    %eax,%ebx
f0127848:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012784f:	10 00 00 
f0127852:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127857:	0f b6 c0             	movzbl %al,%eax
f012785a:	c1 e0 04             	shl    $0x4,%eax
f012785d:	89 c2                	mov    %eax,%edx
f012785f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127865:	01 d0                	add    %edx,%eax
f0127867:	48                   	dec    %eax
f0127868:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012786e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127874:	ba 00 00 00 00       	mov    $0x0,%edx
f0127879:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012787f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127885:	29 d0                	sub    %edx,%eax
f0127887:	01 d8                	add    %ebx,%eax
f0127889:	05 00 40 00 00       	add    $0x4000,%eax
f012788e:	c1 e8 0c             	shr    $0xc,%eax
f0127891:	05 0d 04 00 00       	add    $0x40d,%eax
f0127896:	39 c1                	cmp    %eax,%ecx
f0127898:	74 17                	je     f01278b1 <test_kfreeall+0x12e4>
f012789a:	83 ec 04             	sub    $0x4,%esp
f012789d:	68 e4 ba 13 f0       	push   $0xf013bae4
f01278a2:	68 c2 0a 00 00       	push   $0xac2
f01278a7:	68 5a b3 13 f0       	push   $0xf013b35a
f01278ac:	e8 54 89 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01278b1:	83 ec 0c             	sub    $0xc,%esp
f01278b4:	6a 03                	push   $0x3
f01278b6:	e8 82 57 fe ff       	call   f010d03d <sys_bypassPageFault>
f01278bb:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01278be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278c5:	e9 82 00 00 00       	jmp    f012794c <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01278ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278cd:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01278d4:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01278d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278da:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01278dd:	e8 49 57 fe ff       	call   f010d02b <sys_rcr2>
f01278e2:	89 c2                	mov    %eax,%edx
f01278e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278e7:	39 c2                	cmp    %eax,%edx
f01278e9:	74 17                	je     f0127902 <test_kfreeall+0x1335>
f01278eb:	83 ec 04             	sub    $0x4,%esp
f01278ee:	68 c0 bb 13 f0       	push   $0xf013bbc0
f01278f3:	68 d0 0a 00 00       	push   $0xad0
f01278f8:	68 5a b3 13 f0       	push   $0xf013b35a
f01278fd:	e8 03 89 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127902:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127905:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012790c:	89 c2                	mov    %eax,%edx
f012790e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127911:	01 d0                	add    %edx,%eax
f0127913:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127916:	e8 10 57 fe ff       	call   f010d02b <sys_rcr2>
f012791b:	89 c2                	mov    %eax,%edx
f012791d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127920:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127927:	89 c1                	mov    %eax,%ecx
f0127929:	8b 45 80             	mov    -0x80(%ebp),%eax
f012792c:	01 c8                	add    %ecx,%eax
f012792e:	39 c2                	cmp    %eax,%edx
f0127930:	74 17                	je     f0127949 <test_kfreeall+0x137c>
f0127932:	83 ec 04             	sub    $0x4,%esp
f0127935:	68 c0 bb 13 f0       	push   $0xf013bbc0
f012793a:	68 d2 0a 00 00       	push   $0xad2
f012793f:	68 5a b3 13 f0       	push   $0xf013b35a
f0127944:	e8 bc 88 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127949:	ff 45 f4             	incl   -0xc(%ebp)
f012794c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127950:	0f 8e 74 ff ff ff    	jle    f01278ca <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127956:	83 ec 0c             	sub    $0xc,%esp
f0127959:	6a 00                	push   $0x0
f012795b:	e8 dd 56 fe ff       	call   f010d03d <sys_bypassPageFault>
f0127960:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127963:	e8 35 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127968:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012796b:	e8 58 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127970:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127973:	83 ec 0c             	sub    $0xc,%esp
f0127976:	68 00 00 40 00       	push   $0x400000
f012797b:	e8 05 ff fd ff       	call   f0107885 <kmalloc>
f0127980:	83 c4 10             	add    $0x10,%esp
f0127983:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127989:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012798f:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127994:	74 17                	je     f01279ad <test_kfreeall+0x13e0>
f0127996:	83 ec 04             	sub    $0x4,%esp
f0127999:	68 64 c0 13 f0       	push   $0xf013c064
f012799e:	68 de 0a 00 00       	push   $0xade
f01279a3:	68 5a b3 13 f0       	push   $0xf013b35a
f01279a8:	e8 58 88 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279ad:	e8 16 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01279b5:	74 17                	je     f01279ce <test_kfreeall+0x1401>
f01279b7:	83 ec 04             	sub    $0x4,%esp
f01279ba:	68 74 b3 13 f0       	push   $0xf013b374
f01279bf:	68 df 0a 00 00       	push   $0xadf
f01279c4:	68 5a b3 13 f0       	push   $0xf013b35a
f01279c9:	e8 37 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279ce:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01279d1:	e8 c7 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279d6:	29 c3                	sub    %eax,%ebx
f01279d8:	89 d8                	mov    %ebx,%eax
f01279da:	3d 00 04 00 00       	cmp    $0x400,%eax
f01279df:	74 17                	je     f01279f8 <test_kfreeall+0x142b>
f01279e1:	83 ec 04             	sub    $0x4,%esp
f01279e4:	68 dc b3 13 f0       	push   $0xf013b3dc
f01279e9:	68 e0 0a 00 00       	push   $0xae0
f01279ee:	68 5a b3 13 f0       	push   $0xf013b35a
f01279f3:	e8 0d 88 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01279f8:	e8 a0 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a00:	e8 c3 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a05:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127a08:	83 ec 0c             	sub    $0xc,%esp
f0127a0b:	68 00 30 00 00       	push   $0x3000
f0127a10:	e8 70 fe fd ff       	call   f0107885 <kmalloc>
f0127a15:	83 c4 10             	add    $0x10,%esp
f0127a18:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127a1e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127a24:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127a29:	74 17                	je     f0127a42 <test_kfreeall+0x1475>
f0127a2b:	83 ec 04             	sub    $0x4,%esp
f0127a2e:	68 64 c0 13 f0       	push   $0xf013c064
f0127a33:	68 e6 0a 00 00       	push   $0xae6
f0127a38:	68 5a b3 13 f0       	push   $0xf013b35a
f0127a3d:	e8 c3 87 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a42:	e8 81 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a47:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a4a:	74 17                	je     f0127a63 <test_kfreeall+0x1496>
f0127a4c:	83 ec 04             	sub    $0x4,%esp
f0127a4f:	68 74 b3 13 f0       	push   $0xf013b374
f0127a54:	68 e7 0a 00 00       	push   $0xae7
f0127a59:	68 5a b3 13 f0       	push   $0xf013b35a
f0127a5e:	e8 a2 87 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a63:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127a66:	e8 32 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a6b:	29 c3                	sub    %eax,%ebx
f0127a6d:	89 d8                	mov    %ebx,%eax
f0127a6f:	83 f8 03             	cmp    $0x3,%eax
f0127a72:	74 17                	je     f0127a8b <test_kfreeall+0x14be>
f0127a74:	83 ec 04             	sub    $0x4,%esp
f0127a77:	68 dc b3 13 f0       	push   $0xf013b3dc
f0127a7c:	68 e8 0a 00 00       	push   $0xae8
f0127a81:	68 5a b3 13 f0       	push   $0xf013b35a
f0127a86:	e8 7a 87 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127a8b:	e8 0d 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a93:	e8 30 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127a9b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127aa1:	83 ec 0c             	sub    $0xc,%esp
f0127aa4:	50                   	push   %eax
f0127aa5:	e8 a6 fe fd ff       	call   f0107950 <kfree>
f0127aaa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127aad:	e8 16 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ab2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ab5:	74 17                	je     f0127ace <test_kfreeall+0x1501>
f0127ab7:	83 ec 04             	sub    $0x4,%esp
f0127aba:	68 74 b3 13 f0       	push   $0xf013b374
f0127abf:	68 f2 0a 00 00       	push   $0xaf2
f0127ac4:	68 5a b3 13 f0       	push   $0xf013b35a
f0127ac9:	e8 37 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127ace:	e8 ca 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ad3:	89 c2                	mov    %eax,%edx
f0127ad5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ad8:	29 c2                	sub    %eax,%edx
f0127ada:	89 d0                	mov    %edx,%eax
f0127adc:	83 f8 03             	cmp    $0x3,%eax
f0127adf:	74 17                	je     f0127af8 <test_kfreeall+0x152b>
f0127ae1:	83 ec 04             	sub    $0x4,%esp
f0127ae4:	68 0c bc 13 f0       	push   $0xf013bc0c
f0127ae9:	68 f3 0a 00 00       	push   $0xaf3
f0127aee:	68 5a b3 13 f0       	push   $0xf013b35a
f0127af3:	e8 0d 87 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127af8:	e8 a0 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127afd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b00:	e8 c3 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b05:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127b08:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127b0e:	83 ec 0c             	sub    $0xc,%esp
f0127b11:	50                   	push   %eax
f0127b12:	e8 39 fe fd ff       	call   f0107950 <kfree>
f0127b17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b1a:	e8 a9 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b1f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127b22:	74 17                	je     f0127b3b <test_kfreeall+0x156e>
f0127b24:	83 ec 04             	sub    $0x4,%esp
f0127b27:	68 74 b3 13 f0       	push   $0xf013b374
f0127b2c:	68 fc 0a 00 00       	push   $0xafc
f0127b31:	68 5a b3 13 f0       	push   $0xf013b35a
f0127b36:	e8 ca 86 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127b3b:	e8 5d 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b40:	89 c2                	mov    %eax,%edx
f0127b42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127b45:	39 c2                	cmp    %eax,%edx
f0127b47:	74 17                	je     f0127b60 <test_kfreeall+0x1593>
f0127b49:	83 ec 04             	sub    $0x4,%esp
f0127b4c:	68 0c bc 13 f0       	push   $0xf013bc0c
f0127b51:	68 fd 0a 00 00       	push   $0xafd
f0127b56:	68 5a b3 13 f0       	push   $0xf013b35a
f0127b5b:	e8 a5 86 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b60:	e8 38 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b68:	e8 5b c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127b70:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127b76:	83 ec 0c             	sub    $0xc,%esp
f0127b79:	50                   	push   %eax
f0127b7a:	e8 d1 fd fd ff       	call   f0107950 <kfree>
f0127b7f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b82:	e8 41 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b87:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127b8a:	74 17                	je     f0127ba3 <test_kfreeall+0x15d6>
f0127b8c:	83 ec 04             	sub    $0x4,%esp
f0127b8f:	68 74 b3 13 f0       	push   $0xf013b374
f0127b94:	68 03 0b 00 00       	push   $0xb03
f0127b99:	68 5a b3 13 f0       	push   $0xf013b35a
f0127b9e:	e8 62 86 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127ba3:	e8 f5 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ba8:	89 c2                	mov    %eax,%edx
f0127baa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127bad:	39 c2                	cmp    %eax,%edx
f0127baf:	74 17                	je     f0127bc8 <test_kfreeall+0x15fb>
f0127bb1:	83 ec 04             	sub    $0x4,%esp
f0127bb4:	68 0c bc 13 f0       	push   $0xf013bc0c
f0127bb9:	68 04 0b 00 00       	push   $0xb04
f0127bbe:	68 5a b3 13 f0       	push   $0xf013b35a
f0127bc3:	e8 3d 86 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127bc8:	e8 d0 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127bcd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bd0:	e8 f3 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127bd5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127bd8:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127bde:	83 ec 0c             	sub    $0xc,%esp
f0127be1:	50                   	push   %eax
f0127be2:	e8 69 fd fd ff       	call   f0107950 <kfree>
f0127be7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bea:	e8 d9 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127bef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127bf2:	74 17                	je     f0127c0b <test_kfreeall+0x163e>
f0127bf4:	83 ec 04             	sub    $0x4,%esp
f0127bf7:	68 74 b3 13 f0       	push   $0xf013b374
f0127bfc:	68 0a 0b 00 00       	push   $0xb0a
f0127c01:	68 5a b3 13 f0       	push   $0xf013b35a
f0127c06:	e8 fa 85 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127c0b:	e8 8d 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127c10:	89 c2                	mov    %eax,%edx
f0127c12:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127c15:	39 c2                	cmp    %eax,%edx
f0127c17:	74 17                	je     f0127c30 <test_kfreeall+0x1663>
f0127c19:	83 ec 04             	sub    $0x4,%esp
f0127c1c:	68 0c bc 13 f0       	push   $0xf013bc0c
f0127c21:	68 0b 0b 00 00       	push   $0xb0b
f0127c26:	68 5a b3 13 f0       	push   $0xf013b35a
f0127c2b:	e8 d5 85 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127c30:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127c37:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127c3e:	eb 48                	jmp    f0127c88 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127c40:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127c43:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0127c48:	83 ec 04             	sub    $0x4,%esp
f0127c4b:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127c51:	51                   	push   %ecx
f0127c52:	52                   	push   %edx
f0127c53:	50                   	push   %eax
f0127c54:	e8 58 ee fd ff       	call   f0106ab1 <get_page_table>
f0127c59:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127c5c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127c62:	85 c0                	test   %eax,%eax
f0127c64:	75 17                	jne    f0127c7d <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127c66:	83 ec 04             	sub    $0x4,%esp
f0127c69:	68 5c bc 13 f0       	push   $0xf013bc5c
f0127c6e:	68 18 0b 00 00       	push   $0xb18
f0127c73:	68 5a b3 13 f0       	push   $0xf013b35a
f0127c78:	e8 88 85 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127c7d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127c84:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127c88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127c8c:	78 b2                	js     f0127c40 <test_kfreeall+0x1673>
f0127c8e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127c92:	7f 09                	jg     f0127c9d <test_kfreeall+0x16d0>
f0127c94:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127c9b:	76 a3                	jbe    f0127c40 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127c9d:	83 ec 0c             	sub    $0xc,%esp
f0127ca0:	68 b8 c0 13 f0       	push   $0xf013c0b8
f0127ca5:	e8 64 90 fd ff       	call   f0100d0e <cprintf>
f0127caa:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127cad:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127cb2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127cb5:	5b                   	pop    %ebx
f0127cb6:	5f                   	pop    %edi
f0127cb7:	5d                   	pop    %ebp
f0127cb8:	c3                   	ret    

f0127cb9 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127cb9:	55                   	push   %ebp
f0127cba:	89 e5                	mov    %esp,%ebp
f0127cbc:	57                   	push   %edi
f0127cbd:	53                   	push   %ebx
f0127cbe:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127cc4:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127cc8:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127ccc:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127cd2:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127cd8:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127cdf:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127ce6:	e8 b2 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ceb:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127cee:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127cf4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0127cfe:	89 d7                	mov    %edx,%edi
f0127d00:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127d02:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0127d08:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d12:	89 d7                	mov    %edx,%edi
f0127d14:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d16:	e8 82 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127d1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d1e:	e8 a5 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d23:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127d26:	83 ec 0c             	sub    $0xc,%esp
f0127d29:	68 00 fc 1f 00       	push   $0x1ffc00
f0127d2e:	e8 52 fb fd ff       	call   f0107885 <kmalloc>
f0127d33:	83 c4 10             	add    $0x10,%esp
f0127d36:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d3c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127d42:	89 c1                	mov    %eax,%ecx
f0127d44:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127d4b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127d4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d53:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127d56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127d59:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d5e:	f7 75 d4             	divl   -0x2c(%ebp)
f0127d61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127d64:	29 d0                	sub    %edx,%eax
f0127d66:	89 c3                	mov    %eax,%ebx
f0127d68:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127d6f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127d74:	0f b6 d0             	movzbl %al,%edx
f0127d77:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127d7a:	01 d0                	add    %edx,%eax
f0127d7c:	48                   	dec    %eax
f0127d7d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127d80:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127d83:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d88:	f7 75 cc             	divl   -0x34(%ebp)
f0127d8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127d8e:	29 d0                	sub    %edx,%eax
f0127d90:	01 c3                	add    %eax,%ebx
f0127d92:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127d99:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127d9e:	0f b6 c0             	movzbl %al,%eax
f0127da1:	c1 e0 04             	shl    $0x4,%eax
f0127da4:	89 c2                	mov    %eax,%edx
f0127da6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127da9:	01 d0                	add    %edx,%eax
f0127dab:	48                   	dec    %eax
f0127dac:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127daf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127db2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127db7:	f7 75 c4             	divl   -0x3c(%ebp)
f0127dba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127dbd:	29 d0                	sub    %edx,%eax
f0127dbf:	01 d8                	add    %ebx,%eax
f0127dc1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127dc6:	39 c1                	cmp    %eax,%ecx
f0127dc8:	74 17                	je     f0127de1 <test_kexpand+0x128>
f0127dca:	83 ec 04             	sub    $0x4,%esp
f0127dcd:	68 40 b4 13 f0       	push   $0xf013b440
f0127dd2:	68 43 0b 00 00       	push   $0xb43
f0127dd7:	68 5a b3 13 f0       	push   $0xf013b35a
f0127ddc:	e8 24 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127de1:	e8 e2 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127de6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127de9:	74 17                	je     f0127e02 <test_kexpand+0x149>
f0127deb:	83 ec 04             	sub    $0x4,%esp
f0127dee:	68 74 b3 13 f0       	push   $0xf013b374
f0127df3:	68 44 0b 00 00       	push   $0xb44
f0127df8:	68 5a b3 13 f0       	push   $0xf013b35a
f0127dfd:	e8 03 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e02:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e05:	e8 93 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127e0a:	29 c3                	sub    %eax,%ebx
f0127e0c:	89 d8                	mov    %ebx,%eax
f0127e0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e13:	74 17                	je     f0127e2c <test_kexpand+0x173>
f0127e15:	83 ec 04             	sub    $0x4,%esp
f0127e18:	68 dc b3 13 f0       	push   $0xf013b3dc
f0127e1d:	68 45 0b 00 00       	push   $0xb45
f0127e22:	68 5a b3 13 f0       	push   $0xf013b35a
f0127e27:	e8 d9 83 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127e2c:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127e33:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e36:	e8 62 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127e3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e3e:	e8 85 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e43:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127e46:	83 ec 0c             	sub    $0xc,%esp
f0127e49:	68 00 fc 1f 00       	push   $0x1ffc00
f0127e4e:	e8 32 fa fd ff       	call   f0107885 <kmalloc>
f0127e53:	83 c4 10             	add    $0x10,%esp
f0127e56:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e5c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127e62:	89 c1                	mov    %eax,%ecx
f0127e64:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127e6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127e6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e73:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127e76:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127e79:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e7e:	f7 75 bc             	divl   -0x44(%ebp)
f0127e81:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127e84:	29 d0                	sub    %edx,%eax
f0127e86:	89 c3                	mov    %eax,%ebx
f0127e88:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127e8f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127e94:	0f b6 d0             	movzbl %al,%edx
f0127e97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127e9a:	01 d0                	add    %edx,%eax
f0127e9c:	48                   	dec    %eax
f0127e9d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127ea0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ea3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ea8:	f7 75 b4             	divl   -0x4c(%ebp)
f0127eab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127eae:	29 d0                	sub    %edx,%eax
f0127eb0:	01 c3                	add    %eax,%ebx
f0127eb2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127eb9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127ebe:	0f b6 c0             	movzbl %al,%eax
f0127ec1:	c1 e0 04             	shl    $0x4,%eax
f0127ec4:	89 c2                	mov    %eax,%edx
f0127ec6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127ec9:	01 d0                	add    %edx,%eax
f0127ecb:	48                   	dec    %eax
f0127ecc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127ecf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127ed2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ed7:	f7 75 ac             	divl   -0x54(%ebp)
f0127eda:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127edd:	29 d0                	sub    %edx,%eax
f0127edf:	01 d8                	add    %ebx,%eax
f0127ee1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127ee6:	39 c1                	cmp    %eax,%ecx
f0127ee8:	74 17                	je     f0127f01 <test_kexpand+0x248>
f0127eea:	83 ec 04             	sub    $0x4,%esp
f0127eed:	68 40 b4 13 f0       	push   $0xf013b440
f0127ef2:	68 4c 0b 00 00       	push   $0xb4c
f0127ef7:	68 5a b3 13 f0       	push   $0xf013b35a
f0127efc:	e8 04 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f01:	e8 c2 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f06:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f09:	74 17                	je     f0127f22 <test_kexpand+0x269>
f0127f0b:	83 ec 04             	sub    $0x4,%esp
f0127f0e:	68 74 b3 13 f0       	push   $0xf013b374
f0127f13:	68 4d 0b 00 00       	push   $0xb4d
f0127f18:	68 5a b3 13 f0       	push   $0xf013b35a
f0127f1d:	e8 e3 82 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f22:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f25:	e8 73 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127f2a:	29 c3                	sub    %eax,%ebx
f0127f2c:	89 d8                	mov    %ebx,%eax
f0127f2e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f33:	74 17                	je     f0127f4c <test_kexpand+0x293>
f0127f35:	83 ec 04             	sub    $0x4,%esp
f0127f38:	68 dc b3 13 f0       	push   $0xf013b3dc
f0127f3d:	68 4e 0b 00 00       	push   $0xb4e
f0127f42:	68 5a b3 13 f0       	push   $0xf013b35a
f0127f47:	e8 b9 82 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f4c:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127f53:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f56:	e8 42 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127f5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f5e:	e8 65 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f63:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127f66:	83 ec 0c             	sub    $0xc,%esp
f0127f69:	68 00 08 00 00       	push   $0x800
f0127f6e:	e8 12 f9 fd ff       	call   f0107885 <kmalloc>
f0127f73:	83 c4 10             	add    $0x10,%esp
f0127f76:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f7c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127f82:	89 c1                	mov    %eax,%ecx
f0127f84:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127f8b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127f8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f93:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127f96:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127f99:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f9e:	f7 75 a4             	divl   -0x5c(%ebp)
f0127fa1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127fa4:	29 d0                	sub    %edx,%eax
f0127fa6:	89 c3                	mov    %eax,%ebx
f0127fa8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127faf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127fb4:	0f b6 d0             	movzbl %al,%edx
f0127fb7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127fba:	01 d0                	add    %edx,%eax
f0127fbc:	48                   	dec    %eax
f0127fbd:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127fc0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127fc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fc8:	f7 75 9c             	divl   -0x64(%ebp)
f0127fcb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127fce:	29 d0                	sub    %edx,%eax
f0127fd0:	01 c3                	add    %eax,%ebx
f0127fd2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127fd9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127fde:	0f b6 c0             	movzbl %al,%eax
f0127fe1:	c1 e0 04             	shl    $0x4,%eax
f0127fe4:	89 c2                	mov    %eax,%edx
f0127fe6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127fe9:	01 d0                	add    %edx,%eax
f0127feb:	48                   	dec    %eax
f0127fec:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127fef:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127ff2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ff7:	f7 75 94             	divl   -0x6c(%ebp)
f0127ffa:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127ffd:	29 d0                	sub    %edx,%eax
f0127fff:	01 d8                	add    %ebx,%eax
f0128001:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128006:	39 c1                	cmp    %eax,%ecx
f0128008:	74 17                	je     f0128021 <test_kexpand+0x368>
f012800a:	83 ec 04             	sub    $0x4,%esp
f012800d:	68 40 b4 13 f0       	push   $0xf013b440
f0128012:	68 55 0b 00 00       	push   $0xb55
f0128017:	68 5a b3 13 f0       	push   $0xf013b35a
f012801c:	e8 e4 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128021:	e8 a2 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128026:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128029:	74 17                	je     f0128042 <test_kexpand+0x389>
f012802b:	83 ec 04             	sub    $0x4,%esp
f012802e:	68 74 b3 13 f0       	push   $0xf013b374
f0128033:	68 56 0b 00 00       	push   $0xb56
f0128038:	68 5a b3 13 f0       	push   $0xf013b35a
f012803d:	e8 c3 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128042:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128045:	e8 53 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012804a:	29 c3                	sub    %eax,%ebx
f012804c:	89 d8                	mov    %ebx,%eax
f012804e:	83 f8 01             	cmp    $0x1,%eax
f0128051:	74 17                	je     f012806a <test_kexpand+0x3b1>
f0128053:	83 ec 04             	sub    $0x4,%esp
f0128056:	68 dc b3 13 f0       	push   $0xf013b3dc
f012805b:	68 57 0b 00 00       	push   $0xb57
f0128060:	68 5a b3 13 f0       	push   $0xf013b35a
f0128065:	e8 9b 81 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012806a:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0128071:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128074:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012807a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012807d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128084:	eb 0e                	jmp    f0128094 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0128086:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128089:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012808c:	01 d0                	add    %edx,%eax
f012808e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128091:	ff 45 f4             	incl   -0xc(%ebp)
f0128094:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012809a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012809d:	7f e7                	jg     f0128086 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012809f:	e8 f9 4a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01280a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280a7:	e8 1c bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01280af:	83 ec 0c             	sub    $0xc,%esp
f01280b2:	68 00 08 00 00       	push   $0x800
f01280b7:	e8 c9 f7 fd ff       	call   f0107885 <kmalloc>
f01280bc:	83 c4 10             	add    $0x10,%esp
f01280bf:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280c5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01280cb:	89 c1                	mov    %eax,%ecx
f01280cd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01280d4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01280d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01280dc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01280df:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01280e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01280e7:	f7 75 88             	divl   -0x78(%ebp)
f01280ea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01280ed:	29 d0                	sub    %edx,%eax
f01280ef:	89 c3                	mov    %eax,%ebx
f01280f1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01280f8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01280fd:	0f b6 d0             	movzbl %al,%edx
f0128100:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128103:	01 d0                	add    %edx,%eax
f0128105:	48                   	dec    %eax
f0128106:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012810c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128112:	ba 00 00 00 00       	mov    $0x0,%edx
f0128117:	f7 75 80             	divl   -0x80(%ebp)
f012811a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128120:	29 d0                	sub    %edx,%eax
f0128122:	01 c3                	add    %eax,%ebx
f0128124:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012812b:	10 00 00 
f012812e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128133:	0f b6 c0             	movzbl %al,%eax
f0128136:	c1 e0 04             	shl    $0x4,%eax
f0128139:	89 c2                	mov    %eax,%edx
f012813b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128141:	01 d0                	add    %edx,%eax
f0128143:	48                   	dec    %eax
f0128144:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012814a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128150:	ba 00 00 00 00       	mov    $0x0,%edx
f0128155:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012815b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128161:	29 d0                	sub    %edx,%eax
f0128163:	01 d8                	add    %ebx,%eax
f0128165:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012816a:	39 c1                	cmp    %eax,%ecx
f012816c:	74 17                	je     f0128185 <test_kexpand+0x4cc>
f012816e:	83 ec 04             	sub    $0x4,%esp
f0128171:	68 40 b4 13 f0       	push   $0xf013b440
f0128176:	68 63 0b 00 00       	push   $0xb63
f012817b:	68 5a b3 13 f0       	push   $0xf013b35a
f0128180:	e8 80 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128185:	e8 3e bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012818a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012818d:	74 17                	je     f01281a6 <test_kexpand+0x4ed>
f012818f:	83 ec 04             	sub    $0x4,%esp
f0128192:	68 74 b3 13 f0       	push   $0xf013b374
f0128197:	68 64 0b 00 00       	push   $0xb64
f012819c:	68 5a b3 13 f0       	push   $0xf013b35a
f01281a1:	e8 5f 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01281a9:	e8 ef 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01281ae:	29 c3                	sub    %eax,%ebx
f01281b0:	89 d8                	mov    %ebx,%eax
f01281b2:	83 f8 01             	cmp    $0x1,%eax
f01281b5:	74 17                	je     f01281ce <test_kexpand+0x515>
f01281b7:	83 ec 04             	sub    $0x4,%esp
f01281ba:	68 dc b3 13 f0       	push   $0xf013b3dc
f01281bf:	68 65 0b 00 00       	push   $0xb65
f01281c4:	68 5a b3 13 f0       	push   $0xf013b35a
f01281c9:	e8 37 80 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01281ce:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01281d5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01281d8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01281de:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01281e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281e8:	eb 0e                	jmp    f01281f8 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01281ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01281f0:	01 d0                	add    %edx,%eax
f01281f2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01281f5:	ff 45 f4             	incl   -0xc(%ebp)
f01281f8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01281fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128201:	7f e7                	jg     f01281ea <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128203:	e8 95 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128208:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012820b:	e8 b8 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128210:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128213:	83 ec 0c             	sub    $0xc,%esp
f0128216:	68 00 1c 00 00       	push   $0x1c00
f012821b:	e8 65 f6 fd ff       	call   f0107885 <kmalloc>
f0128220:	83 c4 10             	add    $0x10,%esp
f0128223:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128229:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012822f:	89 c1                	mov    %eax,%ecx
f0128231:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128238:	10 00 00 
f012823b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128241:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128246:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012824c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128252:	ba 00 00 00 00       	mov    $0x0,%edx
f0128257:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012825d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128263:	29 d0                	sub    %edx,%eax
f0128265:	89 c3                	mov    %eax,%ebx
f0128267:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012826e:	10 00 00 
f0128271:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128276:	0f b6 d0             	movzbl %al,%edx
f0128279:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012827f:	01 d0                	add    %edx,%eax
f0128281:	48                   	dec    %eax
f0128282:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128288:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012828e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128293:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128299:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012829f:	29 d0                	sub    %edx,%eax
f01282a1:	01 c3                	add    %eax,%ebx
f01282a3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01282aa:	10 00 00 
f01282ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01282b2:	0f b6 c0             	movzbl %al,%eax
f01282b5:	c1 e0 04             	shl    $0x4,%eax
f01282b8:	89 c2                	mov    %eax,%edx
f01282ba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01282c0:	01 d0                	add    %edx,%eax
f01282c2:	48                   	dec    %eax
f01282c3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01282c9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01282cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01282d4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01282da:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01282e0:	29 d0                	sub    %edx,%eax
f01282e2:	01 d8                	add    %ebx,%eax
f01282e4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01282e9:	39 c1                	cmp    %eax,%ecx
f01282eb:	74 17                	je     f0128304 <test_kexpand+0x64b>
f01282ed:	83 ec 04             	sub    $0x4,%esp
f01282f0:	68 40 b4 13 f0       	push   $0xf013b440
f01282f5:	68 71 0b 00 00       	push   $0xb71
f01282fa:	68 5a b3 13 f0       	push   $0xf013b35a
f01282ff:	e8 01 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128304:	e8 bf ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128309:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012830c:	74 17                	je     f0128325 <test_kexpand+0x66c>
f012830e:	83 ec 04             	sub    $0x4,%esp
f0128311:	68 74 b3 13 f0       	push   $0xf013b374
f0128316:	68 72 0b 00 00       	push   $0xb72
f012831b:	68 5a b3 13 f0       	push   $0xf013b35a
f0128320:	e8 e0 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128325:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128328:	e8 70 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012832d:	29 c3                	sub    %eax,%ebx
f012832f:	89 d8                	mov    %ebx,%eax
f0128331:	83 f8 02             	cmp    $0x2,%eax
f0128334:	74 17                	je     f012834d <test_kexpand+0x694>
f0128336:	83 ec 04             	sub    $0x4,%esp
f0128339:	68 dc b3 13 f0       	push   $0xf013b3dc
f012833e:	68 73 0b 00 00       	push   $0xb73
f0128343:	68 5a b3 13 f0       	push   $0xf013b35a
f0128348:	e8 b8 7e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012834d:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128354:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128357:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012835d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128360:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128367:	eb 0e                	jmp    f0128377 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128369:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012836c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012836f:	01 d0                	add    %edx,%eax
f0128371:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128374:	ff 45 f4             	incl   -0xc(%ebp)
f0128377:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012837d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128380:	7f e7                	jg     f0128369 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128382:	e8 16 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128387:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012838a:	e8 39 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012838f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128392:	83 ec 0c             	sub    $0xc,%esp
f0128395:	68 00 fc 2f 00       	push   $0x2ffc00
f012839a:	e8 e6 f4 fd ff       	call   f0107885 <kmalloc>
f012839f:	83 c4 10             	add    $0x10,%esp
f01283a2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283a8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01283ae:	89 c1                	mov    %eax,%ecx
f01283b0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01283b7:	10 00 00 
f01283ba:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01283c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283c5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01283cb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01283d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01283d6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01283dc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01283e2:	29 d0                	sub    %edx,%eax
f01283e4:	89 c3                	mov    %eax,%ebx
f01283e6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01283ed:	10 00 00 
f01283f0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01283f5:	0f b6 d0             	movzbl %al,%edx
f01283f8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01283fe:	01 d0                	add    %edx,%eax
f0128400:	48                   	dec    %eax
f0128401:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128407:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012840d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128412:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128418:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012841e:	29 d0                	sub    %edx,%eax
f0128420:	01 c3                	add    %eax,%ebx
f0128422:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128429:	10 00 00 
f012842c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128431:	0f b6 c0             	movzbl %al,%eax
f0128434:	c1 e0 04             	shl    $0x4,%eax
f0128437:	89 c2                	mov    %eax,%edx
f0128439:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012843f:	01 d0                	add    %edx,%eax
f0128441:	48                   	dec    %eax
f0128442:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128448:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012844e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128453:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128459:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012845f:	29 d0                	sub    %edx,%eax
f0128461:	01 d8                	add    %ebx,%eax
f0128463:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128468:	39 c1                	cmp    %eax,%ecx
f012846a:	74 17                	je     f0128483 <test_kexpand+0x7ca>
f012846c:	83 ec 04             	sub    $0x4,%esp
f012846f:	68 40 b4 13 f0       	push   $0xf013b440
f0128474:	68 7f 0b 00 00       	push   $0xb7f
f0128479:	68 5a b3 13 f0       	push   $0xf013b35a
f012847e:	e8 82 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128483:	e8 40 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128488:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012848b:	74 17                	je     f01284a4 <test_kexpand+0x7eb>
f012848d:	83 ec 04             	sub    $0x4,%esp
f0128490:	68 74 b3 13 f0       	push   $0xf013b374
f0128495:	68 80 0b 00 00       	push   $0xb80
f012849a:	68 5a b3 13 f0       	push   $0xf013b35a
f012849f:	e8 61 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284a4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284a7:	e8 f1 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01284ac:	29 c3                	sub    %eax,%ebx
f01284ae:	89 d8                	mov    %ebx,%eax
f01284b0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01284b5:	74 17                	je     f01284ce <test_kexpand+0x815>
f01284b7:	83 ec 04             	sub    $0x4,%esp
f01284ba:	68 dc b3 13 f0       	push   $0xf013b3dc
f01284bf:	68 81 0b 00 00       	push   $0xb81
f01284c4:	68 5a b3 13 f0       	push   $0xf013b35a
f01284c9:	e8 37 7d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01284ce:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01284d5:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01284d8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01284de:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01284e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284e8:	eb 0e                	jmp    f01284f8 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01284ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01284ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284f0:	01 d0                	add    %edx,%eax
f01284f2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01284f5:	ff 45 f4             	incl   -0xc(%ebp)
f01284f8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01284fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128501:	7f e7                	jg     f01284ea <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128503:	e8 95 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128508:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012850b:	e8 b8 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128510:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128513:	83 ec 0c             	sub    $0xc,%esp
f0128516:	68 00 00 60 00       	push   $0x600000
f012851b:	e8 65 f3 fd ff       	call   f0107885 <kmalloc>
f0128520:	83 c4 10             	add    $0x10,%esp
f0128523:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128529:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012852f:	89 c1                	mov    %eax,%ecx
f0128531:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128538:	10 00 00 
f012853b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128541:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128546:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012854c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128552:	ba 00 00 00 00       	mov    $0x0,%edx
f0128557:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012855d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128563:	29 d0                	sub    %edx,%eax
f0128565:	89 c3                	mov    %eax,%ebx
f0128567:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012856e:	10 00 00 
f0128571:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128576:	0f b6 d0             	movzbl %al,%edx
f0128579:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012857f:	01 d0                	add    %edx,%eax
f0128581:	48                   	dec    %eax
f0128582:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128588:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012858e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128593:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128599:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012859f:	29 d0                	sub    %edx,%eax
f01285a1:	01 c3                	add    %eax,%ebx
f01285a3:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01285aa:	10 00 00 
f01285ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01285b2:	0f b6 c0             	movzbl %al,%eax
f01285b5:	c1 e0 04             	shl    $0x4,%eax
f01285b8:	89 c2                	mov    %eax,%edx
f01285ba:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01285c0:	01 d0                	add    %edx,%eax
f01285c2:	48                   	dec    %eax
f01285c3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01285c9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01285cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01285d4:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01285da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01285e0:	29 d0                	sub    %edx,%eax
f01285e2:	01 d8                	add    %ebx,%eax
f01285e4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01285e9:	39 c1                	cmp    %eax,%ecx
f01285eb:	74 17                	je     f0128604 <test_kexpand+0x94b>
f01285ed:	83 ec 04             	sub    $0x4,%esp
f01285f0:	68 40 b4 13 f0       	push   $0xf013b440
f01285f5:	68 8d 0b 00 00       	push   $0xb8d
f01285fa:	68 5a b3 13 f0       	push   $0xf013b35a
f01285ff:	e8 01 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128604:	e8 bf b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128609:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012860c:	74 17                	je     f0128625 <test_kexpand+0x96c>
f012860e:	83 ec 04             	sub    $0x4,%esp
f0128611:	68 74 b3 13 f0       	push   $0xf013b374
f0128616:	68 8e 0b 00 00       	push   $0xb8e
f012861b:	68 5a b3 13 f0       	push   $0xf013b35a
f0128620:	e8 e0 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128625:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128628:	e8 70 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012862d:	29 c3                	sub    %eax,%ebx
f012862f:	89 d8                	mov    %ebx,%eax
f0128631:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128636:	74 17                	je     f012864f <test_kexpand+0x996>
f0128638:	83 ec 04             	sub    $0x4,%esp
f012863b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128640:	68 8f 0b 00 00       	push   $0xb8f
f0128645:	68 5a b3 13 f0       	push   $0xf013b35a
f012864a:	e8 b6 7b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f012864f:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128656:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128659:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012865f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128665:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012866c:	eb 1a                	jmp    f0128688 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f012866e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128671:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128678:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012867e:	01 c2                	add    %eax,%edx
f0128680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128683:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128685:	ff 45 f4             	incl   -0xc(%ebp)
f0128688:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012868e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128691:	7d db                	jge    f012866e <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128693:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f012869a:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f012869d:	e8 fb 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01286a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286a5:	e8 1e b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286aa:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01286ad:	83 ec 0c             	sub    $0xc,%esp
f01286b0:	68 00 00 70 00       	push   $0x700000
f01286b5:	e8 6e f4 fd ff       	call   f0107b28 <kexpand>
f01286ba:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01286bd:	e8 06 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01286c5:	74 19                	je     f01286e0 <test_kexpand+0xa27>
f01286c7:	68 f4 c0 13 f0       	push   $0xf013c0f4
f01286cc:	68 25 c1 13 f0       	push   $0xf013c125
f01286d1:	68 a0 0b 00 00       	push   $0xba0
f01286d6:	68 5a b3 13 f0       	push   $0xf013b35a
f01286db:	e8 25 7b fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01286e0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01286e3:	e8 b5 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01286e8:	29 c3                	sub    %eax,%ebx
f01286ea:	89 d8                	mov    %ebx,%eax
f01286ec:	3d 00 01 00 00       	cmp    $0x100,%eax
f01286f1:	74 19                	je     f012870c <test_kexpand+0xa53>
f01286f3:	68 3c c1 13 f0       	push   $0xf013c13c
f01286f8:	68 25 c1 13 f0       	push   $0xf013c125
f01286fd:	68 a1 0b 00 00       	push   $0xba1
f0128702:	68 5a b3 13 f0       	push   $0xf013b35a
f0128707:	e8 f9 7a fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012870c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128712:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128715:	eb 1a                	jmp    f0128731 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012871a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128721:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128727:	01 c2                	add    %eax,%edx
f0128729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012872c:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012872e:	ff 45 f4             	incl   -0xc(%ebp)
f0128731:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128734:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012873a:	7c db                	jl     f0128717 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012873c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128743:	eb 37                	jmp    f012877c <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128745:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128748:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012874f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128755:	01 d0                	add    %edx,%eax
f0128757:	8b 10                	mov    (%eax),%edx
f0128759:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012875c:	39 c2                	cmp    %eax,%edx
f012875e:	74 19                	je     f0128779 <test_kexpand+0xac0>
f0128760:	68 6c c1 13 f0       	push   $0xf013c16c
f0128765:	68 25 c1 13 f0       	push   $0xf013c125
f012876a:	68 ad 0b 00 00       	push   $0xbad
f012876f:	68 5a b3 13 f0       	push   $0xf013b35a
f0128774:	e8 8c 7a fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128779:	ff 45 f4             	incl   -0xc(%ebp)
f012877c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012877f:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128785:	7c be                	jl     f0128745 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128787:	e8 11 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012878c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012878f:	e8 34 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128794:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128797:	83 ec 0c             	sub    $0xc,%esp
f012879a:	68 00 00 a0 00       	push   $0xa00000
f012879f:	e8 84 f3 fd ff       	call   f0107b28 <kexpand>
f01287a4:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01287a7:	e8 1c b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287af:	74 19                	je     f01287ca <test_kexpand+0xb11>
f01287b1:	68 f4 c0 13 f0       	push   $0xf013c0f4
f01287b6:	68 25 c1 13 f0       	push   $0xf013c125
f01287bb:	68 b8 0b 00 00       	push   $0xbb8
f01287c0:	68 5a b3 13 f0       	push   $0xf013b35a
f01287c5:	e8 3b 7a fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01287ca:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287cd:	e8 cb 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287d2:	29 c3                	sub    %eax,%ebx
f01287d4:	89 d8                	mov    %ebx,%eax
f01287d6:	3d 00 03 00 00       	cmp    $0x300,%eax
f01287db:	74 19                	je     f01287f6 <test_kexpand+0xb3d>
f01287dd:	68 78 c1 13 f0       	push   $0xf013c178
f01287e2:	68 25 c1 13 f0       	push   $0xf013c125
f01287e7:	68 b9 0b 00 00       	push   $0xbb9
f01287ec:	68 5a b3 13 f0       	push   $0xf013b35a
f01287f1:	e8 0f 7a fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01287f6:	e8 a2 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287fe:	e8 c5 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128803:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128806:	83 ec 0c             	sub    $0xc,%esp
f0128809:	68 00 00 40 00       	push   $0x400000
f012880e:	e8 72 f0 fd ff       	call   f0107885 <kmalloc>
f0128813:	83 c4 10             	add    $0x10,%esp
f0128816:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f012881c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128822:	89 c1                	mov    %eax,%ecx
f0128824:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012882b:	10 00 00 
f012882e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128834:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128839:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012883f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128845:	ba 00 00 00 00       	mov    $0x0,%edx
f012884a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128850:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128856:	29 d0                	sub    %edx,%eax
f0128858:	89 c3                	mov    %eax,%ebx
f012885a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128861:	10 00 00 
f0128864:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128869:	0f b6 d0             	movzbl %al,%edx
f012886c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128872:	01 d0                	add    %edx,%eax
f0128874:	48                   	dec    %eax
f0128875:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012887b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128881:	ba 00 00 00 00       	mov    $0x0,%edx
f0128886:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012888c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128892:	29 d0                	sub    %edx,%eax
f0128894:	01 c3                	add    %eax,%ebx
f0128896:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012889d:	10 00 00 
f01288a0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01288a5:	0f b6 c0             	movzbl %al,%eax
f01288a8:	c1 e0 04             	shl    $0x4,%eax
f01288ab:	89 c2                	mov    %eax,%edx
f01288ad:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01288b3:	01 d0                	add    %edx,%eax
f01288b5:	48                   	dec    %eax
f01288b6:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01288bc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01288c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01288c7:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01288cd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01288d3:	29 d0                	sub    %edx,%eax
f01288d5:	01 d8                	add    %ebx,%eax
f01288d7:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01288dc:	39 c1                	cmp    %eax,%ecx
f01288de:	74 17                	je     f01288f7 <test_kexpand+0xc3e>
f01288e0:	83 ec 04             	sub    $0x4,%esp
f01288e3:	68 a8 c1 13 f0       	push   $0xf013c1a8
f01288e8:	68 c4 0b 00 00       	push   $0xbc4
f01288ed:	68 5a b3 13 f0       	push   $0xf013b35a
f01288f2:	e8 0e 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288f7:	e8 cc b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01288fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288ff:	74 17                	je     f0128918 <test_kexpand+0xc5f>
f0128901:	83 ec 04             	sub    $0x4,%esp
f0128904:	68 74 b3 13 f0       	push   $0xf013b374
f0128909:	68 c5 0b 00 00       	push   $0xbc5
f012890e:	68 5a b3 13 f0       	push   $0xf013b35a
f0128913:	e8 ed 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128918:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012891b:	e8 7d 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128920:	29 c3                	sub    %eax,%ebx
f0128922:	89 d8                	mov    %ebx,%eax
f0128924:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128929:	74 17                	je     f0128942 <test_kexpand+0xc89>
f012892b:	83 ec 04             	sub    $0x4,%esp
f012892e:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128933:	68 c6 0b 00 00       	push   $0xbc6
f0128938:	68 5a b3 13 f0       	push   $0xf013b35a
f012893d:	e8 c3 78 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128942:	e8 56 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128947:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012894a:	e8 79 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012894f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128952:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128958:	83 ec 0c             	sub    $0xc,%esp
f012895b:	50                   	push   %eax
f012895c:	e8 ef ef fd ff       	call   f0107950 <kfree>
f0128961:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128964:	e8 5f b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128969:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012896c:	74 17                	je     f0128985 <test_kexpand+0xccc>
f012896e:	83 ec 04             	sub    $0x4,%esp
f0128971:	68 74 b3 13 f0       	push   $0xf013b374
f0128976:	68 cf 0b 00 00       	push   $0xbcf
f012897b:	68 5a b3 13 f0       	push   $0xf013b35a
f0128980:	e8 80 78 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128985:	e8 13 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012898a:	89 c2                	mov    %eax,%edx
f012898c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012898f:	29 c2                	sub    %eax,%edx
f0128991:	89 d0                	mov    %edx,%eax
f0128993:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128998:	74 17                	je     f01289b1 <test_kexpand+0xcf8>
f012899a:	83 ec 04             	sub    $0x4,%esp
f012899d:	68 0c bc 13 f0       	push   $0xf013bc0c
f01289a2:	68 d0 0b 00 00       	push   $0xbd0
f01289a7:	68 5a b3 13 f0       	push   $0xf013b35a
f01289ac:	e8 54 78 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01289b1:	e8 e7 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01289b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289b9:	e8 0a b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289be:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01289c1:	83 ec 0c             	sub    $0xc,%esp
f01289c4:	68 00 50 40 00       	push   $0x405000
f01289c9:	e8 5a f1 fd ff       	call   f0107b28 <kexpand>
f01289ce:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01289d1:	e8 f2 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289d6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289d9:	74 19                	je     f01289f4 <test_kexpand+0xd3b>
f01289db:	68 f4 c0 13 f0       	push   $0xf013c0f4
f01289e0:	68 25 c1 13 f0       	push   $0xf013c125
f01289e5:	68 da 0b 00 00       	push   $0xbda
f01289ea:	68 5a b3 13 f0       	push   $0xf013b35a
f01289ef:	e8 11 78 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01289f4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289f7:	e8 a1 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01289fc:	29 c3                	sub    %eax,%ebx
f01289fe:	89 d8                	mov    %ebx,%eax
f0128a00:	83 f8 05             	cmp    $0x5,%eax
f0128a03:	74 19                	je     f0128a1e <test_kexpand+0xd65>
f0128a05:	68 d0 c1 13 f0       	push   $0xf013c1d0
f0128a0a:	68 25 c1 13 f0       	push   $0xf013c125
f0128a0f:	68 db 0b 00 00       	push   $0xbdb
f0128a14:	68 5a b3 13 f0       	push   $0xf013b35a
f0128a19:	e8 e7 77 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128a1e:	83 ec 0c             	sub    $0xc,%esp
f0128a21:	68 b8 c0 13 f0       	push   $0xf013c0b8
f0128a26:	e8 e3 82 fd ff       	call   f0100d0e <cprintf>
f0128a2b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128a2e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128a33:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128a36:	5b                   	pop    %ebx
f0128a37:	5f                   	pop    %edi
f0128a38:	5d                   	pop    %ebp
f0128a39:	c3                   	ret    

f0128a3a <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128a3a:	55                   	push   %ebp
f0128a3b:	89 e5                	mov    %esp,%ebp
f0128a3d:	57                   	push   %edi
f0128a3e:	53                   	push   %ebx
f0128a3f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128a45:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128a49:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128a4d:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128a53:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128a59:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128a60:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128a67:	e8 31 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128a6c:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128a6f:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128a75:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128a7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0128a7f:	89 d7                	mov    %edx,%edi
f0128a81:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128a83:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128a89:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128a8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0128a93:	89 d7                	mov    %edx,%edi
f0128a95:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a97:	e8 01 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128a9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a9f:	e8 24 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128aa7:	83 ec 0c             	sub    $0xc,%esp
f0128aaa:	68 00 fc 1f 00       	push   $0x1ffc00
f0128aaf:	e8 d1 ed fd ff       	call   f0107885 <kmalloc>
f0128ab4:	83 c4 10             	add    $0x10,%esp
f0128ab7:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128abd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128ac3:	89 c1                	mov    %eax,%ecx
f0128ac5:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128acc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128acf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ad4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128ad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0128adf:	f7 75 d4             	divl   -0x2c(%ebp)
f0128ae2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128ae5:	29 d0                	sub    %edx,%eax
f0128ae7:	89 c3                	mov    %eax,%ebx
f0128ae9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128af0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128af5:	0f b6 d0             	movzbl %al,%edx
f0128af8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128afb:	01 d0                	add    %edx,%eax
f0128afd:	48                   	dec    %eax
f0128afe:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128b01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b09:	f7 75 cc             	divl   -0x34(%ebp)
f0128b0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128b0f:	29 d0                	sub    %edx,%eax
f0128b11:	01 c3                	add    %eax,%ebx
f0128b13:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128b1a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128b1f:	0f b6 c0             	movzbl %al,%eax
f0128b22:	c1 e0 04             	shl    $0x4,%eax
f0128b25:	89 c2                	mov    %eax,%edx
f0128b27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128b2a:	01 d0                	add    %edx,%eax
f0128b2c:	48                   	dec    %eax
f0128b2d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128b30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128b33:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b38:	f7 75 c4             	divl   -0x3c(%ebp)
f0128b3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128b3e:	29 d0                	sub    %edx,%eax
f0128b40:	01 d8                	add    %ebx,%eax
f0128b42:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128b47:	39 c1                	cmp    %eax,%ecx
f0128b49:	74 17                	je     f0128b62 <test_kshrink+0x128>
f0128b4b:	83 ec 04             	sub    $0x4,%esp
f0128b4e:	68 40 b4 13 f0       	push   $0xf013b440
f0128b53:	68 01 0c 00 00       	push   $0xc01
f0128b58:	68 5a b3 13 f0       	push   $0xf013b35a
f0128b5d:	e8 a3 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b62:	e8 61 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b67:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b6a:	74 17                	je     f0128b83 <test_kshrink+0x149>
f0128b6c:	83 ec 04             	sub    $0x4,%esp
f0128b6f:	68 74 b3 13 f0       	push   $0xf013b374
f0128b74:	68 02 0c 00 00       	push   $0xc02
f0128b79:	68 5a b3 13 f0       	push   $0xf013b35a
f0128b7e:	e8 82 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b83:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b86:	e8 12 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128b8b:	29 c3                	sub    %eax,%ebx
f0128b8d:	89 d8                	mov    %ebx,%eax
f0128b8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128b94:	74 17                	je     f0128bad <test_kshrink+0x173>
f0128b96:	83 ec 04             	sub    $0x4,%esp
f0128b99:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128b9e:	68 03 0c 00 00       	push   $0xc03
f0128ba3:	68 5a b3 13 f0       	push   $0xf013b35a
f0128ba8:	e8 58 76 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128bad:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128bb4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128bb7:	e8 e1 3f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128bbc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bbf:	e8 04 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128bc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128bc7:	83 ec 0c             	sub    $0xc,%esp
f0128bca:	68 00 fc 1f 00       	push   $0x1ffc00
f0128bcf:	e8 b1 ec fd ff       	call   f0107885 <kmalloc>
f0128bd4:	83 c4 10             	add    $0x10,%esp
f0128bd7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128bdd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128be3:	89 c1                	mov    %eax,%ecx
f0128be5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128bec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128bef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128bf4:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128bf7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128bfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bff:	f7 75 bc             	divl   -0x44(%ebp)
f0128c02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128c05:	29 d0                	sub    %edx,%eax
f0128c07:	89 c3                	mov    %eax,%ebx
f0128c09:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128c10:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128c15:	0f b6 d0             	movzbl %al,%edx
f0128c18:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128c1b:	01 d0                	add    %edx,%eax
f0128c1d:	48                   	dec    %eax
f0128c1e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128c21:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c29:	f7 75 b4             	divl   -0x4c(%ebp)
f0128c2c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128c2f:	29 d0                	sub    %edx,%eax
f0128c31:	01 c3                	add    %eax,%ebx
f0128c33:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128c3a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128c3f:	0f b6 c0             	movzbl %al,%eax
f0128c42:	c1 e0 04             	shl    $0x4,%eax
f0128c45:	89 c2                	mov    %eax,%edx
f0128c47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128c4a:	01 d0                	add    %edx,%eax
f0128c4c:	48                   	dec    %eax
f0128c4d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128c50:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128c53:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c58:	f7 75 ac             	divl   -0x54(%ebp)
f0128c5b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128c5e:	29 d0                	sub    %edx,%eax
f0128c60:	01 d8                	add    %ebx,%eax
f0128c62:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128c67:	39 c1                	cmp    %eax,%ecx
f0128c69:	74 17                	je     f0128c82 <test_kshrink+0x248>
f0128c6b:	83 ec 04             	sub    $0x4,%esp
f0128c6e:	68 40 b4 13 f0       	push   $0xf013b440
f0128c73:	68 0a 0c 00 00       	push   $0xc0a
f0128c78:	68 5a b3 13 f0       	push   $0xf013b35a
f0128c7d:	e8 83 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c82:	e8 41 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c8a:	74 17                	je     f0128ca3 <test_kshrink+0x269>
f0128c8c:	83 ec 04             	sub    $0x4,%esp
f0128c8f:	68 74 b3 13 f0       	push   $0xf013b374
f0128c94:	68 0b 0c 00 00       	push   $0xc0b
f0128c99:	68 5a b3 13 f0       	push   $0xf013b35a
f0128c9e:	e8 62 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128ca3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128ca6:	e8 f2 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128cab:	29 c3                	sub    %eax,%ebx
f0128cad:	89 d8                	mov    %ebx,%eax
f0128caf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128cb4:	74 17                	je     f0128ccd <test_kshrink+0x293>
f0128cb6:	83 ec 04             	sub    $0x4,%esp
f0128cb9:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128cbe:	68 0c 0c 00 00       	push   $0xc0c
f0128cc3:	68 5a b3 13 f0       	push   $0xf013b35a
f0128cc8:	e8 38 75 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128ccd:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128cd4:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128cd7:	e8 c1 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128cdc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cdf:	e8 e4 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ce4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128ce7:	83 ec 0c             	sub    $0xc,%esp
f0128cea:	68 00 08 00 00       	push   $0x800
f0128cef:	e8 91 eb fd ff       	call   f0107885 <kmalloc>
f0128cf4:	83 c4 10             	add    $0x10,%esp
f0128cf7:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cfd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128d03:	89 c1                	mov    %eax,%ecx
f0128d05:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128d0c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128d0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d14:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128d17:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128d1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d1f:	f7 75 a4             	divl   -0x5c(%ebp)
f0128d22:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128d25:	29 d0                	sub    %edx,%eax
f0128d27:	89 c3                	mov    %eax,%ebx
f0128d29:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128d30:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128d35:	0f b6 d0             	movzbl %al,%edx
f0128d38:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128d3b:	01 d0                	add    %edx,%eax
f0128d3d:	48                   	dec    %eax
f0128d3e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128d41:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128d44:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d49:	f7 75 9c             	divl   -0x64(%ebp)
f0128d4c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128d4f:	29 d0                	sub    %edx,%eax
f0128d51:	01 c3                	add    %eax,%ebx
f0128d53:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128d5a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128d5f:	0f b6 c0             	movzbl %al,%eax
f0128d62:	c1 e0 04             	shl    $0x4,%eax
f0128d65:	89 c2                	mov    %eax,%edx
f0128d67:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128d6a:	01 d0                	add    %edx,%eax
f0128d6c:	48                   	dec    %eax
f0128d6d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128d70:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128d73:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d78:	f7 75 94             	divl   -0x6c(%ebp)
f0128d7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128d7e:	29 d0                	sub    %edx,%eax
f0128d80:	01 d8                	add    %ebx,%eax
f0128d82:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128d87:	39 c1                	cmp    %eax,%ecx
f0128d89:	74 17                	je     f0128da2 <test_kshrink+0x368>
f0128d8b:	83 ec 04             	sub    $0x4,%esp
f0128d8e:	68 40 b4 13 f0       	push   $0xf013b440
f0128d93:	68 13 0c 00 00       	push   $0xc13
f0128d98:	68 5a b3 13 f0       	push   $0xf013b35a
f0128d9d:	e8 63 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128da2:	e8 21 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128da7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128daa:	74 17                	je     f0128dc3 <test_kshrink+0x389>
f0128dac:	83 ec 04             	sub    $0x4,%esp
f0128daf:	68 74 b3 13 f0       	push   $0xf013b374
f0128db4:	68 14 0c 00 00       	push   $0xc14
f0128db9:	68 5a b3 13 f0       	push   $0xf013b35a
f0128dbe:	e8 42 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128dc3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128dc6:	e8 d2 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128dcb:	29 c3                	sub    %eax,%ebx
f0128dcd:	89 d8                	mov    %ebx,%eax
f0128dcf:	83 f8 01             	cmp    $0x1,%eax
f0128dd2:	74 17                	je     f0128deb <test_kshrink+0x3b1>
f0128dd4:	83 ec 04             	sub    $0x4,%esp
f0128dd7:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128ddc:	68 15 0c 00 00       	push   $0xc15
f0128de1:	68 5a b3 13 f0       	push   $0xf013b35a
f0128de6:	e8 1a 74 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128deb:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128df2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128df5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128dfb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128dfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e05:	eb 0e                	jmp    f0128e15 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e0a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128e0d:	01 d0                	add    %edx,%eax
f0128e0f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128e12:	ff 45 f4             	incl   -0xc(%ebp)
f0128e15:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128e1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e1e:	7f e7                	jg     f0128e07 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128e20:	e8 78 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128e25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e28:	e8 9b af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128e30:	83 ec 0c             	sub    $0xc,%esp
f0128e33:	68 00 08 00 00       	push   $0x800
f0128e38:	e8 48 ea fd ff       	call   f0107885 <kmalloc>
f0128e3d:	83 c4 10             	add    $0x10,%esp
f0128e40:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e46:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128e4c:	89 c1                	mov    %eax,%ecx
f0128e4e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128e55:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128e58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e5d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128e60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128e63:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e68:	f7 75 88             	divl   -0x78(%ebp)
f0128e6b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128e6e:	29 d0                	sub    %edx,%eax
f0128e70:	89 c3                	mov    %eax,%ebx
f0128e72:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128e79:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128e7e:	0f b6 d0             	movzbl %al,%edx
f0128e81:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128e84:	01 d0                	add    %edx,%eax
f0128e86:	48                   	dec    %eax
f0128e87:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128e8d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128e93:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e98:	f7 75 80             	divl   -0x80(%ebp)
f0128e9b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128ea1:	29 d0                	sub    %edx,%eax
f0128ea3:	01 c3                	add    %eax,%ebx
f0128ea5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128eac:	10 00 00 
f0128eaf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128eb4:	0f b6 c0             	movzbl %al,%eax
f0128eb7:	c1 e0 04             	shl    $0x4,%eax
f0128eba:	89 c2                	mov    %eax,%edx
f0128ebc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128ec2:	01 d0                	add    %edx,%eax
f0128ec4:	48                   	dec    %eax
f0128ec5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128ecb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ed6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128edc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128ee2:	29 d0                	sub    %edx,%eax
f0128ee4:	01 d8                	add    %ebx,%eax
f0128ee6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128eeb:	39 c1                	cmp    %eax,%ecx
f0128eed:	74 17                	je     f0128f06 <test_kshrink+0x4cc>
f0128eef:	83 ec 04             	sub    $0x4,%esp
f0128ef2:	68 40 b4 13 f0       	push   $0xf013b440
f0128ef7:	68 21 0c 00 00       	push   $0xc21
f0128efc:	68 5a b3 13 f0       	push   $0xf013b35a
f0128f01:	e8 ff 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f06:	e8 bd ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f0e:	74 17                	je     f0128f27 <test_kshrink+0x4ed>
f0128f10:	83 ec 04             	sub    $0x4,%esp
f0128f13:	68 74 b3 13 f0       	push   $0xf013b374
f0128f18:	68 22 0c 00 00       	push   $0xc22
f0128f1d:	68 5a b3 13 f0       	push   $0xf013b35a
f0128f22:	e8 de 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f27:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f2a:	e8 6e 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128f2f:	29 c3                	sub    %eax,%ebx
f0128f31:	89 d8                	mov    %ebx,%eax
f0128f33:	83 f8 01             	cmp    $0x1,%eax
f0128f36:	74 17                	je     f0128f4f <test_kshrink+0x515>
f0128f38:	83 ec 04             	sub    $0x4,%esp
f0128f3b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0128f40:	68 23 0c 00 00       	push   $0xc23
f0128f45:	68 5a b3 13 f0       	push   $0xf013b35a
f0128f4a:	e8 b6 72 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128f4f:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128f56:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128f59:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128f5f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128f62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f69:	eb 0e                	jmp    f0128f79 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f6e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128f71:	01 d0                	add    %edx,%eax
f0128f73:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128f76:	ff 45 f4             	incl   -0xc(%ebp)
f0128f79:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128f7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f82:	7f e7                	jg     f0128f6b <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128f84:	e8 14 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128f89:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f8c:	e8 37 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f91:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128f94:	83 ec 0c             	sub    $0xc,%esp
f0128f97:	68 00 1c 00 00       	push   $0x1c00
f0128f9c:	e8 e4 e8 fd ff       	call   f0107885 <kmalloc>
f0128fa1:	83 c4 10             	add    $0x10,%esp
f0128fa4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128faa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128fb0:	89 c1                	mov    %eax,%ecx
f0128fb2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128fb9:	10 00 00 
f0128fbc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128fc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fc7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128fcd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fd8:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128fde:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128fe4:	29 d0                	sub    %edx,%eax
f0128fe6:	89 c3                	mov    %eax,%ebx
f0128fe8:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128fef:	10 00 00 
f0128ff2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128ff7:	0f b6 d0             	movzbl %al,%edx
f0128ffa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129000:	01 d0                	add    %edx,%eax
f0129002:	48                   	dec    %eax
f0129003:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129009:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012900f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129014:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012901a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129020:	29 d0                	sub    %edx,%eax
f0129022:	01 c3                	add    %eax,%ebx
f0129024:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012902b:	10 00 00 
f012902e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129033:	0f b6 c0             	movzbl %al,%eax
f0129036:	c1 e0 04             	shl    $0x4,%eax
f0129039:	89 c2                	mov    %eax,%edx
f012903b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129041:	01 d0                	add    %edx,%eax
f0129043:	48                   	dec    %eax
f0129044:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012904a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129050:	ba 00 00 00 00       	mov    $0x0,%edx
f0129055:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012905b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129061:	29 d0                	sub    %edx,%eax
f0129063:	01 d8                	add    %ebx,%eax
f0129065:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012906a:	39 c1                	cmp    %eax,%ecx
f012906c:	74 17                	je     f0129085 <test_kshrink+0x64b>
f012906e:	83 ec 04             	sub    $0x4,%esp
f0129071:	68 40 b4 13 f0       	push   $0xf013b440
f0129076:	68 2f 0c 00 00       	push   $0xc2f
f012907b:	68 5a b3 13 f0       	push   $0xf013b35a
f0129080:	e8 80 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129085:	e8 3e ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012908a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012908d:	74 17                	je     f01290a6 <test_kshrink+0x66c>
f012908f:	83 ec 04             	sub    $0x4,%esp
f0129092:	68 74 b3 13 f0       	push   $0xf013b374
f0129097:	68 30 0c 00 00       	push   $0xc30
f012909c:	68 5a b3 13 f0       	push   $0xf013b35a
f01290a1:	e8 5f 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290a9:	e8 ef 3a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01290ae:	29 c3                	sub    %eax,%ebx
f01290b0:	89 d8                	mov    %ebx,%eax
f01290b2:	83 f8 02             	cmp    $0x2,%eax
f01290b5:	74 17                	je     f01290ce <test_kshrink+0x694>
f01290b7:	83 ec 04             	sub    $0x4,%esp
f01290ba:	68 dc b3 13 f0       	push   $0xf013b3dc
f01290bf:	68 31 0c 00 00       	push   $0xc31
f01290c4:	68 5a b3 13 f0       	push   $0xf013b35a
f01290c9:	e8 37 71 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01290ce:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01290d5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01290d8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01290de:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01290e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290e8:	eb 0e                	jmp    f01290f8 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01290ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01290ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01290f0:	01 d0                	add    %edx,%eax
f01290f2:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01290f5:	ff 45 f4             	incl   -0xc(%ebp)
f01290f8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01290fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129101:	7f e7                	jg     f01290ea <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129103:	e8 95 3a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129108:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012910b:	e8 b8 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129110:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129113:	83 ec 0c             	sub    $0xc,%esp
f0129116:	68 00 fc 2f 00       	push   $0x2ffc00
f012911b:	e8 65 e7 fd ff       	call   f0107885 <kmalloc>
f0129120:	83 c4 10             	add    $0x10,%esp
f0129123:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129129:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012912f:	89 c1                	mov    %eax,%ecx
f0129131:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129138:	10 00 00 
f012913b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129146:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012914c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129152:	ba 00 00 00 00       	mov    $0x0,%edx
f0129157:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012915d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129163:	29 d0                	sub    %edx,%eax
f0129165:	89 c3                	mov    %eax,%ebx
f0129167:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012916e:	10 00 00 
f0129171:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129176:	0f b6 d0             	movzbl %al,%edx
f0129179:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012917f:	01 d0                	add    %edx,%eax
f0129181:	48                   	dec    %eax
f0129182:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129188:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012918e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129193:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129199:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012919f:	29 d0                	sub    %edx,%eax
f01291a1:	01 c3                	add    %eax,%ebx
f01291a3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01291aa:	10 00 00 
f01291ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01291b2:	0f b6 c0             	movzbl %al,%eax
f01291b5:	c1 e0 04             	shl    $0x4,%eax
f01291b8:	89 c2                	mov    %eax,%edx
f01291ba:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01291c0:	01 d0                	add    %edx,%eax
f01291c2:	48                   	dec    %eax
f01291c3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01291c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01291cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01291d4:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01291da:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01291e0:	29 d0                	sub    %edx,%eax
f01291e2:	01 d8                	add    %ebx,%eax
f01291e4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01291e9:	39 c1                	cmp    %eax,%ecx
f01291eb:	74 17                	je     f0129204 <test_kshrink+0x7ca>
f01291ed:	83 ec 04             	sub    $0x4,%esp
f01291f0:	68 40 b4 13 f0       	push   $0xf013b440
f01291f5:	68 3d 0c 00 00       	push   $0xc3d
f01291fa:	68 5a b3 13 f0       	push   $0xf013b35a
f01291ff:	e8 01 70 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129204:	e8 bf ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129209:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012920c:	74 17                	je     f0129225 <test_kshrink+0x7eb>
f012920e:	83 ec 04             	sub    $0x4,%esp
f0129211:	68 74 b3 13 f0       	push   $0xf013b374
f0129216:	68 3e 0c 00 00       	push   $0xc3e
f012921b:	68 5a b3 13 f0       	push   $0xf013b35a
f0129220:	e8 e0 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129225:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129228:	e8 70 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012922d:	29 c3                	sub    %eax,%ebx
f012922f:	89 d8                	mov    %ebx,%eax
f0129231:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129236:	74 17                	je     f012924f <test_kshrink+0x815>
f0129238:	83 ec 04             	sub    $0x4,%esp
f012923b:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129240:	68 3f 0c 00 00       	push   $0xc3f
f0129245:	68 5a b3 13 f0       	push   $0xf013b35a
f012924a:	e8 b6 6f fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012924f:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0129256:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129259:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012925f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129262:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129269:	eb 0e                	jmp    f0129279 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012926b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012926e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129271:	01 d0                	add    %edx,%eax
f0129273:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129276:	ff 45 f4             	incl   -0xc(%ebp)
f0129279:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012927f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129282:	7f e7                	jg     f012926b <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129284:	e8 14 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129289:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012928c:	e8 37 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129291:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129294:	83 ec 0c             	sub    $0xc,%esp
f0129297:	68 00 00 60 00       	push   $0x600000
f012929c:	e8 e4 e5 fd ff       	call   f0107885 <kmalloc>
f01292a1:	83 c4 10             	add    $0x10,%esp
f01292a4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292aa:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01292b0:	89 c1                	mov    %eax,%ecx
f01292b2:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01292b9:	10 00 00 
f01292bc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01292c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292c7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01292cd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01292d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01292d8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01292de:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01292e4:	29 d0                	sub    %edx,%eax
f01292e6:	89 c3                	mov    %eax,%ebx
f01292e8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01292ef:	10 00 00 
f01292f2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01292f7:	0f b6 d0             	movzbl %al,%edx
f01292fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129300:	01 d0                	add    %edx,%eax
f0129302:	48                   	dec    %eax
f0129303:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129309:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012930f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129314:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012931a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129320:	29 d0                	sub    %edx,%eax
f0129322:	01 c3                	add    %eax,%ebx
f0129324:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012932b:	10 00 00 
f012932e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129333:	0f b6 c0             	movzbl %al,%eax
f0129336:	c1 e0 04             	shl    $0x4,%eax
f0129339:	89 c2                	mov    %eax,%edx
f012933b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129341:	01 d0                	add    %edx,%eax
f0129343:	48                   	dec    %eax
f0129344:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012934a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129350:	ba 00 00 00 00       	mov    $0x0,%edx
f0129355:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012935b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129361:	29 d0                	sub    %edx,%eax
f0129363:	01 d8                	add    %ebx,%eax
f0129365:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012936a:	39 c1                	cmp    %eax,%ecx
f012936c:	74 17                	je     f0129385 <test_kshrink+0x94b>
f012936e:	83 ec 04             	sub    $0x4,%esp
f0129371:	68 40 b4 13 f0       	push   $0xf013b440
f0129376:	68 4b 0c 00 00       	push   $0xc4b
f012937b:	68 5a b3 13 f0       	push   $0xf013b35a
f0129380:	e8 80 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129385:	e8 3e aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012938a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012938d:	74 17                	je     f01293a6 <test_kshrink+0x96c>
f012938f:	83 ec 04             	sub    $0x4,%esp
f0129392:	68 74 b3 13 f0       	push   $0xf013b374
f0129397:	68 4c 0c 00 00       	push   $0xc4c
f012939c:	68 5a b3 13 f0       	push   $0xf013b35a
f01293a1:	e8 5f 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01293a9:	e8 ef 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01293ae:	29 c3                	sub    %eax,%ebx
f01293b0:	89 d8                	mov    %ebx,%eax
f01293b2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01293b7:	74 17                	je     f01293d0 <test_kshrink+0x996>
f01293b9:	83 ec 04             	sub    $0x4,%esp
f01293bc:	68 dc b3 13 f0       	push   $0xf013b3dc
f01293c1:	68 4d 0c 00 00       	push   $0xc4d
f01293c6:	68 5a b3 13 f0       	push   $0xf013b35a
f01293cb:	e8 35 6e fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01293d0:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01293d7:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01293da:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01293e0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01293e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293ed:	eb 1a                	jmp    f0129409 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01293ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01293f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01293f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01293ff:	01 c2                	add    %eax,%edx
f0129401:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129404:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129406:	ff 45 f4             	incl   -0xc(%ebp)
f0129409:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012940f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129412:	7d db                	jge    f01293ef <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129414:	e8 84 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129419:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012941c:	e8 a7 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129421:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129424:	83 ec 0c             	sub    $0xc,%esp
f0129427:	68 00 00 50 00       	push   $0x500000
f012942c:	e8 da e6 fd ff       	call   f0107b0b <kshrink>
f0129431:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129434:	e8 8f a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129439:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012943c:	74 19                	je     f0129457 <test_kshrink+0xa1d>
f012943e:	68 f4 c0 13 f0       	push   $0xf013c0f4
f0129443:	68 25 c1 13 f0       	push   $0xf013c125
f0129448:	68 5d 0c 00 00       	push   $0xc5d
f012944d:	68 5a b3 13 f0       	push   $0xf013b35a
f0129452:	e8 ae 6d fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129457:	e8 41 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012945c:	89 c2                	mov    %eax,%edx
f012945e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129461:	29 c2                	sub    %eax,%edx
f0129463:	89 d0                	mov    %edx,%eax
f0129465:	3d 00 01 00 00       	cmp    $0x100,%eax
f012946a:	74 19                	je     f0129485 <test_kshrink+0xa4b>
f012946c:	68 00 c2 13 f0       	push   $0xf013c200
f0129471:	68 25 c1 13 f0       	push   $0xf013c125
f0129476:	68 5e 0c 00 00       	push   $0xc5e
f012947b:	68 5a b3 13 f0       	push   $0xf013b35a
f0129480:	e8 80 6d fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129485:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f012948c:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012948f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129496:	eb 37                	jmp    f01294cf <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012949b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01294a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01294a8:	01 d0                	add    %edx,%eax
f01294aa:	8b 10                	mov    (%eax),%edx
f01294ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01294af:	39 c2                	cmp    %eax,%edx
f01294b1:	74 19                	je     f01294cc <test_kshrink+0xa92>
f01294b3:	68 30 c2 13 f0       	push   $0xf013c230
f01294b8:	68 25 c1 13 f0       	push   $0xf013c125
f01294bd:	68 66 0c 00 00       	push   $0xc66
f01294c2:	68 5a b3 13 f0       	push   $0xf013b35a
f01294c7:	e8 39 6d fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01294cc:	ff 45 f4             	incl   -0xc(%ebp)
f01294cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01294d2:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01294d8:	7e be                	jle    f0129498 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01294da:	83 ec 0c             	sub    $0xc,%esp
f01294dd:	6a 03                	push   $0x3
f01294df:	e8 59 3b fe ff       	call   f010d03d <sys_bypassPageFault>
f01294e4:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01294e7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01294ed:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f01294f0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01294f3:	05 00 00 50 00       	add    $0x500000,%eax
f01294f8:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01294fb:	e8 2b 3b fe ff       	call   f010d02b <sys_rcr2>
f0129500:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129503:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129509:	39 d0                	cmp    %edx,%eax
f012950b:	74 19                	je     f0129526 <test_kshrink+0xaec>
f012950d:	68 3c c2 13 f0       	push   $0xf013c23c
f0129512:	68 25 c1 13 f0       	push   $0xf013c125
f0129517:	68 6f 0c 00 00       	push   $0xc6f
f012951c:	68 5a b3 13 f0       	push   $0xf013b35a
f0129521:	e8 df 6c fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129526:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129529:	05 00 10 50 00       	add    $0x501000,%eax
f012952e:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129531:	e8 f5 3a fe ff       	call   f010d02b <sys_rcr2>
f0129536:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129539:	81 c2 00 10 50 00    	add    $0x501000,%edx
f012953f:	39 d0                	cmp    %edx,%eax
f0129541:	74 19                	je     f012955c <test_kshrink+0xb22>
f0129543:	68 64 c2 13 f0       	push   $0xf013c264
f0129548:	68 25 c1 13 f0       	push   $0xf013c125
f012954d:	68 72 0c 00 00       	push   $0xc72
f0129552:	68 5a b3 13 f0       	push   $0xf013b35a
f0129557:	e8 a9 6c fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f012955c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012955f:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129564:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129567:	e8 bf 3a fe ff       	call   f010d02b <sys_rcr2>
f012956c:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012956f:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129575:	39 d0                	cmp    %edx,%eax
f0129577:	74 19                	je     f0129592 <test_kshrink+0xb58>
f0129579:	68 90 c2 13 f0       	push   $0xf013c290
f012957e:	68 25 c1 13 f0       	push   $0xf013c125
f0129583:	68 75 0c 00 00       	push   $0xc75
f0129588:	68 5a b3 13 f0       	push   $0xf013b35a
f012958d:	e8 73 6c fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129592:	83 ec 0c             	sub    $0xc,%esp
f0129595:	6a 00                	push   $0x0
f0129597:	e8 a1 3a fe ff       	call   f010d03d <sys_bypassPageFault>
f012959c:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012959f:	e8 f9 35 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01295a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295a7:	e8 1c a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01295ac:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01295af:	83 ec 0c             	sub    $0xc,%esp
f01295b2:	68 00 00 20 00       	push   $0x200000
f01295b7:	e8 4f e5 fd ff       	call   f0107b0b <kshrink>
f01295bc:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01295bf:	e8 04 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01295c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01295c7:	74 19                	je     f01295e2 <test_kshrink+0xba8>
f01295c9:	68 f4 c0 13 f0       	push   $0xf013c0f4
f01295ce:	68 25 c1 13 f0       	push   $0xf013c125
f01295d3:	68 82 0c 00 00       	push   $0xc82
f01295d8:	68 5a b3 13 f0       	push   $0xf013b35a
f01295dd:	e8 23 6c fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01295e2:	e8 b6 35 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01295e7:	89 c2                	mov    %eax,%edx
f01295e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01295ec:	29 c2                	sub    %eax,%edx
f01295ee:	89 d0                	mov    %edx,%eax
f01295f0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01295f5:	74 19                	je     f0129610 <test_kshrink+0xbd6>
f01295f7:	68 bc c2 13 f0       	push   $0xf013c2bc
f01295fc:	68 25 c1 13 f0       	push   $0xf013c125
f0129601:	68 83 0c 00 00       	push   $0xc83
f0129606:	68 5a b3 13 f0       	push   $0xf013b35a
f012960b:	e8 f5 6b fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129610:	e8 88 35 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129615:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129618:	e8 ab a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012961d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129620:	83 ec 0c             	sub    $0xc,%esp
f0129623:	68 00 00 40 00       	push   $0x400000
f0129628:	e8 58 e2 fd ff       	call   f0107885 <kmalloc>
f012962d:	83 c4 10             	add    $0x10,%esp
f0129630:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129636:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012963d:	10 00 00 
f0129640:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129646:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012964b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129651:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129657:	ba 00 00 00 00       	mov    $0x0,%edx
f012965c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129662:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129668:	29 d0                	sub    %edx,%eax
f012966a:	89 c1                	mov    %eax,%ecx
f012966c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129673:	10 00 00 
f0129676:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012967b:	0f b6 d0             	movzbl %al,%edx
f012967e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129684:	01 d0                	add    %edx,%eax
f0129686:	48                   	dec    %eax
f0129687:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012968d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129693:	ba 00 00 00 00       	mov    $0x0,%edx
f0129698:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012969e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01296a4:	29 d0                	sub    %edx,%eax
f01296a6:	01 c1                	add    %eax,%ecx
f01296a8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01296af:	10 00 00 
f01296b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01296b7:	0f b6 c0             	movzbl %al,%eax
f01296ba:	c1 e0 04             	shl    $0x4,%eax
f01296bd:	89 c2                	mov    %eax,%edx
f01296bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01296c5:	01 d0                	add    %edx,%eax
f01296c7:	48                   	dec    %eax
f01296c8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01296ce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01296d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01296d9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01296df:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01296e5:	29 d0                	sub    %edx,%eax
f01296e7:	01 c8                	add    %ecx,%eax
f01296e9:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01296ef:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01296f5:	83 ec 04             	sub    $0x4,%esp
f01296f8:	52                   	push   %edx
f01296f9:	50                   	push   %eax
f01296fa:	68 ec c2 13 f0       	push   $0xf013c2ec
f01296ff:	e8 0a 76 fd ff       	call   f0100d0e <cprintf>
f0129704:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129707:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012970d:	89 c1                	mov    %eax,%ecx
f012970f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129716:	10 00 00 
f0129719:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012971f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129724:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012972a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129730:	ba 00 00 00 00       	mov    $0x0,%edx
f0129735:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012973b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129741:	29 d0                	sub    %edx,%eax
f0129743:	89 c3                	mov    %eax,%ebx
f0129745:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012974c:	10 00 00 
f012974f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129754:	0f b6 d0             	movzbl %al,%edx
f0129757:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012975d:	01 d0                	add    %edx,%eax
f012975f:	48                   	dec    %eax
f0129760:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129766:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012976c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129771:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129777:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012977d:	29 d0                	sub    %edx,%eax
f012977f:	01 c3                	add    %eax,%ebx
f0129781:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129788:	10 00 00 
f012978b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129790:	0f b6 c0             	movzbl %al,%eax
f0129793:	c1 e0 04             	shl    $0x4,%eax
f0129796:	89 c2                	mov    %eax,%edx
f0129798:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012979e:	01 d0                	add    %edx,%eax
f01297a0:	48                   	dec    %eax
f01297a1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01297a7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01297ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01297b2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01297b8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01297be:	29 d0                	sub    %edx,%eax
f01297c0:	01 d8                	add    %ebx,%eax
f01297c2:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01297c7:	39 c1                	cmp    %eax,%ecx
f01297c9:	74 17                	je     f01297e2 <test_kshrink+0xda8>
f01297cb:	83 ec 04             	sub    $0x4,%esp
f01297ce:	68 08 c3 13 f0       	push   $0xf013c308
f01297d3:	68 8e 0c 00 00       	push   $0xc8e
f01297d8:	68 5a b3 13 f0       	push   $0xf013b35a
f01297dd:	e8 23 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297e2:	e8 e1 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01297e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297ea:	74 17                	je     f0129803 <test_kshrink+0xdc9>
f01297ec:	83 ec 04             	sub    $0x4,%esp
f01297ef:	68 74 b3 13 f0       	push   $0xf013b374
f01297f4:	68 8f 0c 00 00       	push   $0xc8f
f01297f9:	68 5a b3 13 f0       	push   $0xf013b35a
f01297fe:	e8 02 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129803:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129806:	e8 92 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012980b:	29 c3                	sub    %eax,%ebx
f012980d:	89 d8                	mov    %ebx,%eax
f012980f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129814:	74 17                	je     f012982d <test_kshrink+0xdf3>
f0129816:	83 ec 04             	sub    $0x4,%esp
f0129819:	68 dc b3 13 f0       	push   $0xf013b3dc
f012981e:	68 90 0c 00 00       	push   $0xc90
f0129823:	68 5a b3 13 f0       	push   $0xf013b35a
f0129828:	e8 d8 69 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f012982d:	e8 6b 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129832:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129835:	e8 8e a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012983a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012983d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129843:	83 ec 0c             	sub    $0xc,%esp
f0129846:	50                   	push   %eax
f0129847:	e8 04 e1 fd ff       	call   f0107950 <kfree>
f012984c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012984f:	e8 74 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129854:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129857:	74 17                	je     f0129870 <test_kshrink+0xe36>
f0129859:	83 ec 04             	sub    $0x4,%esp
f012985c:	68 74 b3 13 f0       	push   $0xf013b374
f0129861:	68 9a 0c 00 00       	push   $0xc9a
f0129866:	68 5a b3 13 f0       	push   $0xf013b35a
f012986b:	e8 95 69 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129870:	e8 28 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129875:	89 c2                	mov    %eax,%edx
f0129877:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012987a:	29 c2                	sub    %eax,%edx
f012987c:	89 d0                	mov    %edx,%eax
f012987e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129883:	74 17                	je     f012989c <test_kshrink+0xe62>
f0129885:	83 ec 04             	sub    $0x4,%esp
f0129888:	68 0c bc 13 f0       	push   $0xf013bc0c
f012988d:	68 9b 0c 00 00       	push   $0xc9b
f0129892:	68 5a b3 13 f0       	push   $0xf013b35a
f0129897:	e8 69 69 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012989c:	e8 fc 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01298a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298a4:	e8 1f a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298a9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f01298ac:	83 ec 0c             	sub    $0xc,%esp
f01298af:	68 00 b0 3f 00       	push   $0x3fb000
f01298b4:	e8 52 e2 fd ff       	call   f0107b0b <kshrink>
f01298b9:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01298bc:	e8 07 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01298c4:	74 19                	je     f01298df <test_kshrink+0xea5>
f01298c6:	68 f4 c0 13 f0       	push   $0xf013c0f4
f01298cb:	68 25 c1 13 f0       	push   $0xf013c125
f01298d0:	68 a5 0c 00 00       	push   $0xca5
f01298d5:	68 5a b3 13 f0       	push   $0xf013b35a
f01298da:	e8 26 69 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01298df:	e8 b9 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01298e4:	89 c2                	mov    %eax,%edx
f01298e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01298e9:	29 c2                	sub    %eax,%edx
f01298eb:	89 d0                	mov    %edx,%eax
f01298ed:	83 f8 05             	cmp    $0x5,%eax
f01298f0:	74 19                	je     f012990b <test_kshrink+0xed1>
f01298f2:	68 5c c3 13 f0       	push   $0xf013c35c
f01298f7:	68 25 c1 13 f0       	push   $0xf013c125
f01298fc:	68 a6 0c 00 00       	push   $0xca6
f0129901:	68 5a b3 13 f0       	push   $0xf013b35a
f0129906:	e8 fa 68 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012990b:	83 ec 0c             	sub    $0xc,%esp
f012990e:	68 b8 c0 13 f0       	push   $0xf013c0b8
f0129913:	e8 f6 73 fd ff       	call   f0100d0e <cprintf>
f0129918:	83 c4 10             	add    $0x10,%esp

	return 1;
f012991b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129920:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129923:	5b                   	pop    %ebx
f0129924:	5f                   	pop    %edi
f0129925:	5d                   	pop    %ebp
f0129926:	c3                   	ret    

f0129927 <test_kfreelast>:


int test_kfreelast()
{
f0129927:	55                   	push   %ebp
f0129928:	89 e5                	mov    %esp,%ebp
f012992a:	57                   	push   %edi
f012992b:	53                   	push   %ebx
f012992c:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129932:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129936:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012993a:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129940:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129946:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012994d:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129954:	e8 44 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129959:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012995c:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129962:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129967:	b8 00 00 00 00       	mov    $0x0,%eax
f012996c:	89 d7                	mov    %edx,%edi
f012996e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129970:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129976:	b9 14 00 00 00       	mov    $0x14,%ecx
f012997b:	b8 00 00 00 00       	mov    $0x0,%eax
f0129980:	89 d7                	mov    %edx,%edi
f0129982:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129984:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012998a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012998f:	b8 00 00 00 00       	mov    $0x0,%eax
f0129994:	89 d7                	mov    %edx,%edi
f0129996:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129998:	e8 00 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012999d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299a0:	e8 23 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01299a8:	83 ec 0c             	sub    $0xc,%esp
f01299ab:	68 00 fc 1f 00       	push   $0x1ffc00
f01299b0:	e8 d0 de fd ff       	call   f0107885 <kmalloc>
f01299b5:	83 c4 10             	add    $0x10,%esp
f01299b8:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01299be:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01299c4:	89 c1                	mov    %eax,%ecx
f01299c6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01299cd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01299d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01299d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01299db:	ba 00 00 00 00       	mov    $0x0,%edx
f01299e0:	f7 75 cc             	divl   -0x34(%ebp)
f01299e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01299e6:	29 d0                	sub    %edx,%eax
f01299e8:	89 c3                	mov    %eax,%ebx
f01299ea:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01299f1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01299f6:	0f b6 d0             	movzbl %al,%edx
f01299f9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01299fc:	01 d0                	add    %edx,%eax
f01299fe:	48                   	dec    %eax
f01299ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129a02:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129a05:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a0a:	f7 75 c4             	divl   -0x3c(%ebp)
f0129a0d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129a10:	29 d0                	sub    %edx,%eax
f0129a12:	01 c3                	add    %eax,%ebx
f0129a14:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129a1b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129a20:	0f b6 c0             	movzbl %al,%eax
f0129a23:	c1 e0 04             	shl    $0x4,%eax
f0129a26:	89 c2                	mov    %eax,%edx
f0129a28:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129a2b:	01 d0                	add    %edx,%eax
f0129a2d:	48                   	dec    %eax
f0129a2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129a31:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129a34:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a39:	f7 75 bc             	divl   -0x44(%ebp)
f0129a3c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129a3f:	29 d0                	sub    %edx,%eax
f0129a41:	01 d8                	add    %ebx,%eax
f0129a43:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129a48:	39 c1                	cmp    %eax,%ecx
f0129a4a:	74 17                	je     f0129a63 <test_kfreelast+0x13c>
f0129a4c:	83 ec 04             	sub    $0x4,%esp
f0129a4f:	68 40 b4 13 f0       	push   $0xf013b440
f0129a54:	68 ca 0c 00 00       	push   $0xcca
f0129a59:	68 5a b3 13 f0       	push   $0xf013b35a
f0129a5e:	e8 a2 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a63:	e8 60 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a68:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a6b:	74 17                	je     f0129a84 <test_kfreelast+0x15d>
f0129a6d:	83 ec 04             	sub    $0x4,%esp
f0129a70:	68 74 b3 13 f0       	push   $0xf013b374
f0129a75:	68 cb 0c 00 00       	push   $0xccb
f0129a7a:	68 5a b3 13 f0       	push   $0xf013b35a
f0129a7f:	e8 81 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a84:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a87:	e8 11 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129a8c:	29 c3                	sub    %eax,%ebx
f0129a8e:	89 d8                	mov    %ebx,%eax
f0129a90:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129a95:	74 17                	je     f0129aae <test_kfreelast+0x187>
f0129a97:	83 ec 04             	sub    $0x4,%esp
f0129a9a:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129a9f:	68 cc 0c 00 00       	push   $0xccc
f0129aa4:	68 5a b3 13 f0       	push   $0xf013b35a
f0129aa9:	e8 57 67 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129aae:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129ab5:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ab8:	e8 e0 30 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129abd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ac0:	e8 03 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ac5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129ac8:	83 ec 0c             	sub    $0xc,%esp
f0129acb:	68 00 fc 1f 00       	push   $0x1ffc00
f0129ad0:	e8 b0 dd fd ff       	call   f0107885 <kmalloc>
f0129ad5:	83 c4 10             	add    $0x10,%esp
f0129ad8:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ade:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129ae4:	89 c1                	mov    %eax,%ecx
f0129ae6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129aed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129af0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129af5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129af8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129afb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b00:	f7 75 b4             	divl   -0x4c(%ebp)
f0129b03:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129b06:	29 d0                	sub    %edx,%eax
f0129b08:	89 c3                	mov    %eax,%ebx
f0129b0a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129b11:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129b16:	0f b6 d0             	movzbl %al,%edx
f0129b19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129b1c:	01 d0                	add    %edx,%eax
f0129b1e:	48                   	dec    %eax
f0129b1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129b22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129b25:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b2a:	f7 75 ac             	divl   -0x54(%ebp)
f0129b2d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129b30:	29 d0                	sub    %edx,%eax
f0129b32:	01 c3                	add    %eax,%ebx
f0129b34:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129b3b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129b40:	0f b6 c0             	movzbl %al,%eax
f0129b43:	c1 e0 04             	shl    $0x4,%eax
f0129b46:	89 c2                	mov    %eax,%edx
f0129b48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129b4b:	01 d0                	add    %edx,%eax
f0129b4d:	48                   	dec    %eax
f0129b4e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129b51:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129b54:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b59:	f7 75 a4             	divl   -0x5c(%ebp)
f0129b5c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129b5f:	29 d0                	sub    %edx,%eax
f0129b61:	01 d8                	add    %ebx,%eax
f0129b63:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129b68:	39 c1                	cmp    %eax,%ecx
f0129b6a:	74 17                	je     f0129b83 <test_kfreelast+0x25c>
f0129b6c:	83 ec 04             	sub    $0x4,%esp
f0129b6f:	68 40 b4 13 f0       	push   $0xf013b440
f0129b74:	68 d3 0c 00 00       	push   $0xcd3
f0129b79:	68 5a b3 13 f0       	push   $0xf013b35a
f0129b7e:	e8 82 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b83:	e8 40 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b88:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b8b:	74 17                	je     f0129ba4 <test_kfreelast+0x27d>
f0129b8d:	83 ec 04             	sub    $0x4,%esp
f0129b90:	68 74 b3 13 f0       	push   $0xf013b374
f0129b95:	68 d4 0c 00 00       	push   $0xcd4
f0129b9a:	68 5a b3 13 f0       	push   $0xf013b35a
f0129b9f:	e8 61 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129ba4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129ba7:	e8 f1 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129bac:	29 c3                	sub    %eax,%ebx
f0129bae:	89 d8                	mov    %ebx,%eax
f0129bb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129bb5:	74 17                	je     f0129bce <test_kfreelast+0x2a7>
f0129bb7:	83 ec 04             	sub    $0x4,%esp
f0129bba:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129bbf:	68 d5 0c 00 00       	push   $0xcd5
f0129bc4:	68 5a b3 13 f0       	push   $0xf013b35a
f0129bc9:	e8 37 66 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129bce:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129bd5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129bd8:	e8 c0 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129bdd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129be0:	e8 e3 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129be5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129be8:	83 ec 0c             	sub    $0xc,%esp
f0129beb:	68 00 08 00 00       	push   $0x800
f0129bf0:	e8 90 dc fd ff       	call   f0107885 <kmalloc>
f0129bf5:	83 c4 10             	add    $0x10,%esp
f0129bf8:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bfe:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129c04:	89 c1                	mov    %eax,%ecx
f0129c06:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129c0d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129c15:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129c18:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129c1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c20:	f7 75 9c             	divl   -0x64(%ebp)
f0129c23:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129c26:	29 d0                	sub    %edx,%eax
f0129c28:	89 c3                	mov    %eax,%ebx
f0129c2a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129c31:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129c36:	0f b6 d0             	movzbl %al,%edx
f0129c39:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129c3c:	01 d0                	add    %edx,%eax
f0129c3e:	48                   	dec    %eax
f0129c3f:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129c42:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129c45:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c4a:	f7 75 94             	divl   -0x6c(%ebp)
f0129c4d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129c50:	29 d0                	sub    %edx,%eax
f0129c52:	01 c3                	add    %eax,%ebx
f0129c54:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129c5b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129c60:	0f b6 c0             	movzbl %al,%eax
f0129c63:	c1 e0 04             	shl    $0x4,%eax
f0129c66:	89 c2                	mov    %eax,%edx
f0129c68:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c6b:	01 d0                	add    %edx,%eax
f0129c6d:	48                   	dec    %eax
f0129c6e:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129c71:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129c74:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c79:	f7 75 8c             	divl   -0x74(%ebp)
f0129c7c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129c7f:	29 d0                	sub    %edx,%eax
f0129c81:	01 d8                	add    %ebx,%eax
f0129c83:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129c88:	39 c1                	cmp    %eax,%ecx
f0129c8a:	74 17                	je     f0129ca3 <test_kfreelast+0x37c>
f0129c8c:	83 ec 04             	sub    $0x4,%esp
f0129c8f:	68 40 b4 13 f0       	push   $0xf013b440
f0129c94:	68 dc 0c 00 00       	push   $0xcdc
f0129c99:	68 5a b3 13 f0       	push   $0xf013b35a
f0129c9e:	e8 62 65 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ca3:	e8 20 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ca8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cab:	74 17                	je     f0129cc4 <test_kfreelast+0x39d>
f0129cad:	83 ec 04             	sub    $0x4,%esp
f0129cb0:	68 74 b3 13 f0       	push   $0xf013b374
f0129cb5:	68 dd 0c 00 00       	push   $0xcdd
f0129cba:	68 5a b3 13 f0       	push   $0xf013b35a
f0129cbf:	e8 41 65 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129cc4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129cc7:	e8 d1 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129ccc:	29 c3                	sub    %eax,%ebx
f0129cce:	89 d8                	mov    %ebx,%eax
f0129cd0:	83 f8 01             	cmp    $0x1,%eax
f0129cd3:	74 17                	je     f0129cec <test_kfreelast+0x3c5>
f0129cd5:	83 ec 04             	sub    $0x4,%esp
f0129cd8:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129cdd:	68 de 0c 00 00       	push   $0xcde
f0129ce2:	68 5a b3 13 f0       	push   $0xf013b35a
f0129ce7:	e8 19 65 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129cec:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129cf3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129cf6:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129cfc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129cff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129d06:	eb 0e                	jmp    f0129d16 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0129d08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129d0b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129d0e:	01 d0                	add    %edx,%eax
f0129d10:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129d13:	ff 45 f4             	incl   -0xc(%ebp)
f0129d16:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129d1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d1f:	7f e7                	jg     f0129d08 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d21:	e8 77 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129d26:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d29:	e8 9a a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129d31:	83 ec 0c             	sub    $0xc,%esp
f0129d34:	68 00 08 00 00       	push   $0x800
f0129d39:	e8 47 db fd ff       	call   f0107885 <kmalloc>
f0129d3e:	83 c4 10             	add    $0x10,%esp
f0129d41:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d47:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129d4d:	89 c1                	mov    %eax,%ecx
f0129d4f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129d56:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129d59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d5e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129d64:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129d6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d6f:	f7 75 80             	divl   -0x80(%ebp)
f0129d72:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129d78:	29 d0                	sub    %edx,%eax
f0129d7a:	89 c3                	mov    %eax,%ebx
f0129d7c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129d83:	10 00 00 
f0129d86:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129d8b:	0f b6 d0             	movzbl %al,%edx
f0129d8e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129d94:	01 d0                	add    %edx,%eax
f0129d96:	48                   	dec    %eax
f0129d97:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129d9d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129da8:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129dae:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129db4:	29 d0                	sub    %edx,%eax
f0129db6:	01 c3                	add    %eax,%ebx
f0129db8:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129dbf:	10 00 00 
f0129dc2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129dc7:	0f b6 c0             	movzbl %al,%eax
f0129dca:	c1 e0 04             	shl    $0x4,%eax
f0129dcd:	89 c2                	mov    %eax,%edx
f0129dcf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129dd5:	01 d0                	add    %edx,%eax
f0129dd7:	48                   	dec    %eax
f0129dd8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129dde:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129de4:	ba 00 00 00 00       	mov    $0x0,%edx
f0129de9:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129def:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129df5:	29 d0                	sub    %edx,%eax
f0129df7:	01 d8                	add    %ebx,%eax
f0129df9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129dfe:	39 c1                	cmp    %eax,%ecx
f0129e00:	74 17                	je     f0129e19 <test_kfreelast+0x4f2>
f0129e02:	83 ec 04             	sub    $0x4,%esp
f0129e05:	68 40 b4 13 f0       	push   $0xf013b440
f0129e0a:	68 ea 0c 00 00       	push   $0xcea
f0129e0f:	68 5a b3 13 f0       	push   $0xf013b35a
f0129e14:	e8 ec 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e19:	e8 aa 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e1e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e21:	74 17                	je     f0129e3a <test_kfreelast+0x513>
f0129e23:	83 ec 04             	sub    $0x4,%esp
f0129e26:	68 74 b3 13 f0       	push   $0xf013b374
f0129e2b:	68 eb 0c 00 00       	push   $0xceb
f0129e30:	68 5a b3 13 f0       	push   $0xf013b35a
f0129e35:	e8 cb 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e3a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e3d:	e8 5b 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129e42:	29 c3                	sub    %eax,%ebx
f0129e44:	89 d8                	mov    %ebx,%eax
f0129e46:	83 f8 01             	cmp    $0x1,%eax
f0129e49:	74 17                	je     f0129e62 <test_kfreelast+0x53b>
f0129e4b:	83 ec 04             	sub    $0x4,%esp
f0129e4e:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129e53:	68 ec 0c 00 00       	push   $0xcec
f0129e58:	68 5a b3 13 f0       	push   $0xf013b35a
f0129e5d:	e8 a3 63 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129e62:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129e69:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129e6c:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129e72:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129e75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e7c:	eb 0e                	jmp    f0129e8c <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129e7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e81:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e84:	01 d0                	add    %edx,%eax
f0129e86:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129e89:	ff 45 f4             	incl   -0xc(%ebp)
f0129e8c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129e92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e95:	7f e7                	jg     f0129e7e <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129e97:	e8 01 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129e9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e9f:	e8 24 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129ea7:	83 ec 0c             	sub    $0xc,%esp
f0129eaa:	68 00 1c 00 00       	push   $0x1c00
f0129eaf:	e8 d1 d9 fd ff       	call   f0107885 <kmalloc>
f0129eb4:	83 c4 10             	add    $0x10,%esp
f0129eb7:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ebd:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129ec3:	89 c1                	mov    %eax,%ecx
f0129ec5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129ecc:	10 00 00 
f0129ecf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129ed5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129eda:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129ee0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129ee6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129eeb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129ef1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129ef7:	29 d0                	sub    %edx,%eax
f0129ef9:	89 c3                	mov    %eax,%ebx
f0129efb:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129f02:	10 00 00 
f0129f05:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129f0a:	0f b6 d0             	movzbl %al,%edx
f0129f0d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129f13:	01 d0                	add    %edx,%eax
f0129f15:	48                   	dec    %eax
f0129f16:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129f1c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f27:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129f2d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129f33:	29 d0                	sub    %edx,%eax
f0129f35:	01 c3                	add    %eax,%ebx
f0129f37:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129f3e:	10 00 00 
f0129f41:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129f46:	0f b6 c0             	movzbl %al,%eax
f0129f49:	c1 e0 04             	shl    $0x4,%eax
f0129f4c:	89 c2                	mov    %eax,%edx
f0129f4e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129f54:	01 d0                	add    %edx,%eax
f0129f56:	48                   	dec    %eax
f0129f57:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129f5d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f68:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129f6e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129f74:	29 d0                	sub    %edx,%eax
f0129f76:	01 d8                	add    %ebx,%eax
f0129f78:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129f7d:	39 c1                	cmp    %eax,%ecx
f0129f7f:	74 17                	je     f0129f98 <test_kfreelast+0x671>
f0129f81:	83 ec 04             	sub    $0x4,%esp
f0129f84:	68 40 b4 13 f0       	push   $0xf013b440
f0129f89:	68 f8 0c 00 00       	push   $0xcf8
f0129f8e:	68 5a b3 13 f0       	push   $0xf013b35a
f0129f93:	e8 6d 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f98:	e8 2b 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f9d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fa0:	74 17                	je     f0129fb9 <test_kfreelast+0x692>
f0129fa2:	83 ec 04             	sub    $0x4,%esp
f0129fa5:	68 74 b3 13 f0       	push   $0xf013b374
f0129faa:	68 f9 0c 00 00       	push   $0xcf9
f0129faf:	68 5a b3 13 f0       	push   $0xf013b35a
f0129fb4:	e8 4c 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fb9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fbc:	e8 dc 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129fc1:	29 c3                	sub    %eax,%ebx
f0129fc3:	89 d8                	mov    %ebx,%eax
f0129fc5:	83 f8 02             	cmp    $0x2,%eax
f0129fc8:	74 17                	je     f0129fe1 <test_kfreelast+0x6ba>
f0129fca:	83 ec 04             	sub    $0x4,%esp
f0129fcd:	68 dc b3 13 f0       	push   $0xf013b3dc
f0129fd2:	68 fa 0c 00 00       	push   $0xcfa
f0129fd7:	68 5a b3 13 f0       	push   $0xf013b35a
f0129fdc:	e8 24 62 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129fe1:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129fe8:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129feb:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129ff1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129ff4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ffb:	eb 0e                	jmp    f012a00b <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129ffd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a000:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a003:	01 d0                	add    %edx,%eax
f012a005:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a008:	ff 45 f4             	incl   -0xc(%ebp)
f012a00b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a011:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a014:	7f e7                	jg     f0129ffd <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a016:	e8 82 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a01b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a01e:	e8 a5 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a023:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a026:	83 ec 0c             	sub    $0xc,%esp
f012a029:	68 00 fc 2f 00       	push   $0x2ffc00
f012a02e:	e8 52 d8 fd ff       	call   f0107885 <kmalloc>
f012a033:	83 c4 10             	add    $0x10,%esp
f012a036:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a03c:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a042:	89 c1                	mov    %eax,%ecx
f012a044:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a04b:	10 00 00 
f012a04e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a054:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a059:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a05f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a065:	ba 00 00 00 00       	mov    $0x0,%edx
f012a06a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a070:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a076:	29 d0                	sub    %edx,%eax
f012a078:	89 c3                	mov    %eax,%ebx
f012a07a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a081:	10 00 00 
f012a084:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a089:	0f b6 d0             	movzbl %al,%edx
f012a08c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a092:	01 d0                	add    %edx,%eax
f012a094:	48                   	dec    %eax
f012a095:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a09b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a0a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0a6:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a0ac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a0b2:	29 d0                	sub    %edx,%eax
f012a0b4:	01 c3                	add    %eax,%ebx
f012a0b6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a0bd:	10 00 00 
f012a0c0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a0c5:	0f b6 c0             	movzbl %al,%eax
f012a0c8:	c1 e0 04             	shl    $0x4,%eax
f012a0cb:	89 c2                	mov    %eax,%edx
f012a0cd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a0d3:	01 d0                	add    %edx,%eax
f012a0d5:	48                   	dec    %eax
f012a0d6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a0dc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a0e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0e7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a0ed:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a0f3:	29 d0                	sub    %edx,%eax
f012a0f5:	01 d8                	add    %ebx,%eax
f012a0f7:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a0fc:	39 c1                	cmp    %eax,%ecx
f012a0fe:	74 17                	je     f012a117 <test_kfreelast+0x7f0>
f012a100:	83 ec 04             	sub    $0x4,%esp
f012a103:	68 40 b4 13 f0       	push   $0xf013b440
f012a108:	68 06 0d 00 00       	push   $0xd06
f012a10d:	68 5a b3 13 f0       	push   $0xf013b35a
f012a112:	e8 ee 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a117:	e8 ac 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a11c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a11f:	74 17                	je     f012a138 <test_kfreelast+0x811>
f012a121:	83 ec 04             	sub    $0x4,%esp
f012a124:	68 74 b3 13 f0       	push   $0xf013b374
f012a129:	68 07 0d 00 00       	push   $0xd07
f012a12e:	68 5a b3 13 f0       	push   $0xf013b35a
f012a133:	e8 cd 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a138:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a13b:	e8 5d 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a140:	29 c3                	sub    %eax,%ebx
f012a142:	89 d8                	mov    %ebx,%eax
f012a144:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a149:	74 17                	je     f012a162 <test_kfreelast+0x83b>
f012a14b:	83 ec 04             	sub    $0x4,%esp
f012a14e:	68 dc b3 13 f0       	push   $0xf013b3dc
f012a153:	68 08 0d 00 00       	push   $0xd08
f012a158:	68 5a b3 13 f0       	push   $0xf013b35a
f012a15d:	e8 a3 60 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a162:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a169:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a16c:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a172:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a175:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a17c:	eb 0e                	jmp    f012a18c <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a17e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a181:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a184:	01 d0                	add    %edx,%eax
f012a186:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a189:	ff 45 f4             	incl   -0xc(%ebp)
f012a18c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a192:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a195:	7f e7                	jg     f012a17e <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a197:	e8 01 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a19c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a19f:	e8 24 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a1a7:	83 ec 0c             	sub    $0xc,%esp
f012a1aa:	68 00 fc 5f 00       	push   $0x5ffc00
f012a1af:	e8 d1 d6 fd ff       	call   f0107885 <kmalloc>
f012a1b4:	83 c4 10             	add    $0x10,%esp
f012a1b7:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a1bd:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a1c3:	89 c1                	mov    %eax,%ecx
f012a1c5:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a1cc:	10 00 00 
f012a1cf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a1d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a1da:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a1e0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a1e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1eb:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a1f1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a1f7:	29 d0                	sub    %edx,%eax
f012a1f9:	89 c3                	mov    %eax,%ebx
f012a1fb:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a202:	10 00 00 
f012a205:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a20a:	0f b6 d0             	movzbl %al,%edx
f012a20d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a213:	01 d0                	add    %edx,%eax
f012a215:	48                   	dec    %eax
f012a216:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a21c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a222:	ba 00 00 00 00       	mov    $0x0,%edx
f012a227:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a22d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a233:	29 d0                	sub    %edx,%eax
f012a235:	01 c3                	add    %eax,%ebx
f012a237:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a23e:	10 00 00 
f012a241:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a246:	0f b6 c0             	movzbl %al,%eax
f012a249:	c1 e0 04             	shl    $0x4,%eax
f012a24c:	89 c2                	mov    %eax,%edx
f012a24e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a254:	01 d0                	add    %edx,%eax
f012a256:	48                   	dec    %eax
f012a257:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a25d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a263:	ba 00 00 00 00       	mov    $0x0,%edx
f012a268:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a26e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a274:	29 d0                	sub    %edx,%eax
f012a276:	01 d8                	add    %ebx,%eax
f012a278:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a27d:	39 c1                	cmp    %eax,%ecx
f012a27f:	74 17                	je     f012a298 <test_kfreelast+0x971>
f012a281:	83 ec 04             	sub    $0x4,%esp
f012a284:	68 40 b4 13 f0       	push   $0xf013b440
f012a289:	68 14 0d 00 00       	push   $0xd14
f012a28e:	68 5a b3 13 f0       	push   $0xf013b35a
f012a293:	e8 6d 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a298:	e8 2b 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a29d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2a0:	74 17                	je     f012a2b9 <test_kfreelast+0x992>
f012a2a2:	83 ec 04             	sub    $0x4,%esp
f012a2a5:	68 74 b3 13 f0       	push   $0xf013b374
f012a2aa:	68 15 0d 00 00       	push   $0xd15
f012a2af:	68 5a b3 13 f0       	push   $0xf013b35a
f012a2b4:	e8 4c 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2b9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2bc:	e8 dc 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a2c1:	29 c3                	sub    %eax,%ebx
f012a2c3:	89 d8                	mov    %ebx,%eax
f012a2c5:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a2ca:	74 17                	je     f012a2e3 <test_kfreelast+0x9bc>
f012a2cc:	83 ec 04             	sub    $0x4,%esp
f012a2cf:	68 dc b3 13 f0       	push   $0xf013b3dc
f012a2d4:	68 16 0d 00 00       	push   $0xd16
f012a2d9:	68 5a b3 13 f0       	push   $0xf013b35a
f012a2de:	e8 22 5f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a2e3:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a2ea:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a2ed:	e8 ab 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a2f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2f5:	e8 ce 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a2fd:	83 ec 0c             	sub    $0xc,%esp
f012a300:	68 00 38 00 00       	push   $0x3800
f012a305:	e8 7b d5 fd ff       	call   f0107885 <kmalloc>
f012a30a:	83 c4 10             	add    $0x10,%esp
f012a30d:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a313:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a319:	89 c1                	mov    %eax,%ecx
f012a31b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a322:	10 00 00 
f012a325:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a32b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a330:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a336:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a33c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a341:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a347:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a34d:	29 d0                	sub    %edx,%eax
f012a34f:	89 c3                	mov    %eax,%ebx
f012a351:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a358:	10 00 00 
f012a35b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a360:	0f b6 d0             	movzbl %al,%edx
f012a363:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a369:	01 d0                	add    %edx,%eax
f012a36b:	48                   	dec    %eax
f012a36c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a372:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a378:	ba 00 00 00 00       	mov    $0x0,%edx
f012a37d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a383:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a389:	29 d0                	sub    %edx,%eax
f012a38b:	01 c3                	add    %eax,%ebx
f012a38d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a394:	10 00 00 
f012a397:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a39c:	0f b6 c0             	movzbl %al,%eax
f012a39f:	c1 e0 04             	shl    $0x4,%eax
f012a3a2:	89 c2                	mov    %eax,%edx
f012a3a4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a3aa:	01 d0                	add    %edx,%eax
f012a3ac:	48                   	dec    %eax
f012a3ad:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a3b3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a3b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3be:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a3c4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a3ca:	29 d0                	sub    %edx,%eax
f012a3cc:	01 d8                	add    %ebx,%eax
f012a3ce:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a3d3:	39 c1                	cmp    %eax,%ecx
f012a3d5:	74 17                	je     f012a3ee <test_kfreelast+0xac7>
f012a3d7:	83 ec 04             	sub    $0x4,%esp
f012a3da:	68 40 b4 13 f0       	push   $0xf013b440
f012a3df:	68 1d 0d 00 00       	push   $0xd1d
f012a3e4:	68 5a b3 13 f0       	push   $0xf013b35a
f012a3e9:	e8 17 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3ee:	e8 d5 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a3f3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3f6:	74 17                	je     f012a40f <test_kfreelast+0xae8>
f012a3f8:	83 ec 04             	sub    $0x4,%esp
f012a3fb:	68 74 b3 13 f0       	push   $0xf013b374
f012a400:	68 1e 0d 00 00       	push   $0xd1e
f012a405:	68 5a b3 13 f0       	push   $0xf013b35a
f012a40a:	e8 f6 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a40f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a412:	e8 86 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a417:	29 c3                	sub    %eax,%ebx
f012a419:	89 d8                	mov    %ebx,%eax
f012a41b:	83 f8 04             	cmp    $0x4,%eax
f012a41e:	74 17                	je     f012a437 <test_kfreelast+0xb10>
f012a420:	83 ec 04             	sub    $0x4,%esp
f012a423:	68 dc b3 13 f0       	push   $0xf013b3dc
f012a428:	68 1f 0d 00 00       	push   $0xd1f
f012a42d:	68 5a b3 13 f0       	push   $0xf013b35a
f012a432:	e8 ce 5d fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a437:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a43e:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a441:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a447:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a44a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a451:	eb 0e                	jmp    f012a461 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a453:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a456:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a459:	01 d0                	add    %edx,%eax
f012a45b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a45e:	ff 45 f4             	incl   -0xc(%ebp)
f012a461:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a467:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a46a:	7f e7                	jg     f012a453 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a46c:	e8 2c 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a471:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a477:	e8 4c 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a47c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a482:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a488:	83 ec 0c             	sub    $0xc,%esp
f012a48b:	50                   	push   %eax
f012a48c:	e8 bf d4 fd ff       	call   f0107950 <kfree>
f012a491:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a494:	e8 2f 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a499:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a49f:	74 17                	je     f012a4b8 <test_kfreelast+0xb91>
f012a4a1:	83 ec 04             	sub    $0x4,%esp
f012a4a4:	68 74 b3 13 f0       	push   $0xf013b374
f012a4a9:	68 2e 0d 00 00       	push   $0xd2e
f012a4ae:	68 5a b3 13 f0       	push   $0xf013b35a
f012a4b3:	e8 4d 5d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a4b8:	e8 e0 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a4bd:	89 c2                	mov    %eax,%edx
f012a4bf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a4c5:	29 c2                	sub    %eax,%edx
f012a4c7:	89 d0                	mov    %edx,%eax
f012a4c9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a4ce:	74 17                	je     f012a4e7 <test_kfreelast+0xbc0>
f012a4d0:	83 ec 04             	sub    $0x4,%esp
f012a4d3:	68 e4 ba 13 f0       	push   $0xf013bae4
f012a4d8:	68 2f 0d 00 00       	push   $0xd2f
f012a4dd:	68 5a b3 13 f0       	push   $0xf013b35a
f012a4e2:	e8 1e 5d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4e7:	e8 b1 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a4ec:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4f2:	e8 d1 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4f7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a4fd:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a503:	83 ec 0c             	sub    $0xc,%esp
f012a506:	50                   	push   %eax
f012a507:	e8 44 d4 fd ff       	call   f0107950 <kfree>
f012a50c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a50f:	e8 b4 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a514:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a51a:	74 17                	je     f012a533 <test_kfreelast+0xc0c>
f012a51c:	83 ec 04             	sub    $0x4,%esp
f012a51f:	68 74 b3 13 f0       	push   $0xf013b374
f012a524:	68 35 0d 00 00       	push   $0xd35
f012a529:	68 5a b3 13 f0       	push   $0xf013b35a
f012a52e:	e8 d2 5c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a533:	e8 65 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a538:	89 c2                	mov    %eax,%edx
f012a53a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a540:	29 c2                	sub    %eax,%edx
f012a542:	89 d0                	mov    %edx,%eax
f012a544:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a549:	74 17                	je     f012a562 <test_kfreelast+0xc3b>
f012a54b:	83 ec 04             	sub    $0x4,%esp
f012a54e:	68 e4 ba 13 f0       	push   $0xf013bae4
f012a553:	68 36 0d 00 00       	push   $0xd36
f012a558:	68 5a b3 13 f0       	push   $0xf013b35a
f012a55d:	e8 a3 5c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a562:	e8 36 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a567:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a56d:	e8 56 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a572:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a578:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a57e:	83 ec 0c             	sub    $0xc,%esp
f012a581:	50                   	push   %eax
f012a582:	e8 c9 d3 fd ff       	call   f0107950 <kfree>
f012a587:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a58a:	e8 39 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a58f:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a595:	74 17                	je     f012a5ae <test_kfreelast+0xc87>
f012a597:	83 ec 04             	sub    $0x4,%esp
f012a59a:	68 74 b3 13 f0       	push   $0xf013b374
f012a59f:	68 3c 0d 00 00       	push   $0xd3c
f012a5a4:	68 5a b3 13 f0       	push   $0xf013b35a
f012a5a9:	e8 57 5c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a5ae:	e8 ea 25 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a5b3:	89 c2                	mov    %eax,%edx
f012a5b5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a5bb:	29 c2                	sub    %eax,%edx
f012a5bd:	89 d0                	mov    %edx,%eax
f012a5bf:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a5c4:	74 17                	je     f012a5dd <test_kfreelast+0xcb6>
f012a5c6:	83 ec 04             	sub    $0x4,%esp
f012a5c9:	68 e4 ba 13 f0       	push   $0xf013bae4
f012a5ce:	68 3d 0d 00 00       	push   $0xd3d
f012a5d3:	68 5a b3 13 f0       	push   $0xf013b35a
f012a5d8:	e8 28 5c fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a5dd:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a5e3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a5e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5ed:	eb 1e                	jmp    f012a60d <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a5ef:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a5f5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a5f8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5fb:	01 c8                	add    %ecx,%eax
f012a5fd:	8a 00                	mov    (%eax),%al
f012a5ff:	0f be c0             	movsbl %al,%eax
f012a602:	01 d0                	add    %edx,%eax
f012a604:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a60a:	ff 45 f4             	incl   -0xc(%ebp)
f012a60d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a613:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a616:	7f d7                	jg     f012a5ef <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a618:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a61e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a624:	01 c0                	add    %eax,%eax
f012a626:	39 c2                	cmp    %eax,%edx
f012a628:	74 17                	je     f012a641 <test_kfreelast+0xd1a>
f012a62a:	83 ec 04             	sub    $0x4,%esp
f012a62d:	68 40 bb 13 f0       	push   $0xf013bb40
f012a632:	68 48 0d 00 00       	push   $0xd48
f012a637:	68 5a b3 13 f0       	push   $0xf013b35a
f012a63c:	e8 c4 5b fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a641:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a647:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a64a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a651:	eb 1e                	jmp    f012a671 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a653:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a659:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a65c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a65f:	01 c8                	add    %ecx,%eax
f012a661:	8a 00                	mov    (%eax),%al
f012a663:	0f be c0             	movsbl %al,%eax
f012a666:	01 d0                	add    %edx,%eax
f012a668:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a66e:	ff 45 f4             	incl   -0xc(%ebp)
f012a671:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a677:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a67a:	7f d7                	jg     f012a653 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a67c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a682:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a688:	89 c1                	mov    %eax,%ecx
f012a68a:	01 c9                	add    %ecx,%ecx
f012a68c:	01 c8                	add    %ecx,%eax
f012a68e:	39 c2                	cmp    %eax,%edx
f012a690:	74 17                	je     f012a6a9 <test_kfreelast+0xd82>
f012a692:	83 ec 04             	sub    $0x4,%esp
f012a695:	68 40 bb 13 f0       	push   $0xf013bb40
f012a69a:	68 50 0d 00 00       	push   $0xd50
f012a69f:	68 5a b3 13 f0       	push   $0xf013b35a
f012a6a4:	e8 5c 5b fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a6a9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a6af:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a6b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a6b9:	eb 1e                	jmp    f012a6d9 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a6bb:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a6c1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a6c4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a6c7:	01 c8                	add    %ecx,%eax
f012a6c9:	8a 00                	mov    (%eax),%al
f012a6cb:	0f be c0             	movsbl %al,%eax
f012a6ce:	01 d0                	add    %edx,%eax
f012a6d0:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a6d6:	ff 45 f4             	incl   -0xc(%ebp)
f012a6d9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a6df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a6e2:	7f d7                	jg     f012a6bb <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a6e4:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a6ea:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a6f0:	c1 e2 02             	shl    $0x2,%edx
f012a6f3:	39 d0                	cmp    %edx,%eax
f012a6f5:	74 17                	je     f012a70e <test_kfreelast+0xde7>
f012a6f7:	83 ec 04             	sub    $0x4,%esp
f012a6fa:	68 40 bb 13 f0       	push   $0xf013bb40
f012a6ff:	68 58 0d 00 00       	push   $0xd58
f012a704:	68 5a b3 13 f0       	push   $0xf013b35a
f012a709:	e8 f7 5a fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a70e:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a714:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a717:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a71e:	eb 1e                	jmp    f012a73e <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a720:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a726:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a729:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a72c:	01 c8                	add    %ecx,%eax
f012a72e:	8a 00                	mov    (%eax),%al
f012a730:	0f be c0             	movsbl %al,%eax
f012a733:	01 d0                	add    %edx,%eax
f012a735:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a73b:	ff 45 f4             	incl   -0xc(%ebp)
f012a73e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a744:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a747:	7f d7                	jg     f012a720 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a749:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a74f:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a755:	89 d0                	mov    %edx,%eax
f012a757:	c1 e0 02             	shl    $0x2,%eax
f012a75a:	01 d0                	add    %edx,%eax
f012a75c:	39 c1                	cmp    %eax,%ecx
f012a75e:	74 17                	je     f012a777 <test_kfreelast+0xe50>
f012a760:	83 ec 04             	sub    $0x4,%esp
f012a763:	68 40 bb 13 f0       	push   $0xf013bb40
f012a768:	68 60 0d 00 00       	push   $0xd60
f012a76d:	68 5a b3 13 f0       	push   $0xf013b35a
f012a772:	e8 8e 5a fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a777:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a77d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a780:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a787:	eb 1e                	jmp    f012a7a7 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a789:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a78f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a792:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a795:	01 c8                	add    %ecx,%eax
f012a797:	8a 00                	mov    (%eax),%al
f012a799:	0f be c0             	movsbl %al,%eax
f012a79c:	01 d0                	add    %edx,%eax
f012a79e:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a7a4:	ff 45 f4             	incl   -0xc(%ebp)
f012a7a7:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a7ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7b0:	7f d7                	jg     f012a789 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a7b2:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a7b8:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a7be:	89 d0                	mov    %edx,%eax
f012a7c0:	01 c0                	add    %eax,%eax
f012a7c2:	01 d0                	add    %edx,%eax
f012a7c4:	01 c0                	add    %eax,%eax
f012a7c6:	01 d0                	add    %edx,%eax
f012a7c8:	39 c1                	cmp    %eax,%ecx
f012a7ca:	74 17                	je     f012a7e3 <test_kfreelast+0xebc>
f012a7cc:	83 ec 04             	sub    $0x4,%esp
f012a7cf:	68 40 bb 13 f0       	push   $0xf013bb40
f012a7d4:	68 68 0d 00 00       	push   $0xd68
f012a7d9:	68 5a b3 13 f0       	push   $0xf013b35a
f012a7de:	e8 22 5a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a7e3:	e8 b5 23 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a7e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7eb:	e8 d8 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a7f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a7f3:	83 ec 0c             	sub    $0xc,%esp
f012a7f6:	68 00 50 00 00       	push   $0x5000
f012a7fb:	e8 85 d0 fd ff       	call   f0107885 <kmalloc>
f012a800:	83 c4 10             	add    $0x10,%esp
f012a803:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a809:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a80f:	89 c1                	mov    %eax,%ecx
f012a811:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a818:	10 00 00 
f012a81b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a821:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a826:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a82c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a832:	ba 00 00 00 00       	mov    $0x0,%edx
f012a837:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a83d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a843:	29 d0                	sub    %edx,%eax
f012a845:	89 c3                	mov    %eax,%ebx
f012a847:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a84e:	10 00 00 
f012a851:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a856:	0f b6 d0             	movzbl %al,%edx
f012a859:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a85f:	01 d0                	add    %edx,%eax
f012a861:	48                   	dec    %eax
f012a862:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a868:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a86e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a873:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a879:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a87f:	29 d0                	sub    %edx,%eax
f012a881:	01 c3                	add    %eax,%ebx
f012a883:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a88a:	10 00 00 
f012a88d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a892:	0f b6 c0             	movzbl %al,%eax
f012a895:	c1 e0 04             	shl    $0x4,%eax
f012a898:	89 c2                	mov    %eax,%edx
f012a89a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a8a0:	01 d0                	add    %edx,%eax
f012a8a2:	48                   	dec    %eax
f012a8a3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a8a9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a8af:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8b4:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a8ba:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a8c0:	29 d0                	sub    %edx,%eax
f012a8c2:	01 d8                	add    %ebx,%eax
f012a8c4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a8c9:	39 c1                	cmp    %eax,%ecx
f012a8cb:	74 17                	je     f012a8e4 <test_kfreelast+0xfbd>
f012a8cd:	83 ec 04             	sub    $0x4,%esp
f012a8d0:	68 40 b4 13 f0       	push   $0xf013b440
f012a8d5:	68 71 0d 00 00       	push   $0xd71
f012a8da:	68 5a b3 13 f0       	push   $0xf013b35a
f012a8df:	e8 21 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8e4:	e8 df 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8e9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8ec:	74 17                	je     f012a905 <test_kfreelast+0xfde>
f012a8ee:	83 ec 04             	sub    $0x4,%esp
f012a8f1:	68 74 b3 13 f0       	push   $0xf013b374
f012a8f6:	68 72 0d 00 00       	push   $0xd72
f012a8fb:	68 5a b3 13 f0       	push   $0xf013b35a
f012a900:	e8 00 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a905:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a908:	e8 90 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a90d:	29 c3                	sub    %eax,%ebx
f012a90f:	89 d8                	mov    %ebx,%eax
f012a911:	83 f8 05             	cmp    $0x5,%eax
f012a914:	74 17                	je     f012a92d <test_kfreelast+0x1006>
f012a916:	83 ec 04             	sub    $0x4,%esp
f012a919:	68 dc b3 13 f0       	push   $0xf013b3dc
f012a91e:	68 73 0d 00 00       	push   $0xd73
f012a923:	68 5a b3 13 f0       	push   $0xf013b35a
f012a928:	e8 d8 58 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a92d:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a934:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a937:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a93d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a940:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a947:	eb 0e                	jmp    f012a957 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a949:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a94c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a94f:	01 d0                	add    %edx,%eax
f012a951:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a954:	ff 45 f4             	incl   -0xc(%ebp)
f012a957:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a95d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a960:	7f e7                	jg     f012a949 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a962:	e8 36 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a967:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a96a:	e8 59 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a96f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a972:	83 ec 0c             	sub    $0xc,%esp
f012a975:	68 00 00 10 00       	push   $0x100000
f012a97a:	e8 06 cf fd ff       	call   f0107885 <kmalloc>
f012a97f:	83 c4 10             	add    $0x10,%esp
f012a982:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a988:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a98e:	89 c1                	mov    %eax,%ecx
f012a990:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a997:	10 00 00 
f012a99a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a9a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a9a5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a9ab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a9b1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9b6:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a9bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a9c2:	29 d0                	sub    %edx,%eax
f012a9c4:	89 c3                	mov    %eax,%ebx
f012a9c6:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a9cd:	10 00 00 
f012a9d0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a9d5:	0f b6 d0             	movzbl %al,%edx
f012a9d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a9de:	01 d0                	add    %edx,%eax
f012a9e0:	48                   	dec    %eax
f012a9e1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a9e7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a9ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9f2:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a9f8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a9fe:	29 d0                	sub    %edx,%eax
f012aa00:	01 c3                	add    %eax,%ebx
f012aa02:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012aa09:	10 00 00 
f012aa0c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012aa11:	0f b6 c0             	movzbl %al,%eax
f012aa14:	c1 e0 04             	shl    $0x4,%eax
f012aa17:	89 c2                	mov    %eax,%edx
f012aa19:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012aa1f:	01 d0                	add    %edx,%eax
f012aa21:	48                   	dec    %eax
f012aa22:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012aa28:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012aa2e:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa33:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012aa39:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012aa3f:	29 d0                	sub    %edx,%eax
f012aa41:	01 d8                	add    %ebx,%eax
f012aa43:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012aa48:	39 c1                	cmp    %eax,%ecx
f012aa4a:	74 17                	je     f012aa63 <test_kfreelast+0x113c>
f012aa4c:	83 ec 04             	sub    $0x4,%esp
f012aa4f:	68 40 b4 13 f0       	push   $0xf013b440
f012aa54:	68 7f 0d 00 00       	push   $0xd7f
f012aa59:	68 5a b3 13 f0       	push   $0xf013b35a
f012aa5e:	e8 a2 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa63:	e8 60 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aa68:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa6b:	74 17                	je     f012aa84 <test_kfreelast+0x115d>
f012aa6d:	83 ec 04             	sub    $0x4,%esp
f012aa70:	68 74 b3 13 f0       	push   $0xf013b374
f012aa75:	68 80 0d 00 00       	push   $0xd80
f012aa7a:	68 5a b3 13 f0       	push   $0xf013b35a
f012aa7f:	e8 81 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa84:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa87:	e8 11 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aa8c:	29 c3                	sub    %eax,%ebx
f012aa8e:	89 d8                	mov    %ebx,%eax
f012aa90:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa95:	74 17                	je     f012aaae <test_kfreelast+0x1187>
f012aa97:	83 ec 04             	sub    $0x4,%esp
f012aa9a:	68 dc b3 13 f0       	push   $0xf013b3dc
f012aa9f:	68 81 0d 00 00       	push   $0xd81
f012aaa4:	68 5a b3 13 f0       	push   $0xf013b35a
f012aaa9:	e8 57 57 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012aaae:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012aab5:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012aab8:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012aabe:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012aac1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aac8:	eb 0e                	jmp    f012aad8 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012aaca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aacd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aad0:	01 d0                	add    %edx,%eax
f012aad2:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012aad5:	ff 45 f4             	incl   -0xc(%ebp)
f012aad8:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012aade:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aae1:	7f e7                	jg     f012aaca <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012aae3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012aaea:	e8 ae 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aaef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aaf2:	e8 d1 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aaf7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012aafa:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ab00:	83 ec 0c             	sub    $0xc,%esp
f012ab03:	50                   	push   %eax
f012ab04:	e8 47 ce fd ff       	call   f0107950 <kfree>
f012ab09:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ab0c:	e8 b7 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab11:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab14:	74 17                	je     f012ab2d <test_kfreelast+0x1206>
f012ab16:	83 ec 04             	sub    $0x4,%esp
f012ab19:	68 74 b3 13 f0       	push   $0xf013b374
f012ab1e:	68 91 0d 00 00       	push   $0xd91
f012ab23:	68 5a b3 13 f0       	push   $0xf013b35a
f012ab28:	e8 d8 56 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012ab2d:	e8 6b 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab32:	89 c2                	mov    %eax,%edx
f012ab34:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ab37:	29 c2                	sub    %eax,%edx
f012ab39:	89 d0                	mov    %edx,%eax
f012ab3b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ab40:	74 17                	je     f012ab59 <test_kfreelast+0x1232>
f012ab42:	83 ec 04             	sub    $0x4,%esp
f012ab45:	68 e4 ba 13 f0       	push   $0xf013bae4
f012ab4a:	68 92 0d 00 00       	push   $0xd92
f012ab4f:	68 5a b3 13 f0       	push   $0xf013b35a
f012ab54:	e8 ac 56 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab59:	e8 3f 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab61:	e8 62 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012ab69:	83 ec 0c             	sub    $0xc,%esp
f012ab6c:	68 00 78 00 00       	push   $0x7800
f012ab71:	e8 0f cd fd ff       	call   f0107885 <kmalloc>
f012ab76:	83 c4 10             	add    $0x10,%esp
f012ab79:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab7f:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ab85:	89 c1                	mov    %eax,%ecx
f012ab87:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012ab8e:	10 00 00 
f012ab91:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ab97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab9c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012aba2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012aba8:	ba 00 00 00 00       	mov    $0x0,%edx
f012abad:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012abb3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012abb9:	29 d0                	sub    %edx,%eax
f012abbb:	89 c3                	mov    %eax,%ebx
f012abbd:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012abc4:	10 00 00 
f012abc7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012abcc:	0f b6 d0             	movzbl %al,%edx
f012abcf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012abd5:	01 d0                	add    %edx,%eax
f012abd7:	48                   	dec    %eax
f012abd8:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012abde:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012abe4:	ba 00 00 00 00       	mov    $0x0,%edx
f012abe9:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012abef:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012abf5:	29 d0                	sub    %edx,%eax
f012abf7:	01 c3                	add    %eax,%ebx
f012abf9:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012ac00:	10 00 00 
f012ac03:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012ac08:	0f b6 c0             	movzbl %al,%eax
f012ac0b:	c1 e0 04             	shl    $0x4,%eax
f012ac0e:	89 c2                	mov    %eax,%edx
f012ac10:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ac16:	01 d0                	add    %edx,%eax
f012ac18:	48                   	dec    %eax
f012ac19:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012ac1f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ac25:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac2a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012ac30:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ac36:	29 d0                	sub    %edx,%eax
f012ac38:	01 d8                	add    %ebx,%eax
f012ac3a:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ac3f:	39 c1                	cmp    %eax,%ecx
f012ac41:	74 17                	je     f012ac5a <test_kfreelast+0x1333>
f012ac43:	83 ec 04             	sub    $0x4,%esp
f012ac46:	68 40 b4 13 f0       	push   $0xf013b440
f012ac4b:	68 9b 0d 00 00       	push   $0xd9b
f012ac50:	68 5a b3 13 f0       	push   $0xf013b35a
f012ac55:	e8 ab 55 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac5a:	e8 69 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac5f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac62:	74 17                	je     f012ac7b <test_kfreelast+0x1354>
f012ac64:	83 ec 04             	sub    $0x4,%esp
f012ac67:	68 74 b3 13 f0       	push   $0xf013b374
f012ac6c:	68 9c 0d 00 00       	push   $0xd9c
f012ac71:	68 5a b3 13 f0       	push   $0xf013b35a
f012ac76:	e8 8a 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac7b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac7e:	e8 1a 1f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ac83:	29 c3                	sub    %eax,%ebx
f012ac85:	89 d8                	mov    %ebx,%eax
f012ac87:	83 f8 08             	cmp    $0x8,%eax
f012ac8a:	74 17                	je     f012aca3 <test_kfreelast+0x137c>
f012ac8c:	83 ec 04             	sub    $0x4,%esp
f012ac8f:	68 dc b3 13 f0       	push   $0xf013b3dc
f012ac94:	68 9d 0d 00 00       	push   $0xd9d
f012ac99:	68 5a b3 13 f0       	push   $0xf013b35a
f012ac9e:	e8 62 55 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012aca3:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012acaa:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012acad:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012acb3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012acb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012acbd:	eb 0e                	jmp    f012accd <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012acbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012acc2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012acc5:	01 d0                	add    %edx,%eax
f012acc7:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012acca:	ff 45 f4             	incl   -0xc(%ebp)
f012accd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012acd3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012acd6:	7f e7                	jg     f012acbf <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012acd8:	e8 c0 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012acdd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ace0:	e8 e3 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ace5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012ace8:	83 ec 0c             	sub    $0xc,%esp
f012aceb:	68 00 00 10 00       	push   $0x100000
f012acf0:	e8 90 cb fd ff       	call   f0107885 <kmalloc>
f012acf5:	83 c4 10             	add    $0x10,%esp
f012acf8:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012acfe:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ad04:	89 c1                	mov    %eax,%ecx
f012ad06:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012ad0d:	10 00 00 
f012ad10:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ad16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad1b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012ad21:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ad27:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad2c:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012ad32:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ad38:	29 d0                	sub    %edx,%eax
f012ad3a:	89 c3                	mov    %eax,%ebx
f012ad3c:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012ad43:	10 00 00 
f012ad46:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012ad4b:	0f b6 d0             	movzbl %al,%edx
f012ad4e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ad54:	01 d0                	add    %edx,%eax
f012ad56:	48                   	dec    %eax
f012ad57:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012ad5d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ad63:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad68:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012ad6e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ad74:	29 d0                	sub    %edx,%eax
f012ad76:	01 c3                	add    %eax,%ebx
f012ad78:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012ad7f:	10 00 00 
f012ad82:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012ad87:	0f b6 c0             	movzbl %al,%eax
f012ad8a:	c1 e0 04             	shl    $0x4,%eax
f012ad8d:	89 c2                	mov    %eax,%edx
f012ad8f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ad95:	01 d0                	add    %edx,%eax
f012ad97:	48                   	dec    %eax
f012ad98:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012ad9e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ada4:	ba 00 00 00 00       	mov    $0x0,%edx
f012ada9:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012adaf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012adb5:	29 d0                	sub    %edx,%eax
f012adb7:	01 d8                	add    %ebx,%eax
f012adb9:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012adbe:	39 c1                	cmp    %eax,%ecx
f012adc0:	74 17                	je     f012add9 <test_kfreelast+0x14b2>
f012adc2:	83 ec 04             	sub    $0x4,%esp
f012adc5:	68 40 b4 13 f0       	push   $0xf013b440
f012adca:	68 a9 0d 00 00       	push   $0xda9
f012adcf:	68 5a b3 13 f0       	push   $0xf013b35a
f012add4:	e8 2c 54 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012add9:	e8 ea 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012adde:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ade1:	74 17                	je     f012adfa <test_kfreelast+0x14d3>
f012ade3:	83 ec 04             	sub    $0x4,%esp
f012ade6:	68 74 b3 13 f0       	push   $0xf013b374
f012adeb:	68 aa 0d 00 00       	push   $0xdaa
f012adf0:	68 5a b3 13 f0       	push   $0xf013b35a
f012adf5:	e8 0b 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012adfa:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012adfd:	e8 9b 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae02:	29 c3                	sub    %eax,%ebx
f012ae04:	89 d8                	mov    %ebx,%eax
f012ae06:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae0b:	74 17                	je     f012ae24 <test_kfreelast+0x14fd>
f012ae0d:	83 ec 04             	sub    $0x4,%esp
f012ae10:	68 dc b3 13 f0       	push   $0xf013b3dc
f012ae15:	68 ab 0d 00 00       	push   $0xdab
f012ae1a:	68 5a b3 13 f0       	push   $0xf013b35a
f012ae1f:	e8 e1 53 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012ae24:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012ae2b:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012ae2e:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ae34:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012ae37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae3e:	eb 0e                	jmp    f012ae4e <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012ae40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae43:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae46:	01 d0                	add    %edx,%eax
f012ae48:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012ae4b:	ff 45 f4             	incl   -0xc(%ebp)
f012ae4e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012ae54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae57:	7f e7                	jg     f012ae40 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012ae59:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012ae5d:	83 ec 08             	sub    $0x8,%esp
f012ae60:	ff 75 f0             	pushl  -0x10(%ebp)
f012ae63:	68 8c c3 13 f0       	push   $0xf013c38c
f012ae68:	e8 a1 5e fd ff       	call   f0100d0e <cprintf>
f012ae6d:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012ae70:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ae77:	e8 21 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae7f:	e8 44 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae84:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012ae87:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ae8d:	83 ec 0c             	sub    $0xc,%esp
f012ae90:	50                   	push   %eax
f012ae91:	e8 ba ca fd ff       	call   f0107950 <kfree>
f012ae96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae99:	e8 2a 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae9e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aea1:	74 1d                	je     f012aec0 <test_kfreelast+0x1599>
f012aea3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aea7:	75 17                	jne    f012aec0 <test_kfreelast+0x1599>
f012aea9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aeb0:	83 ec 0c             	sub    $0xc,%esp
f012aeb3:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012aeb8:	e8 51 5e fd ff       	call   f0100d0e <cprintf>
f012aebd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aec0:	e8 d8 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aec5:	89 c2                	mov    %eax,%edx
f012aec7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aeca:	29 c2                	sub    %eax,%edx
f012aecc:	89 d0                	mov    %edx,%eax
f012aece:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aed3:	74 1d                	je     f012aef2 <test_kfreelast+0x15cb>
f012aed5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aed9:	75 17                	jne    f012aef2 <test_kfreelast+0x15cb>
f012aedb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aee2:	83 ec 0c             	sub    $0xc,%esp
f012aee5:	68 20 c4 13 f0       	push   $0xf013c420
f012aeea:	e8 1f 5e fd ff       	call   f0100d0e <cprintf>
f012aeef:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012aef2:	e8 a6 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aef7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aefa:	e8 c9 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aeff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012af02:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012af08:	83 ec 0c             	sub    $0xc,%esp
f012af0b:	50                   	push   %eax
f012af0c:	e8 3f ca fd ff       	call   f0107950 <kfree>
f012af11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af14:	e8 af 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af19:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af1c:	74 1d                	je     f012af3b <test_kfreelast+0x1614>
f012af1e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af22:	75 17                	jne    f012af3b <test_kfreelast+0x1614>
f012af24:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af2b:	83 ec 0c             	sub    $0xc,%esp
f012af2e:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012af33:	e8 d6 5d fd ff       	call   f0100d0e <cprintf>
f012af38:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012af3b:	e8 5d 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af40:	89 c2                	mov    %eax,%edx
f012af42:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012af45:	29 c2                	sub    %eax,%edx
f012af47:	89 d0                	mov    %edx,%eax
f012af49:	83 f8 08             	cmp    $0x8,%eax
f012af4c:	74 1d                	je     f012af6b <test_kfreelast+0x1644>
f012af4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af52:	75 17                	jne    f012af6b <test_kfreelast+0x1644>
f012af54:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af5b:	83 ec 0c             	sub    $0xc,%esp
f012af5e:	68 20 c4 13 f0       	push   $0xf013c420
f012af63:	e8 a6 5d fd ff       	call   f0100d0e <cprintf>
f012af68:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012af6b:	e8 2d 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af73:	e8 50 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012af7b:	83 ec 0c             	sub    $0xc,%esp
f012af7e:	68 00 28 00 00       	push   $0x2800
f012af83:	e8 fd c8 fd ff       	call   f0107885 <kmalloc>
f012af88:	83 c4 10             	add    $0x10,%esp
f012af8b:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012af91:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012af97:	89 c1                	mov    %eax,%ecx
f012af99:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012afa0:	10 00 00 
f012afa3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012afa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012afae:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012afb4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012afba:	ba 00 00 00 00       	mov    $0x0,%edx
f012afbf:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012afc5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012afcb:	29 d0                	sub    %edx,%eax
f012afcd:	89 c3                	mov    %eax,%ebx
f012afcf:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012afd6:	10 00 00 
f012afd9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012afde:	0f b6 d0             	movzbl %al,%edx
f012afe1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012afe7:	01 d0                	add    %edx,%eax
f012afe9:	48                   	dec    %eax
f012afea:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012aff0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012aff6:	ba 00 00 00 00       	mov    $0x0,%edx
f012affb:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b001:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b007:	29 d0                	sub    %edx,%eax
f012b009:	01 c3                	add    %eax,%ebx
f012b00b:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b012:	10 00 00 
f012b015:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b01a:	0f b6 c0             	movzbl %al,%eax
f012b01d:	c1 e0 04             	shl    $0x4,%eax
f012b020:	89 c2                	mov    %eax,%edx
f012b022:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b028:	01 d0                	add    %edx,%eax
f012b02a:	48                   	dec    %eax
f012b02b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b031:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b037:	ba 00 00 00 00       	mov    $0x0,%edx
f012b03c:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b042:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b048:	29 d0                	sub    %edx,%eax
f012b04a:	01 d8                	add    %ebx,%eax
f012b04c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b051:	39 c1                	cmp    %eax,%ecx
f012b053:	74 1d                	je     f012b072 <test_kfreelast+0x174b>
f012b055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b059:	75 17                	jne    f012b072 <test_kfreelast+0x174b>
f012b05b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b062:	83 ec 0c             	sub    $0xc,%esp
f012b065:	68 58 c4 13 f0       	push   $0xf013c458
f012b06a:	e8 9f 5c fd ff       	call   f0100d0e <cprintf>
f012b06f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b072:	e8 51 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b077:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b07a:	74 1d                	je     f012b099 <test_kfreelast+0x1772>
f012b07c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b080:	75 17                	jne    f012b099 <test_kfreelast+0x1772>
f012b082:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b089:	83 ec 0c             	sub    $0xc,%esp
f012b08c:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b091:	e8 78 5c fd ff       	call   f0100d0e <cprintf>
f012b096:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b099:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b09c:	e8 fc 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b0a1:	29 c3                	sub    %eax,%ebx
f012b0a3:	89 d8                	mov    %ebx,%eax
f012b0a5:	83 f8 03             	cmp    $0x3,%eax
f012b0a8:	74 1d                	je     f012b0c7 <test_kfreelast+0x17a0>
f012b0aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0ae:	75 17                	jne    f012b0c7 <test_kfreelast+0x17a0>
f012b0b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0b7:	83 ec 0c             	sub    $0xc,%esp
f012b0ba:	68 c0 c4 13 f0       	push   $0xf013c4c0
f012b0bf:	e8 4a 5c fd ff       	call   f0100d0e <cprintf>
f012b0c4:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b0c7:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b0ce:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b0d1:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b0d7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b0da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b0e1:	eb 0e                	jmp    f012b0f1 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0e6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0e9:	01 d0                	add    %edx,%eax
f012b0eb:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b0ee:	ff 45 f4             	incl   -0xc(%ebp)
f012b0f1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b0f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0fa:	7f e7                	jg     f012b0e3 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b0fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b100:	75 17                	jne    f012b119 <test_kfreelast+0x17f2>
f012b102:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b106:	83 ec 08             	sub    $0x8,%esp
f012b109:	ff 75 f0             	pushl  -0x10(%ebp)
f012b10c:	68 8c c3 13 f0       	push   $0xf013c38c
f012b111:	e8 f8 5b fd ff       	call   f0100d0e <cprintf>
f012b116:	83 c4 10             	add    $0x10,%esp
f012b119:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b120:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b126:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b130:	eb 1e                	jmp    f012b150 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b132:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b138:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b13b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b13e:	01 c8                	add    %ecx,%eax
f012b140:	8a 00                	mov    (%eax),%al
f012b142:	0f be c0             	movsbl %al,%eax
f012b145:	01 d0                	add    %edx,%eax
f012b147:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b14d:	ff 45 f4             	incl   -0xc(%ebp)
f012b150:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b156:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b159:	7f d7                	jg     f012b132 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b15b:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b161:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b167:	89 d0                	mov    %edx,%eax
f012b169:	01 c0                	add    %eax,%eax
f012b16b:	01 d0                	add    %edx,%eax
f012b16d:	c1 e0 02             	shl    $0x2,%eax
f012b170:	39 c1                	cmp    %eax,%ecx
f012b172:	74 1d                	je     f012b191 <test_kfreelast+0x186a>
f012b174:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b178:	75 17                	jne    f012b191 <test_kfreelast+0x186a>
f012b17a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b181:	83 ec 0c             	sub    $0xc,%esp
f012b184:	68 04 c5 13 f0       	push   $0xf013c504
f012b189:	e8 80 5b fd ff       	call   f0100d0e <cprintf>
f012b18e:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b191:	83 ec 0c             	sub    $0xc,%esp
f012b194:	6a 03                	push   $0x3
f012b196:	e8 a2 1e fe ff       	call   f010d03d <sys_bypassPageFault>
f012b19b:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b19e:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b1a4:	05 00 30 00 00       	add    $0x3000,%eax
f012b1a9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b1ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b1b3:	eb 3c                	jmp    f012b1f1 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b1b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b1b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b1bb:	01 d0                	add    %edx,%eax
f012b1bd:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b1c0:	e8 66 1e fe ff       	call   f010d02b <sys_rcr2>
f012b1c5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b1c8:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b1cb:	01 ca                	add    %ecx,%edx
f012b1cd:	39 d0                	cmp    %edx,%eax
f012b1cf:	74 1d                	je     f012b1ee <test_kfreelast+0x18c7>
f012b1d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1d5:	75 17                	jne    f012b1ee <test_kfreelast+0x18c7>
f012b1d7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1de:	83 ec 0c             	sub    $0xc,%esp
f012b1e1:	68 38 c5 13 f0       	push   $0xf013c538
f012b1e6:	e8 23 5b fd ff       	call   f0100d0e <cprintf>
f012b1eb:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b1ee:	ff 45 f4             	incl   -0xc(%ebp)
f012b1f1:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b1f8:	7e bb                	jle    f012b1b5 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b1fa:	83 ec 0c             	sub    $0xc,%esp
f012b1fd:	6a 00                	push   $0x0
f012b1ff:	e8 39 1e fe ff       	call   f010d03d <sys_bypassPageFault>
f012b204:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b207:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b20b:	75 17                	jne    f012b224 <test_kfreelast+0x18fd>
f012b20d:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b211:	83 ec 08             	sub    $0x8,%esp
f012b214:	ff 75 f0             	pushl  -0x10(%ebp)
f012b217:	68 8c c3 13 f0       	push   $0xf013c38c
f012b21c:	e8 ed 5a fd ff       	call   f0100d0e <cprintf>
f012b221:	83 c4 10             	add    $0x10,%esp
f012b224:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b22b:	e8 6d 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b230:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b233:	e8 90 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b238:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b23b:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b241:	83 ec 0c             	sub    $0xc,%esp
f012b244:	50                   	push   %eax
f012b245:	e8 06 c7 fd ff       	call   f0107950 <kfree>
f012b24a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b24d:	e8 76 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b252:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b255:	74 1d                	je     f012b274 <test_kfreelast+0x194d>
f012b257:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b25b:	75 17                	jne    f012b274 <test_kfreelast+0x194d>
f012b25d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b264:	83 ec 0c             	sub    $0xc,%esp
f012b267:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b26c:	e8 9d 5a fd ff       	call   f0100d0e <cprintf>
f012b271:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b274:	e8 24 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b279:	89 c2                	mov    %eax,%edx
f012b27b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b27e:	29 c2                	sub    %eax,%edx
f012b280:	89 d0                	mov    %edx,%eax
f012b282:	83 f8 03             	cmp    $0x3,%eax
f012b285:	74 1d                	je     f012b2a4 <test_kfreelast+0x197d>
f012b287:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b28b:	75 17                	jne    f012b2a4 <test_kfreelast+0x197d>
f012b28d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b294:	83 ec 0c             	sub    $0xc,%esp
f012b297:	68 20 c4 13 f0       	push   $0xf013c420
f012b29c:	e8 6d 5a fd ff       	call   f0100d0e <cprintf>
f012b2a1:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2a4:	e8 f4 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b2a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2ac:	e8 17 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b2b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b2b4:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b2ba:	83 ec 0c             	sub    $0xc,%esp
f012b2bd:	50                   	push   %eax
f012b2be:	e8 8d c6 fd ff       	call   f0107950 <kfree>
f012b2c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2c6:	e8 fd 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b2cb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2ce:	74 1d                	je     f012b2ed <test_kfreelast+0x19c6>
f012b2d0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2d4:	75 17                	jne    f012b2ed <test_kfreelast+0x19c6>
f012b2d6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2dd:	83 ec 0c             	sub    $0xc,%esp
f012b2e0:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b2e5:	e8 24 5a fd ff       	call   f0100d0e <cprintf>
f012b2ea:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2ed:	e8 ab 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b2f2:	89 c2                	mov    %eax,%edx
f012b2f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2f7:	29 c2                	sub    %eax,%edx
f012b2f9:	89 d0                	mov    %edx,%eax
f012b2fb:	83 f8 04             	cmp    $0x4,%eax
f012b2fe:	74 1d                	je     f012b31d <test_kfreelast+0x19f6>
f012b300:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b304:	75 17                	jne    f012b31d <test_kfreelast+0x19f6>
f012b306:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b30d:	83 ec 0c             	sub    $0xc,%esp
f012b310:	68 20 c4 13 f0       	push   $0xf013c420
f012b315:	e8 f4 59 fd ff       	call   f0100d0e <cprintf>
f012b31a:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b31d:	e8 7b 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b322:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b325:	e8 9e 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b32a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b32d:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b333:	83 ec 0c             	sub    $0xc,%esp
f012b336:	50                   	push   %eax
f012b337:	e8 14 c6 fd ff       	call   f0107950 <kfree>
f012b33c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b33f:	e8 84 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b344:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b347:	74 1d                	je     f012b366 <test_kfreelast+0x1a3f>
f012b349:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b34d:	75 17                	jne    f012b366 <test_kfreelast+0x1a3f>
f012b34f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b356:	83 ec 0c             	sub    $0xc,%esp
f012b359:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b35e:	e8 ab 59 fd ff       	call   f0100d0e <cprintf>
f012b363:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b366:	e8 32 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b36b:	89 c2                	mov    %eax,%edx
f012b36d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b370:	29 c2                	sub    %eax,%edx
f012b372:	89 d0                	mov    %edx,%eax
f012b374:	83 f8 05             	cmp    $0x5,%eax
f012b377:	74 1d                	je     f012b396 <test_kfreelast+0x1a6f>
f012b379:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b37d:	75 17                	jne    f012b396 <test_kfreelast+0x1a6f>
f012b37f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b386:	83 ec 0c             	sub    $0xc,%esp
f012b389:	68 20 c4 13 f0       	push   $0xf013c420
f012b38e:	e8 7b 59 fd ff       	call   f0100d0e <cprintf>
f012b393:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b396:	e8 02 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b39b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b39e:	e8 25 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b3a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b3a6:	83 ec 0c             	sub    $0xc,%esp
f012b3a9:	68 00 c8 00 00       	push   $0xc800
f012b3ae:	e8 d2 c4 fd ff       	call   f0107885 <kmalloc>
f012b3b3:	83 c4 10             	add    $0x10,%esp
f012b3b6:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b3bc:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b3c2:	89 c1                	mov    %eax,%ecx
f012b3c4:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b3cb:	10 00 00 
f012b3ce:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b3d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b3d9:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b3df:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b3e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3ea:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b3f0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b3f6:	29 d0                	sub    %edx,%eax
f012b3f8:	89 c3                	mov    %eax,%ebx
f012b3fa:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b401:	10 00 00 
f012b404:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b409:	0f b6 d0             	movzbl %al,%edx
f012b40c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b412:	01 d0                	add    %edx,%eax
f012b414:	48                   	dec    %eax
f012b415:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b41b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b421:	ba 00 00 00 00       	mov    $0x0,%edx
f012b426:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b42c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b432:	29 d0                	sub    %edx,%eax
f012b434:	01 c3                	add    %eax,%ebx
f012b436:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b43d:	10 00 00 
f012b440:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b445:	0f b6 c0             	movzbl %al,%eax
f012b448:	c1 e0 04             	shl    $0x4,%eax
f012b44b:	89 c2                	mov    %eax,%edx
f012b44d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b453:	01 d0                	add    %edx,%eax
f012b455:	48                   	dec    %eax
f012b456:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b45c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b462:	ba 00 00 00 00       	mov    $0x0,%edx
f012b467:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b46d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b473:	29 d0                	sub    %edx,%eax
f012b475:	01 d8                	add    %ebx,%eax
f012b477:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b47c:	39 c1                	cmp    %eax,%ecx
f012b47e:	74 1d                	je     f012b49d <test_kfreelast+0x1b76>
f012b480:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b484:	75 17                	jne    f012b49d <test_kfreelast+0x1b76>
f012b486:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b48d:	83 ec 0c             	sub    $0xc,%esp
f012b490:	68 58 c4 13 f0       	push   $0xf013c458
f012b495:	e8 74 58 fd ff       	call   f0100d0e <cprintf>
f012b49a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b49d:	e8 26 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4a5:	74 1d                	je     f012b4c4 <test_kfreelast+0x1b9d>
f012b4a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4ab:	75 17                	jne    f012b4c4 <test_kfreelast+0x1b9d>
f012b4ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4b4:	83 ec 0c             	sub    $0xc,%esp
f012b4b7:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b4bc:	e8 4d 58 fd ff       	call   f0100d0e <cprintf>
f012b4c1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b4c4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b4c7:	e8 d1 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b4cc:	29 c3                	sub    %eax,%ebx
f012b4ce:	89 d8                	mov    %ebx,%eax
f012b4d0:	83 f8 0d             	cmp    $0xd,%eax
f012b4d3:	74 1d                	je     f012b4f2 <test_kfreelast+0x1bcb>
f012b4d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4d9:	75 17                	jne    f012b4f2 <test_kfreelast+0x1bcb>
f012b4db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4e2:	83 ec 0c             	sub    $0xc,%esp
f012b4e5:	68 c0 c4 13 f0       	push   $0xf013c4c0
f012b4ea:	e8 1f 58 fd ff       	call   f0100d0e <cprintf>
f012b4ef:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b4f2:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b4f9:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b4fc:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b502:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b505:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b50c:	eb 0e                	jmp    f012b51c <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b50e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b511:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b514:	01 d0                	add    %edx,%eax
f012b516:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b519:	ff 45 f4             	incl   -0xc(%ebp)
f012b51c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b522:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b525:	7f e7                	jg     f012b50e <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b527:	e8 71 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b52c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b52f:	e8 94 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b534:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b537:	83 ec 0c             	sub    $0xc,%esp
f012b53a:	68 00 fc 2f 00       	push   $0x2ffc00
f012b53f:	e8 41 c3 fd ff       	call   f0107885 <kmalloc>
f012b544:	83 c4 10             	add    $0x10,%esp
f012b547:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b54d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b553:	89 c1                	mov    %eax,%ecx
f012b555:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b55c:	10 00 00 
f012b55f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b565:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b56a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b570:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b576:	ba 00 00 00 00       	mov    $0x0,%edx
f012b57b:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b581:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b587:	29 d0                	sub    %edx,%eax
f012b589:	89 c3                	mov    %eax,%ebx
f012b58b:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b592:	10 00 00 
f012b595:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b59a:	0f b6 d0             	movzbl %al,%edx
f012b59d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b5a3:	01 d0                	add    %edx,%eax
f012b5a5:	48                   	dec    %eax
f012b5a6:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b5ac:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5b7:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b5bd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b5c3:	29 d0                	sub    %edx,%eax
f012b5c5:	01 c3                	add    %eax,%ebx
f012b5c7:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b5ce:	10 00 00 
f012b5d1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b5d6:	0f b6 c0             	movzbl %al,%eax
f012b5d9:	c1 e0 04             	shl    $0x4,%eax
f012b5dc:	89 c2                	mov    %eax,%edx
f012b5de:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b5e4:	01 d0                	add    %edx,%eax
f012b5e6:	48                   	dec    %eax
f012b5e7:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b5ed:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b5f3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5f8:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b5fe:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b604:	29 d0                	sub    %edx,%eax
f012b606:	01 d8                	add    %ebx,%eax
f012b608:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b60d:	39 c1                	cmp    %eax,%ecx
f012b60f:	74 1d                	je     f012b62e <test_kfreelast+0x1d07>
f012b611:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b615:	75 17                	jne    f012b62e <test_kfreelast+0x1d07>
f012b617:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b61e:	83 ec 0c             	sub    $0xc,%esp
f012b621:	68 58 c4 13 f0       	push   $0xf013c458
f012b626:	e8 e3 56 fd ff       	call   f0100d0e <cprintf>
f012b62b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b62e:	e8 95 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b633:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b636:	74 1d                	je     f012b655 <test_kfreelast+0x1d2e>
f012b638:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b63c:	75 17                	jne    f012b655 <test_kfreelast+0x1d2e>
f012b63e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b645:	83 ec 0c             	sub    $0xc,%esp
f012b648:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b64d:	e8 bc 56 fd ff       	call   f0100d0e <cprintf>
f012b652:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b655:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b658:	e8 40 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b65d:	29 c3                	sub    %eax,%ebx
f012b65f:	89 d8                	mov    %ebx,%eax
f012b661:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b666:	74 1d                	je     f012b685 <test_kfreelast+0x1d5e>
f012b668:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b66c:	75 17                	jne    f012b685 <test_kfreelast+0x1d5e>
f012b66e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b675:	83 ec 0c             	sub    $0xc,%esp
f012b678:	68 c0 c4 13 f0       	push   $0xf013c4c0
f012b67d:	e8 8c 56 fd ff       	call   f0100d0e <cprintf>
f012b682:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b685:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b68c:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b68f:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b695:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b698:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b69f:	eb 0e                	jmp    f012b6af <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b6a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b6a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b6a7:	01 d0                	add    %edx,%eax
f012b6a9:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b6ac:	ff 45 f4             	incl   -0xc(%ebp)
f012b6af:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b6b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b6b8:	7f e7                	jg     f012b6a1 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b6ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6be:	75 17                	jne    f012b6d7 <test_kfreelast+0x1db0>
f012b6c0:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b6c4:	83 ec 08             	sub    $0x8,%esp
f012b6c7:	ff 75 f0             	pushl  -0x10(%ebp)
f012b6ca:	68 8c c3 13 f0       	push   $0xf013c38c
f012b6cf:	e8 3a 56 fd ff       	call   f0100d0e <cprintf>
f012b6d4:	83 c4 10             	add    $0x10,%esp
f012b6d7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6de:	e8 ba 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b6e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6e6:	e8 dd 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b6ee:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b6f4:	83 ec 0c             	sub    $0xc,%esp
f012b6f7:	50                   	push   %eax
f012b6f8:	e8 53 c2 fd ff       	call   f0107950 <kfree>
f012b6fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b700:	e8 c3 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b705:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b708:	74 1d                	je     f012b727 <test_kfreelast+0x1e00>
f012b70a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b70e:	75 17                	jne    f012b727 <test_kfreelast+0x1e00>
f012b710:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b717:	83 ec 0c             	sub    $0xc,%esp
f012b71a:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b71f:	e8 ea 55 fd ff       	call   f0100d0e <cprintf>
f012b724:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b727:	e8 71 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b72c:	89 c2                	mov    %eax,%edx
f012b72e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b731:	29 c2                	sub    %eax,%edx
f012b733:	89 d0                	mov    %edx,%eax
f012b735:	83 f8 0d             	cmp    $0xd,%eax
f012b738:	74 1d                	je     f012b757 <test_kfreelast+0x1e30>
f012b73a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b73e:	75 17                	jne    f012b757 <test_kfreelast+0x1e30>
f012b740:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b747:	83 ec 0c             	sub    $0xc,%esp
f012b74a:	68 20 c4 13 f0       	push   $0xf013c420
f012b74f:	e8 ba 55 fd ff       	call   f0100d0e <cprintf>
f012b754:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b757:	83 ec 0c             	sub    $0xc,%esp
f012b75a:	6a 03                	push   $0x3
f012b75c:	e8 dc 18 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b761:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b764:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b76a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b76d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b774:	eb 3c                	jmp    f012b7b2 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b776:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b779:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b77c:	01 d0                	add    %edx,%eax
f012b77e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b781:	e8 a5 18 fe ff       	call   f010d02b <sys_rcr2>
f012b786:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b789:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b78c:	01 ca                	add    %ecx,%edx
f012b78e:	39 d0                	cmp    %edx,%eax
f012b790:	74 1d                	je     f012b7af <test_kfreelast+0x1e88>
f012b792:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b796:	75 17                	jne    f012b7af <test_kfreelast+0x1e88>
f012b798:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b79f:	83 ec 0c             	sub    $0xc,%esp
f012b7a2:	68 38 c5 13 f0       	push   $0xf013c538
f012b7a7:	e8 62 55 fd ff       	call   f0100d0e <cprintf>
f012b7ac:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b7af:	ff 45 f4             	incl   -0xc(%ebp)
f012b7b2:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b7b9:	7e bb                	jle    f012b776 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b7bb:	83 ec 0c             	sub    $0xc,%esp
f012b7be:	6a 00                	push   $0x0
f012b7c0:	e8 78 18 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b7c5:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b7c8:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b7ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b7d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b7d8:	eb 1e                	jmp    f012b7f8 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b7da:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b7e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b7e3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b7e6:	01 c8                	add    %ecx,%eax
f012b7e8:	8a 00                	mov    (%eax),%al
f012b7ea:	0f be c0             	movsbl %al,%eax
f012b7ed:	01 d0                	add    %edx,%eax
f012b7ef:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b7f5:	ff 45 f4             	incl   -0xc(%ebp)
f012b7f8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b7fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b801:	7f d7                	jg     f012b7da <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b803:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b809:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b80f:	89 d0                	mov    %edx,%eax
f012b811:	01 c0                	add    %eax,%eax
f012b813:	01 d0                	add    %edx,%eax
f012b815:	01 c0                	add    %eax,%eax
f012b817:	01 d0                	add    %edx,%eax
f012b819:	01 c0                	add    %eax,%eax
f012b81b:	39 c1                	cmp    %eax,%ecx
f012b81d:	74 1d                	je     f012b83c <test_kfreelast+0x1f15>
f012b81f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b823:	75 17                	jne    f012b83c <test_kfreelast+0x1f15>
f012b825:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b82c:	83 ec 0c             	sub    $0xc,%esp
f012b82f:	68 04 c5 13 f0       	push   $0xf013c504
f012b834:	e8 d5 54 fd ff       	call   f0100d0e <cprintf>
f012b839:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b83c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b840:	75 17                	jne    f012b859 <test_kfreelast+0x1f32>
f012b842:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b846:	83 ec 08             	sub    $0x8,%esp
f012b849:	ff 75 f0             	pushl  -0x10(%ebp)
f012b84c:	68 8c c3 13 f0       	push   $0xf013c38c
f012b851:	e8 b8 54 fd ff       	call   f0100d0e <cprintf>
f012b856:	83 c4 10             	add    $0x10,%esp
f012b859:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b860:	e8 38 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b865:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b868:	e8 5b 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b86d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b870:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b876:	83 ec 0c             	sub    $0xc,%esp
f012b879:	50                   	push   %eax
f012b87a:	e8 d1 c0 fd ff       	call   f0107950 <kfree>
f012b87f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b882:	e8 41 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b887:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b88a:	74 1d                	je     f012b8a9 <test_kfreelast+0x1f82>
f012b88c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b890:	75 17                	jne    f012b8a9 <test_kfreelast+0x1f82>
f012b892:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b899:	83 ec 0c             	sub    $0xc,%esp
f012b89c:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b8a1:	e8 68 54 fd ff       	call   f0100d0e <cprintf>
f012b8a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b8a9:	e8 ef 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8ae:	89 c2                	mov    %eax,%edx
f012b8b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b8b3:	29 c2                	sub    %eax,%edx
f012b8b5:	89 d0                	mov    %edx,%eax
f012b8b7:	83 f8 02             	cmp    $0x2,%eax
f012b8ba:	74 1d                	je     f012b8d9 <test_kfreelast+0x1fb2>
f012b8bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8c0:	75 17                	jne    f012b8d9 <test_kfreelast+0x1fb2>
f012b8c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8c9:	83 ec 0c             	sub    $0xc,%esp
f012b8cc:	68 20 c4 13 f0       	push   $0xf013c420
f012b8d1:	e8 38 54 fd ff       	call   f0100d0e <cprintf>
f012b8d6:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b8d9:	e8 bf 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8e1:	e8 e2 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b8e9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b8ef:	83 ec 0c             	sub    $0xc,%esp
f012b8f2:	50                   	push   %eax
f012b8f3:	e8 58 c0 fd ff       	call   f0107950 <kfree>
f012b8f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8fb:	e8 c8 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b900:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b903:	74 1d                	je     f012b922 <test_kfreelast+0x1ffb>
f012b905:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b909:	75 17                	jne    f012b922 <test_kfreelast+0x1ffb>
f012b90b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b912:	83 ec 0c             	sub    $0xc,%esp
f012b915:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b91a:	e8 ef 53 fd ff       	call   f0100d0e <cprintf>
f012b91f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b922:	e8 76 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b927:	89 c2                	mov    %eax,%edx
f012b929:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b92c:	29 c2                	sub    %eax,%edx
f012b92e:	89 d0                	mov    %edx,%eax
f012b930:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b935:	74 1d                	je     f012b954 <test_kfreelast+0x202d>
f012b937:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b93b:	75 17                	jne    f012b954 <test_kfreelast+0x202d>
f012b93d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b944:	83 ec 0c             	sub    $0xc,%esp
f012b947:	68 20 c4 13 f0       	push   $0xf013c420
f012b94c:	e8 bd 53 fd ff       	call   f0100d0e <cprintf>
f012b951:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b954:	e8 44 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b959:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b95c:	e8 67 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b961:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b964:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b96a:	83 ec 0c             	sub    $0xc,%esp
f012b96d:	50                   	push   %eax
f012b96e:	e8 dd bf fd ff       	call   f0107950 <kfree>
f012b973:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b976:	e8 4d 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b97b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b97e:	74 1d                	je     f012b99d <test_kfreelast+0x2076>
f012b980:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b984:	75 17                	jne    f012b99d <test_kfreelast+0x2076>
f012b986:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b98d:	83 ec 0c             	sub    $0xc,%esp
f012b990:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012b995:	e8 74 53 fd ff       	call   f0100d0e <cprintf>
f012b99a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b99d:	e8 fb 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b9a2:	89 c2                	mov    %eax,%edx
f012b9a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9a7:	29 c2                	sub    %eax,%edx
f012b9a9:	89 d0                	mov    %edx,%eax
f012b9ab:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b9b0:	74 1d                	je     f012b9cf <test_kfreelast+0x20a8>
f012b9b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9b6:	75 17                	jne    f012b9cf <test_kfreelast+0x20a8>
f012b9b8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9bf:	83 ec 0c             	sub    $0xc,%esp
f012b9c2:	68 20 c4 13 f0       	push   $0xf013c420
f012b9c7:	e8 42 53 fd ff       	call   f0100d0e <cprintf>
f012b9cc:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9cf:	e8 c9 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b9d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9d7:	e8 ec 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b9df:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b9e5:	83 ec 0c             	sub    $0xc,%esp
f012b9e8:	50                   	push   %eax
f012b9e9:	e8 62 bf fd ff       	call   f0107950 <kfree>
f012b9ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b9f1:	e8 d2 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9f6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b9f9:	74 1d                	je     f012ba18 <test_kfreelast+0x20f1>
f012b9fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9ff:	75 17                	jne    f012ba18 <test_kfreelast+0x20f1>
f012ba01:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba08:	83 ec 0c             	sub    $0xc,%esp
f012ba0b:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012ba10:	e8 f9 52 fd ff       	call   f0100d0e <cprintf>
f012ba15:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba18:	e8 80 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba1d:	89 c2                	mov    %eax,%edx
f012ba1f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba22:	29 c2                	sub    %eax,%edx
f012ba24:	89 d0                	mov    %edx,%eax
f012ba26:	83 f8 01             	cmp    $0x1,%eax
f012ba29:	74 1d                	je     f012ba48 <test_kfreelast+0x2121>
f012ba2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba2f:	75 17                	jne    f012ba48 <test_kfreelast+0x2121>
f012ba31:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba38:	83 ec 0c             	sub    $0xc,%esp
f012ba3b:	68 20 c4 13 f0       	push   $0xf013c420
f012ba40:	e8 c9 52 fd ff       	call   f0100d0e <cprintf>
f012ba45:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba48:	e8 50 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba4d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba50:	e8 73 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012ba58:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ba5e:	83 ec 0c             	sub    $0xc,%esp
f012ba61:	50                   	push   %eax
f012ba62:	e8 e9 be fd ff       	call   f0107950 <kfree>
f012ba67:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba6a:	e8 59 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba6f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba72:	74 1d                	je     f012ba91 <test_kfreelast+0x216a>
f012ba74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba78:	75 17                	jne    f012ba91 <test_kfreelast+0x216a>
f012ba7a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba81:	83 ec 0c             	sub    $0xc,%esp
f012ba84:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012ba89:	e8 80 52 fd ff       	call   f0100d0e <cprintf>
f012ba8e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba91:	e8 07 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba96:	89 c2                	mov    %eax,%edx
f012ba98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba9b:	29 c2                	sub    %eax,%edx
f012ba9d:	89 d0                	mov    %edx,%eax
f012ba9f:	83 f8 01             	cmp    $0x1,%eax
f012baa2:	74 1d                	je     f012bac1 <test_kfreelast+0x219a>
f012baa4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baa8:	75 17                	jne    f012bac1 <test_kfreelast+0x219a>
f012baaa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bab1:	83 ec 0c             	sub    $0xc,%esp
f012bab4:	68 20 c4 13 f0       	push   $0xf013c420
f012bab9:	e8 50 52 fd ff       	call   f0100d0e <cprintf>
f012babe:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012bac1:	e8 d7 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bac6:	89 c2                	mov    %eax,%edx
f012bac8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bacb:	39 c2                	cmp    %eax,%edx
f012bacd:	74 1d                	je     f012baec <test_kfreelast+0x21c5>
f012bacf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bad3:	75 17                	jne    f012baec <test_kfreelast+0x21c5>
f012bad5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012badc:	83 ec 0c             	sub    $0xc,%esp
f012badf:	68 80 c5 13 f0       	push   $0xf013c580
f012bae4:	e8 25 52 fd ff       	call   f0100d0e <cprintf>
f012bae9:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012baec:	83 ec 0c             	sub    $0xc,%esp
f012baef:	6a 03                	push   $0x3
f012baf1:	e8 47 15 fe ff       	call   f010d03d <sys_bypassPageFault>
f012baf6:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012baf9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bb00:	e9 8e 00 00 00       	jmp    f012bb93 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012bb05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bb08:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012bb0f:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012bb12:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb15:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bb18:	e8 0e 15 fe ff       	call   f010d02b <sys_rcr2>
f012bb1d:	89 c2                	mov    %eax,%edx
f012bb1f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb22:	39 c2                	cmp    %eax,%edx
f012bb24:	74 1d                	je     f012bb43 <test_kfreelast+0x221c>
f012bb26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb2a:	75 17                	jne    f012bb43 <test_kfreelast+0x221c>
f012bb2c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb33:	83 ec 0c             	sub    $0xc,%esp
f012bb36:	68 38 c5 13 f0       	push   $0xf013c538
f012bb3b:	e8 ce 51 fd ff       	call   f0100d0e <cprintf>
f012bb40:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012bb43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bb46:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bb4d:	89 c2                	mov    %eax,%edx
f012bb4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb52:	01 d0                	add    %edx,%eax
f012bb54:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bb57:	e8 cf 14 fe ff       	call   f010d02b <sys_rcr2>
f012bb5c:	89 c2                	mov    %eax,%edx
f012bb5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bb61:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bb68:	89 c1                	mov    %eax,%ecx
f012bb6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb6d:	01 c8                	add    %ecx,%eax
f012bb6f:	39 c2                	cmp    %eax,%edx
f012bb71:	74 1d                	je     f012bb90 <test_kfreelast+0x2269>
f012bb73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb77:	75 17                	jne    f012bb90 <test_kfreelast+0x2269>
f012bb79:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb80:	83 ec 0c             	sub    $0xc,%esp
f012bb83:	68 38 c5 13 f0       	push   $0xf013c538
f012bb88:	e8 81 51 fd ff       	call   f0100d0e <cprintf>
f012bb8d:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012bb90:	ff 45 f4             	incl   -0xc(%ebp)
f012bb93:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bb97:	0f 8e 68 ff ff ff    	jle    f012bb05 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bb9d:	83 ec 0c             	sub    $0xc,%esp
f012bba0:	6a 00                	push   $0x0
f012bba2:	e8 96 14 fe ff       	call   f010d03d <sys_bypassPageFault>
f012bba7:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bbaa:	e8 ee 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bbaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbb2:	e8 11 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bbba:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bbc0:	83 ec 0c             	sub    $0xc,%esp
f012bbc3:	50                   	push   %eax
f012bbc4:	e8 87 bd fd ff       	call   f0107950 <kfree>
f012bbc9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bbcc:	e8 f7 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbd1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbd4:	74 1d                	je     f012bbf3 <test_kfreelast+0x22cc>
f012bbd6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbda:	75 17                	jne    f012bbf3 <test_kfreelast+0x22cc>
f012bbdc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbe3:	83 ec 0c             	sub    $0xc,%esp
f012bbe6:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012bbeb:	e8 1e 51 fd ff       	call   f0100d0e <cprintf>
f012bbf0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bbf3:	e8 a5 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bbf8:	89 c2                	mov    %eax,%edx
f012bbfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bbfd:	39 c2                	cmp    %eax,%edx
f012bbff:	74 1d                	je     f012bc1e <test_kfreelast+0x22f7>
f012bc01:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc05:	75 17                	jne    f012bc1e <test_kfreelast+0x22f7>
f012bc07:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc0e:	83 ec 0c             	sub    $0xc,%esp
f012bc11:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012bc16:	e8 f3 50 fd ff       	call   f0100d0e <cprintf>
f012bc1b:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bc1e:	e8 7a 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc26:	e8 9d 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bc2e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bc34:	83 ec 0c             	sub    $0xc,%esp
f012bc37:	50                   	push   %eax
f012bc38:	e8 13 bd fd ff       	call   f0107950 <kfree>
f012bc3d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc40:	e8 83 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc45:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc48:	74 1d                	je     f012bc67 <test_kfreelast+0x2340>
f012bc4a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc4e:	75 17                	jne    f012bc67 <test_kfreelast+0x2340>
f012bc50:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc57:	83 ec 0c             	sub    $0xc,%esp
f012bc5a:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012bc5f:	e8 aa 50 fd ff       	call   f0100d0e <cprintf>
f012bc64:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bc67:	e8 31 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc6c:	89 c2                	mov    %eax,%edx
f012bc6e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc71:	39 c2                	cmp    %eax,%edx
f012bc73:	74 1d                	je     f012bc92 <test_kfreelast+0x236b>
f012bc75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc79:	75 17                	jne    f012bc92 <test_kfreelast+0x236b>
f012bc7b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc82:	83 ec 0c             	sub    $0xc,%esp
f012bc85:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012bc8a:	e8 7f 50 fd ff       	call   f0100d0e <cprintf>
f012bc8f:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012bc92:	e8 06 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc9a:	e8 29 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bca2:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bca8:	83 ec 0c             	sub    $0xc,%esp
f012bcab:	50                   	push   %eax
f012bcac:	e8 9f bc fd ff       	call   f0107950 <kfree>
f012bcb1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bcb4:	e8 0f 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bcb9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bcbc:	74 1d                	je     f012bcdb <test_kfreelast+0x23b4>
f012bcbe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcc2:	75 17                	jne    f012bcdb <test_kfreelast+0x23b4>
f012bcc4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bccb:	83 ec 0c             	sub    $0xc,%esp
f012bcce:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012bcd3:	e8 36 50 fd ff       	call   f0100d0e <cprintf>
f012bcd8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bcdb:	e8 bd 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bce0:	89 c2                	mov    %eax,%edx
f012bce2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bce5:	39 c2                	cmp    %eax,%edx
f012bce7:	74 1d                	je     f012bd06 <test_kfreelast+0x23df>
f012bce9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bced:	75 17                	jne    f012bd06 <test_kfreelast+0x23df>
f012bcef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcf6:	83 ec 0c             	sub    $0xc,%esp
f012bcf9:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012bcfe:	e8 0b 50 fd ff       	call   f0100d0e <cprintf>
f012bd03:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012bd06:	e8 92 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bd0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd0e:	e8 b5 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012bd16:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012bd1c:	83 ec 0c             	sub    $0xc,%esp
f012bd1f:	50                   	push   %eax
f012bd20:	e8 2b bc fd ff       	call   f0107950 <kfree>
f012bd25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd28:	e8 9b 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd2d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd30:	74 1d                	je     f012bd4f <test_kfreelast+0x2428>
f012bd32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd36:	75 17                	jne    f012bd4f <test_kfreelast+0x2428>
f012bd38:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd3f:	83 ec 0c             	sub    $0xc,%esp
f012bd42:	68 b4 c3 13 f0       	push   $0xf013c3b4
f012bd47:	e8 c2 4f fd ff       	call   f0100d0e <cprintf>
f012bd4c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bd4f:	e8 49 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bd54:	89 c2                	mov    %eax,%edx
f012bd56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd59:	39 c2                	cmp    %eax,%edx
f012bd5b:	74 1d                	je     f012bd7a <test_kfreelast+0x2453>
f012bd5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd61:	75 17                	jne    f012bd7a <test_kfreelast+0x2453>
f012bd63:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd6a:	83 ec 0c             	sub    $0xc,%esp
f012bd6d:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012bd72:	e8 97 4f fd ff       	call   f0100d0e <cprintf>
f012bd77:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bd7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd7e:	75 17                	jne    f012bd97 <test_kfreelast+0x2470>
f012bd80:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012bd84:	83 ec 08             	sub    $0x8,%esp
f012bd87:	ff 75 f0             	pushl  -0x10(%ebp)
f012bd8a:	68 8c c3 13 f0       	push   $0xf013c38c
f012bd8f:	e8 7a 4f fd ff       	call   f0100d0e <cprintf>
f012bd94:	83 c4 10             	add    $0x10,%esp
f012bd97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012bd9e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012bda3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bda6:	5b                   	pop    %ebx
f012bda7:	5f                   	pop    %edi
f012bda8:	5d                   	pop    %ebp
f012bda9:	c3                   	ret    

f012bdaa <test_krealloc>:

int test_krealloc() {
f012bdaa:	55                   	push   %ebp
f012bdab:	89 e5                	mov    %esp,%ebp
f012bdad:	57                   	push   %edi
f012bdae:	53                   	push   %ebx
f012bdaf:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012bdb5:	83 ec 0c             	sub    $0xc,%esp
f012bdb8:	68 9c b2 13 f0       	push   $0xf013b29c
f012bdbd:	e8 4c 4f fd ff       	call   f0100d0e <cprintf>
f012bdc2:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bdc5:	83 ec 0c             	sub    $0xc,%esp
f012bdc8:	68 cc b2 13 f0       	push   $0xf013b2cc
f012bdcd:	e8 3c 4f fd ff       	call   f0100d0e <cprintf>
f012bdd2:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bdd5:	83 ec 0c             	sub    $0xc,%esp
f012bdd8:	68 9c b2 13 f0       	push   $0xf013b29c
f012bddd:	e8 2c 4f fd ff       	call   f0100d0e <cprintf>
f012bde2:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bde5:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bde9:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bded:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bdf3:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bdf9:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012be00:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012be07:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012be0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be12:	b8 00 00 00 00       	mov    $0x0,%eax
f012be17:	89 d7                	mov    %edx,%edi
f012be19:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012be1b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012be22:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012be28:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be2d:	b8 00 00 00 00       	mov    $0x0,%eax
f012be32:	89 d7                	mov    %edx,%edi
f012be34:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012be36:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012be3c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be41:	b8 00 00 00 00       	mov    $0x0,%eax
f012be46:	89 d7                	mov    %edx,%edi
f012be48:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012be4a:	e8 4e 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012be4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012be52:	83 ec 08             	sub    $0x8,%esp
f012be55:	68 00 fc 0f 00       	push   $0xffc00
f012be5a:	6a 00                	push   $0x0
f012be5c:	e8 e4 bc fd ff       	call   f0107b45 <krealloc>
f012be61:	83 c4 10             	add    $0x10,%esp
f012be64:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012be6a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012be70:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012be75:	77 17                	ja     f012be8e <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be77:	83 ec 04             	sub    $0x4,%esp
f012be7a:	68 00 c6 13 f0       	push   $0xf013c600
f012be7f:	68 e2 0e 00 00       	push   $0xee2
f012be84:	68 5a b3 13 f0       	push   $0xf013b35a
f012be89:	e8 77 43 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012be8e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012be94:	89 c1                	mov    %eax,%ecx
f012be96:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012be9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bea0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bea5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bea8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012beab:	ba 00 00 00 00       	mov    $0x0,%edx
f012beb0:	f7 75 b4             	divl   -0x4c(%ebp)
f012beb3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012beb6:	29 d0                	sub    %edx,%eax
f012beb8:	89 c3                	mov    %eax,%ebx
f012beba:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bec1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012bec6:	0f b6 d0             	movzbl %al,%edx
f012bec9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012becc:	01 d0                	add    %edx,%eax
f012bece:	48                   	dec    %eax
f012becf:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bed2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bed5:	ba 00 00 00 00       	mov    $0x0,%edx
f012beda:	f7 75 ac             	divl   -0x54(%ebp)
f012bedd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bee0:	29 d0                	sub    %edx,%eax
f012bee2:	01 c3                	add    %eax,%ebx
f012bee4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012beeb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012bef0:	0f b6 c0             	movzbl %al,%eax
f012bef3:	c1 e0 04             	shl    $0x4,%eax
f012bef6:	89 c2                	mov    %eax,%edx
f012bef8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012befb:	01 d0                	add    %edx,%eax
f012befd:	48                   	dec    %eax
f012befe:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bf01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bf04:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf09:	f7 75 a4             	divl   -0x5c(%ebp)
f012bf0c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bf0f:	29 d0                	sub    %edx,%eax
f012bf11:	01 d8                	add    %ebx,%eax
f012bf13:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bf18:	39 c1                	cmp    %eax,%ecx
f012bf1a:	74 17                	je     f012bf33 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012bf1c:	83 ec 04             	sub    $0x4,%esp
f012bf1f:	68 3c c6 13 f0       	push   $0xf013c63c
f012bf24:	68 e4 0e 00 00       	push   $0xee4
f012bf29:	68 5a b3 13 f0       	push   $0xf013b35a
f012bf2e:	e8 d2 42 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf33:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf36:	e8 62 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bf3b:	29 c3                	sub    %eax,%ebx
f012bf3d:	89 d8                	mov    %ebx,%eax
f012bf3f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf44:	74 17                	je     f012bf5d <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012bf46:	83 ec 04             	sub    $0x4,%esp
f012bf49:	68 6e c6 13 f0       	push   $0xf013c66e
f012bf4e:	68 e7 0e 00 00       	push   $0xee7
f012bf53:	68 5a b3 13 f0       	push   $0xf013b35a
f012bf58:	e8 a8 42 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bf5d:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012bf64:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf67:	e8 31 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bf6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bf6f:	83 ec 08             	sub    $0x8,%esp
f012bf72:	68 00 fc 0f 00       	push   $0xffc00
f012bf77:	6a 00                	push   $0x0
f012bf79:	e8 c7 bb fd ff       	call   f0107b45 <krealloc>
f012bf7e:	83 c4 10             	add    $0x10,%esp
f012bf81:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bf87:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bf8d:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bf92:	77 17                	ja     f012bfab <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf94:	83 ec 04             	sub    $0x4,%esp
f012bf97:	68 00 c6 13 f0       	push   $0xf013c600
f012bf9c:	68 ef 0e 00 00       	push   $0xeef
f012bfa1:	68 5a b3 13 f0       	push   $0xf013b35a
f012bfa6:	e8 5a 42 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bfab:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bfb1:	89 c1                	mov    %eax,%ecx
f012bfb3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012bfba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012bfbd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bfc2:	89 45 98             	mov    %eax,-0x68(%ebp)
f012bfc5:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bfc8:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfcd:	f7 75 9c             	divl   -0x64(%ebp)
f012bfd0:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bfd3:	29 d0                	sub    %edx,%eax
f012bfd5:	89 c3                	mov    %eax,%ebx
f012bfd7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bfde:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012bfe3:	0f b6 d0             	movzbl %al,%edx
f012bfe6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bfe9:	01 d0                	add    %edx,%eax
f012bfeb:	48                   	dec    %eax
f012bfec:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bfef:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bff2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bff7:	f7 75 94             	divl   -0x6c(%ebp)
f012bffa:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bffd:	29 d0                	sub    %edx,%eax
f012bfff:	01 c3                	add    %eax,%ebx
f012c001:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c008:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c00d:	0f b6 c0             	movzbl %al,%eax
f012c010:	c1 e0 04             	shl    $0x4,%eax
f012c013:	89 c2                	mov    %eax,%edx
f012c015:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c018:	01 d0                	add    %edx,%eax
f012c01a:	48                   	dec    %eax
f012c01b:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c01e:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c021:	ba 00 00 00 00       	mov    $0x0,%edx
f012c026:	f7 75 8c             	divl   -0x74(%ebp)
f012c029:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c02c:	29 d0                	sub    %edx,%eax
f012c02e:	01 d8                	add    %ebx,%eax
f012c030:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c035:	39 c1                	cmp    %eax,%ecx
f012c037:	74 17                	je     f012c050 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c039:	83 ec 04             	sub    $0x4,%esp
f012c03c:	68 3c c6 13 f0       	push   $0xf013c63c
f012c041:	68 f1 0e 00 00       	push   $0xef1
f012c046:	68 5a b3 13 f0       	push   $0xf013b35a
f012c04b:	e8 b5 41 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c050:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c053:	e8 45 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c058:	29 c3                	sub    %eax,%ebx
f012c05a:	89 d8                	mov    %ebx,%eax
f012c05c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c061:	74 17                	je     f012c07a <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c063:	83 ec 04             	sub    $0x4,%esp
f012c066:	68 6e c6 13 f0       	push   $0xf013c66e
f012c06b:	68 f3 0e 00 00       	push   $0xef3
f012c070:	68 5a b3 13 f0       	push   $0xf013b35a
f012c075:	e8 8b 41 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c07a:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c081:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c084:	e8 14 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c089:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c08c:	83 ec 08             	sub    $0x8,%esp
f012c08f:	68 00 fc 0f 00       	push   $0xffc00
f012c094:	6a 00                	push   $0x0
f012c096:	e8 aa ba fd ff       	call   f0107b45 <krealloc>
f012c09b:	83 c4 10             	add    $0x10,%esp
f012c09e:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c0a4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c0aa:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c0af:	77 17                	ja     f012c0c8 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0b1:	83 ec 04             	sub    $0x4,%esp
f012c0b4:	68 00 c6 13 f0       	push   $0xf013c600
f012c0b9:	68 fb 0e 00 00       	push   $0xefb
f012c0be:	68 5a b3 13 f0       	push   $0xf013b35a
f012c0c3:	e8 3d 41 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c0c8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c0ce:	89 c1                	mov    %eax,%ecx
f012c0d0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c0d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c0da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c0df:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c0e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c0e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0ea:	f7 75 84             	divl   -0x7c(%ebp)
f012c0ed:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c0f0:	29 d0                	sub    %edx,%eax
f012c0f2:	89 c3                	mov    %eax,%ebx
f012c0f4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c0fb:	10 00 00 
f012c0fe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c103:	0f b6 d0             	movzbl %al,%edx
f012c106:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c10c:	01 d0                	add    %edx,%eax
f012c10e:	48                   	dec    %eax
f012c10f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c115:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c11b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c120:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c126:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c12c:	29 d0                	sub    %edx,%eax
f012c12e:	01 c3                	add    %eax,%ebx
f012c130:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c137:	10 00 00 
f012c13a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c13f:	0f b6 c0             	movzbl %al,%eax
f012c142:	c1 e0 04             	shl    $0x4,%eax
f012c145:	89 c2                	mov    %eax,%edx
f012c147:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c14d:	01 d0                	add    %edx,%eax
f012c14f:	48                   	dec    %eax
f012c150:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c156:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c15c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c161:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c167:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c16d:	29 d0                	sub    %edx,%eax
f012c16f:	01 d8                	add    %ebx,%eax
f012c171:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c176:	39 c1                	cmp    %eax,%ecx
f012c178:	74 17                	je     f012c191 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c17a:	83 ec 04             	sub    $0x4,%esp
f012c17d:	68 3c c6 13 f0       	push   $0xf013c63c
f012c182:	68 fd 0e 00 00       	push   $0xefd
f012c187:	68 5a b3 13 f0       	push   $0xf013b35a
f012c18c:	e8 74 40 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c191:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c194:	e8 04 0a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c199:	29 c3                	sub    %eax,%ebx
f012c19b:	89 d8                	mov    %ebx,%eax
f012c19d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c1a2:	74 17                	je     f012c1bb <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c1a4:	83 ec 04             	sub    $0x4,%esp
f012c1a7:	68 6e c6 13 f0       	push   $0xf013c66e
f012c1ac:	68 ff 0e 00 00       	push   $0xeff
f012c1b1:	68 5a b3 13 f0       	push   $0xf013b35a
f012c1b6:	e8 4a 40 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c1bb:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c1c2:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1c5:	e8 d3 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c1ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c1cd:	83 ec 08             	sub    $0x8,%esp
f012c1d0:	68 00 fc 0f 00       	push   $0xffc00
f012c1d5:	6a 00                	push   $0x0
f012c1d7:	e8 69 b9 fd ff       	call   f0107b45 <krealloc>
f012c1dc:	83 c4 10             	add    $0x10,%esp
f012c1df:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c1e5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c1eb:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c1f0:	77 17                	ja     f012c209 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1f2:	83 ec 04             	sub    $0x4,%esp
f012c1f5:	68 00 c6 13 f0       	push   $0xf013c600
f012c1fa:	68 06 0f 00 00       	push   $0xf06
f012c1ff:	68 5a b3 13 f0       	push   $0xf013b35a
f012c204:	e8 fc 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c209:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c20f:	89 c1                	mov    %eax,%ecx
f012c211:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c218:	10 00 00 
f012c21b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c221:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c226:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c22c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c232:	ba 00 00 00 00       	mov    $0x0,%edx
f012c237:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c23d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c243:	29 d0                	sub    %edx,%eax
f012c245:	89 c3                	mov    %eax,%ebx
f012c247:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c24e:	10 00 00 
f012c251:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c256:	0f b6 d0             	movzbl %al,%edx
f012c259:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c25f:	01 d0                	add    %edx,%eax
f012c261:	48                   	dec    %eax
f012c262:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c268:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c26e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c273:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c279:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c27f:	29 d0                	sub    %edx,%eax
f012c281:	01 c3                	add    %eax,%ebx
f012c283:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c28a:	10 00 00 
f012c28d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c292:	0f b6 c0             	movzbl %al,%eax
f012c295:	c1 e0 04             	shl    $0x4,%eax
f012c298:	89 c2                	mov    %eax,%edx
f012c29a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c2a0:	01 d0                	add    %edx,%eax
f012c2a2:	48                   	dec    %eax
f012c2a3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c2a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c2af:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2b4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c2ba:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c2c0:	29 d0                	sub    %edx,%eax
f012c2c2:	01 d8                	add    %ebx,%eax
f012c2c4:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c2c9:	39 c1                	cmp    %eax,%ecx
f012c2cb:	74 17                	je     f012c2e4 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c2cd:	83 ec 04             	sub    $0x4,%esp
f012c2d0:	68 3c c6 13 f0       	push   $0xf013c63c
f012c2d5:	68 08 0f 00 00       	push   $0xf08
f012c2da:	68 5a b3 13 f0       	push   $0xf013b35a
f012c2df:	e8 21 3f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c2e4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2e7:	e8 b1 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c2ec:	29 c3                	sub    %eax,%ebx
f012c2ee:	89 d8                	mov    %ebx,%eax
f012c2f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c2f5:	74 17                	je     f012c30e <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c2f7:	83 ec 04             	sub    $0x4,%esp
f012c2fa:	68 6e c6 13 f0       	push   $0xf013c66e
f012c2ff:	68 0a 0f 00 00       	push   $0xf0a
f012c304:	68 5a b3 13 f0       	push   $0xf013b35a
f012c309:	e8 f7 3e fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c30e:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c315:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c318:	e8 80 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c31d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c320:	83 ec 08             	sub    $0x8,%esp
f012c323:	68 00 fc 1f 00       	push   $0x1ffc00
f012c328:	6a 00                	push   $0x0
f012c32a:	e8 16 b8 fd ff       	call   f0107b45 <krealloc>
f012c32f:	83 c4 10             	add    $0x10,%esp
f012c332:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c338:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c33e:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c343:	77 17                	ja     f012c35c <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c345:	83 ec 04             	sub    $0x4,%esp
f012c348:	68 00 c6 13 f0       	push   $0xf013c600
f012c34d:	68 11 0f 00 00       	push   $0xf11
f012c352:	68 5a b3 13 f0       	push   $0xf013b35a
f012c357:	e8 a9 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c35c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c362:	89 c1                	mov    %eax,%ecx
f012c364:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c36b:	10 00 00 
f012c36e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c374:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c379:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c37f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c385:	ba 00 00 00 00       	mov    $0x0,%edx
f012c38a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c390:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c396:	29 d0                	sub    %edx,%eax
f012c398:	89 c3                	mov    %eax,%ebx
f012c39a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c3a1:	10 00 00 
f012c3a4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c3a9:	0f b6 d0             	movzbl %al,%edx
f012c3ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c3b2:	01 d0                	add    %edx,%eax
f012c3b4:	48                   	dec    %eax
f012c3b5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c3bb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c3c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3c6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c3cc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c3d2:	29 d0                	sub    %edx,%eax
f012c3d4:	01 c3                	add    %eax,%ebx
f012c3d6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c3dd:	10 00 00 
f012c3e0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c3e5:	0f b6 c0             	movzbl %al,%eax
f012c3e8:	c1 e0 04             	shl    $0x4,%eax
f012c3eb:	89 c2                	mov    %eax,%edx
f012c3ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c3f3:	01 d0                	add    %edx,%eax
f012c3f5:	48                   	dec    %eax
f012c3f6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c3fc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c402:	ba 00 00 00 00       	mov    $0x0,%edx
f012c407:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c40d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c413:	29 d0                	sub    %edx,%eax
f012c415:	01 d8                	add    %ebx,%eax
f012c417:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c41c:	39 c1                	cmp    %eax,%ecx
f012c41e:	74 17                	je     f012c437 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c420:	83 ec 04             	sub    $0x4,%esp
f012c423:	68 3c c6 13 f0       	push   $0xf013c63c
f012c428:	68 13 0f 00 00       	push   $0xf13
f012c42d:	68 5a b3 13 f0       	push   $0xf013b35a
f012c432:	e8 ce 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c437:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c43a:	e8 5e 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c43f:	29 c3                	sub    %eax,%ebx
f012c441:	89 d8                	mov    %ebx,%eax
f012c443:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c448:	74 17                	je     f012c461 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c44a:	83 ec 04             	sub    $0x4,%esp
f012c44d:	68 6e c6 13 f0       	push   $0xf013c66e
f012c452:	68 15 0f 00 00       	push   $0xf15
f012c457:	68 5a b3 13 f0       	push   $0xf013b35a
f012c45c:	e8 a4 3d fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c461:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c468:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c46b:	e8 2d 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c470:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c473:	83 ec 08             	sub    $0x8,%esp
f012c476:	68 00 fc 1f 00       	push   $0x1ffc00
f012c47b:	6a 00                	push   $0x0
f012c47d:	e8 c3 b6 fd ff       	call   f0107b45 <krealloc>
f012c482:	83 c4 10             	add    $0x10,%esp
f012c485:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c48b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c491:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c496:	77 17                	ja     f012c4af <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c498:	83 ec 04             	sub    $0x4,%esp
f012c49b:	68 00 c6 13 f0       	push   $0xf013c600
f012c4a0:	68 1c 0f 00 00       	push   $0xf1c
f012c4a5:	68 5a b3 13 f0       	push   $0xf013b35a
f012c4aa:	e8 56 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c4af:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c4b5:	89 c1                	mov    %eax,%ecx
f012c4b7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c4be:	10 00 00 
f012c4c1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c4c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c4cc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c4d2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4d8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4dd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c4e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4e9:	29 d0                	sub    %edx,%eax
f012c4eb:	89 c3                	mov    %eax,%ebx
f012c4ed:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c4f4:	10 00 00 
f012c4f7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c4fc:	0f b6 d0             	movzbl %al,%edx
f012c4ff:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c505:	01 d0                	add    %edx,%eax
f012c507:	48                   	dec    %eax
f012c508:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c50e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c514:	ba 00 00 00 00       	mov    $0x0,%edx
f012c519:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c51f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c525:	29 d0                	sub    %edx,%eax
f012c527:	01 c3                	add    %eax,%ebx
f012c529:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c530:	10 00 00 
f012c533:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c538:	0f b6 c0             	movzbl %al,%eax
f012c53b:	c1 e0 04             	shl    $0x4,%eax
f012c53e:	89 c2                	mov    %eax,%edx
f012c540:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c546:	01 d0                	add    %edx,%eax
f012c548:	48                   	dec    %eax
f012c549:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c54f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c555:	ba 00 00 00 00       	mov    $0x0,%edx
f012c55a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c560:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c566:	29 d0                	sub    %edx,%eax
f012c568:	01 d8                	add    %ebx,%eax
f012c56a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c56f:	39 c1                	cmp    %eax,%ecx
f012c571:	74 17                	je     f012c58a <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c573:	83 ec 04             	sub    $0x4,%esp
f012c576:	68 3c c6 13 f0       	push   $0xf013c63c
f012c57b:	68 1e 0f 00 00       	push   $0xf1e
f012c580:	68 5a b3 13 f0       	push   $0xf013b35a
f012c585:	e8 7b 3c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c58a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c58d:	e8 0b 06 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c592:	29 c3                	sub    %eax,%ebx
f012c594:	89 d8                	mov    %ebx,%eax
f012c596:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c59b:	74 17                	je     f012c5b4 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c59d:	83 ec 04             	sub    $0x4,%esp
f012c5a0:	68 6e c6 13 f0       	push   $0xf013c66e
f012c5a5:	68 20 0f 00 00       	push   $0xf20
f012c5aa:	68 5a b3 13 f0       	push   $0xf013b35a
f012c5af:	e8 51 3c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c5b4:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c5bb:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c5be:	e8 da 05 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c5c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c5c6:	83 ec 08             	sub    $0x8,%esp
f012c5c9:	68 00 fc 2f 00       	push   $0x2ffc00
f012c5ce:	6a 00                	push   $0x0
f012c5d0:	e8 70 b5 fd ff       	call   f0107b45 <krealloc>
f012c5d5:	83 c4 10             	add    $0x10,%esp
f012c5d8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c5de:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c5e4:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c5e9:	77 17                	ja     f012c602 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5eb:	83 ec 04             	sub    $0x4,%esp
f012c5ee:	68 00 c6 13 f0       	push   $0xf013c600
f012c5f3:	68 27 0f 00 00       	push   $0xf27
f012c5f8:	68 5a b3 13 f0       	push   $0xf013b35a
f012c5fd:	e8 03 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c602:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c608:	89 c1                	mov    %eax,%ecx
f012c60a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c611:	10 00 00 
f012c614:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c61a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c61f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c625:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c62b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c630:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c636:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c63c:	29 d0                	sub    %edx,%eax
f012c63e:	89 c3                	mov    %eax,%ebx
f012c640:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c647:	10 00 00 
f012c64a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c64f:	0f b6 d0             	movzbl %al,%edx
f012c652:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c658:	01 d0                	add    %edx,%eax
f012c65a:	48                   	dec    %eax
f012c65b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c661:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c667:	ba 00 00 00 00       	mov    $0x0,%edx
f012c66c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c672:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c678:	29 d0                	sub    %edx,%eax
f012c67a:	01 c3                	add    %eax,%ebx
f012c67c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c683:	10 00 00 
f012c686:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c68b:	0f b6 c0             	movzbl %al,%eax
f012c68e:	c1 e0 04             	shl    $0x4,%eax
f012c691:	89 c2                	mov    %eax,%edx
f012c693:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c699:	01 d0                	add    %edx,%eax
f012c69b:	48                   	dec    %eax
f012c69c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c6a2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c6a8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6ad:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c6b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c6b9:	29 d0                	sub    %edx,%eax
f012c6bb:	01 d8                	add    %ebx,%eax
f012c6bd:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c6c2:	39 c1                	cmp    %eax,%ecx
f012c6c4:	74 17                	je     f012c6dd <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c6c6:	83 ec 04             	sub    $0x4,%esp
f012c6c9:	68 3c c6 13 f0       	push   $0xf013c63c
f012c6ce:	68 29 0f 00 00       	push   $0xf29
f012c6d3:	68 5a b3 13 f0       	push   $0xf013b35a
f012c6d8:	e8 28 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c6dd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6e0:	e8 b8 04 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c6e5:	29 c3                	sub    %eax,%ebx
f012c6e7:	89 d8                	mov    %ebx,%eax
f012c6e9:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c6ee:	74 17                	je     f012c707 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c6f0:	83 ec 04             	sub    $0x4,%esp
f012c6f3:	68 a4 b7 13 f0       	push   $0xf013b7a4
f012c6f8:	68 2b 0f 00 00       	push   $0xf2b
f012c6fd:	68 5a b3 13 f0       	push   $0xf013b35a
f012c702:	e8 fe 3a fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c707:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c70e:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c711:	e8 87 04 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c716:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c719:	83 ec 08             	sub    $0x8,%esp
f012c71c:	68 00 fc 2f 00       	push   $0x2ffc00
f012c721:	6a 00                	push   $0x0
f012c723:	e8 1d b4 fd ff       	call   f0107b45 <krealloc>
f012c728:	83 c4 10             	add    $0x10,%esp
f012c72b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c731:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c737:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c73c:	77 17                	ja     f012c755 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c73e:	83 ec 04             	sub    $0x4,%esp
f012c741:	68 00 c6 13 f0       	push   $0xf013c600
f012c746:	68 32 0f 00 00       	push   $0xf32
f012c74b:	68 5a b3 13 f0       	push   $0xf013b35a
f012c750:	e8 b0 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c755:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c75b:	89 c1                	mov    %eax,%ecx
f012c75d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c764:	10 00 00 
f012c767:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c76d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c772:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c778:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c77e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c783:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c789:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c78f:	29 d0                	sub    %edx,%eax
f012c791:	89 c3                	mov    %eax,%ebx
f012c793:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c79a:	10 00 00 
f012c79d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c7a2:	0f b6 d0             	movzbl %al,%edx
f012c7a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c7ab:	01 d0                	add    %edx,%eax
f012c7ad:	48                   	dec    %eax
f012c7ae:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c7b4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c7ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7bf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c7c5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c7cb:	29 d0                	sub    %edx,%eax
f012c7cd:	01 c3                	add    %eax,%ebx
f012c7cf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c7d6:	10 00 00 
f012c7d9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c7de:	0f b6 c0             	movzbl %al,%eax
f012c7e1:	c1 e0 04             	shl    $0x4,%eax
f012c7e4:	89 c2                	mov    %eax,%edx
f012c7e6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c7ec:	01 d0                	add    %edx,%eax
f012c7ee:	48                   	dec    %eax
f012c7ef:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c7f5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c7fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c800:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c806:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c80c:	29 d0                	sub    %edx,%eax
f012c80e:	01 d8                	add    %ebx,%eax
f012c810:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c815:	39 c1                	cmp    %eax,%ecx
f012c817:	74 17                	je     f012c830 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c819:	83 ec 04             	sub    $0x4,%esp
f012c81c:	68 3c c6 13 f0       	push   $0xf013c63c
f012c821:	68 34 0f 00 00       	push   $0xf34
f012c826:	68 5a b3 13 f0       	push   $0xf013b35a
f012c82b:	e8 d5 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c830:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c833:	e8 65 03 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c838:	29 c3                	sub    %eax,%ebx
f012c83a:	89 d8                	mov    %ebx,%eax
f012c83c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c841:	74 17                	je     f012c85a <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c843:	83 ec 04             	sub    $0x4,%esp
f012c846:	68 6e c6 13 f0       	push   $0xf013c66e
f012c84b:	68 36 0f 00 00       	push   $0xf36
f012c850:	68 5a b3 13 f0       	push   $0xf013b35a
f012c855:	e8 ab 39 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c85a:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c861:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c864:	e8 34 03 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c869:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c86c:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c873:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c876:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c87c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c882:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c888:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c88b:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c88d:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c893:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c899:	01 c2                	add    %eax,%edx
f012c89b:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c89e:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c8a0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8a6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c8ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c8b3:	eb 11                	jmp    f012c8c6 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c8b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c8b8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c8be:	01 d0                	add    %edx,%eax
f012c8c0:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c8c3:	ff 45 f4             	incl   -0xc(%ebp)
f012c8c6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c8cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c8cf:	7d e4                	jge    f012c8b5 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c8d1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c8d7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c8dd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c8e3:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c8e9:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c8ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c8f6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c8fc:	01 d0                	add    %edx,%eax
f012c8fe:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c904:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c90a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c910:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c917:	eb 1b                	jmp    f012c934 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c919:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c91c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c923:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c929:	01 d0                	add    %edx,%eax
f012c92b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c931:	ff 45 f0             	incl   -0x10(%ebp)
f012c934:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c93a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c93d:	7d da                	jge    f012c919 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c93f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c945:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c94b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c952:	eb 17                	jmp    f012c96b <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c954:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c957:	01 c0                	add    %eax,%eax
f012c959:	89 c2                	mov    %eax,%edx
f012c95b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c961:	01 d0                	add    %edx,%eax
f012c963:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c968:	ff 45 ec             	incl   -0x14(%ebp)
f012c96b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c971:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c974:	7d de                	jge    f012c954 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c976:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c97c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c982:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c988:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c98d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c993:	01 c0                	add    %eax,%eax
f012c995:	89 c2                	mov    %eax,%edx
f012c997:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c99d:	01 d0                	add    %edx,%eax
f012c99f:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c9a4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c9aa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c9b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c9b7:	eb 49                	jmp    f012ca02 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c9b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c9bc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9c9:	01 d0                	add    %edx,%eax
f012c9cb:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c9ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c9d1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9de:	01 d0                	add    %edx,%eax
f012c9e0:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c9e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c9e9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9f6:	01 d0                	add    %edx,%eax
f012c9f8:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c9ff:	ff 45 e8             	incl   -0x18(%ebp)
f012ca02:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ca08:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ca0b:	7d ac                	jge    f012c9b9 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ca0d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca13:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ca19:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca1f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ca22:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ca2e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca34:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ca3b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ca41:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca48:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca4e:	01 d0                	add    %edx,%eax
f012ca50:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ca53:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ca59:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca60:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca66:	01 d0                	add    %edx,%eax
f012ca68:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ca6e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ca74:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca81:	01 d0                	add    %edx,%eax
f012ca83:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ca8a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ca90:	8a 00                	mov    (%eax),%al
f012ca92:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ca95:	75 17                	jne    f012caae <test_krealloc+0xd04>
f012ca97:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ca9d:	89 c2                	mov    %eax,%edx
f012ca9f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012caa5:	01 d0                	add    %edx,%eax
f012caa7:	8a 00                	mov    (%eax),%al
f012caa9:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012caac:	74 17                	je     f012cac5 <test_krealloc+0xd1b>
			panic(
f012caae:	83 ec 04             	sub    $0x4,%esp
f012cab1:	68 8c c6 13 f0       	push   $0xf013c68c
f012cab6:	68 79 0f 00 00       	push   $0xf79
f012cabb:	68 5a b3 13 f0       	push   $0xf013b35a
f012cac0:	e8 40 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012cac5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cacb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012cad1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cad7:	8a 00                	mov    (%eax),%al
f012cad9:	3c 02                	cmp    $0x2,%al
f012cadb:	75 16                	jne    f012caf3 <test_krealloc+0xd49>
f012cadd:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cae3:	89 c2                	mov    %eax,%edx
f012cae5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012caeb:	01 d0                	add    %edx,%eax
f012caed:	8a 00                	mov    (%eax),%al
f012caef:	3c 02                	cmp    $0x2,%al
f012caf1:	74 20                	je     f012cb13 <test_krealloc+0xd69>
			panic(
f012caf3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012caf9:	8a 00                	mov    (%eax),%al
f012cafb:	0f be c0             	movsbl %al,%eax
f012cafe:	50                   	push   %eax
f012caff:	68 cc c6 13 f0       	push   $0xf013c6cc
f012cb04:	68 7f 0f 00 00       	push   $0xf7f
f012cb09:	68 5a b3 13 f0       	push   $0xf013b35a
f012cb0e:	e8 f2 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012cb13:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb19:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012cb1f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cb25:	8b 00                	mov    (%eax),%eax
f012cb27:	83 f8 03             	cmp    $0x3,%eax
f012cb2a:	75 1c                	jne    f012cb48 <test_krealloc+0xd9e>
f012cb2c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cb32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cb39:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cb3f:	01 d0                	add    %edx,%eax
f012cb41:	8b 00                	mov    (%eax),%eax
f012cb43:	83 f8 03             	cmp    $0x3,%eax
f012cb46:	74 17                	je     f012cb5f <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012cb48:	83 ec 04             	sub    $0x4,%esp
f012cb4b:	68 18 c7 13 f0       	push   $0xf013c718
f012cb50:	68 83 0f 00 00       	push   $0xf83
f012cb55:	68 5a b3 13 f0       	push   $0xf013b35a
f012cb5a:	e8 a6 36 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012cb5f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cb65:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012cb6b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cb71:	8b 00                	mov    (%eax),%eax
f012cb73:	83 f8 04             	cmp    $0x4,%eax
f012cb76:	75 1c                	jne    f012cb94 <test_krealloc+0xdea>
f012cb78:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cb7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cb85:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cb8b:	01 d0                	add    %edx,%eax
f012cb8d:	8b 00                	mov    (%eax),%eax
f012cb8f:	83 f8 04             	cmp    $0x4,%eax
f012cb92:	74 17                	je     f012cbab <test_krealloc+0xe01>
			panic(
f012cb94:	83 ec 04             	sub    $0x4,%esp
f012cb97:	68 8c c6 13 f0       	push   $0xf013c68c
f012cb9c:	68 88 0f 00 00       	push   $0xf88
f012cba1:	68 5a b3 13 f0       	push   $0xf013b35a
f012cba6:	e8 5a 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cbab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cbb1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cbb7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cbbd:	66 8b 00             	mov    (%eax),%ax
f012cbc0:	66 83 f8 05          	cmp    $0x5,%ax
f012cbc4:	75 1b                	jne    f012cbe1 <test_krealloc+0xe37>
f012cbc6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cbcc:	01 c0                	add    %eax,%eax
f012cbce:	89 c2                	mov    %eax,%edx
f012cbd0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cbd6:	01 d0                	add    %edx,%eax
f012cbd8:	66 8b 00             	mov    (%eax),%ax
f012cbdb:	66 83 f8 05          	cmp    $0x5,%ax
f012cbdf:	74 17                	je     f012cbf8 <test_krealloc+0xe4e>
			panic(
f012cbe1:	83 ec 04             	sub    $0x4,%esp
f012cbe4:	68 8c c6 13 f0       	push   $0xf013c68c
f012cbe9:	68 8d 0f 00 00       	push   $0xf8d
f012cbee:	68 5a b3 13 f0       	push   $0xf013b35a
f012cbf3:	e8 0d 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cbf8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cbfe:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cc04:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc0a:	66 8b 00             	mov    (%eax),%ax
f012cc0d:	66 83 f8 06          	cmp    $0x6,%ax
f012cc11:	75 1b                	jne    f012cc2e <test_krealloc+0xe84>
f012cc13:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cc19:	01 c0                	add    %eax,%eax
f012cc1b:	89 c2                	mov    %eax,%edx
f012cc1d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc23:	01 d0                	add    %edx,%eax
f012cc25:	66 8b 00             	mov    (%eax),%ax
f012cc28:	66 83 f8 06          	cmp    $0x6,%ax
f012cc2c:	74 17                	je     f012cc45 <test_krealloc+0xe9b>
			panic(
f012cc2e:	83 ec 04             	sub    $0x4,%esp
f012cc31:	68 8c c6 13 f0       	push   $0xf013c68c
f012cc36:	68 92 0f 00 00       	push   $0xf92
f012cc3b:	68 5a b3 13 f0       	push   $0xf013b35a
f012cc40:	e8 c0 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cc45:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc4b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cc51:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc57:	8a 00                	mov    (%eax),%al
f012cc59:	3c 07                	cmp    $0x7,%al
f012cc5b:	75 1b                	jne    f012cc78 <test_krealloc+0xece>
f012cc5d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc63:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc70:	01 d0                	add    %edx,%eax
f012cc72:	8a 00                	mov    (%eax),%al
f012cc74:	3c 07                	cmp    $0x7,%al
f012cc76:	74 17                	je     f012cc8f <test_krealloc+0xee5>
			panic(
f012cc78:	83 ec 04             	sub    $0x4,%esp
f012cc7b:	68 8c c6 13 f0       	push   $0xf013c68c
f012cc80:	68 97 0f 00 00       	push   $0xf97
f012cc85:	68 5a b3 13 f0       	push   $0xf013b35a
f012cc8a:	e8 76 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cc8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc95:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc99:	66 83 f8 07          	cmp    $0x7,%ax
f012cc9d:	75 1f                	jne    f012ccbe <test_krealloc+0xf14>
f012cc9f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cca5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccb2:	01 d0                	add    %edx,%eax
f012ccb4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ccb8:	66 83 f8 07          	cmp    $0x7,%ax
f012ccbc:	74 17                	je     f012ccd5 <test_krealloc+0xf2b>
			panic(
f012ccbe:	83 ec 04             	sub    $0x4,%esp
f012ccc1:	68 8c c6 13 f0       	push   $0xf013c68c
f012ccc6:	68 9a 0f 00 00       	push   $0xf9a
f012cccb:	68 5a b3 13 f0       	push   $0xf013b35a
f012ccd0:	e8 30 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ccd5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccdb:	8b 40 04             	mov    0x4(%eax),%eax
f012ccde:	83 f8 07             	cmp    $0x7,%eax
f012cce1:	75 1d                	jne    f012cd00 <test_krealloc+0xf56>
f012cce3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccf0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccf6:	01 d0                	add    %edx,%eax
f012ccf8:	8b 40 04             	mov    0x4(%eax),%eax
f012ccfb:	83 f8 07             	cmp    $0x7,%eax
f012ccfe:	74 17                	je     f012cd17 <test_krealloc+0xf6d>
			panic(
f012cd00:	83 ec 04             	sub    $0x4,%esp
f012cd03:	68 8c c6 13 f0       	push   $0xf013c68c
f012cd08:	68 9d 0f 00 00       	push   $0xf9d
f012cd0d:	68 5a b3 13 f0       	push   $0xf013b35a
f012cd12:	e8 ee 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cd17:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cd1d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cd23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd29:	8a 00                	mov    (%eax),%al
f012cd2b:	3c 08                	cmp    $0x8,%al
f012cd2d:	75 1b                	jne    f012cd4a <test_krealloc+0xfa0>
f012cd2f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd35:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd42:	01 d0                	add    %edx,%eax
f012cd44:	8a 00                	mov    (%eax),%al
f012cd46:	3c 08                	cmp    $0x8,%al
f012cd48:	74 17                	je     f012cd61 <test_krealloc+0xfb7>
			panic(
f012cd4a:	83 ec 04             	sub    $0x4,%esp
f012cd4d:	68 8c c6 13 f0       	push   $0xf013c68c
f012cd52:	68 a2 0f 00 00       	push   $0xfa2
f012cd57:	68 5a b3 13 f0       	push   $0xf013b35a
f012cd5c:	e8 a4 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012cd61:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd67:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cd6b:	66 83 f8 08          	cmp    $0x8,%ax
f012cd6f:	75 1f                	jne    f012cd90 <test_krealloc+0xfe6>
f012cd71:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd77:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd7e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd84:	01 d0                	add    %edx,%eax
f012cd86:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cd8a:	66 83 f8 08          	cmp    $0x8,%ax
f012cd8e:	74 17                	je     f012cda7 <test_krealloc+0xffd>
			panic(
f012cd90:	83 ec 04             	sub    $0x4,%esp
f012cd93:	68 8c c6 13 f0       	push   $0xf013c68c
f012cd98:	68 a5 0f 00 00       	push   $0xfa5
f012cd9d:	68 5a b3 13 f0       	push   $0xf013b35a
f012cda2:	e8 5e 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cda7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdad:	8b 40 04             	mov    0x4(%eax),%eax
f012cdb0:	83 f8 08             	cmp    $0x8,%eax
f012cdb3:	75 1d                	jne    f012cdd2 <test_krealloc+0x1028>
f012cdb5:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cdbb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdc8:	01 d0                	add    %edx,%eax
f012cdca:	8b 40 04             	mov    0x4(%eax),%eax
f012cdcd:	83 f8 08             	cmp    $0x8,%eax
f012cdd0:	74 17                	je     f012cde9 <test_krealloc+0x103f>
			panic(
f012cdd2:	83 ec 04             	sub    $0x4,%esp
f012cdd5:	68 8c c6 13 f0       	push   $0xf013c68c
f012cdda:	68 a8 0f 00 00       	push   $0xfa8
f012cddf:	68 5a b3 13 f0       	push   $0xf013b35a
f012cde4:	e8 1c 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cde9:	e8 af fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cdee:	89 c2                	mov    %eax,%edx
f012cdf0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdf3:	39 c2                	cmp    %eax,%edx
f012cdf5:	74 17                	je     f012ce0e <test_krealloc+0x1064>
			panic(
f012cdf7:	83 ec 04             	sub    $0x4,%esp
f012cdfa:	68 4c c7 13 f0       	push   $0xf013c74c
f012cdff:	68 ac 0f 00 00       	push   $0xfac
f012ce04:	68 5a b3 13 f0       	push   $0xf013b35a
f012ce09:	e8 f7 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ce0e:	83 ec 0c             	sub    $0xc,%esp
f012ce11:	68 98 c7 13 f0       	push   $0xf013c798
f012ce16:	e8 f3 3e fd ff       	call   f0100d0e <cprintf>
f012ce1b:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ce1e:	e8 7a fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce23:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce26:	e8 9d 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce2b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ce31:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce37:	83 ec 08             	sub    $0x8,%esp
f012ce3a:	6a 00                	push   $0x0
f012ce3c:	50                   	push   %eax
f012ce3d:	e8 03 ad fd ff       	call   f0107b45 <krealloc>
f012ce42:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce45:	e8 7e 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce4a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ce50:	74 17                	je     f012ce69 <test_krealloc+0x10bf>
			panic(
f012ce52:	83 ec 04             	sub    $0x4,%esp
f012ce55:	68 bc c7 13 f0       	push   $0xf013c7bc
f012ce5a:	68 b9 0f 00 00       	push   $0xfb9
f012ce5f:	68 5a b3 13 f0       	push   $0xf013b35a
f012ce64:	e8 9c 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ce69:	e8 2f fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce6e:	89 c2                	mov    %eax,%edx
f012ce70:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce73:	29 c2                	sub    %eax,%edx
f012ce75:	89 d0                	mov    %edx,%eax
f012ce77:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ce7c:	74 17                	je     f012ce95 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ce7e:	83 ec 04             	sub    $0x4,%esp
f012ce81:	68 30 c8 13 f0       	push   $0xf013c830
f012ce86:	68 bb 0f 00 00       	push   $0xfbb
f012ce8b:	68 5a b3 13 f0       	push   $0xf013b35a
f012ce90:	e8 70 33 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ce95:	e8 03 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce9d:	e8 26 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cea2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cea8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ceae:	83 ec 08             	sub    $0x8,%esp
f012ceb1:	6a 00                	push   $0x0
f012ceb3:	50                   	push   %eax
f012ceb4:	e8 8c ac fd ff       	call   f0107b45 <krealloc>
f012ceb9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cebc:	e8 07 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cec1:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cec7:	74 17                	je     f012cee0 <test_krealloc+0x1136>
			panic(
f012cec9:	83 ec 04             	sub    $0x4,%esp
f012cecc:	68 bc c7 13 f0       	push   $0xf013c7bc
f012ced1:	68 c4 0f 00 00       	push   $0xfc4
f012ced6:	68 5a b3 13 f0       	push   $0xf013b35a
f012cedb:	e8 25 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cee0:	e8 b8 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cee5:	89 c2                	mov    %eax,%edx
f012cee7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ceea:	29 c2                	sub    %eax,%edx
f012ceec:	89 d0                	mov    %edx,%eax
f012ceee:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cef3:	74 17                	je     f012cf0c <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012cef5:	83 ec 04             	sub    $0x4,%esp
f012cef8:	68 30 c8 13 f0       	push   $0xf013c830
f012cefd:	68 c6 0f 00 00       	push   $0xfc6
f012cf02:	68 5a b3 13 f0       	push   $0xf013b35a
f012cf07:	e8 f9 32 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cf0c:	e8 8c fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf11:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cf14:	e8 af 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cf19:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cf1f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cf25:	83 ec 08             	sub    $0x8,%esp
f012cf28:	6a 00                	push   $0x0
f012cf2a:	50                   	push   %eax
f012cf2b:	e8 15 ac fd ff       	call   f0107b45 <krealloc>
f012cf30:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cf33:	e8 90 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cf38:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cf3e:	74 17                	je     f012cf57 <test_krealloc+0x11ad>
			panic(
f012cf40:	83 ec 04             	sub    $0x4,%esp
f012cf43:	68 74 b3 13 f0       	push   $0xf013b374
f012cf48:	68 ce 0f 00 00       	push   $0xfce
f012cf4d:	68 5a b3 13 f0       	push   $0xf013b35a
f012cf52:	e8 ae 32 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cf57:	e8 41 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf5c:	89 c2                	mov    %eax,%edx
f012cf5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf61:	29 c2                	sub    %eax,%edx
f012cf63:	89 d0                	mov    %edx,%eax
f012cf65:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cf6a:	74 17                	je     f012cf83 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012cf6c:	83 ec 04             	sub    $0x4,%esp
f012cf6f:	68 30 c8 13 f0       	push   $0xf013c830
f012cf74:	68 d0 0f 00 00       	push   $0xfd0
f012cf79:	68 5a b3 13 f0       	push   $0xf013b35a
f012cf7e:	e8 82 32 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cf83:	e8 15 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf88:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cf8b:	e8 38 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cf90:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cf96:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cf9c:	83 ec 08             	sub    $0x8,%esp
f012cf9f:	6a 00                	push   $0x0
f012cfa1:	50                   	push   %eax
f012cfa2:	e8 9e ab fd ff       	call   f0107b45 <krealloc>
f012cfa7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cfaa:	e8 19 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cfaf:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cfb5:	74 17                	je     f012cfce <test_krealloc+0x1224>
			panic(
f012cfb7:	83 ec 04             	sub    $0x4,%esp
f012cfba:	68 bc c7 13 f0       	push   $0xf013c7bc
f012cfbf:	68 d8 0f 00 00       	push   $0xfd8
f012cfc4:	68 5a b3 13 f0       	push   $0xf013b35a
f012cfc9:	e8 37 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cfce:	e8 ca fb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cfd3:	89 c2                	mov    %eax,%edx
f012cfd5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfd8:	29 c2                	sub    %eax,%edx
f012cfda:	89 d0                	mov    %edx,%eax
f012cfdc:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cfe1:	74 17                	je     f012cffa <test_krealloc+0x1250>
			panic(
f012cfe3:	83 ec 04             	sub    $0x4,%esp
f012cfe6:	68 64 c8 13 f0       	push   $0xf013c864
f012cfeb:	68 db 0f 00 00       	push   $0xfdb
f012cff0:	68 5a b3 13 f0       	push   $0xf013b35a
f012cff5:	e8 0b 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cffa:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d001:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d008:	eb 48                	jmp    f012d052 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d00a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d00d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012d012:	83 ec 04             	sub    $0x4,%esp
f012d015:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d01b:	51                   	push   %ecx
f012d01c:	52                   	push   %edx
f012d01d:	50                   	push   %eax
f012d01e:	e8 8e 9a fd ff       	call   f0106ab1 <get_page_table>
f012d023:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d026:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d02c:	85 c0                	test   %eax,%eax
f012d02e:	75 17                	jne    f012d047 <test_krealloc+0x129d>
					panic(
f012d030:	83 ec 04             	sub    $0x4,%esp
f012d033:	68 5c bc 13 f0       	push   $0xf013bc5c
f012d038:	68 e7 0f 00 00       	push   $0xfe7
f012d03d:	68 5a b3 13 f0       	push   $0xf013b35a
f012d042:	e8 be 31 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d047:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d04e:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d052:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d056:	78 b2                	js     f012d00a <test_krealloc+0x1260>
f012d058:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d05c:	7f 09                	jg     f012d067 <test_krealloc+0x12bd>
f012d05e:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d065:	76 a3                	jbe    f012d00a <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d067:	83 ec 0c             	sub    $0xc,%esp
f012d06a:	68 a3 c8 13 f0       	push   $0xf013c8a3
f012d06f:	e8 9a 3c fd ff       	call   f0100d0e <cprintf>
f012d074:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d077:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d07d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d083:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d08a:	eb 21                	jmp    f012d0ad <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d08c:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d092:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d095:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d09b:	01 c8                	add    %ecx,%eax
f012d09d:	8a 00                	mov    (%eax),%al
f012d09f:	0f be c0             	movsbl %al,%eax
f012d0a2:	01 d0                	add    %edx,%eax
f012d0a4:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d0aa:	ff 45 dc             	incl   -0x24(%ebp)
f012d0ad:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d0b3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d0b6:	7d d4                	jge    f012d08c <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d0b8:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d0be:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d0c4:	42                   	inc    %edx
f012d0c5:	01 d2                	add    %edx,%edx
f012d0c7:	39 d0                	cmp    %edx,%eax
f012d0c9:	74 17                	je     f012d0e2 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d0cb:	83 ec 04             	sub    $0x4,%esp
f012d0ce:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d0d3:	68 f9 0f 00 00       	push   $0xff9
f012d0d8:	68 5a b3 13 f0       	push   $0xf013b35a
f012d0dd:	e8 23 31 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d0e2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d0e8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d0ee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d0f5:	eb 25                	jmp    f012d11c <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d0f7:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d0fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d100:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d107:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d10d:	01 c8                	add    %ecx,%eax
f012d10f:	8b 00                	mov    (%eax),%eax
f012d111:	01 d0                	add    %edx,%eax
f012d113:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d119:	ff 45 dc             	incl   -0x24(%ebp)
f012d11c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d122:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d125:	7d d0                	jge    f012d0f7 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d127:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d12d:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d133:	42                   	inc    %edx
f012d134:	c1 e2 02             	shl    $0x2,%edx
f012d137:	39 d0                	cmp    %edx,%eax
f012d139:	74 17                	je     f012d152 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d13b:	83 ec 04             	sub    $0x4,%esp
f012d13e:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d143:	68 03 10 00 00       	push   $0x1003
f012d148:	68 5a b3 13 f0       	push   $0xf013b35a
f012d14d:	e8 b3 30 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d152:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d158:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d15e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d165:	eb 24                	jmp    f012d18b <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d167:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d16d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d170:	01 c0                	add    %eax,%eax
f012d172:	89 c1                	mov    %eax,%ecx
f012d174:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d17a:	01 c8                	add    %ecx,%eax
f012d17c:	66 8b 00             	mov    (%eax),%ax
f012d17f:	98                   	cwtl   
f012d180:	01 d0                	add    %edx,%eax
f012d182:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d188:	ff 45 dc             	incl   -0x24(%ebp)
f012d18b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d191:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d194:	7d d1                	jge    f012d167 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d196:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d19c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d1a2:	8d 48 01             	lea    0x1(%eax),%ecx
f012d1a5:	89 c8                	mov    %ecx,%eax
f012d1a7:	c1 e0 02             	shl    $0x2,%eax
f012d1aa:	01 c8                	add    %ecx,%eax
f012d1ac:	39 c2                	cmp    %eax,%edx
f012d1ae:	74 17                	je     f012d1c7 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d1b0:	83 ec 04             	sub    $0x4,%esp
f012d1b3:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d1b8:	68 0d 10 00 00       	push   $0x100d
f012d1bd:	68 5a b3 13 f0       	push   $0xf013b35a
f012d1c2:	e8 3e 30 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d1c7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1cd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d1d3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d1da:	eb 70                	jmp    f012d24c <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d1dc:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d1e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d1e5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d1ec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1f2:	01 c8                	add    %ecx,%eax
f012d1f4:	8a 00                	mov    (%eax),%al
f012d1f6:	0f be c0             	movsbl %al,%eax
f012d1f9:	01 d0                	add    %edx,%eax
f012d1fb:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d201:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d207:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d20a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d211:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d217:	01 c8                	add    %ecx,%eax
f012d219:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d21d:	98                   	cwtl   
f012d21e:	01 d0                	add    %edx,%eax
f012d220:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d226:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d22c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d22f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d236:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d23c:	01 c8                	add    %ecx,%eax
f012d23e:	8b 40 04             	mov    0x4(%eax),%eax
f012d241:	01 d0                	add    %edx,%eax
f012d243:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d249:	ff 45 dc             	incl   -0x24(%ebp)
f012d24c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d252:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d255:	7d 85                	jge    f012d1dc <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d257:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d25d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d263:	8d 50 01             	lea    0x1(%eax),%edx
f012d266:	89 d0                	mov    %edx,%eax
f012d268:	01 c0                	add    %eax,%eax
f012d26a:	01 d0                	add    %edx,%eax
f012d26c:	01 c0                	add    %eax,%eax
f012d26e:	01 d0                	add    %edx,%eax
f012d270:	39 c1                	cmp    %eax,%ecx
f012d272:	75 3a                	jne    f012d2ae <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d274:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d27a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d280:	8d 50 01             	lea    0x1(%eax),%edx
f012d283:	89 d0                	mov    %edx,%eax
f012d285:	01 c0                	add    %eax,%eax
f012d287:	01 d0                	add    %edx,%eax
f012d289:	01 c0                	add    %eax,%eax
f012d28b:	01 d0                	add    %edx,%eax
f012d28d:	39 c1                	cmp    %eax,%ecx
f012d28f:	75 1d                	jne    f012d2ae <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d291:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d297:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d29d:	8d 50 01             	lea    0x1(%eax),%edx
f012d2a0:	89 d0                	mov    %edx,%eax
f012d2a2:	01 c0                	add    %eax,%eax
f012d2a4:	01 d0                	add    %edx,%eax
f012d2a6:	01 c0                	add    %eax,%eax
f012d2a8:	01 d0                	add    %edx,%eax
f012d2aa:	39 c1                	cmp    %eax,%ecx
f012d2ac:	74 17                	je     f012d2c5 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d2ae:	83 ec 04             	sub    $0x4,%esp
f012d2b1:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d2b6:	68 1b 10 00 00       	push   $0x101b
f012d2bb:	68 5a b3 13 f0       	push   $0xf013b35a
f012d2c0:	e8 40 2f fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d2c5:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d2cc:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d2cf:	e8 c9 f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d2d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d2d7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d2dd:	83 ec 08             	sub    $0x8,%esp
f012d2e0:	68 00 3c 00 00       	push   $0x3c00
f012d2e5:	50                   	push   %eax
f012d2e6:	e8 5a a8 fd ff       	call   f0107b45 <krealloc>
f012d2eb:	83 c4 10             	add    $0x10,%esp
f012d2ee:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2f4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d2fa:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2ff:	77 17                	ja     f012d318 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d301:	83 ec 04             	sub    $0x4,%esp
f012d304:	68 00 c6 13 f0       	push   $0xf013c600
f012d309:	68 27 10 00 00       	push   $0x1027
f012d30e:	68 5a b3 13 f0       	push   $0xf013b35a
f012d313:	e8 ed 2e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d318:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d31e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d324:	74 17                	je     f012d33d <test_krealloc+0x1593>
			panic(
f012d326:	83 ec 04             	sub    $0x4,%esp
f012d329:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012d32e:	68 2a 10 00 00       	push   $0x102a
f012d333:	68 5a b3 13 f0       	push   $0xf013b35a
f012d338:	e8 c8 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d33d:	e8 5b f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d342:	89 c2                	mov    %eax,%edx
f012d344:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d347:	39 c2                	cmp    %eax,%edx
f012d349:	74 17                	je     f012d362 <test_krealloc+0x15b8>
			panic(
f012d34b:	83 ec 04             	sub    $0x4,%esp
f012d34e:	68 50 c9 13 f0       	push   $0xf013c950
f012d353:	68 2d 10 00 00       	push   $0x102d
f012d358:	68 5a b3 13 f0       	push   $0xf013b35a
f012d35d:	e8 a3 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d362:	e8 36 f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d367:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d36a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d370:	83 ec 08             	sub    $0x8,%esp
f012d373:	68 00 fc 0f 00       	push   $0xffc00
f012d378:	50                   	push   %eax
f012d379:	e8 c7 a7 fd ff       	call   f0107b45 <krealloc>
f012d37e:	83 c4 10             	add    $0x10,%esp
f012d381:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d387:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d38d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d392:	77 17                	ja     f012d3ab <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d394:	83 ec 04             	sub    $0x4,%esp
f012d397:	68 00 c6 13 f0       	push   $0xf013c600
f012d39c:	68 33 10 00 00       	push   $0x1033
f012d3a1:	68 5a b3 13 f0       	push   $0xf013b35a
f012d3a6:	e8 5a 2e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d3ab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d3b1:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d3b7:	74 17                	je     f012d3d0 <test_krealloc+0x1626>
			panic(
f012d3b9:	83 ec 04             	sub    $0x4,%esp
f012d3bc:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012d3c1:	68 36 10 00 00       	push   $0x1036
f012d3c6:	68 5a b3 13 f0       	push   $0xf013b35a
f012d3cb:	e8 35 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d3d0:	e8 c8 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3d5:	89 c2                	mov    %eax,%edx
f012d3d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d3da:	39 c2                	cmp    %eax,%edx
f012d3dc:	74 17                	je     f012d3f5 <test_krealloc+0x164b>
			panic(
f012d3de:	83 ec 04             	sub    $0x4,%esp
f012d3e1:	68 50 c9 13 f0       	push   $0xf013c950
f012d3e6:	68 39 10 00 00       	push   $0x1039
f012d3eb:	68 5a b3 13 f0       	push   $0xf013b35a
f012d3f0:	e8 10 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d3f5:	e8 a3 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3fa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d3fd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d403:	83 ec 08             	sub    $0x8,%esp
f012d406:	68 00 fc 0f 00       	push   $0xffc00
f012d40b:	50                   	push   %eax
f012d40c:	e8 34 a7 fd ff       	call   f0107b45 <krealloc>
f012d411:	83 c4 10             	add    $0x10,%esp
f012d414:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d41a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d420:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d425:	77 17                	ja     f012d43e <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d427:	83 ec 04             	sub    $0x4,%esp
f012d42a:	68 00 c6 13 f0       	push   $0xf013c600
f012d42f:	68 3f 10 00 00       	push   $0x103f
f012d434:	68 5a b3 13 f0       	push   $0xf013b35a
f012d439:	e8 c7 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d43e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d444:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d44a:	74 17                	je     f012d463 <test_krealloc+0x16b9>
			panic(
f012d44c:	83 ec 04             	sub    $0x4,%esp
f012d44f:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012d454:	68 42 10 00 00       	push   $0x1042
f012d459:	68 5a b3 13 f0       	push   $0xf013b35a
f012d45e:	e8 a2 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d463:	e8 35 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d468:	89 c2                	mov    %eax,%edx
f012d46a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d46d:	39 c2                	cmp    %eax,%edx
f012d46f:	74 17                	je     f012d488 <test_krealloc+0x16de>
			panic(
f012d471:	83 ec 04             	sub    $0x4,%esp
f012d474:	68 50 c9 13 f0       	push   $0xf013c950
f012d479:	68 45 10 00 00       	push   $0x1045
f012d47e:	68 5a b3 13 f0       	push   $0xf013b35a
f012d483:	e8 7d 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d488:	e8 10 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d48d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d490:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d496:	83 ec 08             	sub    $0x8,%esp
f012d499:	68 00 fc 0f 00       	push   $0xffc00
f012d49e:	50                   	push   %eax
f012d49f:	e8 a1 a6 fd ff       	call   f0107b45 <krealloc>
f012d4a4:	83 c4 10             	add    $0x10,%esp
f012d4a7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d4ad:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d4b3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d4b8:	77 17                	ja     f012d4d1 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d4ba:	83 ec 04             	sub    $0x4,%esp
f012d4bd:	68 00 c6 13 f0       	push   $0xf013c600
f012d4c2:	68 4d 10 00 00       	push   $0x104d
f012d4c7:	68 5a b3 13 f0       	push   $0xf013b35a
f012d4cc:	e8 34 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d4d1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d4d7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d4dd:	74 17                	je     f012d4f6 <test_krealloc+0x174c>
			panic(
f012d4df:	83 ec 04             	sub    $0x4,%esp
f012d4e2:	68 94 c9 13 f0       	push   $0xf013c994
f012d4e7:	68 50 10 00 00       	push   $0x1050
f012d4ec:	68 5a b3 13 f0       	push   $0xf013b35a
f012d4f1:	e8 0f 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d4f6:	e8 a2 f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d4fb:	89 c2                	mov    %eax,%edx
f012d4fd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d500:	39 c2                	cmp    %eax,%edx
f012d502:	74 17                	je     f012d51b <test_krealloc+0x1771>
			panic(
f012d504:	83 ec 04             	sub    $0x4,%esp
f012d507:	68 50 c9 13 f0       	push   $0xf013c950
f012d50c:	68 53 10 00 00       	push   $0x1053
f012d511:	68 5a b3 13 f0       	push   $0xf013b35a
f012d516:	e8 ea 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d51b:	83 ec 0c             	sub    $0xc,%esp
f012d51e:	68 73 bb 13 f0       	push   $0xf013bb73
f012d523:	e8 e6 37 fd ff       	call   f0100d0e <cprintf>
f012d528:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d52b:	e8 6d f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d530:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d533:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d539:	83 ec 08             	sub    $0x8,%esp
f012d53c:	68 00 18 10 00       	push   $0x101800
f012d541:	50                   	push   %eax
f012d542:	e8 fe a5 fd ff       	call   f0107b45 <krealloc>
f012d547:	83 c4 10             	add    $0x10,%esp
f012d54a:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d54d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d550:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d555:	77 17                	ja     f012d56e <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d557:	83 ec 04             	sub    $0x4,%esp
f012d55a:	68 00 c6 13 f0       	push   $0xf013c600
f012d55f:	68 5c 10 00 00       	push   $0x105c
f012d564:	68 5a b3 13 f0       	push   $0xf013b35a
f012d569:	e8 97 2c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d56e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d574:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d577:	74 17                	je     f012d590 <test_krealloc+0x17e6>
			panic(
f012d579:	83 ec 04             	sub    $0x4,%esp
f012d57c:	68 f4 c9 13 f0       	push   $0xf013c9f4
f012d581:	68 5f 10 00 00       	push   $0x105f
f012d586:	68 5a b3 13 f0       	push   $0xf013b35a
f012d58b:	e8 75 2c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d590:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d593:	e8 05 f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d598:	29 c3                	sub    %eax,%ebx
f012d59a:	89 d8                	mov    %ebx,%eax
f012d59c:	83 f8 02             	cmp    $0x2,%eax
f012d59f:	74 17                	je     f012d5b8 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d5a1:	83 ec 04             	sub    $0x4,%esp
f012d5a4:	68 70 ca 13 f0       	push   $0xf013ca70
f012d5a9:	68 61 10 00 00       	push   $0x1061
f012d5ae:	68 5a b3 13 f0       	push   $0xf013b35a
f012d5b3:	e8 4d 2c fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d5b8:	e8 e0 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d5bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d5c0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5c6:	83 ec 08             	sub    $0x8,%esp
f012d5c9:	68 00 fc 3f 00       	push   $0x3ffc00
f012d5ce:	50                   	push   %eax
f012d5cf:	e8 71 a5 fd ff       	call   f0107b45 <krealloc>
f012d5d4:	83 c4 10             	add    $0x10,%esp
f012d5d7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d5da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5dd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5e2:	77 17                	ja     f012d5fb <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5e4:	83 ec 04             	sub    $0x4,%esp
f012d5e7:	68 00 c6 13 f0       	push   $0xf013c600
f012d5ec:	68 67 10 00 00       	push   $0x1067
f012d5f1:	68 5a b3 13 f0       	push   $0xf013b35a
f012d5f6:	e8 0a 2c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d5fb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d601:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d604:	74 17                	je     f012d61d <test_krealloc+0x1873>
			panic(
f012d606:	83 ec 04             	sub    $0x4,%esp
f012d609:	68 f4 c9 13 f0       	push   $0xf013c9f4
f012d60e:	68 6a 10 00 00       	push   $0x106a
f012d613:	68 5a b3 13 f0       	push   $0xf013b35a
f012d618:	e8 e8 2b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d61d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d620:	e8 78 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d625:	29 c3                	sub    %eax,%ebx
f012d627:	89 d8                	mov    %ebx,%eax
f012d629:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d62e:	74 17                	je     f012d647 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d630:	83 ec 04             	sub    $0x4,%esp
f012d633:	68 70 ca 13 f0       	push   $0xf013ca70
f012d638:	68 6d 10 00 00       	push   $0x106d
f012d63d:	68 5a b3 13 f0       	push   $0xf013b35a
f012d642:	e8 be 2b fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d647:	83 ec 0c             	sub    $0xc,%esp
f012d64a:	68 b8 bb 13 f0       	push   $0xf013bbb8
f012d64f:	e8 ba 36 fd ff       	call   f0100d0e <cprintf>
f012d654:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d657:	e8 41 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d65c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d65f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d665:	83 ec 08             	sub    $0x8,%esp
f012d668:	68 00 fc 9f 00       	push   $0x9ffc00
f012d66d:	50                   	push   %eax
f012d66e:	e8 d2 a4 fd ff       	call   f0107b45 <krealloc>
f012d673:	83 c4 10             	add    $0x10,%esp
f012d676:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d679:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d67c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d681:	77 17                	ja     f012d69a <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d683:	83 ec 04             	sub    $0x4,%esp
f012d686:	68 00 c6 13 f0       	push   $0xf013c600
f012d68b:	68 78 10 00 00       	push   $0x1078
f012d690:	68 5a b3 13 f0       	push   $0xf013b35a
f012d695:	e8 6b 2b fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d69a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d6a1:	10 00 00 
f012d6a4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d6aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d6af:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d6b5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d6bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012d6c0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d6c6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d6cc:	29 d0                	sub    %edx,%eax
f012d6ce:	89 c1                	mov    %eax,%ecx
f012d6d0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d6d7:	10 00 00 
f012d6da:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d6df:	0f b6 d0             	movzbl %al,%edx
f012d6e2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d6e8:	01 d0                	add    %edx,%eax
f012d6ea:	48                   	dec    %eax
f012d6eb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d6f1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d6f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012d6fc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d702:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d708:	29 d0                	sub    %edx,%eax
f012d70a:	01 c1                	add    %eax,%ecx
f012d70c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d713:	10 00 00 
f012d716:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d71b:	0f b6 c0             	movzbl %al,%eax
f012d71e:	c1 e0 04             	shl    $0x4,%eax
f012d721:	89 c2                	mov    %eax,%edx
f012d723:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d729:	01 d0                	add    %edx,%eax
f012d72b:	48                   	dec    %eax
f012d72c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d732:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d738:	ba 00 00 00 00       	mov    $0x0,%edx
f012d73d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d743:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d749:	29 d0                	sub    %edx,%eax
f012d74b:	01 c8                	add    %ecx,%eax
f012d74d:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d753:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d756:	39 c2                	cmp    %eax,%edx
f012d758:	74 18                	je     f012d772 <test_krealloc+0x19c8>
			panic(
f012d75a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d75d:	50                   	push   %eax
f012d75e:	68 a4 ca 13 f0       	push   $0xf013caa4
f012d763:	68 7c 10 00 00       	push   $0x107c
f012d768:	68 5a b3 13 f0       	push   $0xf013b35a
f012d76d:	e8 93 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d772:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d778:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d77b:	75 17                	jne    f012d794 <test_krealloc+0x19ea>
			panic(
f012d77d:	83 ec 04             	sub    $0x4,%esp
f012d780:	68 e8 ca 13 f0       	push   $0xf013cae8
f012d785:	68 7f 10 00 00       	push   $0x107f
f012d78a:	68 5a b3 13 f0       	push   $0xf013b35a
f012d78f:	e8 71 2a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d794:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d797:	e8 01 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d79c:	29 c3                	sub    %eax,%ebx
f012d79e:	89 d8                	mov    %ebx,%eax
f012d7a0:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d7a5:	74 17                	je     f012d7be <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d7a7:	83 ec 04             	sub    $0x4,%esp
f012d7aa:	68 70 ca 13 f0       	push   $0xf013ca70
f012d7af:	68 82 10 00 00       	push   $0x1082
f012d7b4:	68 5a b3 13 f0       	push   $0xf013b35a
f012d7b9:	e8 47 2a fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012d7be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7c1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d7c7:	e8 d1 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d7cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d7cf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d7d5:	83 ec 08             	sub    $0x8,%esp
f012d7d8:	68 00 fc 5f 00       	push   $0x5ffc00
f012d7dd:	50                   	push   %eax
f012d7de:	e8 62 a3 fd ff       	call   f0107b45 <krealloc>
f012d7e3:	83 c4 10             	add    $0x10,%esp
f012d7e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7f1:	77 17                	ja     f012d80a <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7f3:	83 ec 04             	sub    $0x4,%esp
f012d7f6:	68 00 c6 13 f0       	push   $0xf013c600
f012d7fb:	68 8b 10 00 00       	push   $0x108b
f012d800:	68 5a b3 13 f0       	push   $0xf013b35a
f012d805:	e8 fb 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012d80a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d810:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d813:	74 17                	je     f012d82c <test_krealloc+0x1a82>
			panic(
f012d815:	83 ec 04             	sub    $0x4,%esp
f012d818:	68 f4 c9 13 f0       	push   $0xf013c9f4
f012d81d:	68 8e 10 00 00       	push   $0x108e
f012d822:	68 5a b3 13 f0       	push   $0xf013b35a
f012d827:	e8 d9 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d82c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d82f:	e8 69 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d834:	29 c3                	sub    %eax,%ebx
f012d836:	89 d8                	mov    %ebx,%eax
f012d838:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d83d:	74 17                	je     f012d856 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d83f:	83 ec 04             	sub    $0x4,%esp
f012d842:	68 70 ca 13 f0       	push   $0xf013ca70
f012d847:	68 91 10 00 00       	push   $0x1091
f012d84c:	68 5a b3 13 f0       	push   $0xf013b35a
f012d851:	e8 af 29 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d856:	e8 42 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d85b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d85e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d864:	83 ec 08             	sub    $0x8,%esp
f012d867:	68 00 fc 3f 01       	push   $0x13ffc00
f012d86c:	50                   	push   %eax
f012d86d:	e8 d3 a2 fd ff       	call   f0107b45 <krealloc>
f012d872:	83 c4 10             	add    $0x10,%esp
f012d875:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d878:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d87b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d880:	77 17                	ja     f012d899 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d882:	83 ec 04             	sub    $0x4,%esp
f012d885:	68 00 c6 13 f0       	push   $0xf013c600
f012d88a:	68 98 10 00 00       	push   $0x1098
f012d88f:	68 5a b3 13 f0       	push   $0xf013b35a
f012d894:	e8 6c 29 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012d899:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d89f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d8a2:	75 17                	jne    f012d8bb <test_krealloc+0x1b11>
			panic(
f012d8a4:	83 ec 04             	sub    $0x4,%esp
f012d8a7:	68 e8 ca 13 f0       	push   $0xf013cae8
f012d8ac:	68 9b 10 00 00       	push   $0x109b
f012d8b1:	68 5a b3 13 f0       	push   $0xf013b35a
f012d8b6:	e8 4a 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d8bb:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d8c2:	10 00 00 
f012d8c5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d8cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d8d0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d8d6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d8dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8e1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d8e7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d8ed:	29 d0                	sub    %edx,%eax
f012d8ef:	89 c1                	mov    %eax,%ecx
f012d8f1:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d8f8:	10 00 00 
f012d8fb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d900:	0f b6 d0             	movzbl %al,%edx
f012d903:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d909:	01 d0                	add    %edx,%eax
f012d90b:	48                   	dec    %eax
f012d90c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d912:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d918:	ba 00 00 00 00       	mov    $0x0,%edx
f012d91d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d923:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d929:	29 d0                	sub    %edx,%eax
f012d92b:	01 c1                	add    %eax,%ecx
f012d92d:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d934:	10 00 00 
f012d937:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d93c:	0f b6 c0             	movzbl %al,%eax
f012d93f:	c1 e0 04             	shl    $0x4,%eax
f012d942:	89 c2                	mov    %eax,%edx
f012d944:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d94a:	01 d0                	add    %edx,%eax
f012d94c:	48                   	dec    %eax
f012d94d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d953:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d959:	ba 00 00 00 00       	mov    $0x0,%edx
f012d95e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d964:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d96a:	29 d0                	sub    %edx,%eax
f012d96c:	01 c8                	add    %ecx,%eax
f012d96e:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d974:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d977:	39 c2                	cmp    %eax,%edx
f012d979:	74 17                	je     f012d992 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d97b:	83 ec 04             	sub    $0x4,%esp
f012d97e:	68 6c cb 13 f0       	push   $0xf013cb6c
f012d983:	68 9d 10 00 00       	push   $0x109d
f012d988:	68 5a b3 13 f0       	push   $0xf013b35a
f012d98d:	e8 73 28 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d992:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d995:	e8 03 f2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d99a:	29 c3                	sub    %eax,%ebx
f012d99c:	89 d8                	mov    %ebx,%eax
f012d99e:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d9a3:	74 17                	je     f012d9bc <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d9a5:	83 ec 04             	sub    $0x4,%esp
f012d9a8:	68 70 ca 13 f0       	push   $0xf013ca70
f012d9ad:	68 a0 10 00 00       	push   $0x10a0
f012d9b2:	68 5a b3 13 f0       	push   $0xf013b35a
f012d9b7:	e8 49 28 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012d9bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d9bf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d9c5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d9cb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d9d1:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d9d8:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d9db:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d9e2:	eb 21                	jmp    f012da05 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d9e4:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d9ea:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d9ed:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d9f3:	01 c8                	add    %ecx,%eax
f012d9f5:	8a 00                	mov    (%eax),%al
f012d9f7:	0f be c0             	movsbl %al,%eax
f012d9fa:	01 d0                	add    %edx,%eax
f012d9fc:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012da02:	ff 45 d8             	incl   -0x28(%ebp)
f012da05:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012da0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012da0e:	7d d4                	jge    f012d9e4 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012da10:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012da16:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012da1c:	42                   	inc    %edx
f012da1d:	01 d2                	add    %edx,%edx
f012da1f:	39 d0                	cmp    %edx,%eax
f012da21:	74 17                	je     f012da3a <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012da23:	83 ec 04             	sub    $0x4,%esp
f012da26:	68 a0 cb 13 f0       	push   $0xf013cba0
f012da2b:	68 ae 10 00 00       	push   $0x10ae
f012da30:	68 5a b3 13 f0       	push   $0xf013b35a
f012da35:	e8 cb 27 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012da3a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012da40:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012da46:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012da4d:	00 00 00 
		sums[1] = 0;
f012da50:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012da57:	00 00 00 
		sums[2] = 0;
f012da5a:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012da61:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012da64:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012da6b:	eb 70                	jmp    f012dadd <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012da6d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012da73:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da76:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012da7d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da83:	01 c8                	add    %ecx,%eax
f012da85:	8a 00                	mov    (%eax),%al
f012da87:	0f be c0             	movsbl %al,%eax
f012da8a:	01 d0                	add    %edx,%eax
f012da8c:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012da92:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012da98:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da9b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012daa2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012daa8:	01 c8                	add    %ecx,%eax
f012daaa:	66 8b 40 02          	mov    0x2(%eax),%ax
f012daae:	98                   	cwtl   
f012daaf:	01 d0                	add    %edx,%eax
f012dab1:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012dab7:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012dabd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dac0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dac7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dacd:	01 c8                	add    %ecx,%eax
f012dacf:	8b 40 04             	mov    0x4(%eax),%eax
f012dad2:	01 d0                	add    %edx,%eax
f012dad4:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dada:	ff 45 d8             	incl   -0x28(%ebp)
f012dadd:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dae3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dae6:	7d 85                	jge    f012da6d <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012dae8:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012daee:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012daf4:	8d 50 01             	lea    0x1(%eax),%edx
f012daf7:	89 d0                	mov    %edx,%eax
f012daf9:	01 c0                	add    %eax,%eax
f012dafb:	01 d0                	add    %edx,%eax
f012dafd:	01 c0                	add    %eax,%eax
f012daff:	01 d0                	add    %edx,%eax
f012db01:	39 c1                	cmp    %eax,%ecx
f012db03:	75 3a                	jne    f012db3f <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012db05:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012db0b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012db11:	8d 50 01             	lea    0x1(%eax),%edx
f012db14:	89 d0                	mov    %edx,%eax
f012db16:	01 c0                	add    %eax,%eax
f012db18:	01 d0                	add    %edx,%eax
f012db1a:	01 c0                	add    %eax,%eax
f012db1c:	01 d0                	add    %edx,%eax
f012db1e:	39 c1                	cmp    %eax,%ecx
f012db20:	75 1d                	jne    f012db3f <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012db22:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012db28:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012db2e:	8d 50 01             	lea    0x1(%eax),%edx
f012db31:	89 d0                	mov    %edx,%eax
f012db33:	01 c0                	add    %eax,%eax
f012db35:	01 d0                	add    %edx,%eax
f012db37:	01 c0                	add    %eax,%eax
f012db39:	01 d0                	add    %edx,%eax
f012db3b:	39 c1                	cmp    %eax,%ecx
f012db3d:	74 17                	je     f012db56 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012db3f:	83 ec 04             	sub    $0x4,%esp
f012db42:	68 a0 cb 13 f0       	push   $0xf013cba0
f012db47:	68 c0 10 00 00       	push   $0x10c0
f012db4c:	68 5a b3 13 f0       	push   $0xf013b35a
f012db51:	e8 af 26 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012db56:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db5c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012db62:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012db69:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012db6c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012db73:	eb 24                	jmp    f012db99 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012db75:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012db7b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012db7e:	01 c0                	add    %eax,%eax
f012db80:	89 c1                	mov    %eax,%ecx
f012db82:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012db88:	01 c8                	add    %ecx,%eax
f012db8a:	66 8b 00             	mov    (%eax),%ax
f012db8d:	98                   	cwtl   
f012db8e:	01 d0                	add    %edx,%eax
f012db90:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012db96:	ff 45 d8             	incl   -0x28(%ebp)
f012db99:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012db9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dba2:	7d d1                	jge    f012db75 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012dba4:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dbaa:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dbb0:	8d 48 01             	lea    0x1(%eax),%ecx
f012dbb3:	89 c8                	mov    %ecx,%eax
f012dbb5:	c1 e0 02             	shl    $0x2,%eax
f012dbb8:	01 c8                	add    %ecx,%eax
f012dbba:	39 c2                	cmp    %eax,%edx
f012dbbc:	74 17                	je     f012dbd5 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012dbbe:	83 ec 04             	sub    $0x4,%esp
f012dbc1:	68 a0 cb 13 f0       	push   $0xf013cba0
f012dbc6:	68 ca 10 00 00       	push   $0x10ca
f012dbcb:	68 5a b3 13 f0       	push   $0xf013b35a
f012dbd0:	e8 30 26 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012dbd5:	e8 c3 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dbda:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dbdd:	e8 e6 61 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dbe2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012dbe8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dbee:	83 ec 08             	sub    $0x8,%esp
f012dbf1:	6a 00                	push   $0x0
f012dbf3:	50                   	push   %eax
f012dbf4:	e8 4c 9f fd ff       	call   f0107b45 <krealloc>
f012dbf9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dbfc:	e8 c7 61 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dc01:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dc07:	74 17                	je     f012dc20 <test_krealloc+0x1e76>
			panic(
f012dc09:	83 ec 04             	sub    $0x4,%esp
f012dc0c:	68 74 b3 13 f0       	push   $0xf013b374
f012dc11:	68 d2 10 00 00       	push   $0x10d2
f012dc16:	68 5a b3 13 f0       	push   $0xf013b35a
f012dc1b:	e8 e5 25 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012dc20:	e8 78 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc25:	89 c2                	mov    %eax,%edx
f012dc27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc2a:	29 c2                	sub    %eax,%edx
f012dc2c:	89 d0                	mov    %edx,%eax
f012dc2e:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012dc33:	74 17                	je     f012dc4c <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012dc35:	83 ec 04             	sub    $0x4,%esp
f012dc38:	68 30 c8 13 f0       	push   $0xf013c830
f012dc3d:	68 d4 10 00 00       	push   $0x10d4
f012dc42:	68 5a b3 13 f0       	push   $0xf013b35a
f012dc47:	e8 b9 25 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dc4c:	e8 4c ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc51:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dc54:	e8 6f 61 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dc59:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012dc5f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dc65:	83 ec 0c             	sub    $0xc,%esp
f012dc68:	50                   	push   %eax
f012dc69:	e8 e2 9c fd ff       	call   f0107950 <kfree>
f012dc6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dc71:	e8 52 61 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dc76:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dc7c:	74 17                	je     f012dc95 <test_krealloc+0x1eeb>
			panic(
f012dc7e:	83 ec 04             	sub    $0x4,%esp
f012dc81:	68 74 b3 13 f0       	push   $0xf013b374
f012dc86:	68 dc 10 00 00       	push   $0x10dc
f012dc8b:	68 5a b3 13 f0       	push   $0xf013b35a
f012dc90:	e8 70 25 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012dc95:	e8 03 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc9a:	89 c2                	mov    %eax,%edx
f012dc9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc9f:	29 c2                	sub    %eax,%edx
f012dca1:	89 d0                	mov    %edx,%eax
f012dca3:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012dca8:	74 17                	je     f012dcc1 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012dcaa:	83 ec 04             	sub    $0x4,%esp
f012dcad:	68 30 c8 13 f0       	push   $0xf013c830
f012dcb2:	68 de 10 00 00       	push   $0x10de
f012dcb7:	68 5a b3 13 f0       	push   $0xf013b35a
f012dcbc:	e8 44 25 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dcc1:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dcc8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dccf:	eb 48                	jmp    f012dd19 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dcd1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dcd4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012dcd9:	83 ec 04             	sub    $0x4,%esp
f012dcdc:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012dce2:	51                   	push   %ecx
f012dce3:	52                   	push   %edx
f012dce4:	50                   	push   %eax
f012dce5:	e8 c7 8d fd ff       	call   f0106ab1 <get_page_table>
f012dcea:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dced:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012dcf3:	85 c0                	test   %eax,%eax
f012dcf5:	75 17                	jne    f012dd0e <test_krealloc+0x1f64>
					panic(
f012dcf7:	83 ec 04             	sub    $0x4,%esp
f012dcfa:	68 5c bc 13 f0       	push   $0xf013bc5c
f012dcff:	68 eb 10 00 00       	push   $0x10eb
f012dd04:	68 5a b3 13 f0       	push   $0xf013b35a
f012dd09:	e8 f7 24 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dd0e:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012dd15:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012dd19:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dd1d:	78 b2                	js     f012dcd1 <test_krealloc+0x1f27>
f012dd1f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dd23:	7f 09                	jg     f012dd2e <test_krealloc+0x1f84>
f012dd25:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012dd2c:	76 a3                	jbe    f012dcd1 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012dd2e:	83 ec 0c             	sub    $0xc,%esp
f012dd31:	68 3e b5 13 f0       	push   $0xf013b53e
f012dd36:	e8 d3 2f fd ff       	call   f0100d0e <cprintf>
f012dd3b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012dd3e:	83 ec 0c             	sub    $0xc,%esp
f012dd41:	68 cc cb 13 f0       	push   $0xf013cbcc
f012dd46:	e8 c3 2f fd ff       	call   f0100d0e <cprintf>
f012dd4b:	83 c4 10             	add    $0x10,%esp
	return 0;
f012dd4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dd53:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012dd56:	5b                   	pop    %ebx
f012dd57:	5f                   	pop    %edi
f012dd58:	5d                   	pop    %ebp
f012dd59:	c3                   	ret    

f012dd5a <test_krealloc_BF>:


int test_krealloc_BF() {
f012dd5a:	55                   	push   %ebp
f012dd5b:	89 e5                	mov    %esp,%ebp
f012dd5d:	57                   	push   %edi
f012dd5e:	53                   	push   %ebx
f012dd5f:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012dd65:	83 ec 0c             	sub    $0xc,%esp
f012dd68:	68 9c b2 13 f0       	push   $0xf013b29c
f012dd6d:	e8 9c 2f fd ff       	call   f0100d0e <cprintf>
f012dd72:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012dd75:	83 ec 0c             	sub    $0xc,%esp
f012dd78:	68 cc b2 13 f0       	push   $0xf013b2cc
f012dd7d:	e8 8c 2f fd ff       	call   f0100d0e <cprintf>
f012dd82:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012dd85:	83 ec 0c             	sub    $0xc,%esp
f012dd88:	68 9c b2 13 f0       	push   $0xf013b29c
f012dd8d:	e8 7c 2f fd ff       	call   f0100d0e <cprintf>
f012dd92:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012dd95:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012dd99:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012dd9d:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012dda3:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012dda9:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012ddb0:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012ddb7:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012ddbd:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ddc2:	b8 00 00 00 00       	mov    $0x0,%eax
f012ddc7:	89 d7                	mov    %edx,%edi
f012ddc9:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012ddcb:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012ddd2:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012ddd8:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dddd:	b8 00 00 00 00       	mov    $0x0,%eax
f012dde2:	89 d7                	mov    %edx,%edi
f012dde4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012dde6:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012ddec:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ddf1:	b8 00 00 00 00       	mov    $0x0,%eax
f012ddf6:	89 d7                	mov    %edx,%edi
f012ddf8:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ddfa:	e8 9e ed fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ddff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012de02:	83 ec 08             	sub    $0x8,%esp
f012de05:	68 00 fc 0f 00       	push   $0xffc00
f012de0a:	6a 00                	push   $0x0
f012de0c:	e8 34 9d fd ff       	call   f0107b45 <krealloc>
f012de11:	83 c4 10             	add    $0x10,%esp
f012de14:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012de1a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012de20:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012de25:	77 17                	ja     f012de3e <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012de27:	83 ec 04             	sub    $0x4,%esp
f012de2a:	68 00 c6 13 f0       	push   $0xf013c600
f012de2f:	68 1a 11 00 00       	push   $0x111a
f012de34:	68 5a b3 13 f0       	push   $0xf013b35a
f012de39:	e8 c7 23 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012de3e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012de44:	89 c1                	mov    %eax,%ecx
f012de46:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012de4d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012de50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de55:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012de58:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012de5b:	ba 00 00 00 00       	mov    $0x0,%edx
f012de60:	f7 75 b4             	divl   -0x4c(%ebp)
f012de63:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012de66:	29 d0                	sub    %edx,%eax
f012de68:	89 c3                	mov    %eax,%ebx
f012de6a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012de71:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012de76:	0f b6 d0             	movzbl %al,%edx
f012de79:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012de7c:	01 d0                	add    %edx,%eax
f012de7e:	48                   	dec    %eax
f012de7f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012de82:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012de85:	ba 00 00 00 00       	mov    $0x0,%edx
f012de8a:	f7 75 ac             	divl   -0x54(%ebp)
f012de8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012de90:	29 d0                	sub    %edx,%eax
f012de92:	01 c3                	add    %eax,%ebx
f012de94:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012de9b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012dea0:	0f b6 c0             	movzbl %al,%eax
f012dea3:	c1 e0 04             	shl    $0x4,%eax
f012dea6:	89 c2                	mov    %eax,%edx
f012dea8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012deab:	01 d0                	add    %edx,%eax
f012dead:	48                   	dec    %eax
f012deae:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012deb1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012deb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012deb9:	f7 75 a4             	divl   -0x5c(%ebp)
f012debc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012debf:	29 d0                	sub    %edx,%eax
f012dec1:	01 d8                	add    %ebx,%eax
f012dec3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012dec8:	39 c1                	cmp    %eax,%ecx
f012deca:	74 17                	je     f012dee3 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012decc:	83 ec 04             	sub    $0x4,%esp
f012decf:	68 3c c6 13 f0       	push   $0xf013c63c
f012ded4:	68 1c 11 00 00       	push   $0x111c
f012ded9:	68 5a b3 13 f0       	push   $0xf013b35a
f012dede:	e8 22 23 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dee3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dee6:	e8 b2 ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012deeb:	29 c3                	sub    %eax,%ebx
f012deed:	89 d8                	mov    %ebx,%eax
f012deef:	3d 00 01 00 00       	cmp    $0x100,%eax
f012def4:	74 17                	je     f012df0d <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012def6:	83 ec 04             	sub    $0x4,%esp
f012def9:	68 6e c6 13 f0       	push   $0xf013c66e
f012defe:	68 1f 11 00 00       	push   $0x111f
f012df03:	68 5a b3 13 f0       	push   $0xf013b35a
f012df08:	e8 f8 22 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012df0d:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012df14:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012df17:	e8 81 ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012df1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012df1f:	83 ec 08             	sub    $0x8,%esp
f012df22:	68 00 fc 0f 00       	push   $0xffc00
f012df27:	6a 00                	push   $0x0
f012df29:	e8 17 9c fd ff       	call   f0107b45 <krealloc>
f012df2e:	83 c4 10             	add    $0x10,%esp
f012df31:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012df37:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012df3d:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012df42:	77 17                	ja     f012df5b <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df44:	83 ec 04             	sub    $0x4,%esp
f012df47:	68 00 c6 13 f0       	push   $0xf013c600
f012df4c:	68 27 11 00 00       	push   $0x1127
f012df51:	68 5a b3 13 f0       	push   $0xf013b35a
f012df56:	e8 aa 22 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012df5b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012df61:	89 c1                	mov    %eax,%ecx
f012df63:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012df6a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012df6d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df72:	89 45 98             	mov    %eax,-0x68(%ebp)
f012df75:	8b 45 98             	mov    -0x68(%ebp),%eax
f012df78:	ba 00 00 00 00       	mov    $0x0,%edx
f012df7d:	f7 75 9c             	divl   -0x64(%ebp)
f012df80:	8b 45 98             	mov    -0x68(%ebp),%eax
f012df83:	29 d0                	sub    %edx,%eax
f012df85:	89 c3                	mov    %eax,%ebx
f012df87:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012df8e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012df93:	0f b6 d0             	movzbl %al,%edx
f012df96:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012df99:	01 d0                	add    %edx,%eax
f012df9b:	48                   	dec    %eax
f012df9c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012df9f:	8b 45 90             	mov    -0x70(%ebp),%eax
f012dfa2:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfa7:	f7 75 94             	divl   -0x6c(%ebp)
f012dfaa:	8b 45 90             	mov    -0x70(%ebp),%eax
f012dfad:	29 d0                	sub    %edx,%eax
f012dfaf:	01 c3                	add    %eax,%ebx
f012dfb1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012dfb8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012dfbd:	0f b6 c0             	movzbl %al,%eax
f012dfc0:	c1 e0 04             	shl    $0x4,%eax
f012dfc3:	89 c2                	mov    %eax,%edx
f012dfc5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012dfc8:	01 d0                	add    %edx,%eax
f012dfca:	48                   	dec    %eax
f012dfcb:	89 45 88             	mov    %eax,-0x78(%ebp)
f012dfce:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dfd1:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfd6:	f7 75 8c             	divl   -0x74(%ebp)
f012dfd9:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dfdc:	29 d0                	sub    %edx,%eax
f012dfde:	01 d8                	add    %ebx,%eax
f012dfe0:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012dfe5:	39 c1                	cmp    %eax,%ecx
f012dfe7:	74 17                	je     f012e000 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012dfe9:	83 ec 04             	sub    $0x4,%esp
f012dfec:	68 3c c6 13 f0       	push   $0xf013c63c
f012dff1:	68 29 11 00 00       	push   $0x1129
f012dff6:	68 5a b3 13 f0       	push   $0xf013b35a
f012dffb:	e8 05 22 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e000:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e003:	e8 95 eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e008:	29 c3                	sub    %eax,%ebx
f012e00a:	89 d8                	mov    %ebx,%eax
f012e00c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e011:	74 17                	je     f012e02a <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e013:	83 ec 04             	sub    $0x4,%esp
f012e016:	68 6e c6 13 f0       	push   $0xf013c66e
f012e01b:	68 2b 11 00 00       	push   $0x112b
f012e020:	68 5a b3 13 f0       	push   $0xf013b35a
f012e025:	e8 db 21 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e02a:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e031:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e034:	e8 64 eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e039:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e03c:	83 ec 08             	sub    $0x8,%esp
f012e03f:	68 00 fc 0f 00       	push   $0xffc00
f012e044:	6a 00                	push   $0x0
f012e046:	e8 fa 9a fd ff       	call   f0107b45 <krealloc>
f012e04b:	83 c4 10             	add    $0x10,%esp
f012e04e:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e054:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e05a:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e05f:	77 17                	ja     f012e078 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e061:	83 ec 04             	sub    $0x4,%esp
f012e064:	68 00 c6 13 f0       	push   $0xf013c600
f012e069:	68 33 11 00 00       	push   $0x1133
f012e06e:	68 5a b3 13 f0       	push   $0xf013b35a
f012e073:	e8 8d 21 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e078:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e07e:	89 c1                	mov    %eax,%ecx
f012e080:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e087:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e08a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e08f:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e092:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e095:	ba 00 00 00 00       	mov    $0x0,%edx
f012e09a:	f7 75 84             	divl   -0x7c(%ebp)
f012e09d:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e0a0:	29 d0                	sub    %edx,%eax
f012e0a2:	89 c3                	mov    %eax,%ebx
f012e0a4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e0ab:	10 00 00 
f012e0ae:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e0b3:	0f b6 d0             	movzbl %al,%edx
f012e0b6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e0bc:	01 d0                	add    %edx,%eax
f012e0be:	48                   	dec    %eax
f012e0bf:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e0c5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e0cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0d0:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e0d6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e0dc:	29 d0                	sub    %edx,%eax
f012e0de:	01 c3                	add    %eax,%ebx
f012e0e0:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e0e7:	10 00 00 
f012e0ea:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e0ef:	0f b6 c0             	movzbl %al,%eax
f012e0f2:	c1 e0 04             	shl    $0x4,%eax
f012e0f5:	89 c2                	mov    %eax,%edx
f012e0f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e0fd:	01 d0                	add    %edx,%eax
f012e0ff:	48                   	dec    %eax
f012e100:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e106:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e10c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e111:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e117:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e11d:	29 d0                	sub    %edx,%eax
f012e11f:	01 d8                	add    %ebx,%eax
f012e121:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e126:	39 c1                	cmp    %eax,%ecx
f012e128:	74 17                	je     f012e141 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e12a:	83 ec 04             	sub    $0x4,%esp
f012e12d:	68 3c c6 13 f0       	push   $0xf013c63c
f012e132:	68 35 11 00 00       	push   $0x1135
f012e137:	68 5a b3 13 f0       	push   $0xf013b35a
f012e13c:	e8 c4 20 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e141:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e144:	e8 54 ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e149:	29 c3                	sub    %eax,%ebx
f012e14b:	89 d8                	mov    %ebx,%eax
f012e14d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e152:	74 17                	je     f012e16b <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e154:	83 ec 04             	sub    $0x4,%esp
f012e157:	68 6e c6 13 f0       	push   $0xf013c66e
f012e15c:	68 37 11 00 00       	push   $0x1137
f012e161:	68 5a b3 13 f0       	push   $0xf013b35a
f012e166:	e8 9a 20 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e16b:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e172:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e175:	e8 23 ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e17a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e17d:	83 ec 08             	sub    $0x8,%esp
f012e180:	68 00 fc 0f 00       	push   $0xffc00
f012e185:	6a 00                	push   $0x0
f012e187:	e8 b9 99 fd ff       	call   f0107b45 <krealloc>
f012e18c:	83 c4 10             	add    $0x10,%esp
f012e18f:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e195:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e19b:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e1a0:	77 17                	ja     f012e1b9 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e1a2:	83 ec 04             	sub    $0x4,%esp
f012e1a5:	68 00 c6 13 f0       	push   $0xf013c600
f012e1aa:	68 3e 11 00 00       	push   $0x113e
f012e1af:	68 5a b3 13 f0       	push   $0xf013b35a
f012e1b4:	e8 4c 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e1b9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e1bf:	89 c1                	mov    %eax,%ecx
f012e1c1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e1c8:	10 00 00 
f012e1cb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e1d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e1d6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e1dc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e1e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1e7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e1ed:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e1f3:	29 d0                	sub    %edx,%eax
f012e1f5:	89 c3                	mov    %eax,%ebx
f012e1f7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e1fe:	10 00 00 
f012e201:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e206:	0f b6 d0             	movzbl %al,%edx
f012e209:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e20f:	01 d0                	add    %edx,%eax
f012e211:	48                   	dec    %eax
f012e212:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e218:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e21e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e223:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e229:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e22f:	29 d0                	sub    %edx,%eax
f012e231:	01 c3                	add    %eax,%ebx
f012e233:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e23a:	10 00 00 
f012e23d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e242:	0f b6 c0             	movzbl %al,%eax
f012e245:	c1 e0 04             	shl    $0x4,%eax
f012e248:	89 c2                	mov    %eax,%edx
f012e24a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e250:	01 d0                	add    %edx,%eax
f012e252:	48                   	dec    %eax
f012e253:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e259:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e25f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e264:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e26a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e270:	29 d0                	sub    %edx,%eax
f012e272:	01 d8                	add    %ebx,%eax
f012e274:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e279:	39 c1                	cmp    %eax,%ecx
f012e27b:	74 17                	je     f012e294 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e27d:	83 ec 04             	sub    $0x4,%esp
f012e280:	68 3c c6 13 f0       	push   $0xf013c63c
f012e285:	68 40 11 00 00       	push   $0x1140
f012e28a:	68 5a b3 13 f0       	push   $0xf013b35a
f012e28f:	e8 71 1f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e294:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e297:	e8 01 e9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e29c:	29 c3                	sub    %eax,%ebx
f012e29e:	89 d8                	mov    %ebx,%eax
f012e2a0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e2a5:	74 17                	je     f012e2be <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e2a7:	83 ec 04             	sub    $0x4,%esp
f012e2aa:	68 6e c6 13 f0       	push   $0xf013c66e
f012e2af:	68 42 11 00 00       	push   $0x1142
f012e2b4:	68 5a b3 13 f0       	push   $0xf013b35a
f012e2b9:	e8 47 1f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e2be:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e2c5:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e2c8:	e8 d0 e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e2cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e2d0:	83 ec 08             	sub    $0x8,%esp
f012e2d3:	68 00 fc 1f 00       	push   $0x1ffc00
f012e2d8:	6a 00                	push   $0x0
f012e2da:	e8 66 98 fd ff       	call   f0107b45 <krealloc>
f012e2df:	83 c4 10             	add    $0x10,%esp
f012e2e2:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e2e8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e2ee:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e2f3:	77 17                	ja     f012e30c <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e2f5:	83 ec 04             	sub    $0x4,%esp
f012e2f8:	68 00 c6 13 f0       	push   $0xf013c600
f012e2fd:	68 49 11 00 00       	push   $0x1149
f012e302:	68 5a b3 13 f0       	push   $0xf013b35a
f012e307:	e8 f9 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e30c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e312:	89 c1                	mov    %eax,%ecx
f012e314:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e31b:	10 00 00 
f012e31e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e324:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e329:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e32f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e335:	ba 00 00 00 00       	mov    $0x0,%edx
f012e33a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e340:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e346:	29 d0                	sub    %edx,%eax
f012e348:	89 c3                	mov    %eax,%ebx
f012e34a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e351:	10 00 00 
f012e354:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e359:	0f b6 d0             	movzbl %al,%edx
f012e35c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e362:	01 d0                	add    %edx,%eax
f012e364:	48                   	dec    %eax
f012e365:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e36b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e371:	ba 00 00 00 00       	mov    $0x0,%edx
f012e376:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e37c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e382:	29 d0                	sub    %edx,%eax
f012e384:	01 c3                	add    %eax,%ebx
f012e386:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e38d:	10 00 00 
f012e390:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e395:	0f b6 c0             	movzbl %al,%eax
f012e398:	c1 e0 04             	shl    $0x4,%eax
f012e39b:	89 c2                	mov    %eax,%edx
f012e39d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e3a3:	01 d0                	add    %edx,%eax
f012e3a5:	48                   	dec    %eax
f012e3a6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e3ac:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3b7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e3bd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e3c3:	29 d0                	sub    %edx,%eax
f012e3c5:	01 d8                	add    %ebx,%eax
f012e3c7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e3cc:	39 c1                	cmp    %eax,%ecx
f012e3ce:	74 17                	je     f012e3e7 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e3d0:	83 ec 04             	sub    $0x4,%esp
f012e3d3:	68 3c c6 13 f0       	push   $0xf013c63c
f012e3d8:	68 4b 11 00 00       	push   $0x114b
f012e3dd:	68 5a b3 13 f0       	push   $0xf013b35a
f012e3e2:	e8 1e 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e3e7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e3ea:	e8 ae e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e3ef:	29 c3                	sub    %eax,%ebx
f012e3f1:	89 d8                	mov    %ebx,%eax
f012e3f3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e3f8:	74 17                	je     f012e411 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e3fa:	83 ec 04             	sub    $0x4,%esp
f012e3fd:	68 6e c6 13 f0       	push   $0xf013c66e
f012e402:	68 4d 11 00 00       	push   $0x114d
f012e407:	68 5a b3 13 f0       	push   $0xf013b35a
f012e40c:	e8 f4 1d fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e411:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e418:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e41b:	e8 7d e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e420:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e423:	83 ec 08             	sub    $0x8,%esp
f012e426:	68 00 fc 1f 00       	push   $0x1ffc00
f012e42b:	6a 00                	push   $0x0
f012e42d:	e8 13 97 fd ff       	call   f0107b45 <krealloc>
f012e432:	83 c4 10             	add    $0x10,%esp
f012e435:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e43b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e441:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e446:	77 17                	ja     f012e45f <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e448:	83 ec 04             	sub    $0x4,%esp
f012e44b:	68 00 c6 13 f0       	push   $0xf013c600
f012e450:	68 54 11 00 00       	push   $0x1154
f012e455:	68 5a b3 13 f0       	push   $0xf013b35a
f012e45a:	e8 a6 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e45f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e465:	89 c1                	mov    %eax,%ecx
f012e467:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e46e:	10 00 00 
f012e471:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e477:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e47c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e482:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e488:	ba 00 00 00 00       	mov    $0x0,%edx
f012e48d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e493:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e499:	29 d0                	sub    %edx,%eax
f012e49b:	89 c3                	mov    %eax,%ebx
f012e49d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e4a4:	10 00 00 
f012e4a7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e4ac:	0f b6 d0             	movzbl %al,%edx
f012e4af:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e4b5:	01 d0                	add    %edx,%eax
f012e4b7:	48                   	dec    %eax
f012e4b8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e4be:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e4c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4c9:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e4cf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e4d5:	29 d0                	sub    %edx,%eax
f012e4d7:	01 c3                	add    %eax,%ebx
f012e4d9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e4e0:	10 00 00 
f012e4e3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e4e8:	0f b6 c0             	movzbl %al,%eax
f012e4eb:	c1 e0 04             	shl    $0x4,%eax
f012e4ee:	89 c2                	mov    %eax,%edx
f012e4f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e4f6:	01 d0                	add    %edx,%eax
f012e4f8:	48                   	dec    %eax
f012e4f9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e4ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e505:	ba 00 00 00 00       	mov    $0x0,%edx
f012e50a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e510:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e516:	29 d0                	sub    %edx,%eax
f012e518:	01 d8                	add    %ebx,%eax
f012e51a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e51f:	39 c1                	cmp    %eax,%ecx
f012e521:	74 17                	je     f012e53a <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e523:	83 ec 04             	sub    $0x4,%esp
f012e526:	68 3c c6 13 f0       	push   $0xf013c63c
f012e52b:	68 56 11 00 00       	push   $0x1156
f012e530:	68 5a b3 13 f0       	push   $0xf013b35a
f012e535:	e8 cb 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e53a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e53d:	e8 5b e6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e542:	29 c3                	sub    %eax,%ebx
f012e544:	89 d8                	mov    %ebx,%eax
f012e546:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e54b:	74 17                	je     f012e564 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e54d:	83 ec 04             	sub    $0x4,%esp
f012e550:	68 6e c6 13 f0       	push   $0xf013c66e
f012e555:	68 58 11 00 00       	push   $0x1158
f012e55a:	68 5a b3 13 f0       	push   $0xf013b35a
f012e55f:	e8 a1 1c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e564:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e56b:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e56e:	e8 2a e6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e573:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e576:	83 ec 08             	sub    $0x8,%esp
f012e579:	68 00 fc 2f 00       	push   $0x2ffc00
f012e57e:	6a 00                	push   $0x0
f012e580:	e8 c0 95 fd ff       	call   f0107b45 <krealloc>
f012e585:	83 c4 10             	add    $0x10,%esp
f012e588:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e58e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e594:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e599:	77 17                	ja     f012e5b2 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e59b:	83 ec 04             	sub    $0x4,%esp
f012e59e:	68 00 c6 13 f0       	push   $0xf013c600
f012e5a3:	68 5f 11 00 00       	push   $0x115f
f012e5a8:	68 5a b3 13 f0       	push   $0xf013b35a
f012e5ad:	e8 53 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e5b2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e5b8:	89 c1                	mov    %eax,%ecx
f012e5ba:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e5c1:	10 00 00 
f012e5c4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e5ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5cf:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e5d5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e5db:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5e0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e5e6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e5ec:	29 d0                	sub    %edx,%eax
f012e5ee:	89 c3                	mov    %eax,%ebx
f012e5f0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e5f7:	10 00 00 
f012e5fa:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e5ff:	0f b6 d0             	movzbl %al,%edx
f012e602:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e608:	01 d0                	add    %edx,%eax
f012e60a:	48                   	dec    %eax
f012e60b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e611:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e617:	ba 00 00 00 00       	mov    $0x0,%edx
f012e61c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e622:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e628:	29 d0                	sub    %edx,%eax
f012e62a:	01 c3                	add    %eax,%ebx
f012e62c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e633:	10 00 00 
f012e636:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e63b:	0f b6 c0             	movzbl %al,%eax
f012e63e:	c1 e0 04             	shl    $0x4,%eax
f012e641:	89 c2                	mov    %eax,%edx
f012e643:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e649:	01 d0                	add    %edx,%eax
f012e64b:	48                   	dec    %eax
f012e64c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e652:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e658:	ba 00 00 00 00       	mov    $0x0,%edx
f012e65d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e663:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e669:	29 d0                	sub    %edx,%eax
f012e66b:	01 d8                	add    %ebx,%eax
f012e66d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e672:	39 c1                	cmp    %eax,%ecx
f012e674:	74 17                	je     f012e68d <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e676:	83 ec 04             	sub    $0x4,%esp
f012e679:	68 3c c6 13 f0       	push   $0xf013c63c
f012e67e:	68 61 11 00 00       	push   $0x1161
f012e683:	68 5a b3 13 f0       	push   $0xf013b35a
f012e688:	e8 78 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e68d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e690:	e8 08 e5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e695:	29 c3                	sub    %eax,%ebx
f012e697:	89 d8                	mov    %ebx,%eax
f012e699:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e69e:	74 17                	je     f012e6b7 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e6a0:	83 ec 04             	sub    $0x4,%esp
f012e6a3:	68 a4 b7 13 f0       	push   $0xf013b7a4
f012e6a8:	68 63 11 00 00       	push   $0x1163
f012e6ad:	68 5a b3 13 f0       	push   $0xf013b35a
f012e6b2:	e8 4e 1b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e6b7:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e6be:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e6c1:	e8 d7 e4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e6c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e6c9:	83 ec 08             	sub    $0x8,%esp
f012e6cc:	68 00 fc 2f 00       	push   $0x2ffc00
f012e6d1:	6a 00                	push   $0x0
f012e6d3:	e8 6d 94 fd ff       	call   f0107b45 <krealloc>
f012e6d8:	83 c4 10             	add    $0x10,%esp
f012e6db:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e6e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e6e7:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e6ec:	77 17                	ja     f012e705 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e6ee:	83 ec 04             	sub    $0x4,%esp
f012e6f1:	68 00 c6 13 f0       	push   $0xf013c600
f012e6f6:	68 6a 11 00 00       	push   $0x116a
f012e6fb:	68 5a b3 13 f0       	push   $0xf013b35a
f012e700:	e8 00 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e705:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e70b:	89 c1                	mov    %eax,%ecx
f012e70d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e714:	10 00 00 
f012e717:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e71d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e722:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e728:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e72e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e733:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e739:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e73f:	29 d0                	sub    %edx,%eax
f012e741:	89 c3                	mov    %eax,%ebx
f012e743:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e74a:	10 00 00 
f012e74d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e752:	0f b6 d0             	movzbl %al,%edx
f012e755:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e75b:	01 d0                	add    %edx,%eax
f012e75d:	48                   	dec    %eax
f012e75e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e764:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e76a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e76f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e775:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e77b:	29 d0                	sub    %edx,%eax
f012e77d:	01 c3                	add    %eax,%ebx
f012e77f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e786:	10 00 00 
f012e789:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e78e:	0f b6 c0             	movzbl %al,%eax
f012e791:	c1 e0 04             	shl    $0x4,%eax
f012e794:	89 c2                	mov    %eax,%edx
f012e796:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e79c:	01 d0                	add    %edx,%eax
f012e79e:	48                   	dec    %eax
f012e79f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e7a5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7b0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e7b6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e7bc:	29 d0                	sub    %edx,%eax
f012e7be:	01 d8                	add    %ebx,%eax
f012e7c0:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e7c5:	39 c1                	cmp    %eax,%ecx
f012e7c7:	74 17                	je     f012e7e0 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e7c9:	83 ec 04             	sub    $0x4,%esp
f012e7cc:	68 3c c6 13 f0       	push   $0xf013c63c
f012e7d1:	68 6c 11 00 00       	push   $0x116c
f012e7d6:	68 5a b3 13 f0       	push   $0xf013b35a
f012e7db:	e8 25 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e7e0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e7e3:	e8 b5 e3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e7e8:	29 c3                	sub    %eax,%ebx
f012e7ea:	89 d8                	mov    %ebx,%eax
f012e7ec:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e7f1:	74 17                	je     f012e80a <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e7f3:	83 ec 04             	sub    $0x4,%esp
f012e7f6:	68 6e c6 13 f0       	push   $0xf013c66e
f012e7fb:	68 6e 11 00 00       	push   $0x116e
f012e800:	68 5a b3 13 f0       	push   $0xf013b35a
f012e805:	e8 fb 19 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e80a:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e811:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e814:	e8 84 e3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e819:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e81c:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e823:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e826:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e82c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e832:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e838:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e83b:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e83d:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e843:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e849:	01 c2                	add    %eax,%edx
f012e84b:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e84e:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e850:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e856:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e85c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e863:	eb 11                	jmp    f012e876 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e865:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e868:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e86e:	01 d0                	add    %edx,%eax
f012e870:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e873:	ff 45 f4             	incl   -0xc(%ebp)
f012e876:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e87c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e87f:	7d e4                	jge    f012e865 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e881:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e887:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e88d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e893:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e899:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e89f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e8a6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e8ac:	01 d0                	add    %edx,%eax
f012e8ae:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e8b4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e8ba:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e8c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e8c7:	eb 1b                	jmp    f012e8e4 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e8c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e8cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e8d3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e8d9:	01 d0                	add    %edx,%eax
f012e8db:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e8e1:	ff 45 f0             	incl   -0x10(%ebp)
f012e8e4:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e8ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e8ed:	7d da                	jge    f012e8c9 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e8ef:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e8f5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e8fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e902:	eb 17                	jmp    f012e91b <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e907:	01 c0                	add    %eax,%eax
f012e909:	89 c2                	mov    %eax,%edx
f012e90b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e911:	01 d0                	add    %edx,%eax
f012e913:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e918:	ff 45 ec             	incl   -0x14(%ebp)
f012e91b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e921:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e924:	7d de                	jge    f012e904 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e926:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e92c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e932:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e938:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e93d:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e943:	01 c0                	add    %eax,%eax
f012e945:	89 c2                	mov    %eax,%edx
f012e947:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e94d:	01 d0                	add    %edx,%eax
f012e94f:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e954:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e95a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e960:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e967:	eb 49                	jmp    f012e9b2 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e969:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e96c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e973:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e979:	01 d0                	add    %edx,%eax
f012e97b:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e97e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e981:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e988:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e98e:	01 d0                	add    %edx,%eax
f012e990:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e996:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e999:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e9a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9a6:	01 d0                	add    %edx,%eax
f012e9a8:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e9af:	ff 45 e8             	incl   -0x18(%ebp)
f012e9b2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e9b8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e9bb:	7d ac                	jge    f012e969 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e9bd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e9c3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e9c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9cf:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e9d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e9de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9e4:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e9eb:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e9f1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e9f8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9fe:	01 d0                	add    %edx,%eax
f012ea00:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ea03:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ea09:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ea10:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ea16:	01 d0                	add    %edx,%eax
f012ea18:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ea1e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ea24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ea2b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ea31:	01 d0                	add    %edx,%eax
f012ea33:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ea3a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ea40:	8a 00                	mov    (%eax),%al
f012ea42:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ea45:	75 17                	jne    f012ea5e <test_krealloc_BF+0xd04>
f012ea47:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ea4d:	89 c2                	mov    %eax,%edx
f012ea4f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ea55:	01 d0                	add    %edx,%eax
f012ea57:	8a 00                	mov    (%eax),%al
f012ea59:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ea5c:	74 17                	je     f012ea75 <test_krealloc_BF+0xd1b>
			panic(
f012ea5e:	83 ec 04             	sub    $0x4,%esp
f012ea61:	68 8c c6 13 f0       	push   $0xf013c68c
f012ea66:	68 b1 11 00 00       	push   $0x11b1
f012ea6b:	68 5a b3 13 f0       	push   $0xf013b35a
f012ea70:	e8 90 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ea75:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea7b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ea81:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea87:	8a 00                	mov    (%eax),%al
f012ea89:	3c 02                	cmp    $0x2,%al
f012ea8b:	75 16                	jne    f012eaa3 <test_krealloc_BF+0xd49>
f012ea8d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ea93:	89 c2                	mov    %eax,%edx
f012ea95:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea9b:	01 d0                	add    %edx,%eax
f012ea9d:	8a 00                	mov    (%eax),%al
f012ea9f:	3c 02                	cmp    $0x2,%al
f012eaa1:	74 20                	je     f012eac3 <test_krealloc_BF+0xd69>
			panic(
f012eaa3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eaa9:	8a 00                	mov    (%eax),%al
f012eaab:	0f be c0             	movsbl %al,%eax
f012eaae:	50                   	push   %eax
f012eaaf:	68 cc c6 13 f0       	push   $0xf013c6cc
f012eab4:	68 b7 11 00 00       	push   $0x11b7
f012eab9:	68 5a b3 13 f0       	push   $0xf013b35a
f012eabe:	e8 42 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012eac3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eac9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012eacf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ead5:	8b 00                	mov    (%eax),%eax
f012ead7:	83 f8 03             	cmp    $0x3,%eax
f012eada:	75 1c                	jne    f012eaf8 <test_krealloc_BF+0xd9e>
f012eadc:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012eae2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eae9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eaef:	01 d0                	add    %edx,%eax
f012eaf1:	8b 00                	mov    (%eax),%eax
f012eaf3:	83 f8 03             	cmp    $0x3,%eax
f012eaf6:	74 17                	je     f012eb0f <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012eaf8:	83 ec 04             	sub    $0x4,%esp
f012eafb:	68 18 c7 13 f0       	push   $0xf013c718
f012eb00:	68 bb 11 00 00       	push   $0x11bb
f012eb05:	68 5a b3 13 f0       	push   $0xf013b35a
f012eb0a:	e8 f6 16 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012eb0f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eb15:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012eb1b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eb21:	8b 00                	mov    (%eax),%eax
f012eb23:	83 f8 04             	cmp    $0x4,%eax
f012eb26:	75 1c                	jne    f012eb44 <test_krealloc_BF+0xdea>
f012eb28:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012eb2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eb35:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eb3b:	01 d0                	add    %edx,%eax
f012eb3d:	8b 00                	mov    (%eax),%eax
f012eb3f:	83 f8 04             	cmp    $0x4,%eax
f012eb42:	74 17                	je     f012eb5b <test_krealloc_BF+0xe01>
			panic(
f012eb44:	83 ec 04             	sub    $0x4,%esp
f012eb47:	68 8c c6 13 f0       	push   $0xf013c68c
f012eb4c:	68 c0 11 00 00       	push   $0x11c0
f012eb51:	68 5a b3 13 f0       	push   $0xf013b35a
f012eb56:	e8 aa 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012eb5b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eb61:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012eb67:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb6d:	66 8b 00             	mov    (%eax),%ax
f012eb70:	66 83 f8 05          	cmp    $0x5,%ax
f012eb74:	75 1b                	jne    f012eb91 <test_krealloc_BF+0xe37>
f012eb76:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eb7c:	01 c0                	add    %eax,%eax
f012eb7e:	89 c2                	mov    %eax,%edx
f012eb80:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb86:	01 d0                	add    %edx,%eax
f012eb88:	66 8b 00             	mov    (%eax),%ax
f012eb8b:	66 83 f8 05          	cmp    $0x5,%ax
f012eb8f:	74 17                	je     f012eba8 <test_krealloc_BF+0xe4e>
			panic(
f012eb91:	83 ec 04             	sub    $0x4,%esp
f012eb94:	68 8c c6 13 f0       	push   $0xf013c68c
f012eb99:	68 c5 11 00 00       	push   $0x11c5
f012eb9e:	68 5a b3 13 f0       	push   $0xf013b35a
f012eba3:	e8 5d 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012eba8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ebae:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ebb4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ebba:	66 8b 00             	mov    (%eax),%ax
f012ebbd:	66 83 f8 06          	cmp    $0x6,%ax
f012ebc1:	75 1b                	jne    f012ebde <test_krealloc_BF+0xe84>
f012ebc3:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ebc9:	01 c0                	add    %eax,%eax
f012ebcb:	89 c2                	mov    %eax,%edx
f012ebcd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ebd3:	01 d0                	add    %edx,%eax
f012ebd5:	66 8b 00             	mov    (%eax),%ax
f012ebd8:	66 83 f8 06          	cmp    $0x6,%ax
f012ebdc:	74 17                	je     f012ebf5 <test_krealloc_BF+0xe9b>
			panic(
f012ebde:	83 ec 04             	sub    $0x4,%esp
f012ebe1:	68 8c c6 13 f0       	push   $0xf013c68c
f012ebe6:	68 ca 11 00 00       	push   $0x11ca
f012ebeb:	68 5a b3 13 f0       	push   $0xf013b35a
f012ebf0:	e8 10 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ebf5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ebfb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ec01:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec07:	8a 00                	mov    (%eax),%al
f012ec09:	3c 07                	cmp    $0x7,%al
f012ec0b:	75 1b                	jne    f012ec28 <test_krealloc_BF+0xece>
f012ec0d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec1a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec20:	01 d0                	add    %edx,%eax
f012ec22:	8a 00                	mov    (%eax),%al
f012ec24:	3c 07                	cmp    $0x7,%al
f012ec26:	74 17                	je     f012ec3f <test_krealloc_BF+0xee5>
			panic(
f012ec28:	83 ec 04             	sub    $0x4,%esp
f012ec2b:	68 8c c6 13 f0       	push   $0xf013c68c
f012ec30:	68 cf 11 00 00       	push   $0x11cf
f012ec35:	68 5a b3 13 f0       	push   $0xf013b35a
f012ec3a:	e8 c6 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ec3f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec45:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ec49:	66 83 f8 07          	cmp    $0x7,%ax
f012ec4d:	75 1f                	jne    f012ec6e <test_krealloc_BF+0xf14>
f012ec4f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec55:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec5c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec62:	01 d0                	add    %edx,%eax
f012ec64:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ec68:	66 83 f8 07          	cmp    $0x7,%ax
f012ec6c:	74 17                	je     f012ec85 <test_krealloc_BF+0xf2b>
			panic(
f012ec6e:	83 ec 04             	sub    $0x4,%esp
f012ec71:	68 8c c6 13 f0       	push   $0xf013c68c
f012ec76:	68 d2 11 00 00       	push   $0x11d2
f012ec7b:	68 5a b3 13 f0       	push   $0xf013b35a
f012ec80:	e8 80 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ec85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec8b:	8b 40 04             	mov    0x4(%eax),%eax
f012ec8e:	83 f8 07             	cmp    $0x7,%eax
f012ec91:	75 1d                	jne    f012ecb0 <test_krealloc_BF+0xf56>
f012ec93:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eca0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eca6:	01 d0                	add    %edx,%eax
f012eca8:	8b 40 04             	mov    0x4(%eax),%eax
f012ecab:	83 f8 07             	cmp    $0x7,%eax
f012ecae:	74 17                	je     f012ecc7 <test_krealloc_BF+0xf6d>
			panic(
f012ecb0:	83 ec 04             	sub    $0x4,%esp
f012ecb3:	68 8c c6 13 f0       	push   $0xf013c68c
f012ecb8:	68 d5 11 00 00       	push   $0x11d5
f012ecbd:	68 5a b3 13 f0       	push   $0xf013b35a
f012ecc2:	e8 3e 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ecc7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eccd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ecd3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecd9:	8a 00                	mov    (%eax),%al
f012ecdb:	3c 08                	cmp    $0x8,%al
f012ecdd:	75 1b                	jne    f012ecfa <test_krealloc_BF+0xfa0>
f012ecdf:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ece5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ecec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecf2:	01 d0                	add    %edx,%eax
f012ecf4:	8a 00                	mov    (%eax),%al
f012ecf6:	3c 08                	cmp    $0x8,%al
f012ecf8:	74 17                	je     f012ed11 <test_krealloc_BF+0xfb7>
			panic(
f012ecfa:	83 ec 04             	sub    $0x4,%esp
f012ecfd:	68 8c c6 13 f0       	push   $0xf013c68c
f012ed02:	68 da 11 00 00       	push   $0x11da
f012ed07:	68 5a b3 13 f0       	push   $0xf013b35a
f012ed0c:	e8 f4 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ed11:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed17:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ed1b:	66 83 f8 08          	cmp    $0x8,%ax
f012ed1f:	75 1f                	jne    f012ed40 <test_krealloc_BF+0xfe6>
f012ed21:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed27:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed2e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed34:	01 d0                	add    %edx,%eax
f012ed36:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ed3a:	66 83 f8 08          	cmp    $0x8,%ax
f012ed3e:	74 17                	je     f012ed57 <test_krealloc_BF+0xffd>
			panic(
f012ed40:	83 ec 04             	sub    $0x4,%esp
f012ed43:	68 8c c6 13 f0       	push   $0xf013c68c
f012ed48:	68 dd 11 00 00       	push   $0x11dd
f012ed4d:	68 5a b3 13 f0       	push   $0xf013b35a
f012ed52:	e8 ae 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ed57:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed5d:	8b 40 04             	mov    0x4(%eax),%eax
f012ed60:	83 f8 08             	cmp    $0x8,%eax
f012ed63:	75 1d                	jne    f012ed82 <test_krealloc_BF+0x1028>
f012ed65:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed72:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed78:	01 d0                	add    %edx,%eax
f012ed7a:	8b 40 04             	mov    0x4(%eax),%eax
f012ed7d:	83 f8 08             	cmp    $0x8,%eax
f012ed80:	74 17                	je     f012ed99 <test_krealloc_BF+0x103f>
			panic(
f012ed82:	83 ec 04             	sub    $0x4,%esp
f012ed85:	68 8c c6 13 f0       	push   $0xf013c68c
f012ed8a:	68 e0 11 00 00       	push   $0x11e0
f012ed8f:	68 5a b3 13 f0       	push   $0xf013b35a
f012ed94:	e8 6c 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ed99:	e8 ff dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed9e:	89 c2                	mov    %eax,%edx
f012eda0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eda3:	39 c2                	cmp    %eax,%edx
f012eda5:	74 17                	je     f012edbe <test_krealloc_BF+0x1064>
			panic(
f012eda7:	83 ec 04             	sub    $0x4,%esp
f012edaa:	68 4c c7 13 f0       	push   $0xf013c74c
f012edaf:	68 e4 11 00 00       	push   $0x11e4
f012edb4:	68 5a b3 13 f0       	push   $0xf013b35a
f012edb9:	e8 47 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012edbe:	83 ec 0c             	sub    $0xc,%esp
f012edc1:	68 98 c7 13 f0       	push   $0xf013c798
f012edc6:	e8 43 1f fd ff       	call   f0100d0e <cprintf>
f012edcb:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012edce:	e8 ca dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012edd3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012edd6:	e8 ed 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eddb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ede1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ede7:	83 ec 08             	sub    $0x8,%esp
f012edea:	6a 00                	push   $0x0
f012edec:	50                   	push   %eax
f012eded:	e8 53 8d fd ff       	call   f0107b45 <krealloc>
f012edf2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012edf5:	e8 ce 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012edfa:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ee00:	74 17                	je     f012ee19 <test_krealloc_BF+0x10bf>
			panic(
f012ee02:	83 ec 04             	sub    $0x4,%esp
f012ee05:	68 bc c7 13 f0       	push   $0xf013c7bc
f012ee0a:	68 f1 11 00 00       	push   $0x11f1
f012ee0f:	68 5a b3 13 f0       	push   $0xf013b35a
f012ee14:	e8 ec 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ee19:	e8 7f dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee1e:	89 c2                	mov    %eax,%edx
f012ee20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee23:	29 c2                	sub    %eax,%edx
f012ee25:	89 d0                	mov    %edx,%eax
f012ee27:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ee2c:	74 17                	je     f012ee45 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ee2e:	83 ec 04             	sub    $0x4,%esp
f012ee31:	68 30 c8 13 f0       	push   $0xf013c830
f012ee36:	68 f3 11 00 00       	push   $0x11f3
f012ee3b:	68 5a b3 13 f0       	push   $0xf013b35a
f012ee40:	e8 c0 13 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ee45:	e8 53 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ee4d:	e8 76 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ee52:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ee58:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ee5e:	83 ec 08             	sub    $0x8,%esp
f012ee61:	6a 00                	push   $0x0
f012ee63:	50                   	push   %eax
f012ee64:	e8 dc 8c fd ff       	call   f0107b45 <krealloc>
f012ee69:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ee6c:	e8 57 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ee71:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ee77:	74 17                	je     f012ee90 <test_krealloc_BF+0x1136>
			panic(
f012ee79:	83 ec 04             	sub    $0x4,%esp
f012ee7c:	68 bc c7 13 f0       	push   $0xf013c7bc
f012ee81:	68 fc 11 00 00       	push   $0x11fc
f012ee86:	68 5a b3 13 f0       	push   $0xf013b35a
f012ee8b:	e8 75 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ee90:	e8 08 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee95:	89 c2                	mov    %eax,%edx
f012ee97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee9a:	29 c2                	sub    %eax,%edx
f012ee9c:	89 d0                	mov    %edx,%eax
f012ee9e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012eea3:	74 17                	je     f012eebc <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012eea5:	83 ec 04             	sub    $0x4,%esp
f012eea8:	68 30 c8 13 f0       	push   $0xf013c830
f012eead:	68 fe 11 00 00       	push   $0x11fe
f012eeb2:	68 5a b3 13 f0       	push   $0xf013b35a
f012eeb7:	e8 49 13 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012eebc:	e8 dc dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eec1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012eec4:	e8 ff 4e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eec9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012eecf:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eed5:	83 ec 08             	sub    $0x8,%esp
f012eed8:	6a 00                	push   $0x0
f012eeda:	50                   	push   %eax
f012eedb:	e8 65 8c fd ff       	call   f0107b45 <krealloc>
f012eee0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eee3:	e8 e0 4e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eee8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eeee:	74 17                	je     f012ef07 <test_krealloc_BF+0x11ad>
			panic(
f012eef0:	83 ec 04             	sub    $0x4,%esp
f012eef3:	68 74 b3 13 f0       	push   $0xf013b374
f012eef8:	68 06 12 00 00       	push   $0x1206
f012eefd:	68 5a b3 13 f0       	push   $0xf013b35a
f012ef02:	e8 fe 12 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ef07:	e8 91 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ef0c:	89 c2                	mov    %eax,%edx
f012ef0e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef11:	29 c2                	sub    %eax,%edx
f012ef13:	89 d0                	mov    %edx,%eax
f012ef15:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ef1a:	74 17                	je     f012ef33 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012ef1c:	83 ec 04             	sub    $0x4,%esp
f012ef1f:	68 30 c8 13 f0       	push   $0xf013c830
f012ef24:	68 08 12 00 00       	push   $0x1208
f012ef29:	68 5a b3 13 f0       	push   $0xf013b35a
f012ef2e:	e8 d2 12 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ef33:	e8 65 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ef38:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ef3b:	e8 88 4e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ef40:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ef46:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ef4c:	83 ec 08             	sub    $0x8,%esp
f012ef4f:	6a 00                	push   $0x0
f012ef51:	50                   	push   %eax
f012ef52:	e8 ee 8b fd ff       	call   f0107b45 <krealloc>
f012ef57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ef5a:	e8 69 4e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ef5f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ef65:	74 17                	je     f012ef7e <test_krealloc_BF+0x1224>
			panic(
f012ef67:	83 ec 04             	sub    $0x4,%esp
f012ef6a:	68 bc c7 13 f0       	push   $0xf013c7bc
f012ef6f:	68 10 12 00 00       	push   $0x1210
f012ef74:	68 5a b3 13 f0       	push   $0xf013b35a
f012ef79:	e8 87 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ef7e:	e8 1a dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ef83:	89 c2                	mov    %eax,%edx
f012ef85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef88:	29 c2                	sub    %eax,%edx
f012ef8a:	89 d0                	mov    %edx,%eax
f012ef8c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ef91:	74 17                	je     f012efaa <test_krealloc_BF+0x1250>
			panic(
f012ef93:	83 ec 04             	sub    $0x4,%esp
f012ef96:	68 64 c8 13 f0       	push   $0xf013c864
f012ef9b:	68 13 12 00 00       	push   $0x1213
f012efa0:	68 5a b3 13 f0       	push   $0xf013b35a
f012efa5:	e8 5b 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012efaa:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012efb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012efb8:	eb 48                	jmp    f012f002 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012efba:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012efbd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012efc2:	83 ec 04             	sub    $0x4,%esp
f012efc5:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012efcb:	51                   	push   %ecx
f012efcc:	52                   	push   %edx
f012efcd:	50                   	push   %eax
f012efce:	e8 de 7a fd ff       	call   f0106ab1 <get_page_table>
f012efd3:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012efd6:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012efdc:	85 c0                	test   %eax,%eax
f012efde:	75 17                	jne    f012eff7 <test_krealloc_BF+0x129d>
					panic(
f012efe0:	83 ec 04             	sub    $0x4,%esp
f012efe3:	68 5c bc 13 f0       	push   $0xf013bc5c
f012efe8:	68 1f 12 00 00       	push   $0x121f
f012efed:	68 5a b3 13 f0       	push   $0xf013b35a
f012eff2:	e8 0e 12 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012eff7:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012effe:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f002:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f006:	78 b2                	js     f012efba <test_krealloc_BF+0x1260>
f012f008:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f00c:	7f 09                	jg     f012f017 <test_krealloc_BF+0x12bd>
f012f00e:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f015:	76 a3                	jbe    f012efba <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f017:	83 ec 0c             	sub    $0xc,%esp
f012f01a:	68 a3 c8 13 f0       	push   $0xf013c8a3
f012f01f:	e8 ea 1c fd ff       	call   f0100d0e <cprintf>
f012f024:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f027:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f02d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f033:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f03a:	eb 21                	jmp    f012f05d <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f03c:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f042:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f045:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f04b:	01 c8                	add    %ecx,%eax
f012f04d:	8a 00                	mov    (%eax),%al
f012f04f:	0f be c0             	movsbl %al,%eax
f012f052:	01 d0                	add    %edx,%eax
f012f054:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f05a:	ff 45 dc             	incl   -0x24(%ebp)
f012f05d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f063:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f066:	7d d4                	jge    f012f03c <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f068:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f06e:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f074:	42                   	inc    %edx
f012f075:	01 d2                	add    %edx,%edx
f012f077:	39 d0                	cmp    %edx,%eax
f012f079:	74 17                	je     f012f092 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f07b:	83 ec 04             	sub    $0x4,%esp
f012f07e:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f083:	68 31 12 00 00       	push   $0x1231
f012f088:	68 5a b3 13 f0       	push   $0xf013b35a
f012f08d:	e8 73 11 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f092:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f098:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f09e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f0a5:	eb 25                	jmp    f012f0cc <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f0a7:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f0ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f0b0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f0b7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f0bd:	01 c8                	add    %ecx,%eax
f012f0bf:	8b 00                	mov    (%eax),%eax
f012f0c1:	01 d0                	add    %edx,%eax
f012f0c3:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f0c9:	ff 45 dc             	incl   -0x24(%ebp)
f012f0cc:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f0d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f0d5:	7d d0                	jge    f012f0a7 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f0d7:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f0dd:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f0e3:	42                   	inc    %edx
f012f0e4:	c1 e2 02             	shl    $0x2,%edx
f012f0e7:	39 d0                	cmp    %edx,%eax
f012f0e9:	74 17                	je     f012f102 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f0eb:	83 ec 04             	sub    $0x4,%esp
f012f0ee:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f0f3:	68 3b 12 00 00       	push   $0x123b
f012f0f8:	68 5a b3 13 f0       	push   $0xf013b35a
f012f0fd:	e8 03 11 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f102:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f108:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f10e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f115:	eb 24                	jmp    f012f13b <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f117:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f11d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f120:	01 c0                	add    %eax,%eax
f012f122:	89 c1                	mov    %eax,%ecx
f012f124:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f12a:	01 c8                	add    %ecx,%eax
f012f12c:	66 8b 00             	mov    (%eax),%ax
f012f12f:	98                   	cwtl   
f012f130:	01 d0                	add    %edx,%eax
f012f132:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f138:	ff 45 dc             	incl   -0x24(%ebp)
f012f13b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f141:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f144:	7d d1                	jge    f012f117 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f146:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f14c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f152:	8d 48 01             	lea    0x1(%eax),%ecx
f012f155:	89 c8                	mov    %ecx,%eax
f012f157:	c1 e0 02             	shl    $0x2,%eax
f012f15a:	01 c8                	add    %ecx,%eax
f012f15c:	39 c2                	cmp    %eax,%edx
f012f15e:	74 17                	je     f012f177 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f160:	83 ec 04             	sub    $0x4,%esp
f012f163:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f168:	68 45 12 00 00       	push   $0x1245
f012f16d:	68 5a b3 13 f0       	push   $0xf013b35a
f012f172:	e8 8e 10 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f177:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f17d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f183:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f18a:	eb 70                	jmp    f012f1fc <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f18c:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f192:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f195:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f19c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1a2:	01 c8                	add    %ecx,%eax
f012f1a4:	8a 00                	mov    (%eax),%al
f012f1a6:	0f be c0             	movsbl %al,%eax
f012f1a9:	01 d0                	add    %edx,%eax
f012f1ab:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f1b1:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f1b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f1ba:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f1c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1c7:	01 c8                	add    %ecx,%eax
f012f1c9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f1cd:	98                   	cwtl   
f012f1ce:	01 d0                	add    %edx,%eax
f012f1d0:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f1d6:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f1dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f1df:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f1e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1ec:	01 c8                	add    %ecx,%eax
f012f1ee:	8b 40 04             	mov    0x4(%eax),%eax
f012f1f1:	01 d0                	add    %edx,%eax
f012f1f3:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f1f9:	ff 45 dc             	incl   -0x24(%ebp)
f012f1fc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f202:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f205:	7d 85                	jge    f012f18c <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f207:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f20d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f213:	8d 50 01             	lea    0x1(%eax),%edx
f012f216:	89 d0                	mov    %edx,%eax
f012f218:	01 c0                	add    %eax,%eax
f012f21a:	01 d0                	add    %edx,%eax
f012f21c:	01 c0                	add    %eax,%eax
f012f21e:	01 d0                	add    %edx,%eax
f012f220:	39 c1                	cmp    %eax,%ecx
f012f222:	75 3a                	jne    f012f25e <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f224:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f22a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f230:	8d 50 01             	lea    0x1(%eax),%edx
f012f233:	89 d0                	mov    %edx,%eax
f012f235:	01 c0                	add    %eax,%eax
f012f237:	01 d0                	add    %edx,%eax
f012f239:	01 c0                	add    %eax,%eax
f012f23b:	01 d0                	add    %edx,%eax
f012f23d:	39 c1                	cmp    %eax,%ecx
f012f23f:	75 1d                	jne    f012f25e <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f241:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f247:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f24d:	8d 50 01             	lea    0x1(%eax),%edx
f012f250:	89 d0                	mov    %edx,%eax
f012f252:	01 c0                	add    %eax,%eax
f012f254:	01 d0                	add    %edx,%eax
f012f256:	01 c0                	add    %eax,%eax
f012f258:	01 d0                	add    %edx,%eax
f012f25a:	39 c1                	cmp    %eax,%ecx
f012f25c:	74 17                	je     f012f275 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f25e:	83 ec 04             	sub    $0x4,%esp
f012f261:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f266:	68 53 12 00 00       	push   $0x1253
f012f26b:	68 5a b3 13 f0       	push   $0xf013b35a
f012f270:	e8 90 0f fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f275:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f27c:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f27f:	e8 19 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f284:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f287:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f28d:	83 ec 08             	sub    $0x8,%esp
f012f290:	68 00 3c 00 00       	push   $0x3c00
f012f295:	50                   	push   %eax
f012f296:	e8 aa 88 fd ff       	call   f0107b45 <krealloc>
f012f29b:	83 c4 10             	add    $0x10,%esp
f012f29e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f2a4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f2aa:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f2af:	77 17                	ja     f012f2c8 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f2b1:	83 ec 04             	sub    $0x4,%esp
f012f2b4:	68 00 c6 13 f0       	push   $0xf013c600
f012f2b9:	68 5f 12 00 00       	push   $0x125f
f012f2be:	68 5a b3 13 f0       	push   $0xf013b35a
f012f2c3:	e8 3d 0f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f2c8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f2ce:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f2d4:	74 17                	je     f012f2ed <test_krealloc_BF+0x1593>
			panic(
f012f2d6:	83 ec 04             	sub    $0x4,%esp
f012f2d9:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012f2de:	68 62 12 00 00       	push   $0x1262
f012f2e3:	68 5a b3 13 f0       	push   $0xf013b35a
f012f2e8:	e8 18 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f2ed:	e8 ab d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f2f2:	89 c2                	mov    %eax,%edx
f012f2f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f2f7:	39 c2                	cmp    %eax,%edx
f012f2f9:	74 17                	je     f012f312 <test_krealloc_BF+0x15b8>
			panic(
f012f2fb:	83 ec 04             	sub    $0x4,%esp
f012f2fe:	68 50 c9 13 f0       	push   $0xf013c950
f012f303:	68 65 12 00 00       	push   $0x1265
f012f308:	68 5a b3 13 f0       	push   $0xf013b35a
f012f30d:	e8 f3 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f312:	e8 86 d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f317:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f31a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f320:	83 ec 08             	sub    $0x8,%esp
f012f323:	68 00 fc 0f 00       	push   $0xffc00
f012f328:	50                   	push   %eax
f012f329:	e8 17 88 fd ff       	call   f0107b45 <krealloc>
f012f32e:	83 c4 10             	add    $0x10,%esp
f012f331:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f337:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f33d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f342:	77 17                	ja     f012f35b <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f344:	83 ec 04             	sub    $0x4,%esp
f012f347:	68 00 c6 13 f0       	push   $0xf013c600
f012f34c:	68 6b 12 00 00       	push   $0x126b
f012f351:	68 5a b3 13 f0       	push   $0xf013b35a
f012f356:	e8 aa 0e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f35b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f361:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f367:	74 17                	je     f012f380 <test_krealloc_BF+0x1626>
			panic(
f012f369:	83 ec 04             	sub    $0x4,%esp
f012f36c:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012f371:	68 6e 12 00 00       	push   $0x126e
f012f376:	68 5a b3 13 f0       	push   $0xf013b35a
f012f37b:	e8 85 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f380:	e8 18 d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f385:	89 c2                	mov    %eax,%edx
f012f387:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f38a:	39 c2                	cmp    %eax,%edx
f012f38c:	74 17                	je     f012f3a5 <test_krealloc_BF+0x164b>
			panic(
f012f38e:	83 ec 04             	sub    $0x4,%esp
f012f391:	68 50 c9 13 f0       	push   $0xf013c950
f012f396:	68 71 12 00 00       	push   $0x1271
f012f39b:	68 5a b3 13 f0       	push   $0xf013b35a
f012f3a0:	e8 60 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f3a5:	e8 f3 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f3aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f3ad:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f3b3:	83 ec 08             	sub    $0x8,%esp
f012f3b6:	68 00 fc 0f 00       	push   $0xffc00
f012f3bb:	50                   	push   %eax
f012f3bc:	e8 84 87 fd ff       	call   f0107b45 <krealloc>
f012f3c1:	83 c4 10             	add    $0x10,%esp
f012f3c4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f3ca:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f3d0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f3d5:	77 17                	ja     f012f3ee <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f3d7:	83 ec 04             	sub    $0x4,%esp
f012f3da:	68 00 c6 13 f0       	push   $0xf013c600
f012f3df:	68 77 12 00 00       	push   $0x1277
f012f3e4:	68 5a b3 13 f0       	push   $0xf013b35a
f012f3e9:	e8 17 0e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f3ee:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f3f4:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f3fa:	74 17                	je     f012f413 <test_krealloc_BF+0x16b9>
			panic(
f012f3fc:	83 ec 04             	sub    $0x4,%esp
f012f3ff:	68 e4 c8 13 f0       	push   $0xf013c8e4
f012f404:	68 7a 12 00 00       	push   $0x127a
f012f409:	68 5a b3 13 f0       	push   $0xf013b35a
f012f40e:	e8 f2 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f413:	e8 85 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f418:	89 c2                	mov    %eax,%edx
f012f41a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f41d:	39 c2                	cmp    %eax,%edx
f012f41f:	74 17                	je     f012f438 <test_krealloc_BF+0x16de>
			panic(
f012f421:	83 ec 04             	sub    $0x4,%esp
f012f424:	68 50 c9 13 f0       	push   $0xf013c950
f012f429:	68 7d 12 00 00       	push   $0x127d
f012f42e:	68 5a b3 13 f0       	push   $0xf013b35a
f012f433:	e8 cd 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f438:	e8 60 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f43d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f440:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f446:	83 ec 08             	sub    $0x8,%esp
f012f449:	68 00 fc 0f 00       	push   $0xffc00
f012f44e:	50                   	push   %eax
f012f44f:	e8 f1 86 fd ff       	call   f0107b45 <krealloc>
f012f454:	83 c4 10             	add    $0x10,%esp
f012f457:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f45d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f463:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f468:	77 17                	ja     f012f481 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f46a:	83 ec 04             	sub    $0x4,%esp
f012f46d:	68 00 c6 13 f0       	push   $0xf013c600
f012f472:	68 85 12 00 00       	push   $0x1285
f012f477:	68 5a b3 13 f0       	push   $0xf013b35a
f012f47c:	e8 84 0d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f481:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f487:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f48d:	74 17                	je     f012f4a6 <test_krealloc_BF+0x174c>
			panic(
f012f48f:	83 ec 04             	sub    $0x4,%esp
f012f492:	68 94 c9 13 f0       	push   $0xf013c994
f012f497:	68 88 12 00 00       	push   $0x1288
f012f49c:	68 5a b3 13 f0       	push   $0xf013b35a
f012f4a1:	e8 5f 0d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f4a6:	e8 f2 d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f4ab:	89 c2                	mov    %eax,%edx
f012f4ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f4b0:	39 c2                	cmp    %eax,%edx
f012f4b2:	74 17                	je     f012f4cb <test_krealloc_BF+0x1771>
			panic(
f012f4b4:	83 ec 04             	sub    $0x4,%esp
f012f4b7:	68 50 c9 13 f0       	push   $0xf013c950
f012f4bc:	68 8b 12 00 00       	push   $0x128b
f012f4c1:	68 5a b3 13 f0       	push   $0xf013b35a
f012f4c6:	e8 3a 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f4cb:	83 ec 0c             	sub    $0xc,%esp
f012f4ce:	68 73 bb 13 f0       	push   $0xf013bb73
f012f4d3:	e8 36 18 fd ff       	call   f0100d0e <cprintf>
f012f4d8:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f4db:	e8 bd d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f4e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f4e3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f4e9:	83 ec 08             	sub    $0x8,%esp
f012f4ec:	68 00 18 10 00       	push   $0x101800
f012f4f1:	50                   	push   %eax
f012f4f2:	e8 4e 86 fd ff       	call   f0107b45 <krealloc>
f012f4f7:	83 c4 10             	add    $0x10,%esp
f012f4fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f4fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f500:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f505:	77 17                	ja     f012f51e <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f507:	83 ec 04             	sub    $0x4,%esp
f012f50a:	68 00 c6 13 f0       	push   $0xf013c600
f012f50f:	68 93 12 00 00       	push   $0x1293
f012f514:	68 5a b3 13 f0       	push   $0xf013b35a
f012f519:	e8 e7 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f51e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f524:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f527:	74 17                	je     f012f540 <test_krealloc_BF+0x17e6>
			panic(
f012f529:	83 ec 04             	sub    $0x4,%esp
f012f52c:	68 f4 c9 13 f0       	push   $0xf013c9f4
f012f531:	68 96 12 00 00       	push   $0x1296
f012f536:	68 5a b3 13 f0       	push   $0xf013b35a
f012f53b:	e8 c5 0c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f540:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f543:	e8 55 d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f548:	29 c3                	sub    %eax,%ebx
f012f54a:	89 d8                	mov    %ebx,%eax
f012f54c:	83 f8 02             	cmp    $0x2,%eax
f012f54f:	74 17                	je     f012f568 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f551:	83 ec 04             	sub    $0x4,%esp
f012f554:	68 70 ca 13 f0       	push   $0xf013ca70
f012f559:	68 98 12 00 00       	push   $0x1298
f012f55e:	68 5a b3 13 f0       	push   $0xf013b35a
f012f563:	e8 9d 0c fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f568:	e8 30 d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f56d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f570:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f576:	83 ec 08             	sub    $0x8,%esp
f012f579:	68 00 fc 3f 00       	push   $0x3ffc00
f012f57e:	50                   	push   %eax
f012f57f:	e8 c1 85 fd ff       	call   f0107b45 <krealloc>
f012f584:	83 c4 10             	add    $0x10,%esp
f012f587:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f58a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f58d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f592:	77 17                	ja     f012f5ab <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f594:	83 ec 04             	sub    $0x4,%esp
f012f597:	68 00 c6 13 f0       	push   $0xf013c600
f012f59c:	68 9e 12 00 00       	push   $0x129e
f012f5a1:	68 5a b3 13 f0       	push   $0xf013b35a
f012f5a6:	e8 5a 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f5ab:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f5b1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f5b4:	74 17                	je     f012f5cd <test_krealloc_BF+0x1873>
			panic(
f012f5b6:	83 ec 04             	sub    $0x4,%esp
f012f5b9:	68 f4 c9 13 f0       	push   $0xf013c9f4
f012f5be:	68 a1 12 00 00       	push   $0x12a1
f012f5c3:	68 5a b3 13 f0       	push   $0xf013b35a
f012f5c8:	e8 38 0c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f5cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f5d0:	e8 c8 d5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f5d5:	29 c3                	sub    %eax,%ebx
f012f5d7:	89 d8                	mov    %ebx,%eax
f012f5d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f5de:	74 17                	je     f012f5f7 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f5e0:	83 ec 04             	sub    $0x4,%esp
f012f5e3:	68 70 ca 13 f0       	push   $0xf013ca70
f012f5e8:	68 a4 12 00 00       	push   $0x12a4
f012f5ed:	68 5a b3 13 f0       	push   $0xf013b35a
f012f5f2:	e8 0e 0c fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f5f7:	83 ec 0c             	sub    $0xc,%esp
f012f5fa:	68 b8 bb 13 f0       	push   $0xf013bbb8
f012f5ff:	e8 0a 17 fd ff       	call   f0100d0e <cprintf>
f012f604:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f607:	e8 91 d5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f60c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f60f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f615:	83 ec 08             	sub    $0x8,%esp
f012f618:	68 00 fc 9f 00       	push   $0x9ffc00
f012f61d:	50                   	push   %eax
f012f61e:	e8 22 85 fd ff       	call   f0107b45 <krealloc>
f012f623:	83 c4 10             	add    $0x10,%esp
f012f626:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f629:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f62c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f631:	77 17                	ja     f012f64a <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f633:	83 ec 04             	sub    $0x4,%esp
f012f636:	68 00 c6 13 f0       	push   $0xf013c600
f012f63b:	68 af 12 00 00       	push   $0x12af
f012f640:	68 5a b3 13 f0       	push   $0xf013b35a
f012f645:	e8 bb 0b fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f64a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f651:	10 00 00 
f012f654:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f65a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f65f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f665:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f66b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f670:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f676:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f67c:	29 d0                	sub    %edx,%eax
f012f67e:	89 c1                	mov    %eax,%ecx
f012f680:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f687:	10 00 00 
f012f68a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f68f:	0f b6 d0             	movzbl %al,%edx
f012f692:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f698:	01 d0                	add    %edx,%eax
f012f69a:	48                   	dec    %eax
f012f69b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f6a1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f6a7:	ba 00 00 00 00       	mov    $0x0,%edx
f012f6ac:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f6b2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f6b8:	29 d0                	sub    %edx,%eax
f012f6ba:	01 c1                	add    %eax,%ecx
f012f6bc:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f6c3:	10 00 00 
f012f6c6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f6cb:	0f b6 c0             	movzbl %al,%eax
f012f6ce:	c1 e0 04             	shl    $0x4,%eax
f012f6d1:	89 c2                	mov    %eax,%edx
f012f6d3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f6d9:	01 d0                	add    %edx,%eax
f012f6db:	48                   	dec    %eax
f012f6dc:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f6e2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f6e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012f6ed:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f6f3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f6f9:	29 d0                	sub    %edx,%eax
f012f6fb:	01 c8                	add    %ecx,%eax
f012f6fd:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f703:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f706:	39 c2                	cmp    %eax,%edx
f012f708:	74 18                	je     f012f722 <test_krealloc_BF+0x19c8>
			panic(
f012f70a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f70d:	50                   	push   %eax
f012f70e:	68 a4 ca 13 f0       	push   $0xf013caa4
f012f713:	68 b3 12 00 00       	push   $0x12b3
f012f718:	68 5a b3 13 f0       	push   $0xf013b35a
f012f71d:	e8 e3 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f722:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f728:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f72b:	75 17                	jne    f012f744 <test_krealloc_BF+0x19ea>
			panic(
f012f72d:	83 ec 04             	sub    $0x4,%esp
f012f730:	68 e8 ca 13 f0       	push   $0xf013cae8
f012f735:	68 b6 12 00 00       	push   $0x12b6
f012f73a:	68 5a b3 13 f0       	push   $0xf013b35a
f012f73f:	e8 c1 0a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f744:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f747:	e8 51 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f74c:	29 c3                	sub    %eax,%ebx
f012f74e:	89 d8                	mov    %ebx,%eax
f012f750:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f755:	74 17                	je     f012f76e <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f757:	83 ec 04             	sub    $0x4,%esp
f012f75a:	68 70 ca 13 f0       	push   $0xf013ca70
f012f75f:	68 b9 12 00 00       	push   $0x12b9
f012f764:	68 5a b3 13 f0       	push   $0xf013b35a
f012f769:	e8 97 0a fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012f76e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f771:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f777:	e8 21 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f77c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f77f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f785:	83 ec 08             	sub    $0x8,%esp
f012f788:	68 00 fc 3f 00       	push   $0x3ffc00
f012f78d:	50                   	push   %eax
f012f78e:	e8 b2 83 fd ff       	call   f0107b45 <krealloc>
f012f793:	83 c4 10             	add    $0x10,%esp
f012f796:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f799:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f79c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f7a1:	77 17                	ja     f012f7ba <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f7a3:	83 ec 04             	sub    $0x4,%esp
f012f7a6:	68 00 c6 13 f0       	push   $0xf013c600
f012f7ab:	68 c2 12 00 00       	push   $0x12c2
f012f7b0:	68 5a b3 13 f0       	push   $0xf013b35a
f012f7b5:	e8 4b 0a fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f7ba:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f7c0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f7c3:	75 17                	jne    f012f7dc <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f7c5:	83 ec 04             	sub    $0x4,%esp
f012f7c8:	68 e8 ca 13 f0       	push   $0xf013cae8
f012f7cd:	68 c4 12 00 00       	push   $0x12c4
f012f7d2:	68 5a b3 13 f0       	push   $0xf013b35a
f012f7d7:	e8 29 0a fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f7dc:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f7e3:	10 00 00 
f012f7e6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f7ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f7f1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f7f7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f7fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012f802:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f808:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f80e:	29 d0                	sub    %edx,%eax
f012f810:	89 c1                	mov    %eax,%ecx
f012f812:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f819:	10 00 00 
f012f81c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f821:	0f b6 d0             	movzbl %al,%edx
f012f824:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f82a:	01 d0                	add    %edx,%eax
f012f82c:	48                   	dec    %eax
f012f82d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f833:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f839:	ba 00 00 00 00       	mov    $0x0,%edx
f012f83e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f844:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f84a:	29 d0                	sub    %edx,%eax
f012f84c:	01 c1                	add    %eax,%ecx
f012f84e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f855:	10 00 00 
f012f858:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f85d:	0f b6 c0             	movzbl %al,%eax
f012f860:	c1 e0 04             	shl    $0x4,%eax
f012f863:	89 c2                	mov    %eax,%edx
f012f865:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f86b:	01 d0                	add    %edx,%eax
f012f86d:	48                   	dec    %eax
f012f86e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f874:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f87a:	ba 00 00 00 00       	mov    $0x0,%edx
f012f87f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f885:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f88b:	29 d0                	sub    %edx,%eax
f012f88d:	01 c8                	add    %ecx,%eax
f012f88f:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f895:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f898:	39 c2                	cmp    %eax,%edx
f012f89a:	74 17                	je     f012f8b3 <test_krealloc_BF+0x1b59>
f012f89c:	83 ec 04             	sub    $0x4,%esp
f012f89f:	68 3c c6 13 f0       	push   $0xf013c63c
f012f8a4:	68 c5 12 00 00       	push   $0x12c5
f012f8a9:	68 5a b3 13 f0       	push   $0xf013b35a
f012f8ae:	e8 52 09 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f8b3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f8b6:	e8 e2 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f8bb:	29 c3                	sub    %eax,%ebx
f012f8bd:	89 d8                	mov    %ebx,%eax
f012f8bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f8c4:	74 17                	je     f012f8dd <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f8c6:	83 ec 04             	sub    $0x4,%esp
f012f8c9:	68 70 ca 13 f0       	push   $0xf013ca70
f012f8ce:	68 c9 12 00 00       	push   $0x12c9
f012f8d3:	68 5a b3 13 f0       	push   $0xf013b35a
f012f8d8:	e8 28 09 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012f8dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f8e0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f8e6:	e8 b2 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f8eb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f8ee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f8f4:	83 ec 08             	sub    $0x8,%esp
f012f8f7:	68 00 fc 3f 01       	push   $0x13ffc00
f012f8fc:	50                   	push   %eax
f012f8fd:	e8 43 82 fd ff       	call   f0107b45 <krealloc>
f012f902:	83 c4 10             	add    $0x10,%esp
f012f905:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f908:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f90b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f910:	77 17                	ja     f012f929 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f912:	83 ec 04             	sub    $0x4,%esp
f012f915:	68 00 c6 13 f0       	push   $0xf013c600
f012f91a:	68 cf 12 00 00       	push   $0x12cf
f012f91f:	68 5a b3 13 f0       	push   $0xf013b35a
f012f924:	e8 dc 08 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f929:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f92f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f932:	75 17                	jne    f012f94b <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f934:	83 ec 04             	sub    $0x4,%esp
f012f937:	68 e8 ca 13 f0       	push   $0xf013cae8
f012f93c:	68 d1 12 00 00       	push   $0x12d1
f012f941:	68 5a b3 13 f0       	push   $0xf013b35a
f012f946:	e8 ba 08 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f94b:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f952:	10 00 00 
f012f955:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f95b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f960:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f966:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f96c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f971:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f977:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f97d:	29 d0                	sub    %edx,%eax
f012f97f:	89 c1                	mov    %eax,%ecx
f012f981:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f988:	10 00 00 
f012f98b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f990:	0f b6 d0             	movzbl %al,%edx
f012f993:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f999:	01 d0                	add    %edx,%eax
f012f99b:	48                   	dec    %eax
f012f99c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f9a2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f9a8:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9ad:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f9b3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f9b9:	29 d0                	sub    %edx,%eax
f012f9bb:	01 c1                	add    %eax,%ecx
f012f9bd:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f9c4:	10 00 00 
f012f9c7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f9cc:	0f b6 c0             	movzbl %al,%eax
f012f9cf:	c1 e0 04             	shl    $0x4,%eax
f012f9d2:	89 c2                	mov    %eax,%edx
f012f9d4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f9da:	01 d0                	add    %edx,%eax
f012f9dc:	48                   	dec    %eax
f012f9dd:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f9e3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9ee:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f9f4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f9fa:	29 d0                	sub    %edx,%eax
f012f9fc:	01 c8                	add    %ecx,%eax
f012f9fe:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fa04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa07:	39 c2                	cmp    %eax,%edx
f012fa09:	74 17                	je     f012fa22 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fa0b:	83 ec 04             	sub    $0x4,%esp
f012fa0e:	68 08 cc 13 f0       	push   $0xf013cc08
f012fa13:	68 d3 12 00 00       	push   $0x12d3
f012fa18:	68 5a b3 13 f0       	push   $0xf013b35a
f012fa1d:	e8 e3 07 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fa22:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fa25:	e8 73 d1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fa2a:	29 c3                	sub    %eax,%ebx
f012fa2c:	89 d8                	mov    %ebx,%eax
f012fa2e:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fa33:	74 17                	je     f012fa4c <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fa35:	83 ec 04             	sub    $0x4,%esp
f012fa38:	68 70 ca 13 f0       	push   $0xf013ca70
f012fa3d:	68 d6 12 00 00       	push   $0x12d6
f012fa42:	68 5a b3 13 f0       	push   $0xf013b35a
f012fa47:	e8 b9 07 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fa4c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa4f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fa55:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa5b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fa61:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fa68:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fa6b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fa72:	eb 21                	jmp    f012fa95 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fa74:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fa7a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fa7d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fa83:	01 c8                	add    %ecx,%eax
f012fa85:	8a 00                	mov    (%eax),%al
f012fa87:	0f be c0             	movsbl %al,%eax
f012fa8a:	01 d0                	add    %edx,%eax
f012fa8c:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fa92:	ff 45 d8             	incl   -0x28(%ebp)
f012fa95:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012fa9b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fa9e:	7d d4                	jge    f012fa74 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012faa0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012faa6:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012faac:	42                   	inc    %edx
f012faad:	01 d2                	add    %edx,%edx
f012faaf:	39 d0                	cmp    %edx,%eax
f012fab1:	74 17                	je     f012faca <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fab3:	83 ec 04             	sub    $0x4,%esp
f012fab6:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fabb:	68 e4 12 00 00       	push   $0x12e4
f012fac0:	68 5a b3 13 f0       	push   $0xf013b35a
f012fac5:	e8 3b 07 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012faca:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fad0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fad6:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fadd:	00 00 00 
		sums[1] = 0;
f012fae0:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fae7:	00 00 00 
		sums[2] = 0;
f012faea:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012faf1:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012faf4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fafb:	eb 70                	jmp    f012fb6d <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fafd:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fb03:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fb06:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fb0d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fb13:	01 c8                	add    %ecx,%eax
f012fb15:	8a 00                	mov    (%eax),%al
f012fb17:	0f be c0             	movsbl %al,%eax
f012fb1a:	01 d0                	add    %edx,%eax
f012fb1c:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fb22:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fb28:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fb2b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fb32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fb38:	01 c8                	add    %ecx,%eax
f012fb3a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fb3e:	98                   	cwtl   
f012fb3f:	01 d0                	add    %edx,%eax
f012fb41:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012fb47:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012fb4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fb50:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fb57:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fb5d:	01 c8                	add    %ecx,%eax
f012fb5f:	8b 40 04             	mov    0x4(%eax),%eax
f012fb62:	01 d0                	add    %edx,%eax
f012fb64:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fb6a:	ff 45 d8             	incl   -0x28(%ebp)
f012fb6d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fb73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fb76:	7d 85                	jge    f012fafd <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fb78:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012fb7e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fb84:	8d 50 01             	lea    0x1(%eax),%edx
f012fb87:	89 d0                	mov    %edx,%eax
f012fb89:	01 c0                	add    %eax,%eax
f012fb8b:	01 d0                	add    %edx,%eax
f012fb8d:	01 c0                	add    %eax,%eax
f012fb8f:	01 d0                	add    %edx,%eax
f012fb91:	39 c1                	cmp    %eax,%ecx
f012fb93:	75 3a                	jne    f012fbcf <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012fb95:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012fb9b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fba1:	8d 50 01             	lea    0x1(%eax),%edx
f012fba4:	89 d0                	mov    %edx,%eax
f012fba6:	01 c0                	add    %eax,%eax
f012fba8:	01 d0                	add    %edx,%eax
f012fbaa:	01 c0                	add    %eax,%eax
f012fbac:	01 d0                	add    %edx,%eax
f012fbae:	39 c1                	cmp    %eax,%ecx
f012fbb0:	75 1d                	jne    f012fbcf <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012fbb2:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fbb8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fbbe:	8d 50 01             	lea    0x1(%eax),%edx
f012fbc1:	89 d0                	mov    %edx,%eax
f012fbc3:	01 c0                	add    %eax,%eax
f012fbc5:	01 d0                	add    %edx,%eax
f012fbc7:	01 c0                	add    %eax,%eax
f012fbc9:	01 d0                	add    %edx,%eax
f012fbcb:	39 c1                	cmp    %eax,%ecx
f012fbcd:	74 17                	je     f012fbe6 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fbcf:	83 ec 04             	sub    $0x4,%esp
f012fbd2:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fbd7:	68 f6 12 00 00       	push   $0x12f6
f012fbdc:	68 5a b3 13 f0       	push   $0xf013b35a
f012fbe1:	e8 1f 06 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fbe6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fbec:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012fbf2:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fbf9:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fbfc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fc03:	eb 24                	jmp    f012fc29 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012fc05:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fc0b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fc0e:	01 c0                	add    %eax,%eax
f012fc10:	89 c1                	mov    %eax,%ecx
f012fc12:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012fc18:	01 c8                	add    %ecx,%eax
f012fc1a:	66 8b 00             	mov    (%eax),%ax
f012fc1d:	98                   	cwtl   
f012fc1e:	01 d0                	add    %edx,%eax
f012fc20:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fc26:	ff 45 d8             	incl   -0x28(%ebp)
f012fc29:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fc2f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fc32:	7d d1                	jge    f012fc05 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012fc34:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fc3a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fc40:	8d 48 01             	lea    0x1(%eax),%ecx
f012fc43:	89 c8                	mov    %ecx,%eax
f012fc45:	c1 e0 02             	shl    $0x2,%eax
f012fc48:	01 c8                	add    %ecx,%eax
f012fc4a:	39 c2                	cmp    %eax,%edx
f012fc4c:	74 17                	je     f012fc65 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012fc4e:	83 ec 04             	sub    $0x4,%esp
f012fc51:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fc56:	68 00 13 00 00       	push   $0x1300
f012fc5b:	68 5a b3 13 f0       	push   $0xf013b35a
f012fc60:	e8 a0 05 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012fc65:	e8 33 cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fc6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fc6d:	e8 56 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fc72:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012fc78:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc7e:	83 ec 08             	sub    $0x8,%esp
f012fc81:	6a 00                	push   $0x0
f012fc83:	50                   	push   %eax
f012fc84:	e8 bc 7e fd ff       	call   f0107b45 <krealloc>
f012fc89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fc8c:	e8 37 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fc91:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fc97:	74 17                	je     f012fcb0 <test_krealloc_BF+0x1f56>
			panic(
f012fc99:	83 ec 04             	sub    $0x4,%esp
f012fc9c:	68 74 b3 13 f0       	push   $0xf013b374
f012fca1:	68 08 13 00 00       	push   $0x1308
f012fca6:	68 5a b3 13 f0       	push   $0xf013b35a
f012fcab:	e8 55 05 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012fcb0:	e8 e8 ce fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fcb5:	89 c2                	mov    %eax,%edx
f012fcb7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fcba:	29 c2                	sub    %eax,%edx
f012fcbc:	89 d0                	mov    %edx,%eax
f012fcbe:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012fcc3:	74 17                	je     f012fcdc <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012fcc5:	83 ec 04             	sub    $0x4,%esp
f012fcc8:	68 30 c8 13 f0       	push   $0xf013c830
f012fccd:	68 0a 13 00 00       	push   $0x130a
f012fcd2:	68 5a b3 13 f0       	push   $0xf013b35a
f012fcd7:	e8 29 05 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012fcdc:	e8 bc ce fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fce1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fce4:	e8 df 40 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fce9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012fcef:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fcf5:	83 ec 0c             	sub    $0xc,%esp
f012fcf8:	50                   	push   %eax
f012fcf9:	e8 52 7c fd ff       	call   f0107950 <kfree>
f012fcfe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fd01:	e8 c2 40 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fd06:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fd0c:	74 17                	je     f012fd25 <test_krealloc_BF+0x1fcb>
			panic(
f012fd0e:	83 ec 04             	sub    $0x4,%esp
f012fd11:	68 74 b3 13 f0       	push   $0xf013b374
f012fd16:	68 12 13 00 00       	push   $0x1312
f012fd1b:	68 5a b3 13 f0       	push   $0xf013b35a
f012fd20:	e8 e0 04 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012fd25:	e8 73 ce fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fd2a:	89 c2                	mov    %eax,%edx
f012fd2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fd2f:	29 c2                	sub    %eax,%edx
f012fd31:	89 d0                	mov    %edx,%eax
f012fd33:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012fd38:	74 17                	je     f012fd51 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012fd3a:	83 ec 04             	sub    $0x4,%esp
f012fd3d:	68 30 c8 13 f0       	push   $0xf013c830
f012fd42:	68 14 13 00 00       	push   $0x1314
f012fd47:	68 5a b3 13 f0       	push   $0xf013b35a
f012fd4c:	e8 b4 04 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fd51:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012fd58:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012fd5f:	eb 48                	jmp    f012fda9 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012fd61:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012fd64:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012fd69:	83 ec 04             	sub    $0x4,%esp
f012fd6c:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012fd72:	51                   	push   %ecx
f012fd73:	52                   	push   %edx
f012fd74:	50                   	push   %eax
f012fd75:	e8 37 6d fd ff       	call   f0106ab1 <get_page_table>
f012fd7a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012fd7d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012fd83:	85 c0                	test   %eax,%eax
f012fd85:	75 17                	jne    f012fd9e <test_krealloc_BF+0x2044>
					panic(
f012fd87:	83 ec 04             	sub    $0x4,%esp
f012fd8a:	68 5c bc 13 f0       	push   $0xf013bc5c
f012fd8f:	68 21 13 00 00       	push   $0x1321
f012fd94:	68 5a b3 13 f0       	push   $0xf013b35a
f012fd99:	e8 67 04 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fd9e:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012fda5:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012fda9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fdad:	78 b2                	js     f012fd61 <test_krealloc_BF+0x2007>
f012fdaf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fdb3:	7f 09                	jg     f012fdbe <test_krealloc_BF+0x2064>
f012fdb5:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012fdbc:	76 a3                	jbe    f012fd61 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012fdbe:	83 ec 0c             	sub    $0xc,%esp
f012fdc1:	68 3e b5 13 f0       	push   $0xf013b53e
f012fdc6:	e8 43 0f fd ff       	call   f0100d0e <cprintf>
f012fdcb:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012fdce:	83 ec 0c             	sub    $0xc,%esp
f012fdd1:	68 40 cc 13 f0       	push   $0xf013cc40
f012fdd6:	e8 33 0f fd ff       	call   f0100d0e <cprintf>
f012fddb:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fdde:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fde3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fde6:	5b                   	pop    %ebx
f012fde7:	5f                   	pop    %edi
f012fde8:	5d                   	pop    %ebp
f012fde9:	c3                   	ret    

f012fdea <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012fdea:	55                   	push   %ebp
f012fdeb:	89 e5                	mov    %esp,%ebp
f012fded:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012fdf0:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f012fdf5:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012fdfa:	74 17                	je     f012fe13 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012fdfc:	83 ec 04             	sub    $0x4,%esp
f012fdff:	68 80 cc 13 f0       	push   $0xf013cc80
f012fe04:	68 39 13 00 00       	push   $0x1339
f012fe09:	68 5a b3 13 f0       	push   $0xf013b35a
f012fe0e:	e8 f2 03 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012fe13:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f012fe18:	8b 15 04 1d 88 f0    	mov    0xf0881d04,%edx
f012fe1e:	4a                   	dec    %edx
f012fe1f:	39 d0                	cmp    %edx,%eax
f012fe21:	74 17                	je     f012fe3a <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012fe23:	83 ec 04             	sub    $0x4,%esp
f012fe26:	68 d4 cc 13 f0       	push   $0xf013ccd4
f012fe2b:	68 3f 13 00 00       	push   $0x133f
f012fe30:	68 5a b3 13 f0       	push   $0xf013b35a
f012fe35:	e8 cb 03 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012fe3a:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f012fe3f:	85 c0                	test   %eax,%eax
f012fe41:	74 17                	je     f012fe5a <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012fe43:	83 ec 04             	sub    $0x4,%esp
f012fe46:	68 10 cd 13 f0       	push   $0xf013cd10
f012fe4b:	68 45 13 00 00       	push   $0x1345
f012fe50:	68 5a b3 13 f0       	push   $0xf013b35a
f012fe55:	e8 ab 03 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012fe5a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f012fe5f:	83 f8 01             	cmp    $0x1,%eax
f012fe62:	74 17                	je     f012fe7b <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012fe64:	83 ec 04             	sub    $0x4,%esp
f012fe67:	68 48 cd 13 f0       	push   $0xf013cd48
f012fe6c:	68 4b 13 00 00       	push   $0x134b
f012fe71:	68 5a b3 13 f0       	push   $0xf013b35a
f012fe76:	e8 8a 03 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012fe7b:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f012fe80:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012fe83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fe87:	74 66                	je     f012feef <test_initialize_dyn_block_system+0x105>
f012fe89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe8c:	8b 48 0c             	mov    0xc(%eax),%ecx
f012fe8f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012fe96:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fe99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fe9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012fea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fea4:	ba 00 00 00 00       	mov    $0x0,%edx
f012fea9:	f7 75 ec             	divl   -0x14(%ebp)
f012feac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012feaf:	29 d0                	sub    %edx,%eax
f012feb1:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012feb6:	29 c2                	sub    %eax,%edx
f012feb8:	89 d0                	mov    %edx,%eax
f012feba:	39 c1                	cmp    %eax,%ecx
f012febc:	75 31                	jne    f012feef <test_initialize_dyn_block_system+0x105>
f012febe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fec1:	8b 48 08             	mov    0x8(%eax),%ecx
f012fec4:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012fecb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fece:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012fed6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fed9:	ba 00 00 00 00       	mov    $0x0,%edx
f012fede:	f7 75 e4             	divl   -0x1c(%ebp)
f012fee1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fee4:	29 d0                	sub    %edx,%eax
f012fee6:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012feeb:	39 c1                	cmp    %eax,%ecx
f012feed:	74 17                	je     f012ff06 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012feef:	83 ec 04             	sub    $0x4,%esp
f012fef2:	68 80 cd 13 f0       	push   $0xf013cd80
f012fef7:	68 52 13 00 00       	push   $0x1352
f012fefc:	68 5a b3 13 f0       	push   $0xf013b35a
f012ff01:	e8 ff 02 fd ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ff06:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff09:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012ff0c:	74 17                	je     f012ff25 <test_initialize_dyn_block_system+0x13b>
f012ff0e:	83 ec 04             	sub    $0x4,%esp
f012ff11:	68 74 b3 13 f0       	push   $0xf013b374
f012ff16:	68 56 13 00 00       	push   $0x1356
f012ff1b:	68 5a b3 13 f0       	push   $0xf013b35a
f012ff20:	e8 e0 02 fd ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012ff25:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff28:	2b 45 10             	sub    0x10(%ebp),%eax
f012ff2b:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012ff30:	74 1b                	je     f012ff4d <test_initialize_dyn_block_system+0x163>
f012ff32:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff35:	2b 45 10             	sub    0x10(%ebp),%eax
f012ff38:	50                   	push   %eax
f012ff39:	68 bc cd 13 f0       	push   $0xf013cdbc
f012ff3e:	68 57 13 00 00       	push   $0x1357
f012ff43:	68 5a b3 13 f0       	push   $0xf013b35a
f012ff48:	e8 b8 02 fd ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012ff4d:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012ff54:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012ff59:	83 ec 04             	sub    $0x4,%esp
f012ff5c:	6a 00                	push   $0x0
f012ff5e:	ff 75 f4             	pushl  -0xc(%ebp)
f012ff61:	50                   	push   %eax
f012ff62:	e8 e9 5f fe ff       	call   f0115f50 <CB>
f012ff67:	83 c4 10             	add    $0x10,%esp
f012ff6a:	83 f8 01             	cmp    $0x1,%eax
f012ff6d:	75 35                	jne    f012ffa4 <test_initialize_dyn_block_system+0x1ba>
f012ff6f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012ff74:	83 ec 04             	sub    $0x4,%esp
f012ff77:	6a 01                	push   $0x1
f012ff79:	ff 75 f4             	pushl  -0xc(%ebp)
f012ff7c:	50                   	push   %eax
f012ff7d:	e8 ce 5f fe ff       	call   f0115f50 <CB>
f012ff82:	83 c4 10             	add    $0x10,%esp
f012ff85:	83 f8 01             	cmp    $0x1,%eax
f012ff88:	75 1a                	jne    f012ffa4 <test_initialize_dyn_block_system+0x1ba>
f012ff8a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012ff8f:	83 ec 04             	sub    $0x4,%esp
f012ff92:	6a 02                	push   $0x2
f012ff94:	ff 75 f4             	pushl  -0xc(%ebp)
f012ff97:	50                   	push   %eax
f012ff98:	e8 b3 5f fe ff       	call   f0115f50 <CB>
f012ff9d:	83 c4 10             	add    $0x10,%esp
f012ffa0:	85 c0                	test   %eax,%eax
f012ffa2:	74 17                	je     f012ffbb <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012ffa4:	83 ec 04             	sub    $0x4,%esp
f012ffa7:	68 00 ce 13 f0       	push   $0xf013ce00
f012ffac:	68 5f 13 00 00       	push   $0x135f
f012ffb1:	68 5a b3 13 f0       	push   $0xf013b35a
f012ffb6:	e8 4a 02 fd ff       	call   f0100205 <_panic>

			a+=4096;
f012ffbb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012ffc2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012ffc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ffcc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ffd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012ffd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ffd7:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffdc:	f7 75 dc             	divl   -0x24(%ebp)
f012ffdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ffe2:	29 d0                	sub    %edx,%eax
f012ffe4:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012ffe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ffec:	74 05                	je     f012fff3 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012ffee:	e9 61 ff ff ff       	jmp    f012ff54 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012fff3:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012fff4:	83 ec 0c             	sub    $0xc,%esp
f012fff7:	68 60 ce 13 f0       	push   $0xf013ce60
f012fffc:	e8 0d 0d fd ff       	call   f0100d0e <cprintf>
f0130001:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130004:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130009:	c9                   	leave  
f013000a:	c3                   	ret    

f013000b <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f013000b:	55                   	push   %ebp
f013000c:	89 e5                	mov    %esp,%ebp
f013000e:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130011:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130015:	77 07                	ja     f013001e <nearest_pow2_ceil+0x13>
f0130017:	b8 01 00 00 00       	mov    $0x1,%eax
f013001c:	eb 20                	jmp    f013003e <nearest_pow2_ceil+0x33>
    int power = 2;
f013001e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130025:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130028:	eb 08                	jmp    f0130032 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f013002a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013002d:	01 c0                	add    %eax,%eax
f013002f:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130032:	d1 6d 08             	shrl   0x8(%ebp)
f0130035:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130039:	75 ef                	jne    f013002a <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f013003b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013003e:	c9                   	leave  
f013003f:	c3                   	ret    

f0130040 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0130040:	55                   	push   %ebp
f0130041:	89 e5                	mov    %esp,%ebp
f0130043:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130046:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013004a:	77 07                	ja     f0130053 <log2_ceil+0x13>
f013004c:	b8 01 00 00 00       	mov    $0x1,%eax
f0130051:	eb 1b                	jmp    f013006e <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f0130053:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013005a:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013005d:	eb 03                	jmp    f0130062 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f013005f:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f0130062:	d1 6d 08             	shrl   0x8(%ebp)
f0130065:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130069:	75 f4                	jne    f013005f <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f013006b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013006e:	c9                   	leave  
f013006f:	c3                   	ret    

f0130070 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0130070:	55                   	push   %ebp
f0130071:	89 e5                	mov    %esp,%ebp
f0130073:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0130076:	8b 45 08             	mov    0x8(%ebp),%eax
f0130079:	8b 00                	mov    (%eax),%eax
f013007b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f013007e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130081:	8b 00                	mov    (%eax),%eax
f0130083:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0130086:	eb 52                	jmp    f01300da <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0130088:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013008b:	8b 00                	mov    (%eax),%eax
f013008d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0130090:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130093:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130096:	75 12                	jne    f01300aa <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0130098:	83 ec 0c             	sub    $0xc,%esp
f013009b:	68 b8 ce 13 f0       	push   $0xf013ceb8
f01300a0:	e8 69 0c fd ff       	call   f0100d0e <cprintf>
f01300a5:	83 c4 10             	add    $0x10,%esp
			break;
f01300a8:	eb 3f                	jmp    f01300e9 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01300aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01300ae:	74 38                	je     f01300e8 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01300b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300b3:	8b 00                	mov    (%eax),%eax
f01300b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01300b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01300be:	75 12                	jne    f01300d2 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01300c0:	83 ec 0c             	sub    $0xc,%esp
f01300c3:	68 d4 ce 13 f0       	push   $0xf013ced4
f01300c8:	e8 41 0c fd ff       	call   f0100d0e <cprintf>
f01300cd:	83 c4 10             	add    $0x10,%esp
			break;
f01300d0:	eb 17                	jmp    f01300e9 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01300d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01300d5:	8b 00                	mov    (%eax),%eax
f01300d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01300da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01300de:	74 09                	je     f01300e9 <detect_loop_in_FrameInfo_list+0x79>
f01300e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01300e4:	75 a2                	jne    f0130088 <detect_loop_in_FrameInfo_list+0x18>
f01300e6:	eb 01                	jmp    f01300e9 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01300e8:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01300e9:	83 ec 0c             	sub    $0xc,%esp
f01300ec:	68 eb ce 13 f0       	push   $0xf013ceeb
f01300f1:	e8 18 0c fd ff       	call   f0100d0e <cprintf>
f01300f6:	83 c4 10             	add    $0x10,%esp
}
f01300f9:	90                   	nop
f01300fa:	c9                   	leave  
f01300fb:	c3                   	ret    

f01300fc <scarce_memory>:

void scarce_memory()
{
f01300fc:	55                   	push   %ebp
f01300fd:	89 e5                	mov    %esp,%ebp
f01300ff:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0130102:	a1 f0 1c 88 f0       	mov    0xf0881cf0,%eax
f0130107:	ba 64 00 00 00       	mov    $0x64,%edx
f013010c:	29 c2                	sub    %eax,%edx
f013010e:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0130113:	0f af c2             	imul   %edx,%eax
f0130116:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013011b:	f7 e2                	mul    %edx
f013011d:	89 d0                	mov    %edx,%eax
f013011f:	c1 e8 05             	shr    $0x5,%eax
f0130122:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130125:	a1 f0 1c 88 f0       	mov    0xf0881cf0,%eax
f013012a:	ba 64 00 00 00       	mov    $0x64,%edx
f013012f:	29 c2                	sub    %eax,%edx
f0130131:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0130136:	89 d1                	mov    %edx,%ecx
f0130138:	0f af c8             	imul   %eax,%ecx
f013013b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130140:	f7 e1                	mul    %ecx
f0130142:	c1 ea 05             	shr    $0x5,%edx
f0130145:	89 d0                	mov    %edx,%eax
f0130147:	c1 e0 02             	shl    $0x2,%eax
f013014a:	01 d0                	add    %edx,%eax
f013014c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130153:	01 d0                	add    %edx,%eax
f0130155:	c1 e0 02             	shl    $0x2,%eax
f0130158:	29 c1                	sub    %eax,%ecx
f013015a:	89 ca                	mov    %ecx,%edx
f013015c:	85 d2                	test   %edx,%edx
f013015e:	74 03                	je     f0130163 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0130160:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f0130163:	8b 15 10 1d 88 f0    	mov    0xf0881d10,%edx
f0130169:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f013016e:	29 c2                	sub    %eax,%edx
f0130170:	89 d0                	mov    %edx,%eax
f0130172:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0130175:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130178:	2b 45 ec             	sub    -0x14(%ebp),%eax
f013017b:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f013017e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130185:	eb 12                	jmp    f0130199 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f0130187:	83 ec 0c             	sub    $0xc,%esp
f013018a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f013018d:	50                   	push   %eax
f013018e:	e8 5f 67 fd ff       	call   f01068f2 <allocate_frame>
f0130193:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130196:	ff 45 f0             	incl   -0x10(%ebp)
f0130199:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013019c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013019f:	76 e6                	jbe    f0130187 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01301a1:	90                   	nop
f01301a2:	c9                   	leave  
f01301a3:	c3                   	ret    

f01301a4 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01301a4:	55                   	push   %ebp
f01301a5:	89 e5                	mov    %esp,%ebp
f01301a7:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01301aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01301b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01301b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01301bf:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01301c3:	0f 85 d0 01 00 00    	jne    f0130399 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01301c9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01301d0:	e9 de 00 00 00       	jmp    f01302b3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01301d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01301dc:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01301e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01301e4:	c1 e2 04             	shl    $0x4,%edx
f01301e7:	01 d0                	add    %edx,%eax
f01301e9:	8b 00                	mov    (%eax),%eax
f01301eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01301ee:	e9 85 00 00 00       	jmp    f0130278 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f01301f3:	83 ec 0c             	sub    $0xc,%esp
f01301f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01301f9:	e8 18 7c fd ff       	call   f0107e16 <env_page_ws_get_size>
f01301fe:	83 c4 10             	add    $0x10,%esp
f0130201:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130204:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130209:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013020f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130212:	0f af c2             	imul   %edx,%eax
f0130215:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013021a:	f7 e2                	mul    %edx
f013021c:	89 d0                	mov    %edx,%eax
f013021e:	c1 e8 05             	shr    $0x5,%eax
f0130221:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130224:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130229:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013022f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130232:	89 d1                	mov    %edx,%ecx
f0130234:	0f af c8             	imul   %eax,%ecx
f0130237:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013023c:	f7 e1                	mul    %ecx
f013023e:	c1 ea 05             	shr    $0x5,%edx
f0130241:	89 d0                	mov    %edx,%eax
f0130243:	c1 e0 02             	shl    $0x2,%eax
f0130246:	01 d0                	add    %edx,%eax
f0130248:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013024f:	01 d0                	add    %edx,%eax
f0130251:	c1 e0 02             	shl    $0x2,%eax
f0130254:	29 c1                	sub    %eax,%ecx
f0130256:	89 ca                	mov    %ecx,%edx
f0130258:	85 d2                	test   %edx,%edx
f013025a:	74 03                	je     f013025f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f013025c:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f013025f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130262:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130265:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f013026a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013026d:	c1 e2 04             	shl    $0x4,%edx
f0130270:	01 d0                	add    %edx,%eax
f0130272:	8b 40 08             	mov    0x8(%eax),%eax
f0130275:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130278:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f013027d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130280:	c1 e2 04             	shl    $0x4,%edx
f0130283:	01 d0                	add    %edx,%eax
f0130285:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130289:	74 08                	je     f0130293 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f013028b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013028e:	8b 52 44             	mov    0x44(%edx),%edx
f0130291:	eb 05                	jmp    f0130298 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f0130293:	ba 00 00 00 00       	mov    $0x0,%edx
f0130298:	89 50 08             	mov    %edx,0x8(%eax)
f013029b:	8b 40 08             	mov    0x8(%eax),%eax
f013029e:	85 c0                	test   %eax,%eax
f01302a0:	0f 85 4d ff ff ff    	jne    f01301f3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01302a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01302aa:	0f 85 43 ff ff ff    	jne    f01301f3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01302b0:	ff 45 e8             	incl   -0x18(%ebp)
f01302b3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01302b8:	0f b6 c0             	movzbl %al,%eax
f01302bb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01302be:	0f 8f 11 ff ff ff    	jg     f01301d5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f01302c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01302cb:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f01302d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01302d3:	eb 19                	jmp    f01302ee <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f01302d5:	83 ec 0c             	sub    $0xc,%esp
f01302d8:	ff 75 dc             	pushl  -0x24(%ebp)
f01302db:	e8 36 7b fd ff       	call   f0107e16 <env_page_ws_get_size>
f01302e0:	83 c4 10             	add    $0x10,%esp
f01302e3:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01302e6:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01302eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01302ee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01302f2:	74 08                	je     f01302fc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f01302f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01302f7:	8b 40 44             	mov    0x44(%eax),%eax
f01302fa:	eb 05                	jmp    f0130301 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f01302fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0130301:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f0130306:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f013030b:	85 c0                	test   %eax,%eax
f013030d:	75 c6                	jne    f01302d5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f013030f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130313:	75 c0                	jne    f01302d5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130315:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013031a:	85 c0                	test   %eax,%eax
f013031c:	0f 84 ec 00 00 00    	je     f013040e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130322:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130327:	83 ec 0c             	sub    $0xc,%esp
f013032a:	50                   	push   %eax
f013032b:	e8 e6 7a fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130330:	83 c4 10             	add    $0x10,%esp
f0130333:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130336:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013033b:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130341:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130344:	0f af c2             	imul   %edx,%eax
f0130347:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013034c:	f7 e2                	mul    %edx
f013034e:	89 d0                	mov    %edx,%eax
f0130350:	c1 e8 05             	shr    $0x5,%eax
f0130353:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130356:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013035b:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130361:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130364:	89 d1                	mov    %edx,%ecx
f0130366:	0f af c8             	imul   %eax,%ecx
f0130369:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013036e:	f7 e1                	mul    %ecx
f0130370:	c1 ea 05             	shr    $0x5,%edx
f0130373:	89 d0                	mov    %edx,%eax
f0130375:	c1 e0 02             	shl    $0x2,%eax
f0130378:	01 d0                	add    %edx,%eax
f013037a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130381:	01 d0                	add    %edx,%eax
f0130383:	c1 e0 02             	shl    $0x2,%eax
f0130386:	29 c1                	sub    %eax,%ecx
f0130388:	89 ca                	mov    %ecx,%edx
f013038a:	85 d2                	test   %edx,%edx
f013038c:	74 03                	je     f0130391 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f013038e:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130391:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130394:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130397:	eb 75                	jmp    f013040e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130399:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013039e:	83 ec 0c             	sub    $0xc,%esp
f01303a1:	50                   	push   %eax
f01303a2:	e8 6f 7a fd ff       	call   f0107e16 <env_page_ws_get_size>
f01303a7:	83 c4 10             	add    $0x10,%esp
f01303aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01303ad:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01303b2:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01303b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01303bb:	0f af c2             	imul   %edx,%eax
f01303be:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01303c3:	f7 e2                	mul    %edx
f01303c5:	89 d0                	mov    %edx,%eax
f01303c7:	c1 e8 05             	shr    $0x5,%eax
f01303ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01303cd:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01303d2:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01303d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01303db:	89 d1                	mov    %edx,%ecx
f01303dd:	0f af c8             	imul   %eax,%ecx
f01303e0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01303e5:	f7 e1                	mul    %ecx
f01303e7:	c1 ea 05             	shr    $0x5,%edx
f01303ea:	89 d0                	mov    %edx,%eax
f01303ec:	c1 e0 02             	shl    $0x2,%eax
f01303ef:	01 d0                	add    %edx,%eax
f01303f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01303f8:	01 d0                	add    %edx,%eax
f01303fa:	c1 e0 02             	shl    $0x2,%eax
f01303fd:	29 c1                	sub    %eax,%ecx
f01303ff:	89 ca                	mov    %ecx,%edx
f0130401:	85 d2                	test   %edx,%edx
f0130403:	74 03                	je     f0130408 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130405:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130408:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f013040b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f013040e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130411:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130414:	01 c2                	add    %eax,%edx
f0130416:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130419:	01 d0                	add    %edx,%eax
}
f013041b:	c9                   	leave  
f013041c:	c3                   	ret    

f013041d <schenv>:


void schenv()
{
f013041d:	55                   	push   %ebp
f013041e:	89 e5                	mov    %esp,%ebp
f0130420:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130423:	c6 05 a8 1d 88 f0 00 	movb   $0x0,0xf0881da8
	__ne = NULL;
f013042a:	c7 05 38 1d 88 f0 00 	movl   $0x0,0xf0881d38
f0130431:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013043b:	eb 3f                	jmp    f013047c <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f013043d:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130442:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130445:	c1 e2 04             	shl    $0x4,%edx
f0130448:	01 d0                	add    %edx,%eax
f013044a:	83 ec 0c             	sub    $0xc,%esp
f013044d:	50                   	push   %eax
f013044e:	e8 32 40 fd ff       	call   f0104485 <queue_size>
f0130453:	83 c4 10             	add    $0x10,%esp
f0130456:	85 c0                	test   %eax,%eax
f0130458:	74 1f                	je     f0130479 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f013045a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f013045f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130462:	c1 e2 04             	shl    $0x4,%edx
f0130465:	01 d0                	add    %edx,%eax
f0130467:	8b 40 04             	mov    0x4(%eax),%eax
f013046a:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
			__nl = i;
f013046f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130472:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
			break;
f0130477:	eb 10                	jmp    f0130489 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130479:	ff 45 f4             	incl   -0xc(%ebp)
f013047c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0130481:	0f b6 c0             	movzbl %al,%eax
f0130484:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130487:	7f b4                	jg     f013043d <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130489:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013048e:	85 c0                	test   %eax,%eax
f0130490:	0f 84 86 00 00 00    	je     f013051c <schenv+0xff>
	{
		if (__ne != NULL)
f0130496:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f013049b:	85 c0                	test   %eax,%eax
f013049d:	74 4b                	je     f01304ea <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f013049f:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01304a4:	0f b6 c0             	movzbl %al,%eax
f01304a7:	8d 50 01             	lea    0x1(%eax),%edx
f01304aa:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f01304af:	0f b6 c0             	movzbl %al,%eax
f01304b2:	39 c2                	cmp    %eax,%edx
f01304b4:	7d 66                	jge    f013051c <schenv+0xff>
			{
				__ne = curenv;
f01304b6:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01304bb:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01304c0:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01304c5:	0f b6 c0             	movzbl %al,%eax
f01304c8:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f01304ce:	0f b6 d2             	movzbl %dl,%edx
f01304d1:	4a                   	dec    %edx
f01304d2:	39 d0                	cmp    %edx,%eax
f01304d4:	7d 08                	jge    f01304de <schenv+0xc1>
f01304d6:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01304db:	40                   	inc    %eax
f01304dc:	eb 05                	jmp    f01304e3 <schenv+0xc6>
f01304de:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01304e3:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01304e8:	eb 32                	jmp    f013051c <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f01304ea:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01304ef:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01304f4:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01304f9:	0f b6 c0             	movzbl %al,%eax
f01304fc:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f0130502:	0f b6 d2             	movzbl %dl,%edx
f0130505:	4a                   	dec    %edx
f0130506:	39 d0                	cmp    %edx,%eax
f0130508:	7d 08                	jge    f0130512 <schenv+0xf5>
f013050a:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f013050f:	40                   	inc    %eax
f0130510:	eb 05                	jmp    f0130517 <schenv+0xfa>
f0130512:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130517:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
		}
	}
}
f013051c:	90                   	nop
f013051d:	c9                   	leave  
f013051e:	c3                   	ret    

f013051f <chksch>:

void chksch(uint8 onoff)
{
f013051f:	55                   	push   %ebp
f0130520:	89 e5                	mov    %esp,%ebp
f0130522:	83 ec 04             	sub    $0x4,%esp
f0130525:	8b 45 08             	mov    0x8(%ebp),%eax
f0130528:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f013052b:	c7 05 94 1d 88 f0 00 	movl   $0x0,0xf0881d94
f0130532:	00 00 00 
	__ne = NULL;
f0130535:	c7 05 38 1d 88 f0 00 	movl   $0x0,0xf0881d38
f013053c:	00 00 00 
	__pl = 0 ;
f013053f:	c6 05 e0 1c 88 f0 00 	movb   $0x0,0xf0881ce0
	__nl = 0 ;
f0130546:	c6 05 a8 1d 88 f0 00 	movb   $0x0,0xf0881da8
	__chkstatus = onoff;
f013054d:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130550:	a2 34 1d 88 f0       	mov    %al,0xf0881d34
}
f0130555:	90                   	nop
f0130556:	c9                   	leave  
f0130557:	c3                   	ret    

f0130558 <chk1>:
void chk1()
{
f0130558:	55                   	push   %ebp
f0130559:	89 e5                	mov    %esp,%ebp
f013055b:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f013055e:	a0 34 1d 88 f0       	mov    0xf0881d34,%al
f0130563:	84 c0                	test   %al,%al
f0130565:	74 2b                	je     f0130592 <chk1+0x3a>
		return ;
	__pe = curenv;
f0130567:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013056c:	a3 94 1d 88 f0       	mov    %eax,0xf0881d94
	__pl = __nl ;
f0130571:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f0130576:	a2 e0 1c 88 f0       	mov    %al,0xf0881ce0
	if (__pe == NULL)
f013057b:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f0130580:	85 c0                	test   %eax,%eax
f0130582:	75 07                	jne    f013058b <chk1+0x33>
	{
		__pl = 0;
f0130584:	c6 05 e0 1c 88 f0 00 	movb   $0x0,0xf0881ce0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f013058b:	e8 8d fe ff ff       	call   f013041d <schenv>
f0130590:	eb 01                	jmp    f0130593 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130592:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130593:	c9                   	leave  
f0130594:	c3                   	ret    

f0130595 <chk2>:
void chk2(struct Env* __se)
{
f0130595:	55                   	push   %ebp
f0130596:	89 e5                	mov    %esp,%ebp
f0130598:	53                   	push   %ebx
f0130599:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f013059c:	a0 34 1d 88 f0       	mov    0xf0881d34,%al
f01305a1:	84 c0                	test   %al,%al
f01305a3:	0f 84 43 02 00 00    	je     f01307ec <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01305a9:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01305ae:	39 45 08             	cmp    %eax,0x8(%ebp)
f01305b1:	74 19                	je     f01305cc <chk2+0x37>
f01305b3:	68 05 cf 13 f0       	push   $0xf013cf05
f01305b8:	68 12 cf 13 f0       	push   $0xf013cf12
f01305bd:	68 c0 00 00 00       	push   $0xc0
f01305c2:	68 27 cf 13 f0       	push   $0xf013cf27
f01305c7:	e8 ef fc fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01305cc:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01305d1:	85 c0                	test   %eax,%eax
f01305d3:	0f 84 25 01 00 00    	je     f01306fe <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01305d9:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f01305df:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f01305e4:	0f b6 c0             	movzbl %al,%eax
f01305e7:	01 d0                	add    %edx,%eax
f01305e9:	8a 00                	mov    (%eax),%al
f01305eb:	0f b6 d8             	movzbl %al,%ebx
f01305ee:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01305f3:	99                   	cltd   
f01305f4:	f7 fb                	idiv   %ebx
f01305f6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01305fc:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f0130602:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f0130607:	0f b6 c0             	movzbl %al,%eax
f013060a:	01 d0                	add    %edx,%eax
f013060c:	8a 00                	mov    (%eax),%al
f013060e:	0f b6 d8             	movzbl %al,%ebx
f0130611:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130616:	99                   	cltd   
f0130617:	f7 fb                	idiv   %ebx
f0130619:	89 c3                	mov    %eax,%ebx
f013061b:	89 c8                	mov    %ecx,%eax
f013061d:	99                   	cltd   
f013061e:	f7 fb                	idiv   %ebx
f0130620:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130624:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130628:	83 e0 01             	and    $0x1,%eax
f013062b:	66 85 c0             	test   %ax,%ax
f013062e:	74 07                	je     f0130637 <chk2+0xa2>
f0130630:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130634:	40                   	inc    %eax
f0130635:	eb 04                	jmp    f013063b <chk2+0xa6>
f0130637:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013063b:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f013063f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130643:	89 d0                	mov    %edx,%eax
f0130645:	c1 e0 02             	shl    $0x2,%eax
f0130648:	01 d0                	add    %edx,%eax
f013064a:	01 c0                	add    %eax,%eax
f013064c:	01 d0                	add    %edx,%eax
f013064e:	c1 e0 02             	shl    $0x2,%eax
f0130651:	01 d0                	add    %edx,%eax
f0130653:	01 c0                	add    %eax,%eax
f0130655:	89 c1                	mov    %eax,%ecx
f0130657:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013065c:	f7 e9                	imul   %ecx
f013065e:	c1 fa 05             	sar    $0x5,%edx
f0130661:	89 c8                	mov    %ecx,%eax
f0130663:	c1 f8 1f             	sar    $0x1f,%eax
f0130666:	29 c2                	sub    %eax,%edx
f0130668:	89 d0                	mov    %edx,%eax
f013066a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f013066e:	e8 e3 3c fd ff       	call   f0104356 <kclock_read_cnt0>
f0130673:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130677:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013067b:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f013067f:	76 0a                	jbe    f013068b <chk2+0xf6>
f0130681:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130685:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130689:	76 19                	jbe    f01306a4 <chk2+0x10f>
f013068b:	68 40 cf 13 f0       	push   $0xf013cf40
f0130690:	68 12 cf 13 f0       	push   $0xf013cf12
f0130695:	68 ca 00 00 00       	push   $0xca
f013069a:	68 27 cf 13 f0       	push   $0xf013cf27
f013069f:	e8 17 fc fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01306a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01306ab:	eb 44                	jmp    f01306f1 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01306ad:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01306b2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01306b5:	89 c2                	mov    %eax,%edx
f01306b7:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01306bc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01306bf:	c1 e1 04             	shl    $0x4,%ecx
f01306c2:	01 c8                	add    %ecx,%eax
f01306c4:	83 ec 08             	sub    $0x8,%esp
f01306c7:	52                   	push   %edx
f01306c8:	50                   	push   %eax
f01306c9:	e8 d1 3f fd ff       	call   f010469f <find_env_in_queue>
f01306ce:	83 c4 10             	add    $0x10,%esp
f01306d1:	85 c0                	test   %eax,%eax
f01306d3:	74 19                	je     f01306ee <chk2+0x159>
f01306d5:	68 64 cf 13 f0       	push   $0xf013cf64
f01306da:	68 12 cf 13 f0       	push   $0xf013cf12
f01306df:	68 ce 00 00 00       	push   $0xce
f01306e4:	68 27 cf 13 f0       	push   $0xf013cf27
f01306e9:	e8 cd fb fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01306ee:	ff 45 f4             	incl   -0xc(%ebp)
f01306f1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01306f6:	0f b6 c0             	movzbl %al,%eax
f01306f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01306fc:	7f af                	jg     f01306ad <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01306fe:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f0130703:	85 c0                	test   %eax,%eax
f0130705:	0f 84 e2 00 00 00    	je     f01307ed <chk2+0x258>
f013070b:	8b 15 94 1d 88 f0    	mov    0xf0881d94,%edx
f0130711:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f0130716:	39 c2                	cmp    %eax,%edx
f0130718:	0f 84 cf 00 00 00    	je     f01307ed <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f013071e:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130723:	0f b6 c0             	movzbl %al,%eax
f0130726:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f013072c:	0f b6 d2             	movzbl %dl,%edx
f013072f:	4a                   	dec    %edx
f0130730:	39 d0                	cmp    %edx,%eax
f0130732:	74 08                	je     f013073c <chk2+0x1a7>
f0130734:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130739:	40                   	inc    %eax
f013073a:	eb 05                	jmp    f0130741 <chk2+0x1ac>
f013073c:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130741:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130744:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f0130749:	8b 40 4c             	mov    0x4c(%eax),%eax
f013074c:	89 c2                	mov    %eax,%edx
f013074e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130753:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130757:	c1 e1 04             	shl    $0x4,%ecx
f013075a:	01 c8                	add    %ecx,%eax
f013075c:	83 ec 08             	sub    $0x8,%esp
f013075f:	52                   	push   %edx
f0130760:	50                   	push   %eax
f0130761:	e8 39 3f fd ff       	call   f010469f <find_env_in_queue>
f0130766:	83 c4 10             	add    $0x10,%esp
f0130769:	85 c0                	test   %eax,%eax
f013076b:	75 19                	jne    f0130786 <chk2+0x1f1>
f013076d:	68 a4 cf 13 f0       	push   $0xf013cfa4
f0130772:	68 12 cf 13 f0       	push   $0xf013cf12
f0130777:	68 d4 00 00 00       	push   $0xd4
f013077c:	68 27 cf 13 f0       	push   $0xf013cf27
f0130781:	e8 35 fb fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130786:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f013078d:	eb 4e                	jmp    f01307dd <chk2+0x248>
		{
			if (i == __tl) continue;
f013078f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130793:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130796:	74 41                	je     f01307d9 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130798:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f013079d:	8b 40 4c             	mov    0x4c(%eax),%eax
f01307a0:	89 c2                	mov    %eax,%edx
f01307a2:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01307a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01307aa:	c1 e1 04             	shl    $0x4,%ecx
f01307ad:	01 c8                	add    %ecx,%eax
f01307af:	83 ec 08             	sub    $0x8,%esp
f01307b2:	52                   	push   %edx
f01307b3:	50                   	push   %eax
f01307b4:	e8 e6 3e fd ff       	call   f010469f <find_env_in_queue>
f01307b9:	83 c4 10             	add    $0x10,%esp
f01307bc:	85 c0                	test   %eax,%eax
f01307be:	74 1a                	je     f01307da <chk2+0x245>
f01307c0:	68 e8 cf 13 f0       	push   $0xf013cfe8
f01307c5:	68 12 cf 13 f0       	push   $0xf013cf12
f01307ca:	68 d8 00 00 00       	push   $0xd8
f01307cf:	68 27 cf 13 f0       	push   $0xf013cf27
f01307d4:	e8 e2 fa fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f01307d9:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f01307da:	ff 45 f0             	incl   -0x10(%ebp)
f01307dd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01307e2:	0f b6 c0             	movzbl %al,%eax
f01307e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01307e8:	7f a5                	jg     f013078f <chk2+0x1fa>
f01307ea:	eb 01                	jmp    f01307ed <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01307ec:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01307ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01307f0:	c9                   	leave  
f01307f1:	c3                   	ret    

f01307f2 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f01307f2:	55                   	push   %ebp
f01307f3:	89 e5                	mov    %esp,%ebp
f01307f5:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f01307f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01307ff:	eb 40                	jmp    f0130841 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130801:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130804:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013080a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f013080f:	83 ec 08             	sub    $0x8,%esp
f0130812:	52                   	push   %edx
f0130813:	50                   	push   %eax
f0130814:	e8 9b 01 00 00       	call   f01309b4 <check_va2pa>
f0130819:	83 c4 10             	add    $0x10,%esp
f013081c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013081f:	74 19                	je     f013083a <check_boot_pgdir+0x48>
f0130821:	68 28 d0 13 f0       	push   $0xf013d028
f0130826:	68 12 cf 13 f0       	push   $0xf013cf12
f013082b:	68 fa 00 00 00       	push   $0xfa
f0130830:	68 27 cf 13 f0       	push   $0xf013cf27
f0130835:	e8 cb f9 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013083a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130841:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130844:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013084a:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f013084f:	39 c2                	cmp    %eax,%edx
f0130851:	72 ae                	jb     f0130801 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130853:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013085a:	eb 74                	jmp    f01308d0 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f013085c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013085f:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130865:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f013086a:	83 ec 08             	sub    $0x8,%esp
f013086d:	52                   	push   %edx
f013086e:	50                   	push   %eax
f013086f:	e8 40 01 00 00       	call   f01309b4 <check_va2pa>
f0130874:	83 c4 10             	add    $0x10,%esp
f0130877:	c7 45 f0 00 a0 18 f0 	movl   $0xf018a000,-0x10(%ebp)
f013087e:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130885:	77 17                	ja     f013089e <check_boot_pgdir+0xac>
f0130887:	ff 75 f0             	pushl  -0x10(%ebp)
f013088a:	68 60 d0 13 f0       	push   $0xf013d060
f013088f:	68 04 01 00 00       	push   $0x104
f0130894:	68 27 cf 13 f0       	push   $0xf013cf27
f0130899:	e8 67 f9 fc ff       	call   f0100205 <_panic>
f013089e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01308a1:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f01308a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01308aa:	01 ca                	add    %ecx,%edx
f01308ac:	39 d0                	cmp    %edx,%eax
f01308ae:	74 19                	je     f01308c9 <check_boot_pgdir+0xd7>
f01308b0:	68 94 d0 13 f0       	push   $0xf013d094
f01308b5:	68 12 cf 13 f0       	push   $0xf013cf12
f01308ba:	68 04 01 00 00       	push   $0x104
f01308bf:	68 27 cf 13 f0       	push   $0xf013cf27
f01308c4:	e8 3c f9 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01308c9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01308d0:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01308d7:	76 83                	jbe    f013085c <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01308d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01308e0:	e9 af 00 00 00       	jmp    f0130994 <check_boot_pgdir+0x1a2>
		switch (i) {
f01308e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308e8:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01308ed:	74 11                	je     f0130900 <check_boot_pgdir+0x10e>
f01308ef:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01308f4:	72 36                	jb     f013092c <check_boot_pgdir+0x13a>
f01308f6:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01308fb:	83 f8 02             	cmp    $0x2,%eax
f01308fe:	77 2c                	ja     f013092c <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130900:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130905:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130908:	c1 e2 02             	shl    $0x2,%edx
f013090b:	01 d0                	add    %edx,%eax
f013090d:	8b 00                	mov    (%eax),%eax
f013090f:	85 c0                	test   %eax,%eax
f0130911:	75 7a                	jne    f013098d <check_boot_pgdir+0x19b>
f0130913:	68 16 d1 13 f0       	push   $0xf013d116
f0130918:	68 12 cf 13 f0       	push   $0xf013cf12
f013091d:	68 0f 01 00 00       	push   $0x10f
f0130922:	68 27 cf 13 f0       	push   $0xf013cf27
f0130927:	e8 d9 f8 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f013092c:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130933:	76 2c                	jbe    f0130961 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130935:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f013093a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013093d:	c1 e2 02             	shl    $0x2,%edx
f0130940:	01 d0                	add    %edx,%eax
f0130942:	8b 00                	mov    (%eax),%eax
f0130944:	85 c0                	test   %eax,%eax
f0130946:	75 48                	jne    f0130990 <check_boot_pgdir+0x19e>
f0130948:	68 16 d1 13 f0       	push   $0xf013d116
f013094d:	68 12 cf 13 f0       	push   $0xf013cf12
f0130952:	68 13 01 00 00       	push   $0x113
f0130957:	68 27 cf 13 f0       	push   $0xf013cf27
f013095c:	e8 a4 f8 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130961:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130966:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130969:	c1 e2 02             	shl    $0x2,%edx
f013096c:	01 d0                	add    %edx,%eax
f013096e:	8b 00                	mov    (%eax),%eax
f0130970:	85 c0                	test   %eax,%eax
f0130972:	74 1c                	je     f0130990 <check_boot_pgdir+0x19e>
f0130974:	68 2c d1 13 f0       	push   $0xf013d12c
f0130979:	68 12 cf 13 f0       	push   $0xf013cf12
f013097e:	68 15 01 00 00       	push   $0x115
f0130983:	68 27 cf 13 f0       	push   $0xf013cf27
f0130988:	e8 78 f8 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f013098d:	90                   	nop
f013098e:	eb 01                	jmp    f0130991 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130990:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130991:	ff 45 f4             	incl   -0xc(%ebp)
f0130994:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f013099b:	0f 86 44 ff ff ff    	jbe    f01308e5 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01309a1:	83 ec 0c             	sub    $0xc,%esp
f01309a4:	68 48 d1 13 f0       	push   $0xf013d148
f01309a9:	e8 60 03 fd ff       	call   f0100d0e <cprintf>
f01309ae:	83 c4 10             	add    $0x10,%esp
}
f01309b1:	90                   	nop
f01309b2:	c9                   	leave  
f01309b3:	c3                   	ret    

f01309b4 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01309b4:	55                   	push   %ebp
f01309b5:	89 e5                	mov    %esp,%ebp
f01309b7:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01309ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309bd:	c1 e8 16             	shr    $0x16,%eax
f01309c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01309c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01309ca:	01 d0                	add    %edx,%eax
f01309cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01309cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01309d2:	8b 00                	mov    (%eax),%eax
f01309d4:	83 e0 01             	and    $0x1,%eax
f01309d7:	85 c0                	test   %eax,%eax
f01309d9:	75 0a                	jne    f01309e5 <check_va2pa+0x31>
		return ~0;
f01309db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01309e0:	e9 87 00 00 00       	jmp    f0130a6c <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01309e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01309e8:	8b 00                	mov    (%eax),%eax
f01309ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01309ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01309f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01309f5:	c1 e8 0c             	shr    $0xc,%eax
f01309f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01309fb:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0130a00:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130a03:	72 17                	jb     f0130a1c <check_va2pa+0x68>
f0130a05:	ff 75 f0             	pushl  -0x10(%ebp)
f0130a08:	68 68 d1 13 f0       	push   $0xf013d168
f0130a0d:	68 2b 01 00 00       	push   $0x12b
f0130a12:	68 27 cf 13 f0       	push   $0xf013cf27
f0130a17:	e8 e9 f7 fc ff       	call   f0100205 <_panic>
f0130a1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a1f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130a24:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130a27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a2a:	c1 e8 0c             	shr    $0xc,%eax
f0130a2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130a32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130a3c:	01 d0                	add    %edx,%eax
f0130a3e:	8b 00                	mov    (%eax),%eax
f0130a40:	83 e0 01             	and    $0x1,%eax
f0130a43:	85 c0                	test   %eax,%eax
f0130a45:	75 07                	jne    f0130a4e <check_va2pa+0x9a>
		return ~0;
f0130a47:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130a4c:	eb 1e                	jmp    f0130a6c <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a51:	c1 e8 0c             	shr    $0xc,%eax
f0130a54:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130a59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130a63:	01 d0                	add    %edx,%eax
f0130a65:	8b 00                	mov    (%eax),%eax
f0130a67:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130a6c:	c9                   	leave  
f0130a6d:	c3                   	ret    

f0130a6e <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130a6e:	55                   	push   %ebp
f0130a6f:	89 e5                	mov    %esp,%ebp
f0130a71:	53                   	push   %ebx
f0130a72:	83 ec 14             	sub    $0x14,%esp
f0130a75:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a78:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130a7b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130a7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130a81:	8b 45 18             	mov    0x18(%ebp),%eax
f0130a84:	ba 00 00 00 00       	mov    $0x0,%edx
f0130a89:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130a8c:	77 55                	ja     f0130ae3 <printnum+0x75>
f0130a8e:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130a91:	72 05                	jb     f0130a98 <printnum+0x2a>
f0130a93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130a96:	77 4b                	ja     f0130ae3 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130a98:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130a9b:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130a9e:	8b 45 18             	mov    0x18(%ebp),%eax
f0130aa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0130aa6:	52                   	push   %edx
f0130aa7:	50                   	push   %eax
f0130aa8:	ff 75 f4             	pushl  -0xc(%ebp)
f0130aab:	ff 75 f0             	pushl  -0x10(%ebp)
f0130aae:	e8 09 28 00 00       	call   f01332bc <__udivdi3>
f0130ab3:	83 c4 10             	add    $0x10,%esp
f0130ab6:	83 ec 04             	sub    $0x4,%esp
f0130ab9:	ff 75 20             	pushl  0x20(%ebp)
f0130abc:	53                   	push   %ebx
f0130abd:	ff 75 18             	pushl  0x18(%ebp)
f0130ac0:	52                   	push   %edx
f0130ac1:	50                   	push   %eax
f0130ac2:	ff 75 0c             	pushl  0xc(%ebp)
f0130ac5:	ff 75 08             	pushl  0x8(%ebp)
f0130ac8:	e8 a1 ff ff ff       	call   f0130a6e <printnum>
f0130acd:	83 c4 20             	add    $0x20,%esp
f0130ad0:	eb 1a                	jmp    f0130aec <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130ad2:	83 ec 08             	sub    $0x8,%esp
f0130ad5:	ff 75 0c             	pushl  0xc(%ebp)
f0130ad8:	ff 75 20             	pushl  0x20(%ebp)
f0130adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ade:	ff d0                	call   *%eax
f0130ae0:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130ae3:	ff 4d 1c             	decl   0x1c(%ebp)
f0130ae6:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130aea:	7f e6                	jg     f0130ad2 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130aec:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130aef:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130af4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130afa:	53                   	push   %ebx
f0130afb:	51                   	push   %ecx
f0130afc:	52                   	push   %edx
f0130afd:	50                   	push   %eax
f0130afe:	e8 c9 28 00 00       	call   f01333cc <__umoddi3>
f0130b03:	83 c4 10             	add    $0x10,%esp
f0130b06:	05 b4 d3 13 f0       	add    $0xf013d3b4,%eax
f0130b0b:	8a 00                	mov    (%eax),%al
f0130b0d:	0f be c0             	movsbl %al,%eax
f0130b10:	83 ec 08             	sub    $0x8,%esp
f0130b13:	ff 75 0c             	pushl  0xc(%ebp)
f0130b16:	50                   	push   %eax
f0130b17:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b1a:	ff d0                	call   *%eax
f0130b1c:	83 c4 10             	add    $0x10,%esp
}
f0130b1f:	90                   	nop
f0130b20:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130b23:	c9                   	leave  
f0130b24:	c3                   	ret    

f0130b25 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130b25:	55                   	push   %ebp
f0130b26:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130b28:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130b2c:	7e 1c                	jle    f0130b4a <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b31:	8b 00                	mov    (%eax),%eax
f0130b33:	8d 50 08             	lea    0x8(%eax),%edx
f0130b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b39:	89 10                	mov    %edx,(%eax)
f0130b3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b3e:	8b 00                	mov    (%eax),%eax
f0130b40:	83 e8 08             	sub    $0x8,%eax
f0130b43:	8b 50 04             	mov    0x4(%eax),%edx
f0130b46:	8b 00                	mov    (%eax),%eax
f0130b48:	eb 40                	jmp    f0130b8a <getuint+0x65>
	else if (lflag)
f0130b4a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130b4e:	74 1e                	je     f0130b6e <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130b50:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b53:	8b 00                	mov    (%eax),%eax
f0130b55:	8d 50 04             	lea    0x4(%eax),%edx
f0130b58:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b5b:	89 10                	mov    %edx,(%eax)
f0130b5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b60:	8b 00                	mov    (%eax),%eax
f0130b62:	83 e8 04             	sub    $0x4,%eax
f0130b65:	8b 00                	mov    (%eax),%eax
f0130b67:	ba 00 00 00 00       	mov    $0x0,%edx
f0130b6c:	eb 1c                	jmp    f0130b8a <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130b6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b71:	8b 00                	mov    (%eax),%eax
f0130b73:	8d 50 04             	lea    0x4(%eax),%edx
f0130b76:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b79:	89 10                	mov    %edx,(%eax)
f0130b7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b7e:	8b 00                	mov    (%eax),%eax
f0130b80:	83 e8 04             	sub    $0x4,%eax
f0130b83:	8b 00                	mov    (%eax),%eax
f0130b85:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130b8a:	5d                   	pop    %ebp
f0130b8b:	c3                   	ret    

f0130b8c <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130b8c:	55                   	push   %ebp
f0130b8d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130b8f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130b93:	7e 1c                	jle    f0130bb1 <getint+0x25>
		return va_arg(*ap, long long);
f0130b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b98:	8b 00                	mov    (%eax),%eax
f0130b9a:	8d 50 08             	lea    0x8(%eax),%edx
f0130b9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ba0:	89 10                	mov    %edx,(%eax)
f0130ba2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ba5:	8b 00                	mov    (%eax),%eax
f0130ba7:	83 e8 08             	sub    $0x8,%eax
f0130baa:	8b 50 04             	mov    0x4(%eax),%edx
f0130bad:	8b 00                	mov    (%eax),%eax
f0130baf:	eb 38                	jmp    f0130be9 <getint+0x5d>
	else if (lflag)
f0130bb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130bb5:	74 1a                	je     f0130bd1 <getint+0x45>
		return va_arg(*ap, long);
f0130bb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bba:	8b 00                	mov    (%eax),%eax
f0130bbc:	8d 50 04             	lea    0x4(%eax),%edx
f0130bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bc2:	89 10                	mov    %edx,(%eax)
f0130bc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bc7:	8b 00                	mov    (%eax),%eax
f0130bc9:	83 e8 04             	sub    $0x4,%eax
f0130bcc:	8b 00                	mov    (%eax),%eax
f0130bce:	99                   	cltd   
f0130bcf:	eb 18                	jmp    f0130be9 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130bd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bd4:	8b 00                	mov    (%eax),%eax
f0130bd6:	8d 50 04             	lea    0x4(%eax),%edx
f0130bd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bdc:	89 10                	mov    %edx,(%eax)
f0130bde:	8b 45 08             	mov    0x8(%ebp),%eax
f0130be1:	8b 00                	mov    (%eax),%eax
f0130be3:	83 e8 04             	sub    $0x4,%eax
f0130be6:	8b 00                	mov    (%eax),%eax
f0130be8:	99                   	cltd   
}
f0130be9:	5d                   	pop    %ebp
f0130bea:	c3                   	ret    

f0130beb <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130beb:	55                   	push   %ebp
f0130bec:	89 e5                	mov    %esp,%ebp
f0130bee:	56                   	push   %esi
f0130bef:	53                   	push   %ebx
f0130bf0:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130bf3:	eb 17                	jmp    f0130c0c <vprintfmt+0x21>
			if (ch == '\0')
f0130bf5:	85 db                	test   %ebx,%ebx
f0130bf7:	0f 84 af 03 00 00    	je     f0130fac <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130bfd:	83 ec 08             	sub    $0x8,%esp
f0130c00:	ff 75 0c             	pushl  0xc(%ebp)
f0130c03:	53                   	push   %ebx
f0130c04:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c07:	ff d0                	call   *%eax
f0130c09:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130c0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0130c0f:	8d 50 01             	lea    0x1(%eax),%edx
f0130c12:	89 55 10             	mov    %edx,0x10(%ebp)
f0130c15:	8a 00                	mov    (%eax),%al
f0130c17:	0f b6 d8             	movzbl %al,%ebx
f0130c1a:	83 fb 25             	cmp    $0x25,%ebx
f0130c1d:	75 d6                	jne    f0130bf5 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130c1f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130c23:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130c2a:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130c31:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130c38:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130c3f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130c42:	8d 50 01             	lea    0x1(%eax),%edx
f0130c45:	89 55 10             	mov    %edx,0x10(%ebp)
f0130c48:	8a 00                	mov    (%eax),%al
f0130c4a:	0f b6 d8             	movzbl %al,%ebx
f0130c4d:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130c50:	83 f8 55             	cmp    $0x55,%eax
f0130c53:	0f 87 2b 03 00 00    	ja     f0130f84 <vprintfmt+0x399>
f0130c59:	8b 04 85 d8 d3 13 f0 	mov    -0xfec2c28(,%eax,4),%eax
f0130c60:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130c62:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130c66:	eb d7                	jmp    f0130c3f <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130c68:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130c6c:	eb d1                	jmp    f0130c3f <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130c6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130c75:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130c78:	89 d0                	mov    %edx,%eax
f0130c7a:	c1 e0 02             	shl    $0x2,%eax
f0130c7d:	01 d0                	add    %edx,%eax
f0130c7f:	01 c0                	add    %eax,%eax
f0130c81:	01 d8                	add    %ebx,%eax
f0130c83:	83 e8 30             	sub    $0x30,%eax
f0130c86:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130c89:	8b 45 10             	mov    0x10(%ebp),%eax
f0130c8c:	8a 00                	mov    (%eax),%al
f0130c8e:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130c91:	83 fb 2f             	cmp    $0x2f,%ebx
f0130c94:	7e 3e                	jle    f0130cd4 <vprintfmt+0xe9>
f0130c96:	83 fb 39             	cmp    $0x39,%ebx
f0130c99:	7f 39                	jg     f0130cd4 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130c9b:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130c9e:	eb d5                	jmp    f0130c75 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130ca0:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ca3:	83 c0 04             	add    $0x4,%eax
f0130ca6:	89 45 14             	mov    %eax,0x14(%ebp)
f0130ca9:	8b 45 14             	mov    0x14(%ebp),%eax
f0130cac:	83 e8 04             	sub    $0x4,%eax
f0130caf:	8b 00                	mov    (%eax),%eax
f0130cb1:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130cb4:	eb 1f                	jmp    f0130cd5 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130cb6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130cba:	79 83                	jns    f0130c3f <vprintfmt+0x54>
				width = 0;
f0130cbc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130cc3:	e9 77 ff ff ff       	jmp    f0130c3f <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130cc8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130ccf:	e9 6b ff ff ff       	jmp    f0130c3f <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130cd4:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130cd5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130cd9:	0f 89 60 ff ff ff    	jns    f0130c3f <vprintfmt+0x54>
				width = precision, precision = -1;
f0130cdf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130ce2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130ce5:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130cec:	e9 4e ff ff ff       	jmp    f0130c3f <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130cf1:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130cf4:	e9 46 ff ff ff       	jmp    f0130c3f <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0130cf9:	8b 45 14             	mov    0x14(%ebp),%eax
f0130cfc:	83 c0 04             	add    $0x4,%eax
f0130cff:	89 45 14             	mov    %eax,0x14(%ebp)
f0130d02:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d05:	83 e8 04             	sub    $0x4,%eax
f0130d08:	8b 00                	mov    (%eax),%eax
f0130d0a:	83 ec 08             	sub    $0x8,%esp
f0130d0d:	ff 75 0c             	pushl  0xc(%ebp)
f0130d10:	50                   	push   %eax
f0130d11:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d14:	ff d0                	call   *%eax
f0130d16:	83 c4 10             	add    $0x10,%esp
			break;
f0130d19:	e9 89 02 00 00       	jmp    f0130fa7 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130d1e:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d21:	83 c0 04             	add    $0x4,%eax
f0130d24:	89 45 14             	mov    %eax,0x14(%ebp)
f0130d27:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d2a:	83 e8 04             	sub    $0x4,%eax
f0130d2d:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130d2f:	85 db                	test   %ebx,%ebx
f0130d31:	79 02                	jns    f0130d35 <vprintfmt+0x14a>
				err = -err;
f0130d33:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130d35:	83 fb 64             	cmp    $0x64,%ebx
f0130d38:	7f 0b                	jg     f0130d45 <vprintfmt+0x15a>
f0130d3a:	8b 34 9d 20 d2 13 f0 	mov    -0xfec2de0(,%ebx,4),%esi
f0130d41:	85 f6                	test   %esi,%esi
f0130d43:	75 19                	jne    f0130d5e <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130d45:	53                   	push   %ebx
f0130d46:	68 c5 d3 13 f0       	push   $0xf013d3c5
f0130d4b:	ff 75 0c             	pushl  0xc(%ebp)
f0130d4e:	ff 75 08             	pushl  0x8(%ebp)
f0130d51:	e8 5e 02 00 00       	call   f0130fb4 <printfmt>
f0130d56:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130d59:	e9 49 02 00 00       	jmp    f0130fa7 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130d5e:	56                   	push   %esi
f0130d5f:	68 ce d3 13 f0       	push   $0xf013d3ce
f0130d64:	ff 75 0c             	pushl  0xc(%ebp)
f0130d67:	ff 75 08             	pushl  0x8(%ebp)
f0130d6a:	e8 45 02 00 00       	call   f0130fb4 <printfmt>
f0130d6f:	83 c4 10             	add    $0x10,%esp
			break;
f0130d72:	e9 30 02 00 00       	jmp    f0130fa7 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130d77:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d7a:	83 c0 04             	add    $0x4,%eax
f0130d7d:	89 45 14             	mov    %eax,0x14(%ebp)
f0130d80:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d83:	83 e8 04             	sub    $0x4,%eax
f0130d86:	8b 30                	mov    (%eax),%esi
f0130d88:	85 f6                	test   %esi,%esi
f0130d8a:	75 05                	jne    f0130d91 <vprintfmt+0x1a6>
				p = "(null)";
f0130d8c:	be d1 d3 13 f0       	mov    $0xf013d3d1,%esi
			if (width > 0 && padc != '-')
f0130d91:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130d95:	7e 6d                	jle    f0130e04 <vprintfmt+0x219>
f0130d97:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130d9b:	74 67                	je     f0130e04 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130d9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130da0:	83 ec 08             	sub    $0x8,%esp
f0130da3:	50                   	push   %eax
f0130da4:	56                   	push   %esi
f0130da5:	e8 12 05 00 00       	call   f01312bc <strnlen>
f0130daa:	83 c4 10             	add    $0x10,%esp
f0130dad:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130db0:	eb 16                	jmp    f0130dc8 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130db2:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130db6:	83 ec 08             	sub    $0x8,%esp
f0130db9:	ff 75 0c             	pushl  0xc(%ebp)
f0130dbc:	50                   	push   %eax
f0130dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc0:	ff d0                	call   *%eax
f0130dc2:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130dc5:	ff 4d e4             	decl   -0x1c(%ebp)
f0130dc8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130dcc:	7f e4                	jg     f0130db2 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130dce:	eb 34                	jmp    f0130e04 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130dd0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130dd4:	74 1c                	je     f0130df2 <vprintfmt+0x207>
f0130dd6:	83 fb 1f             	cmp    $0x1f,%ebx
f0130dd9:	7e 05                	jle    f0130de0 <vprintfmt+0x1f5>
f0130ddb:	83 fb 7e             	cmp    $0x7e,%ebx
f0130dde:	7e 12                	jle    f0130df2 <vprintfmt+0x207>
					putch('?', putdat);
f0130de0:	83 ec 08             	sub    $0x8,%esp
f0130de3:	ff 75 0c             	pushl  0xc(%ebp)
f0130de6:	6a 3f                	push   $0x3f
f0130de8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130deb:	ff d0                	call   *%eax
f0130ded:	83 c4 10             	add    $0x10,%esp
f0130df0:	eb 0f                	jmp    f0130e01 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130df2:	83 ec 08             	sub    $0x8,%esp
f0130df5:	ff 75 0c             	pushl  0xc(%ebp)
f0130df8:	53                   	push   %ebx
f0130df9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dfc:	ff d0                	call   *%eax
f0130dfe:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130e01:	ff 4d e4             	decl   -0x1c(%ebp)
f0130e04:	89 f0                	mov    %esi,%eax
f0130e06:	8d 70 01             	lea    0x1(%eax),%esi
f0130e09:	8a 00                	mov    (%eax),%al
f0130e0b:	0f be d8             	movsbl %al,%ebx
f0130e0e:	85 db                	test   %ebx,%ebx
f0130e10:	74 24                	je     f0130e36 <vprintfmt+0x24b>
f0130e12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130e16:	78 b8                	js     f0130dd0 <vprintfmt+0x1e5>
f0130e18:	ff 4d e0             	decl   -0x20(%ebp)
f0130e1b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130e1f:	79 af                	jns    f0130dd0 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130e21:	eb 13                	jmp    f0130e36 <vprintfmt+0x24b>
				putch(' ', putdat);
f0130e23:	83 ec 08             	sub    $0x8,%esp
f0130e26:	ff 75 0c             	pushl  0xc(%ebp)
f0130e29:	6a 20                	push   $0x20
f0130e2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e2e:	ff d0                	call   *%eax
f0130e30:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130e33:	ff 4d e4             	decl   -0x1c(%ebp)
f0130e36:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130e3a:	7f e7                	jg     f0130e23 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130e3c:	e9 66 01 00 00       	jmp    f0130fa7 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130e41:	83 ec 08             	sub    $0x8,%esp
f0130e44:	ff 75 e8             	pushl  -0x18(%ebp)
f0130e47:	8d 45 14             	lea    0x14(%ebp),%eax
f0130e4a:	50                   	push   %eax
f0130e4b:	e8 3c fd ff ff       	call   f0130b8c <getint>
f0130e50:	83 c4 10             	add    $0x10,%esp
f0130e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e56:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130e59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130e5f:	85 d2                	test   %edx,%edx
f0130e61:	79 23                	jns    f0130e86 <vprintfmt+0x29b>
				putch('-', putdat);
f0130e63:	83 ec 08             	sub    $0x8,%esp
f0130e66:	ff 75 0c             	pushl  0xc(%ebp)
f0130e69:	6a 2d                	push   $0x2d
f0130e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e6e:	ff d0                	call   *%eax
f0130e70:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130e73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130e79:	f7 d8                	neg    %eax
f0130e7b:	83 d2 00             	adc    $0x0,%edx
f0130e7e:	f7 da                	neg    %edx
f0130e80:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e83:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130e86:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130e8d:	e9 bc 00 00 00       	jmp    f0130f4e <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130e92:	83 ec 08             	sub    $0x8,%esp
f0130e95:	ff 75 e8             	pushl  -0x18(%ebp)
f0130e98:	8d 45 14             	lea    0x14(%ebp),%eax
f0130e9b:	50                   	push   %eax
f0130e9c:	e8 84 fc ff ff       	call   f0130b25 <getuint>
f0130ea1:	83 c4 10             	add    $0x10,%esp
f0130ea4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130ea7:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130eaa:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130eb1:	e9 98 00 00 00       	jmp    f0130f4e <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130eb6:	83 ec 08             	sub    $0x8,%esp
f0130eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0130ebc:	6a 58                	push   $0x58
f0130ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ec1:	ff d0                	call   *%eax
f0130ec3:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130ec6:	83 ec 08             	sub    $0x8,%esp
f0130ec9:	ff 75 0c             	pushl  0xc(%ebp)
f0130ecc:	6a 58                	push   $0x58
f0130ece:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed1:	ff d0                	call   *%eax
f0130ed3:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130ed6:	83 ec 08             	sub    $0x8,%esp
f0130ed9:	ff 75 0c             	pushl  0xc(%ebp)
f0130edc:	6a 58                	push   $0x58
f0130ede:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee1:	ff d0                	call   *%eax
f0130ee3:	83 c4 10             	add    $0x10,%esp
			break;
f0130ee6:	e9 bc 00 00 00       	jmp    f0130fa7 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130eeb:	83 ec 08             	sub    $0x8,%esp
f0130eee:	ff 75 0c             	pushl  0xc(%ebp)
f0130ef1:	6a 30                	push   $0x30
f0130ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ef6:	ff d0                	call   *%eax
f0130ef8:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130efb:	83 ec 08             	sub    $0x8,%esp
f0130efe:	ff 75 0c             	pushl  0xc(%ebp)
f0130f01:	6a 78                	push   $0x78
f0130f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f06:	ff d0                	call   *%eax
f0130f08:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130f0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f0e:	83 c0 04             	add    $0x4,%eax
f0130f11:	89 45 14             	mov    %eax,0x14(%ebp)
f0130f14:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f17:	83 e8 04             	sub    $0x4,%eax
f0130f1a:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130f1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130f1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130f26:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130f2d:	eb 1f                	jmp    f0130f4e <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130f2f:	83 ec 08             	sub    $0x8,%esp
f0130f32:	ff 75 e8             	pushl  -0x18(%ebp)
f0130f35:	8d 45 14             	lea    0x14(%ebp),%eax
f0130f38:	50                   	push   %eax
f0130f39:	e8 e7 fb ff ff       	call   f0130b25 <getuint>
f0130f3e:	83 c4 10             	add    $0x10,%esp
f0130f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130f44:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130f47:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0130f4e:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130f52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130f55:	83 ec 04             	sub    $0x4,%esp
f0130f58:	52                   	push   %edx
f0130f59:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130f5c:	50                   	push   %eax
f0130f5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0130f60:	ff 75 f0             	pushl  -0x10(%ebp)
f0130f63:	ff 75 0c             	pushl  0xc(%ebp)
f0130f66:	ff 75 08             	pushl  0x8(%ebp)
f0130f69:	e8 00 fb ff ff       	call   f0130a6e <printnum>
f0130f6e:	83 c4 20             	add    $0x20,%esp
			break;
f0130f71:	eb 34                	jmp    f0130fa7 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130f73:	83 ec 08             	sub    $0x8,%esp
f0130f76:	ff 75 0c             	pushl  0xc(%ebp)
f0130f79:	53                   	push   %ebx
f0130f7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f7d:	ff d0                	call   *%eax
f0130f7f:	83 c4 10             	add    $0x10,%esp
			break;
f0130f82:	eb 23                	jmp    f0130fa7 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130f84:	83 ec 08             	sub    $0x8,%esp
f0130f87:	ff 75 0c             	pushl  0xc(%ebp)
f0130f8a:	6a 25                	push   $0x25
f0130f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f8f:	ff d0                	call   *%eax
f0130f91:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130f94:	ff 4d 10             	decl   0x10(%ebp)
f0130f97:	eb 03                	jmp    f0130f9c <vprintfmt+0x3b1>
f0130f99:	ff 4d 10             	decl   0x10(%ebp)
f0130f9c:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f9f:	48                   	dec    %eax
f0130fa0:	8a 00                	mov    (%eax),%al
f0130fa2:	3c 25                	cmp    $0x25,%al
f0130fa4:	75 f3                	jne    f0130f99 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130fa6:	90                   	nop
		}
	}
f0130fa7:	e9 47 fc ff ff       	jmp    f0130bf3 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130fac:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130fad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130fb0:	5b                   	pop    %ebx
f0130fb1:	5e                   	pop    %esi
f0130fb2:	5d                   	pop    %ebp
f0130fb3:	c3                   	ret    

f0130fb4 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130fb4:	55                   	push   %ebp
f0130fb5:	89 e5                	mov    %esp,%ebp
f0130fb7:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130fba:	8d 45 10             	lea    0x10(%ebp),%eax
f0130fbd:	83 c0 04             	add    $0x4,%eax
f0130fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130fc3:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fc6:	ff 75 f4             	pushl  -0xc(%ebp)
f0130fc9:	50                   	push   %eax
f0130fca:	ff 75 0c             	pushl  0xc(%ebp)
f0130fcd:	ff 75 08             	pushl  0x8(%ebp)
f0130fd0:	e8 16 fc ff ff       	call   f0130beb <vprintfmt>
f0130fd5:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130fd8:	90                   	nop
f0130fd9:	c9                   	leave  
f0130fda:	c3                   	ret    

f0130fdb <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130fdb:	55                   	push   %ebp
f0130fdc:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130fde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fe1:	8b 40 08             	mov    0x8(%eax),%eax
f0130fe4:	8d 50 01             	lea    0x1(%eax),%edx
f0130fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fea:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ff0:	8b 10                	mov    (%eax),%edx
f0130ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ff5:	8b 40 04             	mov    0x4(%eax),%eax
f0130ff8:	39 c2                	cmp    %eax,%edx
f0130ffa:	73 12                	jae    f013100e <sprintputch+0x33>
		*b->buf++ = ch;
f0130ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fff:	8b 00                	mov    (%eax),%eax
f0131001:	8d 48 01             	lea    0x1(%eax),%ecx
f0131004:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131007:	89 0a                	mov    %ecx,(%edx)
f0131009:	8b 55 08             	mov    0x8(%ebp),%edx
f013100c:	88 10                	mov    %dl,(%eax)
}
f013100e:	90                   	nop
f013100f:	5d                   	pop    %ebp
f0131010:	c3                   	ret    

f0131011 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131011:	55                   	push   %ebp
f0131012:	89 e5                	mov    %esp,%ebp
f0131014:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131017:	8b 45 08             	mov    0x8(%ebp),%eax
f013101a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013101d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131020:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131023:	8b 45 08             	mov    0x8(%ebp),%eax
f0131026:	01 d0                	add    %edx,%eax
f0131028:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013102b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131032:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131036:	74 06                	je     f013103e <vsnprintf+0x2d>
f0131038:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013103c:	7f 07                	jg     f0131045 <vsnprintf+0x34>
		return -E_INVAL;
f013103e:	b8 03 00 00 00       	mov    $0x3,%eax
f0131043:	eb 20                	jmp    f0131065 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0131045:	ff 75 14             	pushl  0x14(%ebp)
f0131048:	ff 75 10             	pushl  0x10(%ebp)
f013104b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f013104e:	50                   	push   %eax
f013104f:	68 db 0f 13 f0       	push   $0xf0130fdb
f0131054:	e8 92 fb ff ff       	call   f0130beb <vprintfmt>
f0131059:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f013105c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013105f:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0131062:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0131065:	c9                   	leave  
f0131066:	c3                   	ret    

f0131067 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0131067:	55                   	push   %ebp
f0131068:	89 e5                	mov    %esp,%ebp
f013106a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f013106d:	8d 45 10             	lea    0x10(%ebp),%eax
f0131070:	83 c0 04             	add    $0x4,%eax
f0131073:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0131076:	8b 45 10             	mov    0x10(%ebp),%eax
f0131079:	ff 75 f4             	pushl  -0xc(%ebp)
f013107c:	50                   	push   %eax
f013107d:	ff 75 0c             	pushl  0xc(%ebp)
f0131080:	ff 75 08             	pushl  0x8(%ebp)
f0131083:	e8 89 ff ff ff       	call   f0131011 <vsnprintf>
f0131088:	83 c4 10             	add    $0x10,%esp
f013108b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f013108e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0131091:	c9                   	leave  
f0131092:	c3                   	ret    

f0131093 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0131093:	55                   	push   %ebp
f0131094:	89 e5                	mov    %esp,%ebp
f0131096:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0131099:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013109d:	74 13                	je     f01310b2 <readline+0x1f>
		cprintf("%s", prompt);
f013109f:	83 ec 08             	sub    $0x8,%esp
f01310a2:	ff 75 08             	pushl  0x8(%ebp)
f01310a5:	68 30 d5 13 f0       	push   $0xf013d530
f01310aa:	e8 5f fc fc ff       	call   f0100d0e <cprintf>
f01310af:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01310b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01310b9:	83 ec 0c             	sub    $0xc,%esp
f01310bc:	6a 00                	push   $0x0
f01310be:	e8 f8 fb fc ff       	call   f0100cbb <iscons>
f01310c3:	83 c4 10             	add    $0x10,%esp
f01310c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01310c9:	e8 d4 fb fc ff       	call   f0100ca2 <getchar>
f01310ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01310d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01310d5:	79 22                	jns    f01310f9 <readline+0x66>
			if (c != -E_EOF)
f01310d7:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01310db:	0f 84 ad 00 00 00    	je     f013118e <readline+0xfb>
				cprintf("read error: %e\n", c);
f01310e1:	83 ec 08             	sub    $0x8,%esp
f01310e4:	ff 75 ec             	pushl  -0x14(%ebp)
f01310e7:	68 33 d5 13 f0       	push   $0xf013d533
f01310ec:	e8 1d fc fc ff       	call   f0100d0e <cprintf>
f01310f1:	83 c4 10             	add    $0x10,%esp
			return;
f01310f4:	e9 95 00 00 00       	jmp    f013118e <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01310f9:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01310fd:	7e 34                	jle    f0131133 <readline+0xa0>
f01310ff:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131106:	7f 2b                	jg     f0131133 <readline+0xa0>
			if (echoing)
f0131108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013110c:	74 0e                	je     f013111c <readline+0x89>
				cputchar(c);
f013110e:	83 ec 0c             	sub    $0xc,%esp
f0131111:	ff 75 ec             	pushl  -0x14(%ebp)
f0131114:	e8 72 fb fc ff       	call   f0100c8b <cputchar>
f0131119:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013111c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013111f:	8d 50 01             	lea    0x1(%eax),%edx
f0131122:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131125:	89 c2                	mov    %eax,%edx
f0131127:	8b 45 0c             	mov    0xc(%ebp),%eax
f013112a:	01 d0                	add    %edx,%eax
f013112c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013112f:	88 10                	mov    %dl,(%eax)
f0131131:	eb 56                	jmp    f0131189 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0131133:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131137:	75 1f                	jne    f0131158 <readline+0xc5>
f0131139:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013113d:	7e 19                	jle    f0131158 <readline+0xc5>
			if (echoing)
f013113f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131143:	74 0e                	je     f0131153 <readline+0xc0>
				cputchar(c);
f0131145:	83 ec 0c             	sub    $0xc,%esp
f0131148:	ff 75 ec             	pushl  -0x14(%ebp)
f013114b:	e8 3b fb fc ff       	call   f0100c8b <cputchar>
f0131150:	83 c4 10             	add    $0x10,%esp

			i--;
f0131153:	ff 4d f4             	decl   -0xc(%ebp)
f0131156:	eb 31                	jmp    f0131189 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0131158:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013115c:	74 0a                	je     f0131168 <readline+0xd5>
f013115e:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131162:	0f 85 61 ff ff ff    	jne    f01310c9 <readline+0x36>
			if (echoing)
f0131168:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013116c:	74 0e                	je     f013117c <readline+0xe9>
				cputchar(c);
f013116e:	83 ec 0c             	sub    $0xc,%esp
f0131171:	ff 75 ec             	pushl  -0x14(%ebp)
f0131174:	e8 12 fb fc ff       	call   f0100c8b <cputchar>
f0131179:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f013117c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013117f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131182:	01 d0                	add    %edx,%eax
f0131184:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0131187:	eb 06                	jmp    f013118f <readline+0xfc>
		}
	}
f0131189:	e9 3b ff ff ff       	jmp    f01310c9 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f013118e:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f013118f:	c9                   	leave  
f0131190:	c3                   	ret    

f0131191 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0131191:	55                   	push   %ebp
f0131192:	89 e5                	mov    %esp,%ebp
f0131194:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0131197:	e8 82 bb fd ff       	call   f010cd1e <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f013119c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01311a0:	74 13                	je     f01311b5 <atomic_readline+0x24>
		cprintf("%s", prompt);
f01311a2:	83 ec 08             	sub    $0x8,%esp
f01311a5:	ff 75 08             	pushl  0x8(%ebp)
f01311a8:	68 30 d5 13 f0       	push   $0xf013d530
f01311ad:	e8 5c fb fc ff       	call   f0100d0e <cprintf>
f01311b2:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01311b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01311bc:	83 ec 0c             	sub    $0xc,%esp
f01311bf:	6a 00                	push   $0x0
f01311c1:	e8 f5 fa fc ff       	call   f0100cbb <iscons>
f01311c6:	83 c4 10             	add    $0x10,%esp
f01311c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01311cc:	e8 d1 fa fc ff       	call   f0100ca2 <getchar>
f01311d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01311d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01311d8:	79 23                	jns    f01311fd <atomic_readline+0x6c>
			if (c != -E_EOF)
f01311da:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01311de:	74 13                	je     f01311f3 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01311e0:	83 ec 08             	sub    $0x8,%esp
f01311e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01311e6:	68 33 d5 13 f0       	push   $0xf013d533
f01311eb:	e8 1e fb fc ff       	call   f0100d0e <cprintf>
f01311f0:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01311f3:	e8 40 bb fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f01311f8:	e9 9a 00 00 00       	jmp    f0131297 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01311fd:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131201:	7e 34                	jle    f0131237 <atomic_readline+0xa6>
f0131203:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013120a:	7f 2b                	jg     f0131237 <atomic_readline+0xa6>
			if (echoing)
f013120c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131210:	74 0e                	je     f0131220 <atomic_readline+0x8f>
				cputchar(c);
f0131212:	83 ec 0c             	sub    $0xc,%esp
f0131215:	ff 75 ec             	pushl  -0x14(%ebp)
f0131218:	e8 6e fa fc ff       	call   f0100c8b <cputchar>
f013121d:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131220:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131223:	8d 50 01             	lea    0x1(%eax),%edx
f0131226:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131229:	89 c2                	mov    %eax,%edx
f013122b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013122e:	01 d0                	add    %edx,%eax
f0131230:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131233:	88 10                	mov    %dl,(%eax)
f0131235:	eb 5b                	jmp    f0131292 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131237:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013123b:	75 1f                	jne    f013125c <atomic_readline+0xcb>
f013123d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131241:	7e 19                	jle    f013125c <atomic_readline+0xcb>
			if (echoing)
f0131243:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131247:	74 0e                	je     f0131257 <atomic_readline+0xc6>
				cputchar(c);
f0131249:	83 ec 0c             	sub    $0xc,%esp
f013124c:	ff 75 ec             	pushl  -0x14(%ebp)
f013124f:	e8 37 fa fc ff       	call   f0100c8b <cputchar>
f0131254:	83 c4 10             	add    $0x10,%esp
			i--;
f0131257:	ff 4d f4             	decl   -0xc(%ebp)
f013125a:	eb 36                	jmp    f0131292 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f013125c:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131260:	74 0a                	je     f013126c <atomic_readline+0xdb>
f0131262:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131266:	0f 85 60 ff ff ff    	jne    f01311cc <atomic_readline+0x3b>
			if (echoing)
f013126c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131270:	74 0e                	je     f0131280 <atomic_readline+0xef>
				cputchar(c);
f0131272:	83 ec 0c             	sub    $0xc,%esp
f0131275:	ff 75 ec             	pushl  -0x14(%ebp)
f0131278:	e8 0e fa fc ff       	call   f0100c8b <cputchar>
f013127d:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131283:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131286:	01 d0                	add    %edx,%eax
f0131288:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013128b:	e8 a8 ba fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0131290:	eb 05                	jmp    f0131297 <atomic_readline+0x106>
		}
	}
f0131292:	e9 35 ff ff ff       	jmp    f01311cc <atomic_readline+0x3b>
}
f0131297:	c9                   	leave  
f0131298:	c3                   	ret    

f0131299 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0131299:	55                   	push   %ebp
f013129a:	89 e5                	mov    %esp,%ebp
f013129c:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f013129f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01312a6:	eb 06                	jmp    f01312ae <strlen+0x15>
		n++;
f01312a8:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01312ab:	ff 45 08             	incl   0x8(%ebp)
f01312ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b1:	8a 00                	mov    (%eax),%al
f01312b3:	84 c0                	test   %al,%al
f01312b5:	75 f1                	jne    f01312a8 <strlen+0xf>
		n++;
	return n;
f01312b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01312ba:	c9                   	leave  
f01312bb:	c3                   	ret    

f01312bc <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01312bc:	55                   	push   %ebp
f01312bd:	89 e5                	mov    %esp,%ebp
f01312bf:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01312c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01312c9:	eb 09                	jmp    f01312d4 <strnlen+0x18>
		n++;
f01312cb:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01312ce:	ff 45 08             	incl   0x8(%ebp)
f01312d1:	ff 4d 0c             	decl   0xc(%ebp)
f01312d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01312d8:	74 09                	je     f01312e3 <strnlen+0x27>
f01312da:	8b 45 08             	mov    0x8(%ebp),%eax
f01312dd:	8a 00                	mov    (%eax),%al
f01312df:	84 c0                	test   %al,%al
f01312e1:	75 e8                	jne    f01312cb <strnlen+0xf>
		n++;
	return n;
f01312e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01312e6:	c9                   	leave  
f01312e7:	c3                   	ret    

f01312e8 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01312e8:	55                   	push   %ebp
f01312e9:	89 e5                	mov    %esp,%ebp
f01312eb:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01312ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01312f4:	90                   	nop
f01312f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f8:	8d 50 01             	lea    0x1(%eax),%edx
f01312fb:	89 55 08             	mov    %edx,0x8(%ebp)
f01312fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131301:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131304:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131307:	8a 12                	mov    (%edx),%dl
f0131309:	88 10                	mov    %dl,(%eax)
f013130b:	8a 00                	mov    (%eax),%al
f013130d:	84 c0                	test   %al,%al
f013130f:	75 e4                	jne    f01312f5 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131311:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131314:	c9                   	leave  
f0131315:	c3                   	ret    

f0131316 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131316:	55                   	push   %ebp
f0131317:	89 e5                	mov    %esp,%ebp
f0131319:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f013131c:	8b 45 08             	mov    0x8(%ebp),%eax
f013131f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131322:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131329:	eb 1f                	jmp    f013134a <strncpy+0x34>
		*dst++ = *src;
f013132b:	8b 45 08             	mov    0x8(%ebp),%eax
f013132e:	8d 50 01             	lea    0x1(%eax),%edx
f0131331:	89 55 08             	mov    %edx,0x8(%ebp)
f0131334:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131337:	8a 12                	mov    (%edx),%dl
f0131339:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f013133b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013133e:	8a 00                	mov    (%eax),%al
f0131340:	84 c0                	test   %al,%al
f0131342:	74 03                	je     f0131347 <strncpy+0x31>
			src++;
f0131344:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131347:	ff 45 fc             	incl   -0x4(%ebp)
f013134a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013134d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131350:	72 d9                	jb     f013132b <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131352:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131355:	c9                   	leave  
f0131356:	c3                   	ret    

f0131357 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131357:	55                   	push   %ebp
f0131358:	89 e5                	mov    %esp,%ebp
f013135a:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f013135d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131360:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131363:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131367:	74 30                	je     f0131399 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131369:	eb 16                	jmp    f0131381 <strlcpy+0x2a>
			*dst++ = *src++;
f013136b:	8b 45 08             	mov    0x8(%ebp),%eax
f013136e:	8d 50 01             	lea    0x1(%eax),%edx
f0131371:	89 55 08             	mov    %edx,0x8(%ebp)
f0131374:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131377:	8d 4a 01             	lea    0x1(%edx),%ecx
f013137a:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013137d:	8a 12                	mov    (%edx),%dl
f013137f:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131381:	ff 4d 10             	decl   0x10(%ebp)
f0131384:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131388:	74 09                	je     f0131393 <strlcpy+0x3c>
f013138a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013138d:	8a 00                	mov    (%eax),%al
f013138f:	84 c0                	test   %al,%al
f0131391:	75 d8                	jne    f013136b <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131393:	8b 45 08             	mov    0x8(%ebp),%eax
f0131396:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131399:	8b 55 08             	mov    0x8(%ebp),%edx
f013139c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013139f:	29 c2                	sub    %eax,%edx
f01313a1:	89 d0                	mov    %edx,%eax
}
f01313a3:	c9                   	leave  
f01313a4:	c3                   	ret    

f01313a5 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01313a5:	55                   	push   %ebp
f01313a6:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01313a8:	eb 06                	jmp    f01313b0 <strcmp+0xb>
		p++, q++;
f01313aa:	ff 45 08             	incl   0x8(%ebp)
f01313ad:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01313b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01313b3:	8a 00                	mov    (%eax),%al
f01313b5:	84 c0                	test   %al,%al
f01313b7:	74 0e                	je     f01313c7 <strcmp+0x22>
f01313b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01313bc:	8a 10                	mov    (%eax),%dl
f01313be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313c1:	8a 00                	mov    (%eax),%al
f01313c3:	38 c2                	cmp    %al,%dl
f01313c5:	74 e3                	je     f01313aa <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01313c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01313ca:	8a 00                	mov    (%eax),%al
f01313cc:	0f b6 d0             	movzbl %al,%edx
f01313cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313d2:	8a 00                	mov    (%eax),%al
f01313d4:	0f b6 c0             	movzbl %al,%eax
f01313d7:	29 c2                	sub    %eax,%edx
f01313d9:	89 d0                	mov    %edx,%eax
}
f01313db:	5d                   	pop    %ebp
f01313dc:	c3                   	ret    

f01313dd <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01313dd:	55                   	push   %ebp
f01313de:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01313e0:	eb 09                	jmp    f01313eb <strncmp+0xe>
		n--, p++, q++;
f01313e2:	ff 4d 10             	decl   0x10(%ebp)
f01313e5:	ff 45 08             	incl   0x8(%ebp)
f01313e8:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01313eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01313ef:	74 17                	je     f0131408 <strncmp+0x2b>
f01313f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01313f4:	8a 00                	mov    (%eax),%al
f01313f6:	84 c0                	test   %al,%al
f01313f8:	74 0e                	je     f0131408 <strncmp+0x2b>
f01313fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01313fd:	8a 10                	mov    (%eax),%dl
f01313ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131402:	8a 00                	mov    (%eax),%al
f0131404:	38 c2                	cmp    %al,%dl
f0131406:	74 da                	je     f01313e2 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131408:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013140c:	75 07                	jne    f0131415 <strncmp+0x38>
		return 0;
f013140e:	b8 00 00 00 00       	mov    $0x0,%eax
f0131413:	eb 14                	jmp    f0131429 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131415:	8b 45 08             	mov    0x8(%ebp),%eax
f0131418:	8a 00                	mov    (%eax),%al
f013141a:	0f b6 d0             	movzbl %al,%edx
f013141d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131420:	8a 00                	mov    (%eax),%al
f0131422:	0f b6 c0             	movzbl %al,%eax
f0131425:	29 c2                	sub    %eax,%edx
f0131427:	89 d0                	mov    %edx,%eax
}
f0131429:	5d                   	pop    %ebp
f013142a:	c3                   	ret    

f013142b <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f013142b:	55                   	push   %ebp
f013142c:	89 e5                	mov    %esp,%ebp
f013142e:	83 ec 04             	sub    $0x4,%esp
f0131431:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131434:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131437:	eb 12                	jmp    f013144b <strchr+0x20>
		if (*s == c)
f0131439:	8b 45 08             	mov    0x8(%ebp),%eax
f013143c:	8a 00                	mov    (%eax),%al
f013143e:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131441:	75 05                	jne    f0131448 <strchr+0x1d>
			return (char *) s;
f0131443:	8b 45 08             	mov    0x8(%ebp),%eax
f0131446:	eb 11                	jmp    f0131459 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131448:	ff 45 08             	incl   0x8(%ebp)
f013144b:	8b 45 08             	mov    0x8(%ebp),%eax
f013144e:	8a 00                	mov    (%eax),%al
f0131450:	84 c0                	test   %al,%al
f0131452:	75 e5                	jne    f0131439 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131454:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131459:	c9                   	leave  
f013145a:	c3                   	ret    

f013145b <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f013145b:	55                   	push   %ebp
f013145c:	89 e5                	mov    %esp,%ebp
f013145e:	83 ec 04             	sub    $0x4,%esp
f0131461:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131464:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131467:	eb 0d                	jmp    f0131476 <strfind+0x1b>
		if (*s == c)
f0131469:	8b 45 08             	mov    0x8(%ebp),%eax
f013146c:	8a 00                	mov    (%eax),%al
f013146e:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131471:	74 0e                	je     f0131481 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131473:	ff 45 08             	incl   0x8(%ebp)
f0131476:	8b 45 08             	mov    0x8(%ebp),%eax
f0131479:	8a 00                	mov    (%eax),%al
f013147b:	84 c0                	test   %al,%al
f013147d:	75 ea                	jne    f0131469 <strfind+0xe>
f013147f:	eb 01                	jmp    f0131482 <strfind+0x27>
		if (*s == c)
			break;
f0131481:	90                   	nop
	return (char *) s;
f0131482:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131485:	c9                   	leave  
f0131486:	c3                   	ret    

f0131487 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131487:	55                   	push   %ebp
f0131488:	89 e5                	mov    %esp,%ebp
f013148a:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f013148d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131490:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131493:	8b 45 10             	mov    0x10(%ebp),%eax
f0131496:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131499:	eb 0e                	jmp    f01314a9 <memset+0x22>
		*p++ = c;
f013149b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013149e:	8d 50 01             	lea    0x1(%eax),%edx
f01314a1:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01314a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01314a7:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01314a9:	ff 4d f8             	decl   -0x8(%ebp)
f01314ac:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01314b0:	79 e9                	jns    f013149b <memset+0x14>
		*p++ = c;

	return v;
f01314b2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01314b5:	c9                   	leave  
f01314b6:	c3                   	ret    

f01314b7 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01314b7:	55                   	push   %ebp
f01314b8:	89 e5                	mov    %esp,%ebp
f01314ba:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01314bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01314c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01314c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01314c9:	eb 16                	jmp    f01314e1 <memcpy+0x2a>
		*d++ = *s++;
f01314cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01314ce:	8d 50 01             	lea    0x1(%eax),%edx
f01314d1:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01314d4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01314d7:	8d 4a 01             	lea    0x1(%edx),%ecx
f01314da:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01314dd:	8a 12                	mov    (%edx),%dl
f01314df:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01314e1:	8b 45 10             	mov    0x10(%ebp),%eax
f01314e4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01314e7:	89 55 10             	mov    %edx,0x10(%ebp)
f01314ea:	85 c0                	test   %eax,%eax
f01314ec:	75 dd                	jne    f01314cb <memcpy+0x14>
		*d++ = *s++;

	return dst;
f01314ee:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01314f1:	c9                   	leave  
f01314f2:	c3                   	ret    

f01314f3 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f01314f3:	55                   	push   %ebp
f01314f4:	89 e5                	mov    %esp,%ebp
f01314f6:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01314f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01314ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131502:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131505:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131508:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013150b:	73 50                	jae    f013155d <memmove+0x6a>
f013150d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131510:	8b 45 10             	mov    0x10(%ebp),%eax
f0131513:	01 d0                	add    %edx,%eax
f0131515:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131518:	76 43                	jbe    f013155d <memmove+0x6a>
		s += n;
f013151a:	8b 45 10             	mov    0x10(%ebp),%eax
f013151d:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131520:	8b 45 10             	mov    0x10(%ebp),%eax
f0131523:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131526:	eb 10                	jmp    f0131538 <memmove+0x45>
			*--d = *--s;
f0131528:	ff 4d f8             	decl   -0x8(%ebp)
f013152b:	ff 4d fc             	decl   -0x4(%ebp)
f013152e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131531:	8a 10                	mov    (%eax),%dl
f0131533:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131536:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131538:	8b 45 10             	mov    0x10(%ebp),%eax
f013153b:	8d 50 ff             	lea    -0x1(%eax),%edx
f013153e:	89 55 10             	mov    %edx,0x10(%ebp)
f0131541:	85 c0                	test   %eax,%eax
f0131543:	75 e3                	jne    f0131528 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131545:	eb 23                	jmp    f013156a <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131547:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013154a:	8d 50 01             	lea    0x1(%eax),%edx
f013154d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131550:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131553:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131556:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131559:	8a 12                	mov    (%edx),%dl
f013155b:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f013155d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131560:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131563:	89 55 10             	mov    %edx,0x10(%ebp)
f0131566:	85 c0                	test   %eax,%eax
f0131568:	75 dd                	jne    f0131547 <memmove+0x54>
			*d++ = *s++;

	return dst;
f013156a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013156d:	c9                   	leave  
f013156e:	c3                   	ret    

f013156f <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f013156f:	55                   	push   %ebp
f0131570:	89 e5                	mov    %esp,%ebp
f0131572:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131575:	8b 45 08             	mov    0x8(%ebp),%eax
f0131578:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f013157b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013157e:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131581:	eb 2a                	jmp    f01315ad <memcmp+0x3e>
		if (*s1 != *s2)
f0131583:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131586:	8a 10                	mov    (%eax),%dl
f0131588:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013158b:	8a 00                	mov    (%eax),%al
f013158d:	38 c2                	cmp    %al,%dl
f013158f:	74 16                	je     f01315a7 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131591:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131594:	8a 00                	mov    (%eax),%al
f0131596:	0f b6 d0             	movzbl %al,%edx
f0131599:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013159c:	8a 00                	mov    (%eax),%al
f013159e:	0f b6 c0             	movzbl %al,%eax
f01315a1:	29 c2                	sub    %eax,%edx
f01315a3:	89 d0                	mov    %edx,%eax
f01315a5:	eb 18                	jmp    f01315bf <memcmp+0x50>
		s1++, s2++;
f01315a7:	ff 45 fc             	incl   -0x4(%ebp)
f01315aa:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01315ad:	8b 45 10             	mov    0x10(%ebp),%eax
f01315b0:	8d 50 ff             	lea    -0x1(%eax),%edx
f01315b3:	89 55 10             	mov    %edx,0x10(%ebp)
f01315b6:	85 c0                	test   %eax,%eax
f01315b8:	75 c9                	jne    f0131583 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01315ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01315bf:	c9                   	leave  
f01315c0:	c3                   	ret    

f01315c1 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01315c1:	55                   	push   %ebp
f01315c2:	89 e5                	mov    %esp,%ebp
f01315c4:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01315c7:	8b 55 08             	mov    0x8(%ebp),%edx
f01315ca:	8b 45 10             	mov    0x10(%ebp),%eax
f01315cd:	01 d0                	add    %edx,%eax
f01315cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01315d2:	eb 15                	jmp    f01315e9 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01315d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315d7:	8a 00                	mov    (%eax),%al
f01315d9:	0f b6 d0             	movzbl %al,%edx
f01315dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315df:	0f b6 c0             	movzbl %al,%eax
f01315e2:	39 c2                	cmp    %eax,%edx
f01315e4:	74 0d                	je     f01315f3 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01315e6:	ff 45 08             	incl   0x8(%ebp)
f01315e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01315ec:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01315ef:	72 e3                	jb     f01315d4 <memfind+0x13>
f01315f1:	eb 01                	jmp    f01315f4 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01315f3:	90                   	nop
	return (void *) s;
f01315f4:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01315f7:	c9                   	leave  
f01315f8:	c3                   	ret    

f01315f9 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01315f9:	55                   	push   %ebp
f01315fa:	89 e5                	mov    %esp,%ebp
f01315fc:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01315ff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131606:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013160d:	eb 03                	jmp    f0131612 <strtol+0x19>
		s++;
f013160f:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131612:	8b 45 08             	mov    0x8(%ebp),%eax
f0131615:	8a 00                	mov    (%eax),%al
f0131617:	3c 20                	cmp    $0x20,%al
f0131619:	74 f4                	je     f013160f <strtol+0x16>
f013161b:	8b 45 08             	mov    0x8(%ebp),%eax
f013161e:	8a 00                	mov    (%eax),%al
f0131620:	3c 09                	cmp    $0x9,%al
f0131622:	74 eb                	je     f013160f <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131624:	8b 45 08             	mov    0x8(%ebp),%eax
f0131627:	8a 00                	mov    (%eax),%al
f0131629:	3c 2b                	cmp    $0x2b,%al
f013162b:	75 05                	jne    f0131632 <strtol+0x39>
		s++;
f013162d:	ff 45 08             	incl   0x8(%ebp)
f0131630:	eb 13                	jmp    f0131645 <strtol+0x4c>
	else if (*s == '-')
f0131632:	8b 45 08             	mov    0x8(%ebp),%eax
f0131635:	8a 00                	mov    (%eax),%al
f0131637:	3c 2d                	cmp    $0x2d,%al
f0131639:	75 0a                	jne    f0131645 <strtol+0x4c>
		s++, neg = 1;
f013163b:	ff 45 08             	incl   0x8(%ebp)
f013163e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131645:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131649:	74 06                	je     f0131651 <strtol+0x58>
f013164b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f013164f:	75 20                	jne    f0131671 <strtol+0x78>
f0131651:	8b 45 08             	mov    0x8(%ebp),%eax
f0131654:	8a 00                	mov    (%eax),%al
f0131656:	3c 30                	cmp    $0x30,%al
f0131658:	75 17                	jne    f0131671 <strtol+0x78>
f013165a:	8b 45 08             	mov    0x8(%ebp),%eax
f013165d:	40                   	inc    %eax
f013165e:	8a 00                	mov    (%eax),%al
f0131660:	3c 78                	cmp    $0x78,%al
f0131662:	75 0d                	jne    f0131671 <strtol+0x78>
		s += 2, base = 16;
f0131664:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131668:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f013166f:	eb 28                	jmp    f0131699 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131671:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131675:	75 15                	jne    f013168c <strtol+0x93>
f0131677:	8b 45 08             	mov    0x8(%ebp),%eax
f013167a:	8a 00                	mov    (%eax),%al
f013167c:	3c 30                	cmp    $0x30,%al
f013167e:	75 0c                	jne    f013168c <strtol+0x93>
		s++, base = 8;
f0131680:	ff 45 08             	incl   0x8(%ebp)
f0131683:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f013168a:	eb 0d                	jmp    f0131699 <strtol+0xa0>
	else if (base == 0)
f013168c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131690:	75 07                	jne    f0131699 <strtol+0xa0>
		base = 10;
f0131692:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131699:	8b 45 08             	mov    0x8(%ebp),%eax
f013169c:	8a 00                	mov    (%eax),%al
f013169e:	3c 2f                	cmp    $0x2f,%al
f01316a0:	7e 19                	jle    f01316bb <strtol+0xc2>
f01316a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01316a5:	8a 00                	mov    (%eax),%al
f01316a7:	3c 39                	cmp    $0x39,%al
f01316a9:	7f 10                	jg     f01316bb <strtol+0xc2>
			dig = *s - '0';
f01316ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01316ae:	8a 00                	mov    (%eax),%al
f01316b0:	0f be c0             	movsbl %al,%eax
f01316b3:	83 e8 30             	sub    $0x30,%eax
f01316b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316b9:	eb 42                	jmp    f01316fd <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01316bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01316be:	8a 00                	mov    (%eax),%al
f01316c0:	3c 60                	cmp    $0x60,%al
f01316c2:	7e 19                	jle    f01316dd <strtol+0xe4>
f01316c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c7:	8a 00                	mov    (%eax),%al
f01316c9:	3c 7a                	cmp    $0x7a,%al
f01316cb:	7f 10                	jg     f01316dd <strtol+0xe4>
			dig = *s - 'a' + 10;
f01316cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01316d0:	8a 00                	mov    (%eax),%al
f01316d2:	0f be c0             	movsbl %al,%eax
f01316d5:	83 e8 57             	sub    $0x57,%eax
f01316d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316db:	eb 20                	jmp    f01316fd <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01316dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01316e0:	8a 00                	mov    (%eax),%al
f01316e2:	3c 40                	cmp    $0x40,%al
f01316e4:	7e 39                	jle    f013171f <strtol+0x126>
f01316e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01316e9:	8a 00                	mov    (%eax),%al
f01316eb:	3c 5a                	cmp    $0x5a,%al
f01316ed:	7f 30                	jg     f013171f <strtol+0x126>
			dig = *s - 'A' + 10;
f01316ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01316f2:	8a 00                	mov    (%eax),%al
f01316f4:	0f be c0             	movsbl %al,%eax
f01316f7:	83 e8 37             	sub    $0x37,%eax
f01316fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01316fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131700:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131703:	7d 19                	jge    f013171e <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131705:	ff 45 08             	incl   0x8(%ebp)
f0131708:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013170b:	0f af 45 10          	imul   0x10(%ebp),%eax
f013170f:	89 c2                	mov    %eax,%edx
f0131711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131714:	01 d0                	add    %edx,%eax
f0131716:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131719:	e9 7b ff ff ff       	jmp    f0131699 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f013171e:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f013171f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131723:	74 08                	je     f013172d <strtol+0x134>
		*endptr = (char *) s;
f0131725:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131728:	8b 55 08             	mov    0x8(%ebp),%edx
f013172b:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f013172d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131731:	74 07                	je     f013173a <strtol+0x141>
f0131733:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131736:	f7 d8                	neg    %eax
f0131738:	eb 03                	jmp    f013173d <strtol+0x144>
f013173a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013173d:	c9                   	leave  
f013173e:	c3                   	ret    

f013173f <ltostr>:

void
ltostr(long value, char *str)
{
f013173f:	55                   	push   %ebp
f0131740:	89 e5                	mov    %esp,%ebp
f0131742:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131745:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f013174c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131753:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131757:	79 13                	jns    f013176c <ltostr+0x2d>
	{
		neg = 1;
f0131759:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131760:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131763:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131766:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131769:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f013176c:	8b 45 08             	mov    0x8(%ebp),%eax
f013176f:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131774:	99                   	cltd   
f0131775:	f7 f9                	idiv   %ecx
f0131777:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f013177a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013177d:	8d 50 01             	lea    0x1(%eax),%edx
f0131780:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131783:	89 c2                	mov    %eax,%edx
f0131785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131788:	01 d0                	add    %edx,%eax
f013178a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013178d:	83 c2 30             	add    $0x30,%edx
f0131790:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131792:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131795:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013179a:	f7 e9                	imul   %ecx
f013179c:	c1 fa 02             	sar    $0x2,%edx
f013179f:	89 c8                	mov    %ecx,%eax
f01317a1:	c1 f8 1f             	sar    $0x1f,%eax
f01317a4:	29 c2                	sub    %eax,%edx
f01317a6:	89 d0                	mov    %edx,%eax
f01317a8:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f01317ab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01317ae:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01317b3:	f7 e9                	imul   %ecx
f01317b5:	c1 fa 02             	sar    $0x2,%edx
f01317b8:	89 c8                	mov    %ecx,%eax
f01317ba:	c1 f8 1f             	sar    $0x1f,%eax
f01317bd:	29 c2                	sub    %eax,%edx
f01317bf:	89 d0                	mov    %edx,%eax
f01317c1:	c1 e0 02             	shl    $0x2,%eax
f01317c4:	01 d0                	add    %edx,%eax
f01317c6:	01 c0                	add    %eax,%eax
f01317c8:	29 c1                	sub    %eax,%ecx
f01317ca:	89 ca                	mov    %ecx,%edx
f01317cc:	85 d2                	test   %edx,%edx
f01317ce:	75 9c                	jne    f013176c <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01317d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01317d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01317da:	48                   	dec    %eax
f01317db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01317de:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01317e2:	74 3d                	je     f0131821 <ltostr+0xe2>
		start = 1 ;
f01317e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01317eb:	eb 34                	jmp    f0131821 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01317ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317f3:	01 d0                	add    %edx,%eax
f01317f5:	8a 00                	mov    (%eax),%al
f01317f7:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01317fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131800:	01 c2                	add    %eax,%edx
f0131802:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131805:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131808:	01 c8                	add    %ecx,%eax
f013180a:	8a 00                	mov    (%eax),%al
f013180c:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f013180e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131814:	01 c2                	add    %eax,%edx
f0131816:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131819:	88 02                	mov    %al,(%edx)
		start++ ;
f013181b:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f013181e:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131821:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131824:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131827:	7c c4                	jl     f01317ed <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131829:	8b 55 f8             	mov    -0x8(%ebp),%edx
f013182c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013182f:	01 d0                	add    %edx,%eax
f0131831:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131834:	90                   	nop
f0131835:	c9                   	leave  
f0131836:	c3                   	ret    

f0131837 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131837:	55                   	push   %ebp
f0131838:	89 e5                	mov    %esp,%ebp
f013183a:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f013183d:	ff 75 08             	pushl  0x8(%ebp)
f0131840:	e8 54 fa ff ff       	call   f0131299 <strlen>
f0131845:	83 c4 04             	add    $0x4,%esp
f0131848:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f013184b:	ff 75 0c             	pushl  0xc(%ebp)
f013184e:	e8 46 fa ff ff       	call   f0131299 <strlen>
f0131853:	83 c4 04             	add    $0x4,%esp
f0131856:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131860:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131867:	eb 17                	jmp    f0131880 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131869:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013186c:	8b 45 10             	mov    0x10(%ebp),%eax
f013186f:	01 c2                	add    %eax,%edx
f0131871:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131874:	8b 45 08             	mov    0x8(%ebp),%eax
f0131877:	01 c8                	add    %ecx,%eax
f0131879:	8a 00                	mov    (%eax),%al
f013187b:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f013187d:	ff 45 fc             	incl   -0x4(%ebp)
f0131880:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131883:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131886:	7c e1                	jl     f0131869 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131888:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f013188f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131896:	eb 1f                	jmp    f01318b7 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131898:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013189b:	8d 50 01             	lea    0x1(%eax),%edx
f013189e:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01318a1:	89 c2                	mov    %eax,%edx
f01318a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01318a6:	01 c2                	add    %eax,%edx
f01318a8:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01318ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318ae:	01 c8                	add    %ecx,%eax
f01318b0:	8a 00                	mov    (%eax),%al
f01318b2:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01318b4:	ff 45 f8             	incl   -0x8(%ebp)
f01318b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01318bd:	7c d9                	jl     f0131898 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01318bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01318c2:	8b 45 10             	mov    0x10(%ebp),%eax
f01318c5:	01 d0                	add    %edx,%eax
f01318c7:	c6 00 00             	movb   $0x0,(%eax)
}
f01318ca:	90                   	nop
f01318cb:	c9                   	leave  
f01318cc:	c3                   	ret    

f01318cd <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f01318cd:	55                   	push   %ebp
f01318ce:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f01318d0:	8b 45 14             	mov    0x14(%ebp),%eax
f01318d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01318d9:	8b 45 14             	mov    0x14(%ebp),%eax
f01318dc:	8b 00                	mov    (%eax),%eax
f01318de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01318e5:	8b 45 10             	mov    0x10(%ebp),%eax
f01318e8:	01 d0                	add    %edx,%eax
f01318ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01318f0:	eb 0c                	jmp    f01318fe <strsplit+0x31>
			*string++ = 0;
f01318f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01318f5:	8d 50 01             	lea    0x1(%eax),%edx
f01318f8:	89 55 08             	mov    %edx,0x8(%ebp)
f01318fb:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01318fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131901:	8a 00                	mov    (%eax),%al
f0131903:	84 c0                	test   %al,%al
f0131905:	74 18                	je     f013191f <strsplit+0x52>
f0131907:	8b 45 08             	mov    0x8(%ebp),%eax
f013190a:	8a 00                	mov    (%eax),%al
f013190c:	0f be c0             	movsbl %al,%eax
f013190f:	50                   	push   %eax
f0131910:	ff 75 0c             	pushl  0xc(%ebp)
f0131913:	e8 13 fb ff ff       	call   f013142b <strchr>
f0131918:	83 c4 08             	add    $0x8,%esp
f013191b:	85 c0                	test   %eax,%eax
f013191d:	75 d3                	jne    f01318f2 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f013191f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131922:	8a 00                	mov    (%eax),%al
f0131924:	84 c0                	test   %al,%al
f0131926:	74 5a                	je     f0131982 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131928:	8b 45 14             	mov    0x14(%ebp),%eax
f013192b:	8b 00                	mov    (%eax),%eax
f013192d:	83 f8 0f             	cmp    $0xf,%eax
f0131930:	75 07                	jne    f0131939 <strsplit+0x6c>
		{
			return 0;
f0131932:	b8 00 00 00 00       	mov    $0x0,%eax
f0131937:	eb 66                	jmp    f013199f <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131939:	8b 45 14             	mov    0x14(%ebp),%eax
f013193c:	8b 00                	mov    (%eax),%eax
f013193e:	8d 48 01             	lea    0x1(%eax),%ecx
f0131941:	8b 55 14             	mov    0x14(%ebp),%edx
f0131944:	89 0a                	mov    %ecx,(%edx)
f0131946:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013194d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131950:	01 c2                	add    %eax,%edx
f0131952:	8b 45 08             	mov    0x8(%ebp),%eax
f0131955:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131957:	eb 03                	jmp    f013195c <strsplit+0x8f>
			string++;
f0131959:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f013195c:	8b 45 08             	mov    0x8(%ebp),%eax
f013195f:	8a 00                	mov    (%eax),%al
f0131961:	84 c0                	test   %al,%al
f0131963:	74 8b                	je     f01318f0 <strsplit+0x23>
f0131965:	8b 45 08             	mov    0x8(%ebp),%eax
f0131968:	8a 00                	mov    (%eax),%al
f013196a:	0f be c0             	movsbl %al,%eax
f013196d:	50                   	push   %eax
f013196e:	ff 75 0c             	pushl  0xc(%ebp)
f0131971:	e8 b5 fa ff ff       	call   f013142b <strchr>
f0131976:	83 c4 08             	add    $0x8,%esp
f0131979:	85 c0                	test   %eax,%eax
f013197b:	74 dc                	je     f0131959 <strsplit+0x8c>
			string++;
	}
f013197d:	e9 6e ff ff ff       	jmp    f01318f0 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131982:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131983:	8b 45 14             	mov    0x14(%ebp),%eax
f0131986:	8b 00                	mov    (%eax),%eax
f0131988:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013198f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131992:	01 d0                	add    %edx,%eax
f0131994:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f013199a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f013199f:	c9                   	leave  
f01319a0:	c3                   	ret    

f01319a1 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01319a1:	55                   	push   %ebp
f01319a2:	89 e5                	mov    %esp,%ebp
f01319a4:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01319a7:	90                   	nop
f01319a8:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01319af:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01319b2:	89 c2                	mov    %eax,%edx
f01319b4:	ec                   	in     (%dx),%al
f01319b5:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01319b8:	8a 45 f7             	mov    -0x9(%ebp),%al
f01319bb:	0f b6 c0             	movzbl %al,%eax
f01319be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01319c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319c4:	25 c0 00 00 00       	and    $0xc0,%eax
f01319c9:	83 f8 40             	cmp    $0x40,%eax
f01319cc:	75 da                	jne    f01319a8 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f01319ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01319d2:	74 11                	je     f01319e5 <ide_wait_ready+0x44>
f01319d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319d7:	83 e0 21             	and    $0x21,%eax
f01319da:	85 c0                	test   %eax,%eax
f01319dc:	74 07                	je     f01319e5 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01319de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01319e3:	eb 05                	jmp    f01319ea <ide_wait_ready+0x49>
	}
	return 0;
f01319e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01319ea:	c9                   	leave  
f01319eb:	c3                   	ret    

f01319ec <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01319ec:	55                   	push   %ebp
f01319ed:	89 e5                	mov    %esp,%ebp
f01319ef:	57                   	push   %edi
f01319f0:	53                   	push   %ebx
f01319f1:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01319f4:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01319fb:	76 16                	jbe    f0131a13 <ide_read+0x27>
f01319fd:	68 43 d5 13 f0       	push   $0xf013d543
f0131a02:	68 50 d5 13 f0       	push   $0xf013d550
f0131a07:	6a 25                	push   $0x25
f0131a09:	68 65 d5 13 f0       	push   $0xf013d565
f0131a0e:	e8 f2 e7 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131a13:	83 ec 0c             	sub    $0xc,%esp
f0131a16:	6a 00                	push   $0x0
f0131a18:	e8 84 ff ff ff       	call   f01319a1 <ide_wait_ready>
f0131a1d:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0131a23:	0f b6 c0             	movzbl %al,%eax
f0131a26:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131a2d:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131a30:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131a33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a36:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a3a:	0f b6 c0             	movzbl %al,%eax
f0131a3d:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131a44:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131a47:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131a4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131a4d:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131a4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a51:	c1 e8 08             	shr    $0x8,%eax
f0131a54:	0f b6 c0             	movzbl %al,%eax
f0131a57:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131a5e:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131a61:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131a64:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131a67:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a6b:	c1 e8 10             	shr    $0x10,%eax
f0131a6e:	0f b6 c0             	movzbl %al,%eax
f0131a71:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131a78:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131a7b:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131a7e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131a81:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131a82:	a1 ac 1c 88 f0       	mov    0xf0881cac,%eax
f0131a87:	83 e0 01             	and    $0x1,%eax
f0131a8a:	c1 e0 04             	shl    $0x4,%eax
f0131a8d:	88 c2                	mov    %al,%dl
f0131a8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a92:	c1 e8 18             	shr    $0x18,%eax
f0131a95:	83 e0 0f             	and    $0xf,%eax
f0131a98:	09 d0                	or     %edx,%eax
f0131a9a:	83 c8 e0             	or     $0xffffffe0,%eax
f0131a9d:	0f b6 c0             	movzbl %al,%eax
f0131aa0:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131aa7:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131aaa:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131aad:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131ab0:	ee                   	out    %al,(%dx)
f0131ab1:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131ab8:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131abc:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131abf:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131ac2:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131ac3:	eb 55                	jmp    f0131b1a <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131ac5:	83 ec 0c             	sub    $0xc,%esp
f0131ac8:	6a 01                	push   $0x1
f0131aca:	e8 d2 fe ff ff       	call   f01319a1 <ide_wait_ready>
f0131acf:	83 c4 10             	add    $0x10,%esp
f0131ad2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131ad5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131ad9:	79 05                	jns    f0131ae0 <ide_read+0xf4>
			return r;
f0131adb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131ade:	eb 45                	jmp    f0131b25 <ide_read+0x139>
f0131ae0:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131aea:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131aed:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131af7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131afa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131afd:	89 cb                	mov    %ecx,%ebx
f0131aff:	89 df                	mov    %ebx,%edi
f0131b01:	89 c1                	mov    %eax,%ecx
f0131b03:	fc                   	cld    
f0131b04:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131b06:	89 c8                	mov    %ecx,%eax
f0131b08:	89 fb                	mov    %edi,%ebx
f0131b0a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131b0d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131b10:	ff 4d 10             	decl   0x10(%ebp)
f0131b13:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131b1a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b1e:	75 a5                	jne    f0131ac5 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131b20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131b25:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131b28:	5b                   	pop    %ebx
f0131b29:	5f                   	pop    %edi
f0131b2a:	5d                   	pop    %ebp
f0131b2b:	c3                   	ret    

f0131b2c <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131b2c:	55                   	push   %ebp
f0131b2d:	89 e5                	mov    %esp,%ebp
f0131b2f:	56                   	push   %esi
f0131b30:	53                   	push   %ebx
f0131b31:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131b34:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131b3b:	76 16                	jbe    f0131b53 <ide_write+0x27>
f0131b3d:	68 43 d5 13 f0       	push   $0xf013d543
f0131b42:	68 50 d5 13 f0       	push   $0xf013d550
f0131b47:	6a 3e                	push   $0x3e
f0131b49:	68 65 d5 13 f0       	push   $0xf013d565
f0131b4e:	e8 b2 e6 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131b53:	83 ec 0c             	sub    $0xc,%esp
f0131b56:	6a 00                	push   $0x0
f0131b58:	e8 44 fe ff ff       	call   f01319a1 <ide_wait_ready>
f0131b5d:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131b60:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b63:	0f b6 c0             	movzbl %al,%eax
f0131b66:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131b6d:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131b70:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131b73:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b76:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131b77:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b7a:	0f b6 c0             	movzbl %al,%eax
f0131b7d:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131b84:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131b87:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131b8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131b8d:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131b8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b91:	c1 e8 08             	shr    $0x8,%eax
f0131b94:	0f b6 c0             	movzbl %al,%eax
f0131b97:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131b9e:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131ba1:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131ba4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131ba7:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bab:	c1 e8 10             	shr    $0x10,%eax
f0131bae:	0f b6 c0             	movzbl %al,%eax
f0131bb1:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131bb8:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131bbb:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131bbe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131bc1:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131bc2:	a1 ac 1c 88 f0       	mov    0xf0881cac,%eax
f0131bc7:	83 e0 01             	and    $0x1,%eax
f0131bca:	c1 e0 04             	shl    $0x4,%eax
f0131bcd:	88 c2                	mov    %al,%dl
f0131bcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bd2:	c1 e8 18             	shr    $0x18,%eax
f0131bd5:	83 e0 0f             	and    $0xf,%eax
f0131bd8:	09 d0                	or     %edx,%eax
f0131bda:	83 c8 e0             	or     $0xffffffe0,%eax
f0131bdd:	0f b6 c0             	movzbl %al,%eax
f0131be0:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131be7:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131bea:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131bed:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131bf0:	ee                   	out    %al,(%dx)
f0131bf1:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131bf8:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131bfc:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131bff:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131c02:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131c03:	eb 55                	jmp    f0131c5a <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131c05:	83 ec 0c             	sub    $0xc,%esp
f0131c08:	6a 01                	push   $0x1
f0131c0a:	e8 92 fd ff ff       	call   f01319a1 <ide_wait_ready>
f0131c0f:	83 c4 10             	add    $0x10,%esp
f0131c12:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131c15:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131c19:	79 05                	jns    f0131c20 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131c1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131c1e:	eb 45                	jmp    f0131c65 <ide_write+0x139>
f0131c20:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131c2d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131c34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c37:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131c3a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131c3d:	89 cb                	mov    %ecx,%ebx
f0131c3f:	89 de                	mov    %ebx,%esi
f0131c41:	89 c1                	mov    %eax,%ecx
f0131c43:	fc                   	cld    
f0131c44:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131c46:	89 c8                	mov    %ecx,%eax
f0131c48:	89 f3                	mov    %esi,%ebx
f0131c4a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131c4d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131c50:	ff 4d 10             	decl   0x10(%ebp)
f0131c53:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131c5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131c5e:	75 a5                	jne    f0131c05 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131c68:	5b                   	pop    %ebx
f0131c69:	5e                   	pop    %esi
f0131c6a:	5d                   	pop    %ebp
f0131c6b:	c3                   	ret    

f0131c6c <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131c6c:	55                   	push   %ebp
f0131c6d:	89 e5                	mov    %esp,%ebp
f0131c6f:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131c72:	83 ec 0c             	sub    $0xc,%esp
f0131c75:	68 70 d5 13 f0       	push   $0xf013d570
f0131c7a:	e8 8f f0 fc ff       	call   f0100d0e <cprintf>
f0131c7f:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131c82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131c89:	83 ec 0c             	sub    $0xc,%esp
f0131c8c:	68 9c d5 13 f0       	push   $0xf013d59c
f0131c91:	e8 78 f0 fc ff       	call   f0100d0e <cprintf>
f0131c96:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131c99:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131c9d:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0131ca2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ca5:	eb 56                	jmp    f0131cfd <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131ca7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131cab:	74 1c                	je     f0131cc9 <print_mem_block_lists+0x5d>
f0131cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cb0:	8b 50 08             	mov    0x8(%eax),%edx
f0131cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cb6:	8b 48 08             	mov    0x8(%eax),%ecx
f0131cb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cbc:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cbf:	01 c8                	add    %ecx,%eax
f0131cc1:	39 c2                	cmp    %eax,%edx
f0131cc3:	73 04                	jae    f0131cc9 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131cc5:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ccc:	8b 50 08             	mov    0x8(%eax),%edx
f0131ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cd5:	01 c2                	add    %eax,%edx
f0131cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cda:	8b 40 08             	mov    0x8(%eax),%eax
f0131cdd:	83 ec 04             	sub    $0x4,%esp
f0131ce0:	52                   	push   %edx
f0131ce1:	50                   	push   %eax
f0131ce2:	68 b1 d5 13 f0       	push   $0xf013d5b1
f0131ce7:	e8 22 f0 fc ff       	call   f0100d0e <cprintf>
f0131cec:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131cf5:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0131cfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d01:	74 07                	je     f0131d0a <print_mem_block_lists+0x9e>
f0131d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d06:	8b 00                	mov    (%eax),%eax
f0131d08:	eb 05                	jmp    f0131d0f <print_mem_block_lists+0xa3>
f0131d0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d0f:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0131d14:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0131d19:	85 c0                	test   %eax,%eax
f0131d1b:	75 8a                	jne    f0131ca7 <print_mem_block_lists+0x3b>
f0131d1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d21:	75 84                	jne    f0131ca7 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131d23:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131d27:	75 10                	jne    f0131d39 <print_mem_block_lists+0xcd>
f0131d29:	83 ec 0c             	sub    $0xc,%esp
f0131d2c:	68 c0 d5 13 f0       	push   $0xf013d5c0
f0131d31:	e8 d8 ef fc ff       	call   f0100d0e <cprintf>
f0131d36:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131d39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131d40:	83 ec 0c             	sub    $0xc,%esp
f0131d43:	68 e4 d5 13 f0       	push   $0xf013d5e4
f0131d48:	e8 c1 ef fc ff       	call   f0100d0e <cprintf>
f0131d4d:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131d50:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131d54:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f0131d59:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d5c:	eb 56                	jmp    f0131db4 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131d5e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131d62:	74 1c                	je     f0131d80 <print_mem_block_lists+0x114>
f0131d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d67:	8b 50 08             	mov    0x8(%eax),%edx
f0131d6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d6d:	8b 48 08             	mov    0x8(%eax),%ecx
f0131d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d73:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d76:	01 c8                	add    %ecx,%eax
f0131d78:	39 c2                	cmp    %eax,%edx
f0131d7a:	73 04                	jae    f0131d80 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131d7c:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d83:	8b 50 08             	mov    0x8(%eax),%edx
f0131d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d89:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d8c:	01 c2                	add    %eax,%edx
f0131d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d91:	8b 40 08             	mov    0x8(%eax),%eax
f0131d94:	83 ec 04             	sub    $0x4,%esp
f0131d97:	52                   	push   %edx
f0131d98:	50                   	push   %eax
f0131d99:	68 b1 d5 13 f0       	push   $0xf013d5b1
f0131d9e:	e8 6b ef fc ff       	call   f0100d0e <cprintf>
f0131da3:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131da9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131dac:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f0131db1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131db4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131db8:	74 07                	je     f0131dc1 <print_mem_block_lists+0x155>
f0131dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dbd:	8b 00                	mov    (%eax),%eax
f0131dbf:	eb 05                	jmp    f0131dc6 <print_mem_block_lists+0x15a>
f0131dc1:	b8 00 00 00 00       	mov    $0x0,%eax
f0131dc6:	a3 d0 1c 88 f0       	mov    %eax,0xf0881cd0
f0131dcb:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f0131dd0:	85 c0                	test   %eax,%eax
f0131dd2:	75 8a                	jne    f0131d5e <print_mem_block_lists+0xf2>
f0131dd4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131dd8:	75 84                	jne    f0131d5e <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131dda:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131dde:	75 10                	jne    f0131df0 <print_mem_block_lists+0x184>
f0131de0:	83 ec 0c             	sub    $0xc,%esp
f0131de3:	68 fc d5 13 f0       	push   $0xf013d5fc
f0131de8:	e8 21 ef fc ff       	call   f0100d0e <cprintf>
f0131ded:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131df0:	83 ec 0c             	sub    $0xc,%esp
f0131df3:	68 70 d5 13 f0       	push   $0xf013d570
f0131df8:	e8 11 ef fc ff       	call   f0100d0e <cprintf>
f0131dfd:	83 c4 10             	add    $0x10,%esp

}
f0131e00:	90                   	nop
f0131e01:	c9                   	leave  
f0131e02:	c3                   	ret    

f0131e03 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131e03:	55                   	push   %ebp
f0131e04:	89 e5                	mov    %esp,%ebp
f0131e06:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131e09:	c7 05 98 1d 88 f0 00 	movl   $0x0,0xf0881d98
f0131e10:	00 00 00 
f0131e13:	c7 05 9c 1d 88 f0 00 	movl   $0x0,0xf0881d9c
f0131e1a:	00 00 00 
f0131e1d:	c7 05 a4 1d 88 f0 00 	movl   $0x0,0xf0881da4
f0131e24:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131e27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131e2e:	e9 9e 00 00 00       	jmp    f0131ed1 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131e33:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0131e38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e3b:	c1 e2 04             	shl    $0x4,%edx
f0131e3e:	01 d0                	add    %edx,%eax
f0131e40:	85 c0                	test   %eax,%eax
f0131e42:	75 14                	jne    f0131e58 <initialize_MemBlocksList+0x55>
f0131e44:	83 ec 04             	sub    $0x4,%esp
f0131e47:	68 24 d6 13 f0       	push   $0xf013d624
f0131e4c:	6a 46                	push   $0x46
f0131e4e:	68 47 d6 13 f0       	push   $0xf013d647
f0131e53:	e8 ad e3 fc ff       	call   f0100205 <_panic>
f0131e58:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0131e5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e60:	c1 e2 04             	shl    $0x4,%edx
f0131e63:	01 d0                	add    %edx,%eax
f0131e65:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0131e6b:	89 10                	mov    %edx,(%eax)
f0131e6d:	8b 00                	mov    (%eax),%eax
f0131e6f:	85 c0                	test   %eax,%eax
f0131e71:	74 18                	je     f0131e8b <initialize_MemBlocksList+0x88>
f0131e73:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0131e78:	8b 15 d8 1c 88 f0    	mov    0xf0881cd8,%edx
f0131e7e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131e81:	c1 e1 04             	shl    $0x4,%ecx
f0131e84:	01 ca                	add    %ecx,%edx
f0131e86:	89 50 04             	mov    %edx,0x4(%eax)
f0131e89:	eb 12                	jmp    f0131e9d <initialize_MemBlocksList+0x9a>
f0131e8b:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0131e90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e93:	c1 e2 04             	shl    $0x4,%edx
f0131e96:	01 d0                	add    %edx,%eax
f0131e98:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0131e9d:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0131ea2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ea5:	c1 e2 04             	shl    $0x4,%edx
f0131ea8:	01 d0                	add    %edx,%eax
f0131eaa:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0131eaf:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0131eb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131eb7:	c1 e2 04             	shl    $0x4,%edx
f0131eba:	01 d0                	add    %edx,%eax
f0131ebc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ec3:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0131ec8:	40                   	inc    %eax
f0131ec9:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131ece:	ff 45 f4             	incl   -0xc(%ebp)
f0131ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ed4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131ed7:	0f 82 56 ff ff ff    	jb     f0131e33 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131edd:	90                   	nop
f0131ede:	c9                   	leave  
f0131edf:	c3                   	ret    

f0131ee0 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131ee0:	55                   	push   %ebp
f0131ee1:	89 e5                	mov    %esp,%ebp
f0131ee3:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee9:	8b 00                	mov    (%eax),%eax
f0131eeb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131eee:	eb 19                	jmp    f0131f09 <find_block+0x29>
	{
		if(va==point->sva)
f0131ef0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ef3:	8b 40 08             	mov    0x8(%eax),%eax
f0131ef6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131ef9:	75 05                	jne    f0131f00 <find_block+0x20>
		   return point;
f0131efb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131efe:	eb 36                	jmp    f0131f36 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f03:	8b 40 08             	mov    0x8(%eax),%eax
f0131f06:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131f09:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131f0d:	74 07                	je     f0131f16 <find_block+0x36>
f0131f0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131f12:	8b 00                	mov    (%eax),%eax
f0131f14:	eb 05                	jmp    f0131f1b <find_block+0x3b>
f0131f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0131f1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f1e:	89 42 08             	mov    %eax,0x8(%edx)
f0131f21:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f24:	8b 40 08             	mov    0x8(%eax),%eax
f0131f27:	85 c0                	test   %eax,%eax
f0131f29:	75 c5                	jne    f0131ef0 <find_block+0x10>
f0131f2b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131f2f:	75 bf                	jne    f0131ef0 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131f31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f36:	c9                   	leave  
f0131f37:	c3                   	ret    

f0131f38 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131f38:	55                   	push   %ebp
f0131f39:	89 e5                	mov    %esp,%ebp
f0131f3b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131f3e:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f0131f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131f46:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f0131f4b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0131f4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f51:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131f54:	74 24                	je     f0131f7a <insert_sorted_allocList+0x42>
f0131f56:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f59:	8b 50 08             	mov    0x8(%eax),%edx
f0131f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f5f:	8b 40 08             	mov    0x8(%eax),%eax
f0131f62:	39 c2                	cmp    %eax,%edx
f0131f64:	76 14                	jbe    f0131f7a <insert_sorted_allocList+0x42>
f0131f66:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f69:	8b 50 08             	mov    0x8(%eax),%edx
f0131f6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f6f:	8b 40 08             	mov    0x8(%eax),%eax
f0131f72:	39 c2                	cmp    %eax,%edx
f0131f74:	0f 82 60 01 00 00    	jb     f01320da <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131f7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131f7e:	75 65                	jne    f0131fe5 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131f80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131f84:	75 14                	jne    f0131f9a <insert_sorted_allocList+0x62>
f0131f86:	83 ec 04             	sub    $0x4,%esp
f0131f89:	68 24 d6 13 f0       	push   $0xf013d624
f0131f8e:	6a 6b                	push   $0x6b
f0131f90:	68 47 d6 13 f0       	push   $0xf013d647
f0131f95:	e8 6b e2 fc ff       	call   f0100205 <_panic>
f0131f9a:	8b 15 c8 1c 88 f0    	mov    0xf0881cc8,%edx
f0131fa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa3:	89 10                	mov    %edx,(%eax)
f0131fa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa8:	8b 00                	mov    (%eax),%eax
f0131faa:	85 c0                	test   %eax,%eax
f0131fac:	74 0d                	je     f0131fbb <insert_sorted_allocList+0x83>
f0131fae:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f0131fb3:	8b 55 08             	mov    0x8(%ebp),%edx
f0131fb6:	89 50 04             	mov    %edx,0x4(%eax)
f0131fb9:	eb 08                	jmp    f0131fc3 <insert_sorted_allocList+0x8b>
f0131fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fbe:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f0131fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fc6:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f0131fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131fd5:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0131fda:	40                   	inc    %eax
f0131fdb:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131fe0:	e9 dc 01 00 00       	jmp    f01321c1 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe8:	8b 50 08             	mov    0x8(%eax),%edx
f0131feb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fee:	8b 40 08             	mov    0x8(%eax),%eax
f0131ff1:	39 c2                	cmp    %eax,%edx
f0131ff3:	77 6c                	ja     f0132061 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131ff5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ff9:	74 06                	je     f0132001 <insert_sorted_allocList+0xc9>
f0131ffb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131fff:	75 14                	jne    f0132015 <insert_sorted_allocList+0xdd>
f0132001:	83 ec 04             	sub    $0x4,%esp
f0132004:	68 60 d6 13 f0       	push   $0xf013d660
f0132009:	6a 6f                	push   $0x6f
f013200b:	68 47 d6 13 f0       	push   $0xf013d647
f0132010:	e8 f0 e1 fc ff       	call   f0100205 <_panic>
f0132015:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132018:	8b 50 04             	mov    0x4(%eax),%edx
f013201b:	8b 45 08             	mov    0x8(%ebp),%eax
f013201e:	89 50 04             	mov    %edx,0x4(%eax)
f0132021:	8b 45 08             	mov    0x8(%ebp),%eax
f0132024:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132027:	89 10                	mov    %edx,(%eax)
f0132029:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013202c:	8b 40 04             	mov    0x4(%eax),%eax
f013202f:	85 c0                	test   %eax,%eax
f0132031:	74 0d                	je     f0132040 <insert_sorted_allocList+0x108>
f0132033:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132036:	8b 40 04             	mov    0x4(%eax),%eax
f0132039:	8b 55 08             	mov    0x8(%ebp),%edx
f013203c:	89 10                	mov    %edx,(%eax)
f013203e:	eb 08                	jmp    f0132048 <insert_sorted_allocList+0x110>
f0132040:	8b 45 08             	mov    0x8(%ebp),%eax
f0132043:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f0132048:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013204b:	8b 55 08             	mov    0x8(%ebp),%edx
f013204e:	89 50 04             	mov    %edx,0x4(%eax)
f0132051:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0132056:	40                   	inc    %eax
f0132057:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013205c:	e9 60 01 00 00       	jmp    f01321c1 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0132061:	8b 45 08             	mov    0x8(%ebp),%eax
f0132064:	8b 50 08             	mov    0x8(%eax),%edx
f0132067:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013206a:	8b 40 08             	mov    0x8(%eax),%eax
f013206d:	39 c2                	cmp    %eax,%edx
f013206f:	0f 82 4c 01 00 00    	jb     f01321c1 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0132075:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132079:	75 14                	jne    f013208f <insert_sorted_allocList+0x157>
f013207b:	83 ec 04             	sub    $0x4,%esp
f013207e:	68 98 d6 13 f0       	push   $0xf013d698
f0132083:	6a 73                	push   $0x73
f0132085:	68 47 d6 13 f0       	push   $0xf013d647
f013208a:	e8 76 e1 fc ff       	call   f0100205 <_panic>
f013208f:	8b 15 cc 1c 88 f0    	mov    0xf0881ccc,%edx
f0132095:	8b 45 08             	mov    0x8(%ebp),%eax
f0132098:	89 50 04             	mov    %edx,0x4(%eax)
f013209b:	8b 45 08             	mov    0x8(%ebp),%eax
f013209e:	8b 40 04             	mov    0x4(%eax),%eax
f01320a1:	85 c0                	test   %eax,%eax
f01320a3:	74 0c                	je     f01320b1 <insert_sorted_allocList+0x179>
f01320a5:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f01320aa:	8b 55 08             	mov    0x8(%ebp),%edx
f01320ad:	89 10                	mov    %edx,(%eax)
f01320af:	eb 08                	jmp    f01320b9 <insert_sorted_allocList+0x181>
f01320b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01320b4:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f01320b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01320bc:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f01320c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01320c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01320ca:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01320cf:	40                   	inc    %eax
f01320d0:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01320d5:	e9 e7 00 00 00       	jmp    f01321c1 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f01320da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f01320e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01320e7:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f01320ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320ef:	e9 9d 00 00 00       	jmp    f0132191 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f01320f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f7:	8b 00                	mov    (%eax),%eax
f01320f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f01320fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01320ff:	8b 50 08             	mov    0x8(%eax),%edx
f0132102:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132105:	8b 40 08             	mov    0x8(%eax),%eax
f0132108:	39 c2                	cmp    %eax,%edx
f013210a:	76 7d                	jbe    f0132189 <insert_sorted_allocList+0x251>
f013210c:	8b 45 08             	mov    0x8(%ebp),%eax
f013210f:	8b 50 08             	mov    0x8(%eax),%edx
f0132112:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132115:	8b 40 08             	mov    0x8(%eax),%eax
f0132118:	39 c2                	cmp    %eax,%edx
f013211a:	73 6d                	jae    f0132189 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f013211c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132120:	74 06                	je     f0132128 <insert_sorted_allocList+0x1f0>
f0132122:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132126:	75 14                	jne    f013213c <insert_sorted_allocList+0x204>
f0132128:	83 ec 04             	sub    $0x4,%esp
f013212b:	68 bc d6 13 f0       	push   $0xf013d6bc
f0132130:	6a 7f                	push   $0x7f
f0132132:	68 47 d6 13 f0       	push   $0xf013d647
f0132137:	e8 c9 e0 fc ff       	call   f0100205 <_panic>
f013213c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013213f:	8b 10                	mov    (%eax),%edx
f0132141:	8b 45 08             	mov    0x8(%ebp),%eax
f0132144:	89 10                	mov    %edx,(%eax)
f0132146:	8b 45 08             	mov    0x8(%ebp),%eax
f0132149:	8b 00                	mov    (%eax),%eax
f013214b:	85 c0                	test   %eax,%eax
f013214d:	74 0b                	je     f013215a <insert_sorted_allocList+0x222>
f013214f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132152:	8b 00                	mov    (%eax),%eax
f0132154:	8b 55 08             	mov    0x8(%ebp),%edx
f0132157:	89 50 04             	mov    %edx,0x4(%eax)
f013215a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013215d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132160:	89 10                	mov    %edx,(%eax)
f0132162:	8b 45 08             	mov    0x8(%ebp),%eax
f0132165:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132168:	89 50 04             	mov    %edx,0x4(%eax)
f013216b:	8b 45 08             	mov    0x8(%ebp),%eax
f013216e:	8b 00                	mov    (%eax),%eax
f0132170:	85 c0                	test   %eax,%eax
f0132172:	75 08                	jne    f013217c <insert_sorted_allocList+0x244>
f0132174:	8b 45 08             	mov    0x8(%ebp),%eax
f0132177:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f013217c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0132181:	40                   	inc    %eax
f0132182:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
				break;
f0132187:	eb 39                	jmp    f01321c2 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0132189:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f013218e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132191:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132195:	74 07                	je     f013219e <insert_sorted_allocList+0x266>
f0132197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013219a:	8b 00                	mov    (%eax),%eax
f013219c:	eb 05                	jmp    f01321a3 <insert_sorted_allocList+0x26b>
f013219e:	b8 00 00 00 00       	mov    $0x0,%eax
f01321a3:	a3 d0 1c 88 f0       	mov    %eax,0xf0881cd0
f01321a8:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f01321ad:	85 c0                	test   %eax,%eax
f01321af:	0f 85 3f ff ff ff    	jne    f01320f4 <insert_sorted_allocList+0x1bc>
f01321b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321b9:	0f 85 35 ff ff ff    	jne    f01320f4 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01321bf:	eb 01                	jmp    f01321c2 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01321c1:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01321c2:	90                   	nop
f01321c3:	c9                   	leave  
f01321c4:	c3                   	ret    

f01321c5 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f01321c5:	55                   	push   %ebp
f01321c6:	89 e5                	mov    %esp,%ebp
f01321c8:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01321cb:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f01321d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01321d3:	e9 85 01 00 00       	jmp    f013235d <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f01321d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321db:	8b 40 0c             	mov    0xc(%eax),%eax
f01321de:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321e1:	0f 82 6e 01 00 00    	jb     f0132355 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01321e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ea:	8b 40 0c             	mov    0xc(%eax),%eax
f01321ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321f0:	0f 85 8a 00 00 00    	jne    f0132280 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f01321f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321fa:	75 17                	jne    f0132213 <alloc_block_FF+0x4e>
f01321fc:	83 ec 04             	sub    $0x4,%esp
f01321ff:	68 f0 d6 13 f0       	push   $0xf013d6f0
f0132204:	68 93 00 00 00       	push   $0x93
f0132209:	68 47 d6 13 f0       	push   $0xf013d647
f013220e:	e8 f2 df fc ff       	call   f0100205 <_panic>
f0132213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132216:	8b 00                	mov    (%eax),%eax
f0132218:	85 c0                	test   %eax,%eax
f013221a:	74 10                	je     f013222c <alloc_block_FF+0x67>
f013221c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013221f:	8b 00                	mov    (%eax),%eax
f0132221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132224:	8b 52 04             	mov    0x4(%edx),%edx
f0132227:	89 50 04             	mov    %edx,0x4(%eax)
f013222a:	eb 0b                	jmp    f0132237 <alloc_block_FF+0x72>
f013222c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013222f:	8b 40 04             	mov    0x4(%eax),%eax
f0132232:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132237:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013223a:	8b 40 04             	mov    0x4(%eax),%eax
f013223d:	85 c0                	test   %eax,%eax
f013223f:	74 0f                	je     f0132250 <alloc_block_FF+0x8b>
f0132241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132244:	8b 40 04             	mov    0x4(%eax),%eax
f0132247:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013224a:	8b 12                	mov    (%edx),%edx
f013224c:	89 10                	mov    %edx,(%eax)
f013224e:	eb 0a                	jmp    f013225a <alloc_block_FF+0x95>
f0132250:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132253:	8b 00                	mov    (%eax),%eax
f0132255:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f013225a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013225d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132266:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013226d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132272:	48                   	dec    %eax
f0132273:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			   return  point;
f0132278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013227b:	e9 10 01 00 00       	jmp    f0132390 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0132280:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132283:	8b 40 0c             	mov    0xc(%eax),%eax
f0132286:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132289:	0f 86 c6 00 00 00    	jbe    f0132355 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013228f:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132294:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0132297:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013229a:	8b 50 08             	mov    0x8(%eax),%edx
f013229d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322a0:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01322a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322a6:	8b 55 08             	mov    0x8(%ebp),%edx
f01322a9:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01322ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01322b0:	75 17                	jne    f01322c9 <alloc_block_FF+0x104>
f01322b2:	83 ec 04             	sub    $0x4,%esp
f01322b5:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01322ba:	68 9b 00 00 00       	push   $0x9b
f01322bf:	68 47 d6 13 f0       	push   $0xf013d647
f01322c4:	e8 3c df fc ff       	call   f0100205 <_panic>
f01322c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322cc:	8b 00                	mov    (%eax),%eax
f01322ce:	85 c0                	test   %eax,%eax
f01322d0:	74 10                	je     f01322e2 <alloc_block_FF+0x11d>
f01322d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322d5:	8b 00                	mov    (%eax),%eax
f01322d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322da:	8b 52 04             	mov    0x4(%edx),%edx
f01322dd:	89 50 04             	mov    %edx,0x4(%eax)
f01322e0:	eb 0b                	jmp    f01322ed <alloc_block_FF+0x128>
f01322e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322e5:	8b 40 04             	mov    0x4(%eax),%eax
f01322e8:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01322ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322f0:	8b 40 04             	mov    0x4(%eax),%eax
f01322f3:	85 c0                	test   %eax,%eax
f01322f5:	74 0f                	je     f0132306 <alloc_block_FF+0x141>
f01322f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322fa:	8b 40 04             	mov    0x4(%eax),%eax
f01322fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132300:	8b 12                	mov    (%edx),%edx
f0132302:	89 10                	mov    %edx,(%eax)
f0132304:	eb 0a                	jmp    f0132310 <alloc_block_FF+0x14b>
f0132306:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132309:	8b 00                	mov    (%eax),%eax
f013230b:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132310:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132313:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132319:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013231c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132323:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132328:	48                   	dec    %eax
f0132329:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
			   point->sva += size;
f013232e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132331:	8b 50 08             	mov    0x8(%eax),%edx
f0132334:	8b 45 08             	mov    0x8(%ebp),%eax
f0132337:	01 c2                	add    %eax,%edx
f0132339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233c:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f013233f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132342:	8b 40 0c             	mov    0xc(%eax),%eax
f0132345:	2b 45 08             	sub    0x8(%ebp),%eax
f0132348:	89 c2                	mov    %eax,%edx
f013234a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013234d:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0132350:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132353:	eb 3b                	jmp    f0132390 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0132355:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013235a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013235d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132361:	74 07                	je     f013236a <alloc_block_FF+0x1a5>
f0132363:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132366:	8b 00                	mov    (%eax),%eax
f0132368:	eb 05                	jmp    f013236f <alloc_block_FF+0x1aa>
f013236a:	b8 00 00 00 00       	mov    $0x0,%eax
f013236f:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132374:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132379:	85 c0                	test   %eax,%eax
f013237b:	0f 85 57 fe ff ff    	jne    f01321d8 <alloc_block_FF+0x13>
f0132381:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132385:	0f 85 4d fe ff ff    	jne    f01321d8 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132390:	c9                   	leave  
f0132391:	c3                   	ret    

f0132392 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132392:	55                   	push   %ebp
f0132393:	89 e5                	mov    %esp,%ebp
f0132395:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0132398:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f013239f:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f01323a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323a7:	e9 df 00 00 00       	jmp    f013248b <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01323ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323af:	8b 40 0c             	mov    0xc(%eax),%eax
f01323b2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323b5:	0f 82 c8 00 00 00    	jb     f0132483 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f01323bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323be:	8b 40 0c             	mov    0xc(%eax),%eax
f01323c1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323c4:	0f 85 8a 00 00 00    	jne    f0132454 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01323ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323ce:	75 17                	jne    f01323e7 <alloc_block_BF+0x55>
f01323d0:	83 ec 04             	sub    $0x4,%esp
f01323d3:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01323d8:	68 b7 00 00 00       	push   $0xb7
f01323dd:	68 47 d6 13 f0       	push   $0xf013d647
f01323e2:	e8 1e de fc ff       	call   f0100205 <_panic>
f01323e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ea:	8b 00                	mov    (%eax),%eax
f01323ec:	85 c0                	test   %eax,%eax
f01323ee:	74 10                	je     f0132400 <alloc_block_BF+0x6e>
f01323f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323f3:	8b 00                	mov    (%eax),%eax
f01323f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01323f8:	8b 52 04             	mov    0x4(%edx),%edx
f01323fb:	89 50 04             	mov    %edx,0x4(%eax)
f01323fe:	eb 0b                	jmp    f013240b <alloc_block_BF+0x79>
f0132400:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132403:	8b 40 04             	mov    0x4(%eax),%eax
f0132406:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f013240b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240e:	8b 40 04             	mov    0x4(%eax),%eax
f0132411:	85 c0                	test   %eax,%eax
f0132413:	74 0f                	je     f0132424 <alloc_block_BF+0x92>
f0132415:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132418:	8b 40 04             	mov    0x4(%eax),%eax
f013241b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013241e:	8b 12                	mov    (%edx),%edx
f0132420:	89 10                	mov    %edx,(%eax)
f0132422:	eb 0a                	jmp    f013242e <alloc_block_BF+0x9c>
f0132424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132427:	8b 00                	mov    (%eax),%eax
f0132429:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f013242e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132431:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132437:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013243a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132441:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132446:	48                   	dec    %eax
f0132447:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			   return currentMemBlock;
f013244c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013244f:	e9 4d 01 00 00       	jmp    f01325a1 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0132454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132457:	8b 40 0c             	mov    0xc(%eax),%eax
f013245a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013245d:	76 24                	jbe    f0132483 <alloc_block_BF+0xf1>
f013245f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132462:	8b 40 0c             	mov    0xc(%eax),%eax
f0132465:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132468:	73 19                	jae    f0132483 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f013246a:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0132471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132474:	8b 40 0c             	mov    0xc(%eax),%eax
f0132477:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f013247a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013247d:	8b 40 08             	mov    0x8(%eax),%eax
f0132480:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132483:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132488:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013248b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013248f:	74 07                	je     f0132498 <alloc_block_BF+0x106>
f0132491:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132494:	8b 00                	mov    (%eax),%eax
f0132496:	eb 05                	jmp    f013249d <alloc_block_BF+0x10b>
f0132498:	b8 00 00 00 00       	mov    $0x0,%eax
f013249d:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f01324a2:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f01324a7:	85 c0                	test   %eax,%eax
f01324a9:	0f 85 fd fe ff ff    	jne    f01323ac <alloc_block_BF+0x1a>
f01324af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324b3:	0f 85 f3 fe ff ff    	jne    f01323ac <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01324b9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01324bd:	0f 84 d9 00 00 00    	je     f013259c <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01324c3:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01324c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01324cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01324ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01324d1:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01324d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01324d7:	8b 55 08             	mov    0x8(%ebp),%edx
f01324da:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01324dd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01324e1:	75 17                	jne    f01324fa <alloc_block_BF+0x168>
f01324e3:	83 ec 04             	sub    $0x4,%esp
f01324e6:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01324eb:	68 c7 00 00 00       	push   $0xc7
f01324f0:	68 47 d6 13 f0       	push   $0xf013d647
f01324f5:	e8 0b dd fc ff       	call   f0100205 <_panic>
f01324fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01324fd:	8b 00                	mov    (%eax),%eax
f01324ff:	85 c0                	test   %eax,%eax
f0132501:	74 10                	je     f0132513 <alloc_block_BF+0x181>
f0132503:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132506:	8b 00                	mov    (%eax),%eax
f0132508:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013250b:	8b 52 04             	mov    0x4(%edx),%edx
f013250e:	89 50 04             	mov    %edx,0x4(%eax)
f0132511:	eb 0b                	jmp    f013251e <alloc_block_BF+0x18c>
f0132513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132516:	8b 40 04             	mov    0x4(%eax),%eax
f0132519:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f013251e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132521:	8b 40 04             	mov    0x4(%eax),%eax
f0132524:	85 c0                	test   %eax,%eax
f0132526:	74 0f                	je     f0132537 <alloc_block_BF+0x1a5>
f0132528:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013252b:	8b 40 04             	mov    0x4(%eax),%eax
f013252e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132531:	8b 12                	mov    (%edx),%edx
f0132533:	89 10                	mov    %edx,(%eax)
f0132535:	eb 0a                	jmp    f0132541 <alloc_block_BF+0x1af>
f0132537:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013253a:	8b 00                	mov    (%eax),%eax
f013253c:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132541:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132544:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013254a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013254d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132554:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132559:	48                   	dec    %eax
f013255a:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f013255f:	83 ec 08             	sub    $0x8,%esp
f0132562:	ff 75 ec             	pushl  -0x14(%ebp)
f0132565:	68 64 1d 88 f0       	push   $0xf0881d64
f013256a:	e8 71 f9 ff ff       	call   f0131ee0 <find_block>
f013256f:	83 c4 10             	add    $0x10,%esp
f0132572:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0132575:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132578:	8b 50 08             	mov    0x8(%eax),%edx
f013257b:	8b 45 08             	mov    0x8(%ebp),%eax
f013257e:	01 c2                	add    %eax,%edx
f0132580:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132583:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0132586:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132589:	8b 40 0c             	mov    0xc(%eax),%eax
f013258c:	2b 45 08             	sub    0x8(%ebp),%eax
f013258f:	89 c2                	mov    %eax,%edx
f0132591:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132594:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0132597:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013259a:	eb 05                	jmp    f01325a1 <alloc_block_BF+0x20f>
	}
	return NULL;
f013259c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01325a1:	c9                   	leave  
f01325a2:	c3                   	ret    

f01325a3 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01325a3:	55                   	push   %ebp
f01325a4:	89 e5                	mov    %esp,%ebp
f01325a6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f01325a9:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f01325ae:	85 c0                	test   %eax,%eax
f01325b0:	0f 85 de 01 00 00    	jne    f0132794 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01325b6:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f01325bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325be:	e9 9e 01 00 00       	jmp    f0132761 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01325c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325c6:	8b 40 0c             	mov    0xc(%eax),%eax
f01325c9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325cc:	0f 82 87 01 00 00    	jb     f0132759 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01325d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01325d8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325db:	0f 85 95 00 00 00    	jne    f0132676 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01325e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325e5:	75 17                	jne    f01325fe <alloc_block_NF+0x5b>
f01325e7:	83 ec 04             	sub    $0x4,%esp
f01325ea:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01325ef:	68 e0 00 00 00       	push   $0xe0
f01325f4:	68 47 d6 13 f0       	push   $0xf013d647
f01325f9:	e8 07 dc fc ff       	call   f0100205 <_panic>
f01325fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132601:	8b 00                	mov    (%eax),%eax
f0132603:	85 c0                	test   %eax,%eax
f0132605:	74 10                	je     f0132617 <alloc_block_NF+0x74>
f0132607:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013260a:	8b 00                	mov    (%eax),%eax
f013260c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013260f:	8b 52 04             	mov    0x4(%edx),%edx
f0132612:	89 50 04             	mov    %edx,0x4(%eax)
f0132615:	eb 0b                	jmp    f0132622 <alloc_block_NF+0x7f>
f0132617:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013261a:	8b 40 04             	mov    0x4(%eax),%eax
f013261d:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132622:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132625:	8b 40 04             	mov    0x4(%eax),%eax
f0132628:	85 c0                	test   %eax,%eax
f013262a:	74 0f                	je     f013263b <alloc_block_NF+0x98>
f013262c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013262f:	8b 40 04             	mov    0x4(%eax),%eax
f0132632:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132635:	8b 12                	mov    (%edx),%edx
f0132637:	89 10                	mov    %edx,(%eax)
f0132639:	eb 0a                	jmp    f0132645 <alloc_block_NF+0xa2>
f013263b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013263e:	8b 00                	mov    (%eax),%eax
f0132640:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132645:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132648:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013264e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132651:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132658:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013265d:	48                   	dec    %eax
f013265e:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
				   svaOfNF = point->sva;
f0132663:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132666:	8b 40 08             	mov    0x8(%eax),%eax
f0132669:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
				   return  point;
f013266e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132671:	e9 f8 04 00 00       	jmp    f0132b6e <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0132676:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132679:	8b 40 0c             	mov    0xc(%eax),%eax
f013267c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013267f:	0f 86 d4 00 00 00    	jbe    f0132759 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132685:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f013268a:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f013268d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132690:	8b 50 08             	mov    0x8(%eax),%edx
f0132693:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132696:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0132699:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013269c:	8b 55 08             	mov    0x8(%ebp),%edx
f013269f:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01326a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01326a6:	75 17                	jne    f01326bf <alloc_block_NF+0x11c>
f01326a8:	83 ec 04             	sub    $0x4,%esp
f01326ab:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01326b0:	68 e9 00 00 00       	push   $0xe9
f01326b5:	68 47 d6 13 f0       	push   $0xf013d647
f01326ba:	e8 46 db fc ff       	call   f0100205 <_panic>
f01326bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326c2:	8b 00                	mov    (%eax),%eax
f01326c4:	85 c0                	test   %eax,%eax
f01326c6:	74 10                	je     f01326d8 <alloc_block_NF+0x135>
f01326c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326cb:	8b 00                	mov    (%eax),%eax
f01326cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01326d0:	8b 52 04             	mov    0x4(%edx),%edx
f01326d3:	89 50 04             	mov    %edx,0x4(%eax)
f01326d6:	eb 0b                	jmp    f01326e3 <alloc_block_NF+0x140>
f01326d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326db:	8b 40 04             	mov    0x4(%eax),%eax
f01326de:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01326e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326e6:	8b 40 04             	mov    0x4(%eax),%eax
f01326e9:	85 c0                	test   %eax,%eax
f01326eb:	74 0f                	je     f01326fc <alloc_block_NF+0x159>
f01326ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326f0:	8b 40 04             	mov    0x4(%eax),%eax
f01326f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01326f6:	8b 12                	mov    (%edx),%edx
f01326f8:	89 10                	mov    %edx,(%eax)
f01326fa:	eb 0a                	jmp    f0132706 <alloc_block_NF+0x163>
f01326fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326ff:	8b 00                	mov    (%eax),%eax
f0132701:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132706:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132709:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013270f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132712:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132719:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013271e:	48                   	dec    %eax
f013271f:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
				   svaOfNF = ReturnedBlock->sva;
f0132724:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132727:	8b 40 08             	mov    0x8(%eax),%eax
f013272a:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
				   point->sva += size;
f013272f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132732:	8b 50 08             	mov    0x8(%eax),%edx
f0132735:	8b 45 08             	mov    0x8(%ebp),%eax
f0132738:	01 c2                	add    %eax,%edx
f013273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013273d:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132740:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132743:	8b 40 0c             	mov    0xc(%eax),%eax
f0132746:	2b 45 08             	sub    0x8(%ebp),%eax
f0132749:	89 c2                	mov    %eax,%edx
f013274b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013274e:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132751:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132754:	e9 15 04 00 00       	jmp    f0132b6e <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132759:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013275e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132761:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132765:	74 07                	je     f013276e <alloc_block_NF+0x1cb>
f0132767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013276a:	8b 00                	mov    (%eax),%eax
f013276c:	eb 05                	jmp    f0132773 <alloc_block_NF+0x1d0>
f013276e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132773:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132778:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013277d:	85 c0                	test   %eax,%eax
f013277f:	0f 85 3e fe ff ff    	jne    f01325c3 <alloc_block_NF+0x20>
f0132785:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132789:	0f 85 34 fe ff ff    	jne    f01325c3 <alloc_block_NF+0x20>
f013278f:	e9 d5 03 00 00       	jmp    f0132b69 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132794:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132799:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013279c:	e9 b1 01 00 00       	jmp    f0132952 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f01327a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327a4:	8b 50 08             	mov    0x8(%eax),%edx
f01327a7:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f01327ac:	39 c2                	cmp    %eax,%edx
f01327ae:	0f 82 96 01 00 00    	jb     f013294a <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f01327b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327b7:	8b 40 0c             	mov    0xc(%eax),%eax
f01327ba:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327bd:	0f 82 87 01 00 00    	jb     f013294a <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f01327c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c6:	8b 40 0c             	mov    0xc(%eax),%eax
f01327c9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327cc:	0f 85 95 00 00 00    	jne    f0132867 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01327d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327d6:	75 17                	jne    f01327ef <alloc_block_NF+0x24c>
f01327d8:	83 ec 04             	sub    $0x4,%esp
f01327db:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01327e0:	68 fc 00 00 00       	push   $0xfc
f01327e5:	68 47 d6 13 f0       	push   $0xf013d647
f01327ea:	e8 16 da fc ff       	call   f0100205 <_panic>
f01327ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327f2:	8b 00                	mov    (%eax),%eax
f01327f4:	85 c0                	test   %eax,%eax
f01327f6:	74 10                	je     f0132808 <alloc_block_NF+0x265>
f01327f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327fb:	8b 00                	mov    (%eax),%eax
f01327fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132800:	8b 52 04             	mov    0x4(%edx),%edx
f0132803:	89 50 04             	mov    %edx,0x4(%eax)
f0132806:	eb 0b                	jmp    f0132813 <alloc_block_NF+0x270>
f0132808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280b:	8b 40 04             	mov    0x4(%eax),%eax
f013280e:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132816:	8b 40 04             	mov    0x4(%eax),%eax
f0132819:	85 c0                	test   %eax,%eax
f013281b:	74 0f                	je     f013282c <alloc_block_NF+0x289>
f013281d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132820:	8b 40 04             	mov    0x4(%eax),%eax
f0132823:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132826:	8b 12                	mov    (%edx),%edx
f0132828:	89 10                	mov    %edx,(%eax)
f013282a:	eb 0a                	jmp    f0132836 <alloc_block_NF+0x293>
f013282c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013282f:	8b 00                	mov    (%eax),%eax
f0132831:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132839:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013283f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132842:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132849:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013284e:	48                   	dec    %eax
f013284f:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					   svaOfNF = point->sva;
f0132854:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132857:	8b 40 08             	mov    0x8(%eax),%eax
f013285a:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   return  point;
f013285f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132862:	e9 07 03 00 00       	jmp    f0132b6e <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132867:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013286a:	8b 40 0c             	mov    0xc(%eax),%eax
f013286d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132870:	0f 86 d4 00 00 00    	jbe    f013294a <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132876:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f013287b:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f013287e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132881:	8b 50 08             	mov    0x8(%eax),%edx
f0132884:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132887:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013288a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013288d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132890:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132893:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132897:	75 17                	jne    f01328b0 <alloc_block_NF+0x30d>
f0132899:	83 ec 04             	sub    $0x4,%esp
f013289c:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01328a1:	68 04 01 00 00       	push   $0x104
f01328a6:	68 47 d6 13 f0       	push   $0xf013d647
f01328ab:	e8 55 d9 fc ff       	call   f0100205 <_panic>
f01328b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328b3:	8b 00                	mov    (%eax),%eax
f01328b5:	85 c0                	test   %eax,%eax
f01328b7:	74 10                	je     f01328c9 <alloc_block_NF+0x326>
f01328b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328bc:	8b 00                	mov    (%eax),%eax
f01328be:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01328c1:	8b 52 04             	mov    0x4(%edx),%edx
f01328c4:	89 50 04             	mov    %edx,0x4(%eax)
f01328c7:	eb 0b                	jmp    f01328d4 <alloc_block_NF+0x331>
f01328c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328cc:	8b 40 04             	mov    0x4(%eax),%eax
f01328cf:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01328d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328d7:	8b 40 04             	mov    0x4(%eax),%eax
f01328da:	85 c0                	test   %eax,%eax
f01328dc:	74 0f                	je     f01328ed <alloc_block_NF+0x34a>
f01328de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328e1:	8b 40 04             	mov    0x4(%eax),%eax
f01328e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01328e7:	8b 12                	mov    (%edx),%edx
f01328e9:	89 10                	mov    %edx,(%eax)
f01328eb:	eb 0a                	jmp    f01328f7 <alloc_block_NF+0x354>
f01328ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328f0:	8b 00                	mov    (%eax),%eax
f01328f2:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01328f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132900:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132903:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013290a:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013290f:	48                   	dec    %eax
f0132910:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					   svaOfNF = ReturnedBlock->sva;
f0132915:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132918:	8b 40 08             	mov    0x8(%eax),%eax
f013291b:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   point->sva += size;
f0132920:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132923:	8b 50 08             	mov    0x8(%eax),%edx
f0132926:	8b 45 08             	mov    0x8(%ebp),%eax
f0132929:	01 c2                	add    %eax,%edx
f013292b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013292e:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132931:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132934:	8b 40 0c             	mov    0xc(%eax),%eax
f0132937:	2b 45 08             	sub    0x8(%ebp),%eax
f013293a:	89 c2                	mov    %eax,%edx
f013293c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013293f:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132942:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132945:	e9 24 02 00 00       	jmp    f0132b6e <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013294a:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013294f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132952:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132956:	74 07                	je     f013295f <alloc_block_NF+0x3bc>
f0132958:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295b:	8b 00                	mov    (%eax),%eax
f013295d:	eb 05                	jmp    f0132964 <alloc_block_NF+0x3c1>
f013295f:	b8 00 00 00 00       	mov    $0x0,%eax
f0132964:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132969:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013296e:	85 c0                	test   %eax,%eax
f0132970:	0f 85 2b fe ff ff    	jne    f01327a1 <alloc_block_NF+0x1fe>
f0132976:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013297a:	0f 85 21 fe ff ff    	jne    f01327a1 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132980:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132985:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132988:	e9 ae 01 00 00       	jmp    f0132b3b <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f013298d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132990:	8b 50 08             	mov    0x8(%eax),%edx
f0132993:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f0132998:	39 c2                	cmp    %eax,%edx
f013299a:	0f 83 93 01 00 00    	jae    f0132b33 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f01329a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01329a6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329a9:	0f 82 84 01 00 00    	jb     f0132b33 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f01329af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329b2:	8b 40 0c             	mov    0xc(%eax),%eax
f01329b5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329b8:	0f 85 95 00 00 00    	jne    f0132a53 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01329be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329c2:	75 17                	jne    f01329db <alloc_block_NF+0x438>
f01329c4:	83 ec 04             	sub    $0x4,%esp
f01329c7:	68 f0 d6 13 f0       	push   $0xf013d6f0
f01329cc:	68 14 01 00 00       	push   $0x114
f01329d1:	68 47 d6 13 f0       	push   $0xf013d647
f01329d6:	e8 2a d8 fc ff       	call   f0100205 <_panic>
f01329db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329de:	8b 00                	mov    (%eax),%eax
f01329e0:	85 c0                	test   %eax,%eax
f01329e2:	74 10                	je     f01329f4 <alloc_block_NF+0x451>
f01329e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329e7:	8b 00                	mov    (%eax),%eax
f01329e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01329ec:	8b 52 04             	mov    0x4(%edx),%edx
f01329ef:	89 50 04             	mov    %edx,0x4(%eax)
f01329f2:	eb 0b                	jmp    f01329ff <alloc_block_NF+0x45c>
f01329f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329f7:	8b 40 04             	mov    0x4(%eax),%eax
f01329fa:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f01329ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a02:	8b 40 04             	mov    0x4(%eax),%eax
f0132a05:	85 c0                	test   %eax,%eax
f0132a07:	74 0f                	je     f0132a18 <alloc_block_NF+0x475>
f0132a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a0c:	8b 40 04             	mov    0x4(%eax),%eax
f0132a0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a12:	8b 12                	mov    (%edx),%edx
f0132a14:	89 10                	mov    %edx,(%eax)
f0132a16:	eb 0a                	jmp    f0132a22 <alloc_block_NF+0x47f>
f0132a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a1b:	8b 00                	mov    (%eax),%eax
f0132a1d:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a25:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a2e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a35:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132a3a:	48                   	dec    %eax
f0132a3b:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					   svaOfNF = point->sva;
f0132a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a43:	8b 40 08             	mov    0x8(%eax),%eax
f0132a46:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   return  point;
f0132a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a4e:	e9 1b 01 00 00       	jmp    f0132b6e <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a56:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a59:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a5c:	0f 86 d1 00 00 00    	jbe    f0132b33 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132a62:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132a67:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a6d:	8b 50 08             	mov    0x8(%eax),%edx
f0132a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a73:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a79:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a7c:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132a7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132a83:	75 17                	jne    f0132a9c <alloc_block_NF+0x4f9>
f0132a85:	83 ec 04             	sub    $0x4,%esp
f0132a88:	68 f0 d6 13 f0       	push   $0xf013d6f0
f0132a8d:	68 1c 01 00 00       	push   $0x11c
f0132a92:	68 47 d6 13 f0       	push   $0xf013d647
f0132a97:	e8 69 d7 fc ff       	call   f0100205 <_panic>
f0132a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a9f:	8b 00                	mov    (%eax),%eax
f0132aa1:	85 c0                	test   %eax,%eax
f0132aa3:	74 10                	je     f0132ab5 <alloc_block_NF+0x512>
f0132aa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aa8:	8b 00                	mov    (%eax),%eax
f0132aaa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132aad:	8b 52 04             	mov    0x4(%edx),%edx
f0132ab0:	89 50 04             	mov    %edx,0x4(%eax)
f0132ab3:	eb 0b                	jmp    f0132ac0 <alloc_block_NF+0x51d>
f0132ab5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ab8:	8b 40 04             	mov    0x4(%eax),%eax
f0132abb:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132ac0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ac3:	8b 40 04             	mov    0x4(%eax),%eax
f0132ac6:	85 c0                	test   %eax,%eax
f0132ac8:	74 0f                	je     f0132ad9 <alloc_block_NF+0x536>
f0132aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132acd:	8b 40 04             	mov    0x4(%eax),%eax
f0132ad0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ad3:	8b 12                	mov    (%edx),%edx
f0132ad5:	89 10                	mov    %edx,(%eax)
f0132ad7:	eb 0a                	jmp    f0132ae3 <alloc_block_NF+0x540>
f0132ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132adc:	8b 00                	mov    (%eax),%eax
f0132ade:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132ae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ae6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132aec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132af6:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132afb:	48                   	dec    %eax
f0132afc:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					   svaOfNF = ReturnedBlock->sva;
f0132b01:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b04:	8b 40 08             	mov    0x8(%eax),%eax
f0132b07:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   point->sva += size;
f0132b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b0f:	8b 50 08             	mov    0x8(%eax),%edx
f0132b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b15:	01 c2                	add    %eax,%edx
f0132b17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b1a:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b20:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b23:	2b 45 08             	sub    0x8(%ebp),%eax
f0132b26:	89 c2                	mov    %eax,%edx
f0132b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b2b:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b31:	eb 3b                	jmp    f0132b6e <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132b33:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132b38:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b3f:	74 07                	je     f0132b48 <alloc_block_NF+0x5a5>
f0132b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b44:	8b 00                	mov    (%eax),%eax
f0132b46:	eb 05                	jmp    f0132b4d <alloc_block_NF+0x5aa>
f0132b48:	b8 00 00 00 00       	mov    $0x0,%eax
f0132b4d:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132b52:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132b57:	85 c0                	test   %eax,%eax
f0132b59:	0f 85 2e fe ff ff    	jne    f013298d <alloc_block_NF+0x3ea>
f0132b5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b63:	0f 85 24 fe ff ff    	jne    f013298d <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132b69:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132b6e:	c9                   	leave  
f0132b6f:	c3                   	ret    

f0132b70 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132b70:	55                   	push   %ebp
f0132b71:	89 e5                	mov    %esp,%ebp
f0132b73:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132b76:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132b7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132b7e:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f0132b83:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132b86:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132b8b:	85 c0                	test   %eax,%eax
f0132b8d:	74 14                	je     f0132ba3 <insert_sorted_with_merge_freeList+0x33>
f0132b8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b92:	8b 50 08             	mov    0x8(%eax),%edx
f0132b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b98:	8b 40 08             	mov    0x8(%eax),%eax
f0132b9b:	39 c2                	cmp    %eax,%edx
f0132b9d:	0f 87 9b 01 00 00    	ja     f0132d3e <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132ba7:	75 17                	jne    f0132bc0 <insert_sorted_with_merge_freeList+0x50>
f0132ba9:	83 ec 04             	sub    $0x4,%esp
f0132bac:	68 24 d6 13 f0       	push   $0xf013d624
f0132bb1:	68 38 01 00 00       	push   $0x138
f0132bb6:	68 47 d6 13 f0       	push   $0xf013d647
f0132bbb:	e8 45 d6 fc ff       	call   f0100205 <_panic>
f0132bc0:	8b 15 64 1d 88 f0    	mov    0xf0881d64,%edx
f0132bc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bc9:	89 10                	mov    %edx,(%eax)
f0132bcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bce:	8b 00                	mov    (%eax),%eax
f0132bd0:	85 c0                	test   %eax,%eax
f0132bd2:	74 0d                	je     f0132be1 <insert_sorted_with_merge_freeList+0x71>
f0132bd4:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132bd9:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bdc:	89 50 04             	mov    %edx,0x4(%eax)
f0132bdf:	eb 08                	jmp    f0132be9 <insert_sorted_with_merge_freeList+0x79>
f0132be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132be4:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bec:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132bf1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bf4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132bfb:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132c00:	40                   	inc    %eax
f0132c01:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132c06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132c0a:	0f 84 a8 06 00 00    	je     f01332b8 <insert_sorted_with_merge_freeList+0x748>
f0132c10:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c13:	8b 50 08             	mov    0x8(%eax),%edx
f0132c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c19:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c1c:	01 c2                	add    %eax,%edx
f0132c1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c21:	8b 40 08             	mov    0x8(%eax),%eax
f0132c24:	39 c2                	cmp    %eax,%edx
f0132c26:	0f 85 8c 06 00 00    	jne    f01332b8 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132c2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c2f:	8b 50 0c             	mov    0xc(%eax),%edx
f0132c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c35:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c38:	01 c2                	add    %eax,%edx
f0132c3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c3d:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132c40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132c44:	75 17                	jne    f0132c5d <insert_sorted_with_merge_freeList+0xed>
f0132c46:	83 ec 04             	sub    $0x4,%esp
f0132c49:	68 f0 d6 13 f0       	push   $0xf013d6f0
f0132c4e:	68 3c 01 00 00       	push   $0x13c
f0132c53:	68 47 d6 13 f0       	push   $0xf013d647
f0132c58:	e8 a8 d5 fc ff       	call   f0100205 <_panic>
f0132c5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c60:	8b 00                	mov    (%eax),%eax
f0132c62:	85 c0                	test   %eax,%eax
f0132c64:	74 10                	je     f0132c76 <insert_sorted_with_merge_freeList+0x106>
f0132c66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c69:	8b 00                	mov    (%eax),%eax
f0132c6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132c6e:	8b 52 04             	mov    0x4(%edx),%edx
f0132c71:	89 50 04             	mov    %edx,0x4(%eax)
f0132c74:	eb 0b                	jmp    f0132c81 <insert_sorted_with_merge_freeList+0x111>
f0132c76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c79:	8b 40 04             	mov    0x4(%eax),%eax
f0132c7c:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132c81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c84:	8b 40 04             	mov    0x4(%eax),%eax
f0132c87:	85 c0                	test   %eax,%eax
f0132c89:	74 0f                	je     f0132c9a <insert_sorted_with_merge_freeList+0x12a>
f0132c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c8e:	8b 40 04             	mov    0x4(%eax),%eax
f0132c91:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132c94:	8b 12                	mov    (%edx),%edx
f0132c96:	89 10                	mov    %edx,(%eax)
f0132c98:	eb 0a                	jmp    f0132ca4 <insert_sorted_with_merge_freeList+0x134>
f0132c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c9d:	8b 00                	mov    (%eax),%eax
f0132c9f:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ca7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cb0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132cb7:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132cbc:	48                   	dec    %eax
f0132cbd:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			head->size = 0;
f0132cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cc5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132ccc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ccf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132cda:	75 17                	jne    f0132cf3 <insert_sorted_with_merge_freeList+0x183>
f0132cdc:	83 ec 04             	sub    $0x4,%esp
f0132cdf:	68 24 d6 13 f0       	push   $0xf013d624
f0132ce4:	68 3f 01 00 00       	push   $0x13f
f0132ce9:	68 47 d6 13 f0       	push   $0xf013d647
f0132cee:	e8 12 d5 fc ff       	call   f0100205 <_panic>
f0132cf3:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0132cf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cfc:	89 10                	mov    %edx,(%eax)
f0132cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d01:	8b 00                	mov    (%eax),%eax
f0132d03:	85 c0                	test   %eax,%eax
f0132d05:	74 0d                	je     f0132d14 <insert_sorted_with_merge_freeList+0x1a4>
f0132d07:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132d0c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d0f:	89 50 04             	mov    %edx,0x4(%eax)
f0132d12:	eb 08                	jmp    f0132d1c <insert_sorted_with_merge_freeList+0x1ac>
f0132d14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d17:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132d1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d1f:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132d24:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d27:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d2e:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132d33:	40                   	inc    %eax
f0132d34:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132d39:	e9 7a 05 00 00       	jmp    f01332b8 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d41:	8b 50 08             	mov    0x8(%eax),%edx
f0132d44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d47:	8b 40 08             	mov    0x8(%eax),%eax
f0132d4a:	39 c2                	cmp    %eax,%edx
f0132d4c:	0f 82 14 01 00 00    	jb     f0132e66 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132d52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d55:	8b 50 08             	mov    0x8(%eax),%edx
f0132d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d5b:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d5e:	01 c2                	add    %eax,%edx
f0132d60:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d63:	8b 40 08             	mov    0x8(%eax),%eax
f0132d66:	39 c2                	cmp    %eax,%edx
f0132d68:	0f 85 90 00 00 00    	jne    f0132dfe <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132d6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d71:	8b 50 0c             	mov    0xc(%eax),%edx
f0132d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d77:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d7a:	01 c2                	add    %eax,%edx
f0132d7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d7f:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132d82:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d85:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132d8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d8f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132d96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132d9a:	75 17                	jne    f0132db3 <insert_sorted_with_merge_freeList+0x243>
f0132d9c:	83 ec 04             	sub    $0x4,%esp
f0132d9f:	68 24 d6 13 f0       	push   $0xf013d624
f0132da4:	68 49 01 00 00       	push   $0x149
f0132da9:	68 47 d6 13 f0       	push   $0xf013d647
f0132dae:	e8 52 d4 fc ff       	call   f0100205 <_panic>
f0132db3:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0132db9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dbc:	89 10                	mov    %edx,(%eax)
f0132dbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dc1:	8b 00                	mov    (%eax),%eax
f0132dc3:	85 c0                	test   %eax,%eax
f0132dc5:	74 0d                	je     f0132dd4 <insert_sorted_with_merge_freeList+0x264>
f0132dc7:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132dcc:	8b 55 08             	mov    0x8(%ebp),%edx
f0132dcf:	89 50 04             	mov    %edx,0x4(%eax)
f0132dd2:	eb 08                	jmp    f0132ddc <insert_sorted_with_merge_freeList+0x26c>
f0132dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dd7:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ddf:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132de4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132de7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132dee:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132df3:	40                   	inc    %eax
f0132df4:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132df9:	e9 bb 04 00 00       	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132dfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e02:	75 17                	jne    f0132e1b <insert_sorted_with_merge_freeList+0x2ab>
f0132e04:	83 ec 04             	sub    $0x4,%esp
f0132e07:	68 98 d6 13 f0       	push   $0xf013d698
f0132e0c:	68 4c 01 00 00       	push   $0x14c
f0132e11:	68 47 d6 13 f0       	push   $0xf013d647
f0132e16:	e8 ea d3 fc ff       	call   f0100205 <_panic>
f0132e1b:	8b 15 68 1d 88 f0    	mov    0xf0881d68,%edx
f0132e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e24:	89 50 04             	mov    %edx,0x4(%eax)
f0132e27:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e2a:	8b 40 04             	mov    0x4(%eax),%eax
f0132e2d:	85 c0                	test   %eax,%eax
f0132e2f:	74 0c                	je     f0132e3d <insert_sorted_with_merge_freeList+0x2cd>
f0132e31:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f0132e36:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e39:	89 10                	mov    %edx,(%eax)
f0132e3b:	eb 08                	jmp    f0132e45 <insert_sorted_with_merge_freeList+0x2d5>
f0132e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e40:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132e45:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e48:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132e56:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132e5b:	40                   	inc    %eax
f0132e5c:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132e61:	e9 53 04 00 00       	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132e66:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132e6e:	e9 15 04 00 00       	jmp    f0133288 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e76:	8b 00                	mov    (%eax),%eax
f0132e78:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132e7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e7e:	8b 50 08             	mov    0x8(%eax),%edx
f0132e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e84:	8b 40 08             	mov    0x8(%eax),%eax
f0132e87:	39 c2                	cmp    %eax,%edx
f0132e89:	0f 86 f1 03 00 00    	jbe    f0133280 <insert_sorted_with_merge_freeList+0x710>
f0132e8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e92:	8b 50 08             	mov    0x8(%eax),%edx
f0132e95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e98:	8b 40 08             	mov    0x8(%eax),%eax
f0132e9b:	39 c2                	cmp    %eax,%edx
f0132e9d:	0f 83 dd 03 00 00    	jae    f0133280 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ea6:	8b 50 08             	mov    0x8(%eax),%edx
f0132ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132eac:	8b 40 0c             	mov    0xc(%eax),%eax
f0132eaf:	01 c2                	add    %eax,%edx
f0132eb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eb4:	8b 40 08             	mov    0x8(%eax),%eax
f0132eb7:	39 c2                	cmp    %eax,%edx
f0132eb9:	0f 85 b9 01 00 00    	jne    f0133078 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132ebf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ec2:	8b 50 08             	mov    0x8(%eax),%edx
f0132ec5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ec8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ecb:	01 c2                	add    %eax,%edx
f0132ecd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ed0:	8b 40 08             	mov    0x8(%eax),%eax
f0132ed3:	39 c2                	cmp    %eax,%edx
f0132ed5:	0f 85 0d 01 00 00    	jne    f0132fe8 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ede:	8b 50 0c             	mov    0xc(%eax),%edx
f0132ee1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ee4:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ee7:	01 c2                	add    %eax,%edx
f0132ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132eec:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132eef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ef3:	75 17                	jne    f0132f0c <insert_sorted_with_merge_freeList+0x39c>
f0132ef5:	83 ec 04             	sub    $0x4,%esp
f0132ef8:	68 f0 d6 13 f0       	push   $0xf013d6f0
f0132efd:	68 5c 01 00 00       	push   $0x15c
f0132f02:	68 47 d6 13 f0       	push   $0xf013d647
f0132f07:	e8 f9 d2 fc ff       	call   f0100205 <_panic>
f0132f0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f0f:	8b 00                	mov    (%eax),%eax
f0132f11:	85 c0                	test   %eax,%eax
f0132f13:	74 10                	je     f0132f25 <insert_sorted_with_merge_freeList+0x3b5>
f0132f15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f18:	8b 00                	mov    (%eax),%eax
f0132f1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f1d:	8b 52 04             	mov    0x4(%edx),%edx
f0132f20:	89 50 04             	mov    %edx,0x4(%eax)
f0132f23:	eb 0b                	jmp    f0132f30 <insert_sorted_with_merge_freeList+0x3c0>
f0132f25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f28:	8b 40 04             	mov    0x4(%eax),%eax
f0132f2b:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132f30:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f33:	8b 40 04             	mov    0x4(%eax),%eax
f0132f36:	85 c0                	test   %eax,%eax
f0132f38:	74 0f                	je     f0132f49 <insert_sorted_with_merge_freeList+0x3d9>
f0132f3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f3d:	8b 40 04             	mov    0x4(%eax),%eax
f0132f40:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f43:	8b 12                	mov    (%edx),%edx
f0132f45:	89 10                	mov    %edx,(%eax)
f0132f47:	eb 0a                	jmp    f0132f53 <insert_sorted_with_merge_freeList+0x3e3>
f0132f49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f4c:	8b 00                	mov    (%eax),%eax
f0132f4e:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132f53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132f5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f5f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f66:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132f6b:	48                   	dec    %eax
f0132f6c:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
						nextBlock->sva = 0;
f0132f71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f74:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132f7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f7e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132f85:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132f89:	75 17                	jne    f0132fa2 <insert_sorted_with_merge_freeList+0x432>
f0132f8b:	83 ec 04             	sub    $0x4,%esp
f0132f8e:	68 24 d6 13 f0       	push   $0xf013d624
f0132f93:	68 5f 01 00 00       	push   $0x15f
f0132f98:	68 47 d6 13 f0       	push   $0xf013d647
f0132f9d:	e8 63 d2 fc ff       	call   f0100205 <_panic>
f0132fa2:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0132fa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fab:	89 10                	mov    %edx,(%eax)
f0132fad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fb0:	8b 00                	mov    (%eax),%eax
f0132fb2:	85 c0                	test   %eax,%eax
f0132fb4:	74 0d                	je     f0132fc3 <insert_sorted_with_merge_freeList+0x453>
f0132fb6:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132fbb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132fbe:	89 50 04             	mov    %edx,0x4(%eax)
f0132fc1:	eb 08                	jmp    f0132fcb <insert_sorted_with_merge_freeList+0x45b>
f0132fc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fc6:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132fcb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fce:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132fd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fd6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fdd:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132fe2:	40                   	inc    %eax
f0132fe3:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					}
					currentBlock->size += blockToInsert->size;
f0132fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132feb:	8b 50 0c             	mov    0xc(%eax),%edx
f0132fee:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ff1:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ff4:	01 c2                	add    %eax,%edx
f0132ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ff9:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132ffc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0133006:	8b 45 08             	mov    0x8(%ebp),%eax
f0133009:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0133010:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133014:	75 17                	jne    f013302d <insert_sorted_with_merge_freeList+0x4bd>
f0133016:	83 ec 04             	sub    $0x4,%esp
f0133019:	68 24 d6 13 f0       	push   $0xf013d624
f013301e:	68 64 01 00 00       	push   $0x164
f0133023:	68 47 d6 13 f0       	push   $0xf013d647
f0133028:	e8 d8 d1 fc ff       	call   f0100205 <_panic>
f013302d:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0133033:	8b 45 08             	mov    0x8(%ebp),%eax
f0133036:	89 10                	mov    %edx,(%eax)
f0133038:	8b 45 08             	mov    0x8(%ebp),%eax
f013303b:	8b 00                	mov    (%eax),%eax
f013303d:	85 c0                	test   %eax,%eax
f013303f:	74 0d                	je     f013304e <insert_sorted_with_merge_freeList+0x4de>
f0133041:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0133046:	8b 55 08             	mov    0x8(%ebp),%edx
f0133049:	89 50 04             	mov    %edx,0x4(%eax)
f013304c:	eb 08                	jmp    f0133056 <insert_sorted_with_merge_freeList+0x4e6>
f013304e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133051:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0133056:	8b 45 08             	mov    0x8(%ebp),%eax
f0133059:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f013305e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133061:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133068:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013306d:	40                   	inc    %eax
f013306e:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					break;
f0133073:	e9 41 02 00 00       	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0133078:	8b 45 08             	mov    0x8(%ebp),%eax
f013307b:	8b 50 08             	mov    0x8(%eax),%edx
f013307e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133081:	8b 40 0c             	mov    0xc(%eax),%eax
f0133084:	01 c2                	add    %eax,%edx
f0133086:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133089:	8b 40 08             	mov    0x8(%eax),%eax
f013308c:	39 c2                	cmp    %eax,%edx
f013308e:	0f 85 7c 01 00 00    	jne    f0133210 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0133094:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133098:	74 06                	je     f01330a0 <insert_sorted_with_merge_freeList+0x530>
f013309a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013309e:	75 17                	jne    f01330b7 <insert_sorted_with_merge_freeList+0x547>
f01330a0:	83 ec 04             	sub    $0x4,%esp
f01330a3:	68 60 d6 13 f0       	push   $0xf013d660
f01330a8:	68 69 01 00 00       	push   $0x169
f01330ad:	68 47 d6 13 f0       	push   $0xf013d647
f01330b2:	e8 4e d1 fc ff       	call   f0100205 <_panic>
f01330b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330ba:	8b 50 04             	mov    0x4(%eax),%edx
f01330bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01330c0:	89 50 04             	mov    %edx,0x4(%eax)
f01330c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01330c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01330c9:	89 10                	mov    %edx,(%eax)
f01330cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330ce:	8b 40 04             	mov    0x4(%eax),%eax
f01330d1:	85 c0                	test   %eax,%eax
f01330d3:	74 0d                	je     f01330e2 <insert_sorted_with_merge_freeList+0x572>
f01330d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330d8:	8b 40 04             	mov    0x4(%eax),%eax
f01330db:	8b 55 08             	mov    0x8(%ebp),%edx
f01330de:	89 10                	mov    %edx,(%eax)
f01330e0:	eb 08                	jmp    f01330ea <insert_sorted_with_merge_freeList+0x57a>
f01330e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01330e5:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f01330ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330ed:	8b 55 08             	mov    0x8(%ebp),%edx
f01330f0:	89 50 04             	mov    %edx,0x4(%eax)
f01330f3:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01330f8:	40                   	inc    %eax
f01330f9:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					blockToInsert->size += nextBlock->size;
f01330fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0133101:	8b 50 0c             	mov    0xc(%eax),%edx
f0133104:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133107:	8b 40 0c             	mov    0xc(%eax),%eax
f013310a:	01 c2                	add    %eax,%edx
f013310c:	8b 45 08             	mov    0x8(%ebp),%eax
f013310f:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133112:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133116:	75 17                	jne    f013312f <insert_sorted_with_merge_freeList+0x5bf>
f0133118:	83 ec 04             	sub    $0x4,%esp
f013311b:	68 f0 d6 13 f0       	push   $0xf013d6f0
f0133120:	68 6b 01 00 00       	push   $0x16b
f0133125:	68 47 d6 13 f0       	push   $0xf013d647
f013312a:	e8 d6 d0 fc ff       	call   f0100205 <_panic>
f013312f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133132:	8b 00                	mov    (%eax),%eax
f0133134:	85 c0                	test   %eax,%eax
f0133136:	74 10                	je     f0133148 <insert_sorted_with_merge_freeList+0x5d8>
f0133138:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013313b:	8b 00                	mov    (%eax),%eax
f013313d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133140:	8b 52 04             	mov    0x4(%edx),%edx
f0133143:	89 50 04             	mov    %edx,0x4(%eax)
f0133146:	eb 0b                	jmp    f0133153 <insert_sorted_with_merge_freeList+0x5e3>
f0133148:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013314b:	8b 40 04             	mov    0x4(%eax),%eax
f013314e:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133153:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133156:	8b 40 04             	mov    0x4(%eax),%eax
f0133159:	85 c0                	test   %eax,%eax
f013315b:	74 0f                	je     f013316c <insert_sorted_with_merge_freeList+0x5fc>
f013315d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133160:	8b 40 04             	mov    0x4(%eax),%eax
f0133163:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133166:	8b 12                	mov    (%edx),%edx
f0133168:	89 10                	mov    %edx,(%eax)
f013316a:	eb 0a                	jmp    f0133176 <insert_sorted_with_merge_freeList+0x606>
f013316c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013316f:	8b 00                	mov    (%eax),%eax
f0133171:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0133176:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133179:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013317f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133182:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133189:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013318e:	48                   	dec    %eax
f013318f:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					nextBlock->sva = 0;
f0133194:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133197:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f013319e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01331a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01331ac:	75 17                	jne    f01331c5 <insert_sorted_with_merge_freeList+0x655>
f01331ae:	83 ec 04             	sub    $0x4,%esp
f01331b1:	68 24 d6 13 f0       	push   $0xf013d624
f01331b6:	68 6e 01 00 00       	push   $0x16e
f01331bb:	68 47 d6 13 f0       	push   $0xf013d647
f01331c0:	e8 40 d0 fc ff       	call   f0100205 <_panic>
f01331c5:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f01331cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331ce:	89 10                	mov    %edx,(%eax)
f01331d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331d3:	8b 00                	mov    (%eax),%eax
f01331d5:	85 c0                	test   %eax,%eax
f01331d7:	74 0d                	je     f01331e6 <insert_sorted_with_merge_freeList+0x676>
f01331d9:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01331de:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01331e1:	89 50 04             	mov    %edx,0x4(%eax)
f01331e4:	eb 08                	jmp    f01331ee <insert_sorted_with_merge_freeList+0x67e>
f01331e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331e9:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01331ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331f1:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01331f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133200:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0133205:	40                   	inc    %eax
f0133206:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					break;
f013320b:	e9 a9 00 00 00       	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133210:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133214:	74 06                	je     f013321c <insert_sorted_with_merge_freeList+0x6ac>
f0133216:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013321a:	75 17                	jne    f0133233 <insert_sorted_with_merge_freeList+0x6c3>
f013321c:	83 ec 04             	sub    $0x4,%esp
f013321f:	68 bc d6 13 f0       	push   $0xf013d6bc
f0133224:	68 73 01 00 00       	push   $0x173
f0133229:	68 47 d6 13 f0       	push   $0xf013d647
f013322e:	e8 d2 cf fc ff       	call   f0100205 <_panic>
f0133233:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133236:	8b 10                	mov    (%eax),%edx
f0133238:	8b 45 08             	mov    0x8(%ebp),%eax
f013323b:	89 10                	mov    %edx,(%eax)
f013323d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133240:	8b 00                	mov    (%eax),%eax
f0133242:	85 c0                	test   %eax,%eax
f0133244:	74 0b                	je     f0133251 <insert_sorted_with_merge_freeList+0x6e1>
f0133246:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133249:	8b 00                	mov    (%eax),%eax
f013324b:	8b 55 08             	mov    0x8(%ebp),%edx
f013324e:	89 50 04             	mov    %edx,0x4(%eax)
f0133251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133254:	8b 55 08             	mov    0x8(%ebp),%edx
f0133257:	89 10                	mov    %edx,(%eax)
f0133259:	8b 45 08             	mov    0x8(%ebp),%eax
f013325c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013325f:	89 50 04             	mov    %edx,0x4(%eax)
f0133262:	8b 45 08             	mov    0x8(%ebp),%eax
f0133265:	8b 00                	mov    (%eax),%eax
f0133267:	85 c0                	test   %eax,%eax
f0133269:	75 08                	jne    f0133273 <insert_sorted_with_merge_freeList+0x703>
f013326b:	8b 45 08             	mov    0x8(%ebp),%eax
f013326e:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133273:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0133278:	40                   	inc    %eax
f0133279:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					break;
f013327e:	eb 39                	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133280:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0133285:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133288:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013328c:	74 07                	je     f0133295 <insert_sorted_with_merge_freeList+0x725>
f013328e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133291:	8b 00                	mov    (%eax),%eax
f0133293:	eb 05                	jmp    f013329a <insert_sorted_with_merge_freeList+0x72a>
f0133295:	b8 00 00 00 00       	mov    $0x0,%eax
f013329a:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f013329f:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f01332a4:	85 c0                	test   %eax,%eax
f01332a6:	0f 85 c7 fb ff ff    	jne    f0132e73 <insert_sorted_with_merge_freeList+0x303>
f01332ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01332b0:	0f 85 bd fb ff ff    	jne    f0132e73 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01332b6:	eb 01                	jmp    f01332b9 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01332b8:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01332b9:	90                   	nop
f01332ba:	c9                   	leave  
f01332bb:	c3                   	ret    

f01332bc <__udivdi3>:
f01332bc:	55                   	push   %ebp
f01332bd:	57                   	push   %edi
f01332be:	56                   	push   %esi
f01332bf:	53                   	push   %ebx
f01332c0:	83 ec 1c             	sub    $0x1c,%esp
f01332c3:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01332c7:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01332cb:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01332cf:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01332d3:	89 ca                	mov    %ecx,%edx
f01332d5:	89 f8                	mov    %edi,%eax
f01332d7:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01332db:	85 f6                	test   %esi,%esi
f01332dd:	75 2d                	jne    f013330c <__udivdi3+0x50>
f01332df:	39 cf                	cmp    %ecx,%edi
f01332e1:	77 65                	ja     f0133348 <__udivdi3+0x8c>
f01332e3:	89 fd                	mov    %edi,%ebp
f01332e5:	85 ff                	test   %edi,%edi
f01332e7:	75 0b                	jne    f01332f4 <__udivdi3+0x38>
f01332e9:	b8 01 00 00 00       	mov    $0x1,%eax
f01332ee:	31 d2                	xor    %edx,%edx
f01332f0:	f7 f7                	div    %edi
f01332f2:	89 c5                	mov    %eax,%ebp
f01332f4:	31 d2                	xor    %edx,%edx
f01332f6:	89 c8                	mov    %ecx,%eax
f01332f8:	f7 f5                	div    %ebp
f01332fa:	89 c1                	mov    %eax,%ecx
f01332fc:	89 d8                	mov    %ebx,%eax
f01332fe:	f7 f5                	div    %ebp
f0133300:	89 cf                	mov    %ecx,%edi
f0133302:	89 fa                	mov    %edi,%edx
f0133304:	83 c4 1c             	add    $0x1c,%esp
f0133307:	5b                   	pop    %ebx
f0133308:	5e                   	pop    %esi
f0133309:	5f                   	pop    %edi
f013330a:	5d                   	pop    %ebp
f013330b:	c3                   	ret    
f013330c:	39 ce                	cmp    %ecx,%esi
f013330e:	77 28                	ja     f0133338 <__udivdi3+0x7c>
f0133310:	0f bd fe             	bsr    %esi,%edi
f0133313:	83 f7 1f             	xor    $0x1f,%edi
f0133316:	75 40                	jne    f0133358 <__udivdi3+0x9c>
f0133318:	39 ce                	cmp    %ecx,%esi
f013331a:	72 0a                	jb     f0133326 <__udivdi3+0x6a>
f013331c:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133320:	0f 87 9e 00 00 00    	ja     f01333c4 <__udivdi3+0x108>
f0133326:	b8 01 00 00 00       	mov    $0x1,%eax
f013332b:	89 fa                	mov    %edi,%edx
f013332d:	83 c4 1c             	add    $0x1c,%esp
f0133330:	5b                   	pop    %ebx
f0133331:	5e                   	pop    %esi
f0133332:	5f                   	pop    %edi
f0133333:	5d                   	pop    %ebp
f0133334:	c3                   	ret    
f0133335:	8d 76 00             	lea    0x0(%esi),%esi
f0133338:	31 ff                	xor    %edi,%edi
f013333a:	31 c0                	xor    %eax,%eax
f013333c:	89 fa                	mov    %edi,%edx
f013333e:	83 c4 1c             	add    $0x1c,%esp
f0133341:	5b                   	pop    %ebx
f0133342:	5e                   	pop    %esi
f0133343:	5f                   	pop    %edi
f0133344:	5d                   	pop    %ebp
f0133345:	c3                   	ret    
f0133346:	66 90                	xchg   %ax,%ax
f0133348:	89 d8                	mov    %ebx,%eax
f013334a:	f7 f7                	div    %edi
f013334c:	31 ff                	xor    %edi,%edi
f013334e:	89 fa                	mov    %edi,%edx
f0133350:	83 c4 1c             	add    $0x1c,%esp
f0133353:	5b                   	pop    %ebx
f0133354:	5e                   	pop    %esi
f0133355:	5f                   	pop    %edi
f0133356:	5d                   	pop    %ebp
f0133357:	c3                   	ret    
f0133358:	bd 20 00 00 00       	mov    $0x20,%ebp
f013335d:	89 eb                	mov    %ebp,%ebx
f013335f:	29 fb                	sub    %edi,%ebx
f0133361:	89 f9                	mov    %edi,%ecx
f0133363:	d3 e6                	shl    %cl,%esi
f0133365:	89 c5                	mov    %eax,%ebp
f0133367:	88 d9                	mov    %bl,%cl
f0133369:	d3 ed                	shr    %cl,%ebp
f013336b:	89 e9                	mov    %ebp,%ecx
f013336d:	09 f1                	or     %esi,%ecx
f013336f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0133373:	89 f9                	mov    %edi,%ecx
f0133375:	d3 e0                	shl    %cl,%eax
f0133377:	89 c5                	mov    %eax,%ebp
f0133379:	89 d6                	mov    %edx,%esi
f013337b:	88 d9                	mov    %bl,%cl
f013337d:	d3 ee                	shr    %cl,%esi
f013337f:	89 f9                	mov    %edi,%ecx
f0133381:	d3 e2                	shl    %cl,%edx
f0133383:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133387:	88 d9                	mov    %bl,%cl
f0133389:	d3 e8                	shr    %cl,%eax
f013338b:	09 c2                	or     %eax,%edx
f013338d:	89 d0                	mov    %edx,%eax
f013338f:	89 f2                	mov    %esi,%edx
f0133391:	f7 74 24 0c          	divl   0xc(%esp)
f0133395:	89 d6                	mov    %edx,%esi
f0133397:	89 c3                	mov    %eax,%ebx
f0133399:	f7 e5                	mul    %ebp
f013339b:	39 d6                	cmp    %edx,%esi
f013339d:	72 19                	jb     f01333b8 <__udivdi3+0xfc>
f013339f:	74 0b                	je     f01333ac <__udivdi3+0xf0>
f01333a1:	89 d8                	mov    %ebx,%eax
f01333a3:	31 ff                	xor    %edi,%edi
f01333a5:	e9 58 ff ff ff       	jmp    f0133302 <__udivdi3+0x46>
f01333aa:	66 90                	xchg   %ax,%ax
f01333ac:	8b 54 24 08          	mov    0x8(%esp),%edx
f01333b0:	89 f9                	mov    %edi,%ecx
f01333b2:	d3 e2                	shl    %cl,%edx
f01333b4:	39 c2                	cmp    %eax,%edx
f01333b6:	73 e9                	jae    f01333a1 <__udivdi3+0xe5>
f01333b8:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01333bb:	31 ff                	xor    %edi,%edi
f01333bd:	e9 40 ff ff ff       	jmp    f0133302 <__udivdi3+0x46>
f01333c2:	66 90                	xchg   %ax,%ax
f01333c4:	31 c0                	xor    %eax,%eax
f01333c6:	e9 37 ff ff ff       	jmp    f0133302 <__udivdi3+0x46>
f01333cb:	90                   	nop

f01333cc <__umoddi3>:
f01333cc:	55                   	push   %ebp
f01333cd:	57                   	push   %edi
f01333ce:	56                   	push   %esi
f01333cf:	53                   	push   %ebx
f01333d0:	83 ec 1c             	sub    $0x1c,%esp
f01333d3:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01333d7:	8b 74 24 34          	mov    0x34(%esp),%esi
f01333db:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01333df:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01333e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01333e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01333eb:	89 f3                	mov    %esi,%ebx
f01333ed:	89 fa                	mov    %edi,%edx
f01333ef:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01333f3:	89 34 24             	mov    %esi,(%esp)
f01333f6:	85 c0                	test   %eax,%eax
f01333f8:	75 1a                	jne    f0133414 <__umoddi3+0x48>
f01333fa:	39 f7                	cmp    %esi,%edi
f01333fc:	0f 86 a2 00 00 00    	jbe    f01334a4 <__umoddi3+0xd8>
f0133402:	89 c8                	mov    %ecx,%eax
f0133404:	89 f2                	mov    %esi,%edx
f0133406:	f7 f7                	div    %edi
f0133408:	89 d0                	mov    %edx,%eax
f013340a:	31 d2                	xor    %edx,%edx
f013340c:	83 c4 1c             	add    $0x1c,%esp
f013340f:	5b                   	pop    %ebx
f0133410:	5e                   	pop    %esi
f0133411:	5f                   	pop    %edi
f0133412:	5d                   	pop    %ebp
f0133413:	c3                   	ret    
f0133414:	39 f0                	cmp    %esi,%eax
f0133416:	0f 87 ac 00 00 00    	ja     f01334c8 <__umoddi3+0xfc>
f013341c:	0f bd e8             	bsr    %eax,%ebp
f013341f:	83 f5 1f             	xor    $0x1f,%ebp
f0133422:	0f 84 ac 00 00 00    	je     f01334d4 <__umoddi3+0x108>
f0133428:	bf 20 00 00 00       	mov    $0x20,%edi
f013342d:	29 ef                	sub    %ebp,%edi
f013342f:	89 fe                	mov    %edi,%esi
f0133431:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133435:	89 e9                	mov    %ebp,%ecx
f0133437:	d3 e0                	shl    %cl,%eax
f0133439:	89 d7                	mov    %edx,%edi
f013343b:	89 f1                	mov    %esi,%ecx
f013343d:	d3 ef                	shr    %cl,%edi
f013343f:	09 c7                	or     %eax,%edi
f0133441:	89 e9                	mov    %ebp,%ecx
f0133443:	d3 e2                	shl    %cl,%edx
f0133445:	89 14 24             	mov    %edx,(%esp)
f0133448:	89 d8                	mov    %ebx,%eax
f013344a:	d3 e0                	shl    %cl,%eax
f013344c:	89 c2                	mov    %eax,%edx
f013344e:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133452:	d3 e0                	shl    %cl,%eax
f0133454:	89 44 24 04          	mov    %eax,0x4(%esp)
f0133458:	8b 44 24 08          	mov    0x8(%esp),%eax
f013345c:	89 f1                	mov    %esi,%ecx
f013345e:	d3 e8                	shr    %cl,%eax
f0133460:	09 d0                	or     %edx,%eax
f0133462:	d3 eb                	shr    %cl,%ebx
f0133464:	89 da                	mov    %ebx,%edx
f0133466:	f7 f7                	div    %edi
f0133468:	89 d3                	mov    %edx,%ebx
f013346a:	f7 24 24             	mull   (%esp)
f013346d:	89 c6                	mov    %eax,%esi
f013346f:	89 d1                	mov    %edx,%ecx
f0133471:	39 d3                	cmp    %edx,%ebx
f0133473:	0f 82 87 00 00 00    	jb     f0133500 <__umoddi3+0x134>
f0133479:	0f 84 91 00 00 00    	je     f0133510 <__umoddi3+0x144>
f013347f:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133483:	29 f2                	sub    %esi,%edx
f0133485:	19 cb                	sbb    %ecx,%ebx
f0133487:	89 d8                	mov    %ebx,%eax
f0133489:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f013348d:	d3 e0                	shl    %cl,%eax
f013348f:	89 e9                	mov    %ebp,%ecx
f0133491:	d3 ea                	shr    %cl,%edx
f0133493:	09 d0                	or     %edx,%eax
f0133495:	89 e9                	mov    %ebp,%ecx
f0133497:	d3 eb                	shr    %cl,%ebx
f0133499:	89 da                	mov    %ebx,%edx
f013349b:	83 c4 1c             	add    $0x1c,%esp
f013349e:	5b                   	pop    %ebx
f013349f:	5e                   	pop    %esi
f01334a0:	5f                   	pop    %edi
f01334a1:	5d                   	pop    %ebp
f01334a2:	c3                   	ret    
f01334a3:	90                   	nop
f01334a4:	89 fd                	mov    %edi,%ebp
f01334a6:	85 ff                	test   %edi,%edi
f01334a8:	75 0b                	jne    f01334b5 <__umoddi3+0xe9>
f01334aa:	b8 01 00 00 00       	mov    $0x1,%eax
f01334af:	31 d2                	xor    %edx,%edx
f01334b1:	f7 f7                	div    %edi
f01334b3:	89 c5                	mov    %eax,%ebp
f01334b5:	89 f0                	mov    %esi,%eax
f01334b7:	31 d2                	xor    %edx,%edx
f01334b9:	f7 f5                	div    %ebp
f01334bb:	89 c8                	mov    %ecx,%eax
f01334bd:	f7 f5                	div    %ebp
f01334bf:	89 d0                	mov    %edx,%eax
f01334c1:	e9 44 ff ff ff       	jmp    f013340a <__umoddi3+0x3e>
f01334c6:	66 90                	xchg   %ax,%ax
f01334c8:	89 c8                	mov    %ecx,%eax
f01334ca:	89 f2                	mov    %esi,%edx
f01334cc:	83 c4 1c             	add    $0x1c,%esp
f01334cf:	5b                   	pop    %ebx
f01334d0:	5e                   	pop    %esi
f01334d1:	5f                   	pop    %edi
f01334d2:	5d                   	pop    %ebp
f01334d3:	c3                   	ret    
f01334d4:	3b 04 24             	cmp    (%esp),%eax
f01334d7:	72 06                	jb     f01334df <__umoddi3+0x113>
f01334d9:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01334dd:	77 0f                	ja     f01334ee <__umoddi3+0x122>
f01334df:	89 f2                	mov    %esi,%edx
f01334e1:	29 f9                	sub    %edi,%ecx
f01334e3:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01334e7:	89 14 24             	mov    %edx,(%esp)
f01334ea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01334ee:	8b 44 24 04          	mov    0x4(%esp),%eax
f01334f2:	8b 14 24             	mov    (%esp),%edx
f01334f5:	83 c4 1c             	add    $0x1c,%esp
f01334f8:	5b                   	pop    %ebx
f01334f9:	5e                   	pop    %esi
f01334fa:	5f                   	pop    %edi
f01334fb:	5d                   	pop    %ebp
f01334fc:	c3                   	ret    
f01334fd:	8d 76 00             	lea    0x0(%esi),%esi
f0133500:	2b 04 24             	sub    (%esp),%eax
f0133503:	19 fa                	sbb    %edi,%edx
f0133505:	89 d1                	mov    %edx,%ecx
f0133507:	89 c6                	mov    %eax,%esi
f0133509:	e9 71 ff ff ff       	jmp    f013347f <__umoddi3+0xb3>
f013350e:	66 90                	xchg   %ax,%ax
f0133510:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133514:	72 ea                	jb     f0133500 <__umoddi3+0x134>
f0133516:	89 d9                	mov    %ebx,%ecx
f0133518:	e9 62 ff ff ff       	jmp    f013347f <__umoddi3+0xb3>
