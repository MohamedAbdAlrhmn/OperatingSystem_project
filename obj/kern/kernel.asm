
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 19 00 	lgdtl  0x191018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 19 f0       	mov    $0xf0190fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 7c 65 f0       	mov    $0xf0657cbc,%edx
f010006a:	b8 b0 6f 65 f0       	mov    $0xf0656fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 6f 65 f0       	push   $0xf0656fb0
f010007e:	e8 eb 0e 03 00       	call   f0130f6e <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 43 0b 00 00       	call   f0100bce <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 f2 00 00 00       	call   f0100182 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 a0 60 00 00       	call   f0106135 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 2c 5c 00 00       	call   f0105cc6 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 ad 63 00 00       	call   f010644c <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 fb da 00 00       	call   f010db9f <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000ae:	e8 9e c9 00 00       	call   f010ca51 <sys_calculate_free_frames>
f01000b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000b6:	e8 81 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000be:	e8 94 75 00 00       	call   f0107657 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000c3:	e8 89 c9 00 00       	call   f010ca51 <sys_calculate_free_frames>
f01000c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000cb:	e8 6c 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01000d6:	ff 75 ec             	pushl  -0x14(%ebp)
f01000d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01000dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01000df:	e8 ed f7 02 00       	call   f012f8d1 <test_initialize_dyn_block_system>
f01000e4:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000e7:	c7 05 28 7b 65 f0 61 	movl   $0x61,0xf0657b28
f01000ee:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f01000f1:	c7 05 b4 7a 65 f0 59 	movl   $0x59,0xf0657ab4
f01000f8:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f01000fb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0100100:	83 ec 0c             	sub    $0xc,%esp
f0100103:	50                   	push   %eax
f0100104:	e8 1d 6f 00 00       	call   f0107026 <create_shares_array>
f0100109:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f010010c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f0100111:	83 ec 0c             	sub    $0xc,%esp
f0100114:	50                   	push   %eax
f0100115:	e8 17 dc 00 00       	call   f010dd31 <create_semaphores_array>
f010011a:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f010011d:	e8 62 9a 00 00       	call   f0109b84 <env_init>
	idt_init();
f0100122:	e8 d1 af 00 00       	call   f010b0f8 <idt_init>

	enableBuffering(0);
f0100127:	83 ec 0c             	sub    $0xc,%esp
f010012a:	6a 00                	push   $0x0
f010012c:	e8 7b db 00 00       	call   f010dcac <enableBuffering>
f0100131:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f0100134:	83 ec 0c             	sub    $0xc,%esp
f0100137:	6a 00                	push   $0x0
f0100139:	e8 56 db 00 00       	call   f010dc94 <enableModifiedBuffer>
f010013e:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f0100141:	83 ec 0c             	sub    $0xc,%esp
f0100144:	68 e8 03 00 00       	push   $0x3e8
f0100149:	e8 76 db 00 00       	call   f010dcc4 <setModifiedBufferLength>
f010014e:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100151:	e8 ea 59 00 00       	call   f0105b40 <pic_init>
	sched_init() ;
f0100156:	e8 9d 46 00 00       	call   f01047f8 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010015b:	83 ec 0c             	sub    $0xc,%esp
f010015e:	68 20 30 13 f0       	push   $0xf0133020
f0100163:	e8 1a 0b 00 00       	call   f0100c82 <cprintf>
f0100168:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010016b:	83 ec 0c             	sub    $0xc,%esp
f010016e:	68 4c 30 13 f0       	push   $0xf013304c
f0100173:	e8 0a 0b 00 00       	call   f0100c82 <cprintf>
f0100178:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010017b:	e8 28 0b 00 00       	call   f0100ca8 <run_command_prompt>
	}
f0100180:	eb d9                	jmp    f010015b <FOS_initialize+0xfc>

f0100182 <print_welcome_message>:
}


void print_welcome_message()
{
f0100182:	55                   	push   %ebp
f0100183:	89 e5                	mov    %esp,%ebp
f0100185:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100188:	83 ec 0c             	sub    $0xc,%esp
f010018b:	68 71 30 13 f0       	push   $0xf0133071
f0100190:	e8 ed 0a 00 00       	call   f0100c82 <cprintf>
f0100195:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100198:	83 ec 0c             	sub    $0xc,%esp
f010019b:	68 78 30 13 f0       	push   $0xf0133078
f01001a0:	e8 dd 0a 00 00       	call   f0100c82 <cprintf>
f01001a5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001a8:	83 ec 0c             	sub    $0xc,%esp
f01001ab:	68 c0 30 13 f0       	push   $0xf01330c0
f01001b0:	e8 cd 0a 00 00       	call   f0100c82 <cprintf>
f01001b5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001b8:	83 ec 0c             	sub    $0xc,%esp
f01001bb:	68 08 31 13 f0       	push   $0xf0133108
f01001c0:	e8 bd 0a 00 00       	call   f0100c82 <cprintf>
f01001c5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001c8:	83 ec 0c             	sub    $0xc,%esp
f01001cb:	68 c0 30 13 f0       	push   $0xf01330c0
f01001d0:	e8 ad 0a 00 00       	call   f0100c82 <cprintf>
f01001d5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001d8:	83 ec 0c             	sub    $0xc,%esp
f01001db:	68 78 30 13 f0       	push   $0xf0133078
f01001e0:	e8 9d 0a 00 00       	call   f0100c82 <cprintf>
f01001e5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001e8:	83 ec 0c             	sub    $0xc,%esp
f01001eb:	68 4d 31 13 f0       	push   $0xf013314d
f01001f0:	e8 8d 0a 00 00       	call   f0100c82 <cprintf>
f01001f5:	83 c4 10             	add    $0x10,%esp
}
f01001f8:	90                   	nop
f01001f9:	c9                   	leave  
f01001fa:	c3                   	ret    

f01001fb <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001fb:	55                   	push   %ebp
f01001fc:	89 e5                	mov    %esp,%ebp
f01001fe:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100201:	8b 45 10             	mov    0x10(%ebp),%eax
f0100204:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100209:	8d 45 10             	lea    0x10(%ebp),%eax
f010020c:	83 c0 04             	add    $0x4,%eax
f010020f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100212:	83 ec 04             	sub    $0x4,%esp
f0100215:	ff 75 0c             	pushl  0xc(%ebp)
f0100218:	ff 75 08             	pushl  0x8(%ebp)
f010021b:	68 52 31 13 f0       	push   $0xf0133152
f0100220:	e8 5d 0a 00 00       	call   f0100c82 <cprintf>
f0100225:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100228:	8b 45 10             	mov    0x10(%ebp),%eax
f010022b:	83 ec 08             	sub    $0x8,%esp
f010022e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100231:	50                   	push   %eax
f0100232:	e8 22 0a 00 00       	call   f0100c59 <vcprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010023a:	83 ec 0c             	sub    $0xc,%esp
f010023d:	68 6b 31 13 f0       	push   $0xf013316b
f0100242:	e8 3b 0a 00 00       	call   f0100c82 <cprintf>
f0100247:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010024a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010024f:	85 c0                	test   %eax,%eax
f0100251:	74 12                	je     f0100265 <_panic+0x6a>
f0100253:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100258:	8b 40 54             	mov    0x54(%eax),%eax
f010025b:	83 f8 02             	cmp    $0x2,%eax
f010025e:	75 05                	jne    f0100265 <_panic+0x6a>
	{
		//2015
		env_exit();
f0100260:	e8 14 98 00 00       	call   f0109a79 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100265:	e8 db 43 00 00       	call   f0104645 <fos_scheduler>

f010026a <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f010026a:	55                   	push   %ebp
f010026b:	89 e5                	mov    %esp,%ebp
f010026d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100270:	8b 45 10             	mov    0x10(%ebp),%eax
f0100273:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100278:	8d 45 10             	lea    0x10(%ebp),%eax
f010027b:	83 c0 04             	add    $0x4,%eax
f010027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100281:	83 ec 04             	sub    $0x4,%esp
f0100284:	ff 75 0c             	pushl  0xc(%ebp)
f0100287:	ff 75 08             	pushl  0x8(%ebp)
f010028a:	68 52 31 13 f0       	push   $0xf0133152
f010028f:	e8 ee 09 00 00       	call   f0100c82 <cprintf>
f0100294:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100297:	8b 45 10             	mov    0x10(%ebp),%eax
f010029a:	83 ec 08             	sub    $0x8,%esp
f010029d:	ff 75 f4             	pushl  -0xc(%ebp)
f01002a0:	50                   	push   %eax
f01002a1:	e8 b3 09 00 00       	call   f0100c59 <vcprintf>
f01002a6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a9:	83 ec 0c             	sub    $0xc,%esp
f01002ac:	68 6b 31 13 f0       	push   $0xf013316b
f01002b1:	e8 cc 09 00 00       	call   f0100c82 <cprintf>
f01002b6:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f01002b9:	e8 46 51 00 00       	call   f0105404 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f01002be:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002c3:	85 c0                	test   %eax,%eax
f01002c5:	74 14                	je     f01002db <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f01002c7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002cf:	83 ec 0c             	sub    $0xc,%esp
f01002d2:	50                   	push   %eax
f01002d3:	e8 f3 4e 00 00       	call   f01051cb <sched_exit_env>
f01002d8:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f01002db:	e8 65 43 00 00       	call   f0104645 <fos_scheduler>

f01002e0 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f01002e0:	55                   	push   %ebp
f01002e1:	89 e5                	mov    %esp,%ebp
f01002e3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01002e9:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f01002ee:	8d 45 10             	lea    0x10(%ebp),%eax
f01002f1:	83 c0 04             	add    $0x4,%eax
f01002f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002f7:	83 ec 04             	sub    $0x4,%esp
f01002fa:	ff 75 0c             	pushl  0xc(%ebp)
f01002fd:	ff 75 08             	pushl  0x8(%ebp)
f0100300:	68 52 31 13 f0       	push   $0xf0133152
f0100305:	e8 78 09 00 00       	call   f0100c82 <cprintf>
f010030a:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010030d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100310:	83 ec 08             	sub    $0x8,%esp
f0100313:	ff 75 f4             	pushl  -0xc(%ebp)
f0100316:	50                   	push   %eax
f0100317:	e8 3d 09 00 00       	call   f0100c59 <vcprintf>
f010031c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010031f:	83 ec 0c             	sub    $0xc,%esp
f0100322:	68 6b 31 13 f0       	push   $0xf013316b
f0100327:	e8 56 09 00 00       	call   f0100c82 <cprintf>
f010032c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010032f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100334:	85 c0                	test   %eax,%eax
f0100336:	74 28                	je     f0100360 <_panic_into_prompt+0x80>
f0100338:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010033d:	8b 40 54             	mov    0x54(%eax),%eax
f0100340:	83 f8 02             	cmp    $0x2,%eax
f0100343:	75 1b                	jne    f0100360 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100345:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010034a:	83 ec 0c             	sub    $0xc,%esp
f010034d:	50                   	push   %eax
f010034e:	e8 30 47 00 00       	call   f0104a83 <sched_insert_exit>
f0100353:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100356:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f010035d:	00 00 00 
	}

	lcr3(phys_page_directory);
f0100360:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0100365:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010036b:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f010036e:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0100375:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100378:	83 ec 0c             	sub    $0xc,%esp
f010037b:	6a 00                	push   $0x0
f010037d:	e8 26 09 00 00       	call   f0100ca8 <run_command_prompt>
f0100382:	83 c4 10             	add    $0x10,%esp
f0100385:	eb f1                	jmp    f0100378 <_panic_into_prompt+0x98>

f0100387 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100387:	55                   	push   %ebp
f0100388:	89 e5                	mov    %esp,%ebp
f010038a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f010038d:	8d 45 10             	lea    0x10(%ebp),%eax
f0100390:	83 c0 04             	add    $0x4,%eax
f0100393:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100396:	83 ec 04             	sub    $0x4,%esp
f0100399:	ff 75 0c             	pushl  0xc(%ebp)
f010039c:	ff 75 08             	pushl  0x8(%ebp)
f010039f:	68 6d 31 13 f0       	push   $0xf013316d
f01003a4:	e8 d9 08 00 00       	call   f0100c82 <cprintf>
f01003a9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01003af:	83 ec 08             	sub    $0x8,%esp
f01003b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01003b5:	50                   	push   %eax
f01003b6:	e8 9e 08 00 00       	call   f0100c59 <vcprintf>
f01003bb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003be:	83 ec 0c             	sub    $0xc,%esp
f01003c1:	68 6b 31 13 f0       	push   $0xf013316b
f01003c6:	e8 b7 08 00 00       	call   f0100c82 <cprintf>
f01003cb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01003ce:	90                   	nop
f01003cf:	c9                   	leave  
f01003d0:	c3                   	ret    

f01003d1 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f01003d1:	55                   	push   %ebp
f01003d2:	89 e5                	mov    %esp,%ebp
f01003d4:	83 ec 10             	sub    $0x10,%esp
f01003d7:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01003e1:	89 c2                	mov    %eax,%edx
f01003e3:	ec                   	in     (%dx),%al
f01003e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01003e7:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f01003ea:	0f b6 c0             	movzbl %al,%eax
f01003ed:	83 e0 01             	and    $0x1,%eax
f01003f0:	85 c0                	test   %eax,%eax
f01003f2:	75 07                	jne    f01003fb <serial_proc_data+0x2a>
		return -1;
f01003f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003f9:	eb 16                	jmp    f0100411 <serial_proc_data+0x40>
f01003fb:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100402:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100405:	89 c2                	mov    %eax,%edx
f0100407:	ec                   	in     (%dx),%al
f0100408:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010040b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010040e:	0f b6 c0             	movzbl %al,%eax
}
f0100411:	c9                   	leave  
f0100412:	c3                   	ret    

f0100413 <serial_intr>:

void
serial_intr(void)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100419:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f010041e:	85 c0                	test   %eax,%eax
f0100420:	74 10                	je     f0100432 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100422:	83 ec 0c             	sub    $0xc,%esp
f0100425:	68 d1 03 10 f0       	push   $0xf01003d1
f010042a:	e8 e4 05 00 00       	call   f0100a13 <cons_intr>
f010042f:	83 c4 10             	add    $0x10,%esp
}
f0100432:	90                   	nop
f0100433:	c9                   	leave  
f0100434:	c3                   	ret    

f0100435 <serial_init>:

void
serial_init(void)
{
f0100435:	55                   	push   %ebp
f0100436:	89 e5                	mov    %esp,%ebp
f0100438:	83 ec 40             	sub    $0x40,%esp
f010043b:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100442:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100446:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100449:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010044c:	ee                   	out    %al,(%dx)
f010044d:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f0100454:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100458:	8a 45 cf             	mov    -0x31(%ebp),%al
f010045b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010045e:	ee                   	out    %al,(%dx)
f010045f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100466:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010046a:	8a 45 d0             	mov    -0x30(%ebp),%al
f010046d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100470:	ee                   	out    %al,(%dx)
f0100471:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100478:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f010047c:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010047f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100482:	ee                   	out    %al,(%dx)
f0100483:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010048a:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010048e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100491:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100494:	ee                   	out    %al,(%dx)
f0100495:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f010049c:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004a0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004a6:	ee                   	out    %al,(%dx)
f01004a7:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004ae:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004b2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004b8:	ee                   	out    %al,(%dx)
f01004b9:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004c3:	89 c2                	mov    %eax,%edx
f01004c5:	ec                   	in     (%dx),%al
f01004c6:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f01004c9:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f01004cc:	3c ff                	cmp    $0xff,%al
f01004ce:	0f 95 c0             	setne  %al
f01004d1:	0f b6 c0             	movzbl %al,%eax
f01004d4:	a3 e0 6f 65 f0       	mov    %eax,0xf0656fe0
f01004d9:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01004e3:	89 c2                	mov    %eax,%edx
f01004e5:	ec                   	in     (%dx),%al
f01004e6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01004e9:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f01004f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01004f3:	89 c2                	mov    %eax,%edx
f01004f5:	ec                   	in     (%dx),%al
f01004f6:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004f9:	90                   	nop
f01004fa:	c9                   	leave  
f01004fb:	c3                   	ret    

f01004fc <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004fc:	55                   	push   %ebp
f01004fd:	89 e5                	mov    %esp,%ebp
f01004ff:	83 ec 20             	sub    $0x20,%esp
f0100502:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100509:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010050c:	89 c2                	mov    %eax,%edx
f010050e:	ec                   	in     (%dx),%al
f010050f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100512:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100519:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010051c:	89 c2                	mov    %eax,%edx
f010051e:	ec                   	in     (%dx),%al
f010051f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100522:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010052c:	89 c2                	mov    %eax,%edx
f010052e:	ec                   	in     (%dx),%al
f010052f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100532:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100539:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010053c:	89 c2                	mov    %eax,%edx
f010053e:	ec                   	in     (%dx),%al
f010053f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100542:	90                   	nop
f0100543:	c9                   	leave  
f0100544:	c3                   	ret    

f0100545 <lpt_putc>:

static void
lpt_putc(int c)
{
f0100545:	55                   	push   %ebp
f0100546:	89 e5                	mov    %esp,%ebp
f0100548:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f010054b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100552:	eb 08                	jmp    f010055c <lpt_putc+0x17>
		delay();
f0100554:	e8 a3 ff ff ff       	call   f01004fc <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100559:	ff 45 fc             	incl   -0x4(%ebp)
f010055c:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100566:	89 c2                	mov    %eax,%edx
f0100568:	ec                   	in     (%dx),%al
f0100569:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f010056c:	8a 45 eb             	mov    -0x15(%ebp),%al
f010056f:	84 c0                	test   %al,%al
f0100571:	78 09                	js     f010057c <lpt_putc+0x37>
f0100573:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010057a:	7e d8                	jle    f0100554 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f010057c:	8b 45 08             	mov    0x8(%ebp),%eax
f010057f:	0f b6 c0             	movzbl %al,%eax
f0100582:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100589:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010058c:	8a 45 e8             	mov    -0x18(%ebp),%al
f010058f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100592:	ee                   	out    %al,(%dx)
f0100593:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010059a:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010059e:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005a4:	ee                   	out    %al,(%dx)
f01005a5:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005ac:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005b0:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005b7:	90                   	nop
f01005b8:	c9                   	leave  
f01005b9:	c3                   	ret    

f01005ba <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005ba:	55                   	push   %ebp
f01005bb:	89 e5                	mov    %esp,%ebp
f01005bd:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005c0:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005ca:	66 8b 00             	mov    (%eax),%ax
f01005cd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f01005d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005d4:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f01005d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005dc:	66 8b 00             	mov    (%eax),%ax
f01005df:	66 3d 5a a5          	cmp    $0xa55a,%ax
f01005e3:	74 13                	je     f01005f8 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f01005e5:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f01005ec:	c7 05 e4 6f 65 f0 b4 	movl   $0x3b4,0xf0656fe4
f01005f3:	03 00 00 
f01005f6:	eb 14                	jmp    f010060c <cga_init+0x52>
	} else {
		*cp = was;
f01005f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005fb:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005ff:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100602:	c7 05 e4 6f 65 f0 d4 	movl   $0x3d4,0xf0656fe4
f0100609:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010060c:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100611:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100614:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100618:	8a 45 e0             	mov    -0x20(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010061f:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100624:	40                   	inc    %eax
f0100625:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010062b:	89 c2                	mov    %eax,%edx
f010062d:	ec                   	in     (%dx),%al
f010062e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100631:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100634:	0f b6 c0             	movzbl %al,%eax
f0100637:	c1 e0 08             	shl    $0x8,%eax
f010063a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010063d:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100642:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100645:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100649:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010064c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010064f:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100650:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100655:	40                   	inc    %eax
f0100656:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010065c:	89 c2                	mov    %eax,%edx
f010065e:	ec                   	in     (%dx),%al
f010065f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100662:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100665:	0f b6 c0             	movzbl %al,%eax
f0100668:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010066b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066e:	a3 e8 6f 65 f0       	mov    %eax,0xf0656fe8
	crt_pos = pos;
f0100673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100676:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
}
f010067c:	90                   	nop
f010067d:	c9                   	leave  
f010067e:	c3                   	ret    

f010067f <cga_putc>:



void
cga_putc(int c)
{
f010067f:	55                   	push   %ebp
f0100680:	89 e5                	mov    %esp,%ebp
f0100682:	53                   	push   %ebx
f0100683:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100686:	8b 45 08             	mov    0x8(%ebp),%eax
f0100689:	b0 00                	mov    $0x0,%al
f010068b:	85 c0                	test   %eax,%eax
f010068d:	75 07                	jne    f0100696 <cga_putc+0x17>
		c |= 0x0700;
f010068f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100696:	8b 45 08             	mov    0x8(%ebp),%eax
f0100699:	0f b6 c0             	movzbl %al,%eax
f010069c:	83 f8 09             	cmp    $0x9,%eax
f010069f:	0f 84 94 00 00 00    	je     f0100739 <cga_putc+0xba>
f01006a5:	83 f8 09             	cmp    $0x9,%eax
f01006a8:	7f 0a                	jg     f01006b4 <cga_putc+0x35>
f01006aa:	83 f8 08             	cmp    $0x8,%eax
f01006ad:	74 14                	je     f01006c3 <cga_putc+0x44>
f01006af:	e9 c8 00 00 00       	jmp    f010077c <cga_putc+0xfd>
f01006b4:	83 f8 0a             	cmp    $0xa,%eax
f01006b7:	74 49                	je     f0100702 <cga_putc+0x83>
f01006b9:	83 f8 0d             	cmp    $0xd,%eax
f01006bc:	74 53                	je     f0100711 <cga_putc+0x92>
f01006be:	e9 b9 00 00 00       	jmp    f010077c <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f01006c3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006c9:	66 85 c0             	test   %ax,%ax
f01006cc:	0f 84 d0 00 00 00    	je     f01007a2 <cga_putc+0x123>
			crt_pos--;
f01006d2:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006d8:	48                   	dec    %eax
f01006d9:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01006df:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01006e5:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006eb:	0f b7 c0             	movzwl %ax,%eax
f01006ee:	01 c0                	add    %eax,%eax
f01006f0:	01 c2                	add    %eax,%edx
f01006f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01006f5:	b0 00                	mov    $0x0,%al
f01006f7:	83 c8 20             	or     $0x20,%eax
f01006fa:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006fd:	e9 a0 00 00 00       	jmp    f01007a2 <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f0100702:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100708:	83 c0 50             	add    $0x50,%eax
f010070b:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100711:	66 8b 0d ec 6f 65 f0 	mov    0xf0656fec,%cx
f0100718:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f010071e:	bb 50 00 00 00       	mov    $0x50,%ebx
f0100723:	ba 00 00 00 00       	mov    $0x0,%edx
f0100728:	66 f7 f3             	div    %bx
f010072b:	89 d0                	mov    %edx,%eax
f010072d:	29 c1                	sub    %eax,%ecx
f010072f:	89 c8                	mov    %ecx,%eax
f0100731:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		break;
f0100737:	eb 6a                	jmp    f01007a3 <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f0100739:	83 ec 0c             	sub    $0xc,%esp
f010073c:	6a 20                	push   $0x20
f010073e:	e8 69 04 00 00       	call   f0100bac <cons_putc>
f0100743:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100746:	83 ec 0c             	sub    $0xc,%esp
f0100749:	6a 20                	push   $0x20
f010074b:	e8 5c 04 00 00       	call   f0100bac <cons_putc>
f0100750:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100753:	83 ec 0c             	sub    $0xc,%esp
f0100756:	6a 20                	push   $0x20
f0100758:	e8 4f 04 00 00       	call   f0100bac <cons_putc>
f010075d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100760:	83 ec 0c             	sub    $0xc,%esp
f0100763:	6a 20                	push   $0x20
f0100765:	e8 42 04 00 00       	call   f0100bac <cons_putc>
f010076a:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010076d:	83 ec 0c             	sub    $0xc,%esp
f0100770:	6a 20                	push   $0x20
f0100772:	e8 35 04 00 00       	call   f0100bac <cons_putc>
f0100777:	83 c4 10             	add    $0x10,%esp
		break;
f010077a:	eb 27                	jmp    f01007a3 <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f010077c:	8b 0d e8 6f 65 f0    	mov    0xf0656fe8,%ecx
f0100782:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100788:	8d 50 01             	lea    0x1(%eax),%edx
f010078b:	66 89 15 ec 6f 65 f0 	mov    %dx,0xf0656fec
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	01 c0                	add    %eax,%eax
f0100797:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010079a:	8b 45 08             	mov    0x8(%ebp),%eax
f010079d:	66 89 02             	mov    %ax,(%edx)
		break;
f01007a0:	eb 01                	jmp    f01007a3 <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007a2:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007a3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007a9:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007ad:	76 58                	jbe    f0100807 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007af:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007b4:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007ba:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007bf:	83 ec 04             	sub    $0x4,%esp
f01007c2:	68 00 0f 00 00       	push   $0xf00
f01007c7:	52                   	push   %edx
f01007c8:	50                   	push   %eax
f01007c9:	e8 d0 07 03 00       	call   f0130f9e <memcpy>
f01007ce:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007d1:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007d8:	eb 15                	jmp    f01007ef <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f01007da:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01007e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007e3:	01 c0                	add    %eax,%eax
f01007e5:	01 d0                	add    %edx,%eax
f01007e7:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ec:	ff 45 f4             	incl   -0xc(%ebp)
f01007ef:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007f6:	7e e2                	jle    f01007da <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007f8:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007fe:	83 e8 50             	sub    $0x50,%eax
f0100801:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100807:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f010080c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010080f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100813:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100816:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100819:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010081a:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100820:	66 c1 e8 08          	shr    $0x8,%ax
f0100824:	0f b6 c0             	movzbl %al,%eax
f0100827:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010082d:	42                   	inc    %edx
f010082e:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100831:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100834:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100837:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010083a:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010083b:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100840:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100843:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100847:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010084a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010084d:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f010084e:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100854:	0f b6 c0             	movzbl %al,%eax
f0100857:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010085d:	42                   	inc    %edx
f010085e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100861:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100864:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100867:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010086a:	ee                   	out    %al,(%dx)
}
f010086b:	90                   	nop
f010086c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010086f:	c9                   	leave  
f0100870:	c3                   	ret    

f0100871 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100871:	55                   	push   %ebp
f0100872:	89 e5                	mov    %esp,%ebp
f0100874:	83 ec 28             	sub    $0x28,%esp
f0100877:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010087e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100881:	89 c2                	mov    %eax,%edx
f0100883:	ec                   	in     (%dx),%al
f0100884:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100887:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	83 e0 01             	and    $0x1,%eax
f0100890:	85 c0                	test   %eax,%eax
f0100892:	75 0a                	jne    f010089e <kbd_proc_data+0x2d>
		return -1;
f0100894:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100899:	e9 54 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
f010089e:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01008a8:	89 c2                	mov    %eax,%edx
f01008aa:	ec                   	in     (%dx),%al
f01008ab:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f01008ae:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f01008b1:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008b4:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008b8:	75 17                	jne    f01008d1 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008ba:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008bf:	83 c8 40             	or     $0x40,%eax
f01008c2:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f01008c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01008cc:	e9 21 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f01008d1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008d4:	84 c0                	test   %al,%al
f01008d6:	79 44                	jns    f010091c <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008d8:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008dd:	83 e0 40             	and    $0x40,%eax
f01008e0:	85 c0                	test   %eax,%eax
f01008e2:	75 08                	jne    f01008ec <kbd_proc_data+0x7b>
f01008e4:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008e7:	83 e0 7f             	and    $0x7f,%eax
f01008ea:	eb 03                	jmp    f01008ef <kbd_proc_data+0x7e>
f01008ec:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ef:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01008f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008f6:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008fc:	83 c8 40             	or     $0x40,%eax
f01008ff:	0f b6 c0             	movzbl %al,%eax
f0100902:	f7 d0                	not    %eax
f0100904:	89 c2                	mov    %eax,%edx
f0100906:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010090b:	21 d0                	and    %edx,%eax
f010090d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f0100912:	b8 00 00 00 00       	mov    $0x0,%eax
f0100917:	e9 d6 00 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f010091c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100921:	83 e0 40             	and    $0x40,%eax
f0100924:	85 c0                	test   %eax,%eax
f0100926:	74 11                	je     f0100939 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100928:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f010092c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100931:	83 e0 bf             	and    $0xffffffbf,%eax
f0100934:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	}

	shift |= shiftcode[data];
f0100939:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010093d:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f0100943:	0f b6 d0             	movzbl %al,%edx
f0100946:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010094b:	09 d0                	or     %edx,%eax
f010094d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	shift ^= togglecode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 11 19 f0    	mov    -0xfe6eee0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100964:	31 d0                	xor    %edx,%eax
f0100966:	a3 08 72 65 f0       	mov    %eax,0xf0657208

	c = charcode[shift & (CTL | SHIFT)][data];
f010096b:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100970:	83 e0 03             	and    $0x3,%eax
f0100973:	8b 14 85 20 15 19 f0 	mov    -0xfe6eae0(,%eax,4),%edx
f010097a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010097e:	01 d0                	add    %edx,%eax
f0100980:	8a 00                	mov    (%eax),%al
f0100982:	0f b6 c0             	movzbl %al,%eax
f0100985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100988:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010098d:	83 e0 08             	and    $0x8,%eax
f0100990:	85 c0                	test   %eax,%eax
f0100992:	74 22                	je     f01009b6 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100994:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100998:	7e 0c                	jle    f01009a6 <kbd_proc_data+0x135>
f010099a:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f010099e:	7f 06                	jg     f01009a6 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f01009a0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f01009a4:	eb 10                	jmp    f01009b6 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f01009a6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f01009aa:	7e 0a                	jle    f01009b6 <kbd_proc_data+0x145>
f01009ac:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f01009b0:	7f 04                	jg     f01009b6 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f01009b2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f01009b6:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01009bb:	f7 d0                	not    %eax
f01009bd:	83 e0 06             	and    $0x6,%eax
f01009c0:	85 c0                	test   %eax,%eax
f01009c2:	75 2b                	jne    f01009ef <kbd_proc_data+0x17e>
f01009c4:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009cb:	75 22                	jne    f01009ef <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f01009cd:	83 ec 0c             	sub    $0xc,%esp
f01009d0:	68 88 31 13 f0       	push   $0xf0133188
f01009d5:	e8 a8 02 00 00       	call   f0100c82 <cprintf>
f01009da:	83 c4 10             	add    $0x10,%esp
f01009dd:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f01009e4:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01009e8:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01009eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01009ee:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f01009ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01009f2:	c9                   	leave  
f01009f3:	c3                   	ret    

f01009f4 <kbd_intr>:

void
kbd_intr(void)
{
f01009f4:	55                   	push   %ebp
f01009f5:	89 e5                	mov    %esp,%ebp
f01009f7:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009fa:	83 ec 0c             	sub    $0xc,%esp
f01009fd:	68 71 08 10 f0       	push   $0xf0100871
f0100a02:	e8 0c 00 00 00       	call   f0100a13 <cons_intr>
f0100a07:	83 c4 10             	add    $0x10,%esp
}
f0100a0a:	90                   	nop
f0100a0b:	c9                   	leave  
f0100a0c:	c3                   	ret    

f0100a0d <kbd_init>:

void
kbd_init(void)
{
f0100a0d:	55                   	push   %ebp
f0100a0e:	89 e5                	mov    %esp,%ebp
}
f0100a10:	90                   	nop
f0100a11:	5d                   	pop    %ebp
f0100a12:	c3                   	ret    

f0100a13 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a13:	55                   	push   %ebp
f0100a14:	89 e5                	mov    %esp,%ebp
f0100a16:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100a19:	eb 35                	jmp    f0100a50 <cons_intr+0x3d>
		if (c == 0)
f0100a1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a1f:	75 02                	jne    f0100a23 <cons_intr+0x10>
			continue;
f0100a21:	eb 2d                	jmp    f0100a50 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100a23:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a28:	8d 50 01             	lea    0x1(%eax),%edx
f0100a2b:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100a34:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100a3a:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a44:	75 0a                	jne    f0100a50 <cons_intr+0x3d>
			cons.wpos = 0;
f0100a46:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100a4d:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0100a53:	ff d0                	call   *%eax
f0100a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a58:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a5c:	75 bd                	jne    f0100a1b <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a5e:	90                   	nop
f0100a5f:	c9                   	leave  
f0100a60:	c3                   	ret    

f0100a61 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a61:	55                   	push   %ebp
f0100a62:	89 e5                	mov    %esp,%ebp
f0100a64:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a67:	e8 a7 f9 ff ff       	call   f0100413 <serial_intr>
	kbd_intr();
f0100a6c:	e8 83 ff ff ff       	call   f01009f4 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a71:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100a77:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a7c:	39 c2                	cmp    %eax,%edx
f0100a7e:	74 35                	je     f0100ab5 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a80:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a85:	8d 50 01             	lea    0x1(%eax),%edx
f0100a88:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100a8e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100a94:	0f b6 c0             	movzbl %al,%eax
f0100a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a9a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a9f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100aa4:	75 0a                	jne    f0100ab0 <cons_getc+0x4f>
			cons.rpos = 0;
f0100aa6:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100aad:	00 00 00 
		return c;
f0100ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ab3:	eb 05                	jmp    f0100aba <cons_getc+0x59>
	}
	return 0;
f0100ab5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100aba:	c9                   	leave  
f0100abb:	c3                   	ret    

f0100abc <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100abc:	55                   	push   %ebp
f0100abd:	89 e5                	mov    %esp,%ebp
f0100abf:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100ac2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100ac9:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100ace:	85 c0                	test   %eax,%eax
f0100ad0:	74 41                	je     f0100b13 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100ad2:	e8 fa f8 ff ff       	call   f01003d1 <serial_proc_data>
f0100ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ada:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ade:	74 33                	je     f0100b13 <cons_getc2+0x57>
				if (c1 == 0)
f0100ae0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ae4:	74 2d                	je     f0100b13 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100ae6:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100aeb:	8d 50 01             	lea    0x1(%eax),%edx
f0100aee:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100af7:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100afd:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b07:	75 0a                	jne    f0100b13 <cons_getc2+0x57>
						cons.wpos = 0;
f0100b09:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b10:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100b1a:	e8 52 fd ff ff       	call   f0100871 <kbd_proc_data>
f0100b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100b22:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100b26:	74 33                	je     f0100b5b <cons_getc2+0x9f>
			if (c2 == 0)
f0100b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b2c:	74 2d                	je     f0100b5b <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100b2e:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b33:	8d 50 01             	lea    0x1(%eax),%edx
f0100b36:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100b3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100b3f:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100b45:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b4f:	75 0a                	jne    f0100b5b <cons_getc2+0x9f>
					cons.wpos = 0;
f0100b51:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b58:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b5f:	7e 44                	jle    f0100ba5 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b61:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100b67:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b6c:	39 c2                	cmp    %eax,%edx
f0100b6e:	74 35                	je     f0100ba5 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b70:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b75:	8d 50 01             	lea    0x1(%eax),%edx
f0100b78:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100b7e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100b84:	0f b6 c0             	movzbl %al,%eax
f0100b87:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b8a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b94:	75 0a                	jne    f0100ba0 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b96:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100b9d:	00 00 00 
			return c;
f0100ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100ba3:	eb 05                	jmp    f0100baa <cons_getc2+0xee>
		}
	}
	return 0;
f0100ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100baa:	c9                   	leave  
f0100bab:	c3                   	ret    

f0100bac <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100bac:	55                   	push   %ebp
f0100bad:	89 e5                	mov    %esp,%ebp
f0100baf:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100bb2:	ff 75 08             	pushl  0x8(%ebp)
f0100bb5:	e8 8b f9 ff ff       	call   f0100545 <lpt_putc>
f0100bba:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100bbd:	83 ec 0c             	sub    $0xc,%esp
f0100bc0:	ff 75 08             	pushl  0x8(%ebp)
f0100bc3:	e8 b7 fa ff ff       	call   f010067f <cga_putc>
f0100bc8:	83 c4 10             	add    $0x10,%esp
}
f0100bcb:	90                   	nop
f0100bcc:	c9                   	leave  
f0100bcd:	c3                   	ret    

f0100bce <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100bce:	55                   	push   %ebp
f0100bcf:	89 e5                	mov    %esp,%ebp
f0100bd1:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100bd4:	e8 e1 f9 ff ff       	call   f01005ba <cga_init>
	kbd_init();
f0100bd9:	e8 2f fe ff ff       	call   f0100a0d <kbd_init>
	serial_init();
f0100bde:	e8 52 f8 ff ff       	call   f0100435 <serial_init>

	if (!serial_exists)
f0100be3:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100be8:	85 c0                	test   %eax,%eax
f0100bea:	75 10                	jne    f0100bfc <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100bec:	83 ec 0c             	sub    $0xc,%esp
f0100bef:	68 94 31 13 f0       	push   $0xf0133194
f0100bf4:	e8 89 00 00 00       	call   f0100c82 <cprintf>
f0100bf9:	83 c4 10             	add    $0x10,%esp
}
f0100bfc:	90                   	nop
f0100bfd:	c9                   	leave  
f0100bfe:	c3                   	ret    

f0100bff <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100bff:	55                   	push   %ebp
f0100c00:	89 e5                	mov    %esp,%ebp
f0100c02:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c05:	83 ec 0c             	sub    $0xc,%esp
f0100c08:	ff 75 08             	pushl  0x8(%ebp)
f0100c0b:	e8 9c ff ff ff       	call   f0100bac <cons_putc>
f0100c10:	83 c4 10             	add    $0x10,%esp
}
f0100c13:	90                   	nop
f0100c14:	c9                   	leave  
f0100c15:	c3                   	ret    

f0100c16 <getchar>:

int
getchar(void)
{
f0100c16:	55                   	push   %ebp
f0100c17:	89 e5                	mov    %esp,%ebp
f0100c19:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100c1c:	e8 40 fe ff ff       	call   f0100a61 <cons_getc>
f0100c21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c28:	74 f2                	je     f0100c1c <getchar+0x6>
		/* do nothing */;
	return c;
f0100c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2d:	c9                   	leave  
f0100c2e:	c3                   	ret    

f0100c2f <iscons>:

int
iscons(int fdnum)
{
f0100c2f:	55                   	push   %ebp
f0100c30:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100c32:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100c37:	5d                   	pop    %ebp
f0100c38:	c3                   	ret    

f0100c39 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100c39:	55                   	push   %ebp
f0100c3a:	89 e5                	mov    %esp,%ebp
f0100c3c:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100c3f:	83 ec 0c             	sub    $0xc,%esp
f0100c42:	ff 75 08             	pushl  0x8(%ebp)
f0100c45:	e8 b5 ff ff ff       	call   f0100bff <cputchar>
f0100c4a:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100c50:	83 c0 04             	add    $0x4,%eax
f0100c53:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c56:	90                   	nop
f0100c57:	c9                   	leave  
f0100c58:	c3                   	ret    

f0100c59 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c59:	55                   	push   %ebp
f0100c5a:	89 e5                	mov    %esp,%ebp
f0100c5c:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c66:	ff 75 0c             	pushl  0xc(%ebp)
f0100c69:	ff 75 08             	pushl  0x8(%ebp)
f0100c6c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c6f:	50                   	push   %eax
f0100c70:	68 39 0c 10 f0       	push   $0xf0100c39
f0100c75:	e8 58 fa 02 00       	call   f01306d2 <vprintfmt>
f0100c7a:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c80:	c9                   	leave  
f0100c81:	c3                   	ret    

f0100c82 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c82:	55                   	push   %ebp
f0100c83:	89 e5                	mov    %esp,%ebp
f0100c85:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c88:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c91:	83 ec 08             	sub    $0x8,%esp
f0100c94:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c97:	50                   	push   %eax
f0100c98:	e8 bc ff ff ff       	call   f0100c59 <vcprintf>
f0100c9d:	83 c4 10             	add    $0x10,%esp
f0100ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100ca6:	c9                   	leave  
f0100ca7:	c3                   	ret    

f0100ca8 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100ca8:	55                   	push   %ebp
f0100ca9:	89 e5                	mov    %esp,%ebp
f0100cab:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100cb1:	83 ec 08             	sub    $0x8,%esp
f0100cb4:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cba:	50                   	push   %eax
f0100cbb:	68 b1 31 13 f0       	push   $0xf01331b1
f0100cc0:	e8 b5 fe 02 00       	call   f0130b7a <readline>
f0100cc5:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100cc8:	83 ec 0c             	sub    $0xc,%esp
f0100ccb:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cd1:	50                   	push   %eax
f0100cd2:	e8 0d 00 00 00       	call   f0100ce4 <execute_command>
f0100cd7:	83 c4 10             	add    $0x10,%esp
f0100cda:	85 c0                	test   %eax,%eax
f0100cdc:	78 02                	js     f0100ce0 <run_command_prompt+0x38>
				break;
	}
f0100cde:	eb d1                	jmp    f0100cb1 <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100ce0:	90                   	nop
	}
}
f0100ce1:	90                   	nop
f0100ce2:	c9                   	leave  
f0100ce3:	c3                   	ret    

f0100ce4 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100ce4:	55                   	push   %ebp
f0100ce5:	89 e5                	mov    %esp,%ebp
f0100ce7:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100ced:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100cf0:	50                   	push   %eax
f0100cf1:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100cf4:	50                   	push   %eax
f0100cf5:	68 b7 31 13 f0       	push   $0xf01331b7
f0100cfa:	ff 75 08             	pushl  0x8(%ebp)
f0100cfd:	e8 b2 06 03 00       	call   f01313b4 <strsplit>
f0100d02:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d08:	85 c0                	test   %eax,%eax
f0100d0a:	75 0a                	jne    f0100d16 <execute_command+0x32>
		return 0;
f0100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d11:	e9 37 01 00 00       	jmp    f0100e4d <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100d1d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100d2b:	e9 8c 00 00 00       	jmp    f0100dbc <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100d30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d33:	89 d0                	mov    %edx,%eax
f0100d35:	01 c0                	add    %eax,%eax
f0100d37:	01 d0                	add    %edx,%eax
f0100d39:	c1 e0 02             	shl    $0x2,%eax
f0100d3c:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d41:	8b 10                	mov    (%eax),%edx
f0100d43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d46:	83 ec 08             	sub    $0x8,%esp
f0100d49:	52                   	push   %edx
f0100d4a:	50                   	push   %eax
f0100d4b:	e8 3c 01 03 00       	call   f0130e8c <strcmp>
f0100d50:	83 c4 10             	add    $0x10,%esp
f0100d53:	85 c0                	test   %eax,%eax
f0100d55:	75 09                	jne    f0100d60 <execute_command+0x7c>
		{
			command_found = 1;
f0100d57:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d5e:	eb 6c                	jmp    f0100dcc <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d63:	83 ec 0c             	sub    $0xc,%esp
f0100d66:	50                   	push   %eax
f0100d67:	e8 14 00 03 00       	call   f0130d80 <strlen>
f0100d6c:	83 c4 10             	add    $0x10,%esp
f0100d6f:	89 c1                	mov    %eax,%ecx
f0100d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d74:	89 d0                	mov    %edx,%eax
f0100d76:	01 c0                	add    %eax,%eax
f0100d78:	01 d0                	add    %edx,%eax
f0100d7a:	c1 e0 02             	shl    $0x2,%eax
f0100d7d:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d82:	8b 10                	mov    (%eax),%edx
f0100d84:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d87:	83 ec 04             	sub    $0x4,%esp
f0100d8a:	51                   	push   %ecx
f0100d8b:	52                   	push   %edx
f0100d8c:	50                   	push   %eax
f0100d8d:	e8 32 01 03 00       	call   f0130ec4 <strncmp>
f0100d92:	83 c4 10             	add    $0x10,%esp
f0100d95:	85 c0                	test   %eax,%eax
f0100d97:	75 20                	jne    f0100db9 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d9c:	89 d0                	mov    %edx,%eax
f0100d9e:	01 c0                	add    %eax,%eax
f0100da0:	01 d0                	add    %edx,%eax
f0100da2:	c1 e0 02             	shl    $0x2,%eax
f0100da5:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100daa:	8b 10                	mov    (%eax),%edx
f0100dac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100daf:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100db6:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db9:	ff 45 f0             	incl   -0x10(%ebp)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100dc4:	39 c2                	cmp    %eax,%edx
f0100dc6:	0f 82 64 ff ff ff    	jb     f0100d30 <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100dcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd0:	74 2b                	je     f0100dfd <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100dd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dd5:	89 d0                	mov    %edx,%eax
f0100dd7:	01 c0                	add    %eax,%eax
f0100dd9:	01 d0                	add    %edx,%eax
f0100ddb:	c1 e0 02             	shl    $0x2,%eax
f0100dde:	05 48 15 19 f0       	add    $0xf0191548,%eax
f0100de3:	8b 00                	mov    (%eax),%eax
f0100de5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100de8:	83 ec 08             	sub    $0x8,%esp
f0100deb:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100dee:	51                   	push   %ecx
f0100def:	52                   	push   %edx
f0100df0:	ff d0                	call   *%eax
f0100df2:	83 c4 10             	add    $0x10,%esp
f0100df5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100df8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100dfb:	eb 50                	jmp    f0100e4d <execute_command+0x169>
	}
	else if (count == 0)
f0100dfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e01:	75 16                	jne    f0100e19 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e06:	83 ec 08             	sub    $0x8,%esp
f0100e09:	50                   	push   %eax
f0100e0a:	68 bc 31 13 f0       	push   $0xf01331bc
f0100e0f:	e8 6e fe ff ff       	call   f0100c82 <cprintf>
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	eb 2f                	jmp    f0100e48 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100e20:	eb 1e                	jmp    f0100e40 <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100e22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e25:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100e2c:	83 ec 08             	sub    $0x8,%esp
f0100e2f:	50                   	push   %eax
f0100e30:	68 d2 31 13 f0       	push   $0xf01331d2
f0100e35:	e8 48 fe ff ff       	call   f0100c82 <cprintf>
f0100e3a:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e3d:	ff 45 e8             	incl   -0x18(%ebp)
f0100e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e43:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100e46:	7c da                	jl     f0100e22 <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100e4d:	c9                   	leave  
f0100e4e:	c3                   	ret    

f0100e4f <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e4f:	55                   	push   %ebp
f0100e50:	89 e5                	mov    %esp,%ebp
f0100e52:	c7 05 5c 7b 65 f0 00 	movl   $0x0,0xf0657b5c
f0100e59:	00 00 00 
f0100e5c:	90                   	nop
f0100e5d:	5d                   	pop    %ebp
f0100e5e:	c3                   	ret    

f0100e5f <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e5f:	55                   	push   %ebp
f0100e60:	89 e5                	mov    %esp,%ebp
f0100e62:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100e69:	00 00 00 
f0100e6c:	90                   	nop
f0100e6d:	5d                   	pop    %ebp
f0100e6e:	c3                   	ret    

f0100e6f <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e6f:	55                   	push   %ebp
f0100e70:	89 e5                	mov    %esp,%ebp
f0100e72:	c7 05 5c 7b 65 f0 02 	movl   $0x2,0xf0657b5c
f0100e79:	00 00 00 
f0100e7c:	90                   	nop
f0100e7d:	5d                   	pop    %ebp
f0100e7e:	c3                   	ret    

f0100e7f <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e7f:	55                   	push   %ebp
f0100e80:	89 e5                	mov    %esp,%ebp
f0100e82:	c7 05 5c 7b 65 f0 03 	movl   $0x3,0xf0657b5c
f0100e89:	00 00 00 
f0100e8c:	90                   	nop
f0100e8d:	5d                   	pop    %ebp
f0100e8e:	c3                   	ret    

f0100e8f <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e8f:	55                   	push   %ebp
f0100e90:	89 e5                	mov    %esp,%ebp
f0100e92:	c7 05 5c 7b 65 f0 04 	movl   $0x4,0xf0657b5c
f0100e99:	00 00 00 
f0100e9c:	90                   	nop
f0100e9d:	5d                   	pop    %ebp
f0100e9e:	c3                   	ret    

f0100e9f <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e9f:	55                   	push   %ebp
f0100ea0:	89 e5                	mov    %esp,%ebp
f0100ea2:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ea7:	85 c0                	test   %eax,%eax
f0100ea9:	75 04                	jne    f0100eaf <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100eab:	b0 01                	mov    $0x1,%al
f0100ead:	eb 02                	jmp    f0100eb1 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100eaf:	b0 00                	mov    $0x0,%al
f0100eb1:	5d                   	pop    %ebp
f0100eb2:	c3                   	ret    

f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100eb3:	55                   	push   %ebp
f0100eb4:	89 e5                	mov    %esp,%ebp
f0100eb6:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ebb:	83 f8 01             	cmp    $0x1,%eax
f0100ebe:	75 04                	jne    f0100ec4 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100ec0:	b0 01                	mov    $0x1,%al
f0100ec2:	eb 02                	jmp    f0100ec6 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100ec4:	b0 00                	mov    $0x0,%al
f0100ec6:	5d                   	pop    %ebp
f0100ec7:	c3                   	ret    

f0100ec8 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100ec8:	55                   	push   %ebp
f0100ec9:	89 e5                	mov    %esp,%ebp
f0100ecb:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ed0:	83 f8 02             	cmp    $0x2,%eax
f0100ed3:	75 04                	jne    f0100ed9 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ed5:	b0 01                	mov    $0x1,%al
f0100ed7:	eb 02                	jmp    f0100edb <isKHeapPlacementStrategyBESTFIT+0x13>
f0100ed9:	b0 00                	mov    $0x0,%al
f0100edb:	5d                   	pop    %ebp
f0100edc:	c3                   	ret    

f0100edd <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100edd:	55                   	push   %ebp
f0100ede:	89 e5                	mov    %esp,%ebp
f0100ee0:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ee5:	83 f8 03             	cmp    $0x3,%eax
f0100ee8:	75 04                	jne    f0100eee <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100eea:	b0 01                	mov    $0x1,%al
f0100eec:	eb 02                	jmp    f0100ef0 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100eee:	b0 00                	mov    $0x0,%al
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100efa:	83 f8 04             	cmp    $0x4,%eax
f0100efd:	75 04                	jne    f0100f03 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100f11:	00 00 00 
f0100f14:	90                   	nop
f0100f15:	5d                   	pop    %ebp
f0100f16:	c3                   	ret    

f0100f17 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f17:	55                   	push   %ebp
f0100f18:	89 e5                	mov    %esp,%ebp
f0100f1a:	c7 05 30 7b 65 f0 02 	movl   $0x2,0xf0657b30
f0100f21:	00 00 00 
f0100f24:	90                   	nop
f0100f25:	5d                   	pop    %ebp
f0100f26:	c3                   	ret    

f0100f27 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f27:	55                   	push   %ebp
f0100f28:	89 e5                	mov    %esp,%ebp
f0100f2a:	c7 05 30 7b 65 f0 03 	movl   $0x3,0xf0657b30
f0100f31:	00 00 00 
f0100f34:	90                   	nop
f0100f35:	5d                   	pop    %ebp
f0100f36:	c3                   	ret    

f0100f37 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100f37:	55                   	push   %ebp
f0100f38:	89 e5                	mov    %esp,%ebp
f0100f3a:	c7 05 30 7b 65 f0 04 	movl   $0x4,0xf0657b30
f0100f41:	00 00 00 
f0100f44:	90                   	nop
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f4f:	83 f8 01             	cmp    $0x1,%eax
f0100f52:	75 04                	jne    f0100f58 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f64:	83 f8 02             	cmp    $0x2,%eax
f0100f67:	75 04                	jne    f0100f6d <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f79:	83 f8 03             	cmp    $0x3,%eax
f0100f7c:	75 04                	jne    f0100f82 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f7e:	b0 01                	mov    $0x1,%al
f0100f80:	eb 02                	jmp    f0100f84 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f82:	b0 00                	mov    $0x0,%al
f0100f84:	5d                   	pop    %ebp
f0100f85:	c3                   	ret    

f0100f86 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f86:	55                   	push   %ebp
f0100f87:	89 e5                	mov    %esp,%ebp
f0100f89:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f8e:	83 f8 04             	cmp    $0x4,%eax
f0100f91:	75 04                	jne    f0100f97 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f93:	b0 01                	mov    $0x1,%al
f0100f95:	eb 02                	jmp    f0100f99 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f97:	b0 00                	mov    $0x0,%al
f0100f99:	5d                   	pop    %ebp
f0100f9a:	c3                   	ret    

f0100f9b <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f9b:	55                   	push   %ebp
f0100f9c:	89 e5                	mov    %esp,%ebp
f0100f9e:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fa4:	c1 e8 0c             	shr    $0xc,%eax
f0100fa7:	89 c2                	mov    %eax,%edx
f0100fa9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0100fae:	39 c2                	cmp    %eax,%edx
f0100fb0:	72 14                	jb     f0100fc6 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100fb2:	83 ec 04             	sub    $0x4,%esp
f0100fb5:	68 d8 31 13 f0       	push   $0xf01331d8
f0100fba:	6a 55                	push   $0x55
f0100fbc:	68 00 32 13 f0       	push   $0xf0133200
f0100fc1:	e8 35 f2 ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0100fc6:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0100fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fcf:	c1 e8 0c             	shr    $0xc,%eax
f0100fd2:	89 c1                	mov    %eax,%ecx
f0100fd4:	89 c8                	mov    %ecx,%eax
f0100fd6:	01 c0                	add    %eax,%eax
f0100fd8:	01 c8                	add    %ecx,%eax
f0100fda:	c1 e0 03             	shl    $0x3,%eax
f0100fdd:	01 d0                	add    %edx,%eax
}
f0100fdf:	c9                   	leave  
f0100fe0:	c3                   	ret    

f0100fe1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100fe1:	55                   	push   %ebp
f0100fe2:	89 e5                	mov    %esp,%ebp
f0100fe4:	53                   	push   %ebx
f0100fe5:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fe8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fef:	eb 3b                	jmp    f010102c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100ff1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ff4:	89 d0                	mov    %edx,%eax
f0100ff6:	01 c0                	add    %eax,%eax
f0100ff8:	01 d0                	add    %edx,%eax
f0100ffa:	c1 e0 02             	shl    $0x2,%eax
f0100ffd:	05 44 15 19 f0       	add    $0xf0191544,%eax
f0101002:	8b 10                	mov    (%eax),%edx
f0101004:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101007:	89 c8                	mov    %ecx,%eax
f0101009:	01 c0                	add    %eax,%eax
f010100b:	01 c8                	add    %ecx,%eax
f010100d:	c1 e0 02             	shl    $0x2,%eax
f0101010:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0101015:	8b 00                	mov    (%eax),%eax
f0101017:	83 ec 04             	sub    $0x4,%esp
f010101a:	52                   	push   %edx
f010101b:	50                   	push   %eax
f010101c:	68 7a 40 13 f0       	push   $0xf013407a
f0101021:	e8 5c fc ff ff       	call   f0100c82 <cprintf>
f0101026:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101029:	ff 45 f4             	incl   -0xc(%ebp)
f010102c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010102f:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0101034:	39 c2                	cmp    %eax,%edx
f0101036:	72 b9                	jb     f0100ff1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101038:	83 ec 0c             	sub    $0xc,%esp
f010103b:	68 83 40 13 f0       	push   $0xf0134083
f0101040:	e8 3d fc ff ff       	call   f0100c82 <cprintf>
f0101045:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101048:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010104f:	eb 42                	jmp    f0101093 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101051:	8b 0d c0 1c 19 f0    	mov    0xf0191cc0,%ecx
f0101057:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010105a:	89 d0                	mov    %edx,%eax
f010105c:	01 c0                	add    %eax,%eax
f010105e:	01 d0                	add    %edx,%eax
f0101060:	c1 e0 02             	shl    $0x2,%eax
f0101063:	01 c8                	add    %ecx,%eax
f0101065:	8b 50 04             	mov    0x4(%eax),%edx
f0101068:	8b 1d c0 1c 19 f0    	mov    0xf0191cc0,%ebx
f010106e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101071:	89 c8                	mov    %ecx,%eax
f0101073:	01 c0                	add    %eax,%eax
f0101075:	01 c8                	add    %ecx,%eax
f0101077:	c1 e0 02             	shl    $0x2,%eax
f010107a:	01 d8                	add    %ebx,%eax
f010107c:	8b 00                	mov    (%eax),%eax
f010107e:	83 ec 04             	sub    $0x4,%esp
f0101081:	52                   	push   %edx
f0101082:	50                   	push   %eax
f0101083:	68 98 40 13 f0       	push   $0xf0134098
f0101088:	e8 f5 fb ff ff       	call   f0100c82 <cprintf>
f010108d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101090:	ff 45 f4             	incl   -0xc(%ebp)
f0101093:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f0101098:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010109b:	7c b4                	jl     f0101051 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010109d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01010a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01010a5:	c9                   	leave  
f01010a6:	c3                   	ret    

f01010a7 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01010a7:	55                   	push   %ebp
f01010a8:	89 e5                	mov    %esp,%ebp
f01010aa:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	68 b4 40 13 f0       	push   $0xf01340b4
f01010b5:	e8 c8 fb ff ff       	call   f0100c82 <cprintf>
f01010ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01010bd:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01010c2:	83 ec 04             	sub    $0x4,%esp
f01010c5:	50                   	push   %eax
f01010c6:	68 0c 00 10 f0       	push   $0xf010000c
f01010cb:	68 d0 40 13 f0       	push   $0xf01340d0
f01010d0:	e8 ad fb ff ff       	call   f0100c82 <cprintf>
f01010d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01010d8:	b8 05 30 13 00       	mov    $0x133005,%eax
f01010dd:	83 ec 04             	sub    $0x4,%esp
f01010e0:	50                   	push   %eax
f01010e1:	68 05 30 13 f0       	push   $0xf0133005
f01010e6:	68 0c 41 13 f0       	push   $0xf013410c
f01010eb:	e8 92 fb ff ff       	call   f0100c82 <cprintf>
f01010f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010f3:	b8 b0 6f 65 00       	mov    $0x656fb0,%eax
f01010f8:	83 ec 04             	sub    $0x4,%esp
f01010fb:	50                   	push   %eax
f01010fc:	68 b0 6f 65 f0       	push   $0xf0656fb0
f0101101:	68 48 41 13 f0       	push   $0xf0134148
f0101106:	e8 77 fb ff ff       	call   f0100c82 <cprintf>
f010110b:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010110e:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0101113:	83 ec 04             	sub    $0x4,%esp
f0101116:	50                   	push   %eax
f0101117:	68 bc 7c 65 f0       	push   $0xf0657cbc
f010111c:	68 90 41 13 f0       	push   $0xf0134190
f0101121:	e8 5c fb ff ff       	call   f0100c82 <cprintf>
f0101126:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101129:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f010112e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101134:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101139:	29 c2                	sub    %eax,%edx
f010113b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010113d:	85 c0                	test   %eax,%eax
f010113f:	79 05                	jns    f0101146 <command_kernel_info+0x9f>
f0101141:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101146:	c1 f8 0a             	sar    $0xa,%eax
f0101149:	83 ec 08             	sub    $0x8,%esp
f010114c:	50                   	push   %eax
f010114d:	68 cc 41 13 f0       	push   $0xf01341cc
f0101152:	e8 2b fb ff ff       	call   f0100c82 <cprintf>
f0101157:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010115a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010115f:	c9                   	leave  
f0101160:	c3                   	ret    

f0101161 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101161:	55                   	push   %ebp
f0101162:	89 e5                	mov    %esp,%ebp
f0101164:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101167:	83 ec 04             	sub    $0x4,%esp
f010116a:	68 f8 41 13 f0       	push   $0xf01341f8
f010116f:	68 b0 00 00 00       	push   $0xb0
f0101174:	68 19 42 13 f0       	push   $0xf0134219
f0101179:	e8 7d f0 ff ff       	call   f01001fb <_panic>

f010117e <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010117e:	55                   	push   %ebp
f010117f:	89 e5                	mov    %esp,%ebp
f0101181:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	68 f8 41 13 f0       	push   $0xf01341f8
f010118c:	68 ba 00 00 00       	push   $0xba
f0101191:	68 19 42 13 f0       	push   $0xf0134219
f0101196:	e8 60 f0 ff ff       	call   f01001fb <_panic>

f010119b <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010119b:	55                   	push   %ebp
f010119c:	89 e5                	mov    %esp,%ebp
f010119e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a1:	83 ec 04             	sub    $0x4,%esp
f01011a4:	68 f8 41 13 f0       	push   $0xf01341f8
f01011a9:	68 c3 00 00 00       	push   $0xc3
f01011ae:	68 19 42 13 f0       	push   $0xf0134219
f01011b3:	e8 43 f0 ff ff       	call   f01001fb <_panic>

f01011b8 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f01011b8:	55                   	push   %ebp
f01011b9:	89 e5                	mov    %esp,%ebp
f01011bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011be:	83 ec 04             	sub    $0x4,%esp
f01011c1:	68 f8 41 13 f0       	push   $0xf01341f8
f01011c6:	68 cf 00 00 00       	push   $0xcf
f01011cb:	68 19 42 13 f0       	push   $0xf0134219
f01011d0:	e8 26 f0 ff ff       	call   f01001fb <_panic>

f01011d5 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f01011d5:	55                   	push   %ebp
f01011d6:	89 e5                	mov    %esp,%ebp
f01011d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011db:	83 ec 04             	sub    $0x4,%esp
f01011de:	68 f8 41 13 f0       	push   $0xf01341f8
f01011e3:	68 d8 00 00 00       	push   $0xd8
f01011e8:	68 19 42 13 f0       	push   $0xf0134219
f01011ed:	e8 09 f0 ff ff       	call   f01001fb <_panic>

f01011f2 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011f2:	55                   	push   %ebp
f01011f3:	89 e5                	mov    %esp,%ebp
f01011f5:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f8:	83 ec 04             	sub    $0x4,%esp
f01011fb:	68 f8 41 13 f0       	push   $0xf01341f8
f0101200:	68 e1 00 00 00       	push   $0xe1
f0101205:	68 19 42 13 f0       	push   $0xf0134219
f010120a:	e8 ec ef ff ff       	call   f01001fb <_panic>

f010120f <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010120f:	55                   	push   %ebp
f0101210:	89 e5                	mov    %esp,%ebp
f0101212:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101215:	83 ec 04             	sub    $0x4,%esp
f0101218:	68 f8 41 13 f0       	push   $0xf01341f8
f010121d:	68 ee 00 00 00       	push   $0xee
f0101222:	68 19 42 13 f0       	push   $0xf0134219
f0101227:	e8 cf ef ff ff       	call   f01001fb <_panic>

f010122c <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f010122c:	55                   	push   %ebp
f010122d:	89 e5                	mov    %esp,%ebp
f010122f:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101232:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101235:	83 c0 04             	add    $0x4,%eax
f0101238:	8b 00                	mov    (%eax),%eax
f010123a:	83 ec 04             	sub    $0x4,%esp
f010123d:	6a 10                	push   $0x10
f010123f:	6a 00                	push   $0x0
f0101241:	50                   	push   %eax
f0101242:	e8 99 fe 02 00       	call   f01310e0 <strtol>
f0101247:	83 c4 10             	add    $0x10,%esp
f010124a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f010124d:	83 ec 0c             	sub    $0xc,%esp
f0101250:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101253:	50                   	push   %eax
f0101254:	e8 c2 55 00 00       	call   f010681b <allocate_frame>
f0101259:	83 c4 10             	add    $0x10,%esp
f010125c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010125f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101262:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0101267:	6a 06                	push   $0x6
f0101269:	ff 75 f4             	pushl  -0xc(%ebp)
f010126c:	52                   	push   %edx
f010126d:	50                   	push   %eax
f010126e:	e8 f7 59 00 00       	call   f0106c6a <map_frame>
f0101273:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010127b:	c9                   	leave  
f010127c:	c3                   	ret    

f010127d <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f010127d:	55                   	push   %ebp
f010127e:	89 e5                	mov    %esp,%ebp
f0101280:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101283:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101286:	83 c0 04             	add    $0x4,%eax
f0101289:	8b 00                	mov    (%eax),%eax
f010128b:	83 ec 04             	sub    $0x4,%esp
f010128e:	6a 10                	push   $0x10
f0101290:	6a 00                	push   $0x0
f0101292:	50                   	push   %eax
f0101293:	e8 48 fe 02 00       	call   f01310e0 <strtol>
f0101298:	83 c4 10             	add    $0x10,%esp
f010129b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010129e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01012a3:	83 ec 08             	sub    $0x8,%esp
f01012a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01012a9:	50                   	push   %eax
f01012aa:	e8 f0 5a 00 00       	call   f0106d9f <unmap_frame>
f01012af:	83 c4 10             	add    $0x10,%esp

	return 0;
f01012b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012b7:	c9                   	leave  
f01012b8:	c3                   	ret    

f01012b9 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f01012b9:	55                   	push   %ebp
f01012ba:	89 e5                	mov    %esp,%ebp
f01012bc:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012bf:	83 ec 04             	sub    $0x4,%esp
f01012c2:	68 f8 41 13 f0       	push   $0xf01341f8
f01012c7:	68 18 01 00 00       	push   $0x118
f01012cc:	68 19 42 13 f0       	push   $0xf0134219
f01012d1:	e8 25 ef ff ff       	call   f01001fb <_panic>

f01012d6 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f01012d6:	55                   	push   %ebp
f01012d7:	89 e5                	mov    %esp,%ebp
f01012d9:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012dc:	83 ec 04             	sub    $0x4,%esp
f01012df:	68 f8 41 13 f0       	push   $0xf01341f8
f01012e4:	68 23 01 00 00       	push   $0x123
f01012e9:	68 19 42 13 f0       	push   $0xf0134219
f01012ee:	e8 08 ef ff ff       	call   f01001fb <_panic>

f01012f3 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012f3:	55                   	push   %ebp
f01012f4:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012fb:	5d                   	pop    %ebp
f01012fc:	c3                   	ret    

f01012fd <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012fd:	55                   	push   %ebp
f01012fe:	89 e5                	mov    %esp,%ebp
f0101300:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0101303:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101307:	75 37                	jne    f0101340 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101309:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130c:	83 c0 04             	add    $0x4,%eax
f010130f:	8b 00                	mov    (%eax),%eax
f0101311:	83 ec 04             	sub    $0x4,%esp
f0101314:	6a 10                	push   $0x10
f0101316:	6a 00                	push   $0x0
f0101318:	50                   	push   %eax
f0101319:	e8 c2 fd 02 00       	call   f01310e0 <strtol>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0101324:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101327:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010132a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132d:	83 c0 08             	add    $0x8,%eax
f0101330:	8b 00                	mov    (%eax),%eax
f0101332:	8a 00                	mov    (%eax),%al
f0101334:	88 c2                	mov    %al,%dl
f0101336:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101339:	88 10                	mov    %dl,(%eax)
f010133b:	e9 b9 00 00 00       	jmp    f01013f9 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0101340:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101344:	0f 85 9f 00 00 00    	jne    f01013e9 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010134a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010134d:	83 c0 04             	add    $0x4,%eax
f0101350:	8b 00                	mov    (%eax),%eax
f0101352:	83 ec 04             	sub    $0x4,%esp
f0101355:	6a 0a                	push   $0xa
f0101357:	6a 00                	push   $0x0
f0101359:	50                   	push   %eax
f010135a:	e8 81 fd 02 00       	call   f01310e0 <strtol>
f010135f:	83 c4 10             	add    $0x10,%esp
f0101362:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101365:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010136c:	83 ec 04             	sub    $0x4,%esp
f010136f:	6a 00                	push   $0x0
f0101371:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101374:	50                   	push   %eax
f0101375:	ff 75 f4             	pushl  -0xc(%ebp)
f0101378:	e8 1b 87 00 00       	call   f0109a98 <envid2env>
f010137d:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101380:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101383:	83 c0 08             	add    $0x8,%eax
f0101386:	8b 00                	mov    (%eax),%eax
f0101388:	83 ec 04             	sub    $0x4,%esp
f010138b:	6a 10                	push   $0x10
f010138d:	6a 00                	push   $0x0
f010138f:	50                   	push   %eax
f0101390:	e8 4b fd 02 00       	call   f01310e0 <strtol>
f0101395:	83 c4 10             	add    $0x10,%esp
f0101398:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010139b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	75 07                	jne    f01013a9 <command_writeusermem+0xac>
f01013a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01013a7:	eb 55                	jmp    f01013fe <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01013a9:	0f 20 d8             	mov    %cr3,%eax
f01013ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01013af:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01013b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01013b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01013b8:	8b 40 60             	mov    0x60(%eax),%eax
f01013bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01013be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013c1:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01013ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013cd:	83 c0 0c             	add    $0xc,%eax
f01013d0:	8b 00                	mov    (%eax),%eax
f01013d2:	8a 00                	mov    (%eax),%al
f01013d4:	88 c2                	mov    %al,%dl
f01013d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01013d9:	88 10                	mov    %dl,(%eax)
f01013db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01013de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01013e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01013e4:	0f 22 d8             	mov    %eax,%cr3
f01013e7:	eb 10                	jmp    f01013f9 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01013e9:	83 ec 0c             	sub    $0xc,%esp
f01013ec:	68 30 42 13 f0       	push   $0xf0134230
f01013f1:	e8 8c f8 ff ff       	call   f0100c82 <cprintf>
f01013f6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013fe:	c9                   	leave  
f01013ff:	c3                   	ret    

f0101400 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101400:	55                   	push   %ebp
f0101401:	89 e5                	mov    %esp,%ebp
f0101403:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101406:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101409:	83 c0 04             	add    $0x4,%eax
f010140c:	8b 00                	mov    (%eax),%eax
f010140e:	83 ec 04             	sub    $0x4,%esp
f0101411:	6a 10                	push   $0x10
f0101413:	6a 00                	push   $0x0
f0101415:	50                   	push   %eax
f0101416:	e8 c5 fc 02 00       	call   f01310e0 <strtol>
f010141b:	83 c4 10             	add    $0x10,%esp
f010141e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101423:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101426:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101429:	83 c0 08             	add    $0x8,%eax
f010142c:	8b 00                	mov    (%eax),%eax
f010142e:	83 ec 04             	sub    $0x4,%esp
f0101431:	6a 0a                	push   $0xa
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 a5 fc 02 00       	call   f01310e0 <strtol>
f010143b:	83 c4 10             	add    $0x10,%esp
f010143e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101448:	8b 45 0c             	mov    0xc(%ebp),%eax
f010144b:	83 c0 0c             	add    $0xc,%eax
f010144e:	8b 00                	mov    (%eax),%eax
f0101450:	83 ec 0c             	sub    $0xc,%esp
f0101453:	50                   	push   %eax
f0101454:	e8 27 f9 02 00       	call   f0130d80 <strlen>
f0101459:	83 c4 10             	add    $0x10,%esp
f010145c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010145f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101466:	eb 30                	jmp    f0101498 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101468:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010146f:	eb 1c                	jmp    f010148d <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101474:	83 c0 0c             	add    $0xc,%eax
f0101477:	8b 10                	mov    (%eax),%edx
f0101479:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010147c:	01 d0                	add    %edx,%eax
f010147e:	8a 00                	mov    (%eax),%al
f0101480:	88 c2                	mov    %al,%dl
f0101482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101485:	88 10                	mov    %dl,(%eax)
			address++;
f0101487:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010148a:	ff 45 ec             	incl   -0x14(%ebp)
f010148d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101490:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101493:	7c dc                	jl     f0101471 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101495:	ff 45 f0             	incl   -0x10(%ebp)
f0101498:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010149b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010149e:	7c c8                	jl     f0101468 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f01014a0:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01014a5:	c9                   	leave  
f01014a6:	c3                   	ret    

f01014a7 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01014a7:	55                   	push   %ebp
f01014a8:	89 e5                	mov    %esp,%ebp
f01014aa:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01014ad:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01014b1:	75 42                	jne    f01014f5 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01014b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b6:	83 c0 04             	add    $0x4,%eax
f01014b9:	8b 00                	mov    (%eax),%eax
f01014bb:	83 ec 04             	sub    $0x4,%esp
f01014be:	6a 10                	push   $0x10
f01014c0:	6a 00                	push   $0x0
f01014c2:	50                   	push   %eax
f01014c3:	e8 18 fc 02 00       	call   f01310e0 <strtol>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01014ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01014d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014d7:	8a 00                	mov    (%eax),%al
f01014d9:	0f b6 c0             	movzbl %al,%eax
f01014dc:	83 ec 04             	sub    $0x4,%esp
f01014df:	50                   	push   %eax
f01014e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01014e3:	68 5a 42 13 f0       	push   $0xf013425a
f01014e8:	e8 95 f7 ff ff       	call   f0100c82 <cprintf>
f01014ed:	83 c4 10             	add    $0x10,%esp
f01014f0:	e9 c4 00 00 00       	jmp    f01015b9 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014f5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014f9:	0f 85 aa 00 00 00    	jne    f01015a9 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101502:	83 c0 04             	add    $0x4,%eax
f0101505:	8b 00                	mov    (%eax),%eax
f0101507:	83 ec 04             	sub    $0x4,%esp
f010150a:	6a 0a                	push   $0xa
f010150c:	6a 00                	push   $0x0
f010150e:	50                   	push   %eax
f010150f:	e8 cc fb 02 00       	call   f01310e0 <strtol>
f0101514:	83 c4 10             	add    $0x10,%esp
f0101517:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010151a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101521:	83 ec 04             	sub    $0x4,%esp
f0101524:	6a 00                	push   $0x0
f0101526:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101529:	50                   	push   %eax
f010152a:	ff 75 f4             	pushl  -0xc(%ebp)
f010152d:	e8 66 85 00 00       	call   f0109a98 <envid2env>
f0101532:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101538:	83 c0 08             	add    $0x8,%eax
f010153b:	8b 00                	mov    (%eax),%eax
f010153d:	83 ec 04             	sub    $0x4,%esp
f0101540:	6a 10                	push   $0x10
f0101542:	6a 00                	push   $0x0
f0101544:	50                   	push   %eax
f0101545:	e8 96 fb 02 00       	call   f01310e0 <strtol>
f010154a:	83 c4 10             	add    $0x10,%esp
f010154d:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101553:	85 c0                	test   %eax,%eax
f0101555:	75 07                	jne    f010155e <command_readusermem+0xb7>
f0101557:	b8 00 00 00 00       	mov    $0x0,%eax
f010155c:	eb 60                	jmp    f01015be <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010155e:	0f 20 d8             	mov    %cr3,%eax
f0101561:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101564:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101567:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010156a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010156d:	8b 40 60             	mov    0x60(%eax),%eax
f0101570:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101573:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101576:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010157c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010157f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101582:	8a 00                	mov    (%eax),%al
f0101584:	0f b6 c0             	movzbl %al,%eax
f0101587:	83 ec 04             	sub    $0x4,%esp
f010158a:	50                   	push   %eax
f010158b:	ff 75 f0             	pushl  -0x10(%ebp)
f010158e:	68 5a 42 13 f0       	push   $0xf013425a
f0101593:	e8 ea f6 ff ff       	call   f0100c82 <cprintf>
f0101598:	83 c4 10             	add    $0x10,%esp
f010159b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010159e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01015a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a4:	0f 22 d8             	mov    %eax,%cr3
f01015a7:	eb 10                	jmp    f01015b9 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01015a9:	83 ec 0c             	sub    $0xc,%esp
f01015ac:	68 74 42 13 f0       	push   $0xf0134274
f01015b1:	e8 cc f6 ff ff       	call   f0100c82 <cprintf>
f01015b6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01015b9:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01015be:	c9                   	leave  
f01015bf:	c3                   	ret    

f01015c0 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01015c0:	55                   	push   %ebp
f01015c1:	89 e5                	mov    %esp,%ebp
f01015c3:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c9:	83 c0 04             	add    $0x4,%eax
f01015cc:	8b 00                	mov    (%eax),%eax
f01015ce:	83 ec 04             	sub    $0x4,%esp
f01015d1:	6a 10                	push   $0x10
f01015d3:	6a 00                	push   $0x0
f01015d5:	50                   	push   %eax
f01015d6:	e8 05 fb 02 00       	call   f01310e0 <strtol>
f01015db:	83 c4 10             	add    $0x10,%esp
f01015de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01015e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01015e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015e9:	83 c0 08             	add    $0x8,%eax
f01015ec:	8b 00                	mov    (%eax),%eax
f01015ee:	83 ec 04             	sub    $0x4,%esp
f01015f1:	6a 0a                	push   $0xa
f01015f3:	6a 00                	push   $0x0
f01015f5:	50                   	push   %eax
f01015f6:	e8 e5 fa 02 00       	call   f01310e0 <strtol>
f01015fb:	83 c4 10             	add    $0x10,%esp
f01015fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101601:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101608:	eb 22                	jmp    f010162c <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f010160a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010160d:	8d 50 01             	lea    0x1(%eax),%edx
f0101610:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101613:	8a 00                	mov    (%eax),%al
f0101615:	0f b6 c0             	movzbl %al,%eax
f0101618:	83 ec 08             	sub    $0x8,%esp
f010161b:	50                   	push   %eax
f010161c:	68 9e 42 13 f0       	push   $0xf013429e
f0101621:	e8 5c f6 ff ff       	call   f0100c82 <cprintf>
f0101626:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101629:	ff 45 f0             	incl   -0x10(%ebp)
f010162c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010162f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101632:	7c d6                	jl     f010160a <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101634:	83 ec 0c             	sub    $0xc,%esp
f0101637:	68 a1 42 13 f0       	push   $0xf01342a1
f010163c:	e8 41 f6 ff ff       	call   f0100c82 <cprintf>
f0101641:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101644:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101649:	c9                   	leave  
f010164a:	c3                   	ret    

f010164b <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f010164b:	55                   	push   %ebp
f010164c:	89 e5                	mov    %esp,%ebp
f010164e:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101654:	83 c0 04             	add    $0x4,%eax
f0101657:	8b 00                	mov    (%eax),%eax
f0101659:	83 ec 04             	sub    $0x4,%esp
f010165c:	6a 0a                	push   $0xa
f010165e:	6a 00                	push   $0x0
f0101660:	50                   	push   %eax
f0101661:	e8 7a fa 02 00       	call   f01310e0 <strtol>
f0101666:	83 c4 10             	add    $0x10,%esp
f0101669:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010166c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101673:	83 ec 04             	sub    $0x4,%esp
f0101676:	6a 00                	push   $0x0
f0101678:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010167b:	50                   	push   %eax
f010167c:	ff 75 ec             	pushl  -0x14(%ebp)
f010167f:	e8 14 84 00 00       	call   f0109a98 <envid2env>
f0101684:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101687:	8b 45 0c             	mov    0xc(%ebp),%eax
f010168a:	83 c0 08             	add    $0x8,%eax
f010168d:	8b 00                	mov    (%eax),%eax
f010168f:	83 ec 04             	sub    $0x4,%esp
f0101692:	6a 10                	push   $0x10
f0101694:	6a 00                	push   $0x0
f0101696:	50                   	push   %eax
f0101697:	e8 44 fa 02 00       	call   f01310e0 <strtol>
f010169c:	83 c4 10             	add    $0x10,%esp
f010169f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01016a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a5:	83 c0 0c             	add    $0xc,%eax
f01016a8:	8b 00                	mov    (%eax),%eax
f01016aa:	83 ec 04             	sub    $0x4,%esp
f01016ad:	6a 0a                	push   $0xa
f01016af:	6a 00                	push   $0x0
f01016b1:	50                   	push   %eax
f01016b2:	e8 29 fa 02 00       	call   f01310e0 <strtol>
f01016b7:	83 c4 10             	add    $0x10,%esp
f01016ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01016bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01016c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01016c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016c6:	85 c0                	test   %eax,%eax
f01016c8:	75 07                	jne    f01016d1 <command_readuserblock+0x86>
f01016ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01016cf:	eb 65                	jmp    f0101736 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01016d1:	0f 20 d8             	mov    %cr3,%eax
f01016d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01016d7:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01016da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01016dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016e0:	8b 40 60             	mov    0x60(%eax),%eax
f01016e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01016e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016e9:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01016ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016f3:	eb 28                	jmp    f010171d <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016f8:	8a 00                	mov    (%eax),%al
f01016fa:	0f b6 d0             	movzbl %al,%edx
f01016fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101700:	8a 00                	mov    (%eax),%al
f0101702:	0f b6 c0             	movzbl %al,%eax
f0101705:	52                   	push   %edx
f0101706:	50                   	push   %eax
f0101707:	ff 75 f4             	pushl  -0xc(%ebp)
f010170a:	68 a3 42 13 f0       	push   $0xf01342a3
f010170f:	e8 6e f5 ff ff       	call   f0100c82 <cprintf>
f0101714:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101717:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010171a:	ff 45 f0             	incl   -0x10(%ebp)
f010171d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101720:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101723:	7c d0                	jl     f01016f5 <command_readuserblock+0xaa>
f0101725:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101728:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010172b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010172e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101731:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101736:	c9                   	leave  
f0101737:	c3                   	ret    

f0101738 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101738:	55                   	push   %ebp
f0101739:	89 e5                	mov    %esp,%ebp
f010173b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101741:	83 c0 04             	add    $0x4,%eax
f0101744:	8b 00                	mov    (%eax),%eax
f0101746:	83 ec 04             	sub    $0x4,%esp
f0101749:	6a 0a                	push   $0xa
f010174b:	6a 00                	push   $0x0
f010174d:	50                   	push   %eax
f010174e:	e8 8d f9 02 00       	call   f01310e0 <strtol>
f0101753:	83 c4 10             	add    $0x10,%esp
f0101756:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101759:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101760:	83 ec 04             	sub    $0x4,%esp
f0101763:	6a 00                	push   $0x0
f0101765:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101768:	50                   	push   %eax
f0101769:	ff 75 f4             	pushl  -0xc(%ebp)
f010176c:	e8 27 83 00 00       	call   f0109a98 <envid2env>
f0101771:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101774:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101777:	85 c0                	test   %eax,%eax
f0101779:	75 0a                	jne    f0101785 <command_remove_table+0x4d>
f010177b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101780:	e9 c7 00 00 00       	jmp    f010184c <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101788:	83 c0 08             	add    $0x8,%eax
f010178b:	8b 00                	mov    (%eax),%eax
f010178d:	83 ec 04             	sub    $0x4,%esp
f0101790:	6a 10                	push   $0x10
f0101792:	6a 00                	push   $0x0
f0101794:	50                   	push   %eax
f0101795:	e8 46 f9 02 00       	call   f01310e0 <strtol>
f010179a:	83 c4 10             	add    $0x10,%esp
f010179d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01017a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01017a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01017af:	c1 ea 16             	shr    $0x16,%edx
f01017b2:	c1 e2 02             	shl    $0x2,%edx
f01017b5:	01 d0                	add    %edx,%eax
f01017b7:	8b 00                	mov    (%eax),%eax
f01017b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01017be:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f01017c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017c4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01017c9:	77 1c                	ja     f01017e7 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f01017cb:	83 ec 0c             	sub    $0xc,%esp
f01017ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01017d1:	e8 2f 62 00 00       	call   f0107a05 <kheap_virtual_address>
f01017d6:	83 c4 10             	add    $0x10,%esp
f01017d9:	83 ec 0c             	sub    $0xc,%esp
f01017dc:	50                   	push   %eax
f01017dd:	e8 fc 60 00 00       	call   f01078de <kfree>
f01017e2:	83 c4 10             	add    $0x10,%esp
f01017e5:	eb 28                	jmp    f010180f <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01017e7:	83 ec 0c             	sub    $0xc,%esp
f01017ea:	ff 75 e8             	pushl  -0x18(%ebp)
f01017ed:	e8 a9 f7 ff ff       	call   f0100f9b <to_frame_info>
f01017f2:	83 c4 10             	add    $0x10,%esp
f01017f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01017f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01017fb:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101801:	83 ec 0c             	sub    $0xc,%esp
f0101804:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101807:	e8 24 51 00 00       	call   f0106930 <free_frame>
f010180c:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010180f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101812:	c1 e8 16             	shr    $0x16,%eax
f0101815:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101818:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010181e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101821:	c1 e2 02             	shl    $0x2,%edx
f0101824:	01 c2                	add    %eax,%edx
f0101826:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101829:	8b 40 5c             	mov    0x5c(%eax),%eax
f010182c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010182f:	c1 e1 02             	shl    $0x2,%ecx
f0101832:	01 c8                	add    %ecx,%eax
f0101834:	8b 00                	mov    (%eax),%eax
f0101836:	83 e0 fe             	and    $0xfffffffe,%eax
f0101839:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010183b:	0f 20 d8             	mov    %cr3,%eax
f010183e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101841:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101844:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101847:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010184c:	c9                   	leave  
f010184d:	c3                   	ret    

f010184e <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f010184e:	55                   	push   %ebp
f010184f:	89 e5                	mov    %esp,%ebp
f0101851:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0101854:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101858:	7e 06                	jle    f0101860 <command_allocuserpage+0x12>
f010185a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010185e:	7e 1a                	jle    f010187a <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101860:	83 ec 0c             	sub    $0xc,%esp
f0101863:	68 b4 42 13 f0       	push   $0xf01342b4
f0101868:	e8 15 f4 ff ff       	call   f0100c82 <cprintf>
f010186d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101870:	b8 00 00 00 00       	mov    $0x0,%eax
f0101875:	e9 46 01 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f010187a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010187d:	83 c0 04             	add    $0x4,%eax
f0101880:	8b 00                	mov    (%eax),%eax
f0101882:	83 ec 04             	sub    $0x4,%esp
f0101885:	6a 0a                	push   $0xa
f0101887:	6a 00                	push   $0x0
f0101889:	50                   	push   %eax
f010188a:	e8 51 f8 02 00       	call   f01310e0 <strtol>
f010188f:	83 c4 10             	add    $0x10,%esp
f0101892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101895:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f010189c:	83 ec 04             	sub    $0x4,%esp
f010189f:	6a 00                	push   $0x0
f01018a1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01018a4:	50                   	push   %eax
f01018a5:	ff 75 f0             	pushl  -0x10(%ebp)
f01018a8:	e8 eb 81 00 00       	call   f0109a98 <envid2env>
f01018ad:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01018b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018b3:	85 c0                	test   %eax,%eax
f01018b5:	75 0a                	jne    f01018c1 <command_allocuserpage+0x73>
f01018b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01018bc:	e9 ff 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f01018c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c4:	83 c0 08             	add    $0x8,%eax
f01018c7:	8b 00                	mov    (%eax),%eax
f01018c9:	83 ec 04             	sub    $0x4,%esp
f01018cc:	6a 10                	push   $0x10
f01018ce:	6a 00                	push   $0x0
f01018d0:	50                   	push   %eax
f01018d1:	e8 0a f8 02 00       	call   f01310e0 <strtol>
f01018d6:	83 c4 10             	add    $0x10,%esp
f01018d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f01018dc:	83 ec 0c             	sub    $0xc,%esp
f01018df:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01018e2:	50                   	push   %eax
f01018e3:	e8 33 4f 00 00       	call   f010681b <allocate_frame>
f01018e8:	83 c4 10             	add    $0x10,%esp
f01018eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01018ee:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01018f2:	75 1a                	jne    f010190e <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01018f4:	83 ec 0c             	sub    $0xc,%esp
f01018f7:	68 de 42 13 f0       	push   $0xf01342de
f01018fc:	e8 81 f3 ff ff       	call   f0100c82 <cprintf>
f0101901:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101904:	b8 00 00 00 00       	mov    $0x0,%eax
f0101909:	e9 b2 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010190e:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101912:	75 1d                	jne    f0101931 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101914:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010191a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010191d:	6a 06                	push   $0x6
f010191f:	ff 75 ec             	pushl  -0x14(%ebp)
f0101922:	52                   	push   %edx
f0101923:	50                   	push   %eax
f0101924:	e8 41 53 00 00       	call   f0106c6a <map_frame>
f0101929:	83 c4 10             	add    $0x10,%esp
f010192c:	e9 8a 00 00 00       	jmp    f01019bb <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0101931:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101935:	0f 85 80 00 00 00    	jne    f01019bb <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f010193b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010193e:	83 c0 0c             	add    $0xc,%eax
f0101941:	8b 00                	mov    (%eax),%eax
f0101943:	8a 00                	mov    (%eax),%al
f0101945:	3c 72                	cmp    $0x72,%al
f0101947:	74 0e                	je     f0101957 <command_allocuserpage+0x109>
f0101949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194c:	83 c0 0c             	add    $0xc,%eax
f010194f:	8b 00                	mov    (%eax),%eax
f0101951:	8a 00                	mov    (%eax),%al
f0101953:	3c 52                	cmp    $0x52,%al
f0101955:	75 09                	jne    f0101960 <command_allocuserpage+0x112>
			rw = 0 ;
f0101957:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010195e:	eb 3c                	jmp    f010199c <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101960:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101963:	83 c0 0c             	add    $0xc,%eax
f0101966:	8b 00                	mov    (%eax),%eax
f0101968:	8a 00                	mov    (%eax),%al
f010196a:	3c 77                	cmp    $0x77,%al
f010196c:	74 0e                	je     f010197c <command_allocuserpage+0x12e>
f010196e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101971:	83 c0 0c             	add    $0xc,%eax
f0101974:	8b 00                	mov    (%eax),%eax
f0101976:	8a 00                	mov    (%eax),%al
f0101978:	3c 57                	cmp    $0x57,%al
f010197a:	75 09                	jne    f0101985 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f010197c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101983:	eb 17                	jmp    f010199c <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101985:	83 ec 0c             	sub    $0xc,%esp
f0101988:	68 f8 42 13 f0       	push   $0xf01342f8
f010198d:	e8 f0 f2 ff ff       	call   f0100c82 <cprintf>
f0101992:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101995:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f010199c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010199f:	83 c8 04             	or     $0x4,%eax
f01019a2:	89 c1                	mov    %eax,%ecx
f01019a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019ad:	51                   	push   %ecx
f01019ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01019b1:	52                   	push   %edx
f01019b2:	50                   	push   %eax
f01019b3:	e8 b2 52 00 00       	call   f0106c6a <map_frame>
f01019b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01019bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019c0:	c9                   	leave  
f01019c1:	c3                   	ret    

f01019c2 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f01019c2:	55                   	push   %ebp
f01019c3:	89 e5                	mov    %esp,%ebp
f01019c5:	56                   	push   %esi
f01019c6:	53                   	push   %ebx
f01019c7:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f01019ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 2e 55 00 00       	call   f0106f04 <calculate_available_frames>
f01019d6:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01019df:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01019e2:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01019e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01019e8:	01 de                	add    %ebx,%esi
f01019ea:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019ed:	01 f3                	add    %esi,%ebx
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	51                   	push   %ecx
f01019f3:	52                   	push   %edx
f01019f4:	50                   	push   %eax
f01019f5:	53                   	push   %ebx
f01019f6:	68 3c 43 13 f0       	push   $0xf013433c
f01019fb:	e8 82 f2 ff ff       	call   f0100c82 <cprintf>
f0101a00:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a03:	a1 74 7b 65 f0       	mov    0xf0657b74,%eax
f0101a08:	83 ec 08             	sub    $0x8,%esp
f0101a0b:	50                   	push   %eax
f0101a0c:	68 94 43 13 f0       	push   $0xf0134394
f0101a11:	e8 6c f2 ff ff       	call   f0100c82 <cprintf>
f0101a16:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a21:	5b                   	pop    %ebx
f0101a22:	5e                   	pop    %esi
f0101a23:	5d                   	pop    %ebp
f0101a24:	c3                   	ret    

f0101a25 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a25:	55                   	push   %ebp
f0101a26:	89 e5                	mov    %esp,%ebp
f0101a28:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a2b:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101a39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0101a43:	83 f8 04             	cmp    $0x4,%eax
f0101a46:	0f 84 94 00 00 00    	je     f0101ae0 <CreateEnv+0xbb>
f0101a4c:	83 f8 05             	cmp    $0x5,%eax
f0101a4f:	74 0e                	je     f0101a5f <CreateEnv+0x3a>
f0101a51:	83 f8 03             	cmp    $0x3,%eax
f0101a54:	0f 84 ec 00 00 00    	je     f0101b46 <CreateEnv+0x121>
f0101a5a:	e9 2f 01 00 00       	jmp    f0101b8e <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a5f:	83 ec 0c             	sub    $0xc,%esp
f0101a62:	6a 02                	push   $0x2
f0101a64:	e8 8e c1 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0101a69:	83 c4 10             	add    $0x10,%esp
f0101a6c:	85 c0                	test   %eax,%eax
f0101a6e:	75 1a                	jne    f0101a8a <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101a70:	83 ec 0c             	sub    $0xc,%esp
f0101a73:	68 d0 43 13 f0       	push   $0xf01343d0
f0101a78:	e8 05 f2 ff ff       	call   f0100c82 <cprintf>
f0101a7d:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	e9 d5 01 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a8d:	83 c0 10             	add    $0x10,%eax
f0101a90:	8b 00                	mov    (%eax),%eax
f0101a92:	83 ec 04             	sub    $0x4,%esp
f0101a95:	6a 0a                	push   $0xa
f0101a97:	6a 00                	push   $0x0
f0101a99:	50                   	push   %eax
f0101a9a:	e8 41 f6 02 00       	call   f01310e0 <strtol>
f0101a9f:	83 c4 10             	add    $0x10,%esp
f0101aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aa8:	83 c0 0c             	add    $0xc,%eax
f0101aab:	8b 00                	mov    (%eax),%eax
f0101aad:	83 ec 04             	sub    $0x4,%esp
f0101ab0:	6a 0a                	push   $0xa
f0101ab2:	6a 00                	push   $0x0
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 26 f6 02 00       	call   f01310e0 <strtol>
f0101aba:	83 c4 10             	add    $0x10,%esp
f0101abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ac3:	83 c0 08             	add    $0x8,%eax
f0101ac6:	8b 00                	mov    (%eax),%eax
f0101ac8:	83 ec 04             	sub    $0x4,%esp
f0101acb:	6a 0a                	push   $0xa
f0101acd:	6a 00                	push   $0x0
f0101acf:	50                   	push   %eax
f0101ad0:	e8 0b f6 02 00       	call   f01310e0 <strtol>
f0101ad5:	83 c4 10             	add    $0x10,%esp
f0101ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101adb:	e9 c8 00 00 00       	jmp    f0101ba8 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ae0:	83 ec 0c             	sub    $0xc,%esp
f0101ae3:	6a 02                	push   $0x2
f0101ae5:	e8 0d c1 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	85 c0                	test   %eax,%eax
f0101aef:	75 1d                	jne    f0101b0e <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101af1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101af4:	83 c0 0c             	add    $0xc,%eax
f0101af7:	8b 00                	mov    (%eax),%eax
f0101af9:	83 ec 04             	sub    $0x4,%esp
f0101afc:	6a 0a                	push   $0xa
f0101afe:	6a 00                	push   $0x0
f0101b00:	50                   	push   %eax
f0101b01:	e8 da f5 02 00       	call   f01310e0 <strtol>
f0101b06:	83 c4 10             	add    $0x10,%esp
f0101b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b0c:	eb 1b                	jmp    f0101b29 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b11:	83 c0 0c             	add    $0xc,%eax
f0101b14:	8b 00                	mov    (%eax),%eax
f0101b16:	83 ec 04             	sub    $0x4,%esp
f0101b19:	6a 0a                	push   $0xa
f0101b1b:	6a 00                	push   $0x0
f0101b1d:	50                   	push   %eax
f0101b1e:	e8 bd f5 02 00       	call   f01310e0 <strtol>
f0101b23:	83 c4 10             	add    $0x10,%esp
f0101b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b2c:	83 c0 08             	add    $0x8,%eax
f0101b2f:	8b 00                	mov    (%eax),%eax
f0101b31:	83 ec 04             	sub    $0x4,%esp
f0101b34:	6a 0a                	push   $0xa
f0101b36:	6a 00                	push   $0x0
f0101b38:	50                   	push   %eax
f0101b39:	e8 a2 f5 02 00       	call   f01310e0 <strtol>
f0101b3e:	83 c4 10             	add    $0x10,%esp
f0101b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b44:	eb 62                	jmp    f0101ba8 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b46:	83 ec 0c             	sub    $0xc,%esp
f0101b49:	6a 02                	push   $0x2
f0101b4b:	e8 a7 c0 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	85 c0                	test   %eax,%eax
f0101b55:	74 1a                	je     f0101b71 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101b57:	83 ec 0c             	sub    $0xc,%esp
f0101b5a:	68 90 44 13 f0       	push   $0xf0134490
f0101b5f:	e8 1e f1 ff ff       	call   f0100c82 <cprintf>
f0101b64:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b6c:	e9 ee 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b74:	83 c0 08             	add    $0x8,%eax
f0101b77:	8b 00                	mov    (%eax),%eax
f0101b79:	83 ec 04             	sub    $0x4,%esp
f0101b7c:	6a 0a                	push   $0xa
f0101b7e:	6a 00                	push   $0x0
f0101b80:	50                   	push   %eax
f0101b81:	e8 5a f5 02 00       	call   f01310e0 <strtol>
f0101b86:	83 c4 10             	add    $0x10,%esp
f0101b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b8c:	eb 1a                	jmp    f0101ba8 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b8e:	83 ec 0c             	sub    $0xc,%esp
f0101b91:	68 20 45 13 f0       	push   $0xf0134520
f0101b96:	e8 e7 f0 ff ff       	call   f0100c82 <cprintf>
f0101b9b:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101b9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ba3:	e9 b7 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101ba8:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101baf:	76 1f                	jbe    f0101bd0 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101bb1:	83 ec 08             	sub    $0x8,%esp
f0101bb4:	68 88 13 00 00       	push   $0x1388
f0101bb9:	68 b8 45 13 f0       	push   $0xf01345b8
f0101bbe:	e8 bf f0 ff ff       	call   f0100c82 <cprintf>
f0101bc3:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101bc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bcb:	e9 8f 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd0:	83 ec 0c             	sub    $0xc,%esp
f0101bd3:	6a 02                	push   $0x2
f0101bd5:	e8 1d c0 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0101bda:	83 c4 10             	add    $0x10,%esp
f0101bdd:	85 c0                	test   %eax,%eax
f0101bdf:	74 20                	je     f0101c01 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101be4:	48                   	dec    %eax
f0101be5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101be8:	73 17                	jae    f0101c01 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101bea:	83 ec 0c             	sub    $0xc,%esp
f0101bed:	68 f8 45 13 f0       	push   $0xf01345f8
f0101bf2:	e8 8b f0 ff ff       	call   f0100c82 <cprintf>
f0101bf7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bff:	eb 5e                	jmp    f0101c5f <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c01:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c05:	76 19                	jbe    f0101c20 <CreateEnv+0x1fb>
f0101c07:	68 50 46 13 f0       	push   $0xf0134650
f0101c0c:	68 95 46 13 f0       	push   $0xf0134695
f0101c11:	68 5a 02 00 00       	push   $0x25a
f0101c16:	68 19 42 13 f0       	push   $0xf0134219
f0101c1b:	e8 db e5 ff ff       	call   f01001fb <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c20:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c24:	76 19                	jbe    f0101c3f <CreateEnv+0x21a>
f0101c26:	68 50 46 13 f0       	push   $0xf0134650
f0101c2b:	68 95 46 13 f0       	push   $0xf0134695
f0101c30:	68 71 02 00 00       	push   $0x271
f0101c35:	68 19 42 13 f0       	push   $0xf0134219
f0101c3a:	e8 bc e5 ff ff       	call   f01001fb <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c42:	83 c0 04             	add    $0x4,%eax
f0101c45:	8b 00                	mov    (%eax),%eax
f0101c47:	ff 75 ec             	pushl  -0x14(%ebp)
f0101c4a:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c50:	50                   	push   %eax
f0101c51:	e8 9b 71 00 00       	call   f0108df1 <env_create>
f0101c56:	83 c4 10             	add    $0x10,%esp
f0101c59:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101c5f:	c9                   	leave  
f0101c60:	c3                   	ret    

f0101c61 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101c61:	55                   	push   %ebp
f0101c62:	89 e5                	mov    %esp,%ebp
f0101c64:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101c67:	83 ec 08             	sub    $0x8,%esp
f0101c6a:	ff 75 0c             	pushl  0xc(%ebp)
f0101c6d:	ff 75 08             	pushl  0x8(%ebp)
f0101c70:	e8 b0 fd ff ff       	call   f0101a25 <CreateEnv>
f0101c75:	83 c4 10             	add    $0x10,%esp
f0101c78:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101c7f:	75 07                	jne    f0101c88 <command_run_program+0x27>
f0101c81:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c86:	eb 46                	jmp    f0101cce <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c8b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101c8e:	83 ec 08             	sub    $0x8,%esp
f0101c91:	50                   	push   %eax
f0101c92:	68 aa 46 13 f0       	push   $0xf01346aa
f0101c97:	e8 e6 ef ff ff       	call   f0100c82 <cprintf>
f0101c9c:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101c9f:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101ca6:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101ca9:	83 ec 0c             	sub    $0xc,%esp
f0101cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0101caf:	e8 79 34 00 00       	call   f010512d <sched_new_env>
f0101cb4:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101cbd:	83 ec 0c             	sub    $0xc,%esp
f0101cc0:	50                   	push   %eax
f0101cc1:	e8 84 34 00 00       	call   f010514a <sched_run_env>
f0101cc6:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101cc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cce:	c9                   	leave  
f0101ccf:	c3                   	ret    

f0101cd0 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101cd0:	55                   	push   %ebp
f0101cd1:	89 e5                	mov    %esp,%ebp
f0101cd3:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd9:	83 c0 04             	add    $0x4,%eax
f0101cdc:	8b 00                	mov    (%eax),%eax
f0101cde:	83 ec 04             	sub    $0x4,%esp
f0101ce1:	6a 0a                	push   $0xa
f0101ce3:	6a 00                	push   $0x0
f0101ce5:	50                   	push   %eax
f0101ce6:	e8 f5 f3 02 00       	call   f01310e0 <strtol>
f0101ceb:	83 c4 10             	add    $0x10,%esp
f0101cee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cf4:	83 ec 0c             	sub    $0xc,%esp
f0101cf7:	50                   	push   %eax
f0101cf8:	e8 6b 38 00 00       	call   f0105568 <sched_kill_env>
f0101cfd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d05:	c9                   	leave  
f0101d06:	c3                   	ret    

f0101d07 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d07:	55                   	push   %ebp
f0101d08:	89 e5                	mov    %esp,%ebp
f0101d0a:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d0d:	83 ec 08             	sub    $0x8,%esp
f0101d10:	ff 75 0c             	pushl  0xc(%ebp)
f0101d13:	ff 75 08             	pushl  0x8(%ebp)
f0101d16:	e8 0a fd ff ff       	call   f0101a25 <CreateEnv>
f0101d1b:	83 c4 10             	add    $0x10,%esp
f0101d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d25:	75 07                	jne    f0101d2e <commnad_load_env+0x27>
		return 0 ;
f0101d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d2c:	eb 2a                	jmp    f0101d58 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d2e:	83 ec 0c             	sub    $0xc,%esp
f0101d31:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d34:	e8 f4 33 00 00       	call   f010512d <sched_new_env>
f0101d39:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d42:	83 ec 08             	sub    $0x8,%esp
f0101d45:	50                   	push   %eax
f0101d46:	68 aa 46 13 f0       	push   $0xf01346aa
f0101d4b:	e8 32 ef ff ff       	call   f0100c82 <cprintf>
f0101d50:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d58:	c9                   	leave  
f0101d59:	c3                   	ret    

f0101d5a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101d5a:	55                   	push   %ebp
f0101d5b:	89 e5                	mov    %esp,%ebp
f0101d5d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101d60:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101d67:	00 00 00 
	sched_run_all();
f0101d6a:	e8 06 30 00 00       	call   f0104d75 <sched_run_all>

	return 0 ;
f0101d6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d74:	c9                   	leave  
f0101d75:	c3                   	ret    

f0101d76 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101d76:	55                   	push   %ebp
f0101d77:	89 e5                	mov    %esp,%ebp
f0101d79:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101d7c:	e8 ea 2d 00 00       	call   f0104b6b <sched_print_all>

	return 0 ;
f0101d81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d86:	c9                   	leave  
f0101d87:	c3                   	ret    

f0101d88 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101d88:	55                   	push   %ebp
f0101d89:	89 e5                	mov    %esp,%ebp
f0101d8b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101d8e:	e8 55 30 00 00       	call   f0104de8 <sched_kill_all>

	return 0 ;
f0101d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d98:	c9                   	leave  
f0101d99:	c3                   	ret    

f0101d9a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101d9a:	55                   	push   %ebp
f0101d9b:	89 e5                	mov    %esp,%ebp
f0101d9d:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101da0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101da4:	7f 1a                	jg     f0101dc0 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101da6:	83 ec 0c             	sub    $0xc,%esp
f0101da9:	68 c0 46 13 f0       	push   $0xf01346c0
f0101dae:	e8 cf ee ff ff       	call   f0100c82 <cprintf>
f0101db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbb:	e9 83 00 00 00       	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101dc3:	83 c0 04             	add    $0x4,%eax
f0101dc6:	8b 00                	mov    (%eax),%eax
f0101dc8:	83 ec 04             	sub    $0x4,%esp
f0101dcb:	6a 0a                	push   $0xa
f0101dcd:	6a 00                	push   $0x0
f0101dcf:	50                   	push   %eax
f0101dd0:	e8 0b f3 02 00       	call   f01310e0 <strtol>
f0101dd5:	83 c4 10             	add    $0x10,%esp
f0101dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101ddb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101ddf:	75 20                	jne    f0101e01 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101de1:	83 ec 0c             	sub    $0xc,%esp
f0101de4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101de7:	e8 80 bd 00 00       	call   f010db6c <setPageReplacmentAlgorithmLRU>
f0101dec:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101def:	83 ec 0c             	sub    $0xc,%esp
f0101df2:	68 20 47 13 f0       	push   $0xf0134720
f0101df7:	e8 86 ee ff ff       	call   f0100c82 <cprintf>
f0101dfc:	83 c4 10             	add    $0x10,%esp
f0101dff:	eb 3d                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e01:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e05:	75 20                	jne    f0101e27 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e07:	83 ec 0c             	sub    $0xc,%esp
f0101e0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e0d:	e8 5a bd 00 00       	call   f010db6c <setPageReplacmentAlgorithmLRU>
f0101e12:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e15:	83 ec 0c             	sub    $0xc,%esp
f0101e18:	68 64 47 13 f0       	push   $0xf0134764
f0101e1d:	e8 60 ee ff ff       	call   f0100c82 <cprintf>
f0101e22:	83 c4 10             	add    $0x10,%esp
f0101e25:	eb 17                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e27:	83 ec 0c             	sub    $0xc,%esp
f0101e2a:	68 a4 47 13 f0       	push   $0xf01347a4
f0101e2f:	e8 4e ee ff ff       	call   f0100c82 <cprintf>
f0101e34:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e37:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e3c:	eb 05                	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101e3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e43:	c9                   	leave  
f0101e44:	c3                   	ret    

f0101e45 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101e45:	55                   	push   %ebp
f0101e46:	89 e5                	mov    %esp,%ebp
f0101e48:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4e:	83 c0 04             	add    $0x4,%eax
f0101e51:	8b 00                	mov    (%eax),%eax
f0101e53:	83 ec 04             	sub    $0x4,%esp
f0101e56:	6a 0a                	push   $0xa
f0101e58:	6a 00                	push   $0x0
f0101e5a:	50                   	push   %eax
f0101e5b:	e8 80 f2 02 00       	call   f01310e0 <strtol>
f0101e60:	83 c4 10             	add    $0x10,%esp
f0101e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101e66:	83 ec 0c             	sub    $0xc,%esp
f0101e69:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e6c:	e8 6e bd 00 00       	call   f010dbdf <setPageReplacmentAlgorithmNchanceCLOCK>
f0101e71:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101e74:	83 ec 0c             	sub    $0xc,%esp
f0101e77:	68 f8 47 13 f0       	push   $0xf01347f8
f0101e7c:	e8 01 ee ff ff       	call   f0100c82 <cprintf>
f0101e81:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e89:	c9                   	leave  
f0101e8a:	c3                   	ret    

f0101e8b <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101e8b:	55                   	push   %ebp
f0101e8c:	89 e5                	mov    %esp,%ebp
f0101e8e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101e91:	e8 09 bd 00 00       	call   f010db9f <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101e96:	83 ec 0c             	sub    $0xc,%esp
f0101e99:	68 2c 48 13 f0       	push   $0xf013482c
f0101e9e:	e8 df ed ff ff       	call   f0100c82 <cprintf>
f0101ea3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eab:	c9                   	leave  
f0101eac:	c3                   	ret    

f0101ead <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101ead:	55                   	push   %ebp
f0101eae:	89 e5                	mov    %esp,%ebp
f0101eb0:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101eb3:	e8 f7 bc 00 00       	call   f010dbaf <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	68 58 48 13 f0       	push   $0xf0134858
f0101ec0:	e8 bd ed ff ff       	call   f0100c82 <cprintf>
f0101ec5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ec8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecd:	c9                   	leave  
f0101ece:	c3                   	ret    

f0101ecf <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101ecf:	55                   	push   %ebp
f0101ed0:	89 e5                	mov    %esp,%ebp
f0101ed2:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101ed5:	e8 e5 bc 00 00       	call   f010dbbf <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101eda:	83 ec 0c             	sub    $0xc,%esp
f0101edd:	68 80 48 13 f0       	push   $0xf0134880
f0101ee2:	e8 9b ed ff ff       	call   f0100c82 <cprintf>
f0101ee7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eef:	c9                   	leave  
f0101ef0:	c3                   	ret    

f0101ef1 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101ef1:	55                   	push   %ebp
f0101ef2:	89 e5                	mov    %esp,%ebp
f0101ef4:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101efa:	83 c0 04             	add    $0x4,%eax
f0101efd:	8b 00                	mov    (%eax),%eax
f0101eff:	83 ec 04             	sub    $0x4,%esp
f0101f02:	6a 0a                	push   $0xa
f0101f04:	6a 00                	push   $0x0
f0101f06:	50                   	push   %eax
f0101f07:	e8 d4 f1 02 00       	call   f01310e0 <strtol>
f0101f0c:	83 c4 10             	add    $0x10,%esp
f0101f0f:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f16:	83 ec 0c             	sub    $0xc,%esp
f0101f19:	50                   	push   %eax
f0101f1a:	e8 12 28 00 00       	call   f0104731 <sched_init_RR>
f0101f1f:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f22:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0101f27:	8a 00                	mov    (%eax),%al
f0101f29:	0f b6 c0             	movzbl %al,%eax
f0101f2c:	83 ec 08             	sub    $0x8,%esp
f0101f2f:	50                   	push   %eax
f0101f30:	68 b4 48 13 f0       	push   $0xf01348b4
f0101f35:	e8 48 ed ff ff       	call   f0100c82 <cprintf>
f0101f3a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f42:	c9                   	leave  
f0101f43:	c3                   	ret    

f0101f44 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101f44:	55                   	push   %ebp
f0101f45:	89 e5                	mov    %esp,%ebp
f0101f47:	53                   	push   %ebx
f0101f48:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f4e:	83 c0 04             	add    $0x4,%eax
f0101f51:	8b 00                	mov    (%eax),%eax
f0101f53:	83 ec 04             	sub    $0x4,%esp
f0101f56:	6a 0a                	push   $0xa
f0101f58:	6a 00                	push   $0x0
f0101f5a:	50                   	push   %eax
f0101f5b:	e8 80 f1 02 00       	call   f01310e0 <strtol>
f0101f60:	83 c4 10             	add    $0x10,%esp
f0101f63:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f66:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101f6d:	eb 2e                	jmp    f0101f9d <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f72:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f82:	01 d0                	add    %edx,%eax
f0101f84:	8b 00                	mov    (%eax),%eax
f0101f86:	83 ec 04             	sub    $0x4,%esp
f0101f89:	6a 0a                	push   $0xa
f0101f8b:	6a 00                	push   $0x0
f0101f8d:	50                   	push   %eax
f0101f8e:	e8 4d f1 02 00       	call   f01310e0 <strtol>
f0101f93:	83 c4 10             	add    $0x10,%esp
f0101f96:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f9a:	ff 45 f4             	incl   -0xc(%ebp)
f0101f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fa0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101fa3:	7c ca                	jl     f0101f6f <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101fa5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101fa9:	83 ec 08             	sub    $0x8,%esp
f0101fac:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101faf:	52                   	push   %edx
f0101fb0:	50                   	push   %eax
f0101fb1:	e8 06 28 00 00       	call   f01047bc <sched_init_MLFQ>
f0101fb6:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101fb9:	83 ec 0c             	sub    $0xc,%esp
f0101fbc:	68 ec 48 13 f0       	push   $0xf01348ec
f0101fc1:	e8 bc ec ff ff       	call   f0100c82 <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fd0:	eb 24                	jmp    f0101ff6 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0101fd2:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f0101fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdb:	01 d0                	add    %edx,%eax
f0101fdd:	8a 00                	mov    (%eax),%al
f0101fdf:	0f b6 c0             	movzbl %al,%eax
f0101fe2:	83 ec 08             	sub    $0x8,%esp
f0101fe5:	50                   	push   %eax
f0101fe6:	68 19 49 13 f0       	push   $0xf0134919
f0101feb:	e8 92 ec ff ff       	call   f0100c82 <cprintf>
f0101ff0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ff3:	ff 45 f0             	incl   -0x10(%ebp)
f0101ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0101ffb:	0f b6 c0             	movzbl %al,%eax
f0101ffe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102001:	7f cf                	jg     f0101fd2 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102003:	83 ec 0c             	sub    $0xc,%esp
f0102006:	68 a1 42 13 f0       	push   $0xf01342a1
f010200b:	e8 72 ec ff ff       	call   f0100c82 <cprintf>
f0102010:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102018:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102023:	e8 8d 23 00 00       	call   f01043b5 <isSchedMethodMLFQ>
f0102028:	85 c0                	test   %eax,%eax
f010202a:	74 5c                	je     f0102088 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010202c:	83 ec 0c             	sub    $0xc,%esp
f010202f:	68 20 49 13 f0       	push   $0xf0134920
f0102034:	e8 49 ec ff ff       	call   f0100c82 <cprintf>
f0102039:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010203c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102043:	eb 24                	jmp    f0102069 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102045:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f010204b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010204e:	01 d0                	add    %edx,%eax
f0102050:	8a 00                	mov    (%eax),%al
f0102052:	0f b6 c0             	movzbl %al,%eax
f0102055:	83 ec 08             	sub    $0x8,%esp
f0102058:	50                   	push   %eax
f0102059:	68 19 49 13 f0       	push   $0xf0134919
f010205e:	e8 1f ec ff ff       	call   f0100c82 <cprintf>
f0102063:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102066:	ff 45 f4             	incl   -0xc(%ebp)
f0102069:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010206e:	0f b6 c0             	movzbl %al,%eax
f0102071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102074:	7f cf                	jg     f0102045 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 a1 42 13 f0       	push   $0xf01342a1
f010207e:	e8 ff eb ff ff       	call   f0100c82 <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
f0102086:	eb 36                	jmp    f01020be <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102088:	e8 0e 23 00 00       	call   f010439b <isSchedMethodRR>
f010208d:	85 c0                	test   %eax,%eax
f010208f:	74 1d                	je     f01020ae <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102091:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0102096:	8a 00                	mov    (%eax),%al
f0102098:	0f b6 c0             	movzbl %al,%eax
f010209b:	83 ec 08             	sub    $0x8,%esp
f010209e:	50                   	push   %eax
f010209f:	68 54 49 13 f0       	push   $0xf0134954
f01020a4:	e8 d9 eb ff ff       	call   f0100c82 <cprintf>
f01020a9:	83 c4 10             	add    $0x10,%esp
f01020ac:	eb 10                	jmp    f01020be <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01020ae:	83 ec 0c             	sub    $0xc,%esp
f01020b1:	68 90 49 13 f0       	push   $0xf0134990
f01020b6:	e8 c7 eb ff ff       	call   f0100c82 <cprintf>
f01020bb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020c3:	c9                   	leave  
f01020c4:	c3                   	ret    

f01020c5 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01020c5:	55                   	push   %ebp
f01020c6:	89 e5                	mov    %esp,%ebp
f01020c8:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01020cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ce:	83 c0 04             	add    $0x4,%eax
f01020d1:	8b 00                	mov    (%eax),%eax
f01020d3:	83 ec 04             	sub    $0x4,%esp
f01020d6:	6a 0a                	push   $0xa
f01020d8:	6a 00                	push   $0x0
f01020da:	50                   	push   %eax
f01020db:	e8 00 f0 02 00       	call   f01310e0 <strtol>
f01020e0:	83 c4 10             	add    $0x10,%esp
f01020e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01020e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020e9:	0f b6 c0             	movzbl %al,%eax
f01020ec:	83 ec 0c             	sub    $0xc,%esp
f01020ef:	50                   	push   %eax
f01020f0:	e8 11 df 02 00       	call   f0130006 <chksch>
f01020f5:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01020f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01020fc:	75 12                	jne    f0102110 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01020fe:	83 ec 0c             	sub    $0xc,%esp
f0102101:	68 b8 49 13 f0       	push   $0xf01349b8
f0102106:	e8 77 eb ff ff       	call   f0100c82 <cprintf>
f010210b:	83 c4 10             	add    $0x10,%esp
f010210e:	eb 16                	jmp    f0102126 <command_sch_test+0x61>
	else if (status == 1)
f0102110:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102114:	75 10                	jne    f0102126 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102116:	83 ec 0c             	sub    $0xc,%esp
f0102119:	68 e0 49 13 f0       	push   $0xf01349e0
f010211e:	e8 5f eb ff ff       	call   f0100c82 <cprintf>
f0102123:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102126:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212b:	c9                   	leave  
f010212c:	c3                   	ret    

f010212d <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010212d:	55                   	push   %ebp
f010212e:	89 e5                	mov    %esp,%ebp
f0102130:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102133:	e8 d5 ba 00 00       	call   f010dc0d <isPageReplacmentAlgorithmCLOCK>
f0102138:	85 c0                	test   %eax,%eax
f010213a:	74 15                	je     f0102151 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f010213c:	83 ec 0c             	sub    $0xc,%esp
f010213f:	68 04 4a 13 f0       	push   $0xf0134a04
f0102144:	e8 39 eb ff ff       	call   f0100c82 <cprintf>
f0102149:	83 c4 10             	add    $0x10,%esp
f010214c:	e9 8c 00 00 00       	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102151:	83 ec 0c             	sub    $0xc,%esp
f0102154:	6a 01                	push   $0x1
f0102156:	e8 9c ba 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f010215b:	83 c4 10             	add    $0x10,%esp
f010215e:	85 c0                	test   %eax,%eax
f0102160:	74 12                	je     f0102174 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102162:	83 ec 0c             	sub    $0xc,%esp
f0102165:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010216a:	e8 13 eb ff ff       	call   f0100c82 <cprintf>
f010216f:	83 c4 10             	add    $0x10,%esp
f0102172:	eb 69                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102174:	83 ec 0c             	sub    $0xc,%esp
f0102177:	6a 02                	push   $0x2
f0102179:	e8 79 ba 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f010217e:	83 c4 10             	add    $0x10,%esp
f0102181:	85 c0                	test   %eax,%eax
f0102183:	74 12                	je     f0102197 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102185:	83 ec 0c             	sub    $0xc,%esp
f0102188:	68 6c 4a 13 f0       	push   $0xf0134a6c
f010218d:	e8 f0 ea ff ff       	call   f0100c82 <cprintf>
f0102192:	83 c4 10             	add    $0x10,%esp
f0102195:	eb 46                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102197:	e8 8c ba 00 00       	call   f010dc28 <isPageReplacmentAlgorithmFIFO>
f010219c:	85 c0                	test   %eax,%eax
f010219e:	74 12                	je     f01021b2 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01021a0:	83 ec 0c             	sub    $0xc,%esp
f01021a3:	68 a8 4a 13 f0       	push   $0xf0134aa8
f01021a8:	e8 d5 ea ff ff       	call   f0100c82 <cprintf>
f01021ad:	83 c4 10             	add    $0x10,%esp
f01021b0:	eb 2b                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01021b2:	e8 8c ba 00 00       	call   f010dc43 <isPageReplacmentAlgorithmModifiedCLOCK>
f01021b7:	85 c0                	test   %eax,%eax
f01021b9:	74 12                	je     f01021cd <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01021bb:	83 ec 0c             	sub    $0xc,%esp
f01021be:	68 cc 4a 13 f0       	push   $0xf0134acc
f01021c3:	e8 ba ea ff ff       	call   f0100c82 <cprintf>
f01021c8:	83 c4 10             	add    $0x10,%esp
f01021cb:	eb 10                	jmp    f01021dd <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01021cd:	83 ec 0c             	sub    $0xc,%esp
f01021d0:	68 fc 4a 13 f0       	push   $0xf0134afc
f01021d5:	e8 a8 ea ff ff       	call   f0100c82 <cprintf>
f01021da:	83 c4 10             	add    $0x10,%esp

	return 0;
f01021dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021e2:	c9                   	leave  
f01021e3:	c3                   	ret    

f01021e4 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01021e4:	55                   	push   %ebp
f01021e5:	89 e5                	mov    %esp,%ebp
f01021e7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01021ea:	e8 18 ed ff ff       	call   f0100f07 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01021ef:	83 ec 0c             	sub    $0xc,%esp
f01021f2:	68 28 4b 13 f0       	push   $0xf0134b28
f01021f7:	e8 86 ea ff ff       	call   f0100c82 <cprintf>
f01021fc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102204:	c9                   	leave  
f0102205:	c3                   	ret    

f0102206 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102206:	55                   	push   %ebp
f0102207:	89 e5                	mov    %esp,%ebp
f0102209:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010220c:	e8 06 ed ff ff       	call   f0100f17 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 58 4b 13 f0       	push   $0xf0134b58
f0102219:	e8 64 ea ff ff       	call   f0100c82 <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102226:	c9                   	leave  
f0102227:	c3                   	ret    

f0102228 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102228:	55                   	push   %ebp
f0102229:	89 e5                	mov    %esp,%ebp
f010222b:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010222e:	e8 f4 ec ff ff       	call   f0100f27 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102233:	83 ec 0c             	sub    $0xc,%esp
f0102236:	68 88 4b 13 f0       	push   $0xf0134b88
f010223b:	e8 42 ea ff ff       	call   f0100c82 <cprintf>
f0102240:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102250:	e8 e2 ec ff ff       	call   f0100f37 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 b8 4b 13 f0       	push   $0xf0134bb8
f010225d:	e8 20 ea ff ff       	call   f0100c82 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102272:	e8 d0 ec ff ff       	call   f0100f47 <isUHeapPlacementStrategyFIRSTFIT>
f0102277:	84 c0                	test   %al,%al
f0102279:	74 12                	je     f010228d <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 e8 4b 13 f0       	push   $0xf0134be8
f0102283:	e8 fa e9 ff ff       	call   f0100c82 <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
f010228b:	eb 61                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010228d:	e8 ca ec ff ff       	call   f0100f5c <isUHeapPlacementStrategyBESTFIT>
f0102292:	84 c0                	test   %al,%al
f0102294:	74 12                	je     f01022a8 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	68 14 4c 13 f0       	push   $0xf0134c14
f010229e:	e8 df e9 ff ff       	call   f0100c82 <cprintf>
f01022a3:	83 c4 10             	add    $0x10,%esp
f01022a6:	eb 46                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01022a8:	e8 c4 ec ff ff       	call   f0100f71 <isUHeapPlacementStrategyNEXTFIT>
f01022ad:	84 c0                	test   %al,%al
f01022af:	74 12                	je     f01022c3 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01022b1:	83 ec 0c             	sub    $0xc,%esp
f01022b4:	68 40 4c 13 f0       	push   $0xf0134c40
f01022b9:	e8 c4 e9 ff ff       	call   f0100c82 <cprintf>
f01022be:	83 c4 10             	add    $0x10,%esp
f01022c1:	eb 2b                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01022c3:	e8 be ec ff ff       	call   f0100f86 <isUHeapPlacementStrategyWORSTFIT>
f01022c8:	84 c0                	test   %al,%al
f01022ca:	74 12                	je     f01022de <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01022cc:	83 ec 0c             	sub    $0xc,%esp
f01022cf:	68 6c 4c 13 f0       	push   $0xf0134c6c
f01022d4:	e8 a9 e9 ff ff       	call   f0100c82 <cprintf>
f01022d9:	83 c4 10             	add    $0x10,%esp
f01022dc:	eb 10                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01022de:	83 ec 0c             	sub    $0xc,%esp
f01022e1:	68 98 4c 13 f0       	push   $0xf0134c98
f01022e6:	e8 97 e9 ff ff       	call   f0100c82 <cprintf>
f01022eb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f3:	c9                   	leave  
f01022f4:	c3                   	ret    

f01022f5 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01022f5:	55                   	push   %ebp
f01022f6:	89 e5                	mov    %esp,%ebp
f01022f8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01022fb:	e8 4f eb ff ff       	call   f0100e4f <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102300:	83 ec 0c             	sub    $0xc,%esp
f0102303:	68 c4 4c 13 f0       	push   $0xf0134cc4
f0102308:	e8 75 e9 ff ff       	call   f0100c82 <cprintf>
f010230d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102310:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102315:	c9                   	leave  
f0102316:	c3                   	ret    

f0102317 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102317:	55                   	push   %ebp
f0102318:	89 e5                	mov    %esp,%ebp
f010231a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010231d:	e8 3d eb ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 c4 4c 13 f0       	push   $0xf0134cc4
f010232a:	e8 53 e9 ff ff       	call   f0100c82 <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102332:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102337:	c9                   	leave  
f0102338:	c3                   	ret    

f0102339 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010233f:	e8 2b eb ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102344:	83 ec 0c             	sub    $0xc,%esp
f0102347:	68 f8 4c 13 f0       	push   $0xf0134cf8
f010234c:	e8 31 e9 ff ff       	call   f0100c82 <cprintf>
f0102351:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102359:	c9                   	leave  
f010235a:	c3                   	ret    

f010235b <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010235b:	55                   	push   %ebp
f010235c:	89 e5                	mov    %esp,%ebp
f010235e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102361:	e8 19 eb ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102366:	83 ec 0c             	sub    $0xc,%esp
f0102369:	68 28 4d 13 f0       	push   $0xf0134d28
f010236e:	e8 0f e9 ff ff       	call   f0100c82 <cprintf>
f0102373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237b:	c9                   	leave  
f010237c:	c3                   	ret    

f010237d <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010237d:	55                   	push   %ebp
f010237e:	89 e5                	mov    %esp,%ebp
f0102380:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102383:	e8 07 eb ff ff       	call   f0100e8f <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102388:	83 ec 0c             	sub    $0xc,%esp
f010238b:	68 58 4d 13 f0       	push   $0xf0134d58
f0102390:	e8 ed e8 ff ff       	call   f0100c82 <cprintf>
f0102395:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010239d:	c9                   	leave  
f010239e:	c3                   	ret    

f010239f <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010239f:	55                   	push   %ebp
f01023a0:	89 e5                	mov    %esp,%ebp
f01023a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01023a5:	e8 f5 ea ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01023aa:	84 c0                	test   %al,%al
f01023ac:	74 12                	je     f01023c0 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 8c 4d 13 f0       	push   $0xf0134d8c
f01023b6:	e8 c7 e8 ff ff       	call   f0100c82 <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
f01023be:	eb 7c                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01023c0:	e8 ee ea ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01023c5:	84 c0                	test   %al,%al
f01023c7:	74 12                	je     f01023db <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01023c9:	83 ec 0c             	sub    $0xc,%esp
f01023cc:	68 c8 4d 13 f0       	push   $0xf0134dc8
f01023d1:	e8 ac e8 ff ff       	call   f0100c82 <cprintf>
f01023d6:	83 c4 10             	add    $0x10,%esp
f01023d9:	eb 61                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023db:	e8 e8 ea ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01023e0:	84 c0                	test   %al,%al
f01023e2:	74 12                	je     f01023f6 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 f8 4d 13 f0       	push   $0xf0134df8
f01023ec:	e8 91 e8 ff ff       	call   f0100c82 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
f01023f4:	eb 46                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01023f6:	e8 e2 ea ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f01023fb:	84 c0                	test   %al,%al
f01023fd:	74 12                	je     f0102411 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01023ff:	83 ec 0c             	sub    $0xc,%esp
f0102402:	68 24 4e 13 f0       	push   $0xf0134e24
f0102407:	e8 76 e8 ff ff       	call   f0100c82 <cprintf>
f010240c:	83 c4 10             	add    $0x10,%esp
f010240f:	eb 2b                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102411:	e8 dc ea ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f0102416:	84 c0                	test   %al,%al
f0102418:	74 12                	je     f010242c <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010241a:	83 ec 0c             	sub    $0xc,%esp
f010241d:	68 50 4e 13 f0       	push   $0xf0134e50
f0102422:	e8 5b e8 ff ff       	call   f0100c82 <cprintf>
f0102427:	83 c4 10             	add    $0x10,%esp
f010242a:	eb 10                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010242c:	83 ec 0c             	sub    $0xc,%esp
f010242f:	68 80 4e 13 f0       	push   $0xf0134e80
f0102434:	e8 49 e8 ff ff       	call   f0100c82 <cprintf>
f0102439:	83 c4 10             	add    $0x10,%esp

	return 0;
f010243c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102441:	c9                   	leave  
f0102442:	c3                   	ret    

f0102443 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102443:	55                   	push   %ebp
f0102444:	89 e5                	mov    %esp,%ebp
f0102446:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102449:	e8 6c b8 00 00       	call   f010dcba <isBufferingEnabled>
f010244e:	84 c0                	test   %al,%al
f0102450:	75 12                	jne    f0102464 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102452:	83 ec 0c             	sub    $0xc,%esp
f0102455:	68 b0 4e 13 f0       	push   $0xf0134eb0
f010245a:	e8 23 e8 ff ff       	call   f0100c82 <cprintf>
f010245f:	83 c4 10             	add    $0x10,%esp
f0102462:	eb 1d                	jmp    f0102481 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102464:	83 ec 0c             	sub    $0xc,%esp
f0102467:	6a 00                	push   $0x0
f0102469:	e8 26 b8 00 00       	call   f010dc94 <enableModifiedBuffer>
f010246e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102471:	83 ec 0c             	sub    $0xc,%esp
f0102474:	68 ec 4e 13 f0       	push   $0xf0134eec
f0102479:	e8 04 e8 ff ff       	call   f0100c82 <cprintf>
f010247e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102481:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102486:	c9                   	leave  
f0102487:	c3                   	ret    

f0102488 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102488:	55                   	push   %ebp
f0102489:	89 e5                	mov    %esp,%ebp
f010248b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010248e:	e8 27 b8 00 00       	call   f010dcba <isBufferingEnabled>
f0102493:	84 c0                	test   %al,%al
f0102495:	75 12                	jne    f01024a9 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102497:	83 ec 0c             	sub    $0xc,%esp
f010249a:	68 b0 4e 13 f0       	push   $0xf0134eb0
f010249f:	e8 de e7 ff ff       	call   f0100c82 <cprintf>
f01024a4:	83 c4 10             	add    $0x10,%esp
f01024a7:	eb 1d                	jmp    f01024c6 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01024a9:	83 ec 0c             	sub    $0xc,%esp
f01024ac:	6a 01                	push   $0x1
f01024ae:	e8 e1 b7 00 00       	call   f010dc94 <enableModifiedBuffer>
f01024b3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01024b6:	83 ec 0c             	sub    $0xc,%esp
f01024b9:	68 10 4f 13 f0       	push   $0xf0134f10
f01024be:	e8 bf e7 ff ff       	call   f0100c82 <cprintf>
f01024c3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cb:	c9                   	leave  
f01024cc:	c3                   	ret    

f01024cd <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01024cd:	55                   	push   %ebp
f01024ce:	89 e5                	mov    %esp,%ebp
f01024d0:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01024d3:	83 ec 0c             	sub    $0xc,%esp
f01024d6:	6a 00                	push   $0x0
f01024d8:	e8 cf b7 00 00       	call   f010dcac <enableBuffering>
f01024dd:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01024e0:	83 ec 0c             	sub    $0xc,%esp
f01024e3:	6a 00                	push   $0x0
f01024e5:	e8 aa b7 00 00       	call   f010dc94 <enableModifiedBuffer>
f01024ea:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01024ed:	83 ec 0c             	sub    $0xc,%esp
f01024f0:	68 30 4f 13 f0       	push   $0xf0134f30
f01024f5:	e8 88 e7 ff ff       	call   f0100c82 <cprintf>
f01024fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102502:	c9                   	leave  
f0102503:	c3                   	ret    

f0102504 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102504:	55                   	push   %ebp
f0102505:	89 e5                	mov    %esp,%ebp
f0102507:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	6a 01                	push   $0x1
f010250f:	e8 98 b7 00 00       	call   f010dcac <enableBuffering>
f0102514:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102517:	83 ec 0c             	sub    $0xc,%esp
f010251a:	6a 01                	push   $0x1
f010251c:	e8 73 b7 00 00       	call   f010dc94 <enableModifiedBuffer>
f0102521:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102524:	e8 a9 b7 00 00       	call   f010dcd2 <getModifiedBufferLength>
f0102529:	85 c0                	test   %eax,%eax
f010252b:	75 59                	jne    f0102586 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010252d:	83 ec 0c             	sub    $0xc,%esp
f0102530:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102535:	e8 48 e7 ff ff       	call   f0100c82 <cprintf>
f010253a:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010253d:	83 ec 08             	sub    $0x8,%esp
f0102540:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102543:	50                   	push   %eax
f0102544:	68 7c 4f 13 f0       	push   $0xf0134f7c
f0102549:	e8 2c e6 02 00       	call   f0130b7a <readline>
f010254e:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	6a 0a                	push   $0xa
f0102556:	6a 00                	push   $0x0
f0102558:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010255b:	50                   	push   %eax
f010255c:	e8 7f eb 02 00       	call   f01310e0 <strtol>
f0102561:	83 c4 10             	add    $0x10,%esp
f0102564:	83 ec 0c             	sub    $0xc,%esp
f0102567:	50                   	push   %eax
f0102568:	e8 57 b7 00 00       	call   f010dcc4 <setModifiedBufferLength>
f010256d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102570:	e8 5d b7 00 00       	call   f010dcd2 <getModifiedBufferLength>
f0102575:	83 ec 08             	sub    $0x8,%esp
f0102578:	50                   	push   %eax
f0102579:	68 a8 4f 13 f0       	push   $0xf0134fa8
f010257e:	e8 ff e6 ff ff       	call   f0100c82 <cprintf>
f0102583:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102586:	83 ec 0c             	sub    $0xc,%esp
f0102589:	68 cd 4f 13 f0       	push   $0xf0134fcd
f010258e:	e8 ef e6 ff ff       	call   f0100c82 <cprintf>
f0102593:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102596:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259b:	c9                   	leave  
f010259c:	c3                   	ret    

f010259d <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010259d:	55                   	push   %ebp
f010259e:	89 e5                	mov    %esp,%ebp
f01025a0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01025a3:	e8 12 b7 00 00       	call   f010dcba <isBufferingEnabled>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	75 12                	jne    f01025be <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01025ac:	83 ec 0c             	sub    $0xc,%esp
f01025af:	68 e8 4f 13 f0       	push   $0xf0134fe8
f01025b4:	e8 c9 e6 ff ff       	call   f0100c82 <cprintf>
f01025b9:	83 c4 10             	add    $0x10,%esp
f01025bc:	eb 19                	jmp    f01025d7 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01025be:	e8 df b6 00 00       	call   f010dca2 <isModifiedBufferEnabled>
f01025c3:	84 c0                	test   %al,%al
f01025c5:	75 10                	jne    f01025d7 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01025c7:	83 ec 0c             	sub    $0xc,%esp
f01025ca:	68 38 50 13 f0       	push   $0xf0135038
f01025cf:	e8 ae e6 ff ff       	call   f0100c82 <cprintf>
f01025d4:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01025d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025da:	83 c0 04             	add    $0x4,%eax
f01025dd:	8b 00                	mov    (%eax),%eax
f01025df:	83 ec 04             	sub    $0x4,%esp
f01025e2:	6a 0a                	push   $0xa
f01025e4:	6a 00                	push   $0x0
f01025e6:	50                   	push   %eax
f01025e7:	e8 f4 ea 02 00       	call   f01310e0 <strtol>
f01025ec:	83 c4 10             	add    $0x10,%esp
f01025ef:	83 ec 0c             	sub    $0xc,%esp
f01025f2:	50                   	push   %eax
f01025f3:	e8 cc b6 00 00       	call   f010dcc4 <setModifiedBufferLength>
f01025f8:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fb:	e8 d2 b6 00 00       	call   f010dcd2 <getModifiedBufferLength>
f0102600:	83 ec 08             	sub    $0x8,%esp
f0102603:	50                   	push   %eax
f0102604:	68 a8 4f 13 f0       	push   $0xf0134fa8
f0102609:	e8 74 e6 ff ff       	call   f0100c82 <cprintf>
f010260e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102611:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102616:	c9                   	leave  
f0102617:	c3                   	ret    

f0102618 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102618:	55                   	push   %ebp
f0102619:	89 e5                	mov    %esp,%ebp
f010261b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010261e:	e8 97 b6 00 00       	call   f010dcba <isBufferingEnabled>
f0102623:	84 c0                	test   %al,%al
f0102625:	75 12                	jne    f0102639 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102627:	83 ec 0c             	sub    $0xc,%esp
f010262a:	68 e8 4f 13 f0       	push   $0xf0134fe8
f010262f:	e8 4e e6 ff ff       	call   f0100c82 <cprintf>
f0102634:	83 c4 10             	add    $0x10,%esp
f0102637:	eb 19                	jmp    f0102652 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102639:	e8 64 b6 00 00       	call   f010dca2 <isModifiedBufferEnabled>
f010263e:	84 c0                	test   %al,%al
f0102640:	75 10                	jne    f0102652 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102642:	83 ec 0c             	sub    $0xc,%esp
f0102645:	68 38 50 13 f0       	push   $0xf0135038
f010264a:	e8 33 e6 ff ff       	call   f0100c82 <cprintf>
f010264f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102652:	e8 7b b6 00 00       	call   f010dcd2 <getModifiedBufferLength>
f0102657:	83 ec 08             	sub    $0x8,%esp
f010265a:	50                   	push   %eax
f010265b:	68 7e 50 13 f0       	push   $0xf013507e
f0102660:	e8 1d e6 ff ff       	call   f0100c82 <cprintf>
f0102665:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102668:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010266d:	c9                   	leave  
f010266e:	c3                   	ret    

f010266f <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010266f:	55                   	push   %ebp
f0102670:	89 e5                	mov    %esp,%ebp
f0102672:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102675:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f010267c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102680:	75 1b                	jne    f010269d <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102685:	83 c0 04             	add    $0x4,%eax
f0102688:	8b 00                	mov    (%eax),%eax
f010268a:	83 ec 04             	sub    $0x4,%esp
f010268d:	6a 0a                	push   $0xa
f010268f:	6a 00                	push   $0x0
f0102691:	50                   	push   %eax
f0102692:	e8 49 ea 02 00       	call   f01310e0 <strtol>
f0102697:	83 c4 10             	add    $0x10,%esp
f010269a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010269d:	e8 fd e7 ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01026a2:	84 c0                	test   %al,%al
f01026a4:	74 0a                	je     f01026b0 <command_test_kmalloc+0x41>
		test_kmalloc();
f01026a6:	e8 c4 4b 01 00       	call   f011726f <test_kmalloc>
f01026ab:	e9 e8 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01026b0:	e8 fe e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01026b5:	84 c0                	test   %al,%al
f01026b7:	74 44                	je     f01026fd <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01026b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026bd:	75 1a                	jne    f01026d9 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01026bf:	83 ec 0c             	sub    $0xc,%esp
f01026c2:	68 9c 50 13 f0       	push   $0xf013509c
f01026c7:	e8 b6 e5 ff ff       	call   f0100c82 <cprintf>
f01026cc:	83 c4 10             	add    $0x10,%esp
			return 0;
f01026cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01026d4:	e9 c4 00 00 00       	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01026d9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026dd:	75 0a                	jne    f01026e9 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01026df:	e8 14 9a 01 00       	call   f011c0f8 <test_kmalloc_firstfit1>
f01026e4:	e9 af 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01026e9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01026ed:	0f 85 a5 00 00 00    	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01026f3:	e8 a2 ad 01 00       	call   f011d49a <test_kmalloc_firstfit2>
f01026f8:	e9 9b 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01026fd:	e8 c6 e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102702:	84 c0                	test   %al,%al
f0102704:	74 44                	je     f010274a <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102706:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010270a:	75 17                	jne    f0102723 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010270c:	83 ec 0c             	sub    $0xc,%esp
f010270f:	68 ec 50 13 f0       	push   $0xf01350ec
f0102714:	e8 69 e5 ff ff       	call   f0100c82 <cprintf>
f0102719:	83 c4 10             	add    $0x10,%esp
			return 0;
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	eb 7a                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102723:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102727:	75 07                	jne    f0102730 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102729:	e8 41 4b 01 00       	call   f011726f <test_kmalloc>
f010272e:	eb 68                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102730:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102734:	75 07                	jne    f010273d <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102736:	e8 87 74 01 00       	call   f0119bc2 <test_kmalloc_bestfit1>
f010273b:	eb 5b                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f010273d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102741:	75 55                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102743:	e8 d0 86 01 00       	call   f011ae18 <test_kmalloc_bestfit2>
f0102748:	eb 4e                	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010274a:	e8 8e e7 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010274f:	84 c0                	test   %al,%al
f0102751:	74 37                	je     f010278a <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102753:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102757:	75 17                	jne    f0102770 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 3c 51 13 f0       	push   $0xf013513c
f0102761:	e8 1c e5 ff ff       	call   f0100c82 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	eb 2d                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102770:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102774:	75 07                	jne    f010277d <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102776:	e8 f4 4a 01 00       	call   f011726f <test_kmalloc>
f010277b:	eb 1b                	jmp    f0102798 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010277d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102781:	75 15                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102783:	e8 45 5d 01 00       	call   f01184cd <test_kmalloc_nextfit>
f0102788:	eb 0e                	jmp    f0102798 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010278a:	e8 63 e7 ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f010278f:	84 c0                	test   %al,%al
f0102791:	74 05                	je     f0102798 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102793:	e8 97 bb 01 00       	call   f011e32f <test_kmalloc_worstfit>
	return 0;
f0102798:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010279d:	c9                   	leave  
f010279e:	c3                   	ret    

f010279f <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010279f:	55                   	push   %ebp
f01027a0:	89 e5                	mov    %esp,%ebp
f01027a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01027a5:	e8 1e e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01027aa:	84 c0                	test   %al,%al
f01027ac:	75 09                	jne    f01027b7 <command_test_kfree+0x18>
f01027ae:	e8 00 e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01027b3:	84 c0                	test   %al,%al
f01027b5:	74 07                	je     f01027be <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01027b7:	e8 15 f3 01 00       	call   f0121ad1 <test_kfree_bestfirstfit>
f01027bc:	eb 05                	jmp    f01027c3 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01027be:	e8 bc d1 01 00       	call   f011f97f <test_kfree>
	}
	return 0;
f01027c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027c8:	c9                   	leave  
f01027c9:	c3                   	ret    

f01027ca <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01027ca:	55                   	push   %ebp
f01027cb:	89 e5                	mov    %esp,%ebp
f01027cd:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01027d0:	e8 f8 0c 02 00       	call   f01234cd <test_kheap_phys_addr>
	return 0;
f01027d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027da:	c9                   	leave  
f01027db:	c3                   	ret    

f01027dc <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01027dc:	55                   	push   %ebp
f01027dd:	89 e5                	mov    %esp,%ebp
f01027df:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01027e2:	e8 b6 21 02 00       	call   f012499d <test_kheap_virt_addr>
	return 0;
f01027e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027ec:	c9                   	leave  
f01027ed:	c3                   	ret    

f01027ee <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01027ee:	55                   	push   %ebp
f01027ef:	89 e5                	mov    %esp,%ebp
f01027f1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01027f4:	e8 81 36 02 00       	call   f0125e7a <test_three_creation_functions>
	return 0;
f01027f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027fe:	c9                   	leave  
f01027ff:	c3                   	ret    

f0102800 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102800:	55                   	push   %ebp
f0102801:	89 e5                	mov    %esp,%ebp
f0102803:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102806:	e8 d2 e6 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010280b:	84 c0                	test   %al,%al
f010280d:	74 07                	je     f0102816 <command_test_krealloc+0x16>
		test_krealloc();
f010280f:	e8 7d 90 02 00       	call   f012b891 <test_krealloc>
f0102814:	eb 0e                	jmp    f0102824 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102816:	e8 ad e6 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_krealloc+0x24>
		test_krealloc_BF();
f010281f:	e8 1d b0 02 00       	call   f012d841 <test_krealloc_BF>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102831:	e8 4e 36 01 00       	call   f0115e84 <test_priority_normal_and_higher>
	return 0;
f0102836:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010283b:	c9                   	leave  
f010283c:	c3                   	ret    

f010283d <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f010283d:	55                   	push   %ebp
f010283e:	89 e5                	mov    %esp,%ebp
f0102840:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102843:	e8 22 40 01 00       	call   f011686a <test_priority_normal_and_lower>
	return 0;
f0102848:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284d:	c9                   	leave  
f010284e:	c3                   	ret    

f010284f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010284f:	55                   	push   %ebp
f0102850:	89 e5                	mov    %esp,%ebp
f0102852:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102855:	e8 5a 38 02 00       	call   f01260b4 <test_kfreeall>
	return 0;
f010285a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285f:	c9                   	leave  
f0102860:	c3                   	ret    

f0102861 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102861:	55                   	push   %ebp
f0102862:	89 e5                	mov    %esp,%ebp
f0102864:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102867:	e8 34 4f 02 00       	call   f01277a0 <test_kexpand>
	return 0;
f010286c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102871:	c9                   	leave  
f0102872:	c3                   	ret    

f0102873 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102873:	55                   	push   %ebp
f0102874:	89 e5                	mov    %esp,%ebp
f0102876:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102879:	e8 a3 5c 02 00       	call   f0128521 <test_kshrink>
	return 0;
f010287e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102883:	c9                   	leave  
f0102884:	c3                   	ret    

f0102885 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102885:	55                   	push   %ebp
f0102886:	89 e5                	mov    %esp,%ebp
f0102888:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010288b:	e8 7e 6b 02 00       	call   f012940e <test_kfreelast>
	return 0;
f0102890:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102895:	c9                   	leave  
f0102896:	c3                   	ret    

f0102897 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102897:	55                   	push   %ebp
f0102898:	89 e5                	mov    %esp,%ebp
f010289a:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010289d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028a0:	83 c0 04             	add    $0x4,%eax
f01028a3:	8b 00                	mov    (%eax),%eax
f01028a5:	83 ec 04             	sub    $0x4,%esp
f01028a8:	6a 0a                	push   $0xa
f01028aa:	6a 00                	push   $0x0
f01028ac:	50                   	push   %eax
f01028ad:	e8 2e e8 02 00       	call   f01310e0 <strtol>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01028b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01028bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028c6:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01028cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028ce:	eb 3d                	jmp    f010290d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01028d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028d3:	05 5c 05 00 00       	add    $0x55c,%eax
f01028d8:	83 ec 08             	sub    $0x8,%esp
f01028db:	68 8a 51 13 f0       	push   $0xf013518a
f01028e0:	50                   	push   %eax
f01028e1:	e8 a6 e5 02 00       	call   f0130e8c <strcmp>
f01028e6:	83 c4 10             	add    $0x10,%esp
f01028e9:	85 c0                	test   %eax,%eax
f01028eb:	75 12                	jne    f01028ff <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01028ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028f1:	74 07                	je     f01028fa <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01028f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01028fa:	ff 45 f4             	incl   -0xc(%ebp)
f01028fd:	eb 06                	jmp    f0102905 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01028ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102903:	74 31                	je     f0102936 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102905:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010290a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010290d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102911:	74 08                	je     f010291b <command_test_sc_MLFQ+0x84>
f0102913:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102916:	8b 40 44             	mov    0x44(%eax),%eax
f0102919:	eb 05                	jmp    f0102920 <command_test_sc_MLFQ+0x89>
f010291b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102920:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0102925:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010292a:	85 c0                	test   %eax,%eax
f010292c:	75 a2                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f010292e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102932:	75 9c                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f0102934:	eb 01                	jmp    f0102937 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102936:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010293a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010293d:	75 12                	jne    f0102951 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010293f:	83 ec 0c             	sub    $0xc,%esp
f0102942:	68 94 51 13 f0       	push   $0xf0135194
f0102947:	e8 36 e3 ff ff       	call   f0100c82 <cprintf>
f010294c:	83 c4 10             	add    $0x10,%esp
f010294f:	eb 17                	jmp    f0102968 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102951:	83 ec 04             	sub    $0x4,%esp
f0102954:	68 cd 51 13 f0       	push   $0xf01351cd
f0102959:	68 8b 04 00 00       	push   $0x48b
f010295e:	68 19 42 13 f0       	push   $0xf0134219
f0102963:	e8 93 d8 ff ff       	call   f01001fb <_panic>
	}
	return 0;
f0102968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010296d:	c9                   	leave  
f010296e:	c3                   	ret    

f010296f <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010296f:	55                   	push   %ebp
f0102970:	89 e5                	mov    %esp,%ebp
f0102972:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102975:	e8 06 e2 00 00       	call   f0110b80 <TestAutoCompleteCommand>
f010297a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010297d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102982:	c9                   	leave  
f0102983:	c3                   	ret    

f0102984 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102984:	55                   	push   %ebp
f0102985:	89 e5                	mov    %esp,%ebp
f0102987:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010298a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010298e:	74 1a                	je     f01029aa <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102990:	83 ec 0c             	sub    $0xc,%esp
f0102993:	68 e4 51 13 f0       	push   $0xf01351e4
f0102998:	e8 e5 e2 ff ff       	call   f0100c82 <cprintf>
f010299d:	83 c4 10             	add    $0x10,%esp
		return 0;
f01029a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01029a5:	e9 82 01 00 00       	jmp    f0102b2c <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f01029aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029ad:	83 c0 04             	add    $0x4,%eax
f01029b0:	8b 00                	mov    (%eax),%eax
f01029b2:	83 ec 08             	sub    $0x8,%esp
f01029b5:	68 1c 52 13 f0       	push   $0xf013521c
f01029ba:	50                   	push   %eax
f01029bb:	e8 cc e4 02 00       	call   f0130e8c <strcmp>
f01029c0:	83 c4 10             	add    $0x10,%esp
f01029c3:	85 c0                	test   %eax,%eax
f01029c5:	75 0a                	jne    f01029d1 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01029c7:	e8 5e b7 00 00       	call   f010e12a <test_initialize_MemBlocksList>
f01029cc:	e9 56 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01029d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d4:	83 c0 04             	add    $0x4,%eax
f01029d7:	8b 00                	mov    (%eax),%eax
f01029d9:	83 ec 08             	sub    $0x8,%esp
f01029dc:	68 21 52 13 f0       	push   $0xf0135221
f01029e1:	50                   	push   %eax
f01029e2:	e8 a5 e4 02 00       	call   f0130e8c <strcmp>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	85 c0                	test   %eax,%eax
f01029ec:	75 0a                	jne    f01029f8 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01029ee:	e8 4b b8 00 00       	call   f010e23e <test_insert_sorted_allocList>
f01029f3:	e9 2f 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01029f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029fb:	83 c0 04             	add    $0x4,%eax
f01029fe:	8b 00                	mov    (%eax),%eax
f0102a00:	83 ec 08             	sub    $0x8,%esp
f0102a03:	68 27 52 13 f0       	push   $0xf0135227
f0102a08:	50                   	push   %eax
f0102a09:	e8 7e e4 02 00       	call   f0130e8c <strcmp>
f0102a0e:	83 c4 10             	add    $0x10,%esp
f0102a11:	85 c0                	test   %eax,%eax
f0102a13:	75 0a                	jne    f0102a1f <command_test_lists+0x9b>
	{
		test_find_block();
f0102a15:	e8 e2 bc 00 00       	call   f010e6fc <test_find_block>
f0102a1a:	e9 08 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a22:	83 c0 04             	add    $0x4,%eax
f0102a25:	8b 00                	mov    (%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	68 2c 52 13 f0       	push   $0xf013522c
f0102a2f:	50                   	push   %eax
f0102a30:	e8 57 e4 02 00       	call   f0130e8c <strcmp>
f0102a35:	83 c4 10             	add    $0x10,%esp
f0102a38:	85 c0                	test   %eax,%eax
f0102a3a:	74 1d                	je     f0102a59 <command_test_lists+0xd5>
f0102a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a3f:	83 c0 04             	add    $0x4,%eax
f0102a42:	8b 00                	mov    (%eax),%eax
f0102a44:	83 ec 08             	sub    $0x8,%esp
f0102a47:	68 2f 52 13 f0       	push   $0xf013522f
f0102a4c:	50                   	push   %eax
f0102a4d:	e8 3a e4 02 00       	call   f0130e8c <strcmp>
f0102a52:	83 c4 10             	add    $0x10,%esp
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	75 0a                	jne    f0102a63 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102a59:	e8 f9 bf 00 00       	call   f010ea57 <test_alloc_block_FF>
f0102a5e:	e9 c4 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a66:	83 c0 04             	add    $0x4,%eax
f0102a69:	8b 00                	mov    (%eax),%eax
f0102a6b:	83 ec 08             	sub    $0x8,%esp
f0102a6e:	68 32 52 13 f0       	push   $0xf0135232
f0102a73:	50                   	push   %eax
f0102a74:	e8 13 e4 02 00       	call   f0130e8c <strcmp>
f0102a79:	83 c4 10             	add    $0x10,%esp
f0102a7c:	85 c0                	test   %eax,%eax
f0102a7e:	74 1d                	je     f0102a9d <command_test_lists+0x119>
f0102a80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a83:	83 c0 04             	add    $0x4,%eax
f0102a86:	8b 00                	mov    (%eax),%eax
f0102a88:	83 ec 08             	sub    $0x8,%esp
f0102a8b:	68 35 52 13 f0       	push   $0xf0135235
f0102a90:	50                   	push   %eax
f0102a91:	e8 f6 e3 02 00       	call   f0130e8c <strcmp>
f0102a96:	83 c4 10             	add    $0x10,%esp
f0102a99:	85 c0                	test   %eax,%eax
f0102a9b:	75 0a                	jne    f0102aa7 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102a9d:	e8 33 c4 00 00       	call   f010eed5 <test_alloc_block_BF>
f0102aa2:	e9 80 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aaa:	83 c0 04             	add    $0x4,%eax
f0102aad:	8b 00                	mov    (%eax),%eax
f0102aaf:	83 ec 08             	sub    $0x8,%esp
f0102ab2:	68 38 52 13 f0       	push   $0xf0135238
f0102ab7:	50                   	push   %eax
f0102ab8:	e8 cf e3 02 00       	call   f0130e8c <strcmp>
f0102abd:	83 c4 10             	add    $0x10,%esp
f0102ac0:	85 c0                	test   %eax,%eax
f0102ac2:	74 1d                	je     f0102ae1 <command_test_lists+0x15d>
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 3b 52 13 f0       	push   $0xf013523b
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 b2 e3 02 00       	call   f0130e8c <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102ae1:	e8 76 ca 00 00       	call   f010f55c <test_alloc_block_NF>
f0102ae6:	eb 3f                	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 3e 52 13 f0       	push   $0xf013523e
f0102af8:	50                   	push   %eax
f0102af9:	e8 8e e3 02 00       	call   f0130e8c <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	74 1d                	je     f0102b22 <command_test_lists+0x19e>
f0102b05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b08:	83 c0 04             	add    $0x4,%eax
f0102b0b:	8b 00                	mov    (%eax),%eax
f0102b0d:	83 ec 08             	sub    $0x8,%esp
f0102b10:	68 44 52 13 f0       	push   $0xf0135244
f0102b15:	50                   	push   %eax
f0102b16:	e8 71 e3 02 00       	call   f0130e8c <strcmp>
f0102b1b:	83 c4 10             	add    $0x10,%esp
f0102b1e:	85 c0                	test   %eax,%eax
f0102b20:	75 05                	jne    f0102b27 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b22:	e8 c3 d2 00 00       	call   f010fdea <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b2c:	c9                   	leave  
f0102b2d:	c3                   	ret    

f0102b2e <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b2e:	55                   	push   %ebp
f0102b2f:	89 e5                	mov    %esp,%ebp
f0102b31:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b34:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b38:	74 1a                	je     f0102b54 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102b3a:	83 ec 0c             	sub    $0xc,%esp
f0102b3d:	68 4c 52 13 f0       	push   $0xf013524c
f0102b42:	e8 3b e1 ff ff       	call   f0100c82 <cprintf>
f0102b47:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b4f:	e9 e1 00 00 00       	jmp    f0102c35 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102b54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b57:	83 c0 04             	add    $0x4,%eax
f0102b5a:	8b 00                	mov    (%eax),%eax
f0102b5c:	83 ec 08             	sub    $0x8,%esp
f0102b5f:	68 85 52 13 f0       	push   $0xf0135285
f0102b64:	50                   	push   %eax
f0102b65:	e8 22 e3 02 00       	call   f0130e8c <strcmp>
f0102b6a:	83 c4 10             	add    $0x10,%esp
f0102b6d:	85 c0                	test   %eax,%eax
f0102b6f:	75 0a                	jne    f0102b7b <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102b71:	e8 9e ea 00 00       	call   f0111614 <test_cut_paste_pages>
f0102b76:	e9 b5 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7e:	83 c0 04             	add    $0x4,%eax
f0102b81:	8b 00                	mov    (%eax),%eax
f0102b83:	83 ec 08             	sub    $0x8,%esp
f0102b86:	68 8e 52 13 f0       	push   $0xf013528e
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 fb e2 02 00       	call   f0130e8c <strcmp>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	85 c0                	test   %eax,%eax
f0102b96:	75 0a                	jne    f0102ba2 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102b98:	e8 c2 f4 00 00       	call   f011205f <test_copy_paste_chunk>
f0102b9d:	e9 8e 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 04             	add    $0x4,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	83 ec 08             	sub    $0x8,%esp
f0102bad:	68 98 52 13 f0       	push   $0xf0135298
f0102bb2:	50                   	push   %eax
f0102bb3:	e8 d4 e2 02 00       	call   f0130e8c <strcmp>
f0102bb8:	83 c4 10             	add    $0x10,%esp
f0102bbb:	85 c0                	test   %eax,%eax
f0102bbd:	75 07                	jne    f0102bc6 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102bbf:	e8 99 05 01 00       	call   f011315d <test_share_chunk>
f0102bc4:	eb 6a                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc9:	83 c0 04             	add    $0x4,%eax
f0102bcc:	8b 00                	mov    (%eax),%eax
f0102bce:	83 ec 08             	sub    $0x8,%esp
f0102bd1:	68 9e 52 13 f0       	push   $0xf013529e
f0102bd6:	50                   	push   %eax
f0102bd7:	e8 b0 e2 02 00       	call   f0130e8c <strcmp>
f0102bdc:	83 c4 10             	add    $0x10,%esp
f0102bdf:	85 c0                	test   %eax,%eax
f0102be1:	75 07                	jne    f0102bea <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102be3:	e8 9d 0f 01 00       	call   f0113b85 <test_allocate_chunk>
f0102be8:	eb 46                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102bea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bed:	83 c0 04             	add    $0x4,%eax
f0102bf0:	8b 00                	mov    (%eax),%eax
f0102bf2:	83 ec 08             	sub    $0x8,%esp
f0102bf5:	68 a7 52 13 f0       	push   $0xf01352a7
f0102bfa:	50                   	push   %eax
f0102bfb:	e8 8c e2 02 00       	call   f0130e8c <strcmp>
f0102c00:	83 c4 10             	add    $0x10,%esp
f0102c03:	85 c0                	test   %eax,%eax
f0102c05:	75 07                	jne    f0102c0e <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c07:	e8 28 18 01 00       	call   f0114434 <test_calculate_required_frames>
f0102c0c:	eb 22                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c11:	83 c0 04             	add    $0x4,%eax
f0102c14:	8b 00                	mov    (%eax),%eax
f0102c16:	83 ec 08             	sub    $0x8,%esp
f0102c19:	68 b6 52 13 f0       	push   $0xf01352b6
f0102c1e:	50                   	push   %eax
f0102c1f:	e8 68 e2 02 00       	call   f0130e8c <strcmp>
f0102c24:	83 c4 10             	add    $0x10,%esp
f0102c27:	85 c0                	test   %eax,%eax
f0102c29:	75 05                	jne    f0102c30 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c2b:	e8 78 20 01 00       	call   f0114ca8 <test_calculate_allocated_space>
	}
	return 0;
f0102c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c35:	c9                   	leave  
f0102c36:	c3                   	ret    

f0102c37 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102c37:	55                   	push   %ebp
f0102c38:	89 e5                	mov    %esp,%ebp
f0102c3a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102c3d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c41:	74 1a                	je     f0102c5d <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102c43:	83 ec 0c             	sub    $0xc,%esp
f0102c46:	68 c8 52 13 f0       	push   $0xf01352c8
f0102c4b:	e8 32 e0 ff ff       	call   f0100c82 <cprintf>
f0102c50:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c53:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c58:	e9 e1 00 00 00       	jmp    f0102d3e <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c60:	83 c0 04             	add    $0x4,%eax
f0102c63:	8b 00                	mov    (%eax),%eax
f0102c65:	83 ec 08             	sub    $0x8,%esp
f0102c68:	68 fe 52 13 f0       	push   $0xf01352fe
f0102c6d:	50                   	push   %eax
f0102c6e:	e8 19 e2 02 00       	call   f0130e8c <strcmp>
f0102c73:	83 c4 10             	add    $0x10,%esp
f0102c76:	85 c0                	test   %eax,%eax
f0102c78:	75 0a                	jne    f0102c84 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102c7a:	e8 86 e0 00 00       	call   f0110d05 <test_pt_set_page_permissions>
f0102c7f:	e9 b5 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 04             	add    $0x4,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	68 06 53 13 f0       	push   $0xf0135306
f0102c94:	50                   	push   %eax
f0102c95:	e8 f2 e1 02 00       	call   f0130e8c <strcmp>
f0102c9a:	83 c4 10             	add    $0x10,%esp
f0102c9d:	85 c0                	test   %eax,%eax
f0102c9f:	75 0a                	jne    f0102cab <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102ca1:	e8 c2 e2 00 00       	call   f0110f68 <test_pt_set_page_permissions_invalid_va>
f0102ca6:	e9 8e 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102cab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cae:	83 c0 04             	add    $0x4,%eax
f0102cb1:	8b 00                	mov    (%eax),%eax
f0102cb3:	83 ec 08             	sub    $0x8,%esp
f0102cb6:	68 0e 53 13 f0       	push   $0xf013530e
f0102cbb:	50                   	push   %eax
f0102cbc:	e8 cb e1 02 00       	call   f0130e8c <strcmp>
f0102cc1:	83 c4 10             	add    $0x10,%esp
f0102cc4:	85 c0                	test   %eax,%eax
f0102cc6:	75 07                	jne    f0102ccf <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102cc8:	e8 e4 e2 00 00       	call   f0110fb1 <test_pt_get_page_permissions>
f0102ccd:	eb 6a                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ccf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd2:	83 c0 04             	add    $0x4,%eax
f0102cd5:	8b 00                	mov    (%eax),%eax
f0102cd7:	83 ec 08             	sub    $0x8,%esp
f0102cda:	68 16 53 13 f0       	push   $0xf0135316
f0102cdf:	50                   	push   %eax
f0102ce0:	e8 a7 e1 02 00       	call   f0130e8c <strcmp>
f0102ce5:	83 c4 10             	add    $0x10,%esp
f0102ce8:	85 c0                	test   %eax,%eax
f0102cea:	75 07                	jne    f0102cf3 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102cec:	e8 04 e4 00 00       	call   f01110f5 <test_pt_clear_page_table_entry>
f0102cf1:	eb 46                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf6:	83 c0 04             	add    $0x4,%eax
f0102cf9:	8b 00                	mov    (%eax),%eax
f0102cfb:	83 ec 08             	sub    $0x8,%esp
f0102cfe:	68 1d 53 13 f0       	push   $0xf013531d
f0102d03:	50                   	push   %eax
f0102d04:	e8 83 e1 02 00       	call   f0130e8c <strcmp>
f0102d09:	83 c4 10             	add    $0x10,%esp
f0102d0c:	85 c0                	test   %eax,%eax
f0102d0e:	75 07                	jne    f0102d17 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d10:	e8 39 e5 00 00       	call   f011124e <test_pt_clear_page_table_entry_invalid_va>
f0102d15:	eb 22                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d1a:	83 c0 04             	add    $0x4,%eax
f0102d1d:	8b 00                	mov    (%eax),%eax
f0102d1f:	83 ec 08             	sub    $0x8,%esp
f0102d22:	68 24 53 13 f0       	push   $0xf0135324
f0102d27:	50                   	push   %eax
f0102d28:	e8 5f e1 02 00       	call   f0130e8c <strcmp>
f0102d2d:	83 c4 10             	add    $0x10,%esp
f0102d30:	85 c0                	test   %eax,%eax
f0102d32:	75 05                	jne    f0102d39 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d34:	e8 4d e5 00 00       	call   f0111286 <test_virtual_to_physical>
	}
	return 0;
f0102d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d3e:	c9                   	leave  
f0102d3f:	c3                   	ret    

f0102d40 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102d40:	55                   	push   %ebp
f0102d41:	89 e5                	mov    %esp,%ebp
f0102d43:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102d46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d49:	83 c0 08             	add    $0x8,%eax
f0102d4c:	8b 00                	mov    (%eax),%eax
f0102d4e:	83 ec 08             	sub    $0x8,%esp
f0102d51:	68 28 53 13 f0       	push   $0xf0135328
f0102d56:	50                   	push   %eax
f0102d57:	e8 30 e1 02 00       	call   f0130e8c <strcmp>
f0102d5c:	83 c4 10             	add    $0x10,%esp
f0102d5f:	85 c0                	test   %eax,%eax
f0102d61:	75 20                	jne    f0102d83 <command_test_kheap+0x43>
f0102d63:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102d67:	74 1a                	je     f0102d83 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102d69:	83 ec 0c             	sub    $0xc,%esp
f0102d6c:	68 30 53 13 f0       	push   $0xf0135330
f0102d71:	e8 0c df ff ff       	call   f0100c82 <cprintf>
f0102d76:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d7e:	e9 33 03 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d86:	83 c0 08             	add    $0x8,%eax
f0102d89:	8b 00                	mov    (%eax),%eax
f0102d8b:	83 ec 08             	sub    $0x8,%esp
f0102d8e:	68 28 53 13 f0       	push   $0xf0135328
f0102d93:	50                   	push   %eax
f0102d94:	e8 f3 e0 02 00       	call   f0130e8c <strcmp>
f0102d99:	83 c4 10             	add    $0x10,%esp
f0102d9c:	85 c0                	test   %eax,%eax
f0102d9e:	74 20                	je     f0102dc0 <command_test_kheap+0x80>
f0102da0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da4:	74 1a                	je     f0102dc0 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102da6:	83 ec 0c             	sub    $0xc,%esp
f0102da9:	68 80 53 13 f0       	push   $0xf0135380
f0102dae:	e8 cf de ff ff       	call   f0100c82 <cprintf>
f0102db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbb:	e9 f6 02 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dc3:	83 c0 04             	add    $0x4,%eax
f0102dc6:	8b 00                	mov    (%eax),%eax
f0102dc8:	83 ec 08             	sub    $0x8,%esp
f0102dcb:	68 2c 52 13 f0       	push   $0xf013522c
f0102dd0:	50                   	push   %eax
f0102dd1:	e8 b6 e0 02 00       	call   f0130e8c <strcmp>
f0102dd6:	83 c4 10             	add    $0x10,%esp
f0102dd9:	85 c0                	test   %eax,%eax
f0102ddb:	74 1d                	je     f0102dfa <command_test_kheap+0xba>
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 04             	add    $0x4,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 2f 52 13 f0       	push   $0xf013522f
f0102ded:	50                   	push   %eax
f0102dee:	e8 99 e0 02 00       	call   f0130e8c <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 1a                	jne    f0102e14 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102dfa:	e8 60 e0 ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102dff:	83 ec 0c             	sub    $0xc,%esp
f0102e02:	68 c8 4d 13 f0       	push   $0xf0134dc8
f0102e07:	e8 76 de ff ff       	call   f0100c82 <cprintf>
f0102e0c:	83 c4 10             	add    $0x10,%esp
f0102e0f:	e9 a0 00 00 00       	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e17:	83 c0 04             	add    $0x4,%eax
f0102e1a:	8b 00                	mov    (%eax),%eax
f0102e1c:	83 ec 08             	sub    $0x8,%esp
f0102e1f:	68 32 52 13 f0       	push   $0xf0135232
f0102e24:	50                   	push   %eax
f0102e25:	e8 62 e0 02 00       	call   f0130e8c <strcmp>
f0102e2a:	83 c4 10             	add    $0x10,%esp
f0102e2d:	85 c0                	test   %eax,%eax
f0102e2f:	74 1d                	je     f0102e4e <command_test_kheap+0x10e>
f0102e31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e34:	83 c0 04             	add    $0x4,%eax
f0102e37:	8b 00                	mov    (%eax),%eax
f0102e39:	83 ec 08             	sub    $0x8,%esp
f0102e3c:	68 35 52 13 f0       	push   $0xf0135235
f0102e41:	50                   	push   %eax
f0102e42:	e8 45 e0 02 00       	call   f0130e8c <strcmp>
f0102e47:	83 c4 10             	add    $0x10,%esp
f0102e4a:	85 c0                	test   %eax,%eax
f0102e4c:	75 17                	jne    f0102e65 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102e4e:	e8 1c e0 ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102e53:	83 ec 0c             	sub    $0xc,%esp
f0102e56:	68 f8 4d 13 f0       	push   $0xf0134df8
f0102e5b:	e8 22 de ff ff       	call   f0100c82 <cprintf>
f0102e60:	83 c4 10             	add    $0x10,%esp
f0102e63:	eb 4f                	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102e65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e68:	83 c0 04             	add    $0x4,%eax
f0102e6b:	8b 00                	mov    (%eax),%eax
f0102e6d:	83 ec 08             	sub    $0x8,%esp
f0102e70:	68 38 52 13 f0       	push   $0xf0135238
f0102e75:	50                   	push   %eax
f0102e76:	e8 11 e0 02 00       	call   f0130e8c <strcmp>
f0102e7b:	83 c4 10             	add    $0x10,%esp
f0102e7e:	85 c0                	test   %eax,%eax
f0102e80:	74 1d                	je     f0102e9f <command_test_kheap+0x15f>
f0102e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e85:	83 c0 04             	add    $0x4,%eax
f0102e88:	8b 00                	mov    (%eax),%eax
f0102e8a:	83 ec 08             	sub    $0x8,%esp
f0102e8d:	68 3b 52 13 f0       	push   $0xf013523b
f0102e92:	50                   	push   %eax
f0102e93:	e8 f4 df 02 00       	call   f0130e8c <strcmp>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	85 c0                	test   %eax,%eax
f0102e9d:	75 15                	jne    f0102eb4 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102e9f:	e8 db df ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102ea4:	83 ec 0c             	sub    $0xc,%esp
f0102ea7:	68 24 4e 13 f0       	push   $0xf0134e24
f0102eac:	e8 d1 dd ff ff       	call   f0100c82 <cprintf>
f0102eb1:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eb7:	83 c0 08             	add    $0x8,%eax
f0102eba:	8b 00                	mov    (%eax),%eax
f0102ebc:	83 ec 08             	sub    $0x8,%esp
f0102ebf:	68 28 53 13 f0       	push   $0xf0135328
f0102ec4:	50                   	push   %eax
f0102ec5:	e8 c2 df 02 00       	call   f0130e8c <strcmp>
f0102eca:	83 c4 10             	add    $0x10,%esp
f0102ecd:	85 c0                	test   %eax,%eax
f0102ecf:	0f 85 13 01 00 00    	jne    f0102fe8 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ed8:	83 c0 0c             	add    $0xc,%eax
f0102edb:	8b 00                	mov    (%eax),%eax
f0102edd:	83 ec 04             	sub    $0x4,%esp
f0102ee0:	6a 0a                	push   $0xa
f0102ee2:	6a 00                	push   $0x0
f0102ee4:	50                   	push   %eax
f0102ee5:	e8 f6 e1 02 00       	call   f01310e0 <strtol>
f0102eea:	83 c4 10             	add    $0x10,%esp
f0102eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ef0:	e8 be df ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0102ef5:	84 c0                	test   %al,%al
f0102ef7:	74 54                	je     f0102f4d <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102ef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102efd:	75 1a                	jne    f0102f19 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102eff:	83 ec 0c             	sub    $0xc,%esp
f0102f02:	68 9c 50 13 f0       	push   $0xf013509c
f0102f07:	e8 76 dd ff ff       	call   f0100c82 <cprintf>
f0102f0c:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f0f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f14:	e9 9d 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f19:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f1d:	75 0a                	jne    f0102f29 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f1f:	e8 4b 43 01 00       	call   f011726f <test_kmalloc>
f0102f24:	e9 b5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f29:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f2d:	75 0a                	jne    f0102f39 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f2f:	e8 c4 91 01 00       	call   f011c0f8 <test_kmalloc_firstfit1>
f0102f34:	e9 a5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f39:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f3d:	0f 85 9b 00 00 00    	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102f43:	e8 52 a5 01 00       	call   f011d49a <test_kmalloc_firstfit2>
f0102f48:	e9 91 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102f4d:	e8 76 df ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102f52:	84 c0                	test   %al,%al
f0102f54:	74 47                	je     f0102f9d <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102f56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f5a:	75 1a                	jne    f0102f76 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102f5c:	83 ec 0c             	sub    $0xc,%esp
f0102f5f:	68 ec 50 13 f0       	push   $0xf01350ec
f0102f64:	e8 19 dd ff ff       	call   f0100c82 <cprintf>
f0102f69:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f71:	e9 40 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102f76:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f7a:	75 07                	jne    f0102f83 <command_test_kheap+0x243>
				test_kmalloc();
f0102f7c:	e8 ee 42 01 00       	call   f011726f <test_kmalloc>
f0102f81:	eb 5b                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f83:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f87:	75 07                	jne    f0102f90 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102f89:	e8 34 6c 01 00       	call   f0119bc2 <test_kmalloc_bestfit1>
f0102f8e:	eb 4e                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f90:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f94:	75 48                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102f96:	e8 7d 7e 01 00       	call   f011ae18 <test_kmalloc_bestfit2>
f0102f9b:	eb 41                	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102f9d:	e8 3b df ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f0102fa2:	84 c0                	test   %al,%al
f0102fa4:	74 38                	je     f0102fde <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102fa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102faa:	75 1a                	jne    f0102fc6 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102fac:	83 ec 0c             	sub    $0xc,%esp
f0102faf:	68 3c 51 13 f0       	push   $0xf013513c
f0102fb4:	e8 c9 dc ff ff       	call   f0100c82 <cprintf>
f0102fb9:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fc1:	e9 f0 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102fc6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fca:	75 07                	jne    f0102fd3 <command_test_kheap+0x293>
				test_kmalloc();
f0102fcc:	e8 9e 42 01 00       	call   f011726f <test_kmalloc>
f0102fd1:	eb 0b                	jmp    f0102fde <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102fd3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fd7:	75 05                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102fd9:	e8 ef 54 01 00       	call   f01184cd <test_kmalloc_nextfit>
		}
		return 0;
f0102fde:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fe3:	e9 ce 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102feb:	83 c0 08             	add    $0x8,%eax
f0102fee:	8b 00                	mov    (%eax),%eax
f0102ff0:	83 ec 08             	sub    $0x8,%esp
f0102ff3:	68 c4 53 13 f0       	push   $0xf01353c4
f0102ff8:	50                   	push   %eax
f0102ff9:	e8 8e de 02 00       	call   f0130e8c <strcmp>
f0102ffe:	83 c4 10             	add    $0x10,%esp
f0103001:	85 c0                	test   %eax,%eax
f0103003:	75 28                	jne    f010302d <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103005:	e8 be de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010300a:	84 c0                	test   %al,%al
f010300c:	75 09                	jne    f0103017 <command_test_kheap+0x2d7>
f010300e:	e8 a0 de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0103013:	84 c0                	test   %al,%al
f0103015:	74 07                	je     f010301e <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103017:	e8 b5 ea 01 00       	call   f0121ad1 <test_kfree_bestfirstfit>
f010301c:	eb 05                	jmp    f0103023 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010301e:	e8 5c c9 01 00       	call   f011f97f <test_kfree>
		}
		return 0;
f0103023:	b8 00 00 00 00       	mov    $0x0,%eax
f0103028:	e9 89 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010302d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103030:	83 c0 08             	add    $0x8,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 08             	sub    $0x8,%esp
f0103038:	68 ca 53 13 f0       	push   $0xf01353ca
f010303d:	50                   	push   %eax
f010303e:	e8 49 de 02 00       	call   f0130e8c <strcmp>
f0103043:	83 c4 10             	add    $0x10,%esp
f0103046:	85 c0                	test   %eax,%eax
f0103048:	75 0c                	jne    f0103056 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f010304a:	e8 7e 04 02 00       	call   f01234cd <test_kheap_phys_addr>
		return 0;
f010304f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103054:	eb 60                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0103056:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103059:	83 c0 08             	add    $0x8,%eax
f010305c:	8b 00                	mov    (%eax),%eax
f010305e:	83 ec 08             	sub    $0x8,%esp
f0103061:	68 d4 53 13 f0       	push   $0xf01353d4
f0103066:	50                   	push   %eax
f0103067:	e8 20 de 02 00       	call   f0130e8c <strcmp>
f010306c:	83 c4 10             	add    $0x10,%esp
f010306f:	85 c0                	test   %eax,%eax
f0103071:	75 0c                	jne    f010307f <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0103073:	e8 25 19 02 00       	call   f012499d <test_kheap_virt_addr>
		return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
f010307d:	eb 37                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010307f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103082:	83 c0 08             	add    $0x8,%eax
f0103085:	8b 00                	mov    (%eax),%eax
f0103087:	83 ec 08             	sub    $0x8,%esp
f010308a:	68 de 53 13 f0       	push   $0xf01353de
f010308f:	50                   	push   %eax
f0103090:	e8 f7 dd 02 00       	call   f0130e8c <strcmp>
f0103095:	83 c4 10             	add    $0x10,%esp
f0103098:	85 c0                	test   %eax,%eax
f010309a:	75 15                	jne    f01030b1 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f010309c:	e8 27 de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01030a1:	84 c0                	test   %al,%al
f01030a3:	74 05                	je     f01030aa <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f01030a5:	e8 97 a7 02 00       	call   f012d841 <test_krealloc_BF>
		}
		return 0;
f01030aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01030af:	eb 05                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	return 0;
f01030b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030b6:	c9                   	leave  
f01030b7:	c3                   	ret    

f01030b8 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01030b8:	55                   	push   %ebp
f01030b9:	89 e5                	mov    %esp,%ebp
f01030bb:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030be:	8b 45 08             	mov    0x8(%ebp),%eax
f01030c1:	05 00 14 00 00       	add    $0x1400,%eax
f01030c6:	c1 e0 03             	shl    $0x3,%eax
f01030c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030cc:	83 ec 04             	sub    $0x4,%esp
f01030cf:	6a 08                	push   $0x8
f01030d1:	ff 75 0c             	pushl  0xc(%ebp)
f01030d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01030d7:	e8 f7 e3 02 00       	call   f01314d3 <ide_read>
f01030dc:	83 c4 10             	add    $0x10,%esp
f01030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01030e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01030e5:	c9                   	leave  
f01030e6:	c3                   	ret    

f01030e7 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01030e7:	55                   	push   %ebp
f01030e8:	89 e5                	mov    %esp,%ebp
f01030ea:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f0:	05 00 14 00 00       	add    $0x1400,%eax
f01030f5:	c1 e0 03             	shl    $0x3,%eax
f01030f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030fb:	83 ec 04             	sub    $0x4,%esp
f01030fe:	6a 08                	push   $0x8
f0103100:	ff 75 0c             	pushl  0xc(%ebp)
f0103103:	ff 75 f4             	pushl  -0xc(%ebp)
f0103106:	e8 08 e5 02 00       	call   f0131613 <ide_write>
f010310b:	83 c4 10             	add    $0x10,%esp
f010310e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103111:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103115:	74 14                	je     f010312b <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103117:	83 ec 04             	sub    $0x4,%esp
f010311a:	68 e8 53 13 f0       	push   $0xf01353e8
f010311f:	6a 2e                	push   $0x2e
f0103121:	68 ff 53 13 f0       	push   $0xf01353ff
f0103126:	e8 d0 d0 ff ff       	call   f01001fb <_panic>
	return success;
f010312b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010312e:	c9                   	leave  
f010312f:	c3                   	ret    

f0103130 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103130:	55                   	push   %ebp
f0103131:	89 e5                	mov    %esp,%ebp
f0103133:	53                   	push   %ebx
f0103134:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103137:	c7 05 b8 7b 65 f0 00 	movl   $0x0,0xf0657bb8
f010313e:	00 00 00 
f0103141:	c7 05 bc 7b 65 f0 00 	movl   $0x0,0xf0657bbc
f0103148:	00 00 00 
f010314b:	c7 05 c4 7b 65 f0 00 	movl   $0x0,0xf0657bc4
f0103152:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103155:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010315c:	e9 e8 00 00 00       	jmp    f0103249 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103161:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010316a:	89 d0                	mov    %edx,%eax
f010316c:	01 c0                	add    %eax,%eax
f010316e:	01 d0                	add    %edx,%eax
f0103170:	c1 e0 03             	shl    $0x3,%eax
f0103173:	01 c8                	add    %ecx,%eax
f0103175:	83 ec 0c             	sub    $0xc,%esp
f0103178:	50                   	push   %eax
f0103179:	e8 82 36 00 00       	call   f0106800 <initialize_frame_info>
f010317e:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103181:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010318a:	89 d0                	mov    %edx,%eax
f010318c:	01 c0                	add    %eax,%eax
f010318e:	01 d0                	add    %edx,%eax
f0103190:	c1 e0 03             	shl    $0x3,%eax
f0103193:	01 c8                	add    %ecx,%eax
f0103195:	85 c0                	test   %eax,%eax
f0103197:	75 14                	jne    f01031ad <initialize_disk_page_file+0x7d>
f0103199:	83 ec 04             	sub    $0x4,%esp
f010319c:	68 1c 54 13 f0       	push   $0xf013541c
f01031a1:	6a 59                	push   $0x59
f01031a3:	68 ff 53 13 f0       	push   $0xf01353ff
f01031a8:	e8 4e d0 ff ff       	call   f01001fb <_panic>
f01031ad:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031b6:	89 d0                	mov    %edx,%eax
f01031b8:	01 c0                	add    %eax,%eax
f01031ba:	01 d0                	add    %edx,%eax
f01031bc:	c1 e0 03             	shl    $0x3,%eax
f01031bf:	01 c8                	add    %ecx,%eax
f01031c1:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031c7:	89 10                	mov    %edx,(%eax)
f01031c9:	8b 00                	mov    (%eax),%eax
f01031cb:	85 c0                	test   %eax,%eax
f01031cd:	74 1f                	je     f01031ee <initialize_disk_page_file+0xbe>
f01031cf:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031d5:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01031db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01031de:	89 c8                	mov    %ecx,%eax
f01031e0:	01 c0                	add    %eax,%eax
f01031e2:	01 c8                	add    %ecx,%eax
f01031e4:	c1 e0 03             	shl    $0x3,%eax
f01031e7:	01 d8                	add    %ebx,%eax
f01031e9:	89 42 04             	mov    %eax,0x4(%edx)
f01031ec:	eb 19                	jmp    f0103207 <initialize_disk_page_file+0xd7>
f01031ee:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f7:	89 d0                	mov    %edx,%eax
f01031f9:	01 c0                	add    %eax,%eax
f01031fb:	01 d0                	add    %edx,%eax
f01031fd:	c1 e0 03             	shl    $0x3,%eax
f0103200:	01 c8                	add    %ecx,%eax
f0103202:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f0103207:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f010320d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103210:	89 d0                	mov    %edx,%eax
f0103212:	01 c0                	add    %eax,%eax
f0103214:	01 d0                	add    %edx,%eax
f0103216:	c1 e0 03             	shl    $0x3,%eax
f0103219:	01 c8                	add    %ecx,%eax
f010321b:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103220:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103229:	89 d0                	mov    %edx,%eax
f010322b:	01 c0                	add    %eax,%eax
f010322d:	01 d0                	add    %edx,%eax
f010322f:	c1 e0 03             	shl    $0x3,%eax
f0103232:	01 c8                	add    %ecx,%eax
f0103234:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010323b:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f0103240:	40                   	inc    %eax
f0103241:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103246:	ff 45 f4             	incl   -0xc(%ebp)
f0103249:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103250:	0f 8e 0b ff ff ff    	jle    f0103161 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103256:	90                   	nop
f0103257:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010325a:	c9                   	leave  
f010325b:	c3                   	ret    

f010325c <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010325c:	55                   	push   %ebp
f010325d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010325f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103262:	8b 15 dc 7a 65 f0    	mov    0xf0657adc,%edx
f0103268:	29 d0                	sub    %edx,%eax
f010326a:	c1 f8 03             	sar    $0x3,%eax
f010326d:	89 c2                	mov    %eax,%edx
f010326f:	89 d0                	mov    %edx,%eax
f0103271:	c1 e0 02             	shl    $0x2,%eax
f0103274:	01 d0                	add    %edx,%eax
f0103276:	c1 e0 02             	shl    $0x2,%eax
f0103279:	01 d0                	add    %edx,%eax
f010327b:	c1 e0 02             	shl    $0x2,%eax
f010327e:	01 d0                	add    %edx,%eax
f0103280:	89 c1                	mov    %eax,%ecx
f0103282:	c1 e1 08             	shl    $0x8,%ecx
f0103285:	01 c8                	add    %ecx,%eax
f0103287:	89 c1                	mov    %eax,%ecx
f0103289:	c1 e1 10             	shl    $0x10,%ecx
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	01 c0                	add    %eax,%eax
f0103290:	01 d0                	add    %edx,%eax
}
f0103292:	5d                   	pop    %ebp
f0103293:	c3                   	ret    

f0103294 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103294:	55                   	push   %ebp
f0103295:	89 e5                	mov    %esp,%ebp
f0103297:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010329a:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f010329f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01032a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032a6:	75 0a                	jne    f01032b2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01032a8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01032ad:	e9 a7 00 00 00       	jmp    f0103359 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01032b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032b6:	75 14                	jne    f01032cc <allocate_disk_frame+0x38>
f01032b8:	83 ec 04             	sub    $0x4,%esp
f01032bb:	68 3f 54 13 f0       	push   $0xf013543f
f01032c0:	6a 78                	push   $0x78
f01032c2:	68 ff 53 13 f0       	push   $0xf01353ff
f01032c7:	e8 2f cf ff ff       	call   f01001fb <_panic>
f01032cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032cf:	8b 00                	mov    (%eax),%eax
f01032d1:	85 c0                	test   %eax,%eax
f01032d3:	74 10                	je     f01032e5 <allocate_disk_frame+0x51>
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8b 00                	mov    (%eax),%eax
f01032da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032dd:	8b 52 04             	mov    0x4(%edx),%edx
f01032e0:	89 50 04             	mov    %edx,0x4(%eax)
f01032e3:	eb 0b                	jmp    f01032f0 <allocate_disk_frame+0x5c>
f01032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e8:	8b 40 04             	mov    0x4(%eax),%eax
f01032eb:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01032f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032f3:	8b 40 04             	mov    0x4(%eax),%eax
f01032f6:	85 c0                	test   %eax,%eax
f01032f8:	74 0f                	je     f0103309 <allocate_disk_frame+0x75>
f01032fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032fd:	8b 40 04             	mov    0x4(%eax),%eax
f0103300:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103303:	8b 12                	mov    (%edx),%edx
f0103305:	89 10                	mov    %edx,(%eax)
f0103307:	eb 0a                	jmp    f0103313 <allocate_disk_frame+0x7f>
f0103309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010330c:	8b 00                	mov    (%eax),%eax
f010330e:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103316:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010331c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010331f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103326:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010332b:	48                   	dec    %eax
f010332c:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
	initialize_frame_info(ptr_frame_info);
f0103331:	83 ec 0c             	sub    $0xc,%esp
f0103334:	ff 75 f4             	pushl  -0xc(%ebp)
f0103337:	e8 c4 34 00 00       	call   f0106800 <initialize_frame_info>
f010333c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010333f:	83 ec 0c             	sub    $0xc,%esp
f0103342:	ff 75 f4             	pushl  -0xc(%ebp)
f0103345:	e8 12 ff ff ff       	call   f010325c <to_disk_frame_number>
f010334a:	83 c4 10             	add    $0x10,%esp
f010334d:	89 c2                	mov    %eax,%edx
f010334f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103352:	89 10                	mov    %edx,(%eax)
	return 0;
f0103354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103359:	c9                   	leave  
f010335a:	c3                   	ret    

f010335b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010335b:	55                   	push   %ebp
f010335c:	89 e5                	mov    %esp,%ebp
f010335e:	53                   	push   %ebx
f010335f:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103366:	0f 84 ca 00 00 00    	je     f0103436 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010336c:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103372:	8b 55 08             	mov    0x8(%ebp),%edx
f0103375:	89 d0                	mov    %edx,%eax
f0103377:	01 c0                	add    %eax,%eax
f0103379:	01 d0                	add    %edx,%eax
f010337b:	c1 e0 03             	shl    $0x3,%eax
f010337e:	01 c8                	add    %ecx,%eax
f0103380:	85 c0                	test   %eax,%eax
f0103382:	75 17                	jne    f010339b <free_disk_frame+0x40>
f0103384:	83 ec 04             	sub    $0x4,%esp
f0103387:	68 1c 54 13 f0       	push   $0xf013541c
f010338c:	68 85 00 00 00       	push   $0x85
f0103391:	68 ff 53 13 f0       	push   $0xf01353ff
f0103396:	e8 60 ce ff ff       	call   f01001fb <_panic>
f010339b:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01033a4:	89 d0                	mov    %edx,%eax
f01033a6:	01 c0                	add    %eax,%eax
f01033a8:	01 d0                	add    %edx,%eax
f01033aa:	c1 e0 03             	shl    $0x3,%eax
f01033ad:	01 c8                	add    %ecx,%eax
f01033af:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033b5:	89 10                	mov    %edx,(%eax)
f01033b7:	8b 00                	mov    (%eax),%eax
f01033b9:	85 c0                	test   %eax,%eax
f01033bb:	74 1f                	je     f01033dc <free_disk_frame+0x81>
f01033bd:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033c3:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01033c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01033cc:	89 c8                	mov    %ecx,%eax
f01033ce:	01 c0                	add    %eax,%eax
f01033d0:	01 c8                	add    %ecx,%eax
f01033d2:	c1 e0 03             	shl    $0x3,%eax
f01033d5:	01 d8                	add    %ebx,%eax
f01033d7:	89 42 04             	mov    %eax,0x4(%edx)
f01033da:	eb 19                	jmp    f01033f5 <free_disk_frame+0x9a>
f01033dc:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e5:	89 d0                	mov    %edx,%eax
f01033e7:	01 c0                	add    %eax,%eax
f01033e9:	01 d0                	add    %edx,%eax
f01033eb:	c1 e0 03             	shl    $0x3,%eax
f01033ee:	01 c8                	add    %ecx,%eax
f01033f0:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01033f5:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01033fe:	89 d0                	mov    %edx,%eax
f0103400:	01 c0                	add    %eax,%eax
f0103402:	01 d0                	add    %edx,%eax
f0103404:	c1 e0 03             	shl    $0x3,%eax
f0103407:	01 c8                	add    %ecx,%eax
f0103409:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f010340e:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103414:	8b 55 08             	mov    0x8(%ebp),%edx
f0103417:	89 d0                	mov    %edx,%eax
f0103419:	01 c0                	add    %eax,%eax
f010341b:	01 d0                	add    %edx,%eax
f010341d:	c1 e0 03             	shl    $0x3,%eax
f0103420:	01 c8                	add    %ecx,%eax
f0103422:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103429:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010342e:	40                   	inc    %eax
f010342f:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
f0103434:	eb 01                	jmp    f0103437 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103436:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103437:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010343a:	c9                   	leave  
f010343b:	c3                   	ret    

f010343c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010343c:	55                   	push   %ebp
f010343d:	89 e5                	mov    %esp,%ebp
f010343f:	53                   	push   %ebx
f0103440:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103443:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103446:	c1 e8 16             	shr    $0x16,%eax
f0103449:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103450:	8b 45 08             	mov    0x8(%ebp),%eax
f0103453:	01 d0                	add    %edx,%eax
f0103455:	8b 00                	mov    (%eax),%eax
f0103457:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010345a:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103461:	77 1d                	ja     f0103480 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f0103463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103466:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010346b:	83 ec 0c             	sub    $0xc,%esp
f010346e:	50                   	push   %eax
f010346f:	e8 91 45 00 00       	call   f0107a05 <kheap_virtual_address>
f0103474:	83 c4 10             	add    $0x10,%esp
f0103477:	89 c2                	mov    %eax,%edx
f0103479:	8b 45 14             	mov    0x14(%ebp),%eax
f010347c:	89 10                	mov    %edx,(%eax)
f010347e:	eb 44                	jmp    f01034c4 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103480:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103483:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103488:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010348b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010348e:	c1 e8 0c             	shr    $0xc,%eax
f0103491:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103494:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0103499:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010349c:	72 17                	jb     f01034b5 <get_disk_page_table+0x79>
f010349e:	ff 75 f0             	pushl  -0x10(%ebp)
f01034a1:	68 60 54 13 f0       	push   $0xf0135460
f01034a6:	68 92 00 00 00       	push   $0x92
f01034ab:	68 ff 53 13 f0       	push   $0xf01353ff
f01034b0:	e8 46 cd ff ff       	call   f01001fb <_panic>
f01034b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034b8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01034bd:	89 c2                	mov    %eax,%edx
f01034bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01034c2:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f01034c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034c8:	0f 85 80 00 00 00    	jne    f010354e <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f01034ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01034d2:	74 6a                	je     f010353e <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f01034d4:	83 ec 0c             	sub    $0xc,%esp
f01034d7:	68 00 10 00 00       	push   $0x1000
f01034dc:	e8 32 43 00 00       	call   f0107813 <kmalloc>
f01034e1:	83 c4 10             	add    $0x10,%esp
f01034e4:	89 c2                	mov    %eax,%edx
f01034e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01034e9:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01034eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ee:	8b 00                	mov    (%eax),%eax
f01034f0:	85 c0                	test   %eax,%eax
f01034f2:	75 07                	jne    f01034fb <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01034f4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01034f9:	eb 58                	jmp    f0103553 <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01034fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034fe:	c1 e8 16             	shr    $0x16,%eax
f0103501:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103508:	8b 45 08             	mov    0x8(%ebp),%eax
f010350b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010350e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103511:	8b 00                	mov    (%eax),%eax
f0103513:	83 ec 0c             	sub    $0xc,%esp
f0103516:	50                   	push   %eax
f0103517:	e8 15 45 00 00       	call   f0107a31 <kheap_physical_address>
f010351c:	83 c4 10             	add    $0x10,%esp
f010351f:	83 c8 01             	or     $0x1,%eax
f0103522:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103524:	8b 45 14             	mov    0x14(%ebp),%eax
f0103527:	8b 00                	mov    (%eax),%eax
f0103529:	83 ec 04             	sub    $0x4,%esp
f010352c:	68 00 10 00 00       	push   $0x1000
f0103531:	6a 00                	push   $0x0
f0103533:	50                   	push   %eax
f0103534:	e8 35 da 02 00       	call   f0130f6e <memset>
f0103539:	83 c4 10             	add    $0x10,%esp
f010353c:	eb 10                	jmp    f010354e <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010353e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103547:	b8 00 00 00 00       	mov    $0x0,%eax
f010354c:	eb 05                	jmp    f0103553 <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010354e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103553:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103556:	c9                   	leave  
f0103557:	c3                   	ret    

f0103558 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103558:	55                   	push   %ebp
f0103559:	89 e5                	mov    %esp,%ebp
f010355b:	83 ec 28             	sub    $0x28,%esp
f010355e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103561:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103564:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103568:	74 75                	je     f01035df <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010356a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103574:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103579:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010357c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103584:	f7 75 f4             	divl   -0xc(%ebp)
f0103587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010358a:	29 d0                	sub    %edx,%eax
f010358c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010358f:	73 32                	jae    f01035c3 <pf_add_empty_env_page+0x6b>
f0103591:	8b 45 08             	mov    0x8(%ebp),%eax
f0103594:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f010359a:	b8 00 00 00 00       	mov    $0x0,%eax
f010359f:	29 d0                	sub    %edx,%eax
f01035a1:	c1 e0 0c             	shl    $0xc,%eax
f01035a4:	2d 00 20 40 11       	sub    $0x11402000,%eax
f01035a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01035ac:	76 15                	jbe    f01035c3 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f01035ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01035b1:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01035b7:	8d 50 01             	lea    0x1(%eax),%edx
f01035ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01035bd:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f01035c3:	a1 60 7b 65 f0       	mov    0xf0657b60,%eax
f01035c8:	83 ec 04             	sub    $0x4,%esp
f01035cb:	50                   	push   %eax
f01035cc:	ff 75 0c             	pushl  0xc(%ebp)
f01035cf:	ff 75 08             	pushl  0x8(%ebp)
f01035d2:	e8 b2 00 00 00       	call   f0103689 <pf_add_env_page>
f01035d7:	83 c4 10             	add    $0x10,%esp
f01035da:	e9 a8 00 00 00       	jmp    f0103687 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01035df:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035e6:	76 19                	jbe    f0103601 <pf_add_empty_env_page+0xa9>
f01035e8:	68 90 54 13 f0       	push   $0xf0135490
f01035ed:	68 b6 54 13 f0       	push   $0xf01354b6
f01035f2:	68 d1 00 00 00       	push   $0xd1
f01035f7:	68 ff 53 13 f0       	push   $0xf01353ff
f01035fc:	e8 fa cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103601:	8b 45 08             	mov    0x8(%ebp),%eax
f0103604:	83 c0 64             	add    $0x64,%eax
f0103607:	83 ec 08             	sub    $0x8,%esp
f010360a:	50                   	push   %eax
f010360b:	ff 75 08             	pushl  0x8(%ebp)
f010360e:	e8 10 06 00 00       	call   f0103c23 <get_disk_page_directory>
f0103613:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103616:	8b 45 08             	mov    0x8(%ebp),%eax
f0103619:	8b 40 64             	mov    0x64(%eax),%eax
f010361c:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010361f:	52                   	push   %edx
f0103620:	6a 01                	push   $0x1
f0103622:	ff 75 0c             	pushl  0xc(%ebp)
f0103625:	50                   	push   %eax
f0103626:	e8 11 fe ff ff       	call   f010343c <get_disk_page_table>
f010362b:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010362e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103631:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103634:	c1 ea 0c             	shr    $0xc,%edx
f0103637:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010363d:	c1 e2 02             	shl    $0x2,%edx
f0103640:	01 d0                	add    %edx,%eax
f0103642:	8b 00                	mov    (%eax),%eax
f0103644:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103647:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010364a:	85 c0                	test   %eax,%eax
f010364c:	75 34                	jne    f0103682 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010364e:	83 ec 0c             	sub    $0xc,%esp
f0103651:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103654:	50                   	push   %eax
f0103655:	e8 3a fc ff ff       	call   f0103294 <allocate_disk_frame>
f010365a:	83 c4 10             	add    $0x10,%esp
f010365d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103660:	75 07                	jne    f0103669 <pf_add_empty_env_page+0x111>
f0103662:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103667:	eb 1e                	jmp    f0103687 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103669:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010366c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010366f:	c1 ea 0c             	shr    $0xc,%edx
f0103672:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103678:	c1 e2 02             	shl    $0x2,%edx
f010367b:	01 c2                	add    %eax,%edx
f010367d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103680:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103682:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103687:	c9                   	leave  
f0103688:	c3                   	ret    

f0103689 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103689:	55                   	push   %ebp
f010368a:	89 e5                	mov    %esp,%ebp
f010368c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010368f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103696:	76 19                	jbe    f01036b1 <pf_add_env_page+0x28>
f0103698:	68 90 54 13 f0       	push   $0xf0135490
f010369d:	68 b6 54 13 f0       	push   $0xf01354b6
f01036a2:	68 e6 00 00 00       	push   $0xe6
f01036a7:	68 ff 53 13 f0       	push   $0xf01353ff
f01036ac:	e8 4a cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b4:	83 c0 64             	add    $0x64,%eax
f01036b7:	83 ec 08             	sub    $0x8,%esp
f01036ba:	50                   	push   %eax
f01036bb:	ff 75 08             	pushl  0x8(%ebp)
f01036be:	e8 60 05 00 00       	call   f0103c23 <get_disk_page_directory>
f01036c3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c9:	8b 40 64             	mov    0x64(%eax),%eax
f01036cc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01036cf:	52                   	push   %edx
f01036d0:	6a 01                	push   $0x1
f01036d2:	ff 75 0c             	pushl  0xc(%ebp)
f01036d5:	50                   	push   %eax
f01036d6:	e8 61 fd ff ff       	call   f010343c <get_disk_page_table>
f01036db:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036e4:	c1 ea 0c             	shr    $0xc,%edx
f01036e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036ed:	c1 e2 02             	shl    $0x2,%edx
f01036f0:	01 d0                	add    %edx,%eax
f01036f2:	8b 00                	mov    (%eax),%eax
f01036f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01036f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036fa:	85 c0                	test   %eax,%eax
f01036fc:	75 34                	jne    f0103732 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036fe:	83 ec 0c             	sub    $0xc,%esp
f0103701:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103704:	50                   	push   %eax
f0103705:	e8 8a fb ff ff       	call   f0103294 <allocate_disk_frame>
f010370a:	83 c4 10             	add    $0x10,%esp
f010370d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103710:	75 07                	jne    f0103719 <pf_add_env_page+0x90>
f0103712:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103717:	eb 31                	jmp    f010374a <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010371c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010371f:	c1 ea 0c             	shr    $0xc,%edx
f0103722:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103728:	c1 e2 02             	shl    $0x2,%edx
f010372b:	01 c2                	add    %eax,%edx
f010372d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103730:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103732:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103735:	83 ec 08             	sub    $0x8,%esp
f0103738:	ff 75 10             	pushl  0x10(%ebp)
f010373b:	50                   	push   %eax
f010373c:	e8 a6 f9 ff ff       	call   f01030e7 <write_disk_page>
f0103741:	83 c4 10             	add    $0x10,%esp
f0103744:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010374a:	c9                   	leave  
f010374b:	c3                   	ret    

f010374c <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010374c:	55                   	push   %ebp
f010374d:	89 e5                	mov    %esp,%ebp
f010374f:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103752:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103759:	76 19                	jbe    f0103774 <pf_update_env_page+0x28>
f010375b:	68 90 54 13 f0       	push   $0xf0135490
f0103760:	68 b6 54 13 f0       	push   $0xf01354b6
f0103765:	68 08 01 00 00       	push   $0x108
f010376a:	68 ff 53 13 f0       	push   $0xf01353ff
f010376f:	e8 87 ca ff ff       	call   f01001fb <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103774:	8b 45 08             	mov    0x8(%ebp),%eax
f0103777:	83 c0 64             	add    $0x64,%eax
f010377a:	83 ec 08             	sub    $0x8,%esp
f010377d:	50                   	push   %eax
f010377e:	ff 75 08             	pushl  0x8(%ebp)
f0103781:	e8 9d 04 00 00       	call   f0103c23 <get_disk_page_directory>
f0103786:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 9e fc ff ff       	call   f010343c <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f01037a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037a4:	85 c0                	test   %eax,%eax
f01037a6:	74 29                	je     f01037d1 <pf_update_env_page+0x85>
f01037a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037ab:	85 c0                	test   %eax,%eax
f01037ad:	0f 84 43 01 00 00    	je     f01038f6 <pf_update_env_page+0x1aa>
f01037b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037b6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037b9:	c1 ea 0c             	shr    $0xc,%edx
f01037bc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037c2:	c1 e2 02             	shl    $0x2,%edx
f01037c5:	01 d0                	add    %edx,%eax
f01037c7:	8b 00                	mov    (%eax),%eax
f01037c9:	85 c0                	test   %eax,%eax
f01037cb:	0f 85 25 01 00 00    	jne    f01038f6 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f01037d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f01037d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01037da:	85 c0                	test   %eax,%eax
f01037dc:	79 09                	jns    f01037e7 <pf_update_env_page+0x9b>
f01037de:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01037e5:	76 38                	jbe    f010381f <pf_update_env_page+0xd3>
f01037e7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01037ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037f1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01037f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103801:	f7 75 f0             	divl   -0x10(%ebp)
f0103804:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103807:	29 d0                	sub    %edx,%eax
f0103809:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010380c:	0f 87 cd 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
f0103812:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103819:	0f 87 c0 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010381f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103822:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103825:	83 ec 04             	sub    $0x4,%esp
f0103828:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010382b:	52                   	push   %edx
f010382c:	ff 75 0c             	pushl  0xc(%ebp)
f010382f:	50                   	push   %eax
f0103830:	e8 fa 34 00 00       	call   f0106d2f <get_frame_info>
f0103835:	83 c4 10             	add    $0x10,%esp
f0103838:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010383b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010383e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103841:	75 52                	jne    f0103895 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103846:	83 ec 04             	sub    $0x4,%esp
f0103849:	50                   	push   %eax
f010384a:	ff 75 f4             	pushl  -0xc(%ebp)
f010384d:	ff 75 08             	pushl  0x8(%ebp)
f0103850:	e8 34 fe ff ff       	call   f0103689 <pf_add_env_page>
f0103855:	83 c4 10             	add    $0x10,%esp
f0103858:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010385b:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010385f:	75 17                	jne    f0103878 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103861:	83 ec 04             	sub    $0x4,%esp
f0103864:	68 cc 54 13 f0       	push   $0xf01354cc
f0103869:	68 1d 01 00 00       	push   $0x11d
f010386e:	68 ff 53 13 f0       	push   $0xf01353ff
f0103873:	e8 83 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103878:	8b 45 08             	mov    0x8(%ebp),%eax
f010387b:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103881:	8d 50 01             	lea    0x1(%eax),%edx
f0103884:	8b 45 08             	mov    0x8(%ebp),%eax
f0103887:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f010388d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103890:	e9 17 01 00 00       	jmp    f01039ac <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103895:	83 ec 04             	sub    $0x4,%esp
f0103898:	6a 00                	push   $0x0
f010389a:	ff 75 f4             	pushl  -0xc(%ebp)
f010389d:	ff 75 08             	pushl  0x8(%ebp)
f01038a0:	e8 b3 fc ff ff       	call   f0103558 <pf_add_empty_env_page>
f01038a5:	83 c4 10             	add    $0x10,%esp
f01038a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038ab:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038af:	75 17                	jne    f01038c8 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	68 f8 54 13 f0       	push   $0xf01354f8
f01038b9:	68 28 01 00 00       	push   $0x128
f01038be:	68 ff 53 13 f0       	push   $0xf01353ff
f01038c3:	e8 33 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cb:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038d1:	8d 50 01             	lea    0x1(%eax),%edx
f01038d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038d7:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01038dd:	eb 17                	jmp    f01038f6 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01038df:	83 ec 04             	sub    $0x4,%esp
f01038e2:	68 44 55 13 f0       	push   $0xf0135544
f01038e7:	68 2f 01 00 00       	push   $0x12f
f01038ec:	68 ff 53 13 f0       	push   $0xf01353ff
f01038f1:	e8 05 c9 ff ff       	call   f01001fb <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 31 fb ff ff       	call   f010343c <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010390e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103911:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103914:	c1 ea 0c             	shr    $0xc,%edx
f0103917:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010391d:	c1 e2 02             	shl    $0x2,%edx
f0103920:	01 d0                	add    %edx,%eax
f0103922:	8b 00                	mov    (%eax),%eax
f0103924:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103927:	8b 45 08             	mov    0x8(%ebp),%eax
f010392a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010392d:	6a 00                	push   $0x0
f010392f:	68 00 00 80 ef       	push   $0xef800000
f0103934:	ff 75 10             	pushl  0x10(%ebp)
f0103937:	50                   	push   %eax
f0103938:	e8 2d 33 00 00       	call   f0106c6a <map_frame>
f010393d:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f0103940:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f0103947:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010394a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010394f:	83 ec 08             	sub    $0x8,%esp
f0103952:	50                   	push   %eax
f0103953:	ff 75 e0             	pushl  -0x20(%ebp)
f0103956:	e8 8c f7 ff ff       	call   f01030e7 <write_disk_page>
f010395b:	83 c4 10             	add    $0x10,%esp
f010395e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103961:	8b 45 10             	mov    0x10(%ebp),%eax
f0103964:	8b 40 08             	mov    0x8(%eax),%eax
f0103967:	40                   	inc    %eax
f0103968:	8b 55 10             	mov    0x10(%ebp),%edx
f010396b:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f010396f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103972:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103975:	83 ec 08             	sub    $0x8,%esp
f0103978:	68 00 00 80 ef       	push   $0xef800000
f010397d:	50                   	push   %eax
f010397e:	e8 1c 34 00 00       	call   f0106d9f <unmap_frame>
f0103983:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103986:	8b 45 10             	mov    0x10(%ebp),%eax
f0103989:	8b 40 08             	mov    0x8(%eax),%eax
f010398c:	48                   	dec    %eax
f010398d:	8b 55 10             	mov    0x10(%ebp),%edx
f0103990:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103994:	8b 45 08             	mov    0x8(%ebp),%eax
f0103997:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f010399d:	8d 50 01             	lea    0x1(%eax),%edx
f01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a3:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f01039a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01039ac:	c9                   	leave  
f01039ad:	c3                   	ret    

f01039ae <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01039ae:	55                   	push   %ebp
f01039af:	89 e5                	mov    %esp,%ebp
f01039b1:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01039b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01039ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039c2:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01039c8:	8b 40 64             	mov    0x64(%eax),%eax
f01039cb:	85 c0                	test   %eax,%eax
f01039cd:	75 0a                	jne    f01039d9 <pf_read_env_page+0x2b>
f01039cf:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039d4:	e9 90 00 00 00       	jmp    f0103a69 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01039d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01039df:	8b 40 64             	mov    0x64(%eax),%eax
f01039e2:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01039e5:	51                   	push   %ecx
f01039e6:	6a 00                	push   $0x0
f01039e8:	52                   	push   %edx
f01039e9:	50                   	push   %eax
f01039ea:	e8 4d fa ff ff       	call   f010343c <get_disk_page_table>
f01039ef:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039f5:	85 c0                	test   %eax,%eax
f01039f7:	75 07                	jne    f0103a00 <pf_read_env_page+0x52>
f01039f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039fe:	eb 69                	jmp    f0103a69 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a06:	c1 ea 0c             	shr    $0xc,%edx
f0103a09:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a0f:	c1 e2 02             	shl    $0x2,%edx
f0103a12:	01 d0                	add    %edx,%eax
f0103a14:	8b 00                	mov    (%eax),%eax
f0103a16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a1d:	75 07                	jne    f0103a26 <pf_read_env_page+0x78>
f0103a1f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a24:	eb 43                	jmp    f0103a69 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a26:	83 ec 08             	sub    $0x8,%esp
f0103a29:	ff 75 0c             	pushl  0xc(%ebp)
f0103a2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a2f:	e8 84 f6 ff ff       	call   f01030b8 <read_disk_page>
f0103a34:	83 c4 10             	add    $0x10,%esp
f0103a37:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103a3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a40:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a43:	6a 40                	push   $0x40
f0103a45:	6a 00                	push   $0x0
f0103a47:	52                   	push   %edx
f0103a48:	50                   	push   %eax
f0103a49:	e8 ed 40 00 00       	call   f0107b3b <pt_set_page_permissions>
f0103a4e:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103a5a:	8d 50 01             	lea    0x1(%eax),%edx
f0103a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a60:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103a69:	c9                   	leave  
f0103a6a:	c3                   	ret    

f0103a6b <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103a6b:	55                   	push   %ebp
f0103a6c:	89 e5                	mov    %esp,%ebp
f0103a6e:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a74:	8b 40 64             	mov    0x64(%eax),%eax
f0103a77:	85 c0                	test   %eax,%eax
f0103a79:	74 62                	je     f0103add <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a7e:	8b 40 64             	mov    0x64(%eax),%eax
f0103a81:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103a84:	52                   	push   %edx
f0103a85:	6a 00                	push   $0x0
f0103a87:	ff 75 0c             	pushl  0xc(%ebp)
f0103a8a:	50                   	push   %eax
f0103a8b:	e8 ac f9 ff ff       	call   f010343c <get_disk_page_table>
f0103a90:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a96:	85 c0                	test   %eax,%eax
f0103a98:	74 46                	je     f0103ae0 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa0:	c1 ea 0c             	shr    $0xc,%edx
f0103aa3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aa9:	c1 e2 02             	shl    $0x2,%edx
f0103aac:	01 d0                	add    %edx,%eax
f0103aae:	8b 00                	mov    (%eax),%eax
f0103ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ab6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ab9:	c1 ea 0c             	shr    $0xc,%edx
f0103abc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ac2:	c1 e2 02             	shl    $0x2,%edx
f0103ac5:	01 d0                	add    %edx,%eax
f0103ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103acd:	83 ec 0c             	sub    $0xc,%esp
f0103ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad3:	e8 83 f8 ff ff       	call   f010335b <free_disk_frame>
f0103ad8:	83 c4 10             	add    $0x10,%esp
f0103adb:	eb 04                	jmp    f0103ae1 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103add:	90                   	nop
f0103ade:	eb 01                	jmp    f0103ae1 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103ae0:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103ae1:	c9                   	leave  
f0103ae2:	c3                   	ret    

f0103ae3 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103ae3:	55                   	push   %ebp
f0103ae4:	89 e5                	mov    %esp,%ebp
f0103ae6:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ae9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103af0:	e9 b8 00 00 00       	jmp    f0103bad <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af8:	8b 40 64             	mov    0x64(%eax),%eax
f0103afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103afe:	c1 e2 02             	shl    $0x2,%edx
f0103b01:	01 d0                	add    %edx,%eax
f0103b03:	8b 00                	mov    (%eax),%eax
f0103b05:	83 e0 01             	and    $0x1,%eax
f0103b08:	85 c0                	test   %eax,%eax
f0103b0a:	0f 84 99 00 00 00    	je     f0103ba9 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b13:	8b 40 64             	mov    0x64(%eax),%eax
f0103b16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b19:	c1 e2 02             	shl    $0x2,%edx
f0103b1c:	01 d0                	add    %edx,%eax
f0103b1e:	8b 00                	mov    (%eax),%eax
f0103b20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b28:	83 ec 0c             	sub    $0xc,%esp
f0103b2b:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b2e:	e8 d2 3e 00 00       	call   f0107a05 <kheap_virtual_address>
f0103b33:	83 c4 10             	add    $0x10,%esp
f0103b36:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103b40:	eb 3a                	jmp    f0103b7c <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b4f:	01 d0                	add    %edx,%eax
f0103b51:	8b 00                	mov    (%eax),%eax
f0103b53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b63:	01 d0                	add    %edx,%eax
f0103b65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103b6b:	83 ec 0c             	sub    $0xc,%esp
f0103b6e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103b71:	e8 e5 f7 ff ff       	call   f010335b <free_disk_frame>
f0103b76:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b79:	ff 45 f0             	incl   -0x10(%ebp)
f0103b7c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103b83:	76 bd                	jbe    f0103b42 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b88:	8b 40 64             	mov    0x64(%eax),%eax
f0103b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8e:	c1 e2 02             	shl    $0x2,%edx
f0103b91:	01 d0                	add    %edx,%eax
f0103b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103b99:	83 ec 0c             	sub    $0xc,%esp
f0103b9c:	ff 75 e8             	pushl  -0x18(%ebp)
f0103b9f:	e8 3a 3d 00 00       	call   f01078de <kfree>
f0103ba4:	83 c4 10             	add    $0x10,%esp
f0103ba7:	eb 01                	jmp    f0103baa <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103ba9:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103baa:	ff 45 f4             	incl   -0xc(%ebp)
f0103bad:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103bb4:	0f 86 3b ff ff ff    	jbe    f0103af5 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bbd:	8b 40 64             	mov    0x64(%eax),%eax
f0103bc0:	83 ec 0c             	sub    $0xc,%esp
f0103bc3:	50                   	push   %eax
f0103bc4:	e8 15 3d 00 00       	call   f01078de <kfree>
f0103bc9:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bcf:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd9:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be3:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103be6:	85 c0                	test   %eax,%eax
f0103be8:	74 36                	je     f0103c20 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103bea:	83 ec 0c             	sub    $0xc,%esp
f0103bed:	ff 75 08             	pushl  0x8(%ebp)
f0103bf0:	e8 05 03 00 00       	call   f0103efa <__pf_remove_env_all_tables>
f0103bf5:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103bf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103bfe:	83 ec 0c             	sub    $0xc,%esp
f0103c01:	50                   	push   %eax
f0103c02:	e8 d7 3c 00 00       	call   f01078de <kfree>
f0103c07:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c0d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c17:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c1e:	eb 01                	jmp    f0103c21 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c20:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c21:	c9                   	leave  
f0103c22:	c3                   	ret    

f0103c23 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c23:	55                   	push   %ebp
f0103c24:	89 e5                	mov    %esp,%ebp
f0103c26:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c2c:	8b 50 64             	mov    0x64(%eax),%edx
f0103c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c32:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	75 58                	jne    f0103c95 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103c3d:	83 ec 0c             	sub    $0xc,%esp
f0103c40:	68 00 10 00 00       	push   $0x1000
f0103c45:	e8 c9 3b 00 00       	call   f0107813 <kmalloc>
f0103c4a:	83 c4 10             	add    $0x10,%esp
f0103c4d:	89 c2                	mov    %eax,%edx
f0103c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c52:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c57:	8b 00                	mov    (%eax),%eax
f0103c59:	85 c0                	test   %eax,%eax
f0103c5b:	75 07                	jne    f0103c64 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103c5d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103c62:	eb 36                	jmp    f0103c9a <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103c64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c67:	8b 00                	mov    (%eax),%eax
f0103c69:	83 ec 0c             	sub    $0xc,%esp
f0103c6c:	50                   	push   %eax
f0103c6d:	e8 bf 3d 00 00       	call   f0107a31 <kheap_physical_address>
f0103c72:	83 c4 10             	add    $0x10,%esp
f0103c75:	89 c2                	mov    %eax,%edx
f0103c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c7a:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c80:	8b 00                	mov    (%eax),%eax
f0103c82:	83 ec 04             	sub    $0x4,%esp
f0103c85:	68 00 10 00 00       	push   $0x1000
f0103c8a:	6a 00                	push   $0x0
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 dc d2 02 00       	call   f0130f6e <memset>
f0103c92:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103c95:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c9a:	c9                   	leave  
f0103c9b:	c3                   	ret    

f0103c9c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103c9c:	55                   	push   %ebp
f0103c9d:	89 e5                	mov    %esp,%ebp
f0103c9f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103ca2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103ca9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb0:	eb 78                	jmp    f0103d2a <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb5:	8b 40 64             	mov    0x64(%eax),%eax
f0103cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbb:	c1 e2 02             	shl    $0x2,%edx
f0103cbe:	01 d0                	add    %edx,%eax
f0103cc0:	8b 00                	mov    (%eax),%eax
f0103cc2:	83 e0 01             	and    $0x1,%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	74 5d                	je     f0103d26 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0103ccf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cd2:	c1 e2 02             	shl    $0x2,%edx
f0103cd5:	01 d0                	add    %edx,%eax
f0103cd7:	8b 00                	mov    (%eax),%eax
f0103cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cde:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103ce7:	e8 19 3d 00 00       	call   f0107a05 <kheap_virtual_address>
f0103cec:	83 c4 10             	add    $0x10,%esp
f0103cef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103cf2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103cf9:	eb 20                	jmp    f0103d1b <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103cfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d08:	01 d0                	add    %edx,%eax
f0103d0a:	8b 00                	mov    (%eax),%eax
f0103d0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d13:	74 03                	je     f0103d18 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d15:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d18:	ff 45 ec             	incl   -0x14(%ebp)
f0103d1b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d22:	76 d7                	jbe    f0103cfb <pf_calculate_allocated_pages+0x5f>
f0103d24:	eb 01                	jmp    f0103d27 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d26:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d27:	ff 45 f4             	incl   -0xc(%ebp)
f0103d2a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d31:	0f 86 7b ff ff ff    	jbe    f0103cb2 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103d3a:	c9                   	leave  
f0103d3b:	c3                   	ret    

f0103d3c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103d3c:	55                   	push   %ebp
f0103d3d:	89 e5                	mov    %esp,%ebp
f0103d3f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103d42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d49:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f0103d4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d51:	eb 0b                	jmp    f0103d5e <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103d53:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d56:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d62:	74 07                	je     f0103d6b <pf_calculate_free_frames+0x2f>
f0103d64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	eb 05                	jmp    f0103d70 <pf_calculate_free_frames+0x34>
f0103d6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d70:	a3 c0 7b 65 f0       	mov    %eax,0xf0657bc0
f0103d75:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d7a:	85 c0                	test   %eax,%eax
f0103d7c:	75 d5                	jne    f0103d53 <pf_calculate_free_frames+0x17>
f0103d7e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d82:	75 cf                	jne    f0103d53 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103d84:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103d87:	c9                   	leave  
f0103d88:	c3                   	ret    

f0103d89 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103d89:	55                   	push   %ebp
f0103d8a:	89 e5                	mov    %esp,%ebp
f0103d8c:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d92:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d9d:	8b 00                	mov    (%eax),%eax
f0103d9f:	85 c0                	test   %eax,%eax
f0103da1:	75 58                	jne    f0103dfb <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103da3:	83 ec 0c             	sub    $0xc,%esp
f0103da6:	68 00 10 00 00       	push   $0x1000
f0103dab:	e8 63 3a 00 00       	call   f0107813 <kmalloc>
f0103db0:	83 c4 10             	add    $0x10,%esp
f0103db3:	89 c2                	mov    %eax,%edx
f0103db5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103db8:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103dba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dbd:	8b 00                	mov    (%eax),%eax
f0103dbf:	85 c0                	test   %eax,%eax
f0103dc1:	75 07                	jne    f0103dca <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103dc3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103dc8:	eb 36                	jmp    f0103e00 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103dca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dcd:	8b 00                	mov    (%eax),%eax
f0103dcf:	83 ec 0c             	sub    $0xc,%esp
f0103dd2:	50                   	push   %eax
f0103dd3:	e8 59 3c 00 00       	call   f0107a31 <kheap_physical_address>
f0103dd8:	83 c4 10             	add    $0x10,%esp
f0103ddb:	89 c2                	mov    %eax,%edx
f0103ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de0:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103de6:	8b 00                	mov    (%eax),%eax
f0103de8:	83 ec 04             	sub    $0x4,%esp
f0103deb:	68 00 10 00 00       	push   $0x1000
f0103df0:	6a 00                	push   $0x0
f0103df2:	50                   	push   %eax
f0103df3:	e8 76 d1 02 00       	call   f0130f6e <memset>
f0103df8:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e00:	c9                   	leave  
f0103e01:	c3                   	ret    

f0103e02 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e02:	55                   	push   %ebp
f0103e03:	89 e5                	mov    %esp,%ebp
f0103e05:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e08:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e0f:	76 19                	jbe    f0103e2a <__pf_write_env_table+0x28>
f0103e11:	68 90 54 13 f0       	push   $0xf0135490
f0103e16:	68 b6 54 13 f0       	push   $0xf01354b6
f0103e1b:	68 5a 02 00 00       	push   $0x25a
f0103e20:	68 ff 53 13 f0       	push   $0xf01353ff
f0103e25:	e8 d1 c3 ff ff       	call   f01001fb <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e2d:	83 c0 6c             	add    $0x6c,%eax
f0103e30:	83 ec 08             	sub    $0x8,%esp
f0103e33:	50                   	push   %eax
f0103e34:	ff 75 08             	pushl  0x8(%ebp)
f0103e37:	e8 4d ff ff ff       	call   f0103d89 <get_disk_table_directory>
f0103e3c:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e42:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e45:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e48:	c1 ea 16             	shr    $0x16,%edx
f0103e4b:	c1 e2 02             	shl    $0x2,%edx
f0103e4e:	01 d0                	add    %edx,%eax
f0103e50:	8b 00                	mov    (%eax),%eax
f0103e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e58:	85 c0                	test   %eax,%eax
f0103e5a:	75 31                	jne    f0103e8d <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e5c:	83 ec 0c             	sub    $0xc,%esp
f0103e5f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e62:	50                   	push   %eax
f0103e63:	e8 2c f4 ff ff       	call   f0103294 <allocate_disk_frame>
f0103e68:	83 c4 10             	add    $0x10,%esp
f0103e6b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e6e:	75 07                	jne    f0103e77 <__pf_write_env_table+0x75>
f0103e70:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e75:	eb 2e                	jmp    f0103ea5 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e7a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e80:	c1 ea 16             	shr    $0x16,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 c2                	add    %eax,%edx
f0103e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e8b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e90:	83 ec 08             	sub    $0x8,%esp
f0103e93:	ff 75 10             	pushl  0x10(%ebp)
f0103e96:	50                   	push   %eax
f0103e97:	e8 4b f2 ff ff       	call   f01030e7 <write_disk_page>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103ea5:	c9                   	leave  
f0103ea6:	c3                   	ret    

f0103ea7 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ea7:	55                   	push   %ebp
f0103ea8:	89 e5                	mov    %esp,%ebp
f0103eaa:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ead:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb3:	85 c0                	test   %eax,%eax
f0103eb5:	75 07                	jne    f0103ebe <__pf_read_env_table+0x17>
f0103eb7:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103ebc:	eb 3a                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ec1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ec4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ec7:	c1 ea 16             	shr    $0x16,%edx
f0103eca:	c1 e2 02             	shl    $0x2,%edx
f0103ecd:	01 d0                	add    %edx,%eax
f0103ecf:	8b 00                	mov    (%eax),%eax
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ed8:	75 07                	jne    f0103ee1 <__pf_read_env_table+0x3a>
f0103eda:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103edf:	eb 17                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103ee1:	83 ec 08             	sub    $0x8,%esp
f0103ee4:	ff 75 10             	pushl  0x10(%ebp)
f0103ee7:	ff 75 f4             	pushl  -0xc(%ebp)
f0103eea:	e8 c9 f1 ff ff       	call   f01030b8 <read_disk_page>
f0103eef:	83 c4 10             	add    $0x10,%esp
f0103ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ef8:	c9                   	leave  
f0103ef9:	c3                   	ret    

f0103efa <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103efa:	55                   	push   %ebp
f0103efb:	89 e5                	mov    %esp,%ebp
f0103efd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f03:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f06:	85 c0                	test   %eax,%eax
f0103f08:	74 4c                	je     f0103f56 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f11:	eb 38                	jmp    f0103f4b <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f16:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f1c:	c1 e2 02             	shl    $0x2,%edx
f0103f1f:	01 d0                	add    %edx,%eax
f0103f21:	8b 00                	mov    (%eax),%eax
f0103f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f29:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f2f:	c1 e2 02             	shl    $0x2,%edx
f0103f32:	01 d0                	add    %edx,%eax
f0103f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103f3a:	83 ec 0c             	sub    $0xc,%esp
f0103f3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f40:	e8 16 f4 ff ff       	call   f010335b <free_disk_frame>
f0103f45:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f48:	ff 45 f4             	incl   -0xc(%ebp)
f0103f4b:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f52:	76 bf                	jbe    f0103f13 <__pf_remove_env_all_tables+0x19>
f0103f54:	eb 01                	jmp    f0103f57 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f56:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f57:	c9                   	leave  
f0103f58:	c3                   	ret    

f0103f59 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f59:	55                   	push   %ebp
f0103f5a:	89 e5                	mov    %esp,%ebp
f0103f5c:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f63:	75 10                	jne    f0103f75 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f65:	83 ec 0c             	sub    $0xc,%esp
f0103f68:	68 c0 55 13 f0       	push   $0xf01355c0
f0103f6d:	e8 10 cd ff ff       	call   f0100c82 <cprintf>
f0103f72:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f78:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f7b:	85 c0                	test   %eax,%eax
f0103f7d:	74 3d                	je     f0103fbc <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f82:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f88:	c1 ea 16             	shr    $0x16,%edx
f0103f8b:	c1 e2 02             	shl    $0x2,%edx
f0103f8e:	01 d0                	add    %edx,%eax
f0103f90:	8b 00                	mov    (%eax),%eax
f0103f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f98:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f9e:	c1 ea 16             	shr    $0x16,%edx
f0103fa1:	c1 e2 02             	shl    $0x2,%edx
f0103fa4:	01 d0                	add    %edx,%eax
f0103fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103fac:	83 ec 0c             	sub    $0xc,%esp
f0103faf:	ff 75 f4             	pushl  -0xc(%ebp)
f0103fb2:	e8 a4 f3 ff ff       	call   f010335b <free_disk_frame>
f0103fb7:	83 c4 10             	add    $0x10,%esp
f0103fba:	eb 01                	jmp    f0103fbd <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fbc:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103fbd:	c9                   	leave  
f0103fbe:	c3                   	ret    

f0103fbf <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103fbf:	55                   	push   %ebp
f0103fc0:	89 e5                	mov    %esp,%ebp
f0103fc2:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103fc5:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103fcc:	eb 1f                	jmp    f0103fed <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd1:	83 ec 04             	sub    $0x4,%esp
f0103fd4:	6a 08                	push   $0x8
f0103fd6:	ff 75 08             	pushl  0x8(%ebp)
f0103fd9:	50                   	push   %eax
f0103fda:	e8 34 d6 02 00       	call   f0131613 <ide_write>
f0103fdf:	83 c4 10             	add    $0x10,%esp
f0103fe2:	85 c0                	test   %eax,%eax
f0103fe4:	75 12                	jne    f0103ff8 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103fe6:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103fed:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103ff4:	7e d8                	jle    f0103fce <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff6:	eb 01                	jmp    f0103ff9 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103ff8:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff9:	90                   	nop
f0103ffa:	c9                   	leave  
f0103ffb:	c3                   	ret    

f0103ffc <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103ffc:	55                   	push   %ebp
f0103ffd:	89 e5                	mov    %esp,%ebp
f0103fff:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104002:	8b 45 08             	mov    0x8(%ebp),%eax
f0104005:	0f b6 c0             	movzbl %al,%eax
f0104008:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010400f:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104012:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104015:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104018:	ee                   	out    %al,(%dx)
f0104019:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104020:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104023:	89 c2                	mov    %eax,%edx
f0104025:	ec                   	in     (%dx),%al
f0104026:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104029:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010402c:	0f b6 c0             	movzbl %al,%eax
}
f010402f:	c9                   	leave  
f0104030:	c3                   	ret    

f0104031 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104031:	55                   	push   %ebp
f0104032:	89 e5                	mov    %esp,%ebp
f0104034:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104037:	8b 45 08             	mov    0x8(%ebp),%eax
f010403a:	0f b6 c0             	movzbl %al,%eax
f010403d:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104044:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104047:	8a 45 f6             	mov    -0xa(%ebp),%al
f010404a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010404d:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f010404e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104051:	0f b6 c0             	movzbl %al,%eax
f0104054:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010405b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010405e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104061:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104064:	ee                   	out    %al,(%dx)
}
f0104065:	90                   	nop
f0104066:	c9                   	leave  
f0104067:	c3                   	ret    

f0104068 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104068:	55                   	push   %ebp
f0104069:	89 e5                	mov    %esp,%ebp
f010406b:	53                   	push   %ebx
f010406c:	83 ec 24             	sub    $0x24,%esp
f010406f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104072:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104075:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010407c:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104080:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104083:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104086:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104087:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010408b:	77 48                	ja     f01040d5 <kclock_start+0x6d>
f010408d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104094:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104098:	8a 45 ee             	mov    -0x12(%ebp),%al
f010409b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010409e:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010409f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040a3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01040a8:	99                   	cltd   
f01040a9:	f7 fb                	idiv   %ebx
f01040ab:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01040b1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040b5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01040ba:	99                   	cltd   
f01040bb:	f7 fb                	idiv   %ebx
f01040bd:	89 c3                	mov    %eax,%ebx
f01040bf:	89 c8                	mov    %ecx,%eax
f01040c1:	99                   	cltd   
f01040c2:	f7 fb                	idiv   %ebx
f01040c4:	0f b7 c0             	movzwl %ax,%eax
f01040c7:	83 ec 0c             	sub    $0xc,%esp
f01040ca:	50                   	push   %eax
f01040cb:	e8 b8 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01040d0:	83 c4 10             	add    $0x10,%esp
f01040d3:	eb 13                	jmp    f01040e8 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01040d5:	6a 35                	push   $0x35
f01040d7:	68 e4 55 13 f0       	push   $0xf01355e4
f01040dc:	6a 33                	push   $0x33
f01040de:	68 40 56 13 f0       	push   $0xf0135640
f01040e3:	e8 13 c1 ff ff       	call   f01001fb <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01040e8:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01040ee:	0f b7 c0             	movzwl %ax,%eax
f01040f1:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040f6:	83 ec 0c             	sub    $0xc,%esp
f01040f9:	50                   	push   %eax
f01040fa:	e8 71 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f01040ff:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104102:	90                   	nop
f0104103:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104106:	c9                   	leave  
f0104107:	c3                   	ret    

f0104108 <kclock_stop>:

void
kclock_stop(void)
{
f0104108:	55                   	push   %ebp
f0104109:	89 e5                	mov    %esp,%ebp
f010410b:	83 ec 18             	sub    $0x18,%esp
f010410e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104115:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104119:	8a 45 f3             	mov    -0xd(%ebp),%al
f010411c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010411f:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	68 ff ff 00 00       	push   $0xffff
f0104128:	e8 43 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f010412d:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104130:	90                   	nop
f0104131:	c9                   	leave  
f0104132:	c3                   	ret    

f0104133 <kclock_resume>:

void
kclock_resume(void)
{
f0104133:	55                   	push   %ebp
f0104134:	89 e5                	mov    %esp,%ebp
f0104136:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104139:	e8 8c 01 00 00       	call   f01042ca <kclock_read_cnt0>
f010413e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104142:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104147:	77 06                	ja     f010414f <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104149:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010414f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104153:	83 e0 01             	and    $0x1,%eax
f0104156:	66 85 c0             	test   %ax,%ax
f0104159:	74 09                	je     f0104164 <kclock_resume+0x31>
		cnt0++;
f010415b:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010415f:	40                   	inc    %eax
f0104160:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104164:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010416b:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010416f:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104172:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104175:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f010417a:	83 ec 0c             	sub    $0xc,%esp
f010417d:	50                   	push   %eax
f010417e:	e8 05 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104183:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104186:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f010418c:	0f b7 c0             	movzwl %ax,%eax
f010418f:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104194:	83 ec 0c             	sub    $0xc,%esp
f0104197:	50                   	push   %eax
f0104198:	e8 d3 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f010419d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01041a0:	90                   	nop
f01041a1:	c9                   	leave  
f01041a2:	c3                   	ret    

f01041a3 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f01041a3:	55                   	push   %ebp
f01041a4:	89 e5                	mov    %esp,%ebp
f01041a6:	83 ec 28             	sub    $0x28,%esp
f01041a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041ac:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01041af:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041b6:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041ba:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041c0:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041c1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01041c5:	83 ec 0c             	sub    $0xc,%esp
f01041c8:	50                   	push   %eax
f01041c9:	e8 ba 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01041ce:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041d1:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01041d7:	0f b7 c0             	movzwl %ax,%eax
f01041da:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041df:	83 ec 0c             	sub    $0xc,%esp
f01041e2:	50                   	push   %eax
f01041e3:	e8 88 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f01041e8:	83 c4 10             	add    $0x10,%esp

}
f01041eb:	90                   	nop
f01041ec:	c9                   	leave  
f01041ed:	c3                   	ret    

f01041ee <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01041ee:	55                   	push   %ebp
f01041ef:	89 e5                	mov    %esp,%ebp
f01041f1:	53                   	push   %ebx
f01041f2:	83 ec 24             	sub    $0x24,%esp
f01041f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01041f8:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041fb:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ff:	77 6c                	ja     f010426d <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0104201:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104205:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010420a:	99                   	cltd   
f010420b:	f7 fb                	idiv   %ebx
f010420d:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104213:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104217:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010421c:	99                   	cltd   
f010421d:	f7 fb                	idiv   %ebx
f010421f:	89 c3                	mov    %eax,%ebx
f0104221:	89 c8                	mov    %ecx,%eax
f0104223:	99                   	cltd   
f0104224:	f7 fb                	idiv   %ebx
f0104226:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010422c:	25 01 00 00 80       	and    $0x80000001,%eax
f0104231:	85 c0                	test   %eax,%eax
f0104233:	79 05                	jns    f010423a <kclock_set_quantum+0x4c>
f0104235:	48                   	dec    %eax
f0104236:	83 c8 fe             	or     $0xfffffffe,%eax
f0104239:	40                   	inc    %eax
f010423a:	83 f8 01             	cmp    $0x1,%eax
f010423d:	75 03                	jne    f0104242 <kclock_set_quantum+0x54>
			cnt++;
f010423f:	ff 45 f4             	incl   -0xc(%ebp)
f0104242:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104249:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010424d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104250:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104253:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104254:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104257:	0f b7 c0             	movzwl %ax,%eax
f010425a:	83 ec 0c             	sub    $0xc,%esp
f010425d:	50                   	push   %eax
f010425e:	e8 25 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104263:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104266:	e8 9d fe ff ff       	call   f0104108 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f010426b:	eb 16                	jmp    f0104283 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010426d:	6a 35                	push   $0x35
f010426f:	68 e4 55 13 f0       	push   $0xf01355e4
f0104274:	68 c9 00 00 00       	push   $0xc9
f0104279:	68 40 56 13 f0       	push   $0xf0135640
f010427e:	e8 78 bf ff ff       	call   f01001fb <_panic>
	}
}
f0104283:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104286:	c9                   	leave  
f0104287:	c3                   	ret    

f0104288 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104288:	55                   	push   %ebp
f0104289:	89 e5                	mov    %esp,%ebp
f010428b:	83 ec 14             	sub    $0x14,%esp
f010428e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104291:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104298:	0f b6 c0             	movzbl %al,%eax
f010429b:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01042a2:	88 45 f6             	mov    %al,-0xa(%ebp)
f01042a5:	8a 45 f6             	mov    -0xa(%ebp),%al
f01042a8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01042ab:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01042ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042af:	66 c1 e8 08          	shr    $0x8,%ax
f01042b3:	0f b6 c0             	movzbl %al,%eax
f01042b6:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01042bd:	88 45 f7             	mov    %al,-0x9(%ebp)
f01042c0:	8a 45 f7             	mov    -0x9(%ebp),%al
f01042c3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01042c6:	ee                   	out    %al,(%dx)
}
f01042c7:	90                   	nop
f01042c8:	c9                   	leave  
f01042c9:	c3                   	ret    

f01042ca <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01042ca:	55                   	push   %ebp
f01042cb:	89 e5                	mov    %esp,%ebp
f01042cd:	83 ec 20             	sub    $0x20,%esp
f01042d0:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042da:	89 c2                	mov    %eax,%edx
f01042dc:	ec                   	in     (%dx),%al
f01042dd:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01042e0:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042e3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042e6:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042f0:	89 c2                	mov    %eax,%edx
f01042f2:	ec                   	in     (%dx),%al
f01042f3:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042f6:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042f9:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104300:	c1 e0 08             	shl    $0x8,%eax
f0104303:	89 c2                	mov    %eax,%edx
f0104305:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104309:	09 d0                	or     %edx,%eax
f010430b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010430f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 30             	sub    $0x30,%esp
f010431a:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104321:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104324:	89 c2                	mov    %eax,%edx
f0104326:	ec                   	in     (%dx),%al
f0104327:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010432a:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010432d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104330:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104337:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010433b:	8a 45 dc             	mov    -0x24(%ebp),%al
f010433e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104341:	ee                   	out    %al,(%dx)
f0104342:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104349:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010434c:	89 c2                	mov    %eax,%edx
f010434e:	ec                   	in     (%dx),%al
f010434f:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104352:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104355:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104358:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010435f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104362:	89 c2                	mov    %eax,%edx
f0104364:	ec                   	in     (%dx),%al
f0104365:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104368:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010436b:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010436e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104372:	c1 e0 08             	shl    $0x8,%eax
f0104375:	89 c2                	mov    %eax,%edx
f0104377:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010437b:	09 d0                	or     %edx,%eax
f010437d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104381:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104385:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f010438c:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010438f:	8a 45 df             	mov    -0x21(%ebp),%al
f0104392:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104395:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104396:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104399:	c9                   	leave  
f010439a:	c3                   	ret    

f010439b <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010439b:	55                   	push   %ebp
f010439c:	89 e5                	mov    %esp,%ebp
f010439e:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043a3:	85 c0                	test   %eax,%eax
f01043a5:	75 07                	jne    f01043ae <isSchedMethodRR+0x13>
f01043a7:	b8 01 00 00 00       	mov    $0x1,%eax
f01043ac:	eb 05                	jmp    f01043b3 <isSchedMethodRR+0x18>
f01043ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01043b3:	5d                   	pop    %ebp
f01043b4:	c3                   	ret    

f01043b5 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01043b5:	55                   	push   %ebp
f01043b6:	89 e5                	mov    %esp,%ebp
f01043b8:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043bd:	83 f8 01             	cmp    $0x1,%eax
f01043c0:	75 07                	jne    f01043c9 <isSchedMethodMLFQ+0x14>
f01043c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01043c7:	eb 05                	jmp    f01043ce <isSchedMethodMLFQ+0x19>
f01043c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01043ce:	5d                   	pop    %ebp
f01043cf:	c3                   	ret    

f01043d0 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01043d0:	55                   	push   %ebp
f01043d1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043d7:	74 1d                	je     f01043f6 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01043d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01043e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01043ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043f6:	90                   	nop
f01043f7:	5d                   	pop    %ebp
f01043f8:	c3                   	ret    

f01043f9 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043f9:	55                   	push   %ebp
f01043fa:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104400:	74 08                	je     f010440a <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	8b 40 0c             	mov    0xc(%eax),%eax
f0104408:	eb 05                	jmp    f010440f <queue_size+0x16>
	}
	else
	{
		return 0;
f010440a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010440f:	5d                   	pop    %ebp
f0104410:	c3                   	ret    

f0104411 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104411:	55                   	push   %ebp
f0104412:	89 e5                	mov    %esp,%ebp
f0104414:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104417:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010441b:	74 66                	je     f0104483 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f010441d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104421:	75 14                	jne    f0104437 <enqueue+0x26>
f0104423:	83 ec 04             	sub    $0x4,%esp
f0104426:	68 54 56 13 f0       	push   $0xf0135654
f010442b:	6a 2f                	push   $0x2f
f010442d:	68 77 56 13 f0       	push   $0xf0135677
f0104432:	e8 c4 bd ff ff       	call   f01001fb <_panic>
f0104437:	8b 45 08             	mov    0x8(%ebp),%eax
f010443a:	8b 10                	mov    (%eax),%edx
f010443c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010443f:	89 50 44             	mov    %edx,0x44(%eax)
f0104442:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104445:	8b 40 44             	mov    0x44(%eax),%eax
f0104448:	85 c0                	test   %eax,%eax
f010444a:	74 0d                	je     f0104459 <enqueue+0x48>
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	8b 00                	mov    (%eax),%eax
f0104451:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104454:	89 50 48             	mov    %edx,0x48(%eax)
f0104457:	eb 09                	jmp    f0104462 <enqueue+0x51>
f0104459:	8b 45 08             	mov    0x8(%ebp),%eax
f010445c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010445f:	89 50 04             	mov    %edx,0x4(%eax)
f0104462:	8b 45 08             	mov    0x8(%ebp),%eax
f0104465:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104468:	89 10                	mov    %edx,(%eax)
f010446a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010446d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104474:	8b 45 08             	mov    0x8(%ebp),%eax
f0104477:	8b 40 0c             	mov    0xc(%eax),%eax
f010447a:	8d 50 01             	lea    0x1(%eax),%edx
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104483:	90                   	nop
f0104484:	c9                   	leave  
f0104485:	c3                   	ret    

f0104486 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104486:	55                   	push   %ebp
f0104487:	89 e5                	mov    %esp,%ebp
f0104489:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f010448c:	8b 45 08             	mov    0x8(%ebp),%eax
f010448f:	8b 40 04             	mov    0x4(%eax),%eax
f0104492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104499:	0f 84 8a 00 00 00    	je     f0104529 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f010449f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044a3:	75 14                	jne    f01044b9 <dequeue+0x33>
f01044a5:	83 ec 04             	sub    $0x4,%esp
f01044a8:	68 88 56 13 f0       	push   $0xf0135688
f01044ad:	6a 38                	push   $0x38
f01044af:	68 77 56 13 f0       	push   $0xf0135677
f01044b4:	e8 42 bd ff ff       	call   f01001fb <_panic>
f01044b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044bc:	8b 40 44             	mov    0x44(%eax),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 11                	je     f01044d4 <dequeue+0x4e>
f01044c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044c6:	8b 40 44             	mov    0x44(%eax),%eax
f01044c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044cc:	8b 52 48             	mov    0x48(%edx),%edx
f01044cf:	89 50 48             	mov    %edx,0x48(%eax)
f01044d2:	eb 0c                	jmp    f01044e0 <dequeue+0x5a>
f01044d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044d7:	8b 50 48             	mov    0x48(%eax),%edx
f01044da:	8b 45 08             	mov    0x8(%ebp),%eax
f01044dd:	89 50 04             	mov    %edx,0x4(%eax)
f01044e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044e3:	8b 40 48             	mov    0x48(%eax),%eax
f01044e6:	85 c0                	test   %eax,%eax
f01044e8:	74 11                	je     f01044fb <dequeue+0x75>
f01044ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ed:	8b 40 48             	mov    0x48(%eax),%eax
f01044f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044f3:	8b 52 44             	mov    0x44(%edx),%edx
f01044f6:	89 50 44             	mov    %edx,0x44(%eax)
f01044f9:	eb 0b                	jmp    f0104506 <dequeue+0x80>
f01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fe:	8b 50 44             	mov    0x44(%eax),%edx
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	89 10                	mov    %edx,(%eax)
f0104506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104509:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451a:	8b 45 08             	mov    0x8(%ebp),%eax
f010451d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104520:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104523:	8b 45 08             	mov    0x8(%ebp),%eax
f0104526:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104529:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f0104534:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104538:	0f 84 8a 00 00 00    	je     f01045c8 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f010453e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104542:	75 14                	jne    f0104558 <remove_from_queue+0x2a>
f0104544:	83 ec 04             	sub    $0x4,%esp
f0104547:	68 88 56 13 f0       	push   $0xf0135688
f010454c:	6a 41                	push   $0x41
f010454e:	68 77 56 13 f0       	push   $0xf0135677
f0104553:	e8 a3 bc ff ff       	call   f01001fb <_panic>
f0104558:	8b 45 0c             	mov    0xc(%ebp),%eax
f010455b:	8b 40 44             	mov    0x44(%eax),%eax
f010455e:	85 c0                	test   %eax,%eax
f0104560:	74 11                	je     f0104573 <remove_from_queue+0x45>
f0104562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104565:	8b 40 44             	mov    0x44(%eax),%eax
f0104568:	8b 55 0c             	mov    0xc(%ebp),%edx
f010456b:	8b 52 48             	mov    0x48(%edx),%edx
f010456e:	89 50 48             	mov    %edx,0x48(%eax)
f0104571:	eb 0c                	jmp    f010457f <remove_from_queue+0x51>
f0104573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104576:	8b 50 48             	mov    0x48(%eax),%edx
f0104579:	8b 45 08             	mov    0x8(%ebp),%eax
f010457c:	89 50 04             	mov    %edx,0x4(%eax)
f010457f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104582:	8b 40 48             	mov    0x48(%eax),%eax
f0104585:	85 c0                	test   %eax,%eax
f0104587:	74 11                	je     f010459a <remove_from_queue+0x6c>
f0104589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010458c:	8b 40 48             	mov    0x48(%eax),%eax
f010458f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104592:	8b 52 44             	mov    0x44(%edx),%edx
f0104595:	89 50 44             	mov    %edx,0x44(%eax)
f0104598:	eb 0b                	jmp    f01045a5 <remove_from_queue+0x77>
f010459a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010459d:	8b 50 44             	mov    0x44(%eax),%edx
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	89 10                	mov    %edx,(%eax)
f01045a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01045bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01045c8:	90                   	nop
f01045c9:	c9                   	leave  
f01045ca:	c3                   	ret    

f01045cb <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01045cb:	55                   	push   %ebp
f01045cc:	89 e5                	mov    %esp,%ebp
f01045ce:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f01045d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 00                	mov    (%eax),%eax
f01045dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045e0:	eb 19                	jmp    f01045fb <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f01045e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045e5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01045e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01045eb:	75 05                	jne    f01045f2 <find_env_in_queue+0x27>
		{
			return ptr_env;
f01045ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045f0:	eb 37                	jmp    f0104629 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01045f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f5:	8b 40 08             	mov    0x8(%eax),%eax
f01045f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045ff:	74 08                	je     f0104609 <find_env_in_queue+0x3e>
f0104601:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104604:	8b 40 44             	mov    0x44(%eax),%eax
f0104607:	eb 05                	jmp    f010460e <find_env_in_queue+0x43>
f0104609:	b8 00 00 00 00       	mov    $0x0,%eax
f010460e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104611:	89 42 08             	mov    %eax,0x8(%edx)
f0104614:	8b 45 08             	mov    0x8(%ebp),%eax
f0104617:	8b 40 08             	mov    0x8(%eax),%eax
f010461a:	85 c0                	test   %eax,%eax
f010461c:	75 c4                	jne    f01045e2 <find_env_in_queue+0x17>
f010461e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104622:	75 be                	jne    f01045e2 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104624:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104629:	c9                   	leave  
f010462a:	c3                   	ret    

f010462b <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010462b:	55                   	push   %ebp
f010462c:	89 e5                	mov    %esp,%ebp
f010462e:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104631:	83 ec 04             	sub    $0x4,%esp
f0104634:	68 a8 56 13 f0       	push   $0xf01356a8
f0104639:	6a 58                	push   $0x58
f010463b:	68 77 56 13 f0       	push   $0xf0135677
f0104640:	e8 b6 bb ff ff       	call   f01001fb <_panic>

f0104645 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104645:	55                   	push   %ebp
f0104646:	89 e5                	mov    %esp,%ebp
f0104648:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010464b:	e8 ef b9 02 00       	call   f013003f <chk1>
	scheduler_status = SCH_STARTED;
f0104650:	c7 05 58 7b 65 f0 01 	movl   $0x1,0xf0657b58
f0104657:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010465a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104661:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f0104666:	85 c0                	test   %eax,%eax
f0104668:	75 4d                	jne    f01046b7 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010466a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010466f:	85 c0                	test   %eax,%eax
f0104671:	74 18                	je     f010468b <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104673:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0104679:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010467e:	83 ec 08             	sub    $0x8,%esp
f0104681:	52                   	push   %edx
f0104682:	50                   	push   %eax
f0104683:	e8 89 fd ff ff       	call   f0104411 <enqueue>
f0104688:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010468b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104690:	83 ec 0c             	sub    $0xc,%esp
f0104693:	50                   	push   %eax
f0104694:	e8 ed fd ff ff       	call   f0104486 <dequeue>
f0104699:	83 c4 10             	add    $0x10,%esp
f010469c:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010469f:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f01046a4:	8a 00                	mov    (%eax),%al
f01046a6:	0f b6 c0             	movzbl %al,%eax
f01046a9:	83 ec 0c             	sub    $0xc,%esp
f01046ac:	50                   	push   %eax
f01046ad:	e8 3c fb ff ff       	call   f01041ee <kclock_set_quantum>
f01046b2:	83 c4 10             	add    $0x10,%esp
f01046b5:	eb 12                	jmp    f01046c9 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01046b7:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01046bc:	83 f8 01             	cmp    $0x1,%eax
f01046bf:	75 08                	jne    f01046c9 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01046c1:	e8 65 ff ff ff       	call   f010462b <fos_scheduler_MLFQ>
f01046c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01046c9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01046ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01046d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046d4:	a3 14 72 65 f0       	mov    %eax,0xf0657214
	chk2(next_env) ;
f01046d9:	83 ec 0c             	sub    $0xc,%esp
f01046dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01046df:	e8 98 b9 02 00       	call   f013007c <chk2>
f01046e4:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01046e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01046ea:	a3 14 72 65 f0       	mov    %eax,0xf0657214

	//sched_print_all();

	if(next_env != NULL)
f01046ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046f3:	74 0b                	je     f0104700 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01046f5:	83 ec 0c             	sub    $0xc,%esp
f01046f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01046fb:	e8 fa 52 00 00       	call   f01099fa <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0104700:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0104707:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010470a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010470f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0104712:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104715:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104718:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f010471f:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104722:	83 ec 0c             	sub    $0xc,%esp
f0104725:	6a 00                	push   $0x0
f0104727:	e8 7c c5 ff ff       	call   f0100ca8 <run_command_prompt>
f010472c:	83 c4 10             	add    $0x10,%esp
f010472f:	eb f1                	jmp    f0104722 <fos_scheduler+0xdd>

f0104731 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104731:	55                   	push   %ebp
f0104732:	89 e5                	mov    %esp,%ebp
f0104734:	83 ec 18             	sub    $0x18,%esp
f0104737:	8b 45 08             	mov    0x8(%ebp),%eax
f010473a:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f010473d:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0104744:	00 00 00 
	scheduler_method = SCH_RR;
f0104747:	c7 05 4c 7b 65 f0 00 	movl   $0x0,0xf0657b4c
f010474e:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104751:	c6 05 80 7b 65 f0 01 	movb   $0x1,0xf0657b80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104758:	e8 db 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010475d:	83 ec 0c             	sub    $0xc,%esp
f0104760:	6a 10                	push   $0x10
f0104762:	e8 ac 30 00 00       	call   f0107813 <kmalloc>
f0104767:	83 c4 10             	add    $0x10,%esp
f010476a:	a3 e8 7a 65 f0       	mov    %eax,0xf0657ae8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010476f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104774:	0f b6 c0             	movzbl %al,%eax
f0104777:	83 ec 0c             	sub    $0xc,%esp
f010477a:	50                   	push   %eax
f010477b:	e8 93 30 00 00       	call   f0107813 <kmalloc>
f0104780:	83 c4 10             	add    $0x10,%esp
f0104783:	a3 2c 7b 65 f0       	mov    %eax,0xf0657b2c
#endif
	quantums[0] = quantum;
f0104788:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010478d:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104790:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0104792:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104797:	8a 00                	mov    (%eax),%al
f0104799:	0f b6 c0             	movzbl %al,%eax
f010479c:	83 ec 0c             	sub    $0xc,%esp
f010479f:	50                   	push   %eax
f01047a0:	e8 49 fa ff ff       	call   f01041ee <kclock_set_quantum>
f01047a5:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01047a8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01047ad:	83 ec 0c             	sub    $0xc,%esp
f01047b0:	50                   	push   %eax
f01047b1:	e8 1a fc ff ff       	call   f01043d0 <init_queue>
f01047b6:	83 c4 10             	add    $0x10,%esp
}
f01047b9:	90                   	nop
f01047ba:	c9                   	leave  
f01047bb:	c3                   	ret    

f01047bc <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01047bc:	55                   	push   %ebp
f01047bd:	89 e5                	mov    %esp,%ebp
f01047bf:	83 ec 18             	sub    $0x18,%esp
f01047c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c5:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01047c8:	e8 6b 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01047cd:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f01047d4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01047d7:	c7 05 4c 7b 65 f0 01 	movl   $0x1,0xf0657b4c
f01047de:	00 00 00 
	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01047e1:	83 ec 04             	sub    $0x4,%esp
f01047e4:	68 dc 56 13 f0       	push   $0xf01356dc
f01047e9:	68 c6 00 00 00       	push   $0xc6
f01047ee:	68 77 56 13 f0       	push   $0xf0135677
f01047f3:	e8 03 ba ff ff       	call   f01001fb <_panic>

f01047f8 <sched_init>:
#endif
}


void sched_init()
{
f01047f8:	55                   	push   %ebp
f01047f9:	89 e5                	mov    %esp,%ebp
f01047fb:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01047fe:	c7 05 08 7b 65 f0 00 	movl   $0x0,0xf0657b08
f0104805:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	6a 0a                	push   $0xa
f010480d:	e8 1f ff ff ff       	call   f0104731 <sched_init_RR>
f0104812:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104815:	83 ec 0c             	sub    $0xc,%esp
f0104818:	68 3c 7b 65 f0       	push   $0xf0657b3c
f010481d:	e8 ae fb ff ff       	call   f01043d0 <init_queue>
f0104822:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104825:	83 ec 0c             	sub    $0xc,%esp
f0104828:	68 f4 7a 65 f0       	push   $0xf0657af4
f010482d:	e8 9e fb ff ff       	call   f01043d0 <init_queue>
f0104832:	83 c4 10             	add    $0x10,%esp
}
f0104835:	90                   	nop
f0104836:	c9                   	leave  
f0104837:	c3                   	ret    

f0104838 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0104838:	55                   	push   %ebp
f0104839:	89 e5                	mov    %esp,%ebp
f010483b:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f010483e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104843:	85 c0                	test   %eax,%eax
f0104845:	74 11                	je     f0104858 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104847:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010484c:	83 ec 0c             	sub    $0xc,%esp
f010484f:	50                   	push   %eax
f0104850:	e8 89 30 00 00       	call   f01078de <kfree>
f0104855:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0104858:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010485d:	85 c0                	test   %eax,%eax
f010485f:	74 11                	je     f0104872 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0104861:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104866:	83 ec 0c             	sub    $0xc,%esp
f0104869:	50                   	push   %eax
f010486a:	e8 6f 30 00 00       	call   f01078de <kfree>
f010486f:	83 c4 10             	add    $0x10,%esp
}
f0104872:	90                   	nop
f0104873:	c9                   	leave  
f0104874:	c3                   	ret    

f0104875 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104875:	55                   	push   %ebp
f0104876:	89 e5                	mov    %esp,%ebp
f0104878:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010487b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010487f:	74 1e                	je     f010489f <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104881:	8b 45 08             	mov    0x8(%ebp),%eax
f0104884:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010488b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104890:	83 ec 08             	sub    $0x8,%esp
f0104893:	ff 75 08             	pushl  0x8(%ebp)
f0104896:	50                   	push   %eax
f0104897:	e8 75 fb ff ff       	call   f0104411 <enqueue>
f010489c:	83 c4 10             	add    $0x10,%esp
	}
}
f010489f:	90                   	nop
f01048a0:	c9                   	leave  
f01048a1:	c3                   	ret    

f01048a2 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01048a2:	55                   	push   %ebp
f01048a3:	89 e5                	mov    %esp,%ebp
f01048a5:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01048a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ac:	0f 84 fe 00 00 00    	je     f01049b0 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048b9:	e9 e1 00 00 00       	jmp    f010499f <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01048be:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048c4:	89 c2                	mov    %eax,%edx
f01048c6:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01048cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01048ce:	c1 e1 04             	shl    $0x4,%ecx
f01048d1:	01 c8                	add    %ecx,%eax
f01048d3:	52                   	push   %edx
f01048d4:	50                   	push   %eax
f01048d5:	e8 f1 fc ff ff       	call   f01045cb <find_env_in_queue>
f01048da:	83 c4 08             	add    $0x8,%esp
f01048dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01048e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01048e4:	0f 84 b2 00 00 00    	je     f010499c <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01048ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ee:	75 17                	jne    f0104907 <sched_remove_ready+0x65>
f01048f0:	83 ec 04             	sub    $0x4,%esp
f01048f3:	68 88 56 13 f0       	push   $0xf0135688
f01048f8:	68 f5 00 00 00       	push   $0xf5
f01048fd:	68 77 56 13 f0       	push   $0xf0135677
f0104902:	e8 f4 b8 ff ff       	call   f01001fb <_panic>
f0104907:	8b 45 08             	mov    0x8(%ebp),%eax
f010490a:	8b 40 44             	mov    0x44(%eax),%eax
f010490d:	85 c0                	test   %eax,%eax
f010490f:	74 11                	je     f0104922 <sched_remove_ready+0x80>
f0104911:	8b 45 08             	mov    0x8(%ebp),%eax
f0104914:	8b 40 44             	mov    0x44(%eax),%eax
f0104917:	8b 55 08             	mov    0x8(%ebp),%edx
f010491a:	8b 52 48             	mov    0x48(%edx),%edx
f010491d:	89 50 48             	mov    %edx,0x48(%eax)
f0104920:	eb 16                	jmp    f0104938 <sched_remove_ready+0x96>
f0104922:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010492a:	c1 e2 04             	shl    $0x4,%edx
f010492d:	01 c2                	add    %eax,%edx
f010492f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104932:	8b 40 48             	mov    0x48(%eax),%eax
f0104935:	89 42 04             	mov    %eax,0x4(%edx)
f0104938:	8b 45 08             	mov    0x8(%ebp),%eax
f010493b:	8b 40 48             	mov    0x48(%eax),%eax
f010493e:	85 c0                	test   %eax,%eax
f0104940:	74 11                	je     f0104953 <sched_remove_ready+0xb1>
f0104942:	8b 45 08             	mov    0x8(%ebp),%eax
f0104945:	8b 40 48             	mov    0x48(%eax),%eax
f0104948:	8b 55 08             	mov    0x8(%ebp),%edx
f010494b:	8b 52 44             	mov    0x44(%edx),%edx
f010494e:	89 50 44             	mov    %edx,0x44(%eax)
f0104951:	eb 15                	jmp    f0104968 <sched_remove_ready+0xc6>
f0104953:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495b:	c1 e2 04             	shl    $0x4,%edx
f010495e:	01 c2                	add    %eax,%edx
f0104960:	8b 45 08             	mov    0x8(%ebp),%eax
f0104963:	8b 40 44             	mov    0x44(%eax),%eax
f0104966:	89 02                	mov    %eax,(%edx)
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104972:	8b 45 08             	mov    0x8(%ebp),%eax
f0104975:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010497c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104984:	c1 e2 04             	shl    $0x4,%edx
f0104987:	01 d0                	add    %edx,%eax
f0104989:	8b 50 0c             	mov    0xc(%eax),%edx
f010498c:	4a                   	dec    %edx
f010498d:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104990:	8b 45 08             	mov    0x8(%ebp),%eax
f0104993:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f010499a:	eb 14                	jmp    f01049b0 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010499c:	ff 45 f4             	incl   -0xc(%ebp)
f010499f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01049a4:	0f b6 c0             	movzbl %al,%eax
f01049a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049aa:	0f 8f 0e ff ff ff    	jg     f01048be <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01049b0:	c9                   	leave  
f01049b1:	c3                   	ret    

f01049b2 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01049b2:	55                   	push   %ebp
f01049b3:	89 e5                	mov    %esp,%ebp
f01049b5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bc:	74 1d                	je     f01049db <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f01049be:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f01049c8:	83 ec 08             	sub    $0x8,%esp
f01049cb:	ff 75 08             	pushl  0x8(%ebp)
f01049ce:	68 3c 7b 65 f0       	push   $0xf0657b3c
f01049d3:	e8 39 fa ff ff       	call   f0104411 <enqueue>
f01049d8:	83 c4 10             	add    $0x10,%esp
	}
}
f01049db:	90                   	nop
f01049dc:	c9                   	leave  
f01049dd:	c3                   	ret    

f01049de <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f01049de:	55                   	push   %ebp
f01049df:	89 e5                	mov    %esp,%ebp
f01049e1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	0f 84 92 00 00 00    	je     f0104a80 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01049ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f2:	75 17                	jne    f0104a0b <sched_remove_new+0x2d>
f01049f4:	83 ec 04             	sub    $0x4,%esp
f01049f7:	68 88 56 13 f0       	push   $0xf0135688
f01049fc:	68 09 01 00 00       	push   $0x109
f0104a01:	68 77 56 13 f0       	push   $0xf0135677
f0104a06:	e8 f0 b7 ff ff       	call   f01001fb <_panic>
f0104a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104a11:	85 c0                	test   %eax,%eax
f0104a13:	74 11                	je     f0104a26 <sched_remove_new+0x48>
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a1e:	8b 52 48             	mov    0x48(%edx),%edx
f0104a21:	89 50 48             	mov    %edx,0x48(%eax)
f0104a24:	eb 0b                	jmp    f0104a31 <sched_remove_new+0x53>
f0104a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a29:	8b 40 48             	mov    0x48(%eax),%eax
f0104a2c:	a3 40 7b 65 f0       	mov    %eax,0xf0657b40
f0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a34:	8b 40 48             	mov    0x48(%eax),%eax
f0104a37:	85 c0                	test   %eax,%eax
f0104a39:	74 11                	je     f0104a4c <sched_remove_new+0x6e>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a41:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a44:	8b 52 44             	mov    0x44(%edx),%edx
f0104a47:	89 50 44             	mov    %edx,0x44(%eax)
f0104a4a:	eb 0b                	jmp    f0104a57 <sched_remove_new+0x79>
f0104a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4f:	8b 40 44             	mov    0x44(%eax),%eax
f0104a52:	a3 3c 7b 65 f0       	mov    %eax,0xf0657b3c
f0104a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a64:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a6b:	a1 48 7b 65 f0       	mov    0xf0657b48,%eax
f0104a70:	48                   	dec    %eax
f0104a71:	a3 48 7b 65 f0       	mov    %eax,0xf0657b48
		env->env_status = ENV_UNKNOWN;
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104a80:	90                   	nop
f0104a81:	c9                   	leave  
f0104a82:	c3                   	ret    

f0104a83 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104a83:	55                   	push   %ebp
f0104a84:	89 e5                	mov    %esp,%ebp
f0104a86:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a8d:	74 34                	je     f0104ac3 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104a8f:	e8 26 92 00 00       	call   f010dcba <isBufferingEnabled>
f0104a94:	84 c0                	test   %al,%al
f0104a96:	74 0e                	je     f0104aa6 <sched_insert_exit+0x23>
f0104a98:	83 ec 0c             	sub    $0xc,%esp
f0104a9b:	ff 75 08             	pushl  0x8(%ebp)
f0104a9e:	e8 7c 63 00 00       	call   f010ae1f <cleanup_buffers>
f0104aa3:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa9:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ab0:	83 ec 08             	sub    $0x8,%esp
f0104ab3:	ff 75 08             	pushl  0x8(%ebp)
f0104ab6:	68 f4 7a 65 f0       	push   $0xf0657af4
f0104abb:	e8 51 f9 ff ff       	call   f0104411 <enqueue>
f0104ac0:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ac3:	90                   	nop
f0104ac4:	c9                   	leave  
f0104ac5:	c3                   	ret    

f0104ac6 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104ac6:	55                   	push   %ebp
f0104ac7:	89 e5                	mov    %esp,%ebp
f0104ac9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ad0:	0f 84 92 00 00 00    	je     f0104b68 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ad6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ada:	75 17                	jne    f0104af3 <sched_remove_exit+0x2d>
f0104adc:	83 ec 04             	sub    $0x4,%esp
f0104adf:	68 88 56 13 f0       	push   $0xf0135688
f0104ae4:	68 1b 01 00 00       	push   $0x11b
f0104ae9:	68 77 56 13 f0       	push   $0xf0135677
f0104aee:	e8 08 b7 ff ff       	call   f01001fb <_panic>
f0104af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af6:	8b 40 44             	mov    0x44(%eax),%eax
f0104af9:	85 c0                	test   %eax,%eax
f0104afb:	74 11                	je     f0104b0e <sched_remove_exit+0x48>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 44             	mov    0x44(%eax),%eax
f0104b03:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b06:	8b 52 48             	mov    0x48(%edx),%edx
f0104b09:	89 50 48             	mov    %edx,0x48(%eax)
f0104b0c:	eb 0b                	jmp    f0104b19 <sched_remove_exit+0x53>
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 40 48             	mov    0x48(%eax),%eax
f0104b14:	a3 f8 7a 65 f0       	mov    %eax,0xf0657af8
f0104b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b1f:	85 c0                	test   %eax,%eax
f0104b21:	74 11                	je     f0104b34 <sched_remove_exit+0x6e>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 48             	mov    0x48(%eax),%eax
f0104b29:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b2c:	8b 52 44             	mov    0x44(%edx),%edx
f0104b2f:	89 50 44             	mov    %edx,0x44(%eax)
f0104b32:	eb 0b                	jmp    f0104b3f <sched_remove_exit+0x79>
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	8b 40 44             	mov    0x44(%eax),%eax
f0104b3a:	a3 f4 7a 65 f0       	mov    %eax,0xf0657af4
f0104b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b53:	a1 00 7b 65 f0       	mov    0xf0657b00,%eax
f0104b58:	48                   	dec    %eax
f0104b59:	a3 00 7b 65 f0       	mov    %eax,0xf0657b00
		env->env_status = ENV_UNKNOWN;
f0104b5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b61:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b68:	90                   	nop
f0104b69:	c9                   	leave  
f0104b6a:	c3                   	ret    

f0104b6b <sched_print_all>:

void sched_print_all()
{
f0104b6b:	55                   	push   %ebp
f0104b6c:	89 e5                	mov    %esp,%ebp
f0104b6e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104b71:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b76:	85 c0                	test   %eax,%eax
f0104b78:	74 6c                	je     f0104be6 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104b7a:	83 ec 0c             	sub    $0xc,%esp
f0104b7d:	68 0c 57 13 f0       	push   $0xf013570c
f0104b82:	e8 fb c0 ff ff       	call   f0100c82 <cprintf>
f0104b87:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104b8a:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b92:	eb 29                	jmp    f0104bbd <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b97:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ba3:	83 ec 04             	sub    $0x4,%esp
f0104ba6:	52                   	push   %edx
f0104ba7:	50                   	push   %eax
f0104ba8:	68 2e 57 13 f0       	push   $0xf013572e
f0104bad:	e8 d0 c0 ff ff       	call   f0100c82 <cprintf>
f0104bb2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104bb5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc1:	74 08                	je     f0104bcb <sched_print_all+0x60>
f0104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc6:	8b 40 44             	mov    0x44(%eax),%eax
f0104bc9:	eb 05                	jmp    f0104bd0 <sched_print_all+0x65>
f0104bcb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd0:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104bd5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bda:	85 c0                	test   %eax,%eax
f0104bdc:	75 b6                	jne    f0104b94 <sched_print_all+0x29>
f0104bde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104be2:	75 b0                	jne    f0104b94 <sched_print_all+0x29>
f0104be4:	eb 10                	jmp    f0104bf6 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104be6:	83 ec 0c             	sub    $0xc,%esp
f0104be9:	68 38 57 13 f0       	push   $0xf0135738
f0104bee:	e8 8f c0 ff ff       	call   f0100c82 <cprintf>
f0104bf3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104bf6:	83 ec 0c             	sub    $0xc,%esp
f0104bf9:	68 54 57 13 f0       	push   $0xf0135754
f0104bfe:	e8 7f c0 ff ff       	call   f0100c82 <cprintf>
f0104c03:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104c0d:	e9 ca 00 00 00       	jmp    f0104cdc <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104c12:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c1a:	c1 e2 04             	shl    $0x4,%edx
f0104c1d:	01 d0                	add    %edx,%eax
f0104c1f:	8b 00                	mov    (%eax),%eax
f0104c21:	85 c0                	test   %eax,%eax
f0104c23:	0f 84 8d 00 00 00    	je     f0104cb6 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104c29:	83 ec 08             	sub    $0x8,%esp
f0104c2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c2f:	68 88 57 13 f0       	push   $0xf0135788
f0104c34:	e8 49 c0 ff ff       	call   f0100c82 <cprintf>
f0104c39:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c3c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c44:	c1 e2 04             	shl    $0x4,%edx
f0104c47:	01 d0                	add    %edx,%eax
f0104c49:	8b 00                	mov    (%eax),%eax
f0104c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c4e:	eb 34                	jmp    f0104c84 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c53:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c5f:	83 ec 04             	sub    $0x4,%esp
f0104c62:	52                   	push   %edx
f0104c63:	50                   	push   %eax
f0104c64:	68 2e 57 13 f0       	push   $0xf013572e
f0104c69:	e8 14 c0 ff ff       	call   f0100c82 <cprintf>
f0104c6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c71:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c76:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c79:	c1 e2 04             	shl    $0x4,%edx
f0104c7c:	01 d0                	add    %edx,%eax
f0104c7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c8c:	c1 e2 04             	shl    $0x4,%edx
f0104c8f:	01 d0                	add    %edx,%eax
f0104c91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c95:	74 08                	je     f0104c9f <sched_print_all+0x134>
f0104c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9a:	8b 52 44             	mov    0x44(%edx),%edx
f0104c9d:	eb 05                	jmp    f0104ca4 <sched_print_all+0x139>
f0104c9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0104ca4:	89 50 08             	mov    %edx,0x8(%eax)
f0104ca7:	8b 40 08             	mov    0x8(%eax),%eax
f0104caa:	85 c0                	test   %eax,%eax
f0104cac:	75 a2                	jne    f0104c50 <sched_print_all+0xe5>
f0104cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb2:	75 9c                	jne    f0104c50 <sched_print_all+0xe5>
f0104cb4:	eb 13                	jmp    f0104cc9 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104cb6:	83 ec 08             	sub    $0x8,%esp
f0104cb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104cbc:	68 b0 57 13 f0       	push   $0xf01357b0
f0104cc1:	e8 bc bf ff ff       	call   f0100c82 <cprintf>
f0104cc6:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104cc9:	83 ec 0c             	sub    $0xc,%esp
f0104ccc:	68 54 57 13 f0       	push   $0xf0135754
f0104cd1:	e8 ac bf ff ff       	call   f0100c82 <cprintf>
f0104cd6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cd9:	ff 45 f0             	incl   -0x10(%ebp)
f0104cdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104ce1:	0f b6 c0             	movzbl %al,%eax
f0104ce4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104ce7:	0f 8f 25 ff ff ff    	jg     f0104c12 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104ced:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104cf2:	85 c0                	test   %eax,%eax
f0104cf4:	74 6c                	je     f0104d62 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104cf6:	83 ec 0c             	sub    $0xc,%esp
f0104cf9:	68 d4 57 13 f0       	push   $0xf01357d4
f0104cfe:	e8 7f bf ff ff       	call   f0100c82 <cprintf>
f0104d03:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d06:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d0e:	eb 29                	jmp    f0104d39 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d13:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1f:	83 ec 04             	sub    $0x4,%esp
f0104d22:	52                   	push   %edx
f0104d23:	50                   	push   %eax
f0104d24:	68 2e 57 13 f0       	push   $0xf013572e
f0104d29:	e8 54 bf ff ff       	call   f0100c82 <cprintf>
f0104d2e:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d31:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d3d:	74 08                	je     f0104d47 <sched_print_all+0x1dc>
f0104d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d42:	8b 40 44             	mov    0x44(%eax),%eax
f0104d45:	eb 05                	jmp    f0104d4c <sched_print_all+0x1e1>
f0104d47:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d4c:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0104d51:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d56:	85 c0                	test   %eax,%eax
f0104d58:	75 b6                	jne    f0104d10 <sched_print_all+0x1a5>
f0104d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d5e:	75 b0                	jne    f0104d10 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104d60:	eb 10                	jmp    f0104d72 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104d62:	83 ec 0c             	sub    $0xc,%esp
f0104d65:	68 f6 57 13 f0       	push   $0xf01357f6
f0104d6a:	e8 13 bf ff ff       	call   f0100c82 <cprintf>
f0104d6f:	83 c4 10             	add    $0x10,%esp
	}
}
f0104d72:	90                   	nop
f0104d73:	c9                   	leave  
f0104d74:	c3                   	ret    

f0104d75 <sched_run_all>:

void sched_run_all()
{
f0104d75:	55                   	push   %ebp
f0104d76:	89 e5                	mov    %esp,%ebp
f0104d78:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104d7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104d82:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d8a:	eb 24                	jmp    f0104db0 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104d8c:	83 ec 0c             	sub    $0xc,%esp
f0104d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d92:	e8 47 fc ff ff       	call   f01049de <sched_remove_new>
f0104d97:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104d9a:	83 ec 0c             	sub    $0xc,%esp
f0104d9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104da0:	e8 d0 fa ff ff       	call   f0104875 <sched_insert_ready>
f0104da5:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104da8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104db0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db4:	74 08                	je     f0104dbe <sched_run_all+0x49>
f0104db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db9:	8b 40 44             	mov    0x44(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <sched_run_all+0x4e>
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc3:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104dc8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dcd:	85 c0                	test   %eax,%eax
f0104dcf:	75 bb                	jne    f0104d8c <sched_run_all+0x17>
f0104dd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd5:	75 b5                	jne    f0104d8c <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104dd7:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f0104ddc:	85 c0                	test   %eax,%eax
f0104dde:	75 05                	jne    f0104de5 <sched_run_all+0x70>
		fos_scheduler();
f0104de0:	e8 60 f8 ff ff       	call   f0104645 <fos_scheduler>
}
f0104de5:	90                   	nop
f0104de6:	c9                   	leave  
f0104de7:	c3                   	ret    

f0104de8 <sched_kill_all>:

void sched_kill_all()
{
f0104de8:	55                   	push   %ebp
f0104de9:	89 e5                	mov    %esp,%ebp
f0104deb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104dee:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104df3:	85 c0                	test   %eax,%eax
f0104df5:	0f 84 98 00 00 00    	je     f0104e93 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104dfb:	83 ec 0c             	sub    $0xc,%esp
f0104dfe:	68 14 58 13 f0       	push   $0xf0135814
f0104e03:	e8 7a be ff ff       	call   f0100c82 <cprintf>
f0104e08:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e0b:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e13:	eb 55                	jmp    f0104e6a <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e18:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e24:	83 ec 04             	sub    $0x4,%esp
f0104e27:	52                   	push   %edx
f0104e28:	50                   	push   %eax
f0104e29:	68 40 58 13 f0       	push   $0xf0135840
f0104e2e:	e8 4f be ff ff       	call   f0100c82 <cprintf>
f0104e33:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104e36:	83 ec 0c             	sub    $0xc,%esp
f0104e39:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e3c:	e8 9d fb ff ff       	call   f01049de <sched_remove_new>
f0104e41:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104e44:	83 ec 0c             	sub    $0xc,%esp
f0104e47:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e4a:	e8 ff 4b 00 00       	call   f0109a4e <env_free>
f0104e4f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104e52:	83 ec 0c             	sub    $0xc,%esp
f0104e55:	68 53 58 13 f0       	push   $0xf0135853
f0104e5a:	e8 23 be ff ff       	call   f0100c82 <cprintf>
f0104e5f:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e62:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e6e:	74 08                	je     f0104e78 <sched_kill_all+0x90>
f0104e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e73:	8b 40 44             	mov    0x44(%eax),%eax
f0104e76:	eb 05                	jmp    f0104e7d <sched_kill_all+0x95>
f0104e78:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e7d:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104e82:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	75 8a                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8f:	75 84                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e91:	eb 10                	jmp    f0104ea3 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104e93:	83 ec 0c             	sub    $0xc,%esp
f0104e96:	68 59 58 13 f0       	push   $0xf0135859
f0104e9b:	e8 e2 bd ff ff       	call   f0100c82 <cprintf>
f0104ea0:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ea3:	83 ec 0c             	sub    $0xc,%esp
f0104ea6:	68 54 57 13 f0       	push   $0xf0135754
f0104eab:	e8 d2 bd ff ff       	call   f0100c82 <cprintf>
f0104eb0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104eb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104eba:	e9 99 01 00 00       	jmp    f0105058 <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ebf:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ec4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ec7:	c1 e2 04             	shl    $0x4,%edx
f0104eca:	01 d0                	add    %edx,%eax
f0104ecc:	8b 00                	mov    (%eax),%eax
f0104ece:	85 c0                	test   %eax,%eax
f0104ed0:	0f 84 5c 01 00 00    	je     f0105032 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104ed6:	83 ec 08             	sub    $0x8,%esp
f0104ed9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104edc:	68 74 58 13 f0       	push   $0xf0135874
f0104ee1:	e8 9c bd ff ff       	call   f0100c82 <cprintf>
f0104ee6:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ee9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104eee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ef1:	c1 e2 04             	shl    $0x4,%edx
f0104ef4:	01 d0                	add    %edx,%eax
f0104ef6:	8b 00                	mov    (%eax),%eax
f0104ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104efb:	e9 f8 00 00 00       	jmp    f0104ff8 <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f03:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f0f:	83 ec 04             	sub    $0x4,%esp
f0104f12:	52                   	push   %edx
f0104f13:	50                   	push   %eax
f0104f14:	68 40 58 13 f0       	push   $0xf0135840
f0104f19:	e8 64 bd ff ff       	call   f0100c82 <cprintf>
f0104f1e:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104f21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f25:	75 17                	jne    f0104f3e <sched_kill_all+0x156>
f0104f27:	83 ec 04             	sub    $0x4,%esp
f0104f2a:	68 88 56 13 f0       	push   $0xf0135688
f0104f2f:	68 76 01 00 00       	push   $0x176
f0104f34:	68 77 56 13 f0       	push   $0xf0135677
f0104f39:	e8 bd b2 ff ff       	call   f01001fb <_panic>
f0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f41:	8b 40 44             	mov    0x44(%eax),%eax
f0104f44:	85 c0                	test   %eax,%eax
f0104f46:	74 11                	je     f0104f59 <sched_kill_all+0x171>
f0104f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f51:	8b 52 48             	mov    0x48(%edx),%edx
f0104f54:	89 50 48             	mov    %edx,0x48(%eax)
f0104f57:	eb 16                	jmp    f0104f6f <sched_kill_all+0x187>
f0104f59:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f61:	c1 e2 04             	shl    $0x4,%edx
f0104f64:	01 c2                	add    %eax,%edx
f0104f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f69:	8b 40 48             	mov    0x48(%eax),%eax
f0104f6c:	89 42 04             	mov    %eax,0x4(%edx)
f0104f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f72:	8b 40 48             	mov    0x48(%eax),%eax
f0104f75:	85 c0                	test   %eax,%eax
f0104f77:	74 11                	je     f0104f8a <sched_kill_all+0x1a2>
f0104f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f7c:	8b 40 48             	mov    0x48(%eax),%eax
f0104f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f82:	8b 52 44             	mov    0x44(%edx),%edx
f0104f85:	89 50 44             	mov    %edx,0x44(%eax)
f0104f88:	eb 15                	jmp    f0104f9f <sched_kill_all+0x1b7>
f0104f8a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f92:	c1 e2 04             	shl    $0x4,%edx
f0104f95:	01 c2                	add    %eax,%edx
f0104f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f9d:	89 02                	mov    %eax,(%edx)
f0104f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fa2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fbb:	c1 e2 04             	shl    $0x4,%edx
f0104fbe:	01 d0                	add    %edx,%eax
f0104fc0:	8b 50 0c             	mov    0xc(%eax),%edx
f0104fc3:	4a                   	dec    %edx
f0104fc4:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0104fc7:	83 ec 0c             	sub    $0xc,%esp
f0104fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fcd:	e8 7c 4a 00 00       	call   f0109a4e <env_free>
f0104fd2:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104fd5:	83 ec 0c             	sub    $0xc,%esp
f0104fd8:	68 53 58 13 f0       	push   $0xf0135853
f0104fdd:	e8 a0 bc ff ff       	call   f0100c82 <cprintf>
f0104fe2:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fe5:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fed:	c1 e2 04             	shl    $0x4,%edx
f0104ff0:	01 d0                	add    %edx,%eax
f0104ff2:	8b 40 08             	mov    0x8(%eax),%eax
f0104ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ff8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ffd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105000:	c1 e2 04             	shl    $0x4,%edx
f0105003:	01 d0                	add    %edx,%eax
f0105005:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105009:	74 08                	je     f0105013 <sched_kill_all+0x22b>
f010500b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010500e:	8b 52 44             	mov    0x44(%edx),%edx
f0105011:	eb 05                	jmp    f0105018 <sched_kill_all+0x230>
f0105013:	ba 00 00 00 00       	mov    $0x0,%edx
f0105018:	89 50 08             	mov    %edx,0x8(%eax)
f010501b:	8b 40 08             	mov    0x8(%eax),%eax
f010501e:	85 c0                	test   %eax,%eax
f0105020:	0f 85 da fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502a:	0f 85 d0 fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105030:	eb 13                	jmp    f0105045 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105032:	83 ec 08             	sub    $0x8,%esp
f0105035:	ff 75 f0             	pushl  -0x10(%ebp)
f0105038:	68 b0 57 13 f0       	push   $0xf01357b0
f010503d:	e8 40 bc ff ff       	call   f0100c82 <cprintf>
f0105042:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105045:	83 ec 0c             	sub    $0xc,%esp
f0105048:	68 54 57 13 f0       	push   $0xf0135754
f010504d:	e8 30 bc ff ff       	call   f0100c82 <cprintf>
f0105052:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105055:	ff 45 f0             	incl   -0x10(%ebp)
f0105058:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010505d:	0f b6 c0             	movzbl %al,%eax
f0105060:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105063:	0f 8f 56 fe ff ff    	jg     f0104ebf <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105069:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	0f 84 98 00 00 00    	je     f010510e <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105076:	83 ec 0c             	sub    $0xc,%esp
f0105079:	68 a8 58 13 f0       	push   $0xf01358a8
f010507e:	e8 ff bb ff ff       	call   f0100c82 <cprintf>
f0105083:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105086:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010508b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010508e:	eb 55                	jmp    f01050e5 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105093:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010509f:	83 ec 04             	sub    $0x4,%esp
f01050a2:	52                   	push   %edx
f01050a3:	50                   	push   %eax
f01050a4:	68 40 58 13 f0       	push   $0xf0135840
f01050a9:	e8 d4 bb ff ff       	call   f0100c82 <cprintf>
f01050ae:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01050b1:	83 ec 0c             	sub    $0xc,%esp
f01050b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01050b7:	e8 0a fa ff ff       	call   f0104ac6 <sched_remove_exit>
f01050bc:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01050bf:	83 ec 0c             	sub    $0xc,%esp
f01050c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01050c5:	e8 84 49 00 00       	call   f0109a4e <env_free>
f01050ca:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01050cd:	83 ec 0c             	sub    $0xc,%esp
f01050d0:	68 53 58 13 f0       	push   $0xf0135853
f01050d5:	e8 a8 bb ff ff       	call   f0100c82 <cprintf>
f01050da:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01050dd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f01050e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e9:	74 08                	je     f01050f3 <sched_kill_all+0x30b>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	eb 05                	jmp    f01050f8 <sched_kill_all+0x310>
f01050f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01050f8:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f01050fd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105102:	85 c0                	test   %eax,%eax
f0105104:	75 8a                	jne    f0105090 <sched_kill_all+0x2a8>
f0105106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510a:	75 84                	jne    f0105090 <sched_kill_all+0x2a8>
f010510c:	eb 10                	jmp    f010511e <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010510e:	83 ec 0c             	sub    $0xc,%esp
f0105111:	68 f6 57 13 f0       	push   $0xf01357f6
f0105116:	e8 67 bb ff ff       	call   f0100c82 <cprintf>
f010511b:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010511e:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105125:	00 00 00 
	fos_scheduler();
f0105128:	e8 18 f5 ff ff       	call   f0104645 <fos_scheduler>

f010512d <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010512d:	55                   	push   %ebp
f010512e:	89 e5                	mov    %esp,%ebp
f0105130:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105133:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105137:	74 0e                	je     f0105147 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105139:	83 ec 0c             	sub    $0xc,%esp
f010513c:	ff 75 08             	pushl  0x8(%ebp)
f010513f:	e8 6e f8 ff ff       	call   f01049b2 <sched_insert_new>
f0105144:	83 c4 10             	add    $0x10,%esp
	}
}
f0105147:	90                   	nop
f0105148:	c9                   	leave  
f0105149:	c3                   	ret    

f010514a <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010514a:	55                   	push   %ebp
f010514b:	89 e5                	mov    %esp,%ebp
f010514d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105157:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010515c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010515f:	eb 3d                	jmp    f010519e <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105164:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105167:	3b 45 08             	cmp    0x8(%ebp),%eax
f010516a:	75 2a                	jne    f0105196 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010516c:	83 ec 0c             	sub    $0xc,%esp
f010516f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105172:	e8 67 f8 ff ff       	call   f01049de <sched_remove_new>
f0105177:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010517a:	83 ec 0c             	sub    $0xc,%esp
f010517d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105180:	e8 f0 f6 ff ff       	call   f0104875 <sched_insert_ready>
f0105185:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105188:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f010518d:	85 c0                	test   %eax,%eax
f010518f:	75 36                	jne    f01051c7 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105191:	e8 af f4 ff ff       	call   f0104645 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105196:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f010519b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010519e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051a2:	74 08                	je     f01051ac <sched_run_env+0x62>
f01051a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051a7:	8b 40 44             	mov    0x44(%eax),%eax
f01051aa:	eb 05                	jmp    f01051b1 <sched_run_env+0x67>
f01051ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01051b1:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f01051b6:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01051bb:	85 c0                	test   %eax,%eax
f01051bd:	75 a2                	jne    f0105161 <sched_run_env+0x17>
f01051bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c3:	75 9c                	jne    f0105161 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c5:	eb 01                	jmp    f01051c8 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01051c7:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c8:	90                   	nop
f01051c9:	c9                   	leave  
f01051ca:	c3                   	ret    

f01051cb <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01051cb:	55                   	push   %ebp
f01051cc:	89 e5                	mov    %esp,%ebp
f01051ce:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01051d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01051d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01051df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051e3:	75 59                	jne    f010523e <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01051e5:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f01051ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ed:	eb 28                	jmp    f0105217 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01051ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051f5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051f8:	75 15                	jne    f010520f <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01051fa:	83 ec 0c             	sub    $0xc,%esp
f01051fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105200:	e8 d9 f7 ff ff       	call   f01049de <sched_remove_new>
f0105205:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105208:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010520f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105214:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010521b:	74 08                	je     f0105225 <sched_exit_env+0x5a>
f010521d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105220:	8b 40 44             	mov    0x44(%eax),%eax
f0105223:	eb 05                	jmp    f010522a <sched_exit_env+0x5f>
f0105225:	b8 00 00 00 00       	mov    $0x0,%eax
f010522a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010522f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105234:	85 c0                	test   %eax,%eax
f0105236:	75 b7                	jne    f01051ef <sched_exit_env+0x24>
f0105238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010523c:	75 b1                	jne    f01051ef <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010523e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105242:	0f 85 67 01 00 00    	jne    f01053af <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105248:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010524f:	e9 47 01 00 00       	jmp    f010539b <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105254:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105259:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010525c:	c1 e2 04             	shl    $0x4,%edx
f010525f:	01 d0                	add    %edx,%eax
f0105261:	8b 00                	mov    (%eax),%eax
f0105263:	85 c0                	test   %eax,%eax
f0105265:	0f 84 27 01 00 00    	je     f0105392 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010526b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105272:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105277:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010527a:	c1 e2 04             	shl    $0x4,%edx
f010527d:	01 d0                	add    %edx,%eax
f010527f:	8b 00                	mov    (%eax),%eax
f0105281:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105284:	e9 d1 00 00 00       	jmp    f010535a <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105289:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010528c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010528f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105292:	0f 85 af 00 00 00    	jne    f0105347 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105298:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529c:	75 17                	jne    f01052b5 <sched_exit_env+0xea>
f010529e:	83 ec 04             	sub    $0x4,%esp
f01052a1:	68 88 56 13 f0       	push   $0xf0135688
f01052a6:	68 e1 01 00 00       	push   $0x1e1
f01052ab:	68 77 56 13 f0       	push   $0xf0135677
f01052b0:	e8 46 af ff ff       	call   f01001fb <_panic>
f01052b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b8:	8b 40 44             	mov    0x44(%eax),%eax
f01052bb:	85 c0                	test   %eax,%eax
f01052bd:	74 11                	je     f01052d0 <sched_exit_env+0x105>
f01052bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c2:	8b 40 44             	mov    0x44(%eax),%eax
f01052c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052c8:	8b 52 48             	mov    0x48(%edx),%edx
f01052cb:	89 50 48             	mov    %edx,0x48(%eax)
f01052ce:	eb 16                	jmp    f01052e6 <sched_exit_env+0x11b>
f01052d0:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01052d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052d8:	c1 e2 04             	shl    $0x4,%edx
f01052db:	01 c2                	add    %eax,%edx
f01052dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e0:	8b 40 48             	mov    0x48(%eax),%eax
f01052e3:	89 42 04             	mov    %eax,0x4(%edx)
f01052e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e9:	8b 40 48             	mov    0x48(%eax),%eax
f01052ec:	85 c0                	test   %eax,%eax
f01052ee:	74 11                	je     f0105301 <sched_exit_env+0x136>
f01052f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f3:	8b 40 48             	mov    0x48(%eax),%eax
f01052f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052f9:	8b 52 44             	mov    0x44(%edx),%edx
f01052fc:	89 50 44             	mov    %edx,0x44(%eax)
f01052ff:	eb 15                	jmp    f0105316 <sched_exit_env+0x14b>
f0105301:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105306:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105309:	c1 e2 04             	shl    $0x4,%edx
f010530c:	01 c2                	add    %eax,%edx
f010530e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105311:	8b 40 44             	mov    0x44(%eax),%eax
f0105314:	89 02                	mov    %eax,(%edx)
f0105316:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105319:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105323:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010532a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010532f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105332:	c1 e2 04             	shl    $0x4,%edx
f0105335:	01 d0                	add    %edx,%eax
f0105337:	8b 50 0c             	mov    0xc(%eax),%edx
f010533a:	4a                   	dec    %edx
f010533b:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f010533e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105345:	eb 4b                	jmp    f0105392 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105347:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010534c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010534f:	c1 e2 04             	shl    $0x4,%edx
f0105352:	01 d0                	add    %edx,%eax
f0105354:	8b 40 08             	mov    0x8(%eax),%eax
f0105357:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010535f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105362:	c1 e2 04             	shl    $0x4,%edx
f0105365:	01 d0                	add    %edx,%eax
f0105367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010536b:	74 08                	je     f0105375 <sched_exit_env+0x1aa>
f010536d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105370:	8b 52 44             	mov    0x44(%edx),%edx
f0105373:	eb 05                	jmp    f010537a <sched_exit_env+0x1af>
f0105375:	ba 00 00 00 00       	mov    $0x0,%edx
f010537a:	89 50 08             	mov    %edx,0x8(%eax)
f010537d:	8b 40 08             	mov    0x8(%eax),%eax
f0105380:	85 c0                	test   %eax,%eax
f0105382:	0f 85 01 ff ff ff    	jne    f0105289 <sched_exit_env+0xbe>
f0105388:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538c:	0f 85 f7 fe ff ff    	jne    f0105289 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105396:	75 16                	jne    f01053ae <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105398:	ff 45 ec             	incl   -0x14(%ebp)
f010539b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01053a0:	0f b6 c0             	movzbl %al,%eax
f01053a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01053a6:	0f 8f a8 fe ff ff    	jg     f0105254 <sched_exit_env+0x89>
f01053ac:	eb 01                	jmp    f01053af <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01053ae:	90                   	nop
		}
	}
	if (!found)
f01053af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053b3:	75 1c                	jne    f01053d1 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01053b5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053c0:	75 0f                	jne    f01053d1 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01053c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01053ca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01053d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053d5:	74 2a                	je     f0105401 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01053d7:	83 ec 0c             	sub    $0xc,%esp
f01053da:	ff 75 f4             	pushl  -0xc(%ebp)
f01053dd:	e8 a1 f6 ff ff       	call   f0104a83 <sched_insert_exit>
f01053e2:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01053e5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ea:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053f0:	75 0f                	jne    f0105401 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01053f2:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f01053f9:	00 00 00 
			fos_scheduler();
f01053fc:	e8 44 f2 ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105401:	90                   	nop
f0105402:	c9                   	leave  
f0105403:	c3                   	ret    

f0105404 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105404:	55                   	push   %ebp
f0105405:	89 e5                	mov    %esp,%ebp
f0105407:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010540a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105418:	e9 37 01 00 00       	jmp    f0105554 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010541d:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105422:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105425:	c1 e2 04             	shl    $0x4,%edx
f0105428:	01 d0                	add    %edx,%eax
f010542a:	8b 00                	mov    (%eax),%eax
f010542c:	85 c0                	test   %eax,%eax
f010542e:	0f 84 1d 01 00 00    	je     f0105551 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010543b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105440:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105443:	c1 e2 04             	shl    $0x4,%edx
f0105446:	01 d0                	add    %edx,%eax
f0105448:	8b 00                	mov    (%eax),%eax
f010544a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010544d:	e9 c7 00 00 00       	jmp    f0105519 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105452:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105456:	75 17                	jne    f010546f <sched_exit_all_ready_envs+0x6b>
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 88 56 13 f0       	push   $0xf0135688
f0105460:	68 0c 02 00 00       	push   $0x20c
f0105465:	68 77 56 13 f0       	push   $0xf0135677
f010546a:	e8 8c ad ff ff       	call   f01001fb <_panic>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	85 c0                	test   %eax,%eax
f0105477:	74 11                	je     f010548a <sched_exit_all_ready_envs+0x86>
f0105479:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010547c:	8b 40 44             	mov    0x44(%eax),%eax
f010547f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105482:	8b 52 48             	mov    0x48(%edx),%edx
f0105485:	89 50 48             	mov    %edx,0x48(%eax)
f0105488:	eb 16                	jmp    f01054a0 <sched_exit_all_ready_envs+0x9c>
f010548a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010548f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105492:	c1 e2 04             	shl    $0x4,%edx
f0105495:	01 c2                	add    %eax,%edx
f0105497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549a:	8b 40 48             	mov    0x48(%eax),%eax
f010549d:	89 42 04             	mov    %eax,0x4(%edx)
f01054a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a3:	8b 40 48             	mov    0x48(%eax),%eax
f01054a6:	85 c0                	test   %eax,%eax
f01054a8:	74 11                	je     f01054bb <sched_exit_all_ready_envs+0xb7>
f01054aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ad:	8b 40 48             	mov    0x48(%eax),%eax
f01054b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054b3:	8b 52 44             	mov    0x44(%edx),%edx
f01054b6:	89 50 44             	mov    %edx,0x44(%eax)
f01054b9:	eb 15                	jmp    f01054d0 <sched_exit_all_ready_envs+0xcc>
f01054bb:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054c3:	c1 e2 04             	shl    $0x4,%edx
f01054c6:	01 c2                	add    %eax,%edx
f01054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054cb:	8b 40 44             	mov    0x44(%eax),%eax
f01054ce:	89 02                	mov    %eax,(%edx)
f01054d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054e4:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054ec:	c1 e2 04             	shl    $0x4,%edx
f01054ef:	01 d0                	add    %edx,%eax
f01054f1:	8b 50 0c             	mov    0xc(%eax),%edx
f01054f4:	4a                   	dec    %edx
f01054f5:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 80 f5 ff ff       	call   f0104a83 <sched_insert_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105506:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010550b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010550e:	c1 e2 04             	shl    $0x4,%edx
f0105511:	01 d0                	add    %edx,%eax
f0105513:	8b 40 08             	mov    0x8(%eax),%eax
f0105516:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105519:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010551e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105521:	c1 e2 04             	shl    $0x4,%edx
f0105524:	01 d0                	add    %edx,%eax
f0105526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552a:	74 08                	je     f0105534 <sched_exit_all_ready_envs+0x130>
f010552c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010552f:	8b 52 44             	mov    0x44(%edx),%edx
f0105532:	eb 05                	jmp    f0105539 <sched_exit_all_ready_envs+0x135>
f0105534:	ba 00 00 00 00       	mov    $0x0,%edx
f0105539:	89 50 08             	mov    %edx,0x8(%eax)
f010553c:	8b 40 08             	mov    0x8(%eax),%eax
f010553f:	85 c0                	test   %eax,%eax
f0105541:	0f 85 0b ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>
f0105547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010554b:	0f 85 01 ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105551:	ff 45 f0             	incl   -0x10(%ebp)
f0105554:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0105559:	0f b6 c0             	movzbl %al,%eax
f010555c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010555f:	0f 8f b8 fe ff ff    	jg     f010541d <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105565:	90                   	nop
f0105566:	c9                   	leave  
f0105567:	c3                   	ret    

f0105568 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0105568:	55                   	push   %ebp
f0105569:	89 e5                	mov    %esp,%ebp
f010556b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010556e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105575:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010557c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105580:	0f 85 a0 00 00 00    	jne    f0105626 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105586:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010558b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010558e:	eb 67                	jmp    f01055f7 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105590:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105593:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105596:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105599:	75 54                	jne    f01055ef <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010559b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01055a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055aa:	83 ec 04             	sub    $0x4,%esp
f01055ad:	52                   	push   %edx
f01055ae:	50                   	push   %eax
f01055af:	68 d4 58 13 f0       	push   $0xf01358d4
f01055b4:	e8 c9 b6 ff ff       	call   f0100c82 <cprintf>
f01055b9:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01055bc:	83 ec 0c             	sub    $0xc,%esp
f01055bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01055c2:	e8 17 f4 ff ff       	call   f01049de <sched_remove_new>
f01055c7:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01055ca:	83 ec 0c             	sub    $0xc,%esp
f01055cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d0:	e8 79 44 00 00       	call   f0109a4e <env_free>
f01055d5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01055d8:	83 ec 0c             	sub    $0xc,%esp
f01055db:	68 53 58 13 f0       	push   $0xf0135853
f01055e0:	e8 9d b6 ff ff       	call   f0100c82 <cprintf>
f01055e5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01055e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055ef:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01055f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055fb:	74 08                	je     f0105605 <sched_kill_env+0x9d>
f01055fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105600:	8b 40 44             	mov    0x44(%eax),%eax
f0105603:	eb 05                	jmp    f010560a <sched_kill_env+0xa2>
f0105605:	b8 00 00 00 00       	mov    $0x0,%eax
f010560a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010560f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105614:	85 c0                	test   %eax,%eax
f0105616:	0f 85 74 ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
f010561c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105620:	0f 85 6a ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105626:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010562a:	0f 85 a6 01 00 00    	jne    f01057d6 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105637:	e9 86 01 00 00       	jmp    f01057c2 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010563c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105644:	c1 e2 04             	shl    $0x4,%edx
f0105647:	01 d0                	add    %edx,%eax
f0105649:	8b 00                	mov    (%eax),%eax
f010564b:	85 c0                	test   %eax,%eax
f010564d:	0f 84 66 01 00 00    	je     f01057b9 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010565a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010565f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105662:	c1 e2 04             	shl    $0x4,%edx
f0105665:	01 d0                	add    %edx,%eax
f0105667:	8b 00                	mov    (%eax),%eax
f0105669:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010566c:	e9 10 01 00 00       	jmp    f0105781 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105671:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105674:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105677:	3b 45 08             	cmp    0x8(%ebp),%eax
f010567a:	0f 85 ee 00 00 00    	jne    f010576e <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105683:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010568c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010568f:	ff 75 ec             	pushl  -0x14(%ebp)
f0105692:	52                   	push   %edx
f0105693:	50                   	push   %eax
f0105694:	68 fc 58 13 f0       	push   $0xf01358fc
f0105699:	e8 e4 b5 ff ff       	call   f0100c82 <cprintf>
f010569e:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a5:	75 17                	jne    f01056be <sched_kill_env+0x156>
f01056a7:	83 ec 04             	sub    $0x4,%esp
f01056aa:	68 88 56 13 f0       	push   $0xf0135688
f01056af:	68 33 02 00 00       	push   $0x233
f01056b4:	68 77 56 13 f0       	push   $0xf0135677
f01056b9:	e8 3d ab ff ff       	call   f01001fb <_panic>
f01056be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c1:	8b 40 44             	mov    0x44(%eax),%eax
f01056c4:	85 c0                	test   %eax,%eax
f01056c6:	74 11                	je     f01056d9 <sched_kill_env+0x171>
f01056c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056cb:	8b 40 44             	mov    0x44(%eax),%eax
f01056ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d1:	8b 52 48             	mov    0x48(%edx),%edx
f01056d4:	89 50 48             	mov    %edx,0x48(%eax)
f01056d7:	eb 16                	jmp    f01056ef <sched_kill_env+0x187>
f01056d9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01056de:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056e1:	c1 e2 04             	shl    $0x4,%edx
f01056e4:	01 c2                	add    %eax,%edx
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 48             	mov    0x48(%eax),%eax
f01056ec:	89 42 04             	mov    %eax,0x4(%edx)
f01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f2:	8b 40 48             	mov    0x48(%eax),%eax
f01056f5:	85 c0                	test   %eax,%eax
f01056f7:	74 11                	je     f010570a <sched_kill_env+0x1a2>
f01056f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056fc:	8b 40 48             	mov    0x48(%eax),%eax
f01056ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105702:	8b 52 44             	mov    0x44(%edx),%edx
f0105705:	89 50 44             	mov    %edx,0x44(%eax)
f0105708:	eb 15                	jmp    f010571f <sched_kill_env+0x1b7>
f010570a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010570f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105712:	c1 e2 04             	shl    $0x4,%edx
f0105715:	01 c2                	add    %eax,%edx
f0105717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571a:	8b 40 44             	mov    0x44(%eax),%eax
f010571d:	89 02                	mov    %eax,(%edx)
f010571f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105722:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105733:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105738:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010573b:	c1 e2 04             	shl    $0x4,%edx
f010573e:	01 d0                	add    %edx,%eax
f0105740:	8b 50 0c             	mov    0xc(%eax),%edx
f0105743:	4a                   	dec    %edx
f0105744:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105747:	83 ec 0c             	sub    $0xc,%esp
f010574a:	ff 75 f4             	pushl  -0xc(%ebp)
f010574d:	e8 fc 42 00 00       	call   f0109a4e <env_free>
f0105752:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105755:	83 ec 0c             	sub    $0xc,%esp
f0105758:	68 53 58 13 f0       	push   $0xf0135853
f010575d:	e8 20 b5 ff ff       	call   f0100c82 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105765:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010576c:	eb 4b                	jmp    f01057b9 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010576e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105773:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105776:	c1 e2 04             	shl    $0x4,%edx
f0105779:	01 d0                	add    %edx,%eax
f010577b:	8b 40 08             	mov    0x8(%eax),%eax
f010577e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105781:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105786:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105789:	c1 e2 04             	shl    $0x4,%edx
f010578c:	01 d0                	add    %edx,%eax
f010578e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105792:	74 08                	je     f010579c <sched_kill_env+0x234>
f0105794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105797:	8b 52 44             	mov    0x44(%edx),%edx
f010579a:	eb 05                	jmp    f01057a1 <sched_kill_env+0x239>
f010579c:	ba 00 00 00 00       	mov    $0x0,%edx
f01057a1:	89 50 08             	mov    %edx,0x8(%eax)
f01057a4:	8b 40 08             	mov    0x8(%eax),%eax
f01057a7:	85 c0                	test   %eax,%eax
f01057a9:	0f 85 c2 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
f01057af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057b3:	0f 85 b8 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01057b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057bd:	75 16                	jne    f01057d5 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01057bf:	ff 45 ec             	incl   -0x14(%ebp)
f01057c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01057c7:	0f b6 c0             	movzbl %al,%eax
f01057ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01057cd:	0f 8f 69 fe ff ff    	jg     f010563c <sched_kill_env+0xd4>
f01057d3:	eb 01                	jmp    f01057d6 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01057d5:	90                   	nop
		}
	}
	if (!found)
f01057d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057da:	0f 85 a7 00 00 00    	jne    f0105887 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01057e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057e7:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01057ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057ef:	eb 67                	jmp    f0105858 <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01057f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fa:	75 54                	jne    f0105850 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ff:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105808:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580b:	83 ec 04             	sub    $0x4,%esp
f010580e:	52                   	push   %edx
f010580f:	50                   	push   %eax
f0105810:	68 28 59 13 f0       	push   $0xf0135928
f0105815:	e8 68 b4 ff ff       	call   f0100c82 <cprintf>
f010581a:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010581d:	83 ec 0c             	sub    $0xc,%esp
f0105820:	ff 75 f4             	pushl  -0xc(%ebp)
f0105823:	e8 9e f2 ff ff       	call   f0104ac6 <sched_remove_exit>
f0105828:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010582b:	83 ec 0c             	sub    $0xc,%esp
f010582e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105831:	e8 18 42 00 00       	call   f0109a4e <env_free>
f0105836:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105839:	83 ec 0c             	sub    $0xc,%esp
f010583c:	68 53 58 13 f0       	push   $0xf0135853
f0105841:	e8 3c b4 ff ff       	call   f0100c82 <cprintf>
f0105846:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105849:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105850:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585c:	74 08                	je     f0105866 <sched_kill_env+0x2fe>
f010585e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105861:	8b 40 44             	mov    0x44(%eax),%eax
f0105864:	eb 05                	jmp    f010586b <sched_kill_env+0x303>
f0105866:	b8 00 00 00 00       	mov    $0x0,%eax
f010586b:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0105870:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	0f 85 74 ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
f010587d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105881:	0f 85 6a ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105887:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010588b:	0f 85 a0 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105891:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105896:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105899:	3b 45 08             	cmp    0x8(%ebp),%eax
f010589c:	0f 85 8f 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01058a2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01058a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01058aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b0:	83 f8 02             	cmp    $0x2,%eax
f01058b3:	74 19                	je     f01058ce <sched_kill_env+0x366>
f01058b5:	68 50 59 13 f0       	push   $0xf0135950
f01058ba:	68 70 59 13 f0       	push   $0xf0135970
f01058bf:	68 56 02 00 00       	push   $0x256
f01058c4:	68 77 56 13 f0       	push   $0xf0135677
f01058c9:	e8 2d a9 ff ff       	call   f01001fb <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058dd:	83 ec 04             	sub    $0x4,%esp
f01058e0:	52                   	push   %edx
f01058e1:	50                   	push   %eax
f01058e2:	68 88 59 13 f0       	push   $0xf0135988
f01058e7:	e8 96 b3 ff ff       	call   f0100c82 <cprintf>
f01058ec:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058ef:	83 ec 0c             	sub    $0xc,%esp
f01058f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01058f5:	e8 54 41 00 00       	call   f0109a4e <env_free>
f01058fa:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058fd:	83 ec 0c             	sub    $0xc,%esp
f0105900:	68 53 58 13 f0       	push   $0xf0135853
f0105905:	e8 78 b3 ff ff       	call   f0100c82 <cprintf>
f010590a:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010590d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105914:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0105919:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010591c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010591f:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105922:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105929:	00 00 00 
			fos_scheduler();
f010592c:	e8 14 ed ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105931:	90                   	nop
f0105932:	c9                   	leave  
f0105933:	c3                   	ret    

f0105934 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105934:	55                   	push   %ebp
f0105935:	89 e5                	mov    %esp,%ebp
f0105937:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010593a:	83 ec 0c             	sub    $0xc,%esp
f010593d:	6a 01                	push   $0x1
f010593f:	e8 b3 82 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0105944:	83 c4 10             	add    $0x10,%esp
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 05                	je     f0105950 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f010594b:	e8 05 00 00 00       	call   f0105955 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105950:	e8 f0 ec ff ff       	call   f0104645 <fos_scheduler>

f0105955 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105955:	55                   	push   %ebp
f0105956:	89 e5                	mov    %esp,%ebp
f0105958:	53                   	push   %ebx
f0105959:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010595c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105961:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105964:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105968:	0f 84 cc 01 00 00    	je     f0105b3a <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010596e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105975:	e9 cf 00 00 00       	jmp    f0105a49 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010597a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010597d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105983:	89 d0                	mov    %edx,%eax
f0105985:	01 c0                	add    %eax,%eax
f0105987:	01 d0                	add    %edx,%eax
f0105989:	c1 e0 03             	shl    $0x3,%eax
f010598c:	01 c8                	add    %ecx,%eax
f010598e:	8a 40 04             	mov    0x4(%eax),%al
f0105991:	3c 01                	cmp    $0x1,%al
f0105993:	0f 84 ad 00 00 00    	je     f0105a46 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010599c:	8b 48 78             	mov    0x78(%eax),%ecx
f010599f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059a2:	89 d0                	mov    %edx,%eax
f01059a4:	01 c0                	add    %eax,%eax
f01059a6:	01 d0                	add    %edx,%eax
f01059a8:	c1 e0 03             	shl    $0x3,%eax
f01059ab:	01 c8                	add    %ecx,%eax
f01059ad:	8b 00                	mov    (%eax),%eax
f01059af:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01059b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01059b8:	83 ec 08             	sub    $0x8,%esp
f01059bb:	ff 75 e8             	pushl  -0x18(%ebp)
f01059be:	50                   	push   %eax
f01059bf:	e8 2b 22 00 00       	call   f0107bef <pt_get_page_permissions>
f01059c4:	83 c4 10             	add    $0x10,%esp
f01059c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f01059ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01059d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d3:	89 d0                	mov    %edx,%eax
f01059d5:	01 c0                	add    %eax,%eax
f01059d7:	01 d0                	add    %edx,%eax
f01059d9:	c1 e0 03             	shl    $0x3,%eax
f01059dc:	01 c8                	add    %ecx,%eax
f01059de:	8b 40 08             	mov    0x8(%eax),%eax
f01059e1:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f01059e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e7:	83 e0 20             	and    $0x20,%eax
f01059ea:	85 c0                	test   %eax,%eax
f01059ec:	74 3b                	je     f0105a29 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01059ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01059f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059f7:	89 d0                	mov    %edx,%eax
f01059f9:	01 c0                	add    %eax,%eax
f01059fb:	01 d0                	add    %edx,%eax
f01059fd:	c1 e0 03             	shl    $0x3,%eax
f0105a00:	01 c8                	add    %ecx,%eax
f0105a02:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a05:	c1 ea 02             	shr    $0x2,%edx
f0105a08:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105a0e:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a14:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a17:	6a 20                	push   $0x20
f0105a19:	6a 00                	push   $0x0
f0105a1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a1e:	50                   	push   %eax
f0105a1f:	e8 17 21 00 00       	call   f0107b3b <pt_set_page_permissions>
f0105a24:	83 c4 10             	add    $0x10,%esp
f0105a27:	eb 1d                	jmp    f0105a46 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a2c:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a32:	89 d0                	mov    %edx,%eax
f0105a34:	01 c0                	add    %eax,%eax
f0105a36:	01 d0                	add    %edx,%eax
f0105a38:	c1 e0 03             	shl    $0x3,%eax
f0105a3b:	01 c8                	add    %ecx,%eax
f0105a3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a40:	c1 ea 02             	shr    $0x2,%edx
f0105a43:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a46:	ff 45 f4             	incl   -0xc(%ebp)
f0105a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a4c:	8b 50 74             	mov    0x74(%eax),%edx
f0105a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a52:	39 c2                	cmp    %eax,%edx
f0105a54:	0f 87 20 ff ff ff    	ja     f010597a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a61:	e9 ca 00 00 00       	jmp    f0105b30 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105a66:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a6c:	89 d0                	mov    %edx,%eax
f0105a6e:	01 c0                	add    %eax,%eax
f0105a70:	01 d0                	add    %edx,%eax
f0105a72:	c1 e0 03             	shl    $0x3,%eax
f0105a75:	01 c8                	add    %ecx,%eax
f0105a77:	83 e8 80             	sub    $0xffffff80,%eax
f0105a7a:	8a 00                	mov    (%eax),%al
f0105a7c:	3c 01                	cmp    $0x1,%al
f0105a7e:	0f 84 a9 00 00 00    	je     f0105b2d <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105a84:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a8a:	89 d0                	mov    %edx,%eax
f0105a8c:	01 c0                	add    %eax,%eax
f0105a8e:	01 d0                	add    %edx,%eax
f0105a90:	c1 e0 03             	shl    $0x3,%eax
f0105a93:	01 c8                	add    %ecx,%eax
f0105a95:	83 c0 7c             	add    $0x7c,%eax
f0105a98:	8b 00                	mov    (%eax),%eax
f0105a9a:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105a9d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105aa0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa3:	89 d0                	mov    %edx,%eax
f0105aa5:	01 c0                	add    %eax,%eax
f0105aa7:	01 d0                	add    %edx,%eax
f0105aa9:	c1 e0 03             	shl    $0x3,%eax
f0105aac:	01 c8                	add    %ecx,%eax
f0105aae:	05 84 00 00 00       	add    $0x84,%eax
f0105ab3:	8b 00                	mov    (%eax),%eax
f0105ab5:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105ab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105abb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105abe:	83 ec 08             	sub    $0x8,%esp
f0105ac1:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ac4:	50                   	push   %eax
f0105ac5:	e8 44 22 00 00       	call   f0107d0e <pd_is_table_used>
f0105aca:	83 c4 10             	add    $0x10,%esp
f0105acd:	85 c0                	test   %eax,%eax
f0105acf:	74 3c                	je     f0105b0d <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ad4:	c1 e8 02             	shr    $0x2,%eax
f0105ad7:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105adc:	89 c1                	mov    %eax,%ecx
f0105ade:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105ae1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ae4:	89 d0                	mov    %edx,%eax
f0105ae6:	01 c0                	add    %eax,%eax
f0105ae8:	01 d0                	add    %edx,%eax
f0105aea:	c1 e0 03             	shl    $0x3,%eax
f0105aed:	01 d8                	add    %ebx,%eax
f0105aef:	05 84 00 00 00       	add    $0x84,%eax
f0105af4:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105afc:	83 ec 08             	sub    $0x8,%esp
f0105aff:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b02:	50                   	push   %eax
f0105b03:	e8 2a 22 00 00       	call   f0107d32 <pd_set_table_unused>
f0105b08:	83 c4 10             	add    $0x10,%esp
f0105b0b:	eb 20                	jmp    f0105b2d <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b10:	c1 e8 02             	shr    $0x2,%eax
f0105b13:	89 c1                	mov    %eax,%ecx
f0105b15:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b1b:	89 d0                	mov    %edx,%eax
f0105b1d:	01 c0                	add    %eax,%eax
f0105b1f:	01 d0                	add    %edx,%eax
f0105b21:	c1 e0 03             	shl    $0x3,%eax
f0105b24:	01 d8                	add    %ebx,%eax
f0105b26:	05 84 00 00 00       	add    $0x84,%eax
f0105b2b:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b2d:	ff 45 f0             	incl   -0x10(%ebp)
f0105b30:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105b34:	0f 8e 2c ff ff ff    	jle    f0105a66 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105b3a:	90                   	nop
f0105b3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105b3e:	c9                   	leave  
f0105b3f:	c3                   	ret    

f0105b40 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105b40:	55                   	push   %ebp
f0105b41:	89 e5                	mov    %esp,%ebp
f0105b43:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105b46:	c7 05 0c 72 65 f0 01 	movl   $0x1,0xf065720c
f0105b4d:	00 00 00 
f0105b50:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105b57:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105b5b:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b61:	ee                   	out    %al,(%dx)
f0105b62:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105b69:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105b6d:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105b70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b73:	ee                   	out    %al,(%dx)
f0105b74:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105b7b:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105b7f:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105b85:	ee                   	out    %al,(%dx)
f0105b86:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105b8d:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105b91:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105b97:	ee                   	out    %al,(%dx)
f0105b98:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b9f:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105ba3:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105ba6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105ba9:	ee                   	out    %al,(%dx)
f0105baa:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105bb1:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105bb5:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105bb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105bbb:	ee                   	out    %al,(%dx)
f0105bbc:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105bc3:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105bc7:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105bca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105bcd:	ee                   	out    %al,(%dx)
f0105bce:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105bd5:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105bd9:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105bdc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105bdf:	ee                   	out    %al,(%dx)
f0105be0:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105be7:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105beb:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105bee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105bf1:	ee                   	out    %al,(%dx)
f0105bf2:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105bf9:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105bfd:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105c00:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105c03:	ee                   	out    %al,(%dx)
f0105c04:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105c0b:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105c0f:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105c12:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105c15:	ee                   	out    %al,(%dx)
f0105c16:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105c1d:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105c21:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105c24:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105c27:	ee                   	out    %al,(%dx)
f0105c28:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105c2f:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105c33:	8a 45 be             	mov    -0x42(%ebp),%al
f0105c36:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105c39:	ee                   	out    %al,(%dx)
f0105c3a:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105c41:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105c45:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105c48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105c4b:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105c4c:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c52:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105c56:	74 15                	je     f0105c6d <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105c58:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c5e:	0f b7 c0             	movzwl %ax,%eax
f0105c61:	83 ec 0c             	sub    $0xc,%esp
f0105c64:	50                   	push   %eax
f0105c65:	e8 06 00 00 00       	call   f0105c70 <irq_setmask_8259A>
f0105c6a:	83 c4 10             	add    $0x10,%esp
}
f0105c6d:	90                   	nop
f0105c6e:	c9                   	leave  
f0105c6f:	c3                   	ret    

f0105c70 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105c70:	55                   	push   %ebp
f0105c71:	89 e5                	mov    %esp,%ebp
f0105c73:	83 ec 14             	sub    $0x14,%esp
f0105c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0105c79:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c80:	66 a3 b0 18 19 f0    	mov    %ax,0xf01918b0
	if (!didinit)
f0105c86:	a1 0c 72 65 f0       	mov    0xf065720c,%eax
f0105c8b:	85 c0                	test   %eax,%eax
f0105c8d:	74 34                	je     f0105cc3 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c92:	0f b6 c0             	movzbl %al,%eax
f0105c95:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105c9c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c9f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105ca2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105ca5:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ca9:	66 c1 e8 08          	shr    $0x8,%ax
f0105cad:	0f b6 c0             	movzbl %al,%eax
f0105cb0:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105cb7:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105cba:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105cbd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105cc0:	ee                   	out    %al,(%dx)
f0105cc1:	eb 01                	jmp    f0105cc4 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105cc3:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105cc4:	c9                   	leave  
f0105cc5:	c3                   	ret    

f0105cc6 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105cc6:	55                   	push   %ebp
f0105cc7:	89 e5                	mov    %esp,%ebp
f0105cc9:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105ccc:	83 ec 08             	sub    $0x8,%esp
f0105ccf:	68 00 10 00 00       	push   $0x1000
f0105cd4:	68 00 10 00 00       	push   $0x1000
f0105cd9:	e8 6a 02 00 00       	call   f0105f48 <boot_allocate_space>
f0105cde:	83 c4 10             	add    $0x10,%esp
f0105ce1:	a3 7c 7b 65 f0       	mov    %eax,0xf0657b7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105ce6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ceb:	83 ec 04             	sub    $0x4,%esp
f0105cee:	68 00 10 00 00       	push   $0x1000
f0105cf3:	6a 00                	push   $0x0
f0105cf5:	50                   	push   %eax
f0105cf6:	e8 73 b2 02 00       	call   f0130f6e <memset>
f0105cfb:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105cfe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105d06:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105d0d:	77 14                	ja     f0105d23 <initialize_kernel_VM+0x5d>
f0105d0f:	ff 75 e8             	pushl  -0x18(%ebp)
f0105d12:	68 b4 59 13 f0       	push   $0xf01359b4
f0105d17:	6a 45                	push   $0x45
f0105d19:	68 e8 59 13 f0       	push   $0xf01359e8
f0105d1e:	e8 d8 a4 ff ff       	call   f01001fb <_panic>
f0105d23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105d26:	05 00 00 00 10       	add    $0x10000000,%eax
f0105d2b:	a3 ac 7b 65 f0       	mov    %eax,0xf0657bac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105d30:	c7 45 e4 00 90 18 f0 	movl   $0xf0189000,-0x1c(%ebp)
f0105d37:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105d3e:	77 14                	ja     f0105d54 <initialize_kernel_VM+0x8e>
f0105d40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d43:	68 b4 59 13 f0       	push   $0xf01359b4
f0105d48:	6a 4d                	push   $0x4d
f0105d4a:	68 e8 59 13 f0       	push   $0xf01359e8
f0105d4f:	e8 a7 a4 ff ff       	call   f01001fb <_panic>
f0105d54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d57:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105d5d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d62:	83 ec 0c             	sub    $0xc,%esp
f0105d65:	6a 02                	push   $0x2
f0105d67:	52                   	push   %edx
f0105d68:	68 00 80 00 00       	push   $0x8000
f0105d6d:	68 00 80 bf ef       	push   $0xefbf8000
f0105d72:	50                   	push   %eax
f0105d73:	e8 31 02 00 00       	call   f0105fa9 <boot_map_range>
f0105d78:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105d7b:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105d82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105d89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d90:	eb 25                	jmp    f0105db7 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105d92:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105d95:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d98:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d9d:	83 ec 04             	sub    $0x4,%esp
f0105da0:	6a 01                	push   $0x1
f0105da2:	52                   	push   %edx
f0105da3:	50                   	push   %eax
f0105da4:	e8 74 02 00 00       	call   f010601d <boot_get_page_table>
f0105da9:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105dac:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105db3:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105db7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dbb:	72 d5                	jb     f0105d92 <initialize_kernel_VM+0xcc>
f0105dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dc1:	77 06                	ja     f0105dc9 <initialize_kernel_VM+0x103>
f0105dc3:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105dc7:	76 c9                	jbe    f0105d92 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105dc9:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f0105dcf:	89 d0                	mov    %edx,%eax
f0105dd1:	01 c0                	add    %eax,%eax
f0105dd3:	01 d0                	add    %edx,%eax
f0105dd5:	c1 e0 03             	shl    $0x3,%eax
f0105dd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ddb:	83 ec 08             	sub    $0x8,%esp
f0105dde:	68 00 10 00 00       	push   $0x1000
f0105de3:	ff 75 e0             	pushl  -0x20(%ebp)
f0105de6:	e8 5d 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105deb:	83 c4 10             	add    $0x10,%esp
f0105dee:	a3 54 7b 65 f0       	mov    %eax,0xf0657b54
	memset(frames_info, 0, array_size);
f0105df3:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0105df8:	83 ec 04             	sub    $0x4,%esp
f0105dfb:	ff 75 e0             	pushl  -0x20(%ebp)
f0105dfe:	6a 00                	push   $0x0
f0105e00:	50                   	push   %eax
f0105e01:	e8 68 b1 02 00       	call   f0130f6e <memset>
f0105e06:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105e09:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105e10:	83 ec 08             	sub    $0x8,%esp
f0105e13:	68 00 10 00 00       	push   $0x1000
f0105e18:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e1b:	e8 28 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105e20:	83 c4 10             	add    $0x10,%esp
f0105e23:	a3 dc 7a 65 f0       	mov    %eax,0xf0657adc
	memset(disk_frames_info , 0, disk_array_size);
f0105e28:	a1 dc 7a 65 f0       	mov    0xf0657adc,%eax
f0105e2d:	83 ec 04             	sub    $0x4,%esp
f0105e30:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e33:	6a 00                	push   $0x0
f0105e35:	50                   	push   %eax
f0105e36:	e8 33 b1 02 00       	call   f0130f6e <memset>
f0105e3b:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105e3e:	e8 d5 04 00 00       	call   f0106318 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105e43:	83 ec 0c             	sub    $0xc,%esp
f0105e46:	68 b1 02 00 00       	push   $0x2b1
f0105e4b:	e8 a2 9c 02 00       	call   f012faf2 <nearest_pow2_ceil>
f0105e50:	83 c4 10             	add    $0x10,%esp
f0105e53:	83 ec 04             	sub    $0x4,%esp
f0105e56:	50                   	push   %eax
f0105e57:	68 b1 02 00 00       	push   $0x2b1
f0105e5c:	68 08 5a 13 f0       	push   $0xf0135a08
f0105e61:	e8 1c ae ff ff       	call   f0100c82 <cprintf>
f0105e66:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105e69:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105e70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105e73:	83 ec 08             	sub    $0x8,%esp
f0105e76:	68 00 10 00 00       	push   $0x1000
f0105e7b:	50                   	push   %eax
f0105e7c:	e8 c7 00 00 00       	call   f0105f48 <boot_allocate_space>
f0105e81:	83 c4 10             	add    $0x10,%esp
f0105e84:	a3 10 72 65 f0       	mov    %eax,0xf0657210
	memset(envs , 0, envs_size);
f0105e89:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e8c:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105e91:	83 ec 04             	sub    $0x4,%esp
f0105e94:	52                   	push   %edx
f0105e95:	6a 00                	push   $0x0
f0105e97:	50                   	push   %eax
f0105e98:	e8 d1 b0 02 00       	call   f0130f6e <memset>
f0105e9d:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105ea0:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105ea8:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105eaf:	77 17                	ja     f0105ec8 <initialize_kernel_VM+0x202>
f0105eb1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105eb4:	68 b4 59 13 f0       	push   $0xf01359b4
f0105eb9:	68 96 00 00 00       	push   $0x96
f0105ebe:	68 e8 59 13 f0       	push   $0xf01359e8
f0105ec3:	e8 33 a3 ff ff       	call   f01001fb <_panic>
f0105ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105ecb:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105ed1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ed4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ed9:	83 ec 0c             	sub    $0xc,%esp
f0105edc:	6a 04                	push   $0x4
f0105ede:	51                   	push   %ecx
f0105edf:	52                   	push   %edx
f0105ee0:	68 00 00 c0 ee       	push   $0xeec00000
f0105ee5:	50                   	push   %eax
f0105ee6:	e8 be 00 00 00       	call   f0105fa9 <boot_map_range>
f0105eeb:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105eee:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ef3:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105ef8:	8b 15 7c 7b 65 f0    	mov    0xf0657b7c,%edx
f0105efe:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105f04:	8b 12                	mov    (%edx),%edx
f0105f06:	83 ca 05             	or     $0x5,%edx
f0105f09:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105f0b:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f10:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105f16:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105f1b:	83 ec 0c             	sub    $0xc,%esp
f0105f1e:	6a 02                	push   $0x2
f0105f20:	6a 00                	push   $0x0
f0105f22:	52                   	push   %edx
f0105f23:	68 00 00 00 f0       	push   $0xf0000000
f0105f28:	50                   	push   %eax
f0105f29:	e8 7b 00 00 00       	call   f0105fa9 <boot_map_range>
f0105f2e:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105f31:	e8 a3 a3 02 00       	call   f01302d9 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105f36:	c7 05 f0 7a 65 f0 19 	movl   $0x19,0xf0657af0
f0105f3d:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105f40:	e8 d3 02 00 00       	call   f0106218 <turn_on_paging>
}
f0105f45:	90                   	nop
f0105f46:	c9                   	leave  
f0105f47:	c3                   	ret    

f0105f48 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105f4e:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f53:	85 c0                	test   %eax,%eax
f0105f55:	75 0a                	jne    f0105f61 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105f57:	c7 05 78 7b 65 f0 bc 	movl   $0xf0657cbc,0xf0657b78
f0105f5e:	7c 65 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f64:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105f67:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f6c:	89 c2                	mov    %eax,%edx
f0105f6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105f71:	01 d0                	add    %edx,%eax
f0105f73:	48                   	dec    %eax
f0105f74:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105f77:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f7f:	f7 75 fc             	divl   -0x4(%ebp)
f0105f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f85:	29 d0                	sub    %edx,%eax
f0105f87:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105f8c:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f91:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105f94:	8b 15 78 7b 65 f0    	mov    0xf0657b78,%edx
f0105f9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f9d:	01 d0                	add    %edx,%eax
f0105f9f:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105fa7:	c9                   	leave  
f0105fa8:	c3                   	ret    

f0105fa9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105fa9:	55                   	push   %ebp
f0105faa:	89 e5                	mov    %esp,%ebp
f0105fac:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105fb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105fbd:	eb 53                	jmp    f0106012 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105fbf:	83 ec 04             	sub    $0x4,%esp
f0105fc2:	6a 01                	push   $0x1
f0105fc4:	ff 75 0c             	pushl  0xc(%ebp)
f0105fc7:	ff 75 08             	pushl  0x8(%ebp)
f0105fca:	e8 4e 00 00 00       	call   f010601d <boot_get_page_table>
f0105fcf:	83 c4 10             	add    $0x10,%esp
f0105fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fd8:	c1 e8 0c             	shr    $0xc,%eax
f0105fdb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105fe0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fe6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105fed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ff0:	01 c2                	add    %eax,%edx
f0105ff2:	8b 45 18             	mov    0x18(%ebp),%eax
f0105ff5:	0b 45 14             	or     0x14(%ebp),%eax
f0105ff8:	83 c8 01             	or     $0x1,%eax
f0105ffb:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105ffd:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106004:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010600b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106018:	72 a5                	jb     f0105fbf <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010601a:	90                   	nop
f010601b:	c9                   	leave  
f010601c:	c3                   	ret    

f010601d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010601d:	55                   	push   %ebp
f010601e:	89 e5                	mov    %esp,%ebp
f0106020:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106026:	c1 e8 16             	shr    $0x16,%eax
f0106029:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010602c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010602f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106036:	8b 45 08             	mov    0x8(%ebp),%eax
f0106039:	01 d0                	add    %edx,%eax
f010603b:	8b 00                	mov    (%eax),%eax
f010603d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106048:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010604b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010604e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106051:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106054:	c1 e8 0c             	shr    $0xc,%eax
f0106057:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010605a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010605f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106062:	72 17                	jb     f010607b <boot_get_page_table+0x5e>
f0106064:	ff 75 e8             	pushl  -0x18(%ebp)
f0106067:	68 30 5a 13 f0       	push   $0xf0135a30
f010606c:	68 15 01 00 00       	push   $0x115
f0106071:	68 e8 59 13 f0       	push   $0xf01359e8
f0106076:	e8 80 a1 ff ff       	call   f01001fb <_panic>
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106083:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106086:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010608a:	75 72                	jne    f01060fe <boot_get_page_table+0xe1>
	{
		if (create)
f010608c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106090:	74 65                	je     f01060f7 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106092:	83 ec 08             	sub    $0x8,%esp
f0106095:	68 00 10 00 00       	push   $0x1000
f010609a:	68 00 10 00 00       	push   $0x1000
f010609f:	e8 a4 fe ff ff       	call   f0105f48 <boot_allocate_space>
f01060a4:	83 c4 10             	add    $0x10,%esp
f01060a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01060aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01060b0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01060b7:	77 17                	ja     f01060d0 <boot_get_page_table+0xb3>
f01060b9:	ff 75 dc             	pushl  -0x24(%ebp)
f01060bc:	68 b4 59 13 f0       	push   $0xf01359b4
f01060c1:	68 1b 01 00 00       	push   $0x11b
f01060c6:	68 e8 59 13 f0       	push   $0xf01359e8
f01060cb:	e8 2b a1 ff ff       	call   f01001fb <_panic>
f01060d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060d3:	05 00 00 00 10       	add    $0x10000000,%eax
f01060d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01060db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01060e8:	01 d0                	add    %edx,%eax
f01060ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01060ed:	83 ca 03             	or     $0x3,%edx
f01060f0:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01060f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060f5:	eb 0a                	jmp    f0106101 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01060f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01060fc:	eb 03                	jmp    f0106101 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01060fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106101:	c9                   	leave  
f0106102:	c3                   	ret    

f0106103 <nvram_read>:


int nvram_read(int r)
{
f0106103:	55                   	push   %ebp
f0106104:	89 e5                	mov    %esp,%ebp
f0106106:	53                   	push   %ebx
f0106107:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010610a:	8b 45 08             	mov    0x8(%ebp),%eax
f010610d:	83 ec 0c             	sub    $0xc,%esp
f0106110:	50                   	push   %eax
f0106111:	e8 e6 de ff ff       	call   f0103ffc <mc146818_read>
f0106116:	83 c4 10             	add    $0x10,%esp
f0106119:	89 c3                	mov    %eax,%ebx
f010611b:	8b 45 08             	mov    0x8(%ebp),%eax
f010611e:	40                   	inc    %eax
f010611f:	83 ec 0c             	sub    $0xc,%esp
f0106122:	50                   	push   %eax
f0106123:	e8 d4 de ff ff       	call   f0103ffc <mc146818_read>
f0106128:	83 c4 10             	add    $0x10,%esp
f010612b:	c1 e0 08             	shl    $0x8,%eax
f010612e:	09 d8                	or     %ebx,%eax
}
f0106130:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106133:	c9                   	leave  
f0106134:	c3                   	ret    

f0106135 <detect_memory>:

void detect_memory()
{
f0106135:	55                   	push   %ebp
f0106136:	89 e5                	mov    %esp,%ebp
f0106138:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010613b:	83 ec 0c             	sub    $0xc,%esp
f010613e:	6a 15                	push   $0x15
f0106140:	e8 be ff ff ff       	call   f0106103 <nvram_read>
f0106145:	83 c4 10             	add    $0x10,%esp
f0106148:	c1 e0 0a             	shl    $0xa,%eax
f010614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106151:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106156:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106159:	83 ec 0c             	sub    $0xc,%esp
f010615c:	6a 17                	push   $0x17
f010615e:	e8 a0 ff ff ff       	call   f0106103 <nvram_read>
f0106163:	83 c4 10             	add    $0x10,%esp
f0106166:	c1 e0 0a             	shl    $0xa,%eax
f0106169:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010616c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010616f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106174:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106177:	83 ec 0c             	sub    $0xc,%esp
f010617a:	6a 34                	push   $0x34
f010617c:	e8 82 ff ff ff       	call   f0106103 <nvram_read>
f0106181:	83 c4 10             	add    $0x10,%esp
f0106184:	c1 e0 10             	shl    $0x10,%eax
f0106187:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010618a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010618d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106192:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106195:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106199:	74 18                	je     f01061b3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010619b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010619e:	05 00 00 00 01       	add    $0x1000000,%eax
f01061a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01061a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061a9:	2d 00 00 10 00       	sub    $0x100000,%eax
f01061ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061b1:	eb 19                	jmp    f01061cc <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01061b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01061b7:	74 0d                	je     f01061c6 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01061b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061bc:	05 00 00 10 00       	add    $0x100000,%eax
f01061c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01061c4:	eb 06                	jmp    f01061cc <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01061c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01061cc:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01061d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061d6:	c1 e8 0c             	shr    $0xc,%eax
f01061d9:	a3 10 7b 65 f0       	mov    %eax,0xf0657b10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01061de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061e1:	c1 e8 0a             	shr    $0xa,%eax
f01061e4:	83 ec 08             	sub    $0x8,%esp
f01061e7:	50                   	push   %eax
f01061e8:	68 60 5a 13 f0       	push   $0xf0135a60
f01061ed:	e8 90 aa ff ff       	call   f0100c82 <cprintf>
f01061f2:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01061f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f8:	c1 e8 0a             	shr    $0xa,%eax
f01061fb:	89 c2                	mov    %eax,%edx
f01061fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106200:	c1 e8 0a             	shr    $0xa,%eax
f0106203:	83 ec 04             	sub    $0x4,%esp
f0106206:	52                   	push   %edx
f0106207:	50                   	push   %eax
f0106208:	68 81 5a 13 f0       	push   $0xf0135a81
f010620d:	e8 70 aa ff ff       	call   f0100c82 <cprintf>
f0106212:	83 c4 10             	add    $0x10,%esp
}
f0106215:	90                   	nop
f0106216:	c9                   	leave  
f0106217:	c3                   	ret    

f0106218 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106218:	55                   	push   %ebp
f0106219:	89 e5                	mov    %esp,%ebp
f010621b:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010621e:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106225:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010622c:	eb 24                	jmp    f0106252 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010622e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106233:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106236:	c1 e2 02             	shl    $0x2,%edx
f0106239:	01 c2                	add    %eax,%edx
f010623b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106240:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106243:	c1 e1 02             	shl    $0x2,%ecx
f0106246:	01 c8                	add    %ecx,%eax
f0106248:	8b 00                	mov    (%eax),%eax
f010624a:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010624c:	ff 45 fc             	incl   -0x4(%ebp)
f010624f:	ff 45 f8             	incl   -0x8(%ebp)
f0106252:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106257:	c1 e8 16             	shr    $0x16,%eax
f010625a:	89 c2                	mov    %eax,%edx
f010625c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010625f:	39 c2                	cmp    %eax,%edx
f0106261:	77 cb                	ja     f010622e <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106263:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0106268:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010626b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010626e:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106271:	0f 20 c0             	mov    %cr0,%eax
f0106274:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106277:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010627a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010627d:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106284:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010628b:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010628e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106291:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106294:	0f 01 15 f0 18 19 f0 	lgdtl  0xf01918f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010629b:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a0:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01062a2:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a7:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01062a9:	b8 10 00 00 00       	mov    $0x10,%eax
f01062ae:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01062b0:	b8 10 00 00 00       	mov    $0x10,%eax
f01062b5:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01062b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01062bc:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01062be:	ea c5 62 10 f0 08 00 	ljmp   $0x8,$0xf01062c5
	asm volatile("lldt %%ax" :: "a" (0));
f01062c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01062ca:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01062cd:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01062d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062db:	eb 19                	jmp    f01062f6 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01062dd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01062e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062e5:	c1 e2 02             	shl    $0x2,%edx
f01062e8:	01 d0                	add    %edx,%eax
f01062ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062f0:	ff 45 f4             	incl   -0xc(%ebp)
f01062f3:	ff 45 f0             	incl   -0x10(%ebp)
f01062f6:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01062fb:	c1 e8 16             	shr    $0x16,%eax
f01062fe:	89 c2                	mov    %eax,%edx
f0106300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106303:	39 c2                	cmp    %eax,%edx
f0106305:	77 d6                	ja     f01062dd <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106307:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010630c:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010630f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106312:	0f 22 d8             	mov    %eax,%cr3
}
f0106315:	90                   	nop
f0106316:	c9                   	leave  
f0106317:	c3                   	ret    

f0106318 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106318:	55                   	push   %ebp
f0106319:	89 e5                	mov    %esp,%ebp
f010631b:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010631e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106323:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106326:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010632d:	77 17                	ja     f0106346 <setup_listing_to_all_page_tables_entries+0x2e>
f010632f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106332:	68 b4 59 13 f0       	push   $0xf01359b4
f0106337:	68 ab 01 00 00       	push   $0x1ab
f010633c:	68 e8 59 13 f0       	push   $0xf01359e8
f0106341:	e8 b5 9e ff ff       	call   f01001fb <_panic>
f0106346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106349:	05 00 00 00 10       	add    $0x10000000,%eax
f010634e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106356:	05 fc 0e 00 00       	add    $0xefc,%eax
f010635b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010635e:	83 ca 03             	or     $0x3,%edx
f0106361:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106363:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106368:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010636e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106373:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106376:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010637d:	77 17                	ja     f0106396 <setup_listing_to_all_page_tables_entries+0x7e>
f010637f:	ff 75 ec             	pushl  -0x14(%ebp)
f0106382:	68 b4 59 13 f0       	push   $0xf01359b4
f0106387:	68 b0 01 00 00       	push   $0x1b0
f010638c:	68 e8 59 13 f0       	push   $0xf01359e8
f0106391:	e8 65 9e ff ff       	call   f01001fb <_panic>
f0106396:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106399:	05 00 00 00 10       	add    $0x10000000,%eax
f010639e:	83 c8 05             	or     $0x5,%eax
f01063a1:	89 02                	mov    %eax,(%edx)

}
f01063a3:	90                   	nop
f01063a4:	c9                   	leave  
f01063a5:	c3                   	ret    

f01063a6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01063a6:	55                   	push   %ebp
f01063a7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01063a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063ac:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01063b2:	29 d0                	sub    %edx,%eax
f01063b4:	c1 f8 03             	sar    $0x3,%eax
f01063b7:	89 c2                	mov    %eax,%edx
f01063b9:	89 d0                	mov    %edx,%eax
f01063bb:	c1 e0 02             	shl    $0x2,%eax
f01063be:	01 d0                	add    %edx,%eax
f01063c0:	c1 e0 02             	shl    $0x2,%eax
f01063c3:	01 d0                	add    %edx,%eax
f01063c5:	c1 e0 02             	shl    $0x2,%eax
f01063c8:	01 d0                	add    %edx,%eax
f01063ca:	89 c1                	mov    %eax,%ecx
f01063cc:	c1 e1 08             	shl    $0x8,%ecx
f01063cf:	01 c8                	add    %ecx,%eax
f01063d1:	89 c1                	mov    %eax,%ecx
f01063d3:	c1 e1 10             	shl    $0x10,%ecx
f01063d6:	01 c8                	add    %ecx,%eax
f01063d8:	01 c0                	add    %eax,%eax
f01063da:	01 d0                	add    %edx,%eax
}
f01063dc:	5d                   	pop    %ebp
f01063dd:	c3                   	ret    

f01063de <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01063de:	55                   	push   %ebp
f01063df:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01063e1:	ff 75 08             	pushl  0x8(%ebp)
f01063e4:	e8 bd ff ff ff       	call   f01063a6 <to_frame_number>
f01063e9:	83 c4 04             	add    $0x4,%esp
f01063ec:	c1 e0 0c             	shl    $0xc,%eax
}
f01063ef:	c9                   	leave  
f01063f0:	c3                   	ret    

f01063f1 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01063f1:	55                   	push   %ebp
f01063f2:	89 e5                	mov    %esp,%ebp
f01063f4:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01063f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fa:	c1 e8 0c             	shr    $0xc,%eax
f01063fd:	89 c2                	mov    %eax,%edx
f01063ff:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106404:	39 c2                	cmp    %eax,%edx
f0106406:	72 14                	jb     f010641c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106408:	83 ec 04             	sub    $0x4,%esp
f010640b:	68 a0 5a 13 f0       	push   $0xf0135aa0
f0106410:	6a 55                	push   $0x55
f0106412:	68 c5 5a 13 f0       	push   $0xf0135ac5
f0106417:	e8 df 9d ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f010641c:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106422:	8b 45 08             	mov    0x8(%ebp),%eax
f0106425:	c1 e8 0c             	shr    $0xc,%eax
f0106428:	89 c1                	mov    %eax,%ecx
f010642a:	89 c8                	mov    %ecx,%eax
f010642c:	01 c0                	add    %eax,%eax
f010642e:	01 c8                	add    %ecx,%eax
f0106430:	c1 e0 03             	shl    $0x3,%eax
f0106433:	01 d0                	add    %edx,%eax
}
f0106435:	c9                   	leave  
f0106436:	c3                   	ret    

f0106437 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106437:	55                   	push   %ebp
f0106438:	89 e5                	mov    %esp,%ebp
f010643a:	83 ec 10             	sub    $0x10,%esp
f010643d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106440:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106443:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106446:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106449:	90                   	nop
f010644a:	c9                   	leave  
f010644b:	c3                   	ret    

f010644c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010644c:	55                   	push   %ebp
f010644d:	89 e5                	mov    %esp,%ebp
f010644f:	53                   	push   %ebx
f0106450:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106453:	c7 05 18 7b 65 f0 00 	movl   $0x0,0xf0657b18
f010645a:	00 00 00 
f010645d:	c7 05 1c 7b 65 f0 00 	movl   $0x0,0xf0657b1c
f0106464:	00 00 00 
f0106467:	c7 05 24 7b 65 f0 00 	movl   $0x0,0xf0657b24
f010646e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106471:	c7 05 b8 7a 65 f0 00 	movl   $0x0,0xf0657ab8
f0106478:	00 00 00 
f010647b:	c7 05 bc 7a 65 f0 00 	movl   $0x0,0xf0657abc
f0106482:	00 00 00 
f0106485:	c7 05 c4 7a 65 f0 00 	movl   $0x0,0xf0657ac4
f010648c:	00 00 00 

	frames_info[0].references = 1;
f010648f:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0106494:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010649a:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f010649f:	83 c0 18             	add    $0x18,%eax
f01064a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01064a8:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f01064ad:	83 c0 30             	add    $0x30,%eax
f01064b0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01064b6:	c7 05 60 7b 65 f0 00 	movl   $0xf0001000,0xf0657b60
f01064bd:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01064c0:	c7 05 84 7b 65 f0 00 	movl   $0xf0002000,0xf0657b84
f01064c7:	20 00 f0 
	i =0;
f01064ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01064d1:	eb 1f                	jmp    f01064f2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01064d3:	8b 15 60 7b 65 f0    	mov    0xf0657b60,%edx
f01064d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064dc:	01 d0                	add    %edx,%eax
f01064de:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01064e1:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01064e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064ea:	01 d0                	add    %edx,%eax
f01064ec:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01064ef:	ff 45 f4             	incl   -0xc(%ebp)
f01064f2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01064f9:	7e d8                	jle    f01064d3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01064fb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106505:	05 ff ff 09 00       	add    $0x9ffff,%eax
f010650a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010650d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106510:	ba 00 00 00 00       	mov    $0x0,%edx
f0106515:	f7 75 f0             	divl   -0x10(%ebp)
f0106518:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010651b:	29 d0                	sub    %edx,%eax
f010651d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106520:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106527:	e9 e8 00 00 00       	jmp    f0106614 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010652c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106532:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106535:	89 d0                	mov    %edx,%eax
f0106537:	01 c0                	add    %eax,%eax
f0106539:	01 d0                	add    %edx,%eax
f010653b:	c1 e0 03             	shl    $0x3,%eax
f010653e:	01 c8                	add    %ecx,%eax
f0106540:	83 ec 0c             	sub    $0xc,%esp
f0106543:	50                   	push   %eax
f0106544:	e8 b7 02 00 00       	call   f0106800 <initialize_frame_info>
f0106549:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010654c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106552:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106555:	89 d0                	mov    %edx,%eax
f0106557:	01 c0                	add    %eax,%eax
f0106559:	01 d0                	add    %edx,%eax
f010655b:	c1 e0 03             	shl    $0x3,%eax
f010655e:	01 c8                	add    %ecx,%eax
f0106560:	85 c0                	test   %eax,%eax
f0106562:	75 14                	jne    f0106578 <initialize_paging+0x12c>
f0106564:	83 ec 04             	sub    $0x4,%esp
f0106567:	68 e0 5a 13 f0       	push   $0xf0135ae0
f010656c:	6a 5c                	push   $0x5c
f010656e:	68 03 5b 13 f0       	push   $0xf0135b03
f0106573:	e8 83 9c ff ff       	call   f01001fb <_panic>
f0106578:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010657e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106581:	89 d0                	mov    %edx,%eax
f0106583:	01 c0                	add    %eax,%eax
f0106585:	01 d0                	add    %edx,%eax
f0106587:	c1 e0 03             	shl    $0x3,%eax
f010658a:	01 c8                	add    %ecx,%eax
f010658c:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106592:	89 10                	mov    %edx,(%eax)
f0106594:	8b 00                	mov    (%eax),%eax
f0106596:	85 c0                	test   %eax,%eax
f0106598:	74 1f                	je     f01065b9 <initialize_paging+0x16d>
f010659a:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f01065a0:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f01065a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01065a9:	89 c8                	mov    %ecx,%eax
f01065ab:	01 c0                	add    %eax,%eax
f01065ad:	01 c8                	add    %ecx,%eax
f01065af:	c1 e0 03             	shl    $0x3,%eax
f01065b2:	01 d8                	add    %ebx,%eax
f01065b4:	89 42 04             	mov    %eax,0x4(%edx)
f01065b7:	eb 19                	jmp    f01065d2 <initialize_paging+0x186>
f01065b9:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065c2:	89 d0                	mov    %edx,%eax
f01065c4:	01 c0                	add    %eax,%eax
f01065c6:	01 d0                	add    %edx,%eax
f01065c8:	c1 e0 03             	shl    $0x3,%eax
f01065cb:	01 c8                	add    %ecx,%eax
f01065cd:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01065d2:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065db:	89 d0                	mov    %edx,%eax
f01065dd:	01 c0                	add    %eax,%eax
f01065df:	01 d0                	add    %edx,%eax
f01065e1:	c1 e0 03             	shl    $0x3,%eax
f01065e4:	01 c8                	add    %ecx,%eax
f01065e6:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01065eb:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f4:	89 d0                	mov    %edx,%eax
f01065f6:	01 c0                	add    %eax,%eax
f01065f8:	01 d0                	add    %edx,%eax
f01065fa:	c1 e0 03             	shl    $0x3,%eax
f01065fd:	01 c8                	add    %ecx,%eax
f01065ff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106606:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010660b:	40                   	inc    %eax
f010660c:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106611:	ff 45 f4             	incl   -0xc(%ebp)
f0106614:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106617:	85 c0                	test   %eax,%eax
f0106619:	79 05                	jns    f0106620 <initialize_paging+0x1d4>
f010661b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106620:	c1 f8 0c             	sar    $0xc,%eax
f0106623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106626:	0f 8f 00 ff ff ff    	jg     f010652c <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010662c:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106633:	eb 1d                	jmp    f0106652 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106635:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010663b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010663e:	89 d0                	mov    %edx,%eax
f0106640:	01 c0                	add    %eax,%eax
f0106642:	01 d0                	add    %edx,%eax
f0106644:	c1 e0 03             	shl    $0x3,%eax
f0106647:	01 c8                	add    %ecx,%eax
f0106649:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010664f:	ff 45 f4             	incl   -0xc(%ebp)
f0106652:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106659:	7e da                	jle    f0106635 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010665b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106662:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106667:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010666a:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106671:	77 14                	ja     f0106687 <initialize_paging+0x23b>
f0106673:	ff 75 e0             	pushl  -0x20(%ebp)
f0106676:	68 20 5b 13 f0       	push   $0xf0135b20
f010667b:	6a 64                	push   $0x64
f010667d:	68 03 5b 13 f0       	push   $0xf0135b03
f0106682:	e8 74 9b ff ff       	call   f01001fb <_panic>
f0106687:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106693:	01 d0                	add    %edx,%eax
f0106695:	48                   	dec    %eax
f0106696:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106699:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010669c:	ba 00 00 00 00       	mov    $0x0,%edx
f01066a1:	f7 75 e4             	divl   -0x1c(%ebp)
f01066a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066a7:	29 d0                	sub    %edx,%eax
f01066a9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066ac:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01066b3:	eb 1d                	jmp    f01066d2 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01066b5:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01066bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066be:	89 d0                	mov    %edx,%eax
f01066c0:	01 c0                	add    %eax,%eax
f01066c2:	01 d0                	add    %edx,%eax
f01066c4:	c1 e0 03             	shl    $0x3,%eax
f01066c7:	01 c8                	add    %ecx,%eax
f01066c9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066cf:	ff 45 f4             	incl   -0xc(%ebp)
f01066d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066d5:	85 c0                	test   %eax,%eax
f01066d7:	79 05                	jns    f01066de <initialize_paging+0x292>
f01066d9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066de:	c1 f8 0c             	sar    $0xc,%eax
f01066e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066e4:	7f cf                	jg     f01066b5 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01066e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066e9:	85 c0                	test   %eax,%eax
f01066eb:	79 05                	jns    f01066f2 <initialize_paging+0x2a6>
f01066ed:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f2:	c1 f8 0c             	sar    $0xc,%eax
f01066f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01066f8:	e9 e8 00 00 00       	jmp    f01067e5 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01066fd:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106706:	89 d0                	mov    %edx,%eax
f0106708:	01 c0                	add    %eax,%eax
f010670a:	01 d0                	add    %edx,%eax
f010670c:	c1 e0 03             	shl    $0x3,%eax
f010670f:	01 c8                	add    %ecx,%eax
f0106711:	83 ec 0c             	sub    $0xc,%esp
f0106714:	50                   	push   %eax
f0106715:	e8 e6 00 00 00       	call   f0106800 <initialize_frame_info>
f010671a:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010671d:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106723:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106726:	89 d0                	mov    %edx,%eax
f0106728:	01 c0                	add    %eax,%eax
f010672a:	01 d0                	add    %edx,%eax
f010672c:	c1 e0 03             	shl    $0x3,%eax
f010672f:	01 c8                	add    %ecx,%eax
f0106731:	85 c0                	test   %eax,%eax
f0106733:	75 14                	jne    f0106749 <initialize_paging+0x2fd>
f0106735:	83 ec 04             	sub    $0x4,%esp
f0106738:	68 e0 5a 13 f0       	push   $0xf0135ae0
f010673d:	6a 70                	push   $0x70
f010673f:	68 03 5b 13 f0       	push   $0xf0135b03
f0106744:	e8 b2 9a ff ff       	call   f01001fb <_panic>
f0106749:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010674f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106752:	89 d0                	mov    %edx,%eax
f0106754:	01 c0                	add    %eax,%eax
f0106756:	01 d0                	add    %edx,%eax
f0106758:	c1 e0 03             	shl    $0x3,%eax
f010675b:	01 c8                	add    %ecx,%eax
f010675d:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106763:	89 10                	mov    %edx,(%eax)
f0106765:	8b 00                	mov    (%eax),%eax
f0106767:	85 c0                	test   %eax,%eax
f0106769:	74 1f                	je     f010678a <initialize_paging+0x33e>
f010676b:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106771:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f0106777:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010677a:	89 c8                	mov    %ecx,%eax
f010677c:	01 c0                	add    %eax,%eax
f010677e:	01 c8                	add    %ecx,%eax
f0106780:	c1 e0 03             	shl    $0x3,%eax
f0106783:	01 d8                	add    %ebx,%eax
f0106785:	89 42 04             	mov    %eax,0x4(%edx)
f0106788:	eb 19                	jmp    f01067a3 <initialize_paging+0x357>
f010678a:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106793:	89 d0                	mov    %edx,%eax
f0106795:	01 c0                	add    %eax,%eax
f0106797:	01 d0                	add    %edx,%eax
f0106799:	c1 e0 03             	shl    $0x3,%eax
f010679c:	01 c8                	add    %ecx,%eax
f010679e:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01067a3:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067ac:	89 d0                	mov    %edx,%eax
f01067ae:	01 c0                	add    %eax,%eax
f01067b0:	01 d0                	add    %edx,%eax
f01067b2:	c1 e0 03             	shl    $0x3,%eax
f01067b5:	01 c8                	add    %ecx,%eax
f01067b7:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01067bc:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c5:	89 d0                	mov    %edx,%eax
f01067c7:	01 c0                	add    %eax,%eax
f01067c9:	01 d0                	add    %edx,%eax
f01067cb:	c1 e0 03             	shl    $0x3,%eax
f01067ce:	01 c8                	add    %ecx,%eax
f01067d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01067d7:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01067dc:	40                   	inc    %eax
f01067dd:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067e2:	ff 45 f4             	incl   -0xc(%ebp)
f01067e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e8:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01067ed:	39 c2                	cmp    %eax,%edx
f01067ef:	0f 82 08 ff ff ff    	jb     f01066fd <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01067f5:	e8 36 c9 ff ff       	call   f0103130 <initialize_disk_page_file>
}
f01067fa:	90                   	nop
f01067fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067fe:	c9                   	leave  
f01067ff:	c3                   	ret    

f0106800 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106800:	55                   	push   %ebp
f0106801:	89 e5                	mov    %esp,%ebp
f0106803:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106806:	83 ec 04             	sub    $0x4,%esp
f0106809:	6a 18                	push   $0x18
f010680b:	6a 00                	push   $0x0
f010680d:	ff 75 08             	pushl  0x8(%ebp)
f0106810:	e8 59 a7 02 00       	call   f0130f6e <memset>
f0106815:	83 c4 10             	add    $0x10,%esp
}
f0106818:	90                   	nop
f0106819:	c9                   	leave  
f010681a:	c3                   	ret    

f010681b <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010681b:	55                   	push   %ebp
f010681c:	89 e5                	mov    %esp,%ebp
f010681e:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106821:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106827:	8b 45 08             	mov    0x8(%ebp),%eax
f010682a:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010682c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106833:	8b 45 08             	mov    0x8(%ebp),%eax
f0106836:	8b 00                	mov    (%eax),%eax
f0106838:	85 c0                	test   %eax,%eax
f010683a:	75 17                	jne    f0106853 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010683c:	83 ec 04             	sub    $0x4,%esp
f010683f:	68 54 5b 13 f0       	push   $0xf0135b54
f0106844:	68 99 00 00 00       	push   $0x99
f0106849:	68 03 5b 13 f0       	push   $0xf0135b03
f010684e:	e8 a8 99 ff ff       	call   f01001fb <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106853:	8b 45 08             	mov    0x8(%ebp),%eax
f0106856:	8b 00                	mov    (%eax),%eax
f0106858:	85 c0                	test   %eax,%eax
f010685a:	75 17                	jne    f0106873 <allocate_frame+0x58>
f010685c:	83 ec 04             	sub    $0x4,%esp
f010685f:	68 a1 5b 13 f0       	push   $0xf0135ba1
f0106864:	68 9c 00 00 00       	push   $0x9c
f0106869:	68 03 5b 13 f0       	push   $0xf0135b03
f010686e:	e8 88 99 ff ff       	call   f01001fb <_panic>
f0106873:	8b 45 08             	mov    0x8(%ebp),%eax
f0106876:	8b 00                	mov    (%eax),%eax
f0106878:	8b 00                	mov    (%eax),%eax
f010687a:	85 c0                	test   %eax,%eax
f010687c:	74 14                	je     f0106892 <allocate_frame+0x77>
f010687e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106881:	8b 00                	mov    (%eax),%eax
f0106883:	8b 00                	mov    (%eax),%eax
f0106885:	8b 55 08             	mov    0x8(%ebp),%edx
f0106888:	8b 12                	mov    (%edx),%edx
f010688a:	8b 52 04             	mov    0x4(%edx),%edx
f010688d:	89 50 04             	mov    %edx,0x4(%eax)
f0106890:	eb 0d                	jmp    f010689f <allocate_frame+0x84>
f0106892:	8b 45 08             	mov    0x8(%ebp),%eax
f0106895:	8b 00                	mov    (%eax),%eax
f0106897:	8b 40 04             	mov    0x4(%eax),%eax
f010689a:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010689f:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a2:	8b 00                	mov    (%eax),%eax
f01068a4:	8b 40 04             	mov    0x4(%eax),%eax
f01068a7:	85 c0                	test   %eax,%eax
f01068a9:	74 13                	je     f01068be <allocate_frame+0xa3>
f01068ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ae:	8b 00                	mov    (%eax),%eax
f01068b0:	8b 40 04             	mov    0x4(%eax),%eax
f01068b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01068b6:	8b 12                	mov    (%edx),%edx
f01068b8:	8b 12                	mov    (%edx),%edx
f01068ba:	89 10                	mov    %edx,(%eax)
f01068bc:	eb 0c                	jmp    f01068ca <allocate_frame+0xaf>
f01068be:	8b 45 08             	mov    0x8(%ebp),%eax
f01068c1:	8b 00                	mov    (%eax),%eax
f01068c3:	8b 00                	mov    (%eax),%eax
f01068c5:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01068ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cd:	8b 00                	mov    (%eax),%eax
f01068cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01068d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068d8:	8b 00                	mov    (%eax),%eax
f01068da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068e1:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01068e6:	48                   	dec    %eax
f01068e7:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01068ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ef:	8b 00                	mov    (%eax),%eax
f01068f1:	8a 40 14             	mov    0x14(%eax),%al
f01068f4:	84 c0                	test   %al,%al
f01068f6:	74 20                	je     f0106918 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01068f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fb:	8b 00                	mov    (%eax),%eax
f01068fd:	8b 50 0c             	mov    0xc(%eax),%edx
f0106900:	8b 45 08             	mov    0x8(%ebp),%eax
f0106903:	8b 00                	mov    (%eax),%eax
f0106905:	8b 40 10             	mov    0x10(%eax),%eax
f0106908:	8b 40 5c             	mov    0x5c(%eax),%eax
f010690b:	83 ec 08             	sub    $0x8,%esp
f010690e:	52                   	push   %edx
f010690f:	50                   	push   %eax
f0106910:	e8 35 13 00 00       	call   f0107c4a <pt_clear_page_table_entry>
f0106915:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106918:	8b 45 08             	mov    0x8(%ebp),%eax
f010691b:	8b 00                	mov    (%eax),%eax
f010691d:	83 ec 0c             	sub    $0xc,%esp
f0106920:	50                   	push   %eax
f0106921:	e8 da fe ff ff       	call   f0106800 <initialize_frame_info>
f0106926:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010692e:	c9                   	leave  
f010692f:	c3                   	ret    

f0106930 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106930:	55                   	push   %ebp
f0106931:	89 e5                	mov    %esp,%ebp
f0106933:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106936:	83 ec 0c             	sub    $0xc,%esp
f0106939:	ff 75 08             	pushl  0x8(%ebp)
f010693c:	e8 bf fe ff ff       	call   f0106800 <initialize_frame_info>
f0106941:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106944:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106948:	75 17                	jne    f0106961 <free_frame+0x31>
f010694a:	83 ec 04             	sub    $0x4,%esp
f010694d:	68 e0 5a 13 f0       	push   $0xf0135ae0
f0106952:	68 b9 00 00 00       	push   $0xb9
f0106957:	68 03 5b 13 f0       	push   $0xf0135b03
f010695c:	e8 9a 98 ff ff       	call   f01001fb <_panic>
f0106961:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106967:	8b 45 08             	mov    0x8(%ebp),%eax
f010696a:	89 10                	mov    %edx,(%eax)
f010696c:	8b 45 08             	mov    0x8(%ebp),%eax
f010696f:	8b 00                	mov    (%eax),%eax
f0106971:	85 c0                	test   %eax,%eax
f0106973:	74 0d                	je     f0106982 <free_frame+0x52>
f0106975:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f010697a:	8b 55 08             	mov    0x8(%ebp),%edx
f010697d:	89 50 04             	mov    %edx,0x4(%eax)
f0106980:	eb 08                	jmp    f010698a <free_frame+0x5a>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010698a:	8b 45 08             	mov    0x8(%ebp),%eax
f010698d:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f0106992:	8b 45 08             	mov    0x8(%ebp),%eax
f0106995:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010699c:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01069a1:	40                   	inc    %eax
f01069a2:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f01069a7:	90                   	nop
f01069a8:	c9                   	leave  
f01069a9:	c3                   	ret    

f01069aa <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01069aa:	55                   	push   %ebp
f01069ab:	89 e5                	mov    %esp,%ebp
f01069ad:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01069b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b3:	8b 40 08             	mov    0x8(%eax),%eax
f01069b6:	48                   	dec    %eax
f01069b7:	8b 55 08             	mov    0x8(%ebp),%edx
f01069ba:	66 89 42 08          	mov    %ax,0x8(%edx)
f01069be:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c1:	8b 40 08             	mov    0x8(%eax),%eax
f01069c4:	66 85 c0             	test   %ax,%ax
f01069c7:	75 0e                	jne    f01069d7 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01069c9:	83 ec 0c             	sub    $0xc,%esp
f01069cc:	ff 75 08             	pushl  0x8(%ebp)
f01069cf:	e8 5c ff ff ff       	call   f0106930 <free_frame>
f01069d4:	83 c4 10             	add    $0x10,%esp
}
f01069d7:	90                   	nop
f01069d8:	c9                   	leave  
f01069d9:	c3                   	ret    

f01069da <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01069da:	55                   	push   %ebp
f01069db:	89 e5                	mov    %esp,%ebp
f01069dd:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e3:	c1 e8 16             	shr    $0x16,%eax
f01069e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01069ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f0:	01 d0                	add    %edx,%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01069f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069fa:	83 e0 01             	and    $0x1,%eax
f01069fd:	85 c0                	test   %eax,%eax
f01069ff:	74 74                	je     f0106a75 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106a01:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106a08:	77 1d                	ja     f0106a27 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a12:	83 ec 0c             	sub    $0xc,%esp
f0106a15:	50                   	push   %eax
f0106a16:	e8 ea 0f 00 00       	call   f0107a05 <kheap_virtual_address>
f0106a1b:	83 c4 10             	add    $0x10,%esp
f0106a1e:	89 c2                	mov    %eax,%edx
f0106a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a23:	89 10                	mov    %edx,(%eax)
f0106a25:	eb 44                	jmp    f0106a6b <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a35:	c1 e8 0c             	shr    $0xc,%eax
f0106a38:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a3b:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106a40:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106a43:	72 17                	jb     f0106a5c <get_page_table+0x82>
f0106a45:	ff 75 f0             	pushl  -0x10(%ebp)
f0106a48:	68 c0 5b 13 f0       	push   $0xf0135bc0
f0106a4d:	68 e2 00 00 00       	push   $0xe2
f0106a52:	68 03 5b 13 f0       	push   $0xf0135b03
f0106a57:	e8 9f 97 ff ff       	call   f01001fb <_panic>
f0106a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a5f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a64:	89 c2                	mov    %eax,%edx
f0106a66:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a69:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a70:	e9 b9 00 00 00       	jmp    f0106b2e <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106a75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a79:	0f 84 a1 00 00 00    	je     f0106b20 <get_page_table+0x146>
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106a85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a88:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106a8b:	83 ec 0c             	sub    $0xc,%esp
f0106a8e:	6a 00                	push   $0x0
f0106a90:	e8 49 5b 00 00       	call   f010c5de <fault_handler>
f0106a95:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a9b:	c1 e8 16             	shr    $0x16,%eax
f0106a9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa8:	01 d0                	add    %edx,%eax
f0106aaa:	8b 00                	mov    (%eax),%eax
f0106aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106aaf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ab6:	77 1d                	ja     f0106ad5 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106abb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ac0:	83 ec 0c             	sub    $0xc,%esp
f0106ac3:	50                   	push   %eax
f0106ac4:	e8 3c 0f 00 00       	call   f0107a05 <kheap_virtual_address>
f0106ac9:	83 c4 10             	add    $0x10,%esp
f0106acc:	89 c2                	mov    %eax,%edx
f0106ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ad1:	89 10                	mov    %edx,(%eax)
f0106ad3:	eb 44                	jmp    f0106b19 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106add:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ae3:	c1 e8 0c             	shr    $0xc,%eax
f0106ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ae9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106aee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106af1:	72 17                	jb     f0106b0a <get_page_table+0x130>
f0106af3:	ff 75 e8             	pushl  -0x18(%ebp)
f0106af6:	68 c0 5b 13 f0       	push   $0xf0135bc0
f0106afb:	68 fa 00 00 00       	push   $0xfa
f0106b00:	68 03 5b 13 f0       	push   $0xf0135b03
f0106b05:	e8 f1 96 ff ff       	call   f01001fb <_panic>
f0106b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b0d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b12:	89 c2                	mov    %eax,%edx
f0106b14:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b17:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106b19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b1e:	eb 0e                	jmp    f0106b2e <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106b20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106b29:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106b2e:	c9                   	leave  
f0106b2f:	c3                   	ret    

f0106b30 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106b30:	55                   	push   %ebp
f0106b31:	89 e5                	mov    %esp,%ebp
f0106b33:	53                   	push   %ebx
f0106b34:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106b37:	83 ec 0c             	sub    $0xc,%esp
f0106b3a:	68 00 10 00 00       	push   $0x1000
f0106b3f:	e8 cf 0c 00 00       	call   f0107813 <kmalloc>
f0106b44:	83 c4 10             	add    $0x10,%esp
f0106b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106b4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b4e:	75 17                	jne    f0106b67 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106b50:	83 ec 04             	sub    $0x4,%esp
f0106b53:	68 ef 5b 13 f0       	push   $0xf0135bef
f0106b58:	68 18 01 00 00       	push   $0x118
f0106b5d:	68 03 5b 13 f0       	push   $0xf0135b03
f0106b62:	e8 94 96 ff ff       	call   f01001fb <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106b67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b6a:	c1 e8 16             	shr    $0x16,%eax
f0106b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b7d:	83 ec 0c             	sub    $0xc,%esp
f0106b80:	50                   	push   %eax
f0106b81:	e8 ab 0e 00 00       	call   f0107a31 <kheap_physical_address>
f0106b86:	83 c4 10             	add    $0x10,%esp
f0106b89:	83 c8 07             	or     $0x7,%eax
f0106b8c:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106b8e:	83 ec 04             	sub    $0x4,%esp
f0106b91:	68 00 10 00 00       	push   $0x1000
f0106b96:	6a 00                	push   $0x0
f0106b98:	ff 75 f4             	pushl  -0xc(%ebp)
f0106b9b:	e8 ce a3 02 00       	call   f0130f6e <memset>
f0106ba0:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106ba3:	0f 20 d8             	mov    %cr3,%eax
f0106ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106ba9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bac:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106bb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106bb5:	c9                   	leave  
f0106bb6:	c3                   	ret    

f0106bb7 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106bb7:	55                   	push   %ebp
f0106bb8:	89 e5                	mov    %esp,%ebp
f0106bba:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106bbd:	83 ec 0c             	sub    $0xc,%esp
f0106bc0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106bc3:	50                   	push   %eax
f0106bc4:	e8 52 fc ff ff       	call   f010681b <allocate_frame>
f0106bc9:	83 c4 10             	add    $0x10,%esp
f0106bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bd2:	83 ec 0c             	sub    $0xc,%esp
f0106bd5:	50                   	push   %eax
f0106bd6:	e8 03 f8 ff ff       	call   f01063de <to_physical_address>
f0106bdb:	83 c4 10             	add    $0x10,%esp
f0106bde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bea:	c1 e8 0c             	shr    $0xc,%eax
f0106bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bf0:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106bf5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106bf8:	72 17                	jb     f0106c11 <__static_cpt+0x5a>
f0106bfa:	ff 75 ec             	pushl  -0x14(%ebp)
f0106bfd:	68 c0 5b 13 f0       	push   $0xf0135bc0
f0106c02:	68 30 01 00 00       	push   $0x130
f0106c07:	68 03 5b 13 f0       	push   $0xf0135b03
f0106c0c:	e8 ea 95 ff ff       	call   f01001fb <_panic>
f0106c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c19:	89 c2                	mov    %eax,%edx
f0106c1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c1e:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106c20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c23:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2c:	c1 e8 16             	shr    $0x16,%eax
f0106c2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c39:	01 d0                	add    %edx,%eax
f0106c3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3e:	83 ca 07             	or     $0x7,%edx
f0106c41:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106c43:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c46:	8b 00                	mov    (%eax),%eax
f0106c48:	83 ec 04             	sub    $0x4,%esp
f0106c4b:	68 00 10 00 00       	push   $0x1000
f0106c50:	6a 00                	push   $0x0
f0106c52:	50                   	push   %eax
f0106c53:	e8 16 a3 02 00       	call   f0130f6e <memset>
f0106c58:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c5b:	0f 20 d8             	mov    %cr3,%eax
f0106c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106c64:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106c67:	90                   	nop
f0106c68:	c9                   	leave  
f0106c69:	c3                   	ret    

f0106c6a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106c6a:	55                   	push   %ebp
f0106c6b:	89 e5                	mov    %esp,%ebp
f0106c6d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106c70:	ff 75 0c             	pushl  0xc(%ebp)
f0106c73:	e8 66 f7 ff ff       	call   f01063de <to_physical_address>
f0106c78:	83 c4 04             	add    $0x4,%esp
f0106c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106c7e:	83 ec 04             	sub    $0x4,%esp
f0106c81:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106c84:	50                   	push   %eax
f0106c85:	ff 75 10             	pushl  0x10(%ebp)
f0106c88:	ff 75 08             	pushl  0x8(%ebp)
f0106c8b:	e8 4a fd ff ff       	call   f01069da <get_page_table>
f0106c90:	83 c4 10             	add    $0x10,%esp
f0106c93:	83 f8 01             	cmp    $0x1,%eax
f0106c96:	75 1b                	jne    f0106cb3 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106c98:	83 ec 08             	sub    $0x8,%esp
f0106c9b:	ff 75 10             	pushl  0x10(%ebp)
f0106c9e:	ff 75 08             	pushl  0x8(%ebp)
f0106ca1:	e8 8a fe ff ff       	call   f0106b30 <create_page_table>
f0106ca6:	83 c4 10             	add    $0x10,%esp
f0106ca9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cb6:	8b 55 10             	mov    0x10(%ebp),%edx
f0106cb9:	c1 ea 0c             	shr    $0xc,%edx
f0106cbc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cc2:	c1 e2 02             	shl    $0x2,%edx
f0106cc5:	01 d0                	add    %edx,%eax
f0106cc7:	8b 00                	mov    (%eax),%eax
f0106cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccf:	83 e0 01             	and    $0x1,%eax
f0106cd2:	85 c0                	test   %eax,%eax
f0106cd4:	74 25                	je     f0106cfb <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106ce1:	75 07                	jne    f0106cea <map_frame+0x80>
			return 0;
f0106ce3:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ce8:	eb 43                	jmp    f0106d2d <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106cea:	83 ec 08             	sub    $0x8,%esp
f0106ced:	ff 75 10             	pushl  0x10(%ebp)
f0106cf0:	ff 75 08             	pushl  0x8(%ebp)
f0106cf3:	e8 a7 00 00 00       	call   f0106d9f <unmap_frame>
f0106cf8:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cfe:	8b 40 08             	mov    0x8(%eax),%eax
f0106d01:	40                   	inc    %eax
f0106d02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d05:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0c:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d0f:	c1 ea 0c             	shr    $0xc,%edx
f0106d12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d18:	c1 e2 02             	shl    $0x2,%edx
f0106d1b:	01 c2                	add    %eax,%edx
f0106d1d:	8b 45 14             	mov    0x14(%ebp),%eax
f0106d20:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106d23:	83 c8 01             	or     $0x1,%eax
f0106d26:	89 02                	mov    %eax,(%edx)

	return 0;
f0106d28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d2d:	c9                   	leave  
f0106d2e:	c3                   	ret    

f0106d2f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106d2f:	55                   	push   %ebp
f0106d30:	89 e5                	mov    %esp,%ebp
f0106d32:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106d35:	83 ec 04             	sub    $0x4,%esp
f0106d38:	ff 75 10             	pushl  0x10(%ebp)
f0106d3b:	ff 75 0c             	pushl  0xc(%ebp)
f0106d3e:	ff 75 08             	pushl  0x8(%ebp)
f0106d41:	e8 94 fc ff ff       	call   f01069da <get_page_table>
f0106d46:	83 c4 10             	add    $0x10,%esp
f0106d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106d4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d4f:	8b 00                	mov    (%eax),%eax
f0106d51:	85 c0                	test   %eax,%eax
f0106d53:	74 43                	je     f0106d98 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d58:	c1 e8 0c             	shr    $0xc,%eax
f0106d5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106d63:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d6b:	c1 e2 02             	shl    $0x2,%edx
f0106d6e:	01 d0                	add    %edx,%eax
f0106d70:	8b 00                	mov    (%eax),%eax
f0106d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106d75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106d79:	74 16                	je     f0106d91 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d83:	83 ec 0c             	sub    $0xc,%esp
f0106d86:	50                   	push   %eax
f0106d87:	e8 65 f6 ff ff       	call   f01063f1 <to_frame_info>
f0106d8c:	83 c4 10             	add    $0x10,%esp
f0106d8f:	eb 0c                	jmp    f0106d9d <get_frame_info+0x6e>
		}
		return 0;
f0106d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d96:	eb 05                	jmp    f0106d9d <get_frame_info+0x6e>
	}
	return 0;
f0106d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d9d:	c9                   	leave  
f0106d9e:	c3                   	ret    

f0106d9f <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106d9f:	55                   	push   %ebp
f0106da0:	89 e5                	mov    %esp,%ebp
f0106da2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106da5:	83 ec 04             	sub    $0x4,%esp
f0106da8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106dab:	50                   	push   %eax
f0106dac:	ff 75 0c             	pushl  0xc(%ebp)
f0106daf:	ff 75 08             	pushl  0x8(%ebp)
f0106db2:	e8 78 ff ff ff       	call   f0106d2f <get_frame_info>
f0106db7:	83 c4 10             	add    $0x10,%esp
f0106dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106dc1:	74 60                	je     f0106e23 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc6:	8a 40 14             	mov    0x14(%eax),%al
f0106dc9:	84 c0                	test   %al,%al
f0106dcb:	74 1c                	je     f0106de9 <unmap_frame+0x4a>
f0106dcd:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106dd4:	77 13                	ja     f0106de9 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106dd6:	83 ec 08             	sub    $0x8,%esp
f0106dd9:	ff 75 0c             	pushl  0xc(%ebp)
f0106ddc:	68 0c 5c 13 f0       	push   $0xf0135c0c
f0106de1:	e8 9c 9e ff ff       	call   f0100c82 <cprintf>
f0106de6:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106de9:	83 ec 0c             	sub    $0xc,%esp
f0106dec:	ff 75 f4             	pushl  -0xc(%ebp)
f0106def:	e8 b6 fb ff ff       	call   f01069aa <decrement_references>
f0106df4:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dfd:	c1 ea 0c             	shr    $0xc,%edx
f0106e00:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e06:	c1 e2 02             	shl    $0x2,%edx
f0106e09:	01 d0                	add    %edx,%eax
f0106e0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106e11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e14:	83 ec 08             	sub    $0x8,%esp
f0106e17:	50                   	push   %eax
f0106e18:	ff 75 08             	pushl  0x8(%ebp)
f0106e1b:	e8 17 f6 ff ff       	call   f0106437 <tlb_invalidate>
f0106e20:	83 c4 10             	add    $0x10,%esp
	}
}
f0106e23:	90                   	nop
f0106e24:	c9                   	leave  
f0106e25:	c3                   	ret    

f0106e26 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106e26:	55                   	push   %ebp
f0106e27:	89 e5                	mov    %esp,%ebp
f0106e29:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106e2c:	ff 75 0c             	pushl  0xc(%ebp)
f0106e2f:	e8 aa f5 ff ff       	call   f01063de <to_physical_address>
f0106e34:	83 c4 04             	add    $0x4,%esp
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	c1 e8 16             	shr    $0x16,%eax
f0106e40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e4a:	01 d0                	add    %edx,%eax
f0106e4c:	8b 00                	mov    (%eax),%eax
f0106e4e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106e51:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106e58:	77 19                	ja     f0106e73 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e62:	83 ec 0c             	sub    $0xc,%esp
f0106e65:	50                   	push   %eax
f0106e66:	e8 9a 0b 00 00       	call   f0107a05 <kheap_virtual_address>
f0106e6b:	83 c4 10             	add    $0x10,%esp
f0106e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e71:	eb 40                	jmp    f0106eb3 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e81:	c1 e8 0c             	shr    $0xc,%eax
f0106e84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106e87:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106e8c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106e8f:	72 17                	jb     f0106ea8 <loadtime_map_frame+0x82>
f0106e91:	ff 75 e8             	pushl  -0x18(%ebp)
f0106e94:	68 c0 5b 13 f0       	push   $0xf0135bc0
f0106e99:	68 e6 01 00 00       	push   $0x1e6
f0106e9e:	68 03 5b 13 f0       	push   $0xf0135b03
f0106ea3:	e8 53 93 ff ff       	call   f01001fb <_panic>
f0106ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106eab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106eb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106eb7:	75 14                	jne    f0106ecd <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106eb9:	83 ec 08             	sub    $0x8,%esp
f0106ebc:	ff 75 10             	pushl  0x10(%ebp)
f0106ebf:	ff 75 08             	pushl  0x8(%ebp)
f0106ec2:	e8 69 fc ff ff       	call   f0106b30 <create_page_table>
f0106ec7:	83 c4 10             	add    $0x10,%esp
f0106eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ed0:	8b 40 08             	mov    0x8(%eax),%eax
f0106ed3:	40                   	inc    %eax
f0106ed4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106edb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ede:	c1 e8 0c             	shr    $0xc,%eax
f0106ee1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106ee6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef0:	01 c2                	add    %eax,%edx
f0106ef2:	8b 45 14             	mov    0x14(%ebp),%eax
f0106ef5:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106ef8:	83 c8 01             	or     $0x1,%eax
f0106efb:	89 02                	mov    %eax,(%edx)

	return 0;
f0106efd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106f02:	c9                   	leave  
f0106f03:	c3                   	ret    

f0106f04 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106f04:	55                   	push   %ebp
f0106f05:	89 e5                	mov    %esp,%ebp
f0106f07:	57                   	push   %edi
f0106f08:	56                   	push   %esi
f0106f09:	53                   	push   %ebx
f0106f0a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106f0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106f14:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106f1b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106f22:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f0106f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f2a:	eb 1a                	jmp    f0106f46 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f2f:	8a 40 14             	mov    0x14(%eax),%al
f0106f32:	84 c0                	test   %al,%al
f0106f34:	74 05                	je     f0106f3b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106f36:	ff 45 e8             	incl   -0x18(%ebp)
f0106f39:	eb 03                	jmp    f0106f3e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106f3b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106f3e:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f4a:	74 07                	je     f0106f53 <calculate_available_frames+0x4f>
f0106f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f4f:	8b 00                	mov    (%eax),%eax
f0106f51:	eb 05                	jmp    f0106f58 <calculate_available_frames+0x54>
f0106f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f58:	a3 20 7b 65 f0       	mov    %eax,0xf0657b20
f0106f5d:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f62:	85 c0                	test   %eax,%eax
f0106f64:	75 c6                	jne    f0106f2c <calculate_available_frames+0x28>
f0106f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f6a:	75 c0                	jne    f0106f2c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f6c:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f0106f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f74:	eb 0b                	jmp    f0106f81 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106f76:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f79:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f85:	74 07                	je     f0106f8e <calculate_available_frames+0x8a>
f0106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8a:	8b 00                	mov    (%eax),%eax
f0106f8c:	eb 05                	jmp    f0106f93 <calculate_available_frames+0x8f>
f0106f8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f93:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f0106f98:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f9d:	85 c0                	test   %eax,%eax
f0106f9f:	75 d5                	jne    f0106f76 <calculate_available_frames+0x72>
f0106fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fa5:	75 cf                	jne    f0106f76 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106faa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106fb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbc:	89 c3                	mov    %eax,%ebx
f0106fbe:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106fc1:	ba 03 00 00 00       	mov    $0x3,%edx
f0106fc6:	89 df                	mov    %ebx,%edi
f0106fc8:	89 c6                	mov    %eax,%esi
f0106fca:	89 d1                	mov    %edx,%ecx
f0106fcc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd1:	83 c4 20             	add    $0x20,%esp
f0106fd4:	5b                   	pop    %ebx
f0106fd5:	5e                   	pop    %esi
f0106fd6:	5f                   	pop    %edi
f0106fd7:	5d                   	pop    %ebp
f0106fd8:	c2 04 00             	ret    $0x4

f0106fdb <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe1:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106fe7:	29 d0                	sub    %edx,%eax
f0106fe9:	c1 f8 03             	sar    $0x3,%eax
f0106fec:	89 c2                	mov    %eax,%edx
f0106fee:	89 d0                	mov    %edx,%eax
f0106ff0:	c1 e0 02             	shl    $0x2,%eax
f0106ff3:	01 d0                	add    %edx,%eax
f0106ff5:	c1 e0 02             	shl    $0x2,%eax
f0106ff8:	01 d0                	add    %edx,%eax
f0106ffa:	c1 e0 02             	shl    $0x2,%eax
f0106ffd:	01 d0                	add    %edx,%eax
f0106fff:	89 c1                	mov    %eax,%ecx
f0107001:	c1 e1 08             	shl    $0x8,%ecx
f0107004:	01 c8                	add    %ecx,%eax
f0107006:	89 c1                	mov    %eax,%ecx
f0107008:	c1 e1 10             	shl    $0x10,%ecx
f010700b:	01 c8                	add    %ecx,%eax
f010700d:	01 c0                	add    %eax,%eax
f010700f:	01 d0                	add    %edx,%eax
}
f0107011:	5d                   	pop    %ebp
f0107012:	c3                   	ret    

f0107013 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107013:	55                   	push   %ebp
f0107014:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107016:	ff 75 08             	pushl  0x8(%ebp)
f0107019:	e8 bd ff ff ff       	call   f0106fdb <to_frame_number>
f010701e:	83 c4 04             	add    $0x4,%esp
f0107021:	c1 e0 0c             	shl    $0xc,%eax
}
f0107024:	c9                   	leave  
f0107025:	c3                   	ret    

f0107026 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107026:	55                   	push   %ebp
f0107027:	89 e5                	mov    %esp,%ebp
f0107029:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010702c:	8b 45 08             	mov    0x8(%ebp),%eax
f010702f:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107034:	8b 55 08             	mov    0x8(%ebp),%edx
f0107037:	89 d0                	mov    %edx,%eax
f0107039:	c1 e0 02             	shl    $0x2,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	c1 e0 02             	shl    $0x2,%eax
f0107041:	01 d0                	add    %edx,%eax
f0107043:	c1 e0 02             	shl    $0x2,%eax
f0107046:	83 ec 0c             	sub    $0xc,%esp
f0107049:	50                   	push   %eax
f010704a:	e8 c4 07 00 00       	call   f0107813 <kmalloc>
f010704f:	83 c4 10             	add    $0x10,%esp
f0107052:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
	if (shares == NULL)
f0107057:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010705c:	85 c0                	test   %eax,%eax
f010705e:	75 14                	jne    f0107074 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107060:	83 ec 04             	sub    $0x4,%esp
f0107063:	68 30 5c 13 f0       	push   $0xf0135c30
f0107068:	6a 21                	push   $0x21
f010706a:	68 74 5c 13 f0       	push   $0xf0135c74
f010706f:	e8 87 91 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010707b:	eb 4b                	jmp    f01070c8 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010707d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107086:	89 d0                	mov    %edx,%eax
f0107088:	c1 e0 02             	shl    $0x2,%eax
f010708b:	01 d0                	add    %edx,%eax
f010708d:	c1 e0 02             	shl    $0x2,%eax
f0107090:	01 d0                	add    %edx,%eax
f0107092:	c1 e0 02             	shl    $0x2,%eax
f0107095:	01 c8                	add    %ecx,%eax
f0107097:	83 ec 04             	sub    $0x4,%esp
f010709a:	6a 54                	push   $0x54
f010709c:	6a 00                	push   $0x0
f010709e:	50                   	push   %eax
f010709f:	e8 ca 9e 02 00       	call   f0130f6e <memset>
f01070a4:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01070a7:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070b0:	89 d0                	mov    %edx,%eax
f01070b2:	c1 e0 02             	shl    $0x2,%eax
f01070b5:	01 d0                	add    %edx,%eax
f01070b7:	c1 e0 02             	shl    $0x2,%eax
f01070ba:	01 d0                	add    %edx,%eax
f01070bc:	c1 e0 02             	shl    $0x2,%eax
f01070bf:	01 c8                	add    %ecx,%eax
f01070c1:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070c5:	ff 45 f4             	incl   -0xc(%ebp)
f01070c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070cb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01070d0:	39 c2                	cmp    %eax,%edx
f01070d2:	72 a9                	jb     f010707d <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01070d4:	90                   	nop
f01070d5:	c9                   	leave  
f01070d6:	c3                   	ret    

f01070d7 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01070d7:	55                   	push   %ebp
f01070d8:	89 e5                	mov    %esp,%ebp
f01070da:	53                   	push   %ebx
f01070db:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01070de:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01070e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01070ec:	eb 2c                	jmp    f010711a <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01070ee:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01070f7:	89 d0                	mov    %edx,%eax
f01070f9:	c1 e0 02             	shl    $0x2,%eax
f01070fc:	01 d0                	add    %edx,%eax
f01070fe:	c1 e0 02             	shl    $0x2,%eax
f0107101:	01 d0                	add    %edx,%eax
f0107103:	c1 e0 02             	shl    $0x2,%eax
f0107106:	01 c8                	add    %ecx,%eax
f0107108:	8a 40 4d             	mov    0x4d(%eax),%al
f010710b:	84 c0                	test   %al,%al
f010710d:	74 08                	je     f0107117 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f010710f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107115:	eb 0f                	jmp    f0107126 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107117:	ff 45 f0             	incl   -0x10(%ebp)
f010711a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010711d:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107122:	39 c2                	cmp    %eax,%edx
f0107124:	72 c8                	jb     f01070ee <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107126:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010712a:	75 50                	jne    f010717c <allocate_share_object+0xa5>
	{
		//try to increase double the size of the "shares" array
#if USE_KHEAP
		{
			shares = krealloc(shares, 2*MAX_SHARES);
f010712c:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107131:	01 c0                	add    %eax,%eax
f0107133:	89 c2                	mov    %eax,%edx
f0107135:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010713a:	83 ec 08             	sub    $0x8,%esp
f010713d:	52                   	push   %edx
f010713e:	50                   	push   %eax
f010713f:	e8 8f 09 00 00       	call   f0107ad3 <krealloc>
f0107144:	83 c4 10             	add    $0x10,%esp
f0107147:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
			if (shares == NULL)
f010714c:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f0107151:	85 c0                	test   %eax,%eax
f0107153:	75 13                	jne    f0107168 <allocate_share_object+0x91>
			{
				*allocatedObject = NULL;
f0107155:	8b 45 08             	mov    0x8(%ebp),%eax
f0107158:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SHARE;
f010715e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107163:	e9 e8 00 00 00       	jmp    f0107250 <allocate_share_object+0x179>
			}
			else
			{
				sharedObjectID = MAX_SHARES;
f0107168:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f010716d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SHARES *= 2;
f0107170:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107175:	01 c0                	add    %eax,%eax
f0107177:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010717c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107185:	89 d0                	mov    %edx,%eax
f0107187:	c1 e0 02             	shl    $0x2,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	c1 e0 02             	shl    $0x2,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	c1 e0 02             	shl    $0x2,%eax
f0107194:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107197:	8b 45 08             	mov    0x8(%ebp),%eax
f010719a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010719c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a5:	89 d0                	mov    %edx,%eax
f01071a7:	c1 e0 02             	shl    $0x2,%eax
f01071aa:	01 d0                	add    %edx,%eax
f01071ac:	c1 e0 02             	shl    $0x2,%eax
f01071af:	01 d0                	add    %edx,%eax
f01071b1:	c1 e0 02             	shl    $0x2,%eax
f01071b4:	01 c8                	add    %ecx,%eax
f01071b6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = kmalloc(PAGE_SIZE);
f01071ba:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071c3:	89 d0                	mov    %edx,%eax
f01071c5:	c1 e0 02             	shl    $0x2,%eax
f01071c8:	01 d0                	add    %edx,%eax
f01071ca:	c1 e0 02             	shl    $0x2,%eax
f01071cd:	01 d0                	add    %edx,%eax
f01071cf:	c1 e0 02             	shl    $0x2,%eax
f01071d2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f01071d5:	83 ec 0c             	sub    $0xc,%esp
f01071d8:	68 00 10 00 00       	push   $0x1000
f01071dd:	e8 31 06 00 00       	call   f0107813 <kmalloc>
f01071e2:	83 c4 10             	add    $0x10,%esp
f01071e5:	89 43 50             	mov    %eax,0x50(%ebx)
		if (shares[sharedObjectID].framesStorage == NULL)
f01071e8:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f1:	89 d0                	mov    %edx,%eax
f01071f3:	c1 e0 02             	shl    $0x2,%eax
f01071f6:	01 d0                	add    %edx,%eax
f01071f8:	c1 e0 02             	shl    $0x2,%eax
f01071fb:	01 d0                	add    %edx,%eax
f01071fd:	c1 e0 02             	shl    $0x2,%eax
f0107200:	01 c8                	add    %ecx,%eax
f0107202:	8b 40 50             	mov    0x50(%eax),%eax
f0107205:	85 c0                	test   %eax,%eax
f0107207:	75 14                	jne    f010721d <allocate_share_object+0x146>
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
f0107209:	83 ec 04             	sub    $0x4,%esp
f010720c:	68 98 5c 13 f0       	push   $0xf0135c98
f0107211:	6a 63                	push   $0x63
f0107213:	68 74 5c 13 f0       	push   $0xf0135c74
f0107218:	e8 de 8f ff ff       	call   f01001fb <_panic>
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010721d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107226:	89 d0                	mov    %edx,%eax
f0107228:	c1 e0 02             	shl    $0x2,%eax
f010722b:	01 d0                	add    %edx,%eax
f010722d:	c1 e0 02             	shl    $0x2,%eax
f0107230:	01 d0                	add    %edx,%eax
f0107232:	c1 e0 02             	shl    $0x2,%eax
f0107235:	01 c8                	add    %ecx,%eax
f0107237:	8b 40 50             	mov    0x50(%eax),%eax
f010723a:	83 ec 04             	sub    $0x4,%esp
f010723d:	68 00 10 00 00       	push   $0x1000
f0107242:	6a 00                	push   $0x0
f0107244:	50                   	push   %eax
f0107245:	e8 24 9d 02 00       	call   f0130f6e <memset>
f010724a:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010724d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107253:	c9                   	leave  
f0107254:	c3                   	ret    

f0107255 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107255:	55                   	push   %ebp
f0107256:	89 e5                	mov    %esp,%ebp
f0107258:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010725b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107262:	eb 7b                	jmp    f01072df <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107264:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010726a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726d:	89 d0                	mov    %edx,%eax
f010726f:	c1 e0 02             	shl    $0x2,%eax
f0107272:	01 d0                	add    %edx,%eax
f0107274:	c1 e0 02             	shl    $0x2,%eax
f0107277:	01 d0                	add    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 c8                	add    %ecx,%eax
f010727e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107281:	84 c0                	test   %al,%al
f0107283:	75 56                	jne    f01072db <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107285:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010728b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010728e:	89 d0                	mov    %edx,%eax
f0107290:	c1 e0 02             	shl    $0x2,%eax
f0107293:	01 d0                	add    %edx,%eax
f0107295:	c1 e0 02             	shl    $0x2,%eax
f0107298:	01 d0                	add    %edx,%eax
f010729a:	c1 e0 02             	shl    $0x2,%eax
f010729d:	01 c8                	add    %ecx,%eax
f010729f:	8b 00                	mov    (%eax),%eax
f01072a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072a4:	75 36                	jne    f01072dc <get_share_object_ID+0x87>
f01072a6:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01072ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072af:	89 d0                	mov    %edx,%eax
f01072b1:	c1 e0 02             	shl    $0x2,%eax
f01072b4:	01 d0                	add    %edx,%eax
f01072b6:	c1 e0 02             	shl    $0x2,%eax
f01072b9:	01 d0                	add    %edx,%eax
f01072bb:	c1 e0 02             	shl    $0x2,%eax
f01072be:	01 c8                	add    %ecx,%eax
f01072c0:	83 c0 04             	add    $0x4,%eax
f01072c3:	83 ec 08             	sub    $0x8,%esp
f01072c6:	50                   	push   %eax
f01072c7:	ff 75 0c             	pushl  0xc(%ebp)
f01072ca:	e8 bd 9b 02 00       	call   f0130e8c <strcmp>
f01072cf:	83 c4 10             	add    $0x10,%esp
f01072d2:	85 c0                	test   %eax,%eax
f01072d4:	75 06                	jne    f01072dc <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f01072d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d9:	eb 19                	jmp    f01072f4 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01072db:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01072dc:	ff 45 f4             	incl   -0xc(%ebp)
f01072df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072e2:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01072e7:	39 c2                	cmp    %eax,%edx
f01072e9:	0f 82 75 ff ff ff    	jb     f0107264 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01072ef:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01072f4:	c9                   	leave  
f01072f5:	c3                   	ret    

f01072f6 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01072f6:	55                   	push   %ebp
f01072f7:	89 e5                	mov    %esp,%ebp
f01072f9:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01072fc:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107301:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107304:	72 0a                	jb     f0107310 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107306:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010730b:	e9 9f 00 00 00       	jmp    f01073af <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107310:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107316:	8b 55 08             	mov    0x8(%ebp),%edx
f0107319:	89 d0                	mov    %edx,%eax
f010731b:	c1 e0 02             	shl    $0x2,%eax
f010731e:	01 d0                	add    %edx,%eax
f0107320:	c1 e0 02             	shl    $0x2,%eax
f0107323:	01 d0                	add    %edx,%eax
f0107325:	c1 e0 02             	shl    $0x2,%eax
f0107328:	01 c8                	add    %ecx,%eax
f010732a:	8b 40 50             	mov    0x50(%eax),%eax
f010732d:	83 ec 0c             	sub    $0xc,%esp
f0107330:	50                   	push   %eax
f0107331:	e8 52 01 00 00       	call   f0107488 <clear_frames_storage>
f0107336:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107339:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010733f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107342:	89 d0                	mov    %edx,%eax
f0107344:	c1 e0 02             	shl    $0x2,%eax
f0107347:	01 d0                	add    %edx,%eax
f0107349:	c1 e0 02             	shl    $0x2,%eax
f010734c:	01 d0                	add    %edx,%eax
f010734e:	c1 e0 02             	shl    $0x2,%eax
f0107351:	01 c8                	add    %ecx,%eax
f0107353:	8b 40 50             	mov    0x50(%eax),%eax
f0107356:	83 ec 0c             	sub    $0xc,%esp
f0107359:	50                   	push   %eax
f010735a:	e8 7f 05 00 00       	call   f01078de <kfree>
f010735f:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107362:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107368:	8b 55 08             	mov    0x8(%ebp),%edx
f010736b:	89 d0                	mov    %edx,%eax
f010736d:	c1 e0 02             	shl    $0x2,%eax
f0107370:	01 d0                	add    %edx,%eax
f0107372:	c1 e0 02             	shl    $0x2,%eax
f0107375:	01 d0                	add    %edx,%eax
f0107377:	c1 e0 02             	shl    $0x2,%eax
f010737a:	01 c8                	add    %ecx,%eax
f010737c:	83 ec 04             	sub    $0x4,%esp
f010737f:	6a 54                	push   $0x54
f0107381:	6a 00                	push   $0x0
f0107383:	50                   	push   %eax
f0107384:	e8 e5 9b 02 00       	call   f0130f6e <memset>
f0107389:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010738c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107392:	8b 55 08             	mov    0x8(%ebp),%edx
f0107395:	89 d0                	mov    %edx,%eax
f0107397:	c1 e0 02             	shl    $0x2,%eax
f010739a:	01 d0                	add    %edx,%eax
f010739c:	c1 e0 02             	shl    $0x2,%eax
f010739f:	01 d0                	add    %edx,%eax
f01073a1:	c1 e0 02             	shl    $0x2,%eax
f01073a4:	01 c8                	add    %ecx,%eax
f01073a6:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073af:	c9                   	leave  
f01073b0:	c3                   	ret    

f01073b1 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073b1:	55                   	push   %ebp
f01073b2:	89 e5                	mov    %esp,%ebp
f01073b4:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073b7:	83 ec 0c             	sub    $0xc,%esp
f01073ba:	68 00 10 00 00       	push   $0x1000
f01073bf:	e8 4f 04 00 00       	call   f0107813 <kmalloc>
f01073c4:	83 c4 10             	add    $0x10,%esp
f01073c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01073ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01073ce:	75 17                	jne    f01073e7 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01073d0:	83 ec 04             	sub    $0x4,%esp
f01073d3:	68 d2 5c 13 f0       	push   $0xf0135cd2
f01073d8:	68 a9 00 00 00       	push   $0xa9
f01073dd:	68 74 5c 13 f0       	push   $0xf0135c74
f01073e2:	e8 14 8e ff ff       	call   f01001fb <_panic>
	}
	return frames_storage;
f01073e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01073ea:	c9                   	leave  
f01073eb:	c3                   	ret    

f01073ec <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01073ec:	55                   	push   %ebp
f01073ed:	89 e5                	mov    %esp,%ebp
f01073ef:	53                   	push   %ebx
f01073f0:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01073f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01073f6:	c1 e0 0c             	shl    $0xc,%eax
f01073f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107402:	50                   	push   %eax
f0107403:	ff 75 f4             	pushl  -0xc(%ebp)
f0107406:	ff 75 08             	pushl  0x8(%ebp)
f0107409:	e8 cc f5 ff ff       	call   f01069da <get_page_table>
f010740e:	83 c4 10             	add    $0x10,%esp
f0107411:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107414:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107418:	75 14                	jne    f010742e <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010741a:	83 ec 08             	sub    $0x8,%esp
f010741d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107420:	ff 75 08             	pushl  0x8(%ebp)
f0107423:	e8 08 f7 ff ff       	call   f0106b30 <create_page_table>
f0107428:	83 c4 10             	add    $0x10,%esp
f010742b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010742e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107431:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107434:	c1 ea 0c             	shr    $0xc,%edx
f0107437:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010743d:	c1 e2 02             	shl    $0x2,%edx
f0107440:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 0c             	pushl  0xc(%ebp)
f0107449:	e8 c5 fb ff ff       	call   f0107013 <to_physical_address>
f010744e:	83 c4 10             	add    $0x10,%esp
f0107451:	83 c8 01             	or     $0x1,%eax
f0107454:	89 03                	mov    %eax,(%ebx)
}
f0107456:	90                   	nop
f0107457:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010745a:	c9                   	leave  
f010745b:	c3                   	ret    

f010745c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010745c:	55                   	push   %ebp
f010745d:	89 e5                	mov    %esp,%ebp
f010745f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107462:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107465:	c1 e0 0c             	shl    $0xc,%eax
f0107468:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010746b:	83 ec 04             	sub    $0x4,%esp
f010746e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107471:	50                   	push   %eax
f0107472:	ff 75 f4             	pushl  -0xc(%ebp)
f0107475:	ff 75 08             	pushl  0x8(%ebp)
f0107478:	e8 b2 f8 ff ff       	call   f0106d2f <get_frame_info>
f010747d:	83 c4 10             	add    $0x10,%esp
f0107480:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107483:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107486:	c9                   	leave  
f0107487:	c3                   	ret    

f0107488 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107488:	55                   	push   %ebp
f0107489:	89 e5                	mov    %esp,%ebp
f010748b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010748e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107495:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010749c:	eb 5b                	jmp    f01074f9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010749e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ab:	01 d0                	add    %edx,%eax
f01074ad:	8b 00                	mov    (%eax),%eax
f01074af:	85 c0                	test   %eax,%eax
f01074b1:	74 43                	je     f01074f6 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	01 d0                	add    %edx,%eax
f01074c2:	8b 00                	mov    (%eax),%eax
f01074c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074c9:	83 ec 0c             	sub    $0xc,%esp
f01074cc:	50                   	push   %eax
f01074cd:	e8 33 05 00 00       	call   f0107a05 <kheap_virtual_address>
f01074d2:	83 c4 10             	add    $0x10,%esp
f01074d5:	83 ec 0c             	sub    $0xc,%esp
f01074d8:	50                   	push   %eax
f01074d9:	e8 00 04 00 00       	call   f01078de <kfree>
f01074de:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f01074e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ee:	01 d0                	add    %edx,%eax
f01074f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074f6:	ff 45 f4             	incl   -0xc(%ebp)
f01074f9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107500:	7e 9c                	jle    f010749e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107502:	90                   	nop
f0107503:	c9                   	leave  
f0107504:	c3                   	ret    

f0107505 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107505:	55                   	push   %ebp
f0107506:	89 e5                	mov    %esp,%ebp
f0107508:	83 ec 18             	sub    $0x18,%esp
f010750b:	8b 45 14             	mov    0x14(%ebp),%eax
f010750e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0107511:	83 ec 04             	sub    $0x4,%esp
f0107514:	68 f0 5c 13 f0       	push   $0xf0135cf0
f0107519:	68 fa 00 00 00       	push   $0xfa
f010751e:	68 74 5c 13 f0       	push   $0xf0135c74
f0107523:	e8 d3 8c ff ff       	call   f01001fb <_panic>

f0107528 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107528:	55                   	push   %ebp
f0107529:	89 e5                	mov    %esp,%ebp
f010752b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f010752e:	83 ec 04             	sub    $0x4,%esp
f0107531:	68 24 5d 13 f0       	push   $0xf0135d24
f0107536:	68 0c 01 00 00       	push   $0x10c
f010753b:	68 74 5c 13 f0       	push   $0xf0135c74
f0107540:	e8 b6 8c ff ff       	call   f01001fb <_panic>

f0107545 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107545:	55                   	push   %ebp
f0107546:	89 e5                	mov    %esp,%ebp
f0107548:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010754b:	83 ec 04             	sub    $0x4,%esp
f010754e:	68 58 5d 13 f0       	push   $0xf0135d58
f0107553:	68 1b 01 00 00       	push   $0x11b
f0107558:	68 74 5c 13 f0       	push   $0xf0135c74
f010755d:	e8 99 8c ff ff       	call   f01001fb <_panic>

f0107562 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107562:	55                   	push   %ebp
f0107563:	89 e5                	mov    %esp,%ebp
f0107565:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f0107568:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0107570:	83 ec 04             	sub    $0x4,%esp
f0107573:	68 88 5d 13 f0       	push   $0xf0135d88
f0107578:	68 33 01 00 00       	push   $0x133
f010757d:	68 74 5c 13 f0       	push   $0xf0135c74
f0107582:	e8 74 8c ff ff       	call   f01001fb <_panic>

f0107587 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107587:	55                   	push   %ebp
f0107588:	89 e5                	mov    %esp,%ebp
f010758a:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f010758f:	83 f8 01             	cmp    $0x1,%eax
f0107592:	75 04                	jne    f0107598 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107594:	b0 01                	mov    $0x1,%al
f0107596:	eb 02                	jmp    f010759a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107598:	b0 00                	mov    $0x0,%al
f010759a:	5d                   	pop    %ebp
f010759b:	c3                   	ret    

f010759c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01075a4:	83 f8 02             	cmp    $0x2,%eax
f01075a7:	75 04                	jne    f01075ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01075a9:	b0 01                	mov    $0x1,%al
f01075ab:	eb 02                	jmp    f01075af <isKHeapPlacementStrategyBESTFIT+0x13>
f01075ad:	b0 00                	mov    $0x0,%al
f01075af:	5d                   	pop    %ebp
f01075b0:	c3                   	ret    

f01075b1 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01075b1:	55                   	push   %ebp
f01075b2:	89 e5                	mov    %esp,%ebp
f01075b4:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01075b9:	83 f8 03             	cmp    $0x3,%eax
f01075bc:	75 04                	jne    f01075c2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01075be:	b0 01                	mov    $0x1,%al
f01075c0:	eb 02                	jmp    f01075c4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01075c2:	b0 00                	mov    $0x0,%al
f01075c4:	5d                   	pop    %ebp
f01075c5:	c3                   	ret    

f01075c6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01075c6:	55                   	push   %ebp
f01075c7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01075c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01075cc:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01075d2:	29 d0                	sub    %edx,%eax
f01075d4:	c1 f8 03             	sar    $0x3,%eax
f01075d7:	89 c2                	mov    %eax,%edx
f01075d9:	89 d0                	mov    %edx,%eax
f01075db:	c1 e0 02             	shl    $0x2,%eax
f01075de:	01 d0                	add    %edx,%eax
f01075e0:	c1 e0 02             	shl    $0x2,%eax
f01075e3:	01 d0                	add    %edx,%eax
f01075e5:	c1 e0 02             	shl    $0x2,%eax
f01075e8:	01 d0                	add    %edx,%eax
f01075ea:	89 c1                	mov    %eax,%ecx
f01075ec:	c1 e1 08             	shl    $0x8,%ecx
f01075ef:	01 c8                	add    %ecx,%eax
f01075f1:	89 c1                	mov    %eax,%ecx
f01075f3:	c1 e1 10             	shl    $0x10,%ecx
f01075f6:	01 c8                	add    %ecx,%eax
f01075f8:	01 c0                	add    %eax,%eax
f01075fa:	01 d0                	add    %edx,%eax
}
f01075fc:	5d                   	pop    %ebp
f01075fd:	c3                   	ret    

f01075fe <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01075fe:	55                   	push   %ebp
f01075ff:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107601:	ff 75 08             	pushl  0x8(%ebp)
f0107604:	e8 bd ff ff ff       	call   f01075c6 <to_frame_number>
f0107609:	83 c4 04             	add    $0x4,%esp
f010760c:	c1 e0 0c             	shl    $0xc,%eax
}
f010760f:	c9                   	leave  
f0107610:	c3                   	ret    

f0107611 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107611:	55                   	push   %ebp
f0107612:	89 e5                	mov    %esp,%ebp
f0107614:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107617:	8b 45 08             	mov    0x8(%ebp),%eax
f010761a:	c1 e8 0c             	shr    $0xc,%eax
f010761d:	89 c2                	mov    %eax,%edx
f010761f:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0107624:	39 c2                	cmp    %eax,%edx
f0107626:	72 14                	jb     f010763c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107628:	83 ec 04             	sub    $0x4,%esp
f010762b:	68 b8 5d 13 f0       	push   $0xf0135db8
f0107630:	6a 55                	push   $0x55
f0107632:	68 dd 5d 13 f0       	push   $0xf0135ddd
f0107637:	e8 bf 8b ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f010763c:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0107642:	8b 45 08             	mov    0x8(%ebp),%eax
f0107645:	c1 e8 0c             	shr    $0xc,%eax
f0107648:	89 c1                	mov    %eax,%ecx
f010764a:	89 c8                	mov    %ecx,%eax
f010764c:	01 c0                	add    %eax,%eax
f010764e:	01 c8                	add    %ecx,%eax
f0107650:	c1 e0 03             	shl    $0x3,%eax
f0107653:	01 d0                	add    %edx,%eax
}
f0107655:	c9                   	leave  
f0107656:	c3                   	ret    

f0107657 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107657:	55                   	push   %ebp
f0107658:	89 e5                	mov    %esp,%ebp
f010765a:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f010765d:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f0107664:	00 00 00 
f0107667:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010766e:	00 00 00 
f0107671:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f0107678:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010767b:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f0107682:	00 00 00 
f0107685:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010768c:	00 00 00 
f010768f:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f0107696:	00 00 00 
	uint32 arr_size = 0;
f0107699:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f01076a0:	c7 05 04 7b 65 f0 ff 	movl   $0x9fff,0xf0657b04
f01076a7:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f01076aa:	c7 05 d8 7a 65 f0 00 	movl   $0xf6000000,0xf0657ad8
f01076b1:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f01076b4:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01076bb:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076c0:	c1 e0 04             	shl    $0x4,%eax
f01076c3:	89 c2                	mov    %eax,%edx
f01076c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076c8:	01 d0                	add    %edx,%eax
f01076ca:	48                   	dec    %eax
f01076cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01076ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01076d6:	f7 75 f0             	divl   -0x10(%ebp)
f01076d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076dc:	29 d0                	sub    %edx,%eax
f01076de:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f01076e1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01076e6:	6a 03                	push   $0x3
f01076e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01076eb:	68 00 00 00 f6       	push   $0xf6000000
f01076f0:	50                   	push   %eax
f01076f1:	e8 bd 13 00 00       	call   f0108ab3 <allocate_chunk>
f01076f6:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01076f9:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076fe:	83 ec 0c             	sub    $0xc,%esp
f0107701:	50                   	push   %eax
f0107702:	e8 e3 a1 02 00       	call   f01318ea <initialize_MemBlocksList>
f0107707:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f010770a:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f010770f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107712:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107715:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010771b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010771e:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107721:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107726:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107729:	89 c2                	mov    %eax,%edx
f010772b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010772e:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107731:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107735:	75 14                	jne    f010774b <initialize_dyn_block_system+0xf4>
f0107737:	83 ec 04             	sub    $0x4,%esp
f010773a:	68 f7 5d 13 f0       	push   $0xf0135df7
f010773f:	6a 30                	push   $0x30
f0107741:	68 15 5e 13 f0       	push   $0xf0135e15
f0107746:	e8 b0 8a ff ff       	call   f01001fb <_panic>
f010774b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010774e:	8b 00                	mov    (%eax),%eax
f0107750:	85 c0                	test   %eax,%eax
f0107752:	74 10                	je     f0107764 <initialize_dyn_block_system+0x10d>
f0107754:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107757:	8b 00                	mov    (%eax),%eax
f0107759:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010775c:	8b 52 04             	mov    0x4(%edx),%edx
f010775f:	89 50 04             	mov    %edx,0x4(%eax)
f0107762:	eb 0b                	jmp    f010776f <initialize_dyn_block_system+0x118>
f0107764:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107767:	8b 40 04             	mov    0x4(%eax),%eax
f010776a:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f010776f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107772:	8b 40 04             	mov    0x4(%eax),%eax
f0107775:	85 c0                	test   %eax,%eax
f0107777:	74 0f                	je     f0107788 <initialize_dyn_block_system+0x131>
f0107779:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010777c:	8b 40 04             	mov    0x4(%eax),%eax
f010777f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107782:	8b 12                	mov    (%edx),%edx
f0107784:	89 10                	mov    %edx,(%eax)
f0107786:	eb 0a                	jmp    f0107792 <initialize_dyn_block_system+0x13b>
f0107788:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010778b:	8b 00                	mov    (%eax),%eax
f010778d:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0107792:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107795:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010779b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010779e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01077a5:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01077aa:	48                   	dec    %eax
f01077ab:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f01077b0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01077b4:	75 14                	jne    f01077ca <initialize_dyn_block_system+0x173>
f01077b6:	83 ec 04             	sub    $0x4,%esp
f01077b9:	68 28 5e 13 f0       	push   $0xf0135e28
f01077be:	6a 32                	push   $0x32
f01077c0:	68 15 5e 13 f0       	push   $0xf0135e15
f01077c5:	e8 31 8a ff ff       	call   f01001fb <_panic>
f01077ca:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01077d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d3:	89 10                	mov    %edx,(%eax)
f01077d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d8:	8b 00                	mov    (%eax),%eax
f01077da:	85 c0                	test   %eax,%eax
f01077dc:	74 0d                	je     f01077eb <initialize_dyn_block_system+0x194>
f01077de:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01077e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077e6:	89 50 04             	mov    %edx,0x4(%eax)
f01077e9:	eb 08                	jmp    f01077f3 <initialize_dyn_block_system+0x19c>
f01077eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077ee:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01077f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077f6:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01077fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077fe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107805:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010780a:	40                   	inc    %eax
f010780b:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70

}
f0107810:	90                   	nop
f0107811:	c9                   	leave  
f0107812:	c3                   	ret    

f0107813 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107813:	55                   	push   %ebp
f0107814:	89 e5                	mov    %esp,%ebp
f0107816:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107819:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107820:	8b 55 08             	mov    0x8(%ebp),%edx
f0107823:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107826:	01 d0                	add    %edx,%eax
f0107828:	48                   	dec    %eax
f0107829:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010782c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010782f:	ba 00 00 00 00       	mov    $0x0,%edx
f0107834:	f7 75 f0             	divl   -0x10(%ebp)
f0107837:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010783a:	29 d0                	sub    %edx,%eax
f010783c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f010783f:	e8 43 fd ff ff       	call   f0107587 <isKHeapPlacementStrategyFIRSTFIT>
f0107844:	84 c0                	test   %al,%al
f0107846:	74 13                	je     f010785b <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107848:	83 ec 0c             	sub    $0xc,%esp
f010784b:	ff 75 e8             	pushl  -0x18(%ebp)
f010784e:	e8 59 a4 02 00       	call   f0131cac <alloc_block_FF>
f0107853:	83 c4 10             	add    $0x10,%esp
f0107856:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107859:	eb 36                	jmp    f0107891 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f010785b:	e8 3c fd ff ff       	call   f010759c <isKHeapPlacementStrategyBESTFIT>
f0107860:	84 c0                	test   %al,%al
f0107862:	74 13                	je     f0107877 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107864:	83 ec 0c             	sub    $0xc,%esp
f0107867:	ff 75 e8             	pushl  -0x18(%ebp)
f010786a:	e8 0a a6 02 00       	call   f0131e79 <alloc_block_BF>
f010786f:	83 c4 10             	add    $0x10,%esp
f0107872:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107875:	eb 1a                	jmp    f0107891 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107877:	e8 35 fd ff ff       	call   f01075b1 <isKHeapPlacementStrategyNEXTFIT>
f010787c:	84 c0                	test   %al,%al
f010787e:	74 11                	je     f0107891 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107880:	83 ec 0c             	sub    $0xc,%esp
f0107883:	ff 75 e8             	pushl  -0x18(%ebp)
f0107886:	e8 ff a7 02 00       	call   f013208a <alloc_block_NF>
f010788b:	83 c4 10             	add    $0x10,%esp
f010788e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107891:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107895:	74 40                	je     f01078d7 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107897:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010789a:	8b 50 08             	mov    0x8(%eax),%edx
f010789d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01078a2:	6a 03                	push   $0x3
f01078a4:	ff 75 e8             	pushl  -0x18(%ebp)
f01078a7:	52                   	push   %edx
f01078a8:	50                   	push   %eax
f01078a9:	e8 05 12 00 00       	call   f0108ab3 <allocate_chunk>
f01078ae:	83 c4 10             	add    $0x10,%esp
f01078b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f01078b4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01078b8:	75 16                	jne    f01078d0 <kmalloc+0xbd>
		{
			//LIST_INSERT_HEAD(&AllocMemBlocksList, mem_block);
			insert_sorted_allocList(mem_block);
f01078ba:	83 ec 0c             	sub    $0xc,%esp
f01078bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01078c0:	e8 5a a1 02 00       	call   f0131a1f <insert_sorted_allocList>
f01078c5:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f01078c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078cb:	8b 40 08             	mov    0x8(%eax),%eax
f01078ce:	eb 0c                	jmp    f01078dc <kmalloc+0xc9>
		}
		else
			return 	NULL;
f01078d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01078d5:	eb 05                	jmp    f01078dc <kmalloc+0xc9>
	}
	return NULL;
f01078d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01078dc:	c9                   	leave  
f01078dd:	c3                   	ret    

f01078de <kfree>:
void kfree(void* virtual_address)
{
f01078de:	55                   	push   %ebp
f01078df:	89 e5                	mov    %esp,%ebp
f01078e1:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f01078e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01078e7:	83 ec 08             	sub    $0x8,%esp
f01078ea:	50                   	push   %eax
f01078eb:	68 c8 7a 65 f0       	push   $0xf0657ac8
f01078f0:	e8 d2 a0 02 00       	call   f01319c7 <find_block>
f01078f5:	83 c4 10             	add    $0x10,%esp
f01078f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f01078fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078ff:	0f 84 fd 00 00 00    	je     f0107a02 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107905:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107909:	75 14                	jne    f010791f <kfree+0x41>
f010790b:	83 ec 04             	sub    $0x4,%esp
f010790e:	68 f7 5d 13 f0       	push   $0xf0135df7
f0107913:	6a 5b                	push   $0x5b
f0107915:	68 15 5e 13 f0       	push   $0xf0135e15
f010791a:	e8 dc 88 ff ff       	call   f01001fb <_panic>
f010791f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107922:	8b 00                	mov    (%eax),%eax
f0107924:	85 c0                	test   %eax,%eax
f0107926:	74 10                	je     f0107938 <kfree+0x5a>
f0107928:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010792b:	8b 00                	mov    (%eax),%eax
f010792d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107930:	8b 52 04             	mov    0x4(%edx),%edx
f0107933:	89 50 04             	mov    %edx,0x4(%eax)
f0107936:	eb 0b                	jmp    f0107943 <kfree+0x65>
f0107938:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010793b:	8b 40 04             	mov    0x4(%eax),%eax
f010793e:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0107943:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107946:	8b 40 04             	mov    0x4(%eax),%eax
f0107949:	85 c0                	test   %eax,%eax
f010794b:	74 0f                	je     f010795c <kfree+0x7e>
f010794d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107950:	8b 40 04             	mov    0x4(%eax),%eax
f0107953:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107956:	8b 12                	mov    (%edx),%edx
f0107958:	89 10                	mov    %edx,(%eax)
f010795a:	eb 0a                	jmp    f0107966 <kfree+0x88>
f010795c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795f:	8b 00                	mov    (%eax),%eax
f0107961:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0107966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107969:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010796f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107972:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107979:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010797e:	48                   	dec    %eax
f010797f:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107984:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107987:	8b 40 08             	mov    0x8(%eax),%eax
f010798a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010798d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107990:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107995:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107998:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010799f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079a2:	8b 50 08             	mov    0x8(%eax),%edx
f01079a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079a8:	8b 40 0c             	mov    0xc(%eax),%eax
f01079ab:	01 c2                	add    %eax,%edx
f01079ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079b0:	01 d0                	add    %edx,%eax
f01079b2:	48                   	dec    %eax
f01079b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01079b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01079be:	f7 75 e4             	divl   -0x1c(%ebp)
f01079c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079c4:	29 d0                	sub    %edx,%eax
f01079c6:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01079cf:	eb 1b                	jmp    f01079ec <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f01079d1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01079d6:	83 ec 08             	sub    $0x8,%esp
f01079d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01079dc:	50                   	push   %eax
f01079dd:	e8 bd f3 ff ff       	call   f0106d9f <unmap_frame>
f01079e2:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079e5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01079ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079ef:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01079f2:	72 dd                	jb     f01079d1 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f01079f4:	83 ec 0c             	sub    $0xc,%esp
f01079f7:	ff 75 f0             	pushl  -0x10(%ebp)
f01079fa:	e8 58 ac 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f01079ff:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a02:	90                   	nop
f0107a03:	c9                   	leave  
f0107a04:	c3                   	ret    

f0107a05 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107a05:	55                   	push   %ebp
f0107a06:	89 e5                	mov    %esp,%ebp
f0107a08:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107a0b:	83 ec 0c             	sub    $0xc,%esp
f0107a0e:	ff 75 08             	pushl  0x8(%ebp)
f0107a11:	e8 fb fb ff ff       	call   f0107611 <to_frame_info>
f0107a16:	83 c4 10             	add    $0x10,%esp
f0107a19:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107a1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a20:	74 08                	je     f0107a2a <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a25:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a28:	eb 05                	jmp    f0107a2f <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a2a:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107a2f:	c9                   	leave  
f0107a30:	c3                   	ret    

f0107a31 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107a31:	55                   	push   %ebp
f0107a32:	89 e5                	mov    %esp,%ebp
f0107a34:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107a37:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107a3e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107a43:	83 ec 04             	sub    $0x4,%esp
f0107a46:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107a49:	52                   	push   %edx
f0107a4a:	ff 75 08             	pushl  0x8(%ebp)
f0107a4d:	50                   	push   %eax
f0107a4e:	e8 dc f2 ff ff       	call   f0106d2f <get_frame_info>
f0107a53:	83 c4 10             	add    $0x10,%esp
f0107a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107a59:	83 ec 0c             	sub    $0xc,%esp
f0107a5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a5f:	e8 9a fb ff ff       	call   f01075fe <to_physical_address>
f0107a64:	83 c4 10             	add    $0x10,%esp
f0107a67:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107a6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a6e:	74 05                	je     f0107a75 <kheap_physical_address+0x44>
		return address_physical;
f0107a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a73:	eb 05                	jmp    f0107a7a <kheap_physical_address+0x49>
	return 0;
f0107a75:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107a7a:	c9                   	leave  
f0107a7b:	c3                   	ret    

f0107a7c <kfreeall>:


void kfreeall()
{
f0107a7c:	55                   	push   %ebp
f0107a7d:	89 e5                	mov    %esp,%ebp
f0107a7f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a82:	83 ec 04             	sub    $0x4,%esp
f0107a85:	68 4b 5e 13 f0       	push   $0xf0135e4b
f0107a8a:	68 8a 00 00 00       	push   $0x8a
f0107a8f:	68 15 5e 13 f0       	push   $0xf0135e15
f0107a94:	e8 62 87 ff ff       	call   f01001fb <_panic>

f0107a99 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107a99:	55                   	push   %ebp
f0107a9a:	89 e5                	mov    %esp,%ebp
f0107a9c:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a9f:	83 ec 04             	sub    $0x4,%esp
f0107aa2:	68 4b 5e 13 f0       	push   $0xf0135e4b
f0107aa7:	68 90 00 00 00       	push   $0x90
f0107aac:	68 15 5e 13 f0       	push   $0xf0135e15
f0107ab1:	e8 45 87 ff ff       	call   f01001fb <_panic>

f0107ab6 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ab6:	55                   	push   %ebp
f0107ab7:	89 e5                	mov    %esp,%ebp
f0107ab9:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107abc:	83 ec 04             	sub    $0x4,%esp
f0107abf:	68 4b 5e 13 f0       	push   $0xf0135e4b
f0107ac4:	68 95 00 00 00       	push   $0x95
f0107ac9:	68 15 5e 13 f0       	push   $0xf0135e15
f0107ace:	e8 28 87 ff ff       	call   f01001fb <_panic>

f0107ad3 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107ad3:	55                   	push   %ebp
f0107ad4:	89 e5                	mov    %esp,%ebp
f0107ad6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107ad9:	83 ec 04             	sub    $0x4,%esp
f0107adc:	68 5c 5e 13 f0       	push   $0xf0135e5c
f0107ae1:	68 ac 00 00 00       	push   $0xac
f0107ae6:	68 15 5e 13 f0       	push   $0xf0135e15
f0107aeb:	e8 0b 87 ff ff       	call   f01001fb <_panic>

f0107af0 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107af0:	55                   	push   %ebp
f0107af1:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107af6:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0107afc:	29 d0                	sub    %edx,%eax
f0107afe:	c1 f8 03             	sar    $0x3,%eax
f0107b01:	89 c2                	mov    %eax,%edx
f0107b03:	89 d0                	mov    %edx,%eax
f0107b05:	c1 e0 02             	shl    $0x2,%eax
f0107b08:	01 d0                	add    %edx,%eax
f0107b0a:	c1 e0 02             	shl    $0x2,%eax
f0107b0d:	01 d0                	add    %edx,%eax
f0107b0f:	c1 e0 02             	shl    $0x2,%eax
f0107b12:	01 d0                	add    %edx,%eax
f0107b14:	89 c1                	mov    %eax,%ecx
f0107b16:	c1 e1 08             	shl    $0x8,%ecx
f0107b19:	01 c8                	add    %ecx,%eax
f0107b1b:	89 c1                	mov    %eax,%ecx
f0107b1d:	c1 e1 10             	shl    $0x10,%ecx
f0107b20:	01 c8                	add    %ecx,%eax
f0107b22:	01 c0                	add    %eax,%eax
f0107b24:	01 d0                	add    %edx,%eax
}
f0107b26:	5d                   	pop    %ebp
f0107b27:	c3                   	ret    

f0107b28 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b28:	55                   	push   %ebp
f0107b29:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b2b:	ff 75 08             	pushl  0x8(%ebp)
f0107b2e:	e8 bd ff ff ff       	call   f0107af0 <to_frame_number>
f0107b33:	83 c4 04             	add    $0x4,%esp
f0107b36:	c1 e0 0c             	shl    $0xc,%eax
}
f0107b39:	c9                   	leave  
f0107b3a:	c3                   	ret    

f0107b3b <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107b3b:	55                   	push   %ebp
f0107b3c:	89 e5                	mov    %esp,%ebp
f0107b3e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107b41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107b48:	83 ec 04             	sub    $0x4,%esp
f0107b4b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107b4e:	50                   	push   %eax
f0107b4f:	ff 75 0c             	pushl  0xc(%ebp)
f0107b52:	ff 75 08             	pushl  0x8(%ebp)
f0107b55:	e8 80 ee ff ff       	call   f01069da <get_page_table>
f0107b5a:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b60:	85 c0                	test   %eax,%eax
f0107b62:	74 75                	je     f0107bd9 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b67:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b6a:	c1 ea 0c             	shr    $0xc,%edx
f0107b6d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b73:	c1 e2 02             	shl    $0x2,%edx
f0107b76:	01 d0                	add    %edx,%eax
f0107b78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b7e:	c1 e9 0c             	shr    $0xc,%ecx
f0107b81:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b87:	c1 e1 02             	shl    $0x2,%ecx
f0107b8a:	01 ca                	add    %ecx,%edx
f0107b8c:	8b 12                	mov    (%edx),%edx
f0107b8e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107b91:	f7 d1                	not    %ecx
f0107b93:	21 ca                	and    %ecx,%edx
f0107b95:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b9a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b9d:	c1 ea 0c             	shr    $0xc,%edx
f0107ba0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ba6:	c1 e2 02             	shl    $0x2,%edx
f0107ba9:	01 c2                	add    %eax,%edx
f0107bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bae:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107bb1:	c1 e9 0c             	shr    $0xc,%ecx
f0107bb4:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107bba:	c1 e1 02             	shl    $0x2,%ecx
f0107bbd:	01 c8                	add    %ecx,%eax
f0107bbf:	8b 00                	mov    (%eax),%eax
f0107bc1:	0b 45 10             	or     0x10(%ebp),%eax
f0107bc4:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107bc9:	83 ec 08             	sub    $0x8,%esp
f0107bcc:	50                   	push   %eax
f0107bcd:	6a 00                	push   $0x0
f0107bcf:	e8 63 e8 ff ff       	call   f0106437 <tlb_invalidate>
f0107bd4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107bd7:	eb 14                	jmp    f0107bed <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107bd9:	83 ec 04             	sub    $0x4,%esp
f0107bdc:	68 83 5e 13 f0       	push   $0xf0135e83
f0107be1:	6a 19                	push   $0x19
f0107be3:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0107be8:	e8 0e 86 ff ff       	call   f01001fb <_panic>
	}
}
f0107bed:	c9                   	leave  
f0107bee:	c3                   	ret    

f0107bef <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107bef:	55                   	push   %ebp
f0107bf0:	89 e5                	mov    %esp,%ebp
f0107bf2:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107bf5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bfc:	83 ec 04             	sub    $0x4,%esp
f0107bff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107c02:	50                   	push   %eax
f0107c03:	ff 75 0c             	pushl  0xc(%ebp)
f0107c06:	ff 75 08             	pushl  0x8(%ebp)
f0107c09:	e8 cc ed ff ff       	call   f01069da <get_page_table>
f0107c0e:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c14:	85 c0                	test   %eax,%eax
f0107c16:	74 2b                	je     f0107c43 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c1e:	c1 ea 0c             	shr    $0xc,%edx
f0107c21:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c27:	c1 e2 02             	shl    $0x2,%edx
f0107c2a:	01 d0                	add    %edx,%eax
f0107c2c:	8b 00                	mov    (%eax),%eax
f0107c2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107c31:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c41:	eb 05                	jmp    f0107c48 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107c43:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107c48:	c9                   	leave  
f0107c49:	c3                   	ret    

f0107c4a <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107c4a:	55                   	push   %ebp
f0107c4b:	89 e5                	mov    %esp,%ebp
f0107c4d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c57:	83 ec 04             	sub    $0x4,%esp
f0107c5a:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107c5d:	50                   	push   %eax
f0107c5e:	ff 75 0c             	pushl  0xc(%ebp)
f0107c61:	ff 75 08             	pushl  0x8(%ebp)
f0107c64:	e8 71 ed ff ff       	call   f01069da <get_page_table>
f0107c69:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c6f:	85 c0                	test   %eax,%eax
f0107c71:	74 2d                	je     f0107ca0 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c76:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c79:	c1 ea 0c             	shr    $0xc,%edx
f0107c7c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c82:	c1 e2 02             	shl    $0x2,%edx
f0107c85:	01 d0                	add    %edx,%eax
f0107c87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c90:	83 ec 08             	sub    $0x8,%esp
f0107c93:	50                   	push   %eax
f0107c94:	6a 00                	push   $0x0
f0107c96:	e8 9c e7 ff ff       	call   f0106437 <tlb_invalidate>
f0107c9b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c9e:	eb 14                	jmp    f0107cb4 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107ca0:	83 ec 04             	sub    $0x4,%esp
f0107ca3:	68 83 5e 13 f0       	push   $0xf0135e83
f0107ca8:	6a 42                	push   $0x42
f0107caa:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0107caf:	e8 47 85 ff ff       	call   f01001fb <_panic>
	}
}
f0107cb4:	c9                   	leave  
f0107cb5:	c3                   	ret    

f0107cb6 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107cb6:	55                   	push   %ebp
f0107cb7:	89 e5                	mov    %esp,%ebp
f0107cb9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107cbc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107cc3:	83 ec 04             	sub    $0x4,%esp
f0107cc6:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cc9:	50                   	push   %eax
f0107cca:	ff 75 0c             	pushl  0xc(%ebp)
f0107ccd:	ff 75 08             	pushl  0x8(%ebp)
f0107cd0:	e8 05 ed ff ff       	call   f01069da <get_page_table>
f0107cd5:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cdb:	85 c0                	test   %eax,%eax
f0107cdd:	74 28                	je     f0107d07 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107cdf:	83 ec 04             	sub    $0x4,%esp
f0107ce2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107ce5:	50                   	push   %eax
f0107ce6:	ff 75 0c             	pushl  0xc(%ebp)
f0107ce9:	ff 75 08             	pushl  0x8(%ebp)
f0107cec:	e8 3e f0 ff ff       	call   f0106d2f <get_frame_info>
f0107cf1:	83 c4 10             	add    $0x10,%esp
f0107cf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107cf7:	83 ec 0c             	sub    $0xc,%esp
f0107cfa:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cfd:	e8 26 fe ff ff       	call   f0107b28 <to_physical_address>
f0107d02:	83 c4 10             	add    $0x10,%esp
f0107d05:	eb 05                	jmp    f0107d0c <virtual_to_physical+0x56>
	}
	return -1;
f0107d07:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107d0c:	c9                   	leave  
f0107d0d:	c3                   	ret    

f0107d0e <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107d0e:	55                   	push   %ebp
f0107d0f:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107d11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d14:	c1 e8 16             	shr    $0x16,%eax
f0107d17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d21:	01 d0                	add    %edx,%eax
f0107d23:	8b 00                	mov    (%eax),%eax
f0107d25:	83 e0 20             	and    $0x20,%eax
f0107d28:	85 c0                	test   %eax,%eax
f0107d2a:	0f 95 c0             	setne  %al
f0107d2d:	0f b6 c0             	movzbl %al,%eax
}
f0107d30:	5d                   	pop    %ebp
f0107d31:	c3                   	ret    

f0107d32 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107d32:	55                   	push   %ebp
f0107d33:	89 e5                	mov    %esp,%ebp
f0107d35:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107d38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d3b:	c1 e8 16             	shr    $0x16,%eax
f0107d3e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d45:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d48:	01 d0                	add    %edx,%eax
f0107d4a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d4d:	c1 ea 16             	shr    $0x16,%edx
f0107d50:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107d57:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d5a:	01 ca                	add    %ecx,%edx
f0107d5c:	8b 12                	mov    (%edx),%edx
f0107d5e:	83 e2 df             	and    $0xffffffdf,%edx
f0107d61:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d66:	83 ec 08             	sub    $0x8,%esp
f0107d69:	50                   	push   %eax
f0107d6a:	6a 00                	push   $0x0
f0107d6c:	e8 c6 e6 ff ff       	call   f0106437 <tlb_invalidate>
f0107d71:	83 c4 10             	add    $0x10,%esp
}
f0107d74:	90                   	nop
f0107d75:	c9                   	leave  
f0107d76:	c3                   	ret    

f0107d77 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d77:	55                   	push   %ebp
f0107d78:	89 e5                	mov    %esp,%ebp
f0107d7a:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d80:	c1 e8 16             	shr    $0x16,%eax
f0107d83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d8d:	01 d0                	add    %edx,%eax
f0107d8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107d95:	0f 20 d8             	mov    %cr3,%eax
f0107d98:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107d9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107d9e:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107da1:	90                   	nop
f0107da2:	c9                   	leave  
f0107da3:	c3                   	ret    

f0107da4 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107daa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107db1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107db8:	eb 21                	jmp    f0107ddb <env_page_ws_get_size+0x37>
f0107dba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dbd:	8b 48 78             	mov    0x78(%eax),%ecx
f0107dc0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107dc3:	89 d0                	mov    %edx,%eax
f0107dc5:	01 c0                	add    %eax,%eax
f0107dc7:	01 d0                	add    %edx,%eax
f0107dc9:	c1 e0 03             	shl    $0x3,%eax
f0107dcc:	01 c8                	add    %ecx,%eax
f0107dce:	8a 40 04             	mov    0x4(%eax),%al
f0107dd1:	84 c0                	test   %al,%al
f0107dd3:	75 03                	jne    f0107dd8 <env_page_ws_get_size+0x34>
f0107dd5:	ff 45 f8             	incl   -0x8(%ebp)
f0107dd8:	ff 45 fc             	incl   -0x4(%ebp)
f0107ddb:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dde:	8b 50 74             	mov    0x74(%eax),%edx
f0107de1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107de4:	39 c2                	cmp    %eax,%edx
f0107de6:	77 d2                	ja     f0107dba <env_page_ws_get_size+0x16>
	return counter;
f0107de8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107deb:	c9                   	leave  
f0107dec:	c3                   	ret    

f0107ded <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107ded:	55                   	push   %ebp
f0107dee:	89 e5                	mov    %esp,%ebp
f0107df0:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107df3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107dfa:	eb 4c                	jmp    f0107e48 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dff:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e05:	89 d0                	mov    %edx,%eax
f0107e07:	01 c0                	add    %eax,%eax
f0107e09:	01 d0                	add    %edx,%eax
f0107e0b:	c1 e0 03             	shl    $0x3,%eax
f0107e0e:	01 c8                	add    %ecx,%eax
f0107e10:	8b 00                	mov    (%eax),%eax
f0107e12:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e1d:	89 c2                	mov    %eax,%edx
f0107e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e22:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e2d:	39 c2                	cmp    %eax,%edx
f0107e2f:	75 14                	jne    f0107e45 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e34:	83 ec 08             	sub    $0x8,%esp
f0107e37:	50                   	push   %eax
f0107e38:	ff 75 08             	pushl  0x8(%ebp)
f0107e3b:	e8 b9 00 00 00       	call   f0107ef9 <env_page_ws_clear_entry>
f0107e40:	83 c4 10             	add    $0x10,%esp
			break;
f0107e43:	eb 10                	jmp    f0107e55 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107e45:	ff 45 f4             	incl   -0xc(%ebp)
f0107e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e4b:	8b 50 74             	mov    0x74(%eax),%edx
f0107e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e51:	39 c2                	cmp    %eax,%edx
f0107e53:	77 a7                	ja     f0107dfc <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107e55:	90                   	nop
f0107e56:	c9                   	leave  
f0107e57:	c3                   	ret    

f0107e58 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107e58:	55                   	push   %ebp
f0107e59:	89 e5                	mov    %esp,%ebp
f0107e5b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107e5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e61:	8b 40 74             	mov    0x74(%eax),%eax
f0107e64:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107e67:	77 16                	ja     f0107e7f <env_page_ws_set_entry+0x27>
f0107e69:	68 bc 5e 13 f0       	push   $0xf0135ebc
f0107e6e:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0107e73:	6a 26                	push   $0x26
f0107e75:	68 08 5f 13 f0       	push   $0xf0135f08
f0107e7a:	e8 7c 83 ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107e7f:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107e86:	76 16                	jbe    f0107e9e <env_page_ws_set_entry+0x46>
f0107e88:	68 28 5f 13 f0       	push   $0xf0135f28
f0107e8d:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0107e92:	6a 27                	push   $0x27
f0107e94:	68 08 5f 13 f0       	push   $0xf0135f08
f0107e99:	e8 5d 83 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea1:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ea4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ea7:	89 d0                	mov    %edx,%eax
f0107ea9:	01 c0                	add    %eax,%eax
f0107eab:	01 d0                	add    %edx,%eax
f0107ead:	c1 e0 03             	shl    $0x3,%eax
f0107eb0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107eb3:	8b 45 10             	mov    0x10(%ebp),%eax
f0107eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ebc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ec1:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107ec3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec6:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ec9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ecc:	89 d0                	mov    %edx,%eax
f0107ece:	01 c0                	add    %eax,%eax
f0107ed0:	01 d0                	add    %edx,%eax
f0107ed2:	c1 e0 03             	shl    $0x3,%eax
f0107ed5:	01 c8                	add    %ecx,%eax
f0107ed7:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ede:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ee1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ee4:	89 d0                	mov    %edx,%eax
f0107ee6:	01 c0                	add    %eax,%eax
f0107ee8:	01 d0                	add    %edx,%eax
f0107eea:	c1 e0 03             	shl    $0x3,%eax
f0107eed:	01 c8                	add    %ecx,%eax
f0107eef:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107ef6:	90                   	nop
}
f0107ef7:	c9                   	leave  
f0107ef8:	c3                   	ret    

f0107ef9 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ef9:	55                   	push   %ebp
f0107efa:	89 e5                	mov    %esp,%ebp
f0107efc:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107eff:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f02:	8b 40 74             	mov    0x74(%eax),%eax
f0107f05:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f08:	77 16                	ja     f0107f20 <env_page_ws_clear_entry+0x27>
f0107f0a:	68 5c 5f 13 f0       	push   $0xf0135f5c
f0107f0f:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0107f14:	6a 32                	push   $0x32
f0107f16:	68 08 5f 13 f0       	push   $0xf0135f08
f0107f1b:	e8 db 82 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f20:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f23:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f26:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f29:	89 d0                	mov    %edx,%eax
f0107f2b:	01 c0                	add    %eax,%eax
f0107f2d:	01 d0                	add    %edx,%eax
f0107f2f:	c1 e0 03             	shl    $0x3,%eax
f0107f32:	01 c8                	add    %ecx,%eax
f0107f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f3d:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f43:	89 d0                	mov    %edx,%eax
f0107f45:	01 c0                	add    %eax,%eax
f0107f47:	01 d0                	add    %edx,%eax
f0107f49:	c1 e0 03             	shl    $0x3,%eax
f0107f4c:	01 c8                	add    %ecx,%eax
f0107f4e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107f52:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f55:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f58:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f5b:	89 d0                	mov    %edx,%eax
f0107f5d:	01 c0                	add    %eax,%eax
f0107f5f:	01 d0                	add    %edx,%eax
f0107f61:	c1 e0 03             	shl    $0x3,%eax
f0107f64:	01 c8                	add    %ecx,%eax
f0107f66:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107f6d:	90                   	nop
f0107f6e:	c9                   	leave  
f0107f6f:	c3                   	ret    

f0107f70 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107f70:	55                   	push   %ebp
f0107f71:	89 e5                	mov    %esp,%ebp
f0107f73:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f79:	8b 40 74             	mov    0x74(%eax),%eax
f0107f7c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f7f:	77 16                	ja     f0107f97 <env_page_ws_get_virtual_address+0x27>
f0107f81:	68 5c 5f 13 f0       	push   $0xf0135f5c
f0107f86:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0107f8b:	6a 3a                	push   $0x3a
f0107f8d:	68 08 5f 13 f0       	push   $0xf0135f08
f0107f92:	e8 64 82 ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107f97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f9a:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fa0:	89 d0                	mov    %edx,%eax
f0107fa2:	01 c0                	add    %eax,%eax
f0107fa4:	01 d0                	add    %edx,%eax
f0107fa6:	c1 e0 03             	shl    $0x3,%eax
f0107fa9:	01 c8                	add    %ecx,%eax
f0107fab:	8b 00                	mov    (%eax),%eax
f0107fad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107fb8:	c9                   	leave  
f0107fb9:	c3                   	ret    

f0107fba <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107fba:	55                   	push   %ebp
f0107fbb:	89 e5                	mov    %esp,%ebp
f0107fbd:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc3:	8b 40 74             	mov    0x74(%eax),%eax
f0107fc6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107fc9:	77 16                	ja     f0107fe1 <env_page_ws_get_time_stamp+0x27>
f0107fcb:	68 5c 5f 13 f0       	push   $0xf0135f5c
f0107fd0:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0107fd5:	6a 40                	push   $0x40
f0107fd7:	68 08 5f 13 f0       	push   $0xf0135f08
f0107fdc:	e8 1a 82 ff ff       	call   f01001fb <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe4:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fea:	89 d0                	mov    %edx,%eax
f0107fec:	01 c0                	add    %eax,%eax
f0107fee:	01 d0                	add    %edx,%eax
f0107ff0:	c1 e0 03             	shl    $0x3,%eax
f0107ff3:	01 c8                	add    %ecx,%eax
f0107ff5:	8b 40 08             	mov    0x8(%eax),%eax
}
f0107ff8:	c9                   	leave  
f0107ff9:	c3                   	ret    

f0107ffa <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107ffa:	55                   	push   %ebp
f0107ffb:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107ffd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108000:	8b 48 78             	mov    0x78(%eax),%ecx
f0108003:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108006:	89 d0                	mov    %edx,%eax
f0108008:	01 c0                	add    %eax,%eax
f010800a:	01 d0                	add    %edx,%eax
f010800c:	c1 e0 03             	shl    $0x3,%eax
f010800f:	01 c8                	add    %ecx,%eax
f0108011:	8a 40 04             	mov    0x4(%eax),%al
f0108014:	0f b6 c0             	movzbl %al,%eax
}
f0108017:	5d                   	pop    %ebp
f0108018:	c3                   	ret    

f0108019 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108019:	55                   	push   %ebp
f010801a:	89 e5                	mov    %esp,%ebp
f010801c:	53                   	push   %ebx
f010801d:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108020:	83 ec 0c             	sub    $0xc,%esp
f0108023:	6a 02                	push   $0x2
f0108025:	e8 cd 5b 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f010802a:	83 c4 10             	add    $0x10,%esp
f010802d:	85 c0                	test   %eax,%eax
f010802f:	0f 84 fe 00 00 00    	je     f0108133 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108035:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010803c:	83 ec 0c             	sub    $0xc,%esp
f010803f:	68 94 5f 13 f0       	push   $0xf0135f94
f0108044:	e8 39 8c ff ff       	call   f0100c82 <cprintf>
f0108049:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010804c:	8b 45 08             	mov    0x8(%ebp),%eax
f010804f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108058:	eb 2c                	jmp    f0108086 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010805a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010805d:	8b 10                	mov    (%eax),%edx
f010805f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108062:	8d 48 01             	lea    0x1(%eax),%ecx
f0108065:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108068:	83 ec 04             	sub    $0x4,%esp
f010806b:	52                   	push   %edx
f010806c:	50                   	push   %eax
f010806d:	68 ae 5f 13 f0       	push   $0xf0135fae
f0108072:	e8 0b 8c ff ff       	call   f0100c82 <cprintf>
f0108077:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010807a:	8b 45 08             	mov    0x8(%ebp),%eax
f010807d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108083:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108086:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010808a:	74 08                	je     f0108094 <env_page_ws_print+0x7b>
f010808c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010808f:	8b 40 10             	mov    0x10(%eax),%eax
f0108092:	eb 05                	jmp    f0108099 <env_page_ws_print+0x80>
f0108094:	b8 00 00 00 00       	mov    $0x0,%eax
f0108099:	8b 55 08             	mov    0x8(%ebp),%edx
f010809c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f01080a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a5:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01080ab:	85 c0                	test   %eax,%eax
f01080ad:	75 ab                	jne    f010805a <env_page_ws_print+0x41>
f01080af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080b3:	75 a5                	jne    f010805a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01080b5:	83 ec 0c             	sub    $0xc,%esp
f01080b8:	68 b6 5f 13 f0       	push   $0xf0135fb6
f01080bd:	e8 c0 8b ff ff       	call   f0100c82 <cprintf>
f01080c2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c8:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01080ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080d1:	eb 2c                	jmp    f01080ff <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080d6:	8b 10                	mov    (%eax),%edx
f01080d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080db:	8d 48 01             	lea    0x1(%eax),%ecx
f01080de:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080e1:	83 ec 04             	sub    $0x4,%esp
f01080e4:	52                   	push   %edx
f01080e5:	50                   	push   %eax
f01080e6:	68 ae 5f 13 f0       	push   $0xf0135fae
f01080eb:	e8 92 8b ff ff       	call   f0100c82 <cprintf>
f01080f0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080f6:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01080fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108103:	74 08                	je     f010810d <env_page_ws_print+0xf4>
f0108105:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108108:	8b 40 10             	mov    0x10(%eax),%eax
f010810b:	eb 05                	jmp    f0108112 <env_page_ws_print+0xf9>
f010810d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108112:	8b 55 08             	mov    0x8(%ebp),%edx
f0108115:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010811b:	8b 45 08             	mov    0x8(%ebp),%eax
f010811e:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108124:	85 c0                	test   %eax,%eax
f0108126:	75 ab                	jne    f01080d3 <env_page_ws_print+0xba>
f0108128:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010812c:	75 a5                	jne    f01080d3 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010812e:	e9 95 01 00 00       	jmp    f01082c8 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108133:	83 ec 0c             	sub    $0xc,%esp
f0108136:	68 d1 5f 13 f0       	push   $0xf0135fd1
f010813b:	e8 42 8b ff ff       	call   f0100c82 <cprintf>
f0108140:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108143:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010814a:	e9 6a 01 00 00       	jmp    f01082b9 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010814f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108152:	8b 48 78             	mov    0x78(%eax),%ecx
f0108155:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108158:	89 d0                	mov    %edx,%eax
f010815a:	01 c0                	add    %eax,%eax
f010815c:	01 d0                	add    %edx,%eax
f010815e:	c1 e0 03             	shl    $0x3,%eax
f0108161:	01 c8                	add    %ecx,%eax
f0108163:	8a 40 04             	mov    0x4(%eax),%al
f0108166:	84 c0                	test   %al,%al
f0108168:	74 43                	je     f01081ad <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010816a:	83 ec 0c             	sub    $0xc,%esp
f010816d:	68 db 5f 13 f0       	push   $0xf0135fdb
f0108172:	e8 0b 8b ff ff       	call   f0100c82 <cprintf>
f0108177:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010817a:	8b 45 08             	mov    0x8(%ebp),%eax
f010817d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108183:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108186:	75 10                	jne    f0108198 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108188:	83 ec 0c             	sub    $0xc,%esp
f010818b:	68 ea 5f 13 f0       	push   $0xf0135fea
f0108190:	e8 ed 8a ff ff       	call   f0100c82 <cprintf>
f0108195:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108198:	83 ec 0c             	sub    $0xc,%esp
f010819b:	68 f0 5f 13 f0       	push   $0xf0135ff0
f01081a0:	e8 dd 8a ff ff       	call   f0100c82 <cprintf>
f01081a5:	83 c4 10             	add    $0x10,%esp
				continue;
f01081a8:	e9 09 01 00 00       	jmp    f01082b6 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01081ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b0:	8b 48 78             	mov    0x78(%eax),%ecx
f01081b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081b6:	89 d0                	mov    %edx,%eax
f01081b8:	01 c0                	add    %eax,%eax
f01081ba:	01 d0                	add    %edx,%eax
f01081bc:	c1 e0 03             	shl    $0x3,%eax
f01081bf:	01 c8                	add    %ecx,%eax
f01081c1:	8b 00                	mov    (%eax),%eax
f01081c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01081c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01081cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081cf:	89 d0                	mov    %edx,%eax
f01081d1:	01 c0                	add    %eax,%eax
f01081d3:	01 d0                	add    %edx,%eax
f01081d5:	c1 e0 03             	shl    $0x3,%eax
f01081d8:	01 c8                	add    %ecx,%eax
f01081da:	8b 40 08             	mov    0x8(%eax),%eax
f01081dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01081e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01081e3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01081e6:	83 ec 08             	sub    $0x8,%esp
f01081e9:	ff 75 e8             	pushl  -0x18(%ebp)
f01081ec:	50                   	push   %eax
f01081ed:	e8 fd f9 ff ff       	call   f0107bef <pt_get_page_permissions>
f01081f2:	83 c4 10             	add    $0x10,%esp
f01081f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01081f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081fb:	83 e0 40             	and    $0x40,%eax
f01081fe:	85 c0                	test   %eax,%eax
f0108200:	0f 95 c0             	setne  %al
f0108203:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108206:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108209:	83 e0 20             	and    $0x20,%eax
f010820c:	85 c0                	test   %eax,%eax
f010820e:	0f 95 c0             	setne  %al
f0108211:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108214:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108217:	25 00 02 00 00       	and    $0x200,%eax
f010821c:	85 c0                	test   %eax,%eax
f010821e:	0f 95 c0             	setne  %al
f0108221:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108224:	8b 45 08             	mov    0x8(%ebp),%eax
f0108227:	8b 48 78             	mov    0x78(%eax),%ecx
f010822a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010822d:	89 d0                	mov    %edx,%eax
f010822f:	01 c0                	add    %eax,%eax
f0108231:	01 d0                	add    %edx,%eax
f0108233:	c1 e0 03             	shl    $0x3,%eax
f0108236:	01 c8                	add    %ecx,%eax
f0108238:	8b 00                	mov    (%eax),%eax
f010823a:	83 ec 04             	sub    $0x4,%esp
f010823d:	50                   	push   %eax
f010823e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108241:	68 f2 5f 13 f0       	push   $0xf0135ff2
f0108246:	e8 37 8a ff ff       	call   f0100c82 <cprintf>
f010824b:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010824e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108251:	8b 48 78             	mov    0x78(%eax),%ecx
f0108254:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108257:	89 d0                	mov    %edx,%eax
f0108259:	01 c0                	add    %eax,%eax
f010825b:	01 d0                	add    %edx,%eax
f010825d:	c1 e0 03             	shl    $0x3,%eax
f0108260:	01 c8                	add    %ecx,%eax
f0108262:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108265:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108269:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010826d:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108271:	83 ec 08             	sub    $0x8,%esp
f0108274:	53                   	push   %ebx
f0108275:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108278:	51                   	push   %ecx
f0108279:	52                   	push   %edx
f010827a:	50                   	push   %eax
f010827b:	68 04 60 13 f0       	push   $0xf0136004
f0108280:	e8 fd 89 ff ff       	call   f0100c82 <cprintf>
f0108285:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108288:	8b 45 08             	mov    0x8(%ebp),%eax
f010828b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108291:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108294:	75 10                	jne    f01082a6 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108296:	83 ec 0c             	sub    $0xc,%esp
f0108299:	68 4b 60 13 f0       	push   $0xf013604b
f010829e:	e8 df 89 ff ff       	call   f0100c82 <cprintf>
f01082a3:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01082a6:	83 ec 0c             	sub    $0xc,%esp
f01082a9:	68 f0 5f 13 f0       	push   $0xf0135ff0
f01082ae:	e8 cf 89 ff ff       	call   f0100c82 <cprintf>
f01082b3:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01082b6:	ff 45 ec             	incl   -0x14(%ebp)
f01082b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01082bc:	8b 40 74             	mov    0x74(%eax),%eax
f01082bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01082c2:	0f 87 87 fe ff ff    	ja     f010814f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01082c8:	90                   	nop
f01082c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01082cc:	c9                   	leave  
f01082cd:	c3                   	ret    

f01082ce <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01082ce:	55                   	push   %ebp
f01082cf:	89 e5                	mov    %esp,%ebp
f01082d1:	53                   	push   %ebx
f01082d2:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01082d5:	83 ec 0c             	sub    $0xc,%esp
f01082d8:	68 50 60 13 f0       	push   $0xf0136050
f01082dd:	e8 a0 89 ff ff       	call   f0100c82 <cprintf>
f01082e2:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01082e5:	83 ec 0c             	sub    $0xc,%esp
f01082e8:	68 85 60 13 f0       	push   $0xf0136085
f01082ed:	e8 90 89 ff ff       	call   f0100c82 <cprintf>
f01082f2:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01082f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01082fc:	e9 10 01 00 00       	jmp    f0108411 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108301:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108304:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108307:	89 d0                	mov    %edx,%eax
f0108309:	01 c0                	add    %eax,%eax
f010830b:	01 d0                	add    %edx,%eax
f010830d:	c1 e0 03             	shl    $0x3,%eax
f0108310:	01 c8                	add    %ecx,%eax
f0108312:	83 e8 80             	sub    $0xffffff80,%eax
f0108315:	8a 00                	mov    (%eax),%al
f0108317:	84 c0                	test   %al,%al
f0108319:	74 43                	je     f010835e <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010831b:	83 ec 0c             	sub    $0xc,%esp
f010831e:	68 db 5f 13 f0       	push   $0xf0135fdb
f0108323:	e8 5a 89 ff ff       	call   f0100c82 <cprintf>
f0108328:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108334:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108337:	75 10                	jne    f0108349 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0108339:	83 ec 0c             	sub    $0xc,%esp
f010833c:	68 ea 5f 13 f0       	push   $0xf0135fea
f0108341:	e8 3c 89 ff ff       	call   f0100c82 <cprintf>
f0108346:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108349:	83 ec 0c             	sub    $0xc,%esp
f010834c:	68 f0 5f 13 f0       	push   $0xf0135ff0
f0108351:	e8 2c 89 ff ff       	call   f0100c82 <cprintf>
f0108356:	83 c4 10             	add    $0x10,%esp
			continue;
f0108359:	e9 b0 00 00 00       	jmp    f010840e <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010835e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108361:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108364:	89 d0                	mov    %edx,%eax
f0108366:	01 c0                	add    %eax,%eax
f0108368:	01 d0                	add    %edx,%eax
f010836a:	c1 e0 03             	shl    $0x3,%eax
f010836d:	01 c8                	add    %ecx,%eax
f010836f:	83 c0 7c             	add    $0x7c,%eax
f0108372:	8b 00                	mov    (%eax),%eax
f0108374:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108377:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010837a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010837d:	89 d0                	mov    %edx,%eax
f010837f:	01 c0                	add    %eax,%eax
f0108381:	01 d0                	add    %edx,%eax
f0108383:	c1 e0 03             	shl    $0x3,%eax
f0108386:	01 c8                	add    %ecx,%eax
f0108388:	83 c0 7c             	add    $0x7c,%eax
f010838b:	8b 00                	mov    (%eax),%eax
f010838d:	83 ec 04             	sub    $0x4,%esp
f0108390:	50                   	push   %eax
f0108391:	ff 75 f4             	pushl  -0xc(%ebp)
f0108394:	68 90 60 13 f0       	push   $0xf0136090
f0108399:	e8 e4 88 ff ff       	call   f0100c82 <cprintf>
f010839e:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01083a1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083a7:	89 d0                	mov    %edx,%eax
f01083a9:	01 c0                	add    %eax,%eax
f01083ab:	01 d0                	add    %edx,%eax
f01083ad:	c1 e0 03             	shl    $0x3,%eax
f01083b0:	01 c8                	add    %ecx,%eax
f01083b2:	05 84 00 00 00       	add    $0x84,%eax
f01083b7:	8b 18                	mov    (%eax),%ebx
f01083b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01083bc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01083bf:	83 ec 08             	sub    $0x8,%esp
f01083c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01083c5:	50                   	push   %eax
f01083c6:	e8 43 f9 ff ff       	call   f0107d0e <pd_is_table_used>
f01083cb:	83 c4 10             	add    $0x10,%esp
f01083ce:	83 ec 04             	sub    $0x4,%esp
f01083d1:	53                   	push   %ebx
f01083d2:	50                   	push   %eax
f01083d3:	68 a8 60 13 f0       	push   $0xf01360a8
f01083d8:	e8 a5 88 ff ff       	call   f0100c82 <cprintf>
f01083dd:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01083e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e3:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083ec:	75 10                	jne    f01083fe <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01083ee:	83 ec 0c             	sub    $0xc,%esp
f01083f1:	68 4b 60 13 f0       	push   $0xf013604b
f01083f6:	e8 87 88 ff ff       	call   f0100c82 <cprintf>
f01083fb:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01083fe:	83 ec 0c             	sub    $0xc,%esp
f0108401:	68 f0 5f 13 f0       	push   $0xf0135ff0
f0108406:	e8 77 88 ff ff       	call   f0100c82 <cprintf>
f010840b:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010840e:	ff 45 f4             	incl   -0xc(%ebp)
f0108411:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108415:	0f 86 e6 fe ff ff    	jbe    f0108301 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010841b:	90                   	nop
f010841c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010841f:	c9                   	leave  
f0108420:	c3                   	ret    

f0108421 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108421:	55                   	push   %ebp
f0108422:	89 e5                	mov    %esp,%ebp
f0108424:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108427:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010842e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108435:	eb 20                	jmp    f0108457 <env_table_ws_get_size+0x36>
f0108437:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010843a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010843d:	89 d0                	mov    %edx,%eax
f010843f:	01 c0                	add    %eax,%eax
f0108441:	01 d0                	add    %edx,%eax
f0108443:	c1 e0 03             	shl    $0x3,%eax
f0108446:	01 c8                	add    %ecx,%eax
f0108448:	83 e8 80             	sub    $0xffffff80,%eax
f010844b:	8a 00                	mov    (%eax),%al
f010844d:	84 c0                	test   %al,%al
f010844f:	75 03                	jne    f0108454 <env_table_ws_get_size+0x33>
f0108451:	ff 45 f8             	incl   -0x8(%ebp)
f0108454:	ff 45 fc             	incl   -0x4(%ebp)
f0108457:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010845b:	7e da                	jle    f0108437 <env_table_ws_get_size+0x16>
	return counter;
f010845d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108460:	c9                   	leave  
f0108461:	c3                   	ret    

f0108462 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108462:	55                   	push   %ebp
f0108463:	89 e5                	mov    %esp,%ebp
f0108465:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108468:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010846f:	eb 4c                	jmp    f01084bd <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108471:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108474:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108477:	89 d0                	mov    %edx,%eax
f0108479:	01 c0                	add    %eax,%eax
f010847b:	01 d0                	add    %edx,%eax
f010847d:	c1 e0 03             	shl    $0x3,%eax
f0108480:	01 c8                	add    %ecx,%eax
f0108482:	83 c0 7c             	add    $0x7c,%eax
f0108485:	8b 00                	mov    (%eax),%eax
f0108487:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010848a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010848d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108492:	89 c2                	mov    %eax,%edx
f0108494:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108497:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010849a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010849d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01084a2:	39 c2                	cmp    %eax,%edx
f01084a4:	75 14                	jne    f01084ba <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01084a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084a9:	83 ec 08             	sub    $0x8,%esp
f01084ac:	50                   	push   %eax
f01084ad:	ff 75 08             	pushl  0x8(%ebp)
f01084b0:	e8 b8 00 00 00       	call   f010856d <env_table_ws_clear_entry>
f01084b5:	83 c4 10             	add    $0x10,%esp
			break;
f01084b8:	eb 09                	jmp    f01084c3 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01084ba:	ff 45 f4             	incl   -0xc(%ebp)
f01084bd:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01084c1:	7e ae                	jle    f0108471 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01084c3:	90                   	nop
f01084c4:	c9                   	leave  
f01084c5:	c3                   	ret    

f01084c6 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01084c6:	55                   	push   %ebp
f01084c7:	89 e5                	mov    %esp,%ebp
f01084c9:	53                   	push   %ebx
f01084ca:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01084cd:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01084d1:	76 19                	jbe    f01084ec <env_table_ws_set_entry+0x26>
f01084d3:	68 cc 60 13 f0       	push   $0xf01360cc
f01084d8:	68 f2 5e 13 f0       	push   $0xf0135ef2
f01084dd:	68 b6 00 00 00       	push   $0xb6
f01084e2:	68 08 5f 13 f0       	push   $0xf0135f08
f01084e7:	e8 0f 7d ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01084ec:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01084f3:	76 19                	jbe    f010850e <env_table_ws_set_entry+0x48>
f01084f5:	68 28 5f 13 f0       	push   $0xf0135f28
f01084fa:	68 f2 5e 13 f0       	push   $0xf0135ef2
f01084ff:	68 b7 00 00 00       	push   $0xb7
f0108504:	68 08 5f 13 f0       	push   $0xf0135f08
f0108509:	e8 ed 7c ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010850e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108511:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108517:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010851c:	89 c1                	mov    %eax,%ecx
f010851e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108521:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108524:	89 d0                	mov    %edx,%eax
f0108526:	01 c0                	add    %eax,%eax
f0108528:	01 d0                	add    %edx,%eax
f010852a:	c1 e0 03             	shl    $0x3,%eax
f010852d:	01 d8                	add    %ebx,%eax
f010852f:	83 c0 7c             	add    $0x7c,%eax
f0108532:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108534:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108537:	8b 55 0c             	mov    0xc(%ebp),%edx
f010853a:	89 d0                	mov    %edx,%eax
f010853c:	01 c0                	add    %eax,%eax
f010853e:	01 d0                	add    %edx,%eax
f0108540:	c1 e0 03             	shl    $0x3,%eax
f0108543:	01 c8                	add    %ecx,%eax
f0108545:	83 e8 80             	sub    $0xffffff80,%eax
f0108548:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010854b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010854e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108551:	89 d0                	mov    %edx,%eax
f0108553:	01 c0                	add    %eax,%eax
f0108555:	01 d0                	add    %edx,%eax
f0108557:	c1 e0 03             	shl    $0x3,%eax
f010855a:	01 c8                	add    %ecx,%eax
f010855c:	05 84 00 00 00       	add    $0x84,%eax
f0108561:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108567:	90                   	nop
}
f0108568:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010856b:	c9                   	leave  
f010856c:	c3                   	ret    

f010856d <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010856d:	55                   	push   %ebp
f010856e:	89 e5                	mov    %esp,%ebp
f0108570:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108573:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108577:	76 19                	jbe    f0108592 <env_table_ws_clear_entry+0x25>
f0108579:	68 cc 60 13 f0       	push   $0xf01360cc
f010857e:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0108583:	68 c2 00 00 00       	push   $0xc2
f0108588:	68 08 5f 13 f0       	push   $0xf0135f08
f010858d:	e8 69 7c ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108592:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108595:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108598:	89 d0                	mov    %edx,%eax
f010859a:	01 c0                	add    %eax,%eax
f010859c:	01 d0                	add    %edx,%eax
f010859e:	c1 e0 03             	shl    $0x3,%eax
f01085a1:	01 c8                	add    %ecx,%eax
f01085a3:	83 c0 7c             	add    $0x7c,%eax
f01085a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01085ac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085b2:	89 d0                	mov    %edx,%eax
f01085b4:	01 c0                	add    %eax,%eax
f01085b6:	01 d0                	add    %edx,%eax
f01085b8:	c1 e0 03             	shl    $0x3,%eax
f01085bb:	01 c8                	add    %ecx,%eax
f01085bd:	83 e8 80             	sub    $0xffffff80,%eax
f01085c0:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01085c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085c9:	89 d0                	mov    %edx,%eax
f01085cb:	01 c0                	add    %eax,%eax
f01085cd:	01 d0                	add    %edx,%eax
f01085cf:	c1 e0 03             	shl    $0x3,%eax
f01085d2:	01 c8                	add    %ecx,%eax
f01085d4:	05 84 00 00 00       	add    $0x84,%eax
f01085d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01085df:	90                   	nop
f01085e0:	c9                   	leave  
f01085e1:	c3                   	ret    

f01085e2 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01085e2:	55                   	push   %ebp
f01085e3:	89 e5                	mov    %esp,%ebp
f01085e5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085e8:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ec:	76 19                	jbe    f0108607 <env_table_ws_get_virtual_address+0x25>
f01085ee:	68 cc 60 13 f0       	push   $0xf01360cc
f01085f3:	68 f2 5e 13 f0       	push   $0xf0135ef2
f01085f8:	68 ca 00 00 00       	push   $0xca
f01085fd:	68 08 5f 13 f0       	push   $0xf0135f08
f0108602:	e8 f4 7b ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108607:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010860a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010860d:	89 d0                	mov    %edx,%eax
f010860f:	01 c0                	add    %eax,%eax
f0108611:	01 d0                	add    %edx,%eax
f0108613:	c1 e0 03             	shl    $0x3,%eax
f0108616:	01 c8                	add    %ecx,%eax
f0108618:	83 c0 7c             	add    $0x7c,%eax
f010861b:	8b 00                	mov    (%eax),%eax
f010861d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108620:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108623:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108628:	c9                   	leave  
f0108629:	c3                   	ret    

f010862a <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010862a:	55                   	push   %ebp
f010862b:	89 e5                	mov    %esp,%ebp
f010862d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108630:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108634:	76 19                	jbe    f010864f <env_table_ws_get_time_stamp+0x25>
f0108636:	68 cc 60 13 f0       	push   $0xf01360cc
f010863b:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0108640:	68 d1 00 00 00       	push   $0xd1
f0108645:	68 08 5f 13 f0       	push   $0xf0135f08
f010864a:	e8 ac 7b ff ff       	call   f01001fb <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010864f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108652:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108655:	89 d0                	mov    %edx,%eax
f0108657:	01 c0                	add    %eax,%eax
f0108659:	01 d0                	add    %edx,%eax
f010865b:	c1 e0 03             	shl    $0x3,%eax
f010865e:	01 c8                	add    %ecx,%eax
f0108660:	05 84 00 00 00       	add    $0x84,%eax
f0108665:	8b 00                	mov    (%eax),%eax
}
f0108667:	c9                   	leave  
f0108668:	c3                   	ret    

f0108669 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108669:	55                   	push   %ebp
f010866a:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010866c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010866f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108672:	89 d0                	mov    %edx,%eax
f0108674:	01 c0                	add    %eax,%eax
f0108676:	01 d0                	add    %edx,%eax
f0108678:	c1 e0 03             	shl    $0x3,%eax
f010867b:	01 c8                	add    %ecx,%eax
f010867d:	83 e8 80             	sub    $0xffffff80,%eax
f0108680:	8a 00                	mov    (%eax),%al
f0108682:	0f b6 c0             	movzbl %al,%eax
}
f0108685:	5d                   	pop    %ebp
f0108686:	c3                   	ret    

f0108687 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108687:	55                   	push   %ebp
f0108688:	89 e5                	mov    %esp,%ebp
f010868a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010868d:	83 ec 04             	sub    $0x4,%esp
f0108690:	68 00 61 13 f0       	push   $0xf0136100
f0108695:	68 e5 00 00 00       	push   $0xe5
f010869a:	68 08 5f 13 f0       	push   $0xf0135f08
f010869f:	e8 57 7b ff ff       	call   f01001fb <_panic>

f01086a4 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f01086a4:	55                   	push   %ebp
f01086a5:	89 e5                	mov    %esp,%ebp
f01086a7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f01086aa:	83 ec 04             	sub    $0x4,%esp
f01086ad:	68 2c 61 13 f0       	push   $0xf013612c
f01086b2:	68 ec 00 00 00       	push   $0xec
f01086b7:	68 08 5f 13 f0       	push   $0xf0135f08
f01086bc:	e8 3a 7b ff ff       	call   f01001fb <_panic>

f01086c1 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01086c1:	55                   	push   %ebp
f01086c2:	89 e5                	mov    %esp,%ebp
f01086c4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01086c7:	83 ec 04             	sub    $0x4,%esp
f01086ca:	68 5c 61 13 f0       	push   $0xf013615c
f01086cf:	68 f3 00 00 00       	push   $0xf3
f01086d4:	68 08 5f 13 f0       	push   $0xf0135f08
f01086d9:	e8 1d 7b ff ff       	call   f01001fb <_panic>

f01086de <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01086de:	55                   	push   %ebp
f01086df:	89 e5                	mov    %esp,%ebp
f01086e1:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01086e4:	8b 45 10             	mov    0x10(%ebp),%eax
f01086e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01086ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01086f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01086f3:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086f8:	85 c0                	test   %eax,%eax
f01086fa:	74 11                	je     f010870d <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01086fc:	8b 45 10             	mov    0x10(%ebp),%eax
f01086ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108705:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010870a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f010870d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108710:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108715:	85 c0                	test   %eax,%eax
f0108717:	74 11                	je     f010872a <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108719:	8b 45 0c             	mov    0xc(%ebp),%eax
f010871c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010871f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108722:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108727:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010872a:	8b 45 14             	mov    0x14(%ebp),%eax
f010872d:	c1 e0 0c             	shl    $0xc,%eax
f0108730:	89 c2                	mov    %eax,%edx
f0108732:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108735:	01 d0                	add    %edx,%eax
f0108737:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010873a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010873d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108740:	eb 4b                	jmp    f010878d <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108742:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108749:	83 ec 04             	sub    $0x4,%esp
f010874c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010874f:	50                   	push   %eax
f0108750:	ff 75 ec             	pushl  -0x14(%ebp)
f0108753:	ff 75 08             	pushl  0x8(%ebp)
f0108756:	e8 7f e2 ff ff       	call   f01069da <get_page_table>
f010875b:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f010875e:	83 ec 04             	sub    $0x4,%esp
f0108761:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108764:	50                   	push   %eax
f0108765:	ff 75 ec             	pushl  -0x14(%ebp)
f0108768:	ff 75 08             	pushl  0x8(%ebp)
f010876b:	e8 bf e5 ff ff       	call   f0106d2f <get_frame_info>
f0108770:	83 c4 10             	add    $0x10,%esp
f0108773:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108776:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010877a:	74 0a                	je     f0108786 <cut_paste_pages+0xa8>
			return -1;
f010877c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108781:	e9 d4 00 00 00       	jmp    f010885a <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108786:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010878d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108790:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108793:	72 ad                	jb     f0108742 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108798:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010879b:	e9 a9 00 00 00       	jmp    f0108849 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f01087a0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01087a7:	83 ec 04             	sub    $0x4,%esp
f01087aa:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01087ad:	50                   	push   %eax
f01087ae:	ff 75 e8             	pushl  -0x18(%ebp)
f01087b1:	ff 75 08             	pushl  0x8(%ebp)
f01087b4:	e8 21 e2 ff ff       	call   f01069da <get_page_table>
f01087b9:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f01087bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01087bf:	85 c0                	test   %eax,%eax
f01087c1:	75 14                	jne    f01087d7 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f01087c3:	83 ec 08             	sub    $0x8,%esp
f01087c6:	ff 75 e8             	pushl  -0x18(%ebp)
f01087c9:	ff 75 08             	pushl  0x8(%ebp)
f01087cc:	e8 5f e3 ff ff       	call   f0106b30 <create_page_table>
f01087d1:	83 c4 10             	add    $0x10,%esp
f01087d4:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087d7:	83 ec 04             	sub    $0x4,%esp
f01087da:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01087dd:	50                   	push   %eax
f01087de:	ff 75 e8             	pushl  -0x18(%ebp)
f01087e1:	ff 75 08             	pushl  0x8(%ebp)
f01087e4:	e8 46 e5 ff ff       	call   f0106d2f <get_frame_info>
f01087e9:	83 c4 10             	add    $0x10,%esp
f01087ec:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01087ef:	83 ec 08             	sub    $0x8,%esp
f01087f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01087f5:	ff 75 08             	pushl  0x8(%ebp)
f01087f8:	e8 f2 f3 ff ff       	call   f0107bef <pt_get_page_permissions>
f01087fd:	83 c4 10             	add    $0x10,%esp
f0108800:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108803:	83 ec 08             	sub    $0x8,%esp
f0108806:	ff 75 f0             	pushl  -0x10(%ebp)
f0108809:	ff 75 08             	pushl  0x8(%ebp)
f010880c:	e8 8e e5 ff ff       	call   f0106d9f <unmap_frame>
f0108811:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108814:	83 ec 0c             	sub    $0xc,%esp
f0108817:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010881a:	50                   	push   %eax
f010881b:	e8 fb df ff ff       	call   f010681b <allocate_frame>
f0108820:	83 c4 10             	add    $0x10,%esp
f0108823:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108826:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108829:	ff 75 d4             	pushl  -0x2c(%ebp)
f010882c:	ff 75 e8             	pushl  -0x18(%ebp)
f010882f:	50                   	push   %eax
f0108830:	ff 75 08             	pushl  0x8(%ebp)
f0108833:	e8 32 e4 ff ff       	call   f0106c6a <map_frame>
f0108838:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f010883b:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108842:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108849:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010884c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010884f:	0f 82 4b ff ff ff    	jb     f01087a0 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108855:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010885a:	c9                   	leave  
f010885b:	c3                   	ret    

f010885c <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010885c:	55                   	push   %ebp
f010885d:	89 e5                	mov    %esp,%ebp
f010885f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108862:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108869:	8b 45 10             	mov    0x10(%ebp),%eax
f010886c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f010886f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108872:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108875:	8b 45 10             	mov    0x10(%ebp),%eax
f0108878:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010887b:	e9 d1 00 00 00       	jmp    f0108951 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108880:	83 ec 04             	sub    $0x4,%esp
f0108883:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108886:	50                   	push   %eax
f0108887:	ff 75 f0             	pushl  -0x10(%ebp)
f010888a:	ff 75 08             	pushl  0x8(%ebp)
f010888d:	e8 48 e1 ff ff       	call   f01069da <get_page_table>
f0108892:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108895:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108898:	85 c0                	test   %eax,%eax
f010889a:	75 14                	jne    f01088b0 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010889c:	83 ec 08             	sub    $0x8,%esp
f010889f:	ff 75 f0             	pushl  -0x10(%ebp)
f01088a2:	ff 75 08             	pushl  0x8(%ebp)
f01088a5:	e8 86 e2 ff ff       	call   f0106b30 <create_page_table>
f01088aa:	83 c4 10             	add    $0x10,%esp
f01088ad:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f01088b0:	83 ec 04             	sub    $0x4,%esp
f01088b3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01088b6:	50                   	push   %eax
f01088b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01088ba:	ff 75 08             	pushl  0x8(%ebp)
f01088bd:	e8 6d e4 ff ff       	call   f0106d2f <get_frame_info>
f01088c2:	83 c4 10             	add    $0x10,%esp
f01088c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f01088c8:	83 ec 08             	sub    $0x8,%esp
f01088cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01088ce:	ff 75 08             	pushl  0x8(%ebp)
f01088d1:	e8 19 f3 ff ff       	call   f0107bef <pt_get_page_permissions>
f01088d6:	83 c4 10             	add    $0x10,%esp
f01088d9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f01088dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088df:	85 c0                	test   %eax,%eax
f01088e1:	74 14                	je     f01088f7 <copy_paste_chunk+0x9b>
f01088e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01088e6:	83 e0 02             	and    $0x2,%eax
f01088e9:	85 c0                	test   %eax,%eax
f01088eb:	75 0a                	jne    f01088f7 <copy_paste_chunk+0x9b>
			return -1;
f01088ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01088f2:	e9 a7 00 00 00       	jmp    f010899e <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f01088f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088fa:	85 c0                	test   %eax,%eax
f01088fc:	75 45                	jne    f0108943 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f01088fe:	83 ec 08             	sub    $0x8,%esp
f0108901:	ff 75 f4             	pushl  -0xc(%ebp)
f0108904:	ff 75 08             	pushl  0x8(%ebp)
f0108907:	e8 e3 f2 ff ff       	call   f0107bef <pt_get_page_permissions>
f010890c:	83 c4 10             	add    $0x10,%esp
f010890f:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108912:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108915:	83 e0 04             	and    $0x4,%eax
f0108918:	83 c8 02             	or     $0x2,%eax
f010891b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f010891e:	83 ec 0c             	sub    $0xc,%esp
f0108921:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108924:	50                   	push   %eax
f0108925:	e8 f1 de ff ff       	call   f010681b <allocate_frame>
f010892a:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010892d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108930:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108933:	52                   	push   %edx
f0108934:	ff 75 f0             	pushl  -0x10(%ebp)
f0108937:	50                   	push   %eax
f0108938:	ff 75 08             	pushl  0x8(%ebp)
f010893b:	e8 2a e3 ff ff       	call   f0106c6a <map_frame>
f0108940:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108943:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f010894a:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108951:	8b 55 10             	mov    0x10(%ebp),%edx
f0108954:	8b 45 14             	mov    0x14(%ebp),%eax
f0108957:	01 d0                	add    %edx,%eax
f0108959:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010895c:	0f 87 1e ff ff ff    	ja     f0108880 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108962:	8b 45 10             	mov    0x10(%ebp),%eax
f0108965:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108968:	8b 45 0c             	mov    0xc(%ebp),%eax
f010896b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f010896e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108971:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108974:	eb 16                	jmp    f010898c <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108976:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108979:	8b 10                	mov    (%eax),%edx
f010897b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010897e:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108980:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108984:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108988:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f010898c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010898f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108992:	01 d0                	add    %edx,%eax
f0108994:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108997:	77 dd                	ja     f0108976 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108999:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010899e:	c9                   	leave  
f010899f:	c3                   	ret    

f01089a0 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f01089a0:	55                   	push   %ebp
f01089a1:	89 e5                	mov    %esp,%ebp
f01089a3:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f01089a6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f01089ad:	8b 45 10             	mov    0x10(%ebp),%eax
f01089b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01089b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01089b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01089bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f01089be:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01089c5:	8b 55 10             	mov    0x10(%ebp),%edx
f01089c8:	8b 45 14             	mov    0x14(%ebp),%eax
f01089cb:	01 c2                	add    %eax,%edx
f01089cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089d0:	01 d0                	add    %edx,%eax
f01089d2:	48                   	dec    %eax
f01089d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01089de:	f7 75 e8             	divl   -0x18(%ebp)
f01089e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089e4:	29 d0                	sub    %edx,%eax
f01089e6:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f01089e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089ef:	e9 ac 00 00 00       	jmp    f0108aa0 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f01089f4:	83 ec 04             	sub    $0x4,%esp
f01089f7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01089fa:	50                   	push   %eax
f01089fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01089fe:	ff 75 08             	pushl  0x8(%ebp)
f0108a01:	e8 d4 df ff ff       	call   f01069da <get_page_table>
f0108a06:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108a09:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a0c:	85 c0                	test   %eax,%eax
f0108a0e:	75 14                	jne    f0108a24 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108a10:	83 ec 08             	sub    $0x8,%esp
f0108a13:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a16:	ff 75 08             	pushl  0x8(%ebp)
f0108a19:	e8 12 e1 ff ff       	call   f0106b30 <create_page_table>
f0108a1e:	83 c4 10             	add    $0x10,%esp
f0108a21:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a24:	83 ec 04             	sub    $0x4,%esp
f0108a27:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a2a:	50                   	push   %eax
f0108a2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a2e:	ff 75 08             	pushl  0x8(%ebp)
f0108a31:	e8 f9 e2 ff ff       	call   f0106d2f <get_frame_info>
f0108a36:	83 c4 10             	add    $0x10,%esp
f0108a39:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108a3c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108a40:	74 07                	je     f0108a49 <share_chunk+0xa9>
           return -1;
f0108a42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108a47:	eb 68                	jmp    f0108ab1 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108a49:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108a50:	83 ec 04             	sub    $0x4,%esp
f0108a53:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a56:	50                   	push   %eax
f0108a57:	ff 75 0c             	pushl  0xc(%ebp)
f0108a5a:	ff 75 08             	pushl  0x8(%ebp)
f0108a5d:	e8 78 df ff ff       	call   f01069da <get_page_table>
f0108a62:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108a65:	83 ec 04             	sub    $0x4,%esp
f0108a68:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a6b:	50                   	push   %eax
f0108a6c:	ff 75 0c             	pushl  0xc(%ebp)
f0108a6f:	ff 75 08             	pushl  0x8(%ebp)
f0108a72:	e8 b8 e2 ff ff       	call   f0106d2f <get_frame_info>
f0108a77:	83 c4 10             	add    $0x10,%esp
f0108a7a:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108a7d:	8b 45 18             	mov    0x18(%ebp),%eax
f0108a80:	50                   	push   %eax
f0108a81:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a84:	ff 75 d8             	pushl  -0x28(%ebp)
f0108a87:	ff 75 08             	pushl  0x8(%ebp)
f0108a8a:	e8 db e1 ff ff       	call   f0106c6a <map_frame>
f0108a8f:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108a92:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a99:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aa3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108aa6:	0f 82 48 ff ff ff    	jb     f01089f4 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108aac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108ab1:	c9                   	leave  
f0108ab2:	c3                   	ret    

f0108ab3 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108ab3:	55                   	push   %ebp
f0108ab4:	89 e5                	mov    %esp,%ebp
f0108ab6:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108ab9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108ac0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ac3:	8b 45 10             	mov    0x10(%ebp),%eax
f0108ac6:	01 d0                	add    %edx,%eax
f0108ac8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108acb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108ad2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108ad9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108ae0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108aea:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108aed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108af0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108af5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108af8:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108aff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b05:	01 d0                	add    %edx,%eax
f0108b07:	48                   	dec    %eax
f0108b08:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b0b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b13:	f7 75 dc             	divl   -0x24(%ebp)
f0108b16:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b19:	29 d0                	sub    %edx,%eax
f0108b1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b24:	e9 9d 00 00 00       	jmp    f0108bc6 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108b2f:	83 ec 04             	sub    $0x4,%esp
f0108b32:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b35:	50                   	push   %eax
f0108b36:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b39:	ff 75 08             	pushl  0x8(%ebp)
f0108b3c:	e8 99 de ff ff       	call   f01069da <get_page_table>
f0108b41:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108b44:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b47:	85 c0                	test   %eax,%eax
f0108b49:	75 14                	jne    f0108b5f <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108b4b:	83 ec 08             	sub    $0x8,%esp
f0108b4e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b51:	ff 75 08             	pushl  0x8(%ebp)
f0108b54:	e8 d7 df ff ff       	call   f0106b30 <create_page_table>
f0108b59:	83 c4 10             	add    $0x10,%esp
f0108b5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108b5f:	83 ec 04             	sub    $0x4,%esp
f0108b62:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b65:	50                   	push   %eax
f0108b66:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b69:	ff 75 08             	pushl  0x8(%ebp)
f0108b6c:	e8 be e1 ff ff       	call   f0106d2f <get_frame_info>
f0108b71:	83 c4 10             	add    $0x10,%esp
f0108b74:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108b77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b7a:	85 c0                	test   %eax,%eax
f0108b7c:	74 07                	je     f0108b85 <allocate_chunk+0xd2>
		{
			return -1;
f0108b7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b83:	eb 52                	jmp    f0108bd7 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108b85:	83 ec 0c             	sub    $0xc,%esp
f0108b88:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108b8b:	50                   	push   %eax
f0108b8c:	e8 8a dc ff ff       	call   f010681b <allocate_frame>
f0108b91:	83 c4 10             	add    $0x10,%esp
f0108b94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108b97:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108b9b:	74 22                	je     f0108bbf <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108b9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ba0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108ba3:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108ba6:	8b 55 14             	mov    0x14(%ebp),%edx
f0108ba9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bac:	52                   	push   %edx
f0108bad:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bb0:	50                   	push   %eax
f0108bb1:	ff 75 08             	pushl  0x8(%ebp)
f0108bb4:	e8 b1 e0 ff ff       	call   f0106c6a <map_frame>
f0108bb9:	83 c4 10             	add    $0x10,%esp
f0108bbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108bbf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bc9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108bcc:	0f 82 57 ff ff ff    	jb     f0108b29 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108bd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bd7:	c9                   	leave  
f0108bd8:	c3                   	ret    

f0108bd9 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bd9:	55                   	push   %ebp
f0108bda:	89 e5                	mov    %esp,%ebp
f0108bdc:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108be2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108be5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108be8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108bed:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108bf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108bf9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108bfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108c01:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108c08:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c0e:	01 d0                	add    %edx,%eax
f0108c10:	48                   	dec    %eax
f0108c11:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c14:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c17:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c1c:	f7 75 e0             	divl   -0x20(%ebp)
f0108c1f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c22:	29 d0                	sub    %edx,%eax
f0108c24:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108c27:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c2a:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108c2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108c30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c3a:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108c3f:	85 c0                	test   %eax,%eax
f0108c41:	75 37                	jne    f0108c7a <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108c43:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108c4a:	83 ec 04             	sub    $0x4,%esp
f0108c4d:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108c50:	50                   	push   %eax
f0108c51:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c54:	ff 75 08             	pushl  0x8(%ebp)
f0108c57:	e8 7e dd ff ff       	call   f01069da <get_page_table>
f0108c5c:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108c5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c62:	85 c0                	test   %eax,%eax
f0108c64:	74 14                	je     f0108c7a <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108c66:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c69:	8b 00                	mov    (%eax),%eax
f0108c6b:	8d 50 01             	lea    0x1(%eax),%edx
f0108c6e:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c71:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108c73:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108c7a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108c7e:	75 2d                	jne    f0108cad <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108c80:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108c87:	83 ec 04             	sub    $0x4,%esp
f0108c8a:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108c8d:	50                   	push   %eax
f0108c8e:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c91:	ff 75 08             	pushl  0x8(%ebp)
f0108c94:	e8 96 e0 ff ff       	call   f0106d2f <get_frame_info>
f0108c99:	83 c4 10             	add    $0x10,%esp
f0108c9c:	85 c0                	test   %eax,%eax
f0108c9e:	74 0d                	je     f0108cad <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108ca0:	8b 45 18             	mov    0x18(%ebp),%eax
f0108ca3:	8b 00                	mov    (%eax),%eax
f0108ca5:	8d 50 01             	lea    0x1(%eax),%edx
f0108ca8:	8b 45 18             	mov    0x18(%ebp),%eax
f0108cab:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108cad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108cba:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108cbd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108cc0:	01 d0                	add    %edx,%eax
f0108cc2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108cc5:	0f 87 6c ff ff ff    	ja     f0108c37 <calculate_allocated_space+0x5e>
}
f0108ccb:	90                   	nop
f0108ccc:	c9                   	leave  
f0108ccd:	c3                   	ret    

f0108cce <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108cce:	55                   	push   %ebp
f0108ccf:	89 e5                	mov    %esp,%ebp
f0108cd1:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108cd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108cdb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108ce2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ce5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ce8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ceb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108cf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cf6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108cf9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108cfc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d01:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d07:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108d0c:	85 c0                	test   %eax,%eax
f0108d0e:	75 26                	jne    f0108d36 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108d10:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108d17:	83 ec 04             	sub    $0x4,%esp
f0108d1a:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d1d:	50                   	push   %eax
f0108d1e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d21:	ff 75 08             	pushl  0x8(%ebp)
f0108d24:	e8 b1 dc ff ff       	call   f01069da <get_page_table>
f0108d29:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108d2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d2f:	85 c0                	test   %eax,%eax
f0108d31:	75 03                	jne    f0108d36 <calculate_required_frames+0x68>
				number_of_tables++;
f0108d33:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108d36:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108d3d:	83 ec 04             	sub    $0x4,%esp
f0108d40:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108d43:	50                   	push   %eax
f0108d44:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d47:	ff 75 08             	pushl  0x8(%ebp)
f0108d4a:	e8 e0 df ff ff       	call   f0106d2f <get_frame_info>
f0108d4f:	83 c4 10             	add    $0x10,%esp
f0108d52:	85 c0                	test   %eax,%eax
f0108d54:	75 03                	jne    f0108d59 <calculate_required_frames+0x8b>
			number_of_pages++;
f0108d56:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108d59:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108d60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108d66:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d69:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d6c:	01 d0                	add    %edx,%eax
f0108d6e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108d71:	77 91                	ja     f0108d04 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108d73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108d76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d79:	01 d0                	add    %edx,%eax
}
f0108d7b:	c9                   	leave  
f0108d7c:	c3                   	ret    

f0108d7d <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108d7d:	55                   	push   %ebp
f0108d7e:	89 e5                	mov    %esp,%ebp
f0108d80:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108d83:	83 ec 04             	sub    $0x4,%esp
f0108d86:	68 88 61 13 f0       	push   $0xf0136188
f0108d8b:	68 25 01 00 00       	push   $0x125
f0108d90:	68 b8 61 13 f0       	push   $0xf01361b8
f0108d95:	e8 61 74 ff ff       	call   f01001fb <_panic>

f0108d9a <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108d9a:	55                   	push   %ebp
f0108d9b:	89 e5                	mov    %esp,%ebp
f0108d9d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108da0:	83 ec 04             	sub    $0x4,%esp
f0108da3:	68 d4 61 13 f0       	push   $0xf01361d4
f0108da8:	68 2f 01 00 00       	push   $0x12f
f0108dad:	68 b8 61 13 f0       	push   $0xf01361b8
f0108db2:	e8 44 74 ff ff       	call   f01001fb <_panic>

f0108db7 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108db7:	55                   	push   %ebp
f0108db8:	89 e5                	mov    %esp,%ebp
f0108dba:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108dbd:	83 ec 04             	sub    $0x4,%esp
f0108dc0:	68 00 62 13 f0       	push   $0xf0136200
f0108dc5:	68 3d 01 00 00       	push   $0x13d
f0108dca:	68 b8 61 13 f0       	push   $0xf01361b8
f0108dcf:	e8 27 74 ff ff       	call   f01001fb <_panic>

f0108dd4 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108dd4:	55                   	push   %ebp
f0108dd5:	89 e5                	mov    %esp,%ebp
f0108dd7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108dda:	83 ec 04             	sub    $0x4,%esp
f0108ddd:	68 40 62 13 f0       	push   $0xf0136240
f0108de2:	68 4d 01 00 00       	push   $0x14d
f0108de7:	68 b8 61 13 f0       	push   $0xf01361b8
f0108dec:	e8 0a 74 ff ff       	call   f01001fb <_panic>

f0108df1 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108df1:	55                   	push   %ebp
f0108df2:	89 e5                	mov    %esp,%ebp
f0108df4:	57                   	push   %edi
f0108df5:	56                   	push   %esi
f0108df6:	53                   	push   %ebx
f0108df7:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108dfd:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108e04:	83 ec 0c             	sub    $0xc,%esp
f0108e07:	ff 75 08             	pushl  0x8(%ebp)
f0108e0a:	e8 c2 21 00 00       	call   f010afd1 <get_user_program_info>
f0108e0f:	83 c4 10             	add    $0x10,%esp
f0108e12:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108e15:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108e19:	75 0a                	jne    f0108e25 <env_create+0x34>
f0108e1b:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e20:	e9 cd 0b 00 00       	jmp    f01099f2 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108e25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e28:	8b 40 08             	mov    0x8(%eax),%eax
f0108e2b:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108e2e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108e35:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108e38:	83 ec 0c             	sub    $0xc,%esp
f0108e3b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108e41:	50                   	push   %eax
f0108e42:	e8 d3 0e 00 00       	call   f0109d1a <allocate_environment>
f0108e47:	83 c4 10             	add    $0x10,%esp
f0108e4a:	85 c0                	test   %eax,%eax
f0108e4c:	79 0a                	jns    f0108e58 <env_create+0x67>
	{
		return 0;
f0108e4e:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e53:	e9 9a 0b 00 00       	jmp    f01099f2 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108e58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e5b:	8b 00                	mov    (%eax),%eax
f0108e5d:	83 ec 0c             	sub    $0xc,%esp
f0108e60:	50                   	push   %eax
f0108e61:	e8 1a 7f 02 00       	call   f0130d80 <strlen>
f0108e66:	83 c4 10             	add    $0x10,%esp
f0108e69:	83 f8 3f             	cmp    $0x3f,%eax
f0108e6c:	7f 20                	jg     f0108e8e <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108e6e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e71:	8b 00                	mov    (%eax),%eax
f0108e73:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108e79:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108e7f:	83 ec 08             	sub    $0x8,%esp
f0108e82:	50                   	push   %eax
f0108e83:	52                   	push   %edx
f0108e84:	e8 46 7f 02 00       	call   f0130dcf <strcpy>
f0108e89:	83 c4 10             	add    $0x10,%esp
f0108e8c:	eb 20                	jmp    f0108eae <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108e8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e91:	8b 00                	mov    (%eax),%eax
f0108e93:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108e99:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108e9f:	83 ec 04             	sub    $0x4,%esp
f0108ea2:	6a 3f                	push   $0x3f
f0108ea4:	50                   	push   %eax
f0108ea5:	52                   	push   %edx
f0108ea6:	e8 52 7f 02 00       	call   f0130dfd <strncpy>
f0108eab:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108eae:	e8 42 0f 00 00       	call   f0109df5 <create_user_directory>
f0108eb3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108eb6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108eb9:	83 ec 0c             	sub    $0xc,%esp
f0108ebc:	50                   	push   %eax
f0108ebd:	e8 6f eb ff ff       	call   f0107a31 <kheap_physical_address>
f0108ec2:	83 c4 10             	add    $0x10,%esp
f0108ec5:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108ec8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108ece:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ed1:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108ed4:	83 ec 0c             	sub    $0xc,%esp
f0108ed7:	6a 02                	push   $0x2
f0108ed9:	e8 19 4d 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0108ede:	83 c4 10             	add    $0x10,%esp
f0108ee1:	85 c0                	test   %eax,%eax
f0108ee3:	74 21                	je     f0108f06 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108ee5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108eeb:	8b 55 10             	mov    0x10(%ebp),%edx
f0108eee:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108ef4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108efa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108efd:	2b 55 10             	sub    0x10(%ebp),%edx
f0108f00:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108f06:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108f0a:	75 12                	jne    f0108f1e <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108f0c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f12:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108f19:	00 00 00 
f0108f1c:	eb 0f                	jmp    f0108f2d <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108f1e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f24:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f27:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f2d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f33:	83 ec 04             	sub    $0x4,%esp
f0108f36:	ff 75 ac             	pushl  -0x54(%ebp)
f0108f39:	ff 75 b0             	pushl  -0x50(%ebp)
f0108f3c:	50                   	push   %eax
f0108f3d:	e8 b1 15 00 00       	call   f010a4f3 <initialize_environment>
f0108f42:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108f45:	0f 20 d8             	mov    %cr3,%eax
f0108f48:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108f4b:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108f4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108f51:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f57:	8b 40 60             	mov    0x60(%eax),%eax
f0108f5a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108f60:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108f66:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108f69:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108f70:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108f77:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f7d:	8b 40 74             	mov    0x74(%eax),%eax
f0108f80:	48                   	dec    %eax
f0108f81:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108f84:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108f8b:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108f8e:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0108f94:	83 ec 08             	sub    $0x8,%esp
f0108f97:	ff 75 b8             	pushl  -0x48(%ebp)
f0108f9a:	50                   	push   %eax
f0108f9b:	e8 66 1d 00 00       	call   f010ad06 <PROGRAM_SEGMENT_FIRST>
f0108fa0:	83 c4 0c             	add    $0xc,%esp
f0108fa3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108fa9:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0108faf:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108fb4:	89 c7                	mov    %eax,%edi
f0108fb6:	89 d6                	mov    %edx,%esi
f0108fb8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108fba:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108fc0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108fc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fc6:	8b 40 10             	mov    0x10(%eax),%eax
f0108fc9:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108fcc:	75 07                	jne    f0108fd5 <env_create+0x1e4>
f0108fce:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108fd5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108fdb:	e9 15 03 00 00       	jmp    f01092f5 <env_create+0x504>
	{
		segment_counter++;
f0108fe0:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108fe3:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0108fea:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108fed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108ff3:	83 ec 0c             	sub    $0xc,%esp
f0108ff6:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0108ffc:	52                   	push   %edx
f0108ffd:	ff 75 dc             	pushl  -0x24(%ebp)
f0109000:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109006:	52                   	push   %edx
f0109007:	ff 75 e4             	pushl  -0x1c(%ebp)
f010900a:	50                   	push   %eax
f010900b:	e8 02 0e 00 00       	call   f0109e12 <program_segment_alloc_map_copy_workingset>
f0109010:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109013:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109019:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010901c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010901f:	8b 00                	mov    (%eax),%eax
f0109021:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109027:	8b 40 0c             	mov    0xc(%eax),%eax
f010902a:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010902d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109030:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0109033:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109036:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010903b:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f010903e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0109045:	8b 55 98             	mov    -0x68(%ebp),%edx
f0109048:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010904b:	01 d0                	add    %edx,%eax
f010904d:	48                   	dec    %eax
f010904e:	89 45 88             	mov    %eax,-0x78(%ebp)
f0109051:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109054:	ba 00 00 00 00       	mov    $0x0,%edx
f0109059:	f7 75 8c             	divl   -0x74(%ebp)
f010905c:	8b 45 88             	mov    -0x78(%ebp),%eax
f010905f:	29 d0                	sub    %edx,%eax
f0109061:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0109064:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109067:	2b 45 90             	sub    -0x70(%ebp),%eax
f010906a:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f010906d:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0109072:	83 ec 04             	sub    $0x4,%esp
f0109075:	68 00 10 00 00       	push   $0x1000
f010907a:	6a 00                	push   $0x0
f010907c:	50                   	push   %eax
f010907d:	e8 ec 7e 02 00       	call   f0130f6e <memset>
f0109082:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109085:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109088:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f010908b:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0109091:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109094:	01 d0                	add    %edx,%eax
f0109096:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109099:	8b 45 98             	mov    -0x68(%ebp),%eax
f010909c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010909f:	eb 13                	jmp    f01090b4 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f01090a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01090a4:	8a 10                	mov    (%eax),%dl
f01090a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090a9:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01090ab:	ff 45 cc             	incl   -0x34(%ebp)
f01090ae:	ff 45 d4             	incl   -0x2c(%ebp)
f01090b1:	ff 45 d0             	incl   -0x30(%ebp)
f01090b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090b7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01090ba:	72 e5                	jb     f01090a1 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01090bc:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01090c2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01090c8:	83 ec 04             	sub    $0x4,%esp
f01090cb:	52                   	push   %edx
f01090cc:	ff 75 90             	pushl  -0x70(%ebp)
f01090cf:	50                   	push   %eax
f01090d0:	e8 b4 a5 ff ff       	call   f0103689 <pf_add_env_page>
f01090d5:	83 c4 10             	add    $0x10,%esp
f01090d8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090db:	75 17                	jne    f01090f4 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090dd:	83 ec 04             	sub    $0x4,%esp
f01090e0:	68 6c 62 13 f0       	push   $0xf013626c
f01090e5:	68 e1 00 00 00       	push   $0xe1
f01090ea:	68 b1 62 13 f0       	push   $0xf01362b1
f01090ef:	e8 07 71 ff ff       	call   f01001fb <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01090f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090f7:	8b 50 04             	mov    0x4(%eax),%edx
f01090fa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090fd:	01 d0                	add    %edx,%eax
f01090ff:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109105:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010910b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109110:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109116:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109119:	8b 50 04             	mov    0x4(%eax),%edx
f010911c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010911f:	01 d0                	add    %edx,%eax
f0109121:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109127:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010912a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010912d:	eb 43                	jmp    f0109172 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010912f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109132:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109138:	83 ec 04             	sub    $0x4,%esp
f010913b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010913e:	52                   	push   %edx
f010913f:	50                   	push   %eax
f0109140:	e8 44 a5 ff ff       	call   f0103689 <pf_add_env_page>
f0109145:	83 c4 10             	add    $0x10,%esp
f0109148:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010914b:	75 17                	jne    f0109164 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010914d:	83 ec 04             	sub    $0x4,%esp
f0109150:	68 6c 62 13 f0       	push   $0xf013626c
f0109155:	68 ee 00 00 00       	push   $0xee
f010915a:	68 b1 62 13 f0       	push   $0xf01362b1
f010915f:	e8 97 70 ff ff       	call   f01001fb <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109164:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010916b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109172:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109175:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f010917b:	72 b2                	jb     f010912f <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f010917d:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0109182:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0109185:	83 ec 04             	sub    $0x4,%esp
f0109188:	68 00 10 00 00       	push   $0x1000
f010918d:	6a 00                	push   $0x0
f010918f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109192:	e8 d7 7d 02 00       	call   f0130f6e <memset>
f0109197:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010919a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01091a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01091a3:	eb 13                	jmp    f01091b8 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f01091a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01091a8:	8a 10                	mov    (%eax),%dl
f01091aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01091ad:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01091af:	ff 45 cc             	incl   -0x34(%ebp)
f01091b2:	ff 45 d4             	incl   -0x2c(%ebp)
f01091b5:	ff 45 d0             	incl   -0x30(%ebp)
f01091b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091bb:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f01091c1:	72 e2                	jb     f01091a5 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01091c3:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01091c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091cf:	83 ec 04             	sub    $0x4,%esp
f01091d2:	52                   	push   %edx
f01091d3:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01091d9:	50                   	push   %eax
f01091da:	e8 aa a4 ff ff       	call   f0103689 <pf_add_env_page>
f01091df:	83 c4 10             	add    $0x10,%esp
f01091e2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091e5:	75 17                	jne    f01091fe <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091e7:	83 ec 04             	sub    $0x4,%esp
f01091ea:	68 6c 62 13 f0       	push   $0xf013626c
f01091ef:	68 fd 00 00 00       	push   $0xfd
f01091f4:	68 b1 62 13 f0       	push   $0xf01362b1
f01091f9:	e8 fd 6f ff ff       	call   f01001fb <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01091fe:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109205:	10 00 00 
f0109208:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010920b:	8b 50 04             	mov    0x4(%eax),%edx
f010920e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109211:	01 c2                	add    %eax,%edx
f0109213:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109219:	01 d0                	add    %edx,%eax
f010921b:	48                   	dec    %eax
f010921c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109222:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109228:	ba 00 00 00 00       	mov    $0x0,%edx
f010922d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0109233:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109239:	29 d0                	sub    %edx,%eax
f010923b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010923e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109241:	8b 50 08             	mov    0x8(%eax),%edx
f0109244:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109247:	01 d0                	add    %edx,%eax
f0109249:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010924c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109252:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109259:	eb 41                	jmp    f010929c <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010925b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109261:	83 ec 04             	sub    $0x4,%esp
f0109264:	6a 01                	push   $0x1
f0109266:	ff 75 c8             	pushl  -0x38(%ebp)
f0109269:	50                   	push   %eax
f010926a:	e8 e9 a2 ff ff       	call   f0103558 <pf_add_empty_env_page>
f010926f:	83 c4 10             	add    $0x10,%esp
f0109272:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109275:	75 17                	jne    f010928e <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109277:	83 ec 04             	sub    $0x4,%esp
f010927a:	68 6c 62 13 f0       	push   $0xf013626c
f010927f:	68 0a 01 00 00       	push   $0x10a
f0109284:	68 b1 62 13 f0       	push   $0xf01362b1
f0109289:	e8 6d 6f ff ff       	call   f01001fb <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010928e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109295:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010929c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01092a3:	10 00 00 
f01092a6:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f01092ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01092b2:	01 d0                	add    %edx,%eax
f01092b4:	48                   	dec    %eax
f01092b5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01092bb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01092c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01092c6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01092cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01092d2:	29 d0                	sub    %edx,%eax
f01092d4:	89 c2                	mov    %eax,%edx
f01092d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01092d9:	39 c2                	cmp    %eax,%edx
f01092db:	0f 87 7a ff ff ff    	ja     f010925b <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01092e1:	83 ec 08             	sub    $0x8,%esp
f01092e4:	ff 75 b8             	pushl  -0x48(%ebp)
f01092e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01092ea:	e8 0c 19 00 00       	call   f010abfb <PROGRAM_SEGMENT_NEXT>
f01092ef:	83 c4 10             	add    $0x10,%esp
f01092f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01092f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01092f9:	0f 85 e1 fc ff ff    	jne    f0108fe0 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f01092ff:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109306:	e9 9d 00 00 00       	jmp    f01093a8 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010930b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109311:	8b 48 78             	mov    0x78(%eax),%ecx
f0109314:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109317:	89 d0                	mov    %edx,%eax
f0109319:	01 c0                	add    %eax,%eax
f010931b:	01 d0                	add    %edx,%eax
f010931d:	c1 e0 03             	shl    $0x3,%eax
f0109320:	01 c8                	add    %ecx,%eax
f0109322:	8a 40 04             	mov    0x4(%eax),%al
f0109325:	84 c0                	test   %al,%al
f0109327:	75 7c                	jne    f01093a5 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109329:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010932f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109332:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109335:	89 d0                	mov    %edx,%eax
f0109337:	01 c0                	add    %eax,%eax
f0109339:	01 d0                	add    %edx,%eax
f010933b:	c1 e0 03             	shl    $0x3,%eax
f010933e:	01 c8                	add    %ecx,%eax
f0109340:	8b 00                	mov    (%eax),%eax
f0109342:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109348:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010934e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109351:	83 ec 04             	sub    $0x4,%esp
f0109354:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010935a:	52                   	push   %edx
f010935b:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f0109361:	50                   	push   %eax
f0109362:	e8 73 d6 ff ff       	call   f01069da <get_page_table>
f0109367:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010936a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0109370:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f0109376:	c1 ea 0c             	shr    $0xc,%edx
f0109379:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010937f:	c1 e2 02             	shl    $0x2,%edx
f0109382:	01 d0                	add    %edx,%eax
f0109384:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f010938a:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109390:	c1 e9 0c             	shr    $0xc,%ecx
f0109393:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109399:	c1 e1 02             	shl    $0x2,%ecx
f010939c:	01 ca                	add    %ecx,%edx
f010939e:	8b 12                	mov    (%edx),%edx
f01093a0:	83 e2 bf             	and    $0xffffffbf,%edx
f01093a3:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01093a5:	ff 45 c4             	incl   -0x3c(%ebp)
f01093a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093ae:	8b 50 74             	mov    0x74(%eax),%edx
f01093b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01093b4:	39 c2                	cmp    %eax,%edx
f01093b6:	0f 87 4f ff ff ff    	ja     f010930b <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01093bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01093bf:	8b 50 08             	mov    0x8(%eax),%edx
f01093c2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093c8:	83 ec 08             	sub    $0x8,%esp
f01093cb:	52                   	push   %edx
f01093cc:	50                   	push   %eax
f01093cd:	e8 73 16 00 00       	call   f010aa45 <set_environment_entry_point>
f01093d2:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01093d5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093db:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f01093e2:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01093e5:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f01093ec:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01093ef:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01093f6:	e9 53 05 00 00       	jmp    f010994e <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f01093fb:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109402:	00 00 00 
		allocate_frame(&pp);
f0109405:	83 ec 0c             	sub    $0xc,%esp
f0109408:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010940e:	50                   	push   %eax
f010940f:	e8 07 d4 ff ff       	call   f010681b <allocate_frame>
f0109414:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109417:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010941d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109423:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109426:	6a 06                	push   $0x6
f0109428:	ff 75 c0             	pushl  -0x40(%ebp)
f010942b:	52                   	push   %edx
f010942c:	50                   	push   %eax
f010942d:	e8 f4 d9 ff ff       	call   f0106e26 <loadtime_map_frame>
f0109432:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109435:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109438:	83 ec 04             	sub    $0x4,%esp
f010943b:	68 00 10 00 00       	push   $0x1000
f0109440:	6a 00                	push   $0x0
f0109442:	50                   	push   %eax
f0109443:	e8 26 7b 02 00       	call   f0130f6e <memset>
f0109448:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010944b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109451:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109457:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010945d:	83 ec 04             	sub    $0x4,%esp
f0109460:	ff 75 c0             	pushl  -0x40(%ebp)
f0109463:	52                   	push   %edx
f0109464:	50                   	push   %eax
f0109465:	e8 ee e9 ff ff       	call   f0107e58 <env_page_ws_set_entry>
f010946a:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010946d:	83 ec 0c             	sub    $0xc,%esp
f0109470:	6a 02                	push   $0x2
f0109472:	e8 80 47 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0109477:	83 c4 10             	add    $0x10,%esp
f010947a:	85 c0                	test   %eax,%eax
f010947c:	0f 84 6b 04 00 00    	je     f01098ed <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109482:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109488:	8b 48 78             	mov    0x78(%eax),%ecx
f010948b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109491:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109497:	89 d0                	mov    %edx,%eax
f0109499:	01 c0                	add    %eax,%eax
f010949b:	01 d0                	add    %edx,%eax
f010949d:	c1 e0 03             	shl    $0x3,%eax
f01094a0:	01 c8                	add    %ecx,%eax
f01094a2:	85 c0                	test   %eax,%eax
f01094a4:	75 17                	jne    f01094bd <env_create+0x6cc>
f01094a6:	83 ec 04             	sub    $0x4,%esp
f01094a9:	68 ce 62 13 f0       	push   $0xf01362ce
f01094ae:	68 41 01 00 00       	push   $0x141
f01094b3:	68 b1 62 13 f0       	push   $0xf01362b1
f01094b8:	e8 3e 6d ff ff       	call   f01001fb <_panic>
f01094bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01094c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094d2:	89 d0                	mov    %edx,%eax
f01094d4:	01 c0                	add    %eax,%eax
f01094d6:	01 d0                	add    %edx,%eax
f01094d8:	c1 e0 03             	shl    $0x3,%eax
f01094db:	01 c8                	add    %ecx,%eax
f01094dd:	8b 40 10             	mov    0x10(%eax),%eax
f01094e0:	85 c0                	test   %eax,%eax
f01094e2:	74 4b                	je     f010952f <env_create+0x73e>
f01094e4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ea:	8b 48 78             	mov    0x78(%eax),%ecx
f01094ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094f3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094f9:	89 d0                	mov    %edx,%eax
f01094fb:	01 c0                	add    %eax,%eax
f01094fd:	01 d0                	add    %edx,%eax
f01094ff:	c1 e0 03             	shl    $0x3,%eax
f0109502:	01 c8                	add    %ecx,%eax
f0109504:	8b 50 10             	mov    0x10(%eax),%edx
f0109507:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010950d:	8b 58 78             	mov    0x78(%eax),%ebx
f0109510:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109516:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010951c:	89 c8                	mov    %ecx,%eax
f010951e:	01 c0                	add    %eax,%eax
f0109520:	01 c8                	add    %ecx,%eax
f0109522:	c1 e0 03             	shl    $0x3,%eax
f0109525:	01 d8                	add    %ebx,%eax
f0109527:	8b 40 14             	mov    0x14(%eax),%eax
f010952a:	89 42 14             	mov    %eax,0x14(%edx)
f010952d:	eb 2f                	jmp    f010955e <env_create+0x76d>
f010952f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109535:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953b:	8b 58 78             	mov    0x78(%eax),%ebx
f010953e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109544:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010954a:	89 c8                	mov    %ecx,%eax
f010954c:	01 c0                	add    %eax,%eax
f010954e:	01 c8                	add    %ecx,%eax
f0109550:	c1 e0 03             	shl    $0x3,%eax
f0109553:	01 d8                	add    %ebx,%eax
f0109555:	8b 40 14             	mov    0x14(%eax),%eax
f0109558:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f010955e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109564:	8b 48 78             	mov    0x78(%eax),%ecx
f0109567:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010956d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109573:	89 d0                	mov    %edx,%eax
f0109575:	01 c0                	add    %eax,%eax
f0109577:	01 d0                	add    %edx,%eax
f0109579:	c1 e0 03             	shl    $0x3,%eax
f010957c:	01 c8                	add    %ecx,%eax
f010957e:	8b 40 14             	mov    0x14(%eax),%eax
f0109581:	85 c0                	test   %eax,%eax
f0109583:	74 4b                	je     f01095d0 <env_create+0x7df>
f0109585:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010958b:	8b 48 78             	mov    0x78(%eax),%ecx
f010958e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109594:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010959a:	89 d0                	mov    %edx,%eax
f010959c:	01 c0                	add    %eax,%eax
f010959e:	01 d0                	add    %edx,%eax
f01095a0:	c1 e0 03             	shl    $0x3,%eax
f01095a3:	01 c8                	add    %ecx,%eax
f01095a5:	8b 50 14             	mov    0x14(%eax),%edx
f01095a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01095b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095bd:	89 c8                	mov    %ecx,%eax
f01095bf:	01 c0                	add    %eax,%eax
f01095c1:	01 c8                	add    %ecx,%eax
f01095c3:	c1 e0 03             	shl    $0x3,%eax
f01095c6:	01 d8                	add    %ebx,%eax
f01095c8:	8b 40 10             	mov    0x10(%eax),%eax
f01095cb:	89 42 10             	mov    %eax,0x10(%edx)
f01095ce:	eb 2f                	jmp    f01095ff <env_create+0x80e>
f01095d0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095dc:	8b 58 78             	mov    0x78(%eax),%ebx
f01095df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095e5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095eb:	89 c8                	mov    %ecx,%eax
f01095ed:	01 c0                	add    %eax,%eax
f01095ef:	01 c8                	add    %ecx,%eax
f01095f1:	c1 e0 03             	shl    $0x3,%eax
f01095f4:	01 d8                	add    %ebx,%eax
f01095f6:	8b 40 10             	mov    0x10(%eax),%eax
f01095f9:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f01095ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109605:	8b 48 78             	mov    0x78(%eax),%ecx
f0109608:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010960e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109614:	89 d0                	mov    %edx,%eax
f0109616:	01 c0                	add    %eax,%eax
f0109618:	01 d0                	add    %edx,%eax
f010961a:	c1 e0 03             	shl    $0x3,%eax
f010961d:	01 c8                	add    %ecx,%eax
f010961f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109626:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010962c:	8b 48 78             	mov    0x78(%eax),%ecx
f010962f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109635:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010963b:	89 d0                	mov    %edx,%eax
f010963d:	01 c0                	add    %eax,%eax
f010963f:	01 d0                	add    %edx,%eax
f0109641:	c1 e0 03             	shl    $0x3,%eax
f0109644:	01 c8                	add    %ecx,%eax
f0109646:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010964d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109653:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109659:	4a                   	dec    %edx
f010965a:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109660:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109666:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010966c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109672:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109678:	39 c2                	cmp    %eax,%edx
f010967a:	0f 83 39 01 00 00    	jae    f01097b9 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109680:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109686:	8b 48 78             	mov    0x78(%eax),%ecx
f0109689:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010968f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109695:	89 d0                	mov    %edx,%eax
f0109697:	01 c0                	add    %eax,%eax
f0109699:	01 d0                	add    %edx,%eax
f010969b:	c1 e0 03             	shl    $0x3,%eax
f010969e:	01 c8                	add    %ecx,%eax
f01096a0:	85 c0                	test   %eax,%eax
f01096a2:	75 17                	jne    f01096bb <env_create+0x8ca>
f01096a4:	83 ec 04             	sub    $0x4,%esp
f01096a7:	68 ec 62 13 f0       	push   $0xf01362ec
f01096ac:	68 46 01 00 00       	push   $0x146
f01096b1:	68 b1 62 13 f0       	push   $0xf01362b1
f01096b6:	e8 40 6b ff ff       	call   f01001fb <_panic>
f01096bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c1:	8b 48 78             	mov    0x78(%eax),%ecx
f01096c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096ca:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096d0:	89 d0                	mov    %edx,%eax
f01096d2:	01 c0                	add    %eax,%eax
f01096d4:	01 d0                	add    %edx,%eax
f01096d6:	c1 e0 03             	shl    $0x3,%eax
f01096d9:	01 c8                	add    %ecx,%eax
f01096db:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096e1:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f01096e7:	89 50 10             	mov    %edx,0x10(%eax)
f01096ea:	8b 40 10             	mov    0x10(%eax),%eax
f01096ed:	85 c0                	test   %eax,%eax
f01096ef:	74 31                	je     f0109722 <env_create+0x931>
f01096f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f7:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f01096fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109703:	8b 58 78             	mov    0x78(%eax),%ebx
f0109706:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010970c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109712:	89 c8                	mov    %ecx,%eax
f0109714:	01 c0                	add    %eax,%eax
f0109716:	01 c8                	add    %ecx,%eax
f0109718:	c1 e0 03             	shl    $0x3,%eax
f010971b:	01 d8                	add    %ebx,%eax
f010971d:	89 42 14             	mov    %eax,0x14(%edx)
f0109720:	eb 2c                	jmp    f010974e <env_create+0x95d>
f0109722:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109728:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010972e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109731:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109737:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010973d:	89 c8                	mov    %ecx,%eax
f010973f:	01 c0                	add    %eax,%eax
f0109741:	01 c8                	add    %ecx,%eax
f0109743:	c1 e0 03             	shl    $0x3,%eax
f0109746:	01 d8                	add    %ebx,%eax
f0109748:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f010974e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109754:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010975a:	8b 58 78             	mov    0x78(%eax),%ebx
f010975d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109763:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109769:	89 c8                	mov    %ecx,%eax
f010976b:	01 c0                	add    %eax,%eax
f010976d:	01 c8                	add    %ecx,%eax
f010976f:	c1 e0 03             	shl    $0x3,%eax
f0109772:	01 d8                	add    %ebx,%eax
f0109774:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f010977a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109780:	8b 48 78             	mov    0x78(%eax),%ecx
f0109783:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109789:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010978f:	89 d0                	mov    %edx,%eax
f0109791:	01 c0                	add    %eax,%eax
f0109793:	01 d0                	add    %edx,%eax
f0109795:	c1 e0 03             	shl    $0x3,%eax
f0109798:	01 c8                	add    %ecx,%eax
f010979a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01097a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a7:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01097ad:	42                   	inc    %edx
f01097ae:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f01097b4:	e9 34 01 00 00       	jmp    f01098ed <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01097b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097bf:	8b 48 78             	mov    0x78(%eax),%ecx
f01097c2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097c8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097ce:	89 d0                	mov    %edx,%eax
f01097d0:	01 c0                	add    %eax,%eax
f01097d2:	01 d0                	add    %edx,%eax
f01097d4:	c1 e0 03             	shl    $0x3,%eax
f01097d7:	01 c8                	add    %ecx,%eax
f01097d9:	85 c0                	test   %eax,%eax
f01097db:	75 17                	jne    f01097f4 <env_create+0xa03>
f01097dd:	83 ec 04             	sub    $0x4,%esp
f01097e0:	68 ec 62 13 f0       	push   $0xf01362ec
f01097e5:	68 4a 01 00 00       	push   $0x14a
f01097ea:	68 b1 62 13 f0       	push   $0xf01362b1
f01097ef:	e8 07 6a ff ff       	call   f01001fb <_panic>
f01097f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01097fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109803:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109809:	89 d0                	mov    %edx,%eax
f010980b:	01 c0                	add    %eax,%eax
f010980d:	01 d0                	add    %edx,%eax
f010980f:	c1 e0 03             	shl    $0x3,%eax
f0109812:	01 c8                	add    %ecx,%eax
f0109814:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010981a:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109820:	89 50 10             	mov    %edx,0x10(%eax)
f0109823:	8b 40 10             	mov    0x10(%eax),%eax
f0109826:	85 c0                	test   %eax,%eax
f0109828:	74 31                	je     f010985b <env_create+0xa6a>
f010982a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109830:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109836:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983c:	8b 58 78             	mov    0x78(%eax),%ebx
f010983f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109845:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010984b:	89 c8                	mov    %ecx,%eax
f010984d:	01 c0                	add    %eax,%eax
f010984f:	01 c8                	add    %ecx,%eax
f0109851:	c1 e0 03             	shl    $0x3,%eax
f0109854:	01 d8                	add    %ebx,%eax
f0109856:	89 42 14             	mov    %eax,0x14(%edx)
f0109859:	eb 2c                	jmp    f0109887 <env_create+0xa96>
f010985b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109861:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109867:	8b 58 78             	mov    0x78(%eax),%ebx
f010986a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109870:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109876:	89 c8                	mov    %ecx,%eax
f0109878:	01 c0                	add    %eax,%eax
f010987a:	01 c8                	add    %ecx,%eax
f010987c:	c1 e0 03             	shl    $0x3,%eax
f010987f:	01 d8                	add    %ebx,%eax
f0109881:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109887:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109893:	8b 58 78             	mov    0x78(%eax),%ebx
f0109896:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010989c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098a2:	89 c8                	mov    %ecx,%eax
f01098a4:	01 c0                	add    %eax,%eax
f01098a6:	01 c8                	add    %ecx,%eax
f01098a8:	c1 e0 03             	shl    $0x3,%eax
f01098ab:	01 d8                	add    %ebx,%eax
f01098ad:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f01098b3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b9:	8b 48 78             	mov    0x78(%eax),%ecx
f01098bc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098c2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098c8:	89 d0                	mov    %edx,%eax
f01098ca:	01 c0                	add    %eax,%eax
f01098cc:	01 d0                	add    %edx,%eax
f01098ce:	c1 e0 03             	shl    $0x3,%eax
f01098d1:	01 c8                	add    %ecx,%eax
f01098d3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01098da:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e0:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f01098e6:	42                   	inc    %edx
f01098e7:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f01098ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098f3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098f9:	42                   	inc    %edx
f01098fa:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109900:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109906:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109912:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109918:	8b 5a 74             	mov    0x74(%edx),%ebx
f010991b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109920:	f7 f3                	div    %ebx
f0109922:	89 d0                	mov    %edx,%eax
f0109924:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010992a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109930:	83 ec 04             	sub    $0x4,%esp
f0109933:	6a 01                	push   $0x1
f0109935:	ff 75 c0             	pushl  -0x40(%ebp)
f0109938:	50                   	push   %eax
f0109939:	e8 1a 9c ff ff       	call   f0103558 <pf_add_empty_env_page>
f010993e:	83 c4 10             	add    $0x10,%esp
f0109941:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109947:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010994e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109951:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109957:	0f 83 9e fa ff ff    	jae    f01093fb <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010995d:	83 ec 0c             	sub    $0xc,%esp
f0109960:	6a 02                	push   $0x2
f0109962:	e8 90 42 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0109967:	83 c4 10             	add    $0x10,%esp
f010996a:	85 c0                	test   %eax,%eax
f010996c:	74 72                	je     f01099e0 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f010996e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109975:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997b:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109981:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109984:	eb 2b                	jmp    f01099b1 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109986:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109989:	8b 10                	mov    (%eax),%edx
f010998b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109991:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109994:	6a 01                	push   $0x1
f0109996:	6a 00                	push   $0x0
f0109998:	52                   	push   %edx
f0109999:	50                   	push   %eax
f010999a:	e8 9c e1 ff ff       	call   f0107b3b <pt_set_page_permissions>
f010999f:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01099a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01099ae:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01099b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099b7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01099bb:	74 08                	je     f01099c5 <env_create+0xbd4>
f01099bd:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01099c0:	8b 52 10             	mov    0x10(%edx),%edx
f01099c3:	eb 05                	jmp    f01099ca <env_create+0xbd9>
f01099c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01099ca:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f01099d0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01099d6:	85 c0                	test   %eax,%eax
f01099d8:	75 ac                	jne    f0109986 <env_create+0xb95>
f01099da:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01099de:	75 a6                	jne    f0109986 <env_create+0xb95>
f01099e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01099e3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01099e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01099e9:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01099ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f01099f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01099f5:	5b                   	pop    %ebx
f01099f6:	5e                   	pop    %esi
f01099f7:	5f                   	pop    %edi
f01099f8:	5d                   	pop    %ebp
f01099f9:	c3                   	ret    

f01099fa <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01099fa:	55                   	push   %ebp
f01099fb:	89 e5                	mov    %esp,%ebp
f01099fd:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109a00:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a05:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a08:	74 25                	je     f0109a2f <env_run+0x35>
	{
		curenv = e ;
f0109a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a0d:	a3 14 72 65 f0       	mov    %eax,0xf0657214
		curenv->env_runs++ ;
f0109a12:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a17:	8b 50 58             	mov    0x58(%eax),%edx
f0109a1a:	42                   	inc    %edx
f0109a1b:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109a1e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a23:	8b 40 60             	mov    0x60(%eax),%eax
f0109a26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a2c:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109a2f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a34:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109a3b:	e8 f3 a6 ff ff       	call   f0104133 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109a40:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a45:	83 ec 0c             	sub    $0xc,%esp
f0109a48:	50                   	push   %eax
f0109a49:	e8 0f 01 00 00       	call   f0109b5d <env_pop_tf>

f0109a4e <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109a4e:	55                   	push   %ebp
f0109a4f:	89 e5                	mov    %esp,%ebp
f0109a51:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109a54:	83 ec 0c             	sub    $0xc,%esp
f0109a57:	ff 75 08             	pushl  0x8(%ebp)
f0109a5a:	e8 f5 10 00 00       	call   f010ab54 <unshare_pws_at_user_space>
f0109a5f:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109a62:	83 ec 04             	sub    $0x4,%esp
f0109a65:	68 10 63 13 f0       	push   $0xf0136310
f0109a6a:	68 9d 01 00 00       	push   $0x19d
f0109a6f:	68 b1 62 13 f0       	push   $0xf01362b1
f0109a74:	e8 82 67 ff ff       	call   f01001fb <_panic>

f0109a79 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109a79:	55                   	push   %ebp
f0109a7a:	89 e5                	mov    %esp,%ebp
f0109a7c:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109a7f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a84:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a87:	83 ec 0c             	sub    $0xc,%esp
f0109a8a:	50                   	push   %eax
f0109a8b:	e8 3b b7 ff ff       	call   f01051cb <sched_exit_env>
f0109a90:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109a93:	e8 ad ab ff ff       	call   f0104645 <fos_scheduler>

f0109a98 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109a98:	55                   	push   %ebp
f0109a99:	89 e5                	mov    %esp,%ebp
f0109a9b:	53                   	push   %ebx
f0109a9c:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109a9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109aa3:	75 15                	jne    f0109aba <envid2env+0x22>
		*env_store = curenv;
f0109aa5:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0109aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109aae:	89 10                	mov    %edx,(%eax)
		return 0;
f0109ab0:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ab5:	e9 9e 00 00 00       	jmp    f0109b58 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109aba:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109ac0:	83 ec 0c             	sub    $0xc,%esp
f0109ac3:	68 b1 02 00 00       	push   $0x2b1
f0109ac8:	e8 25 60 02 00       	call   f012faf2 <nearest_pow2_ceil>
f0109acd:	83 c4 10             	add    $0x10,%esp
f0109ad0:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad6:	21 c2                	and    %eax,%edx
f0109ad8:	89 d0                	mov    %edx,%eax
f0109ada:	c1 e0 03             	shl    $0x3,%eax
f0109add:	01 d0                	add    %edx,%eax
f0109adf:	01 c0                	add    %eax,%eax
f0109ae1:	01 d0                	add    %edx,%eax
f0109ae3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109aea:	01 d0                	add    %edx,%eax
f0109aec:	c1 e0 04             	shl    $0x4,%eax
f0109aef:	01 d8                	add    %ebx,%eax
f0109af1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109af7:	8b 40 54             	mov    0x54(%eax),%eax
f0109afa:	85 c0                	test   %eax,%eax
f0109afc:	74 0b                	je     f0109b09 <envid2env+0x71>
f0109afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b01:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b04:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b07:	74 10                	je     f0109b19 <envid2env+0x81>
		*env_store = 0;
f0109b09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b12:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b17:	eb 3f                	jmp    f0109b58 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109b19:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109b1d:	74 2c                	je     f0109b4b <envid2env+0xb3>
f0109b1f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109b24:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b27:	74 22                	je     f0109b4b <envid2env+0xb3>
f0109b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b2c:	8b 50 50             	mov    0x50(%eax),%edx
f0109b2f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109b34:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b37:	39 c2                	cmp    %eax,%edx
f0109b39:	74 10                	je     f0109b4b <envid2env+0xb3>
		*env_store = 0;
f0109b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b44:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b49:	eb 0d                	jmp    f0109b58 <envid2env+0xc0>
	}

	*env_store = e;
f0109b4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b51:	89 10                	mov    %edx,(%eax)
	return 0;
f0109b53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109b58:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109b5b:	c9                   	leave  
f0109b5c:	c3                   	ret    

f0109b5d <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109b5d:	55                   	push   %ebp
f0109b5e:	89 e5                	mov    %esp,%ebp
f0109b60:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109b63:	8b 65 08             	mov    0x8(%ebp),%esp
f0109b66:	61                   	popa   
f0109b67:	07                   	pop    %es
f0109b68:	1f                   	pop    %ds
f0109b69:	83 c4 08             	add    $0x8,%esp
f0109b6c:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109b6d:	83 ec 04             	sub    $0x4,%esp
f0109b70:	68 37 63 13 f0       	push   $0xf0136337
f0109b75:	68 fc 01 00 00       	push   $0x1fc
f0109b7a:	68 b1 62 13 f0       	push   $0xf01362b1
f0109b7f:	e8 77 66 ff ff       	call   f01001fb <_panic>

f0109b84 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109b84:	55                   	push   %ebp
f0109b85:	89 e5                	mov    %esp,%ebp
f0109b87:	53                   	push   %ebx
f0109b88:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109b8b:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109b92:	e9 73 01 00 00       	jmp    f0109d0a <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109b97:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ba0:	89 d0                	mov    %edx,%eax
f0109ba2:	c1 e0 03             	shl    $0x3,%eax
f0109ba5:	01 d0                	add    %edx,%eax
f0109ba7:	01 c0                	add    %eax,%eax
f0109ba9:	01 d0                	add    %edx,%eax
f0109bab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109bb2:	01 d0                	add    %edx,%eax
f0109bb4:	c1 e0 04             	shl    $0x4,%eax
f0109bb7:	01 c8                	add    %ecx,%eax
f0109bb9:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109bc0:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109bc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc9:	89 d0                	mov    %edx,%eax
f0109bcb:	c1 e0 03             	shl    $0x3,%eax
f0109bce:	01 d0                	add    %edx,%eax
f0109bd0:	01 c0                	add    %eax,%eax
f0109bd2:	01 d0                	add    %edx,%eax
f0109bd4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109bdb:	01 d0                	add    %edx,%eax
f0109bdd:	c1 e0 04             	shl    $0x4,%eax
f0109be0:	01 c8                	add    %ecx,%eax
f0109be2:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109be9:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109bef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bf2:	89 d0                	mov    %edx,%eax
f0109bf4:	c1 e0 03             	shl    $0x3,%eax
f0109bf7:	01 d0                	add    %edx,%eax
f0109bf9:	01 c0                	add    %eax,%eax
f0109bfb:	01 d0                	add    %edx,%eax
f0109bfd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c04:	01 d0                	add    %edx,%eax
f0109c06:	c1 e0 04             	shl    $0x4,%eax
f0109c09:	01 c8                	add    %ecx,%eax
f0109c0b:	85 c0                	test   %eax,%eax
f0109c0d:	75 17                	jne    f0109c26 <env_init+0xa2>
f0109c0f:	83 ec 04             	sub    $0x4,%esp
f0109c12:	68 ec 62 13 f0       	push   $0xf01362ec
f0109c17:	68 18 02 00 00       	push   $0x218
f0109c1c:	68 b1 62 13 f0       	push   $0xf01362b1
f0109c21:	e8 d5 65 ff ff       	call   f01001fb <_panic>
f0109c26:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109c2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c2f:	89 d0                	mov    %edx,%eax
f0109c31:	c1 e0 03             	shl    $0x3,%eax
f0109c34:	01 d0                	add    %edx,%eax
f0109c36:	01 c0                	add    %eax,%eax
f0109c38:	01 d0                	add    %edx,%eax
f0109c3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c41:	01 d0                	add    %edx,%eax
f0109c43:	c1 e0 04             	shl    $0x4,%eax
f0109c46:	01 c8                	add    %ecx,%eax
f0109c48:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109c4e:	89 50 44             	mov    %edx,0x44(%eax)
f0109c51:	8b 40 44             	mov    0x44(%eax),%eax
f0109c54:	85 c0                	test   %eax,%eax
f0109c56:	74 2d                	je     f0109c85 <env_init+0x101>
f0109c58:	8b 0d 18 72 65 f0    	mov    0xf0657218,%ecx
f0109c5e:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109c64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c67:	89 d0                	mov    %edx,%eax
f0109c69:	c1 e0 03             	shl    $0x3,%eax
f0109c6c:	01 d0                	add    %edx,%eax
f0109c6e:	01 c0                	add    %eax,%eax
f0109c70:	01 d0                	add    %edx,%eax
f0109c72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c79:	01 d0                	add    %edx,%eax
f0109c7b:	c1 e0 04             	shl    $0x4,%eax
f0109c7e:	01 d8                	add    %ebx,%eax
f0109c80:	89 41 48             	mov    %eax,0x48(%ecx)
f0109c83:	eb 27                	jmp    f0109cac <env_init+0x128>
f0109c85:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109c8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c8e:	89 d0                	mov    %edx,%eax
f0109c90:	c1 e0 03             	shl    $0x3,%eax
f0109c93:	01 d0                	add    %edx,%eax
f0109c95:	01 c0                	add    %eax,%eax
f0109c97:	01 d0                	add    %edx,%eax
f0109c99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ca0:	01 d0                	add    %edx,%eax
f0109ca2:	c1 e0 04             	shl    $0x4,%eax
f0109ca5:	01 c8                	add    %ecx,%eax
f0109ca7:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109cac:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109cb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cb5:	89 d0                	mov    %edx,%eax
f0109cb7:	c1 e0 03             	shl    $0x3,%eax
f0109cba:	01 d0                	add    %edx,%eax
f0109cbc:	01 c0                	add    %eax,%eax
f0109cbe:	01 d0                	add    %edx,%eax
f0109cc0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cc7:	01 d0                	add    %edx,%eax
f0109cc9:	c1 e0 04             	shl    $0x4,%eax
f0109ccc:	01 c8                	add    %ecx,%eax
f0109cce:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109cd3:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109cd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cdc:	89 d0                	mov    %edx,%eax
f0109cde:	c1 e0 03             	shl    $0x3,%eax
f0109ce1:	01 d0                	add    %edx,%eax
f0109ce3:	01 c0                	add    %eax,%eax
f0109ce5:	01 d0                	add    %edx,%eax
f0109ce7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cee:	01 d0                	add    %edx,%eax
f0109cf0:	c1 e0 04             	shl    $0x4,%eax
f0109cf3:	01 c8                	add    %ecx,%eax
f0109cf5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cfc:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109d01:	40                   	inc    %eax
f0109d02:	a3 24 72 65 f0       	mov    %eax,0xf0657224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d07:	ff 4d f4             	decl   -0xc(%ebp)
f0109d0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d0e:	0f 89 83 fe ff ff    	jns    f0109b97 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d14:	90                   	nop
f0109d15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d18:	c9                   	leave  
f0109d19:	c3                   	ret    

f0109d1a <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d1a:	55                   	push   %ebp
f0109d1b:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d1d:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109d23:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d26:	89 10                	mov    %edx,(%eax)
f0109d28:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d2b:	8b 00                	mov    (%eax),%eax
f0109d2d:	85 c0                	test   %eax,%eax
f0109d2f:	75 07                	jne    f0109d38 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109d31:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109d36:	eb 11                	jmp    f0109d49 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109d38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d3b:	8b 00                	mov    (%eax),%eax
f0109d3d:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109d44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109d49:	5d                   	pop    %ebp
f0109d4a:	c3                   	ret    

f0109d4b <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109d4b:	55                   	push   %ebp
f0109d4c:	89 e5                	mov    %esp,%ebp
f0109d4e:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109d51:	83 ec 04             	sub    $0x4,%esp
f0109d54:	68 f0 05 00 00       	push   $0x5f0
f0109d59:	6a 00                	push   $0x0
f0109d5b:	ff 75 08             	pushl  0x8(%ebp)
f0109d5e:	e8 0b 72 02 00       	call   f0130f6e <memset>
f0109d63:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109d66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d69:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109d70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d74:	75 17                	jne    f0109d8d <free_environment+0x42>
f0109d76:	83 ec 04             	sub    $0x4,%esp
f0109d79:	68 ec 62 13 f0       	push   $0xf01362ec
f0109d7e:	68 35 02 00 00       	push   $0x235
f0109d83:	68 b1 62 13 f0       	push   $0xf01362b1
f0109d88:	e8 6e 64 ff ff       	call   f01001fb <_panic>
f0109d8d:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109d93:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d96:	89 50 44             	mov    %edx,0x44(%eax)
f0109d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	74 0d                	je     f0109db0 <free_environment+0x65>
f0109da3:	a1 18 72 65 f0       	mov    0xf0657218,%eax
f0109da8:	8b 55 08             	mov    0x8(%ebp),%edx
f0109dab:	89 50 48             	mov    %edx,0x48(%eax)
f0109dae:	eb 08                	jmp    f0109db8 <free_environment+0x6d>
f0109db0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109db3:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dbb:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109dc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109dca:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109dcf:	40                   	inc    %eax
f0109dd0:	a3 24 72 65 f0       	mov    %eax,0xf0657224
}
f0109dd5:	90                   	nop
f0109dd6:	c9                   	leave  
f0109dd7:	c3                   	ret    

f0109dd8 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109dd8:	55                   	push   %ebp
f0109dd9:	89 e5                	mov    %esp,%ebp
f0109ddb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f0109dde:	83 ec 04             	sub    $0x4,%esp
f0109de1:	68 44 63 13 f0       	push   $0xf0136344
f0109de6:	68 3f 02 00 00       	push   $0x23f
f0109deb:	68 b1 62 13 f0       	push   $0xf01362b1
f0109df0:	e8 06 64 ff ff       	call   f01001fb <_panic>

f0109df5 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109df5:	55                   	push   %ebp
f0109df6:	89 e5                	mov    %esp,%ebp
f0109df8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f0109dfb:	83 ec 04             	sub    $0x4,%esp
f0109dfe:	68 78 63 13 f0       	push   $0xf0136378
f0109e03:	68 4b 02 00 00       	push   $0x24b
f0109e08:	68 b1 62 13 f0       	push   $0xf01362b1
f0109e0d:	e8 e9 63 ff ff       	call   f01001fb <_panic>

f0109e12 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109e12:	55                   	push   %ebp
f0109e13:	89 e5                	mov    %esp,%ebp
f0109e15:	53                   	push   %ebx
f0109e16:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109e19:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e1c:	8b 40 0c             	mov    0xc(%eax),%eax
f0109e1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e25:	8b 40 08             	mov    0x8(%eax),%eax
f0109e28:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109e2b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109e32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109e35:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109e38:	01 c2                	add    %eax,%edx
f0109e3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109e3d:	01 d0                	add    %edx,%eax
f0109e3f:	48                   	dec    %eax
f0109e40:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109e43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e4b:	f7 75 dc             	divl   -0x24(%ebp)
f0109e4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109e51:	29 d0                	sub    %edx,%eax
f0109e53:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109e56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e59:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109e5c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109e5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109e67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109e6e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109e75:	8b 45 10             	mov    0x10(%ebp),%eax
f0109e78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109e7e:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109e85:	0f 85 c8 05 00 00    	jne    f010a453 <program_segment_alloc_map_copy_workingset+0x641>
f0109e8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8e:	05 5c 05 00 00       	add    $0x55c,%eax
f0109e93:	83 ec 08             	sub    $0x8,%esp
f0109e96:	68 ac 63 13 f0       	push   $0xf01363ac
f0109e9b:	50                   	push   %eax
f0109e9c:	e8 eb 6f 02 00       	call   f0130e8c <strcmp>
f0109ea1:	83 c4 10             	add    $0x10,%esp
f0109ea4:	85 c0                	test   %eax,%eax
f0109ea6:	0f 84 a7 05 00 00    	je     f010a453 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109eac:	8b 45 14             	mov    0x14(%ebp),%eax
f0109eaf:	83 f8 06             	cmp    $0x6,%eax
f0109eb2:	76 05                	jbe    f0109eb9 <program_segment_alloc_map_copy_workingset+0xa7>
f0109eb4:	b8 06 00 00 00       	mov    $0x6,%eax
f0109eb9:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109ebc:	e9 92 05 00 00       	jmp    f010a453 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109ec1:	83 ec 0c             	sub    $0xc,%esp
f0109ec4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109ec7:	50                   	push   %eax
f0109ec8:	e8 4e c9 ff ff       	call   f010681b <allocate_frame>
f0109ecd:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109ed0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109ed3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ed9:	6a 06                	push   $0x6
f0109edb:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ede:	52                   	push   %edx
f0109edf:	50                   	push   %eax
f0109ee0:	e8 41 cf ff ff       	call   f0106e26 <loadtime_map_frame>
f0109ee5:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109ee8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eeb:	8b 48 78             	mov    0x78(%eax),%ecx
f0109eee:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ef7:	89 d0                	mov    %edx,%eax
f0109ef9:	01 c0                	add    %eax,%eax
f0109efb:	01 d0                	add    %edx,%eax
f0109efd:	c1 e0 03             	shl    $0x3,%eax
f0109f00:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f06:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109f08:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f0b:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f11:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f17:	89 d0                	mov    %edx,%eax
f0109f19:	01 c0                	add    %eax,%eax
f0109f1b:	01 d0                	add    %edx,%eax
f0109f1d:	c1 e0 03             	shl    $0x3,%eax
f0109f20:	01 c8                	add    %ecx,%eax
f0109f22:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f29:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f2f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f35:	89 d0                	mov    %edx,%eax
f0109f37:	01 c0                	add    %eax,%eax
f0109f39:	01 d0                	add    %edx,%eax
f0109f3b:	c1 e0 03             	shl    $0x3,%eax
f0109f3e:	01 c8                	add    %ecx,%eax
f0109f40:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109f47:	83 ec 0c             	sub    $0xc,%esp
f0109f4a:	6a 02                	push   $0x2
f0109f4c:	e8 a6 3c 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f0109f51:	83 c4 10             	add    $0x10,%esp
f0109f54:	85 c0                	test   %eax,%eax
f0109f56:	0f 84 c8 03 00 00    	je     f010a324 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109f5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f62:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f65:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f6b:	89 d0                	mov    %edx,%eax
f0109f6d:	01 c0                	add    %eax,%eax
f0109f6f:	01 d0                	add    %edx,%eax
f0109f71:	c1 e0 03             	shl    $0x3,%eax
f0109f74:	01 c8                	add    %ecx,%eax
f0109f76:	85 c0                	test   %eax,%eax
f0109f78:	75 17                	jne    f0109f91 <program_segment_alloc_map_copy_workingset+0x17f>
f0109f7a:	83 ec 04             	sub    $0x4,%esp
f0109f7d:	68 ce 62 13 f0       	push   $0xf01362ce
f0109f82:	68 7d 02 00 00       	push   $0x27d
f0109f87:	68 b1 62 13 f0       	push   $0xf01362b1
f0109f8c:	e8 6a 62 ff ff       	call   f01001fb <_panic>
f0109f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f94:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f97:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f9a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fa0:	89 d0                	mov    %edx,%eax
f0109fa2:	01 c0                	add    %eax,%eax
f0109fa4:	01 d0                	add    %edx,%eax
f0109fa6:	c1 e0 03             	shl    $0x3,%eax
f0109fa9:	01 c8                	add    %ecx,%eax
f0109fab:	8b 40 10             	mov    0x10(%eax),%eax
f0109fae:	85 c0                	test   %eax,%eax
f0109fb0:	74 3f                	je     f0109ff1 <program_segment_alloc_map_copy_workingset+0x1df>
f0109fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb5:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fbb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fc1:	89 d0                	mov    %edx,%eax
f0109fc3:	01 c0                	add    %eax,%eax
f0109fc5:	01 d0                	add    %edx,%eax
f0109fc7:	c1 e0 03             	shl    $0x3,%eax
f0109fca:	01 c8                	add    %ecx,%eax
f0109fcc:	8b 50 10             	mov    0x10(%eax),%edx
f0109fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd2:	8b 58 78             	mov    0x78(%eax),%ebx
f0109fd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd8:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109fde:	89 c8                	mov    %ecx,%eax
f0109fe0:	01 c0                	add    %eax,%eax
f0109fe2:	01 c8                	add    %ecx,%eax
f0109fe4:	c1 e0 03             	shl    $0x3,%eax
f0109fe7:	01 d8                	add    %ebx,%eax
f0109fe9:	8b 40 14             	mov    0x14(%eax),%eax
f0109fec:	89 42 14             	mov    %eax,0x14(%edx)
f0109fef:	eb 26                	jmp    f010a017 <program_segment_alloc_map_copy_workingset+0x205>
f0109ff1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ffa:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a000:	89 d0                	mov    %edx,%eax
f010a002:	01 c0                	add    %eax,%eax
f010a004:	01 d0                	add    %edx,%eax
f010a006:	c1 e0 03             	shl    $0x3,%eax
f010a009:	01 c8                	add    %ecx,%eax
f010a00b:	8b 50 14             	mov    0x14(%eax),%edx
f010a00e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a011:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a026:	89 d0                	mov    %edx,%eax
f010a028:	01 c0                	add    %eax,%eax
f010a02a:	01 d0                	add    %edx,%eax
f010a02c:	c1 e0 03             	shl    $0x3,%eax
f010a02f:	01 c8                	add    %ecx,%eax
f010a031:	8b 40 14             	mov    0x14(%eax),%eax
f010a034:	85 c0                	test   %eax,%eax
f010a036:	74 3f                	je     f010a077 <program_segment_alloc_map_copy_workingset+0x265>
f010a038:	8b 45 08             	mov    0x8(%ebp),%eax
f010a03b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a03e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a041:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a047:	89 d0                	mov    %edx,%eax
f010a049:	01 c0                	add    %eax,%eax
f010a04b:	01 d0                	add    %edx,%eax
f010a04d:	c1 e0 03             	shl    $0x3,%eax
f010a050:	01 c8                	add    %ecx,%eax
f010a052:	8b 50 14             	mov    0x14(%eax),%edx
f010a055:	8b 45 08             	mov    0x8(%ebp),%eax
f010a058:	8b 58 78             	mov    0x78(%eax),%ebx
f010a05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a064:	89 c8                	mov    %ecx,%eax
f010a066:	01 c0                	add    %eax,%eax
f010a068:	01 c8                	add    %ecx,%eax
f010a06a:	c1 e0 03             	shl    $0x3,%eax
f010a06d:	01 d8                	add    %ebx,%eax
f010a06f:	8b 40 10             	mov    0x10(%eax),%eax
f010a072:	89 42 10             	mov    %eax,0x10(%edx)
f010a075:	eb 26                	jmp    f010a09d <program_segment_alloc_map_copy_workingset+0x28b>
f010a077:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a07d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a080:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a086:	89 d0                	mov    %edx,%eax
f010a088:	01 c0                	add    %eax,%eax
f010a08a:	01 d0                	add    %edx,%eax
f010a08c:	c1 e0 03             	shl    $0x3,%eax
f010a08f:	01 c8                	add    %ecx,%eax
f010a091:	8b 50 10             	mov    0x10(%eax),%edx
f010a094:	8b 45 08             	mov    0x8(%ebp),%eax
f010a097:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a09d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0ac:	89 d0                	mov    %edx,%eax
f010a0ae:	01 c0                	add    %eax,%eax
f010a0b0:	01 d0                	add    %edx,%eax
f010a0b2:	c1 e0 03             	shl    $0x3,%eax
f010a0b5:	01 c8                	add    %ecx,%eax
f010a0b7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0cd:	89 d0                	mov    %edx,%eax
f010a0cf:	01 c0                	add    %eax,%eax
f010a0d1:	01 d0                	add    %edx,%eax
f010a0d3:	c1 e0 03             	shl    $0x3,%eax
f010a0d6:	01 c8                	add    %ecx,%eax
f010a0d8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a0e8:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a0eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0ee:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a0f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f7:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a0fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a100:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a106:	48                   	dec    %eax
f010a107:	39 c2                	cmp    %eax,%edx
f010a109:	0f 83 0d 01 00 00    	jae    f010a21c <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a10f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a112:	8b 48 78             	mov    0x78(%eax),%ecx
f010a115:	8b 45 08             	mov    0x8(%ebp),%eax
f010a118:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a11e:	89 d0                	mov    %edx,%eax
f010a120:	01 c0                	add    %eax,%eax
f010a122:	01 d0                	add    %edx,%eax
f010a124:	c1 e0 03             	shl    $0x3,%eax
f010a127:	01 c8                	add    %ecx,%eax
f010a129:	85 c0                	test   %eax,%eax
f010a12b:	75 17                	jne    f010a144 <program_segment_alloc_map_copy_workingset+0x332>
f010a12d:	83 ec 04             	sub    $0x4,%esp
f010a130:	68 ec 62 13 f0       	push   $0xf01362ec
f010a135:	68 81 02 00 00       	push   $0x281
f010a13a:	68 b1 62 13 f0       	push   $0xf01362b1
f010a13f:	e8 b7 60 ff ff       	call   f01001fb <_panic>
f010a144:	8b 45 08             	mov    0x8(%ebp),%eax
f010a147:	8b 48 78             	mov    0x78(%eax),%ecx
f010a14a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a153:	89 d0                	mov    %edx,%eax
f010a155:	01 c0                	add    %eax,%eax
f010a157:	01 d0                	add    %edx,%eax
f010a159:	c1 e0 03             	shl    $0x3,%eax
f010a15c:	01 c8                	add    %ecx,%eax
f010a15e:	8b 55 08             	mov    0x8(%ebp),%edx
f010a161:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a167:	89 50 10             	mov    %edx,0x10(%eax)
f010a16a:	8b 40 10             	mov    0x10(%eax),%eax
f010a16d:	85 c0                	test   %eax,%eax
f010a16f:	74 28                	je     f010a199 <program_segment_alloc_map_copy_workingset+0x387>
f010a171:	8b 45 08             	mov    0x8(%ebp),%eax
f010a174:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a17a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a180:	8b 45 08             	mov    0x8(%ebp),%eax
f010a183:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a189:	89 c8                	mov    %ecx,%eax
f010a18b:	01 c0                	add    %eax,%eax
f010a18d:	01 c8                	add    %ecx,%eax
f010a18f:	c1 e0 03             	shl    $0x3,%eax
f010a192:	01 d8                	add    %ebx,%eax
f010a194:	89 42 14             	mov    %eax,0x14(%edx)
f010a197:	eb 24                	jmp    f010a1bd <program_segment_alloc_map_copy_workingset+0x3ab>
f010a199:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a19f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1a8:	89 d0                	mov    %edx,%eax
f010a1aa:	01 c0                	add    %eax,%eax
f010a1ac:	01 d0                	add    %edx,%eax
f010a1ae:	c1 e0 03             	shl    $0x3,%eax
f010a1b1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a1b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b7:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a1bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1cc:	89 d0                	mov    %edx,%eax
f010a1ce:	01 c0                	add    %eax,%eax
f010a1d0:	01 d0                	add    %edx,%eax
f010a1d2:	c1 e0 03             	shl    $0x3,%eax
f010a1d5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a1d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1db:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a1e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1f0:	89 d0                	mov    %edx,%eax
f010a1f2:	01 c0                	add    %eax,%eax
f010a1f4:	01 d0                	add    %edx,%eax
f010a1f6:	c1 e0 03             	shl    $0x3,%eax
f010a1f9:	01 c8                	add    %ecx,%eax
f010a1fb:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a202:	8b 45 08             	mov    0x8(%ebp),%eax
f010a205:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a20b:	8d 50 01             	lea    0x1(%eax),%edx
f010a20e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a211:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a217:	e9 08 01 00 00       	jmp    f010a324 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a21c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a21f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a222:	8b 45 08             	mov    0x8(%ebp),%eax
f010a225:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a22b:	89 d0                	mov    %edx,%eax
f010a22d:	01 c0                	add    %eax,%eax
f010a22f:	01 d0                	add    %edx,%eax
f010a231:	c1 e0 03             	shl    $0x3,%eax
f010a234:	01 c8                	add    %ecx,%eax
f010a236:	85 c0                	test   %eax,%eax
f010a238:	75 17                	jne    f010a251 <program_segment_alloc_map_copy_workingset+0x43f>
f010a23a:	83 ec 04             	sub    $0x4,%esp
f010a23d:	68 ec 62 13 f0       	push   $0xf01362ec
f010a242:	68 86 02 00 00       	push   $0x286
f010a247:	68 b1 62 13 f0       	push   $0xf01362b1
f010a24c:	e8 aa 5f ff ff       	call   f01001fb <_panic>
f010a251:	8b 45 08             	mov    0x8(%ebp),%eax
f010a254:	8b 48 78             	mov    0x78(%eax),%ecx
f010a257:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a260:	89 d0                	mov    %edx,%eax
f010a262:	01 c0                	add    %eax,%eax
f010a264:	01 d0                	add    %edx,%eax
f010a266:	c1 e0 03             	shl    $0x3,%eax
f010a269:	01 c8                	add    %ecx,%eax
f010a26b:	8b 55 08             	mov    0x8(%ebp),%edx
f010a26e:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a274:	89 50 10             	mov    %edx,0x10(%eax)
f010a277:	8b 40 10             	mov    0x10(%eax),%eax
f010a27a:	85 c0                	test   %eax,%eax
f010a27c:	74 28                	je     f010a2a6 <program_segment_alloc_map_copy_workingset+0x494>
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a287:	8b 45 08             	mov    0x8(%ebp),%eax
f010a28a:	8b 58 78             	mov    0x78(%eax),%ebx
f010a28d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a290:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a296:	89 c8                	mov    %ecx,%eax
f010a298:	01 c0                	add    %eax,%eax
f010a29a:	01 c8                	add    %ecx,%eax
f010a29c:	c1 e0 03             	shl    $0x3,%eax
f010a29f:	01 d8                	add    %ebx,%eax
f010a2a1:	89 42 14             	mov    %eax,0x14(%edx)
f010a2a4:	eb 24                	jmp    f010a2ca <program_segment_alloc_map_copy_workingset+0x4b8>
f010a2a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2af:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2b5:	89 d0                	mov    %edx,%eax
f010a2b7:	01 c0                	add    %eax,%eax
f010a2b9:	01 d0                	add    %edx,%eax
f010a2bb:	c1 e0 03             	shl    $0x3,%eax
f010a2be:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a2c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c4:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2d9:	89 d0                	mov    %edx,%eax
f010a2db:	01 c0                	add    %eax,%eax
f010a2dd:	01 d0                	add    %edx,%eax
f010a2df:	c1 e0 03             	shl    $0x3,%eax
f010a2e2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a2e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e8:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2fd:	89 d0                	mov    %edx,%eax
f010a2ff:	01 c0                	add    %eax,%eax
f010a301:	01 d0                	add    %edx,%eax
f010a303:	c1 e0 03             	shl    $0x3,%eax
f010a306:	01 c8                	add    %ecx,%eax
f010a308:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a30f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a312:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a318:	8d 50 01             	lea    0x1(%eax),%edx
f010a31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31e:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a324:	8b 45 08             	mov    0x8(%ebp),%eax
f010a327:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a32d:	8d 50 01             	lea    0x1(%eax),%edx
f010a330:	8b 45 08             	mov    0x8(%ebp),%eax
f010a333:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a342:	8b 55 08             	mov    0x8(%ebp),%edx
f010a345:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a348:	ba 00 00 00 00       	mov    $0x0,%edx
f010a34d:	f7 f1                	div    %ecx
f010a34f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a352:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a35b:	c1 e8 16             	shr    $0x16,%eax
f010a35e:	89 c2                	mov    %eax,%edx
f010a360:	8b 45 18             	mov    0x18(%ebp),%eax
f010a363:	8b 00                	mov    (%eax),%eax
f010a365:	39 c2                	cmp    %eax,%edx
f010a367:	0f 84 cf 00 00 00    	je     f010a43c <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a36d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a370:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a376:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a379:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a37c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a37f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a384:	89 c1                	mov    %eax,%ecx
f010a386:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a389:	89 d0                	mov    %edx,%eax
f010a38b:	01 c0                	add    %eax,%eax
f010a38d:	01 d0                	add    %edx,%eax
f010a38f:	c1 e0 03             	shl    $0x3,%eax
f010a392:	01 d8                	add    %ebx,%eax
f010a394:	83 c0 7c             	add    $0x7c,%eax
f010a397:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a399:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39c:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a3a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3a5:	89 d0                	mov    %edx,%eax
f010a3a7:	01 c0                	add    %eax,%eax
f010a3a9:	01 d0                	add    %edx,%eax
f010a3ab:	c1 e0 03             	shl    $0x3,%eax
f010a3ae:	01 c8                	add    %ecx,%eax
f010a3b0:	83 e8 80             	sub    $0xffffff80,%eax
f010a3b3:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a3b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b9:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a3bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3c2:	89 d0                	mov    %edx,%eax
f010a3c4:	01 c0                	add    %eax,%eax
f010a3c6:	01 d0                	add    %edx,%eax
f010a3c8:	c1 e0 03             	shl    $0x3,%eax
f010a3cb:	01 c8                	add    %ecx,%eax
f010a3cd:	05 84 00 00 00       	add    $0x84,%eax
f010a3d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a3d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3db:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a3e1:	8d 50 01             	lea    0x1(%eax),%edx
f010a3e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e7:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a3ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a3f6:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f010a400:	f7 f1                	div    %ecx
f010a402:	8b 45 08             	mov    0x8(%ebp),%eax
f010a405:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a40b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40e:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a414:	85 c0                	test   %eax,%eax
f010a416:	75 17                	jne    f010a42f <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a418:	83 ec 04             	sub    $0x4,%esp
f010a41b:	68 b0 63 13 f0       	push   $0xf01363b0
f010a420:	68 96 02 00 00       	push   $0x296
f010a425:	68 b1 62 13 f0       	push   $0xf01362b1
f010a42a:	e8 cc 5d ff ff       	call   f01001fb <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a42f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a432:	c1 e8 16             	shr    $0x16,%eax
f010a435:	89 c2                	mov    %eax,%edx
f010a437:	8b 45 18             	mov    0x18(%ebp),%eax
f010a43a:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a43c:	8b 45 10             	mov    0x10(%ebp),%eax
f010a43f:	8b 00                	mov    (%eax),%eax
f010a441:	8d 50 01             	lea    0x1(%eax),%edx
f010a444:	8b 45 10             	mov    0x10(%ebp),%eax
f010a447:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a449:	ff 45 f0             	incl   -0x10(%ebp)
f010a44c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a453:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a456:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a459:	73 0c                	jae    f010a467 <program_segment_alloc_map_copy_workingset+0x655>
f010a45b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a45e:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a461:	0f 82 5a fa ff ff    	jb     f0109ec1 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a467:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a46a:	8b 00                	mov    (%eax),%eax
f010a46c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a46f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a472:	8b 40 0c             	mov    0xc(%eax),%eax
f010a475:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a478:	eb 10                	jmp    f010a48a <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a47a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a47d:	8a 10                	mov    (%eax),%dl
f010a47f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a482:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a484:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a487:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a48a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a48d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a490:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a493:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a498:	89 c2                	mov    %eax,%edx
f010a49a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a49d:	8b 00                	mov    (%eax),%eax
f010a49f:	c1 e0 0c             	shl    $0xc,%eax
f010a4a2:	01 c2                	add    %eax,%edx
f010a4a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4a7:	39 c2                	cmp    %eax,%edx
f010a4a9:	76 1d                	jbe    f010a4c8 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a4ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4ae:	8b 50 04             	mov    0x4(%eax),%edx
f010a4b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4b4:	01 c2                	add    %eax,%edx
f010a4b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a4b9:	39 c2                	cmp    %eax,%edx
f010a4bb:	77 bd                	ja     f010a47a <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4bd:	eb 09                	jmp    f010a4c8 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a4bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4c2:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a4c5:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a4ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a4d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a4d6:	89 c2                	mov    %eax,%edx
f010a4d8:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4db:	8b 00                	mov    (%eax),%eax
f010a4dd:	c1 e0 0c             	shl    $0xc,%eax
f010a4e0:	01 c2                	add    %eax,%edx
f010a4e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4e5:	39 c2                	cmp    %eax,%edx
f010a4e7:	77 d6                	ja     f010a4bf <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a4e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a4ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a4f1:	c9                   	leave  
f010a4f2:	c3                   	ret    

f010a4f3 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a4f3:	55                   	push   %ebp
f010a4f4:	89 e5                	mov    %esp,%ebp
f010a4f6:	53                   	push   %ebx
f010a4f7:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a4fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a500:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a503:	8b 45 08             	mov    0x8(%ebp),%eax
f010a506:	8b 55 10             	mov    0x10(%ebp),%edx
f010a509:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a50c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a513:	eb 17                	jmp    f010a52c <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a515:	8b 45 08             	mov    0x8(%ebp),%eax
f010a518:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a51b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a51e:	c1 e2 02             	shl    $0x2,%edx
f010a521:	01 d0                	add    %edx,%eax
f010a523:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a529:	ff 45 f4             	incl   -0xc(%ebp)
f010a52c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a52f:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a534:	76 df                	jbe    f010a515 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a536:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a53d:	eb 22                	jmp    f010a561 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a53f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a542:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a545:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a548:	c1 e2 02             	shl    $0x2,%edx
f010a54b:	01 c2                	add    %eax,%edx
f010a54d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f010a552:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a555:	c1 e1 02             	shl    $0x2,%ecx
f010a558:	01 c8                	add    %ecx,%eax
f010a55a:	8b 00                	mov    (%eax),%eax
f010a55c:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a55e:	ff 45 f4             	incl   -0xc(%ebp)
f010a561:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a568:	7e d5                	jle    f010a53f <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a56a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a56d:	8b 40 74             	mov    0x74(%eax),%eax
f010a570:	83 ec 08             	sub    $0x8,%esp
f010a573:	50                   	push   %eax
f010a574:	ff 75 08             	pushl  0x8(%ebp)
f010a577:	e8 5c f8 ff ff       	call   f0109dd8 <create_user_page_WS>
f010a57c:	83 c4 10             	add    $0x10,%esp
f010a57f:	89 c2                	mov    %eax,%edx
f010a581:	8b 45 08             	mov    0x8(%ebp),%eax
f010a584:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a587:	83 ec 0c             	sub    $0xc,%esp
f010a58a:	ff 75 08             	pushl  0x8(%ebp)
f010a58d:	e8 f3 04 00 00       	call   f010aa85 <share_pws_at_user_space>
f010a592:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a595:	83 ec 0c             	sub    $0xc,%esp
f010a598:	6a 02                	push   $0x2
f010a59a:	e8 58 36 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f010a59f:	83 c4 10             	add    $0x10,%esp
f010a5a2:	85 c0                	test   %eax,%eax
f010a5a4:	0f 84 04 01 00 00    	je     f010a6ae <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a5aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a5b1:	e9 e7 00 00 00       	jmp    f010a69d <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5bf:	89 d0                	mov    %edx,%eax
f010a5c1:	01 c0                	add    %eax,%eax
f010a5c3:	01 d0                	add    %edx,%eax
f010a5c5:	c1 e0 03             	shl    $0x3,%eax
f010a5c8:	01 c8                	add    %ecx,%eax
f010a5ca:	85 c0                	test   %eax,%eax
f010a5cc:	75 17                	jne    f010a5e5 <initialize_environment+0xf2>
f010a5ce:	83 ec 04             	sub    $0x4,%esp
f010a5d1:	68 ec 62 13 f0       	push   $0xf01362ec
f010a5d6:	68 f4 02 00 00       	push   $0x2f4
f010a5db:	68 b1 62 13 f0       	push   $0xf01362b1
f010a5e0:	e8 16 5c ff ff       	call   f01001fb <_panic>
f010a5e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e8:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5ee:	89 d0                	mov    %edx,%eax
f010a5f0:	01 c0                	add    %eax,%eax
f010a5f2:	01 d0                	add    %edx,%eax
f010a5f4:	c1 e0 03             	shl    $0x3,%eax
f010a5f7:	01 c8                	add    %ecx,%eax
f010a5f9:	8b 55 08             	mov    0x8(%ebp),%edx
f010a5fc:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a602:	89 50 10             	mov    %edx,0x10(%eax)
f010a605:	8b 40 10             	mov    0x10(%eax),%eax
f010a608:	85 c0                	test   %eax,%eax
f010a60a:	74 22                	je     f010a62e <initialize_environment+0x13b>
f010a60c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60f:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a615:	8b 45 08             	mov    0x8(%ebp),%eax
f010a618:	8b 58 78             	mov    0x78(%eax),%ebx
f010a61b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a61e:	89 c8                	mov    %ecx,%eax
f010a620:	01 c0                	add    %eax,%eax
f010a622:	01 c8                	add    %ecx,%eax
f010a624:	c1 e0 03             	shl    $0x3,%eax
f010a627:	01 d8                	add    %ebx,%eax
f010a629:	89 42 14             	mov    %eax,0x14(%edx)
f010a62c:	eb 1e                	jmp    f010a64c <initialize_environment+0x159>
f010a62e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a631:	8b 48 78             	mov    0x78(%eax),%ecx
f010a634:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a637:	89 d0                	mov    %edx,%eax
f010a639:	01 c0                	add    %eax,%eax
f010a63b:	01 d0                	add    %edx,%eax
f010a63d:	c1 e0 03             	shl    $0x3,%eax
f010a640:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a643:	8b 45 08             	mov    0x8(%ebp),%eax
f010a646:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a64c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a652:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a655:	89 d0                	mov    %edx,%eax
f010a657:	01 c0                	add    %eax,%eax
f010a659:	01 d0                	add    %edx,%eax
f010a65b:	c1 e0 03             	shl    $0x3,%eax
f010a65e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a661:	8b 45 08             	mov    0x8(%ebp),%eax
f010a664:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a66a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a670:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a673:	89 d0                	mov    %edx,%eax
f010a675:	01 c0                	add    %eax,%eax
f010a677:	01 d0                	add    %edx,%eax
f010a679:	c1 e0 03             	shl    $0x3,%eax
f010a67c:	01 c8                	add    %ecx,%eax
f010a67e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a685:	8b 45 08             	mov    0x8(%ebp),%eax
f010a688:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a68e:	8d 50 01             	lea    0x1(%eax),%edx
f010a691:	8b 45 08             	mov    0x8(%ebp),%eax
f010a694:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a69a:	ff 45 f0             	incl   -0x10(%ebp)
f010a69d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a0:	8b 50 74             	mov    0x74(%eax),%edx
f010a6a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a6a6:	39 c2                	cmp    %eax,%edx
f010a6a8:	0f 87 08 ff ff ff    	ja     f010a5b6 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a6ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a6b5:	eb 50                	jmp    f010a707 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ba:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6c0:	89 d0                	mov    %edx,%eax
f010a6c2:	01 c0                	add    %eax,%eax
f010a6c4:	01 d0                	add    %edx,%eax
f010a6c6:	c1 e0 03             	shl    $0x3,%eax
f010a6c9:	01 c8                	add    %ecx,%eax
f010a6cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a6d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6da:	89 d0                	mov    %edx,%eax
f010a6dc:	01 c0                	add    %eax,%eax
f010a6de:	01 d0                	add    %edx,%eax
f010a6e0:	c1 e0 03             	shl    $0x3,%eax
f010a6e3:	01 c8                	add    %ecx,%eax
f010a6e5:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6f2:	89 d0                	mov    %edx,%eax
f010a6f4:	01 c0                	add    %eax,%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	c1 e0 03             	shl    $0x3,%eax
f010a6fb:	01 c8                	add    %ecx,%eax
f010a6fd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a704:	ff 45 f4             	incl   -0xc(%ebp)
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 50 74             	mov    0x74(%eax),%edx
f010a70d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a710:	39 c2                	cmp    %eax,%edx
f010a712:	77 a3                	ja     f010a6b7 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a714:	8b 45 08             	mov    0x8(%ebp),%eax
f010a717:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a71e:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a721:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a728:	eb 50                	jmp    f010a77a <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a72a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a72d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a730:	89 d0                	mov    %edx,%eax
f010a732:	01 c0                	add    %eax,%eax
f010a734:	01 d0                	add    %edx,%eax
f010a736:	c1 e0 03             	shl    $0x3,%eax
f010a739:	01 c8                	add    %ecx,%eax
f010a73b:	83 c0 7c             	add    $0x7c,%eax
f010a73e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a744:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a747:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a74a:	89 d0                	mov    %edx,%eax
f010a74c:	01 c0                	add    %eax,%eax
f010a74e:	01 d0                	add    %edx,%eax
f010a750:	c1 e0 03             	shl    $0x3,%eax
f010a753:	01 c8                	add    %ecx,%eax
f010a755:	83 e8 80             	sub    $0xffffff80,%eax
f010a758:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a75b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a75e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a761:	89 d0                	mov    %edx,%eax
f010a763:	01 c0                	add    %eax,%eax
f010a765:	01 d0                	add    %edx,%eax
f010a767:	c1 e0 03             	shl    $0x3,%eax
f010a76a:	01 c8                	add    %ecx,%eax
f010a76c:	05 84 00 00 00       	add    $0x84,%eax
f010a771:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a777:	ff 45 f4             	incl   -0xc(%ebp)
f010a77a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a77e:	7e aa                	jle    f010a72a <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a780:	8b 45 08             	mov    0x8(%ebp),%eax
f010a783:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a78a:	00 00 00 

	e->pageFaultsCounter=0;
f010a78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a790:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a797:	00 00 00 
	e->tableFaultsCounter=0;
f010a79a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79d:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a7a4:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a7a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7aa:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a7b1:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a7b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b7:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a7be:	00 00 00 

	e->nModifiedPages=0;
f010a7c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c4:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a7cb:	00 00 00 
	e->nNotModifiedPages=0;
f010a7ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d1:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a7d8:	00 00 00 
	e->nClocks = 0;
f010a7db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7de:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a7e5:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a7e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7eb:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a7f2:	00 00 00 
	e->nPageOut = 0;
f010a7f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f8:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a7ff:	00 00 00 
	e->nNewPageAdded = 0;
f010a802:	8b 45 08             	mov    0x8(%ebp),%eax
f010a805:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a80c:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a80f:	83 ec 0c             	sub    $0xc,%esp
f010a812:	ff 75 08             	pushl  0x8(%ebp)
f010a815:	e8 09 00 00 00       	call   f010a823 <complete_environment_initialization>
f010a81a:	83 c4 10             	add    $0x10,%esp
}
f010a81d:	90                   	nop
f010a81e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a821:	c9                   	leave  
f010a822:	c3                   	ret    

f010a823 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a823:	55                   	push   %ebp
f010a824:	89 e5                	mov    %esp,%ebp
f010a826:	53                   	push   %ebx
f010a827:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a82a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a82d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a830:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a836:	8b 45 08             	mov    0x8(%ebp),%eax
f010a839:	8b 40 60             	mov    0x60(%eax),%eax
f010a83c:	83 c8 03             	or     $0x3,%eax
f010a83f:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a841:	8b 45 08             	mov    0x8(%ebp),%eax
f010a844:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a847:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a84d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a850:	8b 40 60             	mov    0x60(%eax),%eax
f010a853:	83 c8 05             	or     $0x5,%eax
f010a856:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a858:	8b 45 08             	mov    0x8(%ebp),%eax
f010a85b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a86c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86f:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a876:	8b 45 08             	mov    0x8(%ebp),%eax
f010a879:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a880:	8b 45 08             	mov    0x8(%ebp),%eax
f010a883:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a886:	83 ec 0c             	sub    $0xc,%esp
f010a889:	68 b1 02 00 00       	push   $0x2b1
f010a88e:	e8 94 52 02 00       	call   f012fb27 <log2_ceil>
f010a893:	83 c4 10             	add    $0x10,%esp
f010a896:	ba 01 00 00 00       	mov    $0x1,%edx
f010a89b:	88 c1                	mov    %al,%cl
f010a89d:	d3 e2                	shl    %cl,%edx
f010a89f:	89 d0                	mov    %edx,%eax
f010a8a1:	01 d8                	add    %ebx,%eax
f010a8a3:	89 c3                	mov    %eax,%ebx
f010a8a5:	83 ec 0c             	sub    $0xc,%esp
f010a8a8:	68 b1 02 00 00       	push   $0x2b1
f010a8ad:	e8 40 52 02 00       	call   f012faf2 <nearest_pow2_ceil>
f010a8b2:	83 c4 10             	add    $0x10,%esp
f010a8b5:	f7 d8                	neg    %eax
f010a8b7:	21 d8                	and    %ebx,%eax
f010a8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8c0:	7f 1e                	jg     f010a8e0 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a8c2:	83 ec 0c             	sub    $0xc,%esp
f010a8c5:	68 b1 02 00 00       	push   $0x2b1
f010a8ca:	e8 58 52 02 00       	call   f012fb27 <log2_ceil>
f010a8cf:	83 c4 10             	add    $0x10,%esp
f010a8d2:	ba 01 00 00 00       	mov    $0x1,%edx
f010a8d7:	88 c1                	mov    %al,%cl
f010a8d9:	d3 e2                	shl    %cl,%edx
f010a8db:	89 d0                	mov    %edx,%eax
f010a8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a8e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e3:	8b 15 10 72 65 f0    	mov    0xf0657210,%edx
f010a8e9:	29 d0                	sub    %edx,%eax
f010a8eb:	c1 f8 04             	sar    $0x4,%eax
f010a8ee:	89 c2                	mov    %eax,%edx
f010a8f0:	89 d0                	mov    %edx,%eax
f010a8f2:	c1 e0 03             	shl    $0x3,%eax
f010a8f5:	01 d0                	add    %edx,%eax
f010a8f7:	01 c0                	add    %eax,%eax
f010a8f9:	01 d0                	add    %edx,%eax
f010a8fb:	c1 e0 03             	shl    $0x3,%eax
f010a8fe:	01 d0                	add    %edx,%eax
f010a900:	89 c1                	mov    %eax,%ecx
f010a902:	c1 e1 08             	shl    $0x8,%ecx
f010a905:	01 c8                	add    %ecx,%eax
f010a907:	01 c0                	add    %eax,%eax
f010a909:	01 d0                	add    %edx,%eax
f010a90b:	01 c0                	add    %eax,%eax
f010a90d:	01 d0                	add    %edx,%eax
f010a90f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a916:	01 d0                	add    %edx,%eax
f010a918:	89 c2                	mov    %eax,%edx
f010a91a:	c1 e2 09             	shl    $0x9,%edx
f010a91d:	29 c2                	sub    %eax,%edx
f010a91f:	89 d0                	mov    %edx,%eax
f010a921:	f7 d8                	neg    %eax
f010a923:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a926:	89 c2                	mov    %eax,%edx
f010a928:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92b:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a92e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a933:	85 c0                	test   %eax,%eax
f010a935:	75 0c                	jne    f010a943 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a937:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a941:	eb 0e                	jmp    f010a951 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a943:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a948:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a94b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94e:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a951:	8b 45 08             	mov    0x8(%ebp),%eax
f010a954:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a95b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a965:	8b 45 08             	mov    0x8(%ebp),%eax
f010a968:	83 ec 04             	sub    $0x4,%esp
f010a96b:	6a 44                	push   $0x44
f010a96d:	6a 00                	push   $0x0
f010a96f:	50                   	push   %eax
f010a970:	e8 f9 65 02 00       	call   f0130f6e <memset>
f010a975:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a978:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97b:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a981:	8b 45 08             	mov    0x8(%ebp),%eax
f010a984:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a98a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a98d:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a993:	8b 45 08             	mov    0x8(%ebp),%eax
f010a996:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a99d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a0:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a9a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a9:	8b 40 38             	mov    0x38(%eax),%eax
f010a9ac:	80 cc 02             	or     $0x2,%ah
f010a9af:	89 c2                	mov    %eax,%edx
f010a9b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9b4:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a9b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a9bb:	75 17                	jne    f010a9d4 <complete_environment_initialization+0x1b1>
f010a9bd:	83 ec 04             	sub    $0x4,%esp
f010a9c0:	68 ce 62 13 f0       	push   $0xf01362ce
f010a9c5:	68 58 03 00 00       	push   $0x358
f010a9ca:	68 b1 62 13 f0       	push   $0xf01362b1
f010a9cf:	e8 27 58 ff ff       	call   f01001fb <_panic>
f010a9d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d7:	8b 40 44             	mov    0x44(%eax),%eax
f010a9da:	85 c0                	test   %eax,%eax
f010a9dc:	74 11                	je     f010a9ef <complete_environment_initialization+0x1cc>
f010a9de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e1:	8b 40 44             	mov    0x44(%eax),%eax
f010a9e4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9e7:	8b 52 48             	mov    0x48(%edx),%edx
f010a9ea:	89 50 48             	mov    %edx,0x48(%eax)
f010a9ed:	eb 0b                	jmp    f010a9fa <complete_environment_initialization+0x1d7>
f010a9ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f2:	8b 40 48             	mov    0x48(%eax),%eax
f010a9f5:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f010a9fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9fd:	8b 40 48             	mov    0x48(%eax),%eax
f010aa00:	85 c0                	test   %eax,%eax
f010aa02:	74 11                	je     f010aa15 <complete_environment_initialization+0x1f2>
f010aa04:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa07:	8b 40 48             	mov    0x48(%eax),%eax
f010aa0a:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa0d:	8b 52 44             	mov    0x44(%edx),%edx
f010aa10:	89 50 44             	mov    %edx,0x44(%eax)
f010aa13:	eb 0b                	jmp    f010aa20 <complete_environment_initialization+0x1fd>
f010aa15:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa18:	8b 40 44             	mov    0x44(%eax),%eax
f010aa1b:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f010aa20:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa23:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aa2a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa2d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aa34:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f010aa39:	48                   	dec    %eax
f010aa3a:	a3 24 72 65 f0       	mov    %eax,0xf0657224
	return ;
f010aa3f:	90                   	nop
}
f010aa40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aa43:	c9                   	leave  
f010aa44:	c3                   	ret    

f010aa45 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010aa45:	55                   	push   %ebp
f010aa46:	89 e5                	mov    %esp,%ebp
f010aa48:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aa4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010aa51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa54:	8b 00                	mov    (%eax),%eax
f010aa56:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aa5b:	74 17                	je     f010aa74 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010aa5d:	83 ec 04             	sub    $0x4,%esp
f010aa60:	68 53 64 13 f0       	push   $0xf0136453
f010aa65:	68 64 03 00 00       	push   $0x364
f010aa6a:	68 b1 62 13 f0       	push   $0xf01362b1
f010aa6f:	e8 87 57 ff ff       	call   f01001fb <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010aa74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa77:	8b 40 18             	mov    0x18(%eax),%eax
f010aa7a:	89 c2                	mov    %eax,%edx
f010aa7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7f:	89 50 30             	mov    %edx,0x30(%eax)
}
f010aa82:	90                   	nop
f010aa83:	c9                   	leave  
f010aa84:	c3                   	ret    

f010aa85 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010aa85:	55                   	push   %ebp
f010aa86:	89 e5                	mov    %esp,%ebp
f010aa88:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010aa8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8e:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010aa95:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010aa98:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9b:	8b 40 78             	mov    0x78(%eax),%eax
f010aa9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010aaa1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa4:	8b 50 74             	mov    0x74(%eax),%edx
f010aaa7:	89 d0                	mov    %edx,%eax
f010aaa9:	01 c0                	add    %eax,%eax
f010aaab:	01 d0                	add    %edx,%eax
f010aaad:	c1 e0 03             	shl    $0x3,%eax
f010aab0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010aab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab6:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aabc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010aabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac2:	8b 40 78             	mov    0x78(%eax),%eax
f010aac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aac8:	eb 71                	jmp    f010ab3b <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010aaca:	83 ec 0c             	sub    $0xc,%esp
f010aacd:	ff 75 f4             	pushl  -0xc(%ebp)
f010aad0:	e8 5c cf ff ff       	call   f0107a31 <kheap_physical_address>
f010aad5:	83 c4 10             	add    $0x10,%esp
f010aad8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010aadb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aade:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aae1:	83 ec 04             	sub    $0x4,%esp
f010aae4:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aae7:	52                   	push   %edx
f010aae8:	ff 75 f0             	pushl  -0x10(%ebp)
f010aaeb:	50                   	push   %eax
f010aaec:	e8 e9 be ff ff       	call   f01069da <get_page_table>
f010aaf1:	83 c4 10             	add    $0x10,%esp
f010aaf4:	83 f8 01             	cmp    $0x1,%eax
f010aaf7:	75 18                	jne    f010ab11 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010aaf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aaff:	83 ec 08             	sub    $0x8,%esp
f010ab02:	ff 75 f0             	pushl  -0x10(%ebp)
f010ab05:	50                   	push   %eax
f010ab06:	e8 25 c0 ff ff       	call   f0106b30 <create_page_table>
f010ab0b:	83 c4 10             	add    $0x10,%esp
f010ab0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010ab11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab17:	c1 ea 0c             	shr    $0xc,%edx
f010ab1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010ab20:	c1 e2 02             	shl    $0x2,%edx
f010ab23:	01 d0                	add    %edx,%eax
f010ab25:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ab28:	83 ca 05             	or     $0x5,%edx
f010ab2b:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ab2d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ab34:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010ab3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3e:	8b 40 78             	mov    0x78(%eax),%eax
f010ab41:	89 c2                	mov    %eax,%edx
f010ab43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab46:	01 d0                	add    %edx,%eax
f010ab48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ab4b:	0f 87 79 ff ff ff    	ja     f010aaca <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ab51:	90                   	nop
f010ab52:	c9                   	leave  
f010ab53:	c3                   	ret    

f010ab54 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ab54:	55                   	push   %ebp
f010ab55:	89 e5                	mov    %esp,%ebp
f010ab57:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ab5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5d:	8b 50 74             	mov    0x74(%eax),%edx
f010ab60:	89 d0                	mov    %edx,%eax
f010ab62:	01 c0                	add    %eax,%eax
f010ab64:	01 d0                	add    %edx,%eax
f010ab66:	c1 e0 03             	shl    $0x3,%eax
f010ab69:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ab6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6f:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab75:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ab78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7b:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab81:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ab84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab87:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ab8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ab8f:	eb 46                	jmp    f010abd7 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ab91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab94:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab97:	83 ec 04             	sub    $0x4,%esp
f010ab9a:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ab9d:	52                   	push   %edx
f010ab9e:	ff 75 f4             	pushl  -0xc(%ebp)
f010aba1:	50                   	push   %eax
f010aba2:	e8 33 be ff ff       	call   f01069da <get_page_table>
f010aba7:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010abaa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010abad:	83 ec 0c             	sub    $0xc,%esp
f010abb0:	50                   	push   %eax
f010abb1:	e8 28 cd ff ff       	call   f01078de <kfree>
f010abb6:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010abb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abc2:	c1 ea 16             	shr    $0x16,%edx
f010abc5:	c1 e2 02             	shl    $0x2,%edx
f010abc8:	01 d0                	add    %edx,%eax
f010abca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010abd0:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010abd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abda:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010abe0:	89 c2                	mov    %eax,%edx
f010abe2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abe5:	01 d0                	add    %edx,%eax
f010abe7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010abea:	77 a5                	ja     f010ab91 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010abec:	0f 20 d8             	mov    %cr3,%eax
f010abef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010abf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abf5:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010abf8:	90                   	nop
f010abf9:	c9                   	leave  
f010abfa:	c3                   	ret    

f010abfb <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010abfb:	55                   	push   %ebp
f010abfc:	89 e5                	mov    %esp,%ebp
f010abfe:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ac01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac04:	8b 40 10             	mov    0x10(%eax),%eax
f010ac07:	8d 48 01             	lea    0x1(%eax),%ecx
f010ac0a:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac0d:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ac10:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac13:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac16:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac1c:	8b 00                	mov    (%eax),%eax
f010ac1e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ac23:	74 17                	je     f010ac3c <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ac25:	83 ec 04             	sub    $0x4,%esp
f010ac28:	68 53 64 13 f0       	push   $0xf0136453
f010ac2d:	68 ae 03 00 00       	push   $0x3ae
f010ac32:	68 b1 62 13 f0       	push   $0xf01362b1
f010ac37:	e8 bf 55 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ac3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac3f:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ac42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac45:	01 d0                	add    %edx,%eax
f010ac47:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ac4a:	eb 0f                	jmp    f010ac5b <PROGRAM_SEGMENT_NEXT+0x60>
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	8b 40 10             	mov    0x10(%eax),%eax
f010ac52:	8d 50 01             	lea    0x1(%eax),%edx
f010ac55:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac58:	89 50 10             	mov    %edx,0x10(%eax)
f010ac5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5e:	8b 40 10             	mov    0x10(%eax),%eax
f010ac61:	c1 e0 05             	shl    $0x5,%eax
f010ac64:	89 c2                	mov    %eax,%edx
f010ac66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac69:	01 d0                	add    %edx,%eax
f010ac6b:	8b 00                	mov    (%eax),%eax
f010ac6d:	83 f8 01             	cmp    $0x1,%eax
f010ac70:	74 13                	je     f010ac85 <PROGRAM_SEGMENT_NEXT+0x8a>
f010ac72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac75:	8b 50 10             	mov    0x10(%eax),%edx
f010ac78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac7b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac7e:	0f b7 c0             	movzwl %ax,%eax
f010ac81:	39 c2                	cmp    %eax,%edx
f010ac83:	72 c7                	jb     f010ac4c <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ac85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac88:	8b 40 10             	mov    0x10(%eax),%eax
f010ac8b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac91:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac94:	0f b7 c0             	movzwl %ax,%eax
f010ac97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac9a:	7e 63                	jle    f010acff <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac9f:	c1 e0 05             	shl    $0x5,%eax
f010aca2:	89 c2                	mov    %eax,%edx
f010aca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aca7:	01 d0                	add    %edx,%eax
f010aca9:	8b 50 04             	mov    0x4(%eax),%edx
f010acac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acaf:	01 c2                	add    %eax,%edx
f010acb1:	8b 45 08             	mov    0x8(%ebp),%eax
f010acb4:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010acb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acb9:	c1 e0 05             	shl    $0x5,%eax
f010acbc:	89 c2                	mov    %eax,%edx
f010acbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010acc1:	01 d0                	add    %edx,%eax
f010acc3:	8b 50 14             	mov    0x14(%eax),%edx
f010acc6:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc9:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010accc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010accf:	c1 e0 05             	shl    $0x5,%eax
f010acd2:	89 c2                	mov    %eax,%edx
f010acd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010acd7:	01 d0                	add    %edx,%eax
f010acd9:	8b 50 10             	mov    0x10(%eax),%edx
f010acdc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acdf:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ace2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ace5:	c1 e0 05             	shl    $0x5,%eax
f010ace8:	89 c2                	mov    %eax,%edx
f010acea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aced:	01 d0                	add    %edx,%eax
f010acef:	8b 40 08             	mov    0x8(%eax),%eax
f010acf2:	89 c2                	mov    %eax,%edx
f010acf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf7:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010acfa:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfd:	eb 05                	jmp    f010ad04 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010acff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ad04:	c9                   	leave  
f010ad05:	c3                   	ret    

f010ad06 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ad06:	55                   	push   %ebp
f010ad07:	89 e5                	mov    %esp,%ebp
f010ad09:	57                   	push   %edi
f010ad0a:	56                   	push   %esi
f010ad0b:	53                   	push   %ebx
f010ad0c:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ad0f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ad16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ad1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad1f:	8b 00                	mov    (%eax),%eax
f010ad21:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ad26:	74 17                	je     f010ad3f <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ad28:	83 ec 04             	sub    $0x4,%esp
f010ad2b:	68 53 64 13 f0       	push   $0xf0136453
f010ad30:	68 ca 03 00 00       	push   $0x3ca
f010ad35:	68 b1 62 13 f0       	push   $0xf01362b1
f010ad3a:	e8 bc 54 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ad3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad42:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ad45:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad48:	01 d0                	add    %edx,%eax
f010ad4a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ad4d:	eb 07                	jmp    f010ad56 <PROGRAM_SEGMENT_FIRST+0x50>
f010ad4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad52:	40                   	inc    %eax
f010ad53:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ad56:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad59:	c1 e0 05             	shl    $0x5,%eax
f010ad5c:	89 c2                	mov    %eax,%edx
f010ad5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad61:	01 d0                	add    %edx,%eax
f010ad63:	8b 00                	mov    (%eax),%eax
f010ad65:	83 f8 01             	cmp    $0x1,%eax
f010ad68:	74 10                	je     f010ad7a <PROGRAM_SEGMENT_FIRST+0x74>
f010ad6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ad6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad70:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad73:	0f b7 c0             	movzwl %ax,%eax
f010ad76:	39 c2                	cmp    %eax,%edx
f010ad78:	72 d5                	jb     f010ad4f <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ad7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad7d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad83:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad86:	0f b7 c0             	movzwl %ax,%eax
f010ad89:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ad8c:	7e 68                	jle    f010adf6 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad91:	c1 e0 05             	shl    $0x5,%eax
f010ad94:	89 c2                	mov    %eax,%edx
f010ad96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad99:	01 d0                	add    %edx,%eax
f010ad9b:	8b 50 04             	mov    0x4(%eax),%edx
f010ad9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ada1:	01 d0                	add    %edx,%eax
f010ada3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ada6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ada9:	c1 e0 05             	shl    $0x5,%eax
f010adac:	89 c2                	mov    %eax,%edx
f010adae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adb1:	01 d0                	add    %edx,%eax
f010adb3:	8b 40 14             	mov    0x14(%eax),%eax
f010adb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010adb9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010adbc:	c1 e0 05             	shl    $0x5,%eax
f010adbf:	89 c2                	mov    %eax,%edx
f010adc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010adc4:	01 d0                	add    %edx,%eax
f010adc6:	8b 40 10             	mov    0x10(%eax),%eax
f010adc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010adcc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010adcf:	c1 e0 05             	shl    $0x5,%eax
f010add2:	89 c2                	mov    %eax,%edx
f010add4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010add7:	01 d0                	add    %edx,%eax
f010add9:	8b 40 08             	mov    0x8(%eax),%eax
f010addc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010addf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade2:	89 c3                	mov    %eax,%ebx
f010ade4:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ade7:	ba 05 00 00 00       	mov    $0x5,%edx
f010adec:	89 df                	mov    %ebx,%edi
f010adee:	89 c6                	mov    %eax,%esi
f010adf0:	89 d1                	mov    %edx,%ecx
f010adf2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010adf4:	eb 1c                	jmp    f010ae12 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010adf6:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010adfd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae00:	89 c3                	mov    %eax,%ebx
f010ae02:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ae05:	ba 05 00 00 00       	mov    $0x5,%edx
f010ae0a:	89 df                	mov    %ebx,%edi
f010ae0c:	89 c6                	mov    %eax,%esi
f010ae0e:	89 d1                	mov    %edx,%ecx
f010ae10:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ae12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae15:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ae18:	5b                   	pop    %ebx
f010ae19:	5e                   	pop    %esi
f010ae1a:	5f                   	pop    %edi
f010ae1b:	5d                   	pop    %ebp
f010ae1c:	c2 04 00             	ret    $0x4

f010ae1f <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010ae1f:	55                   	push   %ebp
f010ae20:	89 e5                	mov    %esp,%ebp
f010ae22:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ae25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae2c:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f010ae31:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae34:	e9 c3 00 00 00       	jmp    f010aefc <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010ae39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae3c:	8b 40 10             	mov    0x10(%eax),%eax
f010ae3f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ae42:	0f 85 ac 00 00 00    	jne    f010aef4 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010ae48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae4b:	8b 50 0c             	mov    0xc(%eax),%edx
f010ae4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae51:	8b 40 10             	mov    0x10(%eax),%eax
f010ae54:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ae57:	83 ec 08             	sub    $0x8,%esp
f010ae5a:	52                   	push   %edx
f010ae5b:	50                   	push   %eax
f010ae5c:	e8 e9 cd ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f010ae61:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ae64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae68:	75 17                	jne    f010ae81 <cleanup_buffers+0x62>
f010ae6a:	83 ec 04             	sub    $0x4,%esp
f010ae6d:	68 ce 62 13 f0       	push   $0xf01362ce
f010ae72:	68 f1 03 00 00       	push   $0x3f1
f010ae77:	68 b1 62 13 f0       	push   $0xf01362b1
f010ae7c:	e8 7a 53 ff ff       	call   f01001fb <_panic>
f010ae81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae84:	8b 00                	mov    (%eax),%eax
f010ae86:	85 c0                	test   %eax,%eax
f010ae88:	74 10                	je     f010ae9a <cleanup_buffers+0x7b>
f010ae8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae8d:	8b 00                	mov    (%eax),%eax
f010ae8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae92:	8b 52 04             	mov    0x4(%edx),%edx
f010ae95:	89 50 04             	mov    %edx,0x4(%eax)
f010ae98:	eb 0b                	jmp    f010aea5 <cleanup_buffers+0x86>
f010ae9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae9d:	8b 40 04             	mov    0x4(%eax),%eax
f010aea0:	a3 bc 7a 65 f0       	mov    %eax,0xf0657abc
f010aea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aea8:	8b 40 04             	mov    0x4(%eax),%eax
f010aeab:	85 c0                	test   %eax,%eax
f010aead:	74 0f                	je     f010aebe <cleanup_buffers+0x9f>
f010aeaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aeb2:	8b 40 04             	mov    0x4(%eax),%eax
f010aeb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeb8:	8b 12                	mov    (%edx),%edx
f010aeba:	89 10                	mov    %edx,(%eax)
f010aebc:	eb 0a                	jmp    f010aec8 <cleanup_buffers+0xa9>
f010aebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aec1:	8b 00                	mov    (%eax),%eax
f010aec3:	a3 b8 7a 65 f0       	mov    %eax,0xf0657ab8
f010aec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aecb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010aed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aed4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010aedb:	a1 c4 7a 65 f0       	mov    0xf0657ac4,%eax
f010aee0:	48                   	dec    %eax
f010aee1:	a3 c4 7a 65 f0       	mov    %eax,0xf0657ac4

			free_frame(ptr_fi);
f010aee6:	83 ec 0c             	sub    $0xc,%esp
f010aee9:	ff 75 f4             	pushl  -0xc(%ebp)
f010aeec:	e8 3f ba ff ff       	call   f0106930 <free_frame>
f010aef1:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aef4:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010aef9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aefc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af00:	74 07                	je     f010af09 <cleanup_buffers+0xea>
f010af02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af05:	8b 00                	mov    (%eax),%eax
f010af07:	eb 05                	jmp    f010af0e <cleanup_buffers+0xef>
f010af09:	b8 00 00 00 00       	mov    $0x0,%eax
f010af0e:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f010af13:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010af18:	85 c0                	test   %eax,%eax
f010af1a:	0f 85 19 ff ff ff    	jne    f010ae39 <cleanup_buffers+0x1a>
f010af20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af24:	0f 85 0f ff ff ff    	jne    f010ae39 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010af2a:	90                   	nop
f010af2b:	c9                   	leave  
f010af2c:	c3                   	ret    

f010af2d <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010af2d:	55                   	push   %ebp
f010af2e:	89 e5                	mov    %esp,%ebp
f010af30:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010af33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010af37:	7e 06                	jle    f010af3f <set_program_priority+0x12>
f010af39:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010af3d:	7e 14                	jle    f010af53 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010af3f:	83 ec 04             	sub    $0x4,%esp
f010af42:	68 6c 64 13 f0       	push   $0xf013646c
f010af47:	6a 10                	push   $0x10
f010af49:	68 90 64 13 f0       	push   $0xf0136490
f010af4e:	e8 a8 52 ff ff       	call   f01001fb <_panic>
		return;
	}
	if(env == NULL)
f010af53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af57:	74 75                	je     f010afce <set_program_priority+0xa1>
		return;
	switch(priority)
f010af59:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010af5d:	77 56                	ja     f010afb5 <set_program_priority+0x88>
f010af5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af62:	c1 e0 02             	shl    $0x2,%eax
f010af65:	05 cc 64 13 f0       	add    $0xf01364cc,%eax
f010af6a:	8b 00                	mov    (%eax),%eax
f010af6c:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010af6e:	83 ec 08             	sub    $0x8,%esp
f010af71:	6a 01                	push   $0x1
f010af73:	ff 75 08             	pushl  0x8(%ebp)
f010af76:	e8 46 d7 ff ff       	call   f01086c1 <half_WS_Size>
f010af7b:	83 c4 10             	add    $0x10,%esp
			break;
f010af7e:	eb 35                	jmp    f010afb5 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010af80:	83 ec 08             	sub    $0x8,%esp
f010af83:	6a 00                	push   $0x0
f010af85:	ff 75 08             	pushl  0x8(%ebp)
f010af88:	e8 34 d7 ff ff       	call   f01086c1 <half_WS_Size>
f010af8d:	83 c4 10             	add    $0x10,%esp
			break;
f010af90:	eb 23                	jmp    f010afb5 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010af92:	83 ec 08             	sub    $0x8,%esp
f010af95:	6a 01                	push   $0x1
f010af97:	ff 75 08             	pushl  0x8(%ebp)
f010af9a:	e8 05 d7 ff ff       	call   f01086a4 <double_WS_Size>
f010af9f:	83 c4 10             	add    $0x10,%esp
			break;
f010afa2:	eb 11                	jmp    f010afb5 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010afa4:	83 ec 08             	sub    $0x8,%esp
f010afa7:	6a 00                	push   $0x0
f010afa9:	ff 75 08             	pushl  0x8(%ebp)
f010afac:	e8 f3 d6 ff ff       	call   f01086a4 <double_WS_Size>
f010afb1:	83 c4 10             	add    $0x10,%esp
			break;
f010afb4:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010afb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb8:	8b 40 74             	mov    0x74(%eax),%eax
f010afbb:	83 ec 08             	sub    $0x8,%esp
f010afbe:	50                   	push   %eax
f010afbf:	68 ad 64 13 f0       	push   $0xf01364ad
f010afc4:	e8 b9 5c ff ff       	call   f0100c82 <cprintf>
f010afc9:	83 c4 10             	add    $0x10,%esp
f010afcc:	eb 01                	jmp    f010afcf <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010afce:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010afcf:	c9                   	leave  
f010afd0:	c3                   	ret    

f010afd1 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010afd1:	55                   	push   %ebp
f010afd2:	89 e5                	mov    %esp,%ebp
f010afd4:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010afd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010afde:	eb 29                	jmp    f010b009 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010afe0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afe3:	89 d0                	mov    %edx,%eax
f010afe5:	01 c0                	add    %eax,%eax
f010afe7:	01 d0                	add    %edx,%eax
f010afe9:	c1 e0 02             	shl    $0x2,%eax
f010afec:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010aff1:	8b 00                	mov    (%eax),%eax
f010aff3:	83 ec 08             	sub    $0x8,%esp
f010aff6:	50                   	push   %eax
f010aff7:	ff 75 08             	pushl  0x8(%ebp)
f010affa:	e8 8d 5e 02 00       	call   f0130e8c <strcmp>
f010afff:	83 c4 10             	add    $0x10,%esp
f010b002:	85 c0                	test   %eax,%eax
f010b004:	74 0f                	je     f010b015 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b006:	ff 45 f4             	incl   -0xc(%ebp)
f010b009:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010b00e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b011:	7c cd                	jl     f010afe0 <get_user_program_info+0xf>
f010b013:	eb 01                	jmp    f010b016 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b015:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b016:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010b01b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b01e:	75 1a                	jne    f010b03a <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b020:	83 ec 08             	sub    $0x8,%esp
f010b023:	ff 75 08             	pushl  0x8(%ebp)
f010b026:	68 f9 6e 13 f0       	push   $0xf0136ef9
f010b02b:	e8 52 5c ff ff       	call   f0100c82 <cprintf>
f010b030:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b033:	b8 00 00 00 00       	mov    $0x0,%eax
f010b038:	eb 11                	jmp    f010b04b <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b03a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b03d:	89 d0                	mov    %edx,%eax
f010b03f:	01 c0                	add    %eax,%eax
f010b041:	01 d0                	add    %edx,%eax
f010b043:	c1 e0 02             	shl    $0x2,%eax
f010b046:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010b04b:	c9                   	leave  
f010b04c:	c3                   	ret    

f010b04d <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b04d:	55                   	push   %ebp
f010b04e:	89 e5                	mov    %esp,%ebp
f010b050:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b053:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b05a:	eb 30                	jmp    f010b08c <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b05c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b05f:	89 d0                	mov    %edx,%eax
f010b061:	01 c0                	add    %eax,%eax
f010b063:	01 d0                	add    %edx,%eax
f010b065:	c1 e0 02             	shl    $0x2,%eax
f010b068:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010b06d:	8b 00                	mov    (%eax),%eax
f010b06f:	8b 55 08             	mov    0x8(%ebp),%edx
f010b072:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b078:	83 ec 08             	sub    $0x8,%esp
f010b07b:	50                   	push   %eax
f010b07c:	52                   	push   %edx
f010b07d:	e8 0a 5e 02 00       	call   f0130e8c <strcmp>
f010b082:	83 c4 10             	add    $0x10,%esp
f010b085:	85 c0                	test   %eax,%eax
f010b087:	74 0f                	je     f010b098 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b089:	ff 45 f4             	incl   -0xc(%ebp)
f010b08c:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010b091:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b094:	7c c6                	jl     f010b05c <get_user_program_info_by_env+0xf>
f010b096:	eb 01                	jmp    f010b099 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b098:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b099:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010b09e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0a1:	75 17                	jne    f010b0ba <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b0a3:	83 ec 0c             	sub    $0xc,%esp
f010b0a6:	68 14 6f 13 f0       	push   $0xf0136f14
f010b0ab:	e8 d2 5b ff ff       	call   f0100c82 <cprintf>
f010b0b0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0b3:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0b8:	eb 11                	jmp    f010b0cb <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b0ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 02             	shl    $0x2,%eax
f010b0c6:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010b0cb:	c9                   	leave  
f010b0cc:	c3                   	ret    

f010b0cd <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b0cd:	55                   	push   %ebp
f010b0ce:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b0d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d3:	83 f8 13             	cmp    $0x13,%eax
f010b0d6:	77 0c                	ja     f010b0e4 <trapname+0x17>
		return excnames[trapno];
f010b0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0db:	8b 04 85 a0 72 13 f0 	mov    -0xfec8d60(,%eax,4),%eax
f010b0e2:	eb 12                	jmp    f010b0f6 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b0e4:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b0e8:	75 07                	jne    f010b0f1 <trapname+0x24>
		return "System call";
f010b0ea:	b8 40 6f 13 f0       	mov    $0xf0136f40,%eax
f010b0ef:	eb 05                	jmp    f010b0f6 <trapname+0x29>
	return "(unknown trap)";
f010b0f1:	b8 4c 6f 13 f0       	mov    $0xf0136f4c,%eax
}
f010b0f6:	5d                   	pop    %ebp
f010b0f7:	c3                   	ret    

f010b0f8 <idt_init>:


void
idt_init(void)
{
f010b0f8:	55                   	push   %ebp
f010b0f9:	89 e5                	mov    %esp,%ebp
f010b0fb:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b0fe:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b103:	66 a3 b0 72 65 f0    	mov    %ax,0xf06572b0
f010b109:	66 c7 05 b2 72 65 f0 	movw   $0x8,0xf06572b2
f010b110:	08 00 
f010b112:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010b117:	83 e0 e0             	and    $0xffffffe0,%eax
f010b11a:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010b11f:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010b124:	83 e0 1f             	and    $0x1f,%eax
f010b127:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010b12c:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b131:	83 e0 f0             	and    $0xfffffff0,%eax
f010b134:	83 c8 0e             	or     $0xe,%eax
f010b137:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b13c:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b141:	83 e0 ef             	and    $0xffffffef,%eax
f010b144:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b149:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b14e:	83 e0 9f             	and    $0xffffff9f,%eax
f010b151:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b156:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b15b:	83 c8 80             	or     $0xffffff80,%eax
f010b15e:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b163:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b168:	c1 e8 10             	shr    $0x10,%eax
f010b16b:	66 a3 b6 72 65 f0    	mov    %ax,0xf06572b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b171:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b176:	66 a3 c0 73 65 f0    	mov    %ax,0xf06573c0
f010b17c:	66 c7 05 c2 73 65 f0 	movw   $0x8,0xf06573c2
f010b183:	08 00 
f010b185:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b18a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b18d:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b192:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b197:	83 e0 1f             	and    $0x1f,%eax
f010b19a:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b19f:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b1a4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1a7:	83 c8 0e             	or     $0xe,%eax
f010b1aa:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b1af:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b1b4:	83 e0 ef             	and    $0xffffffef,%eax
f010b1b7:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b1bc:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b1c1:	83 c8 60             	or     $0x60,%eax
f010b1c4:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b1c9:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b1ce:	83 c8 80             	or     $0xffffff80,%eax
f010b1d1:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b1d6:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b1db:	c1 e8 10             	shr    $0x10,%eax
f010b1de:	66 a3 c6 73 65 f0    	mov    %ax,0xf06573c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b1e4:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b1e9:	66 a3 80 72 65 f0    	mov    %ax,0xf0657280
f010b1ef:	66 c7 05 82 72 65 f0 	movw   $0x8,0xf0657282
f010b1f6:	08 00 
f010b1f8:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b1fd:	83 e0 e0             	and    $0xffffffe0,%eax
f010b200:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b205:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b20a:	83 e0 1f             	and    $0x1f,%eax
f010b20d:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b212:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b217:	83 e0 f0             	and    $0xfffffff0,%eax
f010b21a:	83 c8 0e             	or     $0xe,%eax
f010b21d:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b222:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b227:	83 e0 ef             	and    $0xffffffef,%eax
f010b22a:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b22f:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b234:	83 e0 9f             	and    $0xffffff9f,%eax
f010b237:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b23c:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b241:	83 c8 80             	or     $0xffffff80,%eax
f010b244:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b249:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b24e:	c1 e8 10             	shr    $0x10,%eax
f010b251:	66 a3 86 72 65 f0    	mov    %ax,0xf0657286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b257:	b8 16 c7 10 f0       	mov    $0xf010c716,%eax
f010b25c:	66 a3 40 72 65 f0    	mov    %ax,0xf0657240
f010b262:	66 c7 05 42 72 65 f0 	movw   $0x8,0xf0657242
f010b269:	08 00 
f010b26b:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b270:	83 e0 e0             	and    $0xffffffe0,%eax
f010b273:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b278:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b27d:	83 e0 1f             	and    $0x1f,%eax
f010b280:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b285:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b28a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b28d:	83 c8 0e             	or     $0xe,%eax
f010b290:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b295:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b29a:	83 e0 ef             	and    $0xffffffef,%eax
f010b29d:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b2a2:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b2a7:	83 c8 60             	or     $0x60,%eax
f010b2aa:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b2af:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b2b4:	83 c8 80             	or     $0xffffff80,%eax
f010b2b7:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b2bc:	b8 16 c7 10 f0       	mov    $0xf010c716,%eax
f010b2c1:	c1 e8 10             	shr    $0x10,%eax
f010b2c4:	66 a3 46 72 65 f0    	mov    %ax,0xf0657246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b2ca:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b2cf:	66 a3 48 72 65 f0    	mov    %ax,0xf0657248
f010b2d5:	66 c7 05 4a 72 65 f0 	movw   $0x8,0xf065724a
f010b2dc:	08 00 
f010b2de:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b2e3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2e6:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b2eb:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b2f0:	83 e0 1f             	and    $0x1f,%eax
f010b2f3:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b2f8:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b2fd:	83 c8 0f             	or     $0xf,%eax
f010b300:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b305:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b30a:	83 e0 ef             	and    $0xffffffef,%eax
f010b30d:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b312:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b317:	83 c8 60             	or     $0x60,%eax
f010b31a:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b31f:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b324:	83 c8 80             	or     $0xffffff80,%eax
f010b327:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b32c:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b331:	c1 e8 10             	shr    $0x10,%eax
f010b334:	66 a3 4e 72 65 f0    	mov    %ax,0xf065724e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b33a:	b8 2a c7 10 f0       	mov    $0xf010c72a,%eax
f010b33f:	66 a3 50 72 65 f0    	mov    %ax,0xf0657250
f010b345:	66 c7 05 52 72 65 f0 	movw   $0x8,0xf0657252
f010b34c:	08 00 
f010b34e:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b353:	83 e0 e0             	and    $0xffffffe0,%eax
f010b356:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b35b:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b360:	83 e0 1f             	and    $0x1f,%eax
f010b363:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b368:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b36d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b370:	83 c8 0e             	or     $0xe,%eax
f010b373:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b378:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b37d:	83 e0 ef             	and    $0xffffffef,%eax
f010b380:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b385:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b38a:	83 c8 60             	or     $0x60,%eax
f010b38d:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b392:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b397:	83 c8 80             	or     $0xffffff80,%eax
f010b39a:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b39f:	b8 2a c7 10 f0       	mov    $0xf010c72a,%eax
f010b3a4:	c1 e8 10             	shr    $0x10,%eax
f010b3a7:	66 a3 56 72 65 f0    	mov    %ax,0xf0657256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b3ad:	b8 34 c7 10 f0       	mov    $0xf010c734,%eax
f010b3b2:	66 a3 58 72 65 f0    	mov    %ax,0xf0657258
f010b3b8:	66 c7 05 5a 72 65 f0 	movw   $0x8,0xf065725a
f010b3bf:	08 00 
f010b3c1:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b3c6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3c9:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b3ce:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b3d3:	83 e0 1f             	and    $0x1f,%eax
f010b3d6:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b3db:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b3e0:	83 c8 0f             	or     $0xf,%eax
f010b3e3:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b3e8:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b3ed:	83 e0 ef             	and    $0xffffffef,%eax
f010b3f0:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b3f5:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b3fa:	83 c8 60             	or     $0x60,%eax
f010b3fd:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b402:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b407:	83 c8 80             	or     $0xffffff80,%eax
f010b40a:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b40f:	b8 34 c7 10 f0       	mov    $0xf010c734,%eax
f010b414:	c1 e8 10             	shr    $0x10,%eax
f010b417:	66 a3 5e 72 65 f0    	mov    %ax,0xf065725e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b41d:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010b422:	66 a3 60 72 65 f0    	mov    %ax,0xf0657260
f010b428:	66 c7 05 62 72 65 f0 	movw   $0x8,0xf0657262
f010b42f:	08 00 
f010b431:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b436:	83 e0 e0             	and    $0xffffffe0,%eax
f010b439:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b43e:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b443:	83 e0 1f             	and    $0x1f,%eax
f010b446:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b44b:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b450:	83 c8 0f             	or     $0xf,%eax
f010b453:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b458:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b45d:	83 e0 ef             	and    $0xffffffef,%eax
f010b460:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b465:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b46a:	83 c8 60             	or     $0x60,%eax
f010b46d:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b472:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b477:	83 c8 80             	or     $0xffffff80,%eax
f010b47a:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b47f:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010b484:	c1 e8 10             	shr    $0x10,%eax
f010b487:	66 a3 66 72 65 f0    	mov    %ax,0xf0657266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b48d:	b8 48 c7 10 f0       	mov    $0xf010c748,%eax
f010b492:	66 a3 68 72 65 f0    	mov    %ax,0xf0657268
f010b498:	66 c7 05 6a 72 65 f0 	movw   $0x8,0xf065726a
f010b49f:	08 00 
f010b4a1:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b4a6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4a9:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b4ae:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b4b3:	83 e0 1f             	and    $0x1f,%eax
f010b4b6:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b4bb:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b4c0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4c3:	83 c8 0e             	or     $0xe,%eax
f010b4c6:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b4cb:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b4d0:	83 e0 ef             	and    $0xffffffef,%eax
f010b4d3:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b4d8:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b4dd:	83 c8 60             	or     $0x60,%eax
f010b4e0:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b4e5:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b4ea:	83 c8 80             	or     $0xffffff80,%eax
f010b4ed:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b4f2:	b8 48 c7 10 f0       	mov    $0xf010c748,%eax
f010b4f7:	c1 e8 10             	shr    $0x10,%eax
f010b4fa:	66 a3 6e 72 65 f0    	mov    %ax,0xf065726e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b500:	b8 52 c7 10 f0       	mov    $0xf010c752,%eax
f010b505:	66 a3 70 72 65 f0    	mov    %ax,0xf0657270
f010b50b:	66 c7 05 72 72 65 f0 	movw   $0x8,0xf0657272
f010b512:	08 00 
f010b514:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b519:	83 e0 e0             	and    $0xffffffe0,%eax
f010b51c:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b521:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b526:	83 e0 1f             	and    $0x1f,%eax
f010b529:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b52e:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b533:	83 e0 f0             	and    $0xfffffff0,%eax
f010b536:	83 c8 0e             	or     $0xe,%eax
f010b539:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b53e:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b543:	83 e0 ef             	and    $0xffffffef,%eax
f010b546:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b54b:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b550:	83 c8 60             	or     $0x60,%eax
f010b553:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b558:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b55d:	83 c8 80             	or     $0xffffff80,%eax
f010b560:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b565:	b8 52 c7 10 f0       	mov    $0xf010c752,%eax
f010b56a:	c1 e8 10             	shr    $0x10,%eax
f010b56d:	66 a3 76 72 65 f0    	mov    %ax,0xf0657276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b573:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010b578:	66 a3 78 72 65 f0    	mov    %ax,0xf0657278
f010b57e:	66 c7 05 7a 72 65 f0 	movw   $0x8,0xf065727a
f010b585:	08 00 
f010b587:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b58c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b58f:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b594:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b599:	83 e0 1f             	and    $0x1f,%eax
f010b59c:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b5a1:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b5a6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5a9:	83 c8 0e             	or     $0xe,%eax
f010b5ac:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b5b1:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b5b6:	83 e0 ef             	and    $0xffffffef,%eax
f010b5b9:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b5be:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b5c3:	83 c8 60             	or     $0x60,%eax
f010b5c6:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b5cb:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b5d0:	83 c8 80             	or     $0xffffff80,%eax
f010b5d3:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b5d8:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010b5dd:	c1 e8 10             	shr    $0x10,%eax
f010b5e0:	66 a3 7e 72 65 f0    	mov    %ax,0xf065727e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b5e6:	b8 66 c7 10 f0       	mov    $0xf010c766,%eax
f010b5eb:	66 a3 90 72 65 f0    	mov    %ax,0xf0657290
f010b5f1:	66 c7 05 92 72 65 f0 	movw   $0x8,0xf0657292
f010b5f8:	08 00 
f010b5fa:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b5ff:	83 e0 e0             	and    $0xffffffe0,%eax
f010b602:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b607:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b60c:	83 e0 1f             	and    $0x1f,%eax
f010b60f:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b614:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b619:	83 e0 f0             	and    $0xfffffff0,%eax
f010b61c:	83 c8 0e             	or     $0xe,%eax
f010b61f:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b624:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b629:	83 e0 ef             	and    $0xffffffef,%eax
f010b62c:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b631:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b636:	83 c8 60             	or     $0x60,%eax
f010b639:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b63e:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b643:	83 c8 80             	or     $0xffffff80,%eax
f010b646:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b64b:	b8 66 c7 10 f0       	mov    $0xf010c766,%eax
f010b650:	c1 e8 10             	shr    $0x10,%eax
f010b653:	66 a3 96 72 65 f0    	mov    %ax,0xf0657296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b659:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010b65e:	66 a3 98 72 65 f0    	mov    %ax,0xf0657298
f010b664:	66 c7 05 9a 72 65 f0 	movw   $0x8,0xf065729a
f010b66b:	08 00 
f010b66d:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b672:	83 e0 e0             	and    $0xffffffe0,%eax
f010b675:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b67a:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b67f:	83 e0 1f             	and    $0x1f,%eax
f010b682:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b687:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b68c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b68f:	83 c8 0e             	or     $0xe,%eax
f010b692:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b697:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b69c:	83 e0 ef             	and    $0xffffffef,%eax
f010b69f:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b6a4:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b6a9:	83 c8 60             	or     $0x60,%eax
f010b6ac:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b6b1:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b6b6:	83 c8 80             	or     $0xffffff80,%eax
f010b6b9:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b6be:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010b6c3:	c1 e8 10             	shr    $0x10,%eax
f010b6c6:	66 a3 9e 72 65 f0    	mov    %ax,0xf065729e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b6cc:	b8 72 c7 10 f0       	mov    $0xf010c772,%eax
f010b6d1:	66 a3 a0 72 65 f0    	mov    %ax,0xf06572a0
f010b6d7:	66 c7 05 a2 72 65 f0 	movw   $0x8,0xf06572a2
f010b6de:	08 00 
f010b6e0:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b6e5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6e8:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b6ed:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b6f2:	83 e0 1f             	and    $0x1f,%eax
f010b6f5:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b6fa:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b6ff:	83 e0 f0             	and    $0xfffffff0,%eax
f010b702:	83 c8 0e             	or     $0xe,%eax
f010b705:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b70a:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b70f:	83 e0 ef             	and    $0xffffffef,%eax
f010b712:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b717:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b71c:	83 c8 60             	or     $0x60,%eax
f010b71f:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b724:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b729:	83 c8 80             	or     $0xffffff80,%eax
f010b72c:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b731:	b8 72 c7 10 f0       	mov    $0xf010c772,%eax
f010b736:	c1 e8 10             	shr    $0x10,%eax
f010b739:	66 a3 a6 72 65 f0    	mov    %ax,0xf06572a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b73f:	b8 76 c7 10 f0       	mov    $0xf010c776,%eax
f010b744:	66 a3 a8 72 65 f0    	mov    %ax,0xf06572a8
f010b74a:	66 c7 05 aa 72 65 f0 	movw   $0x8,0xf06572aa
f010b751:	08 00 
f010b753:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b758:	83 e0 e0             	and    $0xffffffe0,%eax
f010b75b:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b760:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b765:	83 e0 1f             	and    $0x1f,%eax
f010b768:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b76d:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b772:	83 e0 f0             	and    $0xfffffff0,%eax
f010b775:	83 c8 0e             	or     $0xe,%eax
f010b778:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b77d:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b782:	83 e0 ef             	and    $0xffffffef,%eax
f010b785:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b78a:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b78f:	83 c8 60             	or     $0x60,%eax
f010b792:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b797:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b79c:	83 c8 80             	or     $0xffffff80,%eax
f010b79f:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b7a4:	b8 76 c7 10 f0       	mov    $0xf010c776,%eax
f010b7a9:	c1 e8 10             	shr    $0x10,%eax
f010b7ac:	66 a3 ae 72 65 f0    	mov    %ax,0xf06572ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b7b2:	b8 7a c7 10 f0       	mov    $0xf010c77a,%eax
f010b7b7:	66 a3 c0 72 65 f0    	mov    %ax,0xf06572c0
f010b7bd:	66 c7 05 c2 72 65 f0 	movw   $0x8,0xf06572c2
f010b7c4:	08 00 
f010b7c6:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b7cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7ce:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b7d3:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b7d8:	83 e0 1f             	and    $0x1f,%eax
f010b7db:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b7e0:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b7e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7e8:	83 c8 0e             	or     $0xe,%eax
f010b7eb:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b7f0:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b7f5:	83 e0 ef             	and    $0xffffffef,%eax
f010b7f8:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b7fd:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b802:	83 c8 60             	or     $0x60,%eax
f010b805:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b80a:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b80f:	83 c8 80             	or     $0xffffff80,%eax
f010b812:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b817:	b8 7a c7 10 f0       	mov    $0xf010c77a,%eax
f010b81c:	c1 e8 10             	shr    $0x10,%eax
f010b81f:	66 a3 c6 72 65 f0    	mov    %ax,0xf06572c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b825:	b8 80 c7 10 f0       	mov    $0xf010c780,%eax
f010b82a:	66 a3 c8 72 65 f0    	mov    %ax,0xf06572c8
f010b830:	66 c7 05 ca 72 65 f0 	movw   $0x8,0xf06572ca
f010b837:	08 00 
f010b839:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b83e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b841:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b846:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b84b:	83 e0 1f             	and    $0x1f,%eax
f010b84e:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b853:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b858:	83 e0 f0             	and    $0xfffffff0,%eax
f010b85b:	83 c8 0e             	or     $0xe,%eax
f010b85e:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b863:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b868:	83 e0 ef             	and    $0xffffffef,%eax
f010b86b:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b870:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b875:	83 c8 60             	or     $0x60,%eax
f010b878:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b87d:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b882:	83 c8 80             	or     $0xffffff80,%eax
f010b885:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b88a:	b8 80 c7 10 f0       	mov    $0xf010c780,%eax
f010b88f:	c1 e8 10             	shr    $0x10,%eax
f010b892:	66 a3 ce 72 65 f0    	mov    %ax,0xf06572ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b898:	b8 84 c7 10 f0       	mov    $0xf010c784,%eax
f010b89d:	66 a3 d0 72 65 f0    	mov    %ax,0xf06572d0
f010b8a3:	66 c7 05 d2 72 65 f0 	movw   $0x8,0xf06572d2
f010b8aa:	08 00 
f010b8ac:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b8b1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8b4:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b8b9:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b8be:	83 e0 1f             	and    $0x1f,%eax
f010b8c1:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b8c6:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b8cb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8ce:	83 c8 0e             	or     $0xe,%eax
f010b8d1:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b8d6:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b8db:	83 e0 ef             	and    $0xffffffef,%eax
f010b8de:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b8e3:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b8e8:	83 c8 60             	or     $0x60,%eax
f010b8eb:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b8f0:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b8f5:	83 c8 80             	or     $0xffffff80,%eax
f010b8f8:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b8fd:	b8 84 c7 10 f0       	mov    $0xf010c784,%eax
f010b902:	c1 e8 10             	shr    $0x10,%eax
f010b905:	66 a3 d6 72 65 f0    	mov    %ax,0xf06572d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b90b:	b8 8a c7 10 f0       	mov    $0xf010c78a,%eax
f010b910:	66 a3 d8 72 65 f0    	mov    %ax,0xf06572d8
f010b916:	66 c7 05 da 72 65 f0 	movw   $0x8,0xf06572da
f010b91d:	08 00 
f010b91f:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b924:	83 e0 e0             	and    $0xffffffe0,%eax
f010b927:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b92c:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b931:	83 e0 1f             	and    $0x1f,%eax
f010b934:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b939:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b93e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b941:	83 c8 0e             	or     $0xe,%eax
f010b944:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b949:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b94e:	83 e0 ef             	and    $0xffffffef,%eax
f010b951:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b956:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b95b:	83 c8 60             	or     $0x60,%eax
f010b95e:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b963:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b968:	83 c8 80             	or     $0xffffff80,%eax
f010b96b:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b970:	b8 8a c7 10 f0       	mov    $0xf010c78a,%eax
f010b975:	c1 e8 10             	shr    $0x10,%eax
f010b978:	66 a3 de 72 65 f0    	mov    %ax,0xf06572de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b97e:	b8 90 c7 10 f0       	mov    $0xf010c790,%eax
f010b983:	66 a3 40 73 65 f0    	mov    %ax,0xf0657340
f010b989:	66 c7 05 42 73 65 f0 	movw   $0x8,0xf0657342
f010b990:	08 00 
f010b992:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b997:	83 e0 e0             	and    $0xffffffe0,%eax
f010b99a:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b99f:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b9a4:	83 e0 1f             	and    $0x1f,%eax
f010b9a7:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b9ac:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b9b1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9b4:	83 c8 0e             	or     $0xe,%eax
f010b9b7:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b9bc:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b9c1:	83 e0 ef             	and    $0xffffffef,%eax
f010b9c4:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b9c9:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b9ce:	83 c8 60             	or     $0x60,%eax
f010b9d1:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b9d6:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b9db:	83 c8 80             	or     $0xffffff80,%eax
f010b9de:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b9e3:	b8 90 c7 10 f0       	mov    $0xf010c790,%eax
f010b9e8:	c1 e8 10             	shr    $0x10,%eax
f010b9eb:	66 a3 46 73 65 f0    	mov    %ax,0xf0657346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b9f1:	b8 96 c7 10 f0       	mov    $0xf010c796,%eax
f010b9f6:	66 a3 48 73 65 f0    	mov    %ax,0xf0657348
f010b9fc:	66 c7 05 4a 73 65 f0 	movw   $0x8,0xf065734a
f010ba03:	08 00 
f010ba05:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010ba0a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba0d:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010ba12:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010ba17:	83 e0 1f             	and    $0x1f,%eax
f010ba1a:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010ba1f:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010ba24:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba27:	83 c8 0e             	or     $0xe,%eax
f010ba2a:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010ba2f:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010ba34:	83 e0 ef             	and    $0xffffffef,%eax
f010ba37:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010ba3c:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010ba41:	83 c8 60             	or     $0x60,%eax
f010ba44:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010ba49:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010ba4e:	83 c8 80             	or     $0xffffff80,%eax
f010ba51:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010ba56:	b8 96 c7 10 f0       	mov    $0xf010c796,%eax
f010ba5b:	c1 e8 10             	shr    $0x10,%eax
f010ba5e:	66 a3 4e 73 65 f0    	mov    %ax,0xf065734e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010ba64:	b8 9c c7 10 f0       	mov    $0xf010c79c,%eax
f010ba69:	66 a3 50 73 65 f0    	mov    %ax,0xf0657350
f010ba6f:	66 c7 05 52 73 65 f0 	movw   $0x8,0xf0657352
f010ba76:	08 00 
f010ba78:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010ba7d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba80:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010ba85:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010ba8a:	83 e0 1f             	and    $0x1f,%eax
f010ba8d:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010ba92:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010ba97:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba9a:	83 c8 0e             	or     $0xe,%eax
f010ba9d:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010baa2:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010baa7:	83 e0 ef             	and    $0xffffffef,%eax
f010baaa:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010baaf:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010bab4:	83 c8 60             	or     $0x60,%eax
f010bab7:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010babc:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010bac1:	83 c8 80             	or     $0xffffff80,%eax
f010bac4:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010bac9:	b8 9c c7 10 f0       	mov    $0xf010c79c,%eax
f010bace:	c1 e8 10             	shr    $0x10,%eax
f010bad1:	66 a3 56 73 65 f0    	mov    %ax,0xf0657356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bad7:	b8 a2 c7 10 f0       	mov    $0xf010c7a2,%eax
f010badc:	66 a3 58 73 65 f0    	mov    %ax,0xf0657358
f010bae2:	66 c7 05 5a 73 65 f0 	movw   $0x8,0xf065735a
f010bae9:	08 00 
f010baeb:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010baf0:	83 e0 e0             	and    $0xffffffe0,%eax
f010baf3:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010baf8:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010bafd:	83 e0 1f             	and    $0x1f,%eax
f010bb00:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010bb05:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010bb0a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb0d:	83 c8 0e             	or     $0xe,%eax
f010bb10:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010bb15:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010bb1a:	83 e0 ef             	and    $0xffffffef,%eax
f010bb1d:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010bb22:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010bb27:	83 c8 60             	or     $0x60,%eax
f010bb2a:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010bb2f:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010bb34:	83 c8 80             	or     $0xffffff80,%eax
f010bb37:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010bb3c:	b8 a2 c7 10 f0       	mov    $0xf010c7a2,%eax
f010bb41:	c1 e8 10             	shr    $0x10,%eax
f010bb44:	66 a3 5e 73 65 f0    	mov    %ax,0xf065735e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bb4a:	b8 a8 c7 10 f0       	mov    $0xf010c7a8,%eax
f010bb4f:	66 a3 60 73 65 f0    	mov    %ax,0xf0657360
f010bb55:	66 c7 05 62 73 65 f0 	movw   $0x8,0xf0657362
f010bb5c:	08 00 
f010bb5e:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010bb63:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb66:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010bb6b:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010bb70:	83 e0 1f             	and    $0x1f,%eax
f010bb73:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010bb78:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010bb7d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb80:	83 c8 0e             	or     $0xe,%eax
f010bb83:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010bb88:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010bb8d:	83 e0 ef             	and    $0xffffffef,%eax
f010bb90:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010bb95:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010bb9a:	83 c8 60             	or     $0x60,%eax
f010bb9d:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010bba2:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010bba7:	83 c8 80             	or     $0xffffff80,%eax
f010bbaa:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010bbaf:	b8 a8 c7 10 f0       	mov    $0xf010c7a8,%eax
f010bbb4:	c1 e8 10             	shr    $0x10,%eax
f010bbb7:	66 a3 66 73 65 f0    	mov    %ax,0xf0657366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bbbd:	b8 ae c7 10 f0       	mov    $0xf010c7ae,%eax
f010bbc2:	66 a3 68 73 65 f0    	mov    %ax,0xf0657368
f010bbc8:	66 c7 05 6a 73 65 f0 	movw   $0x8,0xf065736a
f010bbcf:	08 00 
f010bbd1:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010bbd6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbd9:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010bbde:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010bbe3:	83 e0 1f             	and    $0x1f,%eax
f010bbe6:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010bbeb:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bbf0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbf3:	83 c8 0e             	or     $0xe,%eax
f010bbf6:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bbfb:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bc00:	83 e0 ef             	and    $0xffffffef,%eax
f010bc03:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bc08:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bc0d:	83 c8 60             	or     $0x60,%eax
f010bc10:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bc15:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bc1a:	83 c8 80             	or     $0xffffff80,%eax
f010bc1d:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bc22:	b8 ae c7 10 f0       	mov    $0xf010c7ae,%eax
f010bc27:	c1 e8 10             	shr    $0x10,%eax
f010bc2a:	66 a3 6e 73 65 f0    	mov    %ax,0xf065736e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bc30:	b8 b4 c7 10 f0       	mov    $0xf010c7b4,%eax
f010bc35:	66 a3 70 73 65 f0    	mov    %ax,0xf0657370
f010bc3b:	66 c7 05 72 73 65 f0 	movw   $0x8,0xf0657372
f010bc42:	08 00 
f010bc44:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bc49:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc4c:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bc51:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bc56:	83 e0 1f             	and    $0x1f,%eax
f010bc59:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bc5e:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bc63:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc66:	83 c8 0e             	or     $0xe,%eax
f010bc69:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bc6e:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bc73:	83 e0 ef             	and    $0xffffffef,%eax
f010bc76:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bc7b:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bc80:	83 c8 60             	or     $0x60,%eax
f010bc83:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bc88:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bc8d:	83 c8 80             	or     $0xffffff80,%eax
f010bc90:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bc95:	b8 b4 c7 10 f0       	mov    $0xf010c7b4,%eax
f010bc9a:	c1 e8 10             	shr    $0x10,%eax
f010bc9d:	66 a3 76 73 65 f0    	mov    %ax,0xf0657376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bca3:	b8 ba c7 10 f0       	mov    $0xf010c7ba,%eax
f010bca8:	66 a3 78 73 65 f0    	mov    %ax,0xf0657378
f010bcae:	66 c7 05 7a 73 65 f0 	movw   $0x8,0xf065737a
f010bcb5:	08 00 
f010bcb7:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bcbc:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcbf:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bcc4:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bcc9:	83 e0 1f             	and    $0x1f,%eax
f010bccc:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bcd1:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bcd6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcd9:	83 c8 0e             	or     $0xe,%eax
f010bcdc:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bce1:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bce6:	83 e0 ef             	and    $0xffffffef,%eax
f010bce9:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bcee:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bcf3:	83 c8 60             	or     $0x60,%eax
f010bcf6:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bcfb:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bd00:	83 c8 80             	or     $0xffffff80,%eax
f010bd03:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bd08:	b8 ba c7 10 f0       	mov    $0xf010c7ba,%eax
f010bd0d:	c1 e8 10             	shr    $0x10,%eax
f010bd10:	66 a3 7e 73 65 f0    	mov    %ax,0xf065737e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bd16:	b8 c0 c7 10 f0       	mov    $0xf010c7c0,%eax
f010bd1b:	66 a3 80 73 65 f0    	mov    %ax,0xf0657380
f010bd21:	66 c7 05 82 73 65 f0 	movw   $0x8,0xf0657382
f010bd28:	08 00 
f010bd2a:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bd2f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd32:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bd37:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bd3c:	83 e0 1f             	and    $0x1f,%eax
f010bd3f:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bd44:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bd49:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd4c:	83 c8 0e             	or     $0xe,%eax
f010bd4f:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bd54:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bd59:	83 e0 ef             	and    $0xffffffef,%eax
f010bd5c:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bd61:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bd66:	83 c8 60             	or     $0x60,%eax
f010bd69:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bd6e:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bd73:	83 c8 80             	or     $0xffffff80,%eax
f010bd76:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bd7b:	b8 c0 c7 10 f0       	mov    $0xf010c7c0,%eax
f010bd80:	c1 e8 10             	shr    $0x10,%eax
f010bd83:	66 a3 86 73 65 f0    	mov    %ax,0xf0657386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bd89:	b8 c6 c7 10 f0       	mov    $0xf010c7c6,%eax
f010bd8e:	66 a3 88 73 65 f0    	mov    %ax,0xf0657388
f010bd94:	66 c7 05 8a 73 65 f0 	movw   $0x8,0xf065738a
f010bd9b:	08 00 
f010bd9d:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bda2:	83 e0 e0             	and    $0xffffffe0,%eax
f010bda5:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bdaa:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bdaf:	83 e0 1f             	and    $0x1f,%eax
f010bdb2:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bdb7:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bdbc:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdbf:	83 c8 0e             	or     $0xe,%eax
f010bdc2:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bdc7:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bdcc:	83 e0 ef             	and    $0xffffffef,%eax
f010bdcf:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bdd4:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bdd9:	83 c8 60             	or     $0x60,%eax
f010bddc:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bde1:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bde6:	83 c8 80             	or     $0xffffff80,%eax
f010bde9:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bdee:	b8 c6 c7 10 f0       	mov    $0xf010c7c6,%eax
f010bdf3:	c1 e8 10             	shr    $0x10,%eax
f010bdf6:	66 a3 8e 73 65 f0    	mov    %ax,0xf065738e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bdfc:	b8 cc c7 10 f0       	mov    $0xf010c7cc,%eax
f010be01:	66 a3 90 73 65 f0    	mov    %ax,0xf0657390
f010be07:	66 c7 05 92 73 65 f0 	movw   $0x8,0xf0657392
f010be0e:	08 00 
f010be10:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010be15:	83 e0 e0             	and    $0xffffffe0,%eax
f010be18:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010be1d:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010be22:	83 e0 1f             	and    $0x1f,%eax
f010be25:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010be2a:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010be2f:	83 e0 f0             	and    $0xfffffff0,%eax
f010be32:	83 c8 0e             	or     $0xe,%eax
f010be35:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010be3a:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010be3f:	83 e0 ef             	and    $0xffffffef,%eax
f010be42:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010be47:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010be4c:	83 c8 60             	or     $0x60,%eax
f010be4f:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010be54:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010be59:	83 c8 80             	or     $0xffffff80,%eax
f010be5c:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010be61:	b8 cc c7 10 f0       	mov    $0xf010c7cc,%eax
f010be66:	c1 e8 10             	shr    $0x10,%eax
f010be69:	66 a3 96 73 65 f0    	mov    %ax,0xf0657396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010be6f:	b8 d2 c7 10 f0       	mov    $0xf010c7d2,%eax
f010be74:	66 a3 98 73 65 f0    	mov    %ax,0xf0657398
f010be7a:	66 c7 05 9a 73 65 f0 	movw   $0x8,0xf065739a
f010be81:	08 00 
f010be83:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010be88:	83 e0 e0             	and    $0xffffffe0,%eax
f010be8b:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010be90:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010be95:	83 e0 1f             	and    $0x1f,%eax
f010be98:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010be9d:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bea2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bea5:	83 c8 0e             	or     $0xe,%eax
f010bea8:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bead:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010beb2:	83 e0 ef             	and    $0xffffffef,%eax
f010beb5:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010beba:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bebf:	83 c8 60             	or     $0x60,%eax
f010bec2:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bec7:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010becc:	83 c8 80             	or     $0xffffff80,%eax
f010becf:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bed4:	b8 d2 c7 10 f0       	mov    $0xf010c7d2,%eax
f010bed9:	c1 e8 10             	shr    $0x10,%eax
f010bedc:	66 a3 9e 73 65 f0    	mov    %ax,0xf065739e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bee2:	b8 d8 c7 10 f0       	mov    $0xf010c7d8,%eax
f010bee7:	66 a3 a0 73 65 f0    	mov    %ax,0xf06573a0
f010beed:	66 c7 05 a2 73 65 f0 	movw   $0x8,0xf06573a2
f010bef4:	08 00 
f010bef6:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010befb:	83 e0 e0             	and    $0xffffffe0,%eax
f010befe:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bf03:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010bf08:	83 e0 1f             	and    $0x1f,%eax
f010bf0b:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bf10:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bf15:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf18:	83 c8 0e             	or     $0xe,%eax
f010bf1b:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bf20:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bf25:	83 e0 ef             	and    $0xffffffef,%eax
f010bf28:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bf2d:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bf32:	83 c8 60             	or     $0x60,%eax
f010bf35:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bf3a:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bf3f:	83 c8 80             	or     $0xffffff80,%eax
f010bf42:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bf47:	b8 d8 c7 10 f0       	mov    $0xf010c7d8,%eax
f010bf4c:	c1 e8 10             	shr    $0x10,%eax
f010bf4f:	66 a3 a6 73 65 f0    	mov    %ax,0xf06573a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010bf55:	b8 de c7 10 f0       	mov    $0xf010c7de,%eax
f010bf5a:	66 a3 a8 73 65 f0    	mov    %ax,0xf06573a8
f010bf60:	66 c7 05 aa 73 65 f0 	movw   $0x8,0xf06573aa
f010bf67:	08 00 
f010bf69:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bf6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf71:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bf76:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bf7b:	83 e0 1f             	and    $0x1f,%eax
f010bf7e:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bf83:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bf88:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf8b:	83 c8 0e             	or     $0xe,%eax
f010bf8e:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010bf93:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bf98:	83 e0 ef             	and    $0xffffffef,%eax
f010bf9b:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010bfa0:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bfa5:	83 c8 60             	or     $0x60,%eax
f010bfa8:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010bfad:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bfb2:	83 c8 80             	or     $0xffffff80,%eax
f010bfb5:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010bfba:	b8 de c7 10 f0       	mov    $0xf010c7de,%eax
f010bfbf:	c1 e8 10             	shr    $0x10,%eax
f010bfc2:	66 a3 ae 73 65 f0    	mov    %ax,0xf06573ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bfc8:	b8 e4 c7 10 f0       	mov    $0xf010c7e4,%eax
f010bfcd:	66 a3 b0 73 65 f0    	mov    %ax,0xf06573b0
f010bfd3:	66 c7 05 b2 73 65 f0 	movw   $0x8,0xf06573b2
f010bfda:	08 00 
f010bfdc:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010bfe1:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfe4:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010bfe9:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010bfee:	83 e0 1f             	and    $0x1f,%eax
f010bff1:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010bff6:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010bffb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bffe:	83 c8 0e             	or     $0xe,%eax
f010c001:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010c006:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010c00b:	83 e0 ef             	and    $0xffffffef,%eax
f010c00e:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010c013:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010c018:	83 c8 60             	or     $0x60,%eax
f010c01b:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010c020:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010c025:	83 c8 80             	or     $0xffffff80,%eax
f010c028:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010c02d:	b8 e4 c7 10 f0       	mov    $0xf010c7e4,%eax
f010c032:	c1 e8 10             	shr    $0x10,%eax
f010c035:	66 a3 b6 73 65 f0    	mov    %ax,0xf06573b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c03b:	b8 ea c7 10 f0       	mov    $0xf010c7ea,%eax
f010c040:	66 a3 b8 73 65 f0    	mov    %ax,0xf06573b8
f010c046:	66 c7 05 ba 73 65 f0 	movw   $0x8,0xf06573ba
f010c04d:	08 00 
f010c04f:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010c054:	83 e0 e0             	and    $0xffffffe0,%eax
f010c057:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010c05c:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010c061:	83 e0 1f             	and    $0x1f,%eax
f010c064:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010c069:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010c06e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c071:	83 c8 0e             	or     $0xe,%eax
f010c074:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010c079:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010c07e:	83 e0 ef             	and    $0xffffffef,%eax
f010c081:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010c086:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010c08b:	83 c8 60             	or     $0x60,%eax
f010c08e:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010c093:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010c098:	83 c8 80             	or     $0xffffff80,%eax
f010c09b:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010c0a0:	b8 ea c7 10 f0       	mov    $0xf010c7ea,%eax
f010c0a5:	c1 e8 10             	shr    $0x10,%eax
f010c0a8:	66 a3 be 73 65 f0    	mov    %ax,0xf06573be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c0ae:	c7 05 44 7a 65 f0 00 	movl   $0xefc00000,0xf0657a44
f010c0b5:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c0b8:	66 c7 05 48 7a 65 f0 	movw   $0x10,0xf0657a48
f010c0bf:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c0c1:	66 c7 05 e8 18 19 f0 	movw   $0x68,0xf01918e8
f010c0c8:	68 00 
f010c0ca:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010c0cf:	66 a3 ea 18 19 f0    	mov    %ax,0xf01918ea
f010c0d5:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010c0da:	c1 e8 10             	shr    $0x10,%eax
f010c0dd:	a2 ec 18 19 f0       	mov    %al,0xf01918ec
f010c0e2:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c0e7:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0ea:	83 c8 09             	or     $0x9,%eax
f010c0ed:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c0f2:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c0f7:	83 c8 10             	or     $0x10,%eax
f010c0fa:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c0ff:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c104:	83 e0 9f             	and    $0xffffff9f,%eax
f010c107:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c10c:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c111:	83 c8 80             	or     $0xffffff80,%eax
f010c114:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c119:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c11e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c121:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c126:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c12b:	83 e0 ef             	and    $0xffffffef,%eax
f010c12e:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c133:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c138:	83 e0 df             	and    $0xffffffdf,%eax
f010c13b:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c140:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c145:	83 c8 40             	or     $0x40,%eax
f010c148:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c14d:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c152:	83 e0 7f             	and    $0x7f,%eax
f010c155:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c15a:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010c15f:	c1 e8 18             	shr    $0x18,%eax
f010c162:	a2 ef 18 19 f0       	mov    %al,0xf01918ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c167:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c16c:	83 e0 ef             	and    $0xffffffef,%eax
f010c16f:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c174:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c17a:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c17e:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c181:	0f 01 1d c8 1c 19 f0 	lidtl  0xf0191cc8
}
f010c188:	90                   	nop
f010c189:	c9                   	leave  
f010c18a:	c3                   	ret    

f010c18b <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c18b:	55                   	push   %ebp
f010c18c:	89 e5                	mov    %esp,%ebp
f010c18e:	53                   	push   %ebx
f010c18f:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c192:	83 ec 08             	sub    $0x8,%esp
f010c195:	ff 75 08             	pushl  0x8(%ebp)
f010c198:	68 5b 6f 13 f0       	push   $0xf0136f5b
f010c19d:	e8 e0 4a ff ff       	call   f0100c82 <cprintf>
f010c1a2:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c1a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1a8:	83 ec 0c             	sub    $0xc,%esp
f010c1ab:	50                   	push   %eax
f010c1ac:	e8 fd 00 00 00       	call   f010c2ae <print_regs>
f010c1b1:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c1b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1b7:	8b 40 20             	mov    0x20(%eax),%eax
f010c1ba:	0f b7 c0             	movzwl %ax,%eax
f010c1bd:	83 ec 08             	sub    $0x8,%esp
f010c1c0:	50                   	push   %eax
f010c1c1:	68 6d 6f 13 f0       	push   $0xf0136f6d
f010c1c6:	e8 b7 4a ff ff       	call   f0100c82 <cprintf>
f010c1cb:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c1ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d1:	8b 40 24             	mov    0x24(%eax),%eax
f010c1d4:	0f b7 c0             	movzwl %ax,%eax
f010c1d7:	83 ec 08             	sub    $0x8,%esp
f010c1da:	50                   	push   %eax
f010c1db:	68 80 6f 13 f0       	push   $0xf0136f80
f010c1e0:	e8 9d 4a ff ff       	call   f0100c82 <cprintf>
f010c1e5:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1eb:	8b 58 28             	mov    0x28(%eax),%ebx
f010c1ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1f1:	8b 40 28             	mov    0x28(%eax),%eax
f010c1f4:	83 ec 0c             	sub    $0xc,%esp
f010c1f7:	50                   	push   %eax
f010c1f8:	e8 d0 ee ff ff       	call   f010b0cd <trapname>
f010c1fd:	83 c4 10             	add    $0x10,%esp
f010c200:	89 c2                	mov    %eax,%edx
f010c202:	8b 45 08             	mov    0x8(%ebp),%eax
f010c205:	8b 40 28             	mov    0x28(%eax),%eax
f010c208:	53                   	push   %ebx
f010c209:	52                   	push   %edx
f010c20a:	50                   	push   %eax
f010c20b:	68 93 6f 13 f0       	push   $0xf0136f93
f010c210:	e8 6d 4a ff ff       	call   f0100c82 <cprintf>
f010c215:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c218:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c21e:	83 ec 08             	sub    $0x8,%esp
f010c221:	50                   	push   %eax
f010c222:	68 aa 6f 13 f0       	push   $0xf0136faa
f010c227:	e8 56 4a ff ff       	call   f0100c82 <cprintf>
f010c22c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c22f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c232:	8b 40 30             	mov    0x30(%eax),%eax
f010c235:	83 ec 08             	sub    $0x8,%esp
f010c238:	50                   	push   %eax
f010c239:	68 b9 6f 13 f0       	push   $0xf0136fb9
f010c23e:	e8 3f 4a ff ff       	call   f0100c82 <cprintf>
f010c243:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c246:	8b 45 08             	mov    0x8(%ebp),%eax
f010c249:	8b 40 34             	mov    0x34(%eax),%eax
f010c24c:	0f b7 c0             	movzwl %ax,%eax
f010c24f:	83 ec 08             	sub    $0x8,%esp
f010c252:	50                   	push   %eax
f010c253:	68 c8 6f 13 f0       	push   $0xf0136fc8
f010c258:	e8 25 4a ff ff       	call   f0100c82 <cprintf>
f010c25d:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c260:	8b 45 08             	mov    0x8(%ebp),%eax
f010c263:	8b 40 38             	mov    0x38(%eax),%eax
f010c266:	83 ec 08             	sub    $0x8,%esp
f010c269:	50                   	push   %eax
f010c26a:	68 db 6f 13 f0       	push   $0xf0136fdb
f010c26f:	e8 0e 4a ff ff       	call   f0100c82 <cprintf>
f010c274:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c277:	8b 45 08             	mov    0x8(%ebp),%eax
f010c27a:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c27d:	83 ec 08             	sub    $0x8,%esp
f010c280:	50                   	push   %eax
f010c281:	68 ea 6f 13 f0       	push   $0xf0136fea
f010c286:	e8 f7 49 ff ff       	call   f0100c82 <cprintf>
f010c28b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c28e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c291:	8b 40 40             	mov    0x40(%eax),%eax
f010c294:	0f b7 c0             	movzwl %ax,%eax
f010c297:	83 ec 08             	sub    $0x8,%esp
f010c29a:	50                   	push   %eax
f010c29b:	68 f9 6f 13 f0       	push   $0xf0136ff9
f010c2a0:	e8 dd 49 ff ff       	call   f0100c82 <cprintf>
f010c2a5:	83 c4 10             	add    $0x10,%esp
}
f010c2a8:	90                   	nop
f010c2a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c2ac:	c9                   	leave  
f010c2ad:	c3                   	ret    

f010c2ae <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c2ae:	55                   	push   %ebp
f010c2af:	89 e5                	mov    %esp,%ebp
f010c2b1:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c2b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b7:	8b 00                	mov    (%eax),%eax
f010c2b9:	83 ec 08             	sub    $0x8,%esp
f010c2bc:	50                   	push   %eax
f010c2bd:	68 0c 70 13 f0       	push   $0xf013700c
f010c2c2:	e8 bb 49 ff ff       	call   f0100c82 <cprintf>
f010c2c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2cd:	8b 40 04             	mov    0x4(%eax),%eax
f010c2d0:	83 ec 08             	sub    $0x8,%esp
f010c2d3:	50                   	push   %eax
f010c2d4:	68 1b 70 13 f0       	push   $0xf013701b
f010c2d9:	e8 a4 49 ff ff       	call   f0100c82 <cprintf>
f010c2de:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e4:	8b 40 08             	mov    0x8(%eax),%eax
f010c2e7:	83 ec 08             	sub    $0x8,%esp
f010c2ea:	50                   	push   %eax
f010c2eb:	68 2a 70 13 f0       	push   $0xf013702a
f010c2f0:	e8 8d 49 ff ff       	call   f0100c82 <cprintf>
f010c2f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c2f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2fb:	8b 40 0c             	mov    0xc(%eax),%eax
f010c2fe:	83 ec 08             	sub    $0x8,%esp
f010c301:	50                   	push   %eax
f010c302:	68 39 70 13 f0       	push   $0xf0137039
f010c307:	e8 76 49 ff ff       	call   f0100c82 <cprintf>
f010c30c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c30f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c312:	8b 40 10             	mov    0x10(%eax),%eax
f010c315:	83 ec 08             	sub    $0x8,%esp
f010c318:	50                   	push   %eax
f010c319:	68 48 70 13 f0       	push   $0xf0137048
f010c31e:	e8 5f 49 ff ff       	call   f0100c82 <cprintf>
f010c323:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c326:	8b 45 08             	mov    0x8(%ebp),%eax
f010c329:	8b 40 14             	mov    0x14(%eax),%eax
f010c32c:	83 ec 08             	sub    $0x8,%esp
f010c32f:	50                   	push   %eax
f010c330:	68 57 70 13 f0       	push   $0xf0137057
f010c335:	e8 48 49 ff ff       	call   f0100c82 <cprintf>
f010c33a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c33d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c340:	8b 40 18             	mov    0x18(%eax),%eax
f010c343:	83 ec 08             	sub    $0x8,%esp
f010c346:	50                   	push   %eax
f010c347:	68 66 70 13 f0       	push   $0xf0137066
f010c34c:	e8 31 49 ff ff       	call   f0100c82 <cprintf>
f010c351:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c354:	8b 45 08             	mov    0x8(%ebp),%eax
f010c357:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c35a:	83 ec 08             	sub    $0x8,%esp
f010c35d:	50                   	push   %eax
f010c35e:	68 75 70 13 f0       	push   $0xf0137075
f010c363:	e8 1a 49 ff ff       	call   f0100c82 <cprintf>
f010c368:	83 c4 10             	add    $0x10,%esp
}
f010c36b:	90                   	nop
f010c36c:	c9                   	leave  
f010c36d:	c3                   	ret    

f010c36e <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c36e:	55                   	push   %ebp
f010c36f:	89 e5                	mov    %esp,%ebp
f010c371:	57                   	push   %edi
f010c372:	56                   	push   %esi
f010c373:	53                   	push   %ebx
f010c374:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c377:	8b 45 08             	mov    0x8(%ebp),%eax
f010c37a:	8b 40 28             	mov    0x28(%eax),%eax
f010c37d:	83 f8 0e             	cmp    $0xe,%eax
f010c380:	75 29                	jne    f010c3ab <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c382:	83 ec 0c             	sub    $0xc,%esp
f010c385:	6a 01                	push   $0x1
f010c387:	e8 6b 18 00 00       	call   f010dbf7 <isPageReplacmentAlgorithmLRU>
f010c38c:	83 c4 10             	add    $0x10,%esp
f010c38f:	85 c0                	test   %eax,%eax
f010c391:	74 05                	je     f010c398 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c393:	e8 bd 95 ff ff       	call   f0105955 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c398:	83 ec 0c             	sub    $0xc,%esp
f010c39b:	ff 75 08             	pushl  0x8(%ebp)
f010c39e:	e8 3b 02 00 00       	call   f010c5de <fault_handler>
f010c3a3:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c3a6:	e9 a5 00 00 00       	jmp    f010c450 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c3ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ae:	8b 40 28             	mov    0x28(%eax),%eax
f010c3b1:	83 f8 30             	cmp    $0x30,%eax
f010c3b4:	75 42                	jne    f010c3f8 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c3b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b9:	8b 78 04             	mov    0x4(%eax),%edi
f010c3bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3bf:	8b 30                	mov    (%eax),%esi
f010c3c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3c4:	8b 58 10             	mov    0x10(%eax),%ebx
f010c3c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ca:	8b 48 18             	mov    0x18(%eax),%ecx
f010c3cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d0:	8b 50 14             	mov    0x14(%eax),%edx
f010c3d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d6:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c3d9:	83 ec 08             	sub    $0x8,%esp
f010c3dc:	57                   	push   %edi
f010c3dd:	56                   	push   %esi
f010c3de:	53                   	push   %ebx
f010c3df:	51                   	push   %ecx
f010c3e0:	52                   	push   %edx
f010c3e1:	50                   	push   %eax
f010c3e2:	e8 5b 0f 00 00       	call   f010d342 <syscall>
f010c3e7:	83 c4 20             	add    $0x20,%esp
f010c3ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c3ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c3f3:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c3f6:	eb 58                	jmp    f010c450 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fb:	8b 40 28             	mov    0x28(%eax),%eax
f010c3fe:	83 f8 08             	cmp    $0x8,%eax
f010c401:	75 17                	jne    f010c41a <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c403:	83 ec 04             	sub    $0x4,%esp
f010c406:	68 84 70 13 f0       	push   $0xf0137084
f010c40b:	68 e7 00 00 00       	push   $0xe7
f010c410:	68 93 70 13 f0       	push   $0xf0137093
f010c415:	e8 e1 3d ff ff       	call   f01001fb <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c41a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c41d:	8b 40 28             	mov    0x28(%eax),%eax
f010c420:	83 f8 20             	cmp    $0x20,%eax
f010c423:	75 07                	jne    f010c42c <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c425:	e8 0a 95 ff ff       	call   f0105934 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c42a:	eb 24                	jmp    f010c450 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c42c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c42f:	8b 40 34             	mov    0x34(%eax),%eax
f010c432:	66 83 f8 08          	cmp    $0x8,%ax
f010c436:	75 17                	jne    f010c44f <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c438:	83 ec 04             	sub    $0x4,%esp
f010c43b:	68 a4 70 13 f0       	push   $0xf01370a4
f010c440:	68 f4 00 00 00       	push   $0xf4
f010c445:	68 93 70 13 f0       	push   $0xf0137093
f010c44a:	e8 ac 3d ff ff       	call   f01001fb <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010c44f:	90                   	nop
		}
	}
	return;
}
f010c450:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c453:	5b                   	pop    %ebx
f010c454:	5e                   	pop    %esi
f010c455:	5f                   	pop    %edi
f010c456:	5d                   	pop    %ebp
f010c457:	c3                   	ret    

f010c458 <trap>:

void trap(struct Trapframe *tf)
{
f010c458:	55                   	push   %ebp
f010c459:	89 e5                	mov    %esp,%ebp
f010c45b:	57                   	push   %edi
f010c45c:	56                   	push   %esi
f010c45d:	53                   	push   %ebx
f010c45e:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c461:	e8 a2 7c ff ff       	call   f0104108 <kclock_stop>

	int userTrap = 0;
f010c466:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c46d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c470:	8b 40 34             	mov    0x34(%eax),%eax
f010c473:	0f b7 c0             	movzwl %ax,%eax
f010c476:	83 e0 03             	and    $0x3,%eax
f010c479:	83 f8 03             	cmp    $0x3,%eax
f010c47c:	75 49                	jne    f010c4c7 <trap+0x6f>
		assert(curenv);
f010c47e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c483:	85 c0                	test   %eax,%eax
f010c485:	75 19                	jne    f010c4a0 <trap+0x48>
f010c487:	68 bd 70 13 f0       	push   $0xf01370bd
f010c48c:	68 c4 70 13 f0       	push   $0xf01370c4
f010c491:	68 04 01 00 00       	push   $0x104
f010c496:	68 93 70 13 f0       	push   $0xf0137093
f010c49b:	e8 5b 3d ff ff       	call   f01001fb <_panic>
		curenv->env_tf = *tf;
f010c4a0:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c4a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4a9:	89 c3                	mov    %eax,%ebx
f010c4ab:	b8 11 00 00 00       	mov    $0x11,%eax
f010c4b0:	89 d7                	mov    %edx,%edi
f010c4b2:	89 de                	mov    %ebx,%esi
f010c4b4:	89 c1                	mov    %eax,%ecx
f010c4b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c4b8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4bd:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c4c0:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ca:	8b 40 28             	mov    0x28(%eax),%eax
f010c4cd:	83 f8 20             	cmp    $0x20,%eax
f010c4d0:	75 40                	jne    f010c512 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c4d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c4d6:	0f 84 a6 00 00 00    	je     f010c582 <trap+0x12a>
		{
			assert(curenv);
f010c4dc:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4e1:	85 c0                	test   %eax,%eax
f010c4e3:	75 19                	jne    f010c4fe <trap+0xa6>
f010c4e5:	68 bd 70 13 f0       	push   $0xf01370bd
f010c4ea:	68 c4 70 13 f0       	push   $0xf01370c4
f010c4ef:	68 10 01 00 00       	push   $0x110
f010c4f4:	68 93 70 13 f0       	push   $0xf0137093
f010c4f9:	e8 fd 3c ff ff       	call   f01001fb <_panic>
			curenv->nClocks++ ;
f010c4fe:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c503:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c509:	42                   	inc    %edx
f010c50a:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c510:	eb 70                	jmp    f010c582 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c512:	8b 45 08             	mov    0x8(%ebp),%eax
f010c515:	8b 40 28             	mov    0x28(%eax),%eax
f010c518:	83 f8 0e             	cmp    $0xe,%eax
f010c51b:	75 65                	jne    f010c582 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c51d:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c522:	84 c0                	test   %al,%al
f010c524:	74 5c                	je     f010c582 <trap+0x12a>
			if (userTrap){
f010c526:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c52a:	74 2c                	je     f010c558 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c52c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c531:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c537:	8b 52 30             	mov    0x30(%edx),%edx
f010c53a:	89 d1                	mov    %edx,%ecx
f010c53c:	8a 15 a8 7a 65 f0    	mov    0xf0657aa8,%dl
f010c542:	0f b6 d2             	movzbl %dl,%edx
f010c545:	01 ca                	add    %ecx,%edx
f010c547:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c54a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c54f:	83 ec 0c             	sub    $0xc,%esp
f010c552:	50                   	push   %eax
f010c553:	e8 a2 d4 ff ff       	call   f01099fa <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c558:	8b 45 08             	mov    0x8(%ebp),%eax
f010c55b:	8b 40 30             	mov    0x30(%eax),%eax
f010c55e:	89 c2                	mov    %eax,%edx
f010c560:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c565:	0f b6 c0             	movzbl %al,%eax
f010c568:	01 d0                	add    %edx,%eax
f010c56a:	89 c2                	mov    %eax,%edx
f010c56c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c56f:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c572:	e8 bc 7b ff ff       	call   f0104133 <kclock_resume>
				env_pop_tf(tf);
f010c577:	83 ec 0c             	sub    $0xc,%esp
f010c57a:	ff 75 08             	pushl  0x8(%ebp)
f010c57d:	e8 db d5 ff ff       	call   f0109b5d <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c582:	83 ec 0c             	sub    $0xc,%esp
f010c585:	ff 75 08             	pushl  0x8(%ebp)
f010c588:	e8 e1 fd ff ff       	call   f010c36e <trap_dispatch>
f010c58d:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c590:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c594:	74 3d                	je     f010c5d3 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c596:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c59b:	85 c0                	test   %eax,%eax
f010c59d:	74 0d                	je     f010c5ac <trap+0x154>
f010c59f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c5a4:	8b 40 54             	mov    0x54(%eax),%eax
f010c5a7:	83 f8 02             	cmp    $0x2,%eax
f010c5aa:	74 19                	je     f010c5c5 <trap+0x16d>
f010c5ac:	68 dc 70 13 f0       	push   $0xf01370dc
f010c5b1:	68 c4 70 13 f0       	push   $0xf01370c4
f010c5b6:	68 25 01 00 00       	push   $0x125
f010c5bb:	68 93 70 13 f0       	push   $0xf0137093
f010c5c0:	e8 36 3c ff ff       	call   f01001fb <_panic>
		env_run(curenv);
f010c5c5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c5ca:	83 ec 0c             	sub    $0xc,%esp
f010c5cd:	50                   	push   %eax
f010c5ce:	e8 27 d4 ff ff       	call   f01099fa <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c5d3:	83 ec 0c             	sub    $0xc,%esp
f010c5d6:	ff 75 08             	pushl  0x8(%ebp)
f010c5d9:	e8 7f d5 ff ff       	call   f0109b5d <env_pop_tf>

f010c5de <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010c5de:	55                   	push   %ebp
f010c5df:	89 e5                	mov    %esp,%ebp
f010c5e1:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c5e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c5eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ee:	8b 40 34             	mov    0x34(%eax),%eax
f010c5f1:	0f b7 c0             	movzwl %ax,%eax
f010c5f4:	83 e0 03             	and    $0x3,%eax
f010c5f7:	83 f8 03             	cmp    $0x3,%eax
f010c5fa:	75 07                	jne    f010c603 <fault_handler+0x25>
		userTrap = 1;
f010c5fc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c603:	0f 20 d0             	mov    %cr2,%eax
f010c606:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010c609:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c60c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c60f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c613:	75 29                	jne    f010c63e <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c615:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c61c:	77 40                	ja     f010c65e <fault_handler+0x80>
f010c61e:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c625:	76 37                	jbe    f010c65e <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010c627:	83 ec 04             	sub    $0x4,%esp
f010c62a:	68 0c 71 13 f0       	push   $0xf013710c
f010c62f:	68 42 01 00 00       	push   $0x142
f010c634:	68 93 70 13 f0       	push   $0xf0137093
f010c639:	e8 bd 3b ff ff       	call   f01001fb <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c63e:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c645:	76 17                	jbe    f010c65e <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010c647:	83 ec 04             	sub    $0x4,%esp
f010c64a:	68 30 71 13 f0       	push   $0xf0137130
f010c64f:	68 48 01 00 00       	push   $0x148
f010c654:	68 93 70 13 f0       	push   $0xf0137093
f010c659:	e8 9d 3b ff ff       	call   f01001fb <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c65e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c663:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c666:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c66b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c66e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c671:	c1 ea 16             	shr    $0x16,%edx
f010c674:	c1 e2 02             	shl    $0x2,%edx
f010c677:	01 d0                	add    %edx,%eax
f010c679:	8b 00                	mov    (%eax),%eax
f010c67b:	83 e0 01             	and    $0x1,%eax
f010c67e:	85 c0                	test   %eax,%eax
f010c680:	75 28                	jne    f010c6aa <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c682:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c685:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c68b:	8d 50 01             	lea    0x1(%eax),%edx
f010c68e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c691:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c697:	83 ec 08             	sub    $0x8,%esp
f010c69a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c69d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c6a0:	e8 37 16 00 00       	call   f010dcdc <table_fault_handler>
f010c6a5:	83 c4 10             	add    $0x10,%esp
f010c6a8:	eb 42                	jmp    f010c6ec <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c6aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6ad:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c6b3:	8d 50 01             	lea    0x1(%eax),%edx
f010c6b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6b9:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c6bf:	e8 f6 15 00 00       	call   f010dcba <isBufferingEnabled>
f010c6c4:	84 c0                	test   %al,%al
f010c6c6:	74 13                	je     f010c6db <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c6c8:	83 ec 08             	sub    $0x8,%esp
f010c6cb:	ff 75 ec             	pushl  -0x14(%ebp)
f010c6ce:	ff 75 e8             	pushl  -0x18(%ebp)
f010c6d1:	e8 41 16 00 00       	call   f010dd17 <__page_fault_handler_with_buffering>
f010c6d6:	83 c4 10             	add    $0x10,%esp
f010c6d9:	eb 11                	jmp    f010c6ec <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c6db:	83 ec 08             	sub    $0x8,%esp
f010c6de:	ff 75 ec             	pushl  -0x14(%ebp)
f010c6e1:	ff 75 e8             	pushl  -0x18(%ebp)
f010c6e4:	e8 14 16 00 00       	call   f010dcfd <page_fault_handler>
f010c6e9:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c6ec:	0f 20 d8             	mov    %cr3,%eax
f010c6ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c6f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c6f5:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c6f8:	90                   	nop
f010c6f9:	c9                   	leave  
f010c6fa:	c3                   	ret    
f010c6fb:	90                   	nop

f010c6fc <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c6fc:	6a 0e                	push   $0xe
f010c6fe:	e9 ed 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c703:	90                   	nop

f010c704 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c704:	6a 00                	push   $0x0
f010c706:	6a 30                	push   $0x30
f010c708:	e9 e3 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c70d:	90                   	nop

f010c70e <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c70e:	6a 08                	push   $0x8
f010c710:	e9 db 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c715:	90                   	nop

f010c716 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c716:	6a 00                	push   $0x0
f010c718:	6a 00                	push   $0x0
f010c71a:	e9 d1 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c71f:	90                   	nop

f010c720 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c720:	6a 00                	push   $0x0
f010c722:	6a 01                	push   $0x1
f010c724:	e9 c7 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c729:	90                   	nop

f010c72a <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c72a:	6a 00                	push   $0x0
f010c72c:	6a 02                	push   $0x2
f010c72e:	e9 bd 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c733:	90                   	nop

f010c734 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c734:	6a 00                	push   $0x0
f010c736:	6a 03                	push   $0x3
f010c738:	e9 b3 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c73d:	90                   	nop

f010c73e <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c73e:	6a 00                	push   $0x0
f010c740:	6a 04                	push   $0x4
f010c742:	e9 a9 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c747:	90                   	nop

f010c748 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c748:	6a 00                	push   $0x0
f010c74a:	6a 05                	push   $0x5
f010c74c:	e9 9f 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c751:	90                   	nop

f010c752 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c752:	6a 00                	push   $0x0
f010c754:	6a 06                	push   $0x6
f010c756:	e9 95 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c75b:	90                   	nop

f010c75c <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c75c:	6a 00                	push   $0x0
f010c75e:	6a 07                	push   $0x7
f010c760:	e9 8b 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c765:	90                   	nop

f010c766 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c766:	6a 0a                	push   $0xa
f010c768:	e9 83 00 00 00       	jmp    f010c7f0 <_alltraps>
f010c76d:	90                   	nop

f010c76e <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c76e:	6a 0b                	push   $0xb
f010c770:	eb 7e                	jmp    f010c7f0 <_alltraps>

f010c772 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c772:	6a 0c                	push   $0xc
f010c774:	eb 7a                	jmp    f010c7f0 <_alltraps>

f010c776 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c776:	6a 0d                	push   $0xd
f010c778:	eb 76                	jmp    f010c7f0 <_alltraps>

f010c77a <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c77a:	6a 00                	push   $0x0
f010c77c:	6a 10                	push   $0x10
f010c77e:	eb 70                	jmp    f010c7f0 <_alltraps>

f010c780 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c780:	6a 11                	push   $0x11
f010c782:	eb 6c                	jmp    f010c7f0 <_alltraps>

f010c784 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c784:	6a 00                	push   $0x0
f010c786:	6a 12                	push   $0x12
f010c788:	eb 66                	jmp    f010c7f0 <_alltraps>

f010c78a <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c78a:	6a 00                	push   $0x0
f010c78c:	6a 13                	push   $0x13
f010c78e:	eb 60                	jmp    f010c7f0 <_alltraps>

f010c790 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c790:	6a 00                	push   $0x0
f010c792:	6a 20                	push   $0x20
f010c794:	eb 5a                	jmp    f010c7f0 <_alltraps>

f010c796 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c796:	6a 00                	push   $0x0
f010c798:	6a 21                	push   $0x21
f010c79a:	eb 54                	jmp    f010c7f0 <_alltraps>

f010c79c <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c79c:	6a 00                	push   $0x0
f010c79e:	6a 22                	push   $0x22
f010c7a0:	eb 4e                	jmp    f010c7f0 <_alltraps>

f010c7a2 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c7a2:	6a 00                	push   $0x0
f010c7a4:	6a 23                	push   $0x23
f010c7a6:	eb 48                	jmp    f010c7f0 <_alltraps>

f010c7a8 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c7a8:	6a 00                	push   $0x0
f010c7aa:	6a 24                	push   $0x24
f010c7ac:	eb 42                	jmp    f010c7f0 <_alltraps>

f010c7ae <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c7ae:	6a 00                	push   $0x0
f010c7b0:	6a 25                	push   $0x25
f010c7b2:	eb 3c                	jmp    f010c7f0 <_alltraps>

f010c7b4 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c7b4:	6a 00                	push   $0x0
f010c7b6:	6a 26                	push   $0x26
f010c7b8:	eb 36                	jmp    f010c7f0 <_alltraps>

f010c7ba <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c7ba:	6a 00                	push   $0x0
f010c7bc:	6a 27                	push   $0x27
f010c7be:	eb 30                	jmp    f010c7f0 <_alltraps>

f010c7c0 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c7c0:	6a 00                	push   $0x0
f010c7c2:	6a 28                	push   $0x28
f010c7c4:	eb 2a                	jmp    f010c7f0 <_alltraps>

f010c7c6 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c7c6:	6a 00                	push   $0x0
f010c7c8:	6a 29                	push   $0x29
f010c7ca:	eb 24                	jmp    f010c7f0 <_alltraps>

f010c7cc <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c7cc:	6a 00                	push   $0x0
f010c7ce:	6a 2a                	push   $0x2a
f010c7d0:	eb 1e                	jmp    f010c7f0 <_alltraps>

f010c7d2 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c7d2:	6a 00                	push   $0x0
f010c7d4:	6a 2b                	push   $0x2b
f010c7d6:	eb 18                	jmp    f010c7f0 <_alltraps>

f010c7d8 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c7d8:	6a 00                	push   $0x0
f010c7da:	6a 2c                	push   $0x2c
f010c7dc:	eb 12                	jmp    f010c7f0 <_alltraps>

f010c7de <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c7de:	6a 00                	push   $0x0
f010c7e0:	6a 2d                	push   $0x2d
f010c7e2:	eb 0c                	jmp    f010c7f0 <_alltraps>

f010c7e4 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c7e4:	6a 00                	push   $0x0
f010c7e6:	6a 2e                	push   $0x2e
f010c7e8:	eb 06                	jmp    f010c7f0 <_alltraps>

f010c7ea <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c7ea:	6a 00                	push   $0x0
f010c7ec:	6a 2f                	push   $0x2f
f010c7ee:	eb 00                	jmp    f010c7f0 <_alltraps>

f010c7f0 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c7f0:	1e                   	push   %ds
push %es
f010c7f1:	06                   	push   %es
pushal
f010c7f2:	60                   	pusha  

mov $(GD_KD), %ax
f010c7f3:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c7f7:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c7f9:	8e c0                	mov    %eax,%es

push %esp
f010c7fb:	54                   	push   %esp

call trap
f010c7fc:	e8 57 fc ff ff       	call   f010c458 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c801:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c802:	61                   	popa   
pop %es
f010c803:	07                   	pop    %es
pop %ds
f010c804:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c805:	83 c4 08             	add    $0x8,%esp

iret
f010c808:	cf                   	iret   

f010c809 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c809:	55                   	push   %ebp
f010c80a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c80c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c80f:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010c815:	29 d0                	sub    %edx,%eax
f010c817:	c1 f8 03             	sar    $0x3,%eax
f010c81a:	89 c2                	mov    %eax,%edx
f010c81c:	89 d0                	mov    %edx,%eax
f010c81e:	c1 e0 02             	shl    $0x2,%eax
f010c821:	01 d0                	add    %edx,%eax
f010c823:	c1 e0 02             	shl    $0x2,%eax
f010c826:	01 d0                	add    %edx,%eax
f010c828:	c1 e0 02             	shl    $0x2,%eax
f010c82b:	01 d0                	add    %edx,%eax
f010c82d:	89 c1                	mov    %eax,%ecx
f010c82f:	c1 e1 08             	shl    $0x8,%ecx
f010c832:	01 c8                	add    %ecx,%eax
f010c834:	89 c1                	mov    %eax,%ecx
f010c836:	c1 e1 10             	shl    $0x10,%ecx
f010c839:	01 c8                	add    %ecx,%eax
f010c83b:	01 c0                	add    %eax,%eax
f010c83d:	01 d0                	add    %edx,%eax
}
f010c83f:	5d                   	pop    %ebp
f010c840:	c3                   	ret    

f010c841 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c841:	55                   	push   %ebp
f010c842:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c844:	ff 75 08             	pushl  0x8(%ebp)
f010c847:	e8 bd ff ff ff       	call   f010c809 <to_frame_number>
f010c84c:	83 c4 04             	add    $0x4,%esp
f010c84f:	c1 e0 0c             	shl    $0xc,%eax
}
f010c852:	c9                   	leave  
f010c853:	c3                   	ret    

f010c854 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c854:	55                   	push   %ebp
f010c855:	89 e5                	mov    %esp,%ebp
f010c857:	83 ec 18             	sub    $0x18,%esp
f010c85a:	8b 45 10             	mov    0x10(%ebp),%eax
f010c85d:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c860:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c864:	74 26                	je     f010c88c <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c866:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c86b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c86e:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c874:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c87a:	83 ec 04             	sub    $0x4,%esp
f010c87d:	50                   	push   %eax
f010c87e:	52                   	push   %edx
f010c87f:	68 f0 72 13 f0       	push   $0xf01372f0
f010c884:	e8 f9 43 ff ff       	call   f0100c82 <cprintf>
f010c889:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c88c:	83 ec 04             	sub    $0x4,%esp
f010c88f:	ff 75 08             	pushl  0x8(%ebp)
f010c892:	ff 75 0c             	pushl  0xc(%ebp)
f010c895:	68 f9 72 13 f0       	push   $0xf01372f9
f010c89a:	e8 e3 43 ff ff       	call   f0100c82 <cprintf>
f010c89f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c8a2:	90                   	nop
f010c8a3:	c9                   	leave  
f010c8a4:	c3                   	ret    

f010c8a5 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c8a5:	55                   	push   %ebp
f010c8a6:	89 e5                	mov    %esp,%ebp
f010c8a8:	83 ec 18             	sub    $0x18,%esp
f010c8ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ae:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c8b1:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c8b5:	83 ec 08             	sub    $0x8,%esp
f010c8b8:	50                   	push   %eax
f010c8b9:	68 fe 72 13 f0       	push   $0xf01372fe
f010c8be:	e8 bf 43 ff ff       	call   f0100c82 <cprintf>
f010c8c3:	83 c4 10             	add    $0x10,%esp
}
f010c8c6:	90                   	nop
f010c8c7:	c9                   	leave  
f010c8c8:	c3                   	ret    

f010c8c9 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c8c9:	55                   	push   %ebp
f010c8ca:	89 e5                	mov    %esp,%ebp
f010c8cc:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c8cf:	e8 e8 41 ff ff       	call   f0100abc <cons_getc2>
f010c8d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c8d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c8da:	c9                   	leave  
f010c8db:	c3                   	ret    

f010c8dc <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c8dc:	55                   	push   %ebp
f010c8dd:	89 e5                	mov    %esp,%ebp
f010c8df:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c8e2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c8e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c8ea:	83 ec 0c             	sub    $0xc,%esp
f010c8ed:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c8f0:	50                   	push   %eax
f010c8f1:	e8 25 9f ff ff       	call   f010681b <allocate_frame>
f010c8f6:	83 c4 10             	add    $0x10,%esp
f010c8f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c8fc:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c900:	75 08                	jne    f010c90a <__sys_allocate_page+0x2e>
		return r ;
f010c902:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c905:	e9 e9 00 00 00       	jmp    f010c9f3 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c90a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c90d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c912:	77 0c                	ja     f010c920 <__sys_allocate_page+0x44>
f010c914:	8b 45 08             	mov    0x8(%ebp),%eax
f010c917:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c91c:	85 c0                	test   %eax,%eax
f010c91e:	74 0a                	je     f010c92a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c920:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c925:	e9 c9 00 00 00       	jmp    f010c9f3 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c92a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c92d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c932:	83 f8 04             	cmp    $0x4,%eax
f010c935:	74 0a                	je     f010c941 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c937:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c93c:	e9 b2 00 00 00       	jmp    f010c9f3 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c941:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c944:	83 ec 0c             	sub    $0xc,%esp
f010c947:	50                   	push   %eax
f010c948:	e8 f4 fe ff ff       	call   f010c841 <to_physical_address>
f010c94d:	83 c4 10             	add    $0x10,%esp
f010c950:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010c953:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c956:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c959:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c95c:	6a 02                	push   $0x2
f010c95e:	68 00 00 80 ef       	push   $0xef800000
f010c963:	52                   	push   %edx
f010c964:	50                   	push   %eax
f010c965:	e8 00 a3 ff ff       	call   f0106c6a <map_frame>
f010c96a:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010c96d:	83 ec 04             	sub    $0x4,%esp
f010c970:	68 00 10 00 00       	push   $0x1000
f010c975:	6a 00                	push   $0x0
f010c977:	68 00 00 80 ef       	push   $0xef800000
f010c97c:	e8 ed 45 02 00       	call   f0130f6e <memset>
f010c981:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010c984:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c987:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c98a:	8b 40 08             	mov    0x8(%eax),%eax
f010c98d:	40                   	inc    %eax
f010c98e:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010c992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c995:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c998:	83 ec 08             	sub    $0x8,%esp
f010c99b:	68 00 00 80 ef       	push   $0xef800000
f010c9a0:	50                   	push   %eax
f010c9a1:	e8 f9 a3 ff ff       	call   f0106d9f <unmap_frame>
f010c9a6:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010c9a9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c9ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9af:	8b 40 08             	mov    0x8(%eax),%eax
f010c9b2:	48                   	dec    %eax
f010c9b3:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c9b7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c9ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c9bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c9c3:	ff 75 0c             	pushl  0xc(%ebp)
f010c9c6:	51                   	push   %ecx
f010c9c7:	52                   	push   %edx
f010c9c8:	50                   	push   %eax
f010c9c9:	e8 9c a2 ff ff       	call   f0106c6a <map_frame>
f010c9ce:	83 c4 10             	add    $0x10,%esp
f010c9d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c9d4:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c9d8:	75 14                	jne    f010c9ee <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010c9da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9dd:	83 ec 0c             	sub    $0xc,%esp
f010c9e0:	50                   	push   %eax
f010c9e1:	e8 c4 9f ff ff       	call   f01069aa <decrement_references>
f010c9e6:	83 c4 10             	add    $0x10,%esp
		return r;
f010c9e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9ec:	eb 05                	jmp    f010c9f3 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010c9ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c9f3:	c9                   	leave  
f010c9f4:	c3                   	ret    

f010c9f5 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c9f5:	55                   	push   %ebp
f010c9f6:	89 e5                	mov    %esp,%ebp
f010c9f8:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c9fb:	83 ec 04             	sub    $0x4,%esp
f010c9fe:	68 01 73 13 f0       	push   $0xf0137301
f010ca03:	68 b3 00 00 00       	push   $0xb3
f010ca08:	68 1f 73 13 f0       	push   $0xf013731f
f010ca0d:	e8 e9 37 ff ff       	call   f01001fb <_panic>

f010ca12 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010ca12:	55                   	push   %ebp
f010ca13:	89 e5                	mov    %esp,%ebp
f010ca15:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010ca18:	83 ec 04             	sub    $0x4,%esp
f010ca1b:	68 34 73 13 f0       	push   $0xf0137334
f010ca20:	68 c3 00 00 00       	push   $0xc3
f010ca25:	68 1f 73 13 f0       	push   $0xf013731f
f010ca2a:	e8 cc 37 ff ff       	call   f01001fb <_panic>

f010ca2f <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010ca2f:	55                   	push   %ebp
f010ca30:	89 e5                	mov    %esp,%ebp
f010ca32:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010ca35:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca3a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ca3d:	83 ec 04             	sub    $0x4,%esp
f010ca40:	ff 75 0c             	pushl  0xc(%ebp)
f010ca43:	ff 75 08             	pushl  0x8(%ebp)
f010ca46:	50                   	push   %eax
f010ca47:	e8 82 c2 ff ff       	call   f0108cce <calculate_required_frames>
f010ca4c:	83 c4 10             	add    $0x10,%esp
}
f010ca4f:	c9                   	leave  
f010ca50:	c3                   	ret    

f010ca51 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010ca51:	55                   	push   %ebp
f010ca52:	89 e5                	mov    %esp,%ebp
f010ca54:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca57:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca5a:	83 ec 0c             	sub    $0xc,%esp
f010ca5d:	50                   	push   %eax
f010ca5e:	e8 a1 a4 ff ff       	call   f0106f04 <calculate_available_frames>
f010ca63:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010ca66:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ca69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca6c:	01 d0                	add    %edx,%eax
}
f010ca6e:	c9                   	leave  
f010ca6f:	c3                   	ret    

f010ca70 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010ca70:	55                   	push   %ebp
f010ca71:	89 e5                	mov    %esp,%ebp
f010ca73:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca76:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca79:	83 ec 0c             	sub    $0xc,%esp
f010ca7c:	50                   	push   %eax
f010ca7d:	e8 82 a4 ff ff       	call   f0106f04 <calculate_available_frames>
f010ca82:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ca85:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca88:	c9                   	leave  
f010ca89:	c3                   	ret    

f010ca8a <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010ca8a:	55                   	push   %ebp
f010ca8b:	89 e5                	mov    %esp,%ebp
f010ca8d:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca90:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca93:	83 ec 0c             	sub    $0xc,%esp
f010ca96:	50                   	push   %eax
f010ca97:	e8 68 a4 ff ff       	call   f0106f04 <calculate_available_frames>
f010ca9c:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ca9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010caa2:	c9                   	leave  
f010caa3:	c3                   	ret    

f010caa4 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010caa4:	55                   	push   %ebp
f010caa5:	89 e5                	mov    %esp,%ebp
f010caa7:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010caaa:	83 ec 0c             	sub    $0xc,%esp
f010caad:	ff 75 08             	pushl  0x8(%ebp)
f010cab0:	e8 d6 31 02 00       	call   f012fc8b <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cab5:	83 c4 10             	add    $0x10,%esp
}
f010cab8:	c9                   	leave  
f010cab9:	c3                   	ret    

f010caba <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010caba:	55                   	push   %ebp
f010cabb:	89 e5                	mov    %esp,%ebp
f010cabd:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cac0:	e8 1e 31 02 00       	call   f012fbe3 <scarce_memory>
}
f010cac5:	90                   	nop
f010cac6:	c9                   	leave  
f010cac7:	c3                   	ret    

f010cac8 <sys_clearFFL>:

void sys_clearFFL()
{
f010cac8:	55                   	push   %ebp
f010cac9:	89 e5                	mov    %esp,%ebp
f010cacb:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cace:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010cad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cad6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cadd:	eb 12                	jmp    f010caf1 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cadf:	83 ec 0c             	sub    $0xc,%esp
f010cae2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cae5:	50                   	push   %eax
f010cae6:	e8 30 9d ff ff       	call   f010681b <allocate_frame>
f010caeb:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010caee:	ff 45 f4             	incl   -0xc(%ebp)
f010caf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010caf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010caf7:	7c e6                	jl     f010cadf <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010caf9:	90                   	nop
f010cafa:	c9                   	leave  
f010cafb:	c3                   	ret    

f010cafc <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cafc:	55                   	push   %ebp
f010cafd:	89 e5                	mov    %esp,%ebp
f010caff:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cb02:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb07:	83 ec 0c             	sub    $0xc,%esp
f010cb0a:	50                   	push   %eax
f010cb0b:	e8 8c 71 ff ff       	call   f0103c9c <pf_calculate_allocated_pages>
f010cb10:	83 c4 10             	add    $0x10,%esp
}
f010cb13:	c9                   	leave  
f010cb14:	c3                   	ret    

f010cb15 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cb15:	55                   	push   %ebp
f010cb16:	89 e5                	mov    %esp,%ebp
f010cb18:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cb1b:	e8 9a 11 00 00       	call   f010dcba <isBufferingEnabled>
f010cb20:	84 c0                	test   %al,%al
f010cb22:	74 19                	je     f010cb3d <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cb24:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb29:	83 ec 04             	sub    $0x4,%esp
f010cb2c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb2f:	ff 75 08             	pushl  0x8(%ebp)
f010cb32:	50                   	push   %eax
f010cb33:	e8 7f c2 ff ff       	call   f0108db7 <__free_user_mem_with_buffering>
f010cb38:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cb3b:	eb 18                	jmp    f010cb55 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cb3d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb42:	83 ec 04             	sub    $0x4,%esp
f010cb45:	ff 75 0c             	pushl  0xc(%ebp)
f010cb48:	ff 75 08             	pushl  0x8(%ebp)
f010cb4b:	50                   	push   %eax
f010cb4c:	e8 49 c2 ff ff       	call   f0108d9a <free_user_mem>
f010cb51:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cb54:	90                   	nop
}
f010cb55:	c9                   	leave  
f010cb56:	c3                   	ret    

f010cb57 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cb57:	55                   	push   %ebp
f010cb58:	89 e5                	mov    %esp,%ebp
f010cb5a:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cb5d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb62:	83 ec 04             	sub    $0x4,%esp
f010cb65:	ff 75 0c             	pushl  0xc(%ebp)
f010cb68:	ff 75 08             	pushl  0x8(%ebp)
f010cb6b:	50                   	push   %eax
f010cb6c:	e8 0c c2 ff ff       	call   f0108d7d <allocate_user_mem>
f010cb71:	83 c4 10             	add    $0x10,%esp
	return;
f010cb74:	90                   	nop
}
f010cb75:	c9                   	leave  
f010cb76:	c3                   	ret    

f010cb77 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cb77:	55                   	push   %ebp
f010cb78:	89 e5                	mov    %esp,%ebp
f010cb7a:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cb7d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb82:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb85:	ff 75 10             	pushl  0x10(%ebp)
f010cb88:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8b:	ff 75 08             	pushl  0x8(%ebp)
f010cb8e:	50                   	push   %eax
f010cb8f:	e8 1f bf ff ff       	call   f0108ab3 <allocate_chunk>
f010cb94:	83 c4 10             	add    $0x10,%esp
	return;
f010cb97:	90                   	nop
}
f010cb98:	c9                   	leave  
f010cb99:	c3                   	ret    

f010cb9a <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cb9a:	55                   	push   %ebp
f010cb9b:	89 e5                	mov    %esp,%ebp
f010cb9d:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cba0:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cba5:	ff 75 10             	pushl  0x10(%ebp)
f010cba8:	ff 75 0c             	pushl  0xc(%ebp)
f010cbab:	ff 75 08             	pushl  0x8(%ebp)
f010cbae:	50                   	push   %eax
f010cbaf:	e8 20 c2 ff ff       	call   f0108dd4 <move_user_mem>
f010cbb4:	83 c4 10             	add    $0x10,%esp
	return;
f010cbb7:	90                   	nop
}
f010cbb8:	c9                   	leave  
f010cbb9:	c3                   	ret    

f010cbba <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cbba:	55                   	push   %ebp
f010cbbb:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cbbd:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
}
f010cbc2:	5d                   	pop    %ebp
f010cbc3:	c3                   	ret    

f010cbc4 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cbc4:	55                   	push   %ebp
f010cbc5:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cbc7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbca:	a3 30 7b 65 f0       	mov    %eax,0xf0657b30
}
f010cbcf:	90                   	nop
f010cbd0:	5d                   	pop    %ebp
f010cbd1:	c3                   	ret    

f010cbd2 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cbd2:	55                   	push   %ebp
f010cbd3:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cbd5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbda:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010cbe0:	8b 52 38             	mov    0x38(%edx),%edx
f010cbe3:	80 e6 fd             	and    $0xfd,%dh
f010cbe6:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cbe9:	90                   	nop
f010cbea:	5d                   	pop    %ebp
f010cbeb:	c3                   	ret    

f010cbec <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cbec:	55                   	push   %ebp
f010cbed:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cbef:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbf4:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010cbfa:	8b 52 38             	mov    0x38(%edx),%edx
f010cbfd:	80 ce 02             	or     $0x2,%dh
f010cc00:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cc03:	90                   	nop
f010cc04:	5d                   	pop    %ebp
f010cc05:	c3                   	ret    

f010cc06 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cc06:	55                   	push   %ebp
f010cc07:	89 e5                	mov    %esp,%ebp
f010cc09:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cc0c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc11:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc14:	83 ec 04             	sub    $0x4,%esp
f010cc17:	ff 75 0c             	pushl  0xc(%ebp)
f010cc1a:	ff 75 08             	pushl  0x8(%ebp)
f010cc1d:	50                   	push   %eax
f010cc1e:	e8 b0 14 00 00       	call   f010e0d3 <createSemaphore>
f010cc23:	83 c4 10             	add    $0x10,%esp
}
f010cc26:	c9                   	leave  
f010cc27:	c3                   	ret    

f010cc28 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cc28:	55                   	push   %ebp
f010cc29:	89 e5                	mov    %esp,%ebp
f010cc2b:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cc2e:	83 ec 08             	sub    $0x8,%esp
f010cc31:	ff 75 0c             	pushl  0xc(%ebp)
f010cc34:	ff 75 08             	pushl  0x8(%ebp)
f010cc37:	e8 b4 14 00 00       	call   f010e0f0 <waitSemaphore>
f010cc3c:	83 c4 10             	add    $0x10,%esp
}
f010cc3f:	90                   	nop
f010cc40:	c9                   	leave  
f010cc41:	c3                   	ret    

f010cc42 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cc42:	55                   	push   %ebp
f010cc43:	89 e5                	mov    %esp,%ebp
f010cc45:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cc48:	83 ec 08             	sub    $0x8,%esp
f010cc4b:	ff 75 0c             	pushl  0xc(%ebp)
f010cc4e:	ff 75 08             	pushl  0x8(%ebp)
f010cc51:	e8 b7 14 00 00       	call   f010e10d <signalSemaphore>
f010cc56:	83 c4 10             	add    $0x10,%esp
}
f010cc59:	90                   	nop
f010cc5a:	c9                   	leave  
f010cc5b:	c3                   	ret    

f010cc5c <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cc5c:	55                   	push   %ebp
f010cc5d:	89 e5                	mov    %esp,%ebp
f010cc5f:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cc62:	83 ec 08             	sub    $0x8,%esp
f010cc65:	ff 75 0c             	pushl  0xc(%ebp)
f010cc68:	ff 75 08             	pushl  0x8(%ebp)
f010cc6b:	e8 db 12 00 00       	call   f010df4b <get_semaphore_object_ID>
f010cc70:	83 c4 10             	add    $0x10,%esp
f010cc73:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cc76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc7a:	78 0c                	js     f010cc88 <sys_getSemaphoreValue+0x2c>
f010cc7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cc7f:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010cc84:	39 c2                	cmp    %eax,%edx
f010cc86:	72 19                	jb     f010cca1 <sys_getSemaphoreValue+0x45>
f010cc88:	68 54 73 13 f0       	push   $0xf0137354
f010cc8d:	68 79 73 13 f0       	push   $0xf0137379
f010cc92:	68 4a 01 00 00       	push   $0x14a
f010cc97:	68 1f 73 13 f0       	push   $0xf013731f
f010cc9c:	e8 5a 35 ff ff       	call   f01001fb <_panic>

	return semaphores[semID].value ;
f010cca1:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010cca7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ccaa:	89 d0                	mov    %edx,%eax
f010ccac:	c1 e0 02             	shl    $0x2,%eax
f010ccaf:	01 d0                	add    %edx,%eax
f010ccb1:	01 c0                	add    %eax,%eax
f010ccb3:	01 d0                	add    %edx,%eax
f010ccb5:	01 c0                	add    %eax,%eax
f010ccb7:	01 d0                	add    %edx,%eax
f010ccb9:	c1 e0 02             	shl    $0x2,%eax
f010ccbc:	01 c8                	add    %ecx,%eax
f010ccbe:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ccc1:	c9                   	leave  
f010ccc2:	c3                   	ret    

f010ccc3 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 18             	sub    $0x18,%esp
f010ccc9:	8b 45 10             	mov    0x10(%ebp),%eax
f010cccc:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cccf:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ccd3:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ccd8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ccdb:	83 ec 0c             	sub    $0xc,%esp
f010ccde:	ff 75 14             	pushl  0x14(%ebp)
f010cce1:	52                   	push   %edx
f010cce2:	ff 75 0c             	pushl  0xc(%ebp)
f010cce5:	ff 75 08             	pushl  0x8(%ebp)
f010cce8:	50                   	push   %eax
f010cce9:	e8 17 a8 ff ff       	call   f0107505 <createSharedObject>
f010ccee:	83 c4 20             	add    $0x20,%esp
}
f010ccf1:	c9                   	leave  
f010ccf2:	c3                   	ret    

f010ccf3 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ccf3:	55                   	push   %ebp
f010ccf4:	89 e5                	mov    %esp,%ebp
f010ccf6:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ccf9:	83 ec 08             	sub    $0x8,%esp
f010ccfc:	ff 75 0c             	pushl  0xc(%ebp)
f010ccff:	ff 75 08             	pushl  0x8(%ebp)
f010cd02:	e8 21 a8 ff ff       	call   f0107528 <getSizeOfSharedObject>
f010cd07:	83 c4 10             	add    $0x10,%esp
}
f010cd0a:	c9                   	leave  
f010cd0b:	c3                   	ret    

f010cd0c <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cd0c:	55                   	push   %ebp
f010cd0d:	89 e5                	mov    %esp,%ebp
f010cd0f:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cd12:	83 ec 04             	sub    $0x4,%esp
f010cd15:	ff 75 10             	pushl  0x10(%ebp)
f010cd18:	ff 75 0c             	pushl  0xc(%ebp)
f010cd1b:	ff 75 08             	pushl  0x8(%ebp)
f010cd1e:	e8 22 a8 ff ff       	call   f0107545 <getSharedObject>
f010cd23:	83 c4 10             	add    $0x10,%esp
}
f010cd26:	c9                   	leave  
f010cd27:	c3                   	ret    

f010cd28 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cd28:	55                   	push   %ebp
f010cd29:	89 e5                	mov    %esp,%ebp
f010cd2b:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cd2e:	83 ec 08             	sub    $0x8,%esp
f010cd31:	ff 75 0c             	pushl  0xc(%ebp)
f010cd34:	ff 75 08             	pushl  0x8(%ebp)
f010cd37:	e8 26 a8 ff ff       	call   f0107562 <freeSharedObject>
f010cd3c:	83 c4 10             	add    $0x10,%esp
}
f010cd3f:	c9                   	leave  
f010cd40:	c3                   	ret    

f010cd41 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cd41:	55                   	push   %ebp
f010cd42:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cd44:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
}
f010cd49:	5d                   	pop    %ebp
f010cd4a:	c3                   	ret    

f010cd4b <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cd4b:	55                   	push   %ebp
f010cd4c:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cd4e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cd53:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cd56:	5d                   	pop    %ebp
f010cd57:	c3                   	ret    

f010cd58 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cd58:	55                   	push   %ebp
f010cd59:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cd5b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cd60:	89 c2                	mov    %eax,%edx
f010cd62:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f010cd67:	29 c2                	sub    %eax,%edx
f010cd69:	89 d0                	mov    %edx,%eax
f010cd6b:	c1 f8 04             	sar    $0x4,%eax
f010cd6e:	89 c2                	mov    %eax,%edx
f010cd70:	89 d0                	mov    %edx,%eax
f010cd72:	c1 e0 03             	shl    $0x3,%eax
f010cd75:	01 d0                	add    %edx,%eax
f010cd77:	01 c0                	add    %eax,%eax
f010cd79:	01 d0                	add    %edx,%eax
f010cd7b:	c1 e0 03             	shl    $0x3,%eax
f010cd7e:	01 d0                	add    %edx,%eax
f010cd80:	89 c1                	mov    %eax,%ecx
f010cd82:	c1 e1 08             	shl    $0x8,%ecx
f010cd85:	01 c8                	add    %ecx,%eax
f010cd87:	01 c0                	add    %eax,%eax
f010cd89:	01 d0                	add    %edx,%eax
f010cd8b:	01 c0                	add    %eax,%eax
f010cd8d:	01 d0                	add    %edx,%eax
f010cd8f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cd96:	01 d0                	add    %edx,%eax
f010cd98:	89 c2                	mov    %eax,%edx
f010cd9a:	c1 e2 09             	shl    $0x9,%edx
f010cd9d:	29 c2                	sub    %eax,%edx
f010cd9f:	89 d0                	mov    %edx,%eax
f010cda1:	f7 d8                	neg    %eax
}
f010cda3:	5d                   	pop    %ebp
f010cda4:	c3                   	ret    

f010cda5 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cda5:	55                   	push   %ebp
f010cda6:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cda8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cdad:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cdb0:	5d                   	pop    %ebp
f010cdb1:	c3                   	ret    

f010cdb2 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cdb2:	55                   	push   %ebp
f010cdb3:	89 e5                	mov    %esp,%ebp
f010cdb5:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cdb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cdbc:	75 0a                	jne    f010cdc8 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cdbe:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cdc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cdc6:	eb 22                	jmp    f010cdea <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cdc8:	83 ec 04             	sub    $0x4,%esp
f010cdcb:	6a 00                	push   $0x0
f010cdcd:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cdd0:	50                   	push   %eax
f010cdd1:	ff 75 08             	pushl  0x8(%ebp)
f010cdd4:	e8 bf cc ff ff       	call   f0109a98 <envid2env>
f010cdd9:	83 c4 10             	add    $0x10,%esp
f010cddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cde3:	79 05                	jns    f010cdea <sys_destroy_env+0x38>
	{
		return r;
f010cde5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cde8:	eb 5e                	jmp    f010ce48 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cdea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cded:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cdf2:	39 c2                	cmp    %eax,%edx
f010cdf4:	75 1b                	jne    f010ce11 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cdf6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cdfb:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cdfe:	83 ec 08             	sub    $0x8,%esp
f010ce01:	50                   	push   %eax
f010ce02:	68 8e 73 13 f0       	push   $0xf013738e
f010ce07:	e8 76 3e ff ff       	call   f0100c82 <cprintf>
f010ce0c:	83 c4 10             	add    $0x10,%esp
f010ce0f:	eb 20                	jmp    f010ce31 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010ce11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce14:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ce17:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ce1c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce1f:	83 ec 04             	sub    $0x4,%esp
f010ce22:	52                   	push   %edx
f010ce23:	50                   	push   %eax
f010ce24:	68 a9 73 13 f0       	push   $0xf01373a9
f010ce29:	e8 54 3e ff ff       	call   f0100c82 <cprintf>
f010ce2e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010ce31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce34:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce37:	83 ec 0c             	sub    $0xc,%esp
f010ce3a:	50                   	push   %eax
f010ce3b:	e8 28 87 ff ff       	call   f0105568 <sched_kill_env>
f010ce40:	83 c4 10             	add    $0x10,%esp

	return 0;
f010ce43:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ce48:	c9                   	leave  
f010ce49:	c3                   	ret    

f010ce4a <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ce4a:	55                   	push   %ebp
f010ce4b:	89 e5                	mov    %esp,%ebp
f010ce4d:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ce50:	e8 24 cc ff ff       	call   f0109a79 <env_exit>
	//env_run_cmd_prmpt();
}
f010ce55:	90                   	nop
f010ce56:	c9                   	leave  
f010ce57:	c3                   	ret    

f010ce58 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ce58:	55                   	push   %ebp
f010ce59:	89 e5                	mov    %esp,%ebp
f010ce5b:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ce5e:	ff 75 14             	pushl  0x14(%ebp)
f010ce61:	ff 75 10             	pushl  0x10(%ebp)
f010ce64:	ff 75 0c             	pushl  0xc(%ebp)
f010ce67:	ff 75 08             	pushl  0x8(%ebp)
f010ce6a:	e8 82 bf ff ff       	call   f0108df1 <env_create>
f010ce6f:	83 c4 10             	add    $0x10,%esp
f010ce72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ce75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce79:	75 07                	jne    f010ce82 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ce7b:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ce80:	eb 14                	jmp    f010ce96 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ce82:	83 ec 0c             	sub    $0xc,%esp
f010ce85:	ff 75 f4             	pushl  -0xc(%ebp)
f010ce88:	e8 a0 82 ff ff       	call   f010512d <sched_new_env>
f010ce8d:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ce90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce93:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ce96:	c9                   	leave  
f010ce97:	c3                   	ret    

f010ce98 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ce98:	55                   	push   %ebp
f010ce99:	89 e5                	mov    %esp,%ebp
f010ce9b:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ce9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cea1:	83 ec 0c             	sub    $0xc,%esp
f010cea4:	50                   	push   %eax
f010cea5:	e8 a0 82 ff ff       	call   f010514a <sched_run_env>
f010ceaa:	83 c4 10             	add    $0x10,%esp
}
f010cead:	90                   	nop
f010ceae:	c9                   	leave  
f010ceaf:	c3                   	ret    

f010ceb0 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ceb0:	55                   	push   %ebp
f010ceb1:	89 e5                	mov    %esp,%ebp
f010ceb3:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ceb6:	0f 31                	rdtsc  
f010ceb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cebb:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010cebe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cec1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cec4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cec7:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ceca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cecd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ced0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ced3:	89 01                	mov    %eax,(%ecx)
f010ced5:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ced8:	8b 45 08             	mov    0x8(%ebp),%eax
f010cedb:	c9                   	leave  
f010cedc:	c2 04 00             	ret    $0x4

f010cedf <sys_rcr2>:

uint32 sys_rcr2()
{
f010cedf:	55                   	push   %ebp
f010cee0:	89 e5                	mov    %esp,%ebp
f010cee2:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cee5:	0f 20 d0             	mov    %cr2,%eax
f010cee8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ceeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ceee:	90                   	nop
}
f010ceef:	c9                   	leave  
f010cef0:	c3                   	ret    

f010cef1 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010cef1:	55                   	push   %ebp
f010cef2:	89 e5                	mov    %esp,%ebp
f010cef4:	83 ec 04             	sub    $0x4,%esp
f010cef7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cefa:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cefd:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cf00:	a2 a8 7a 65 f0       	mov    %al,0xf0657aa8
}
f010cf05:	90                   	nop
f010cf06:	c9                   	leave  
f010cf07:	c3                   	ret    

f010cf08 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010cf08:	55                   	push   %ebp
f010cf09:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010cf0b:	c7 05 b0 7c 65 f0 00 	movl   $0x0,0xf0657cb0
f010cf12:	00 00 00 
}
f010cf15:	90                   	nop
f010cf16:	5d                   	pop    %ebp
f010cf17:	c3                   	ret    

f010cf18 <inctst>:
void inctst()
{
f010cf18:	55                   	push   %ebp
f010cf19:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010cf1b:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010cf20:	40                   	inc    %eax
f010cf21:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
}
f010cf26:	90                   	nop
f010cf27:	5d                   	pop    %ebp
f010cf28:	c3                   	ret    

f010cf29 <gettst>:
uint32 gettst()
{
f010cf29:	55                   	push   %ebp
f010cf2a:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010cf2c:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
}
f010cf31:	5d                   	pop    %ebp
f010cf32:	c3                   	ret    

f010cf33 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010cf33:	55                   	push   %ebp
f010cf34:	89 e5                	mov    %esp,%ebp
f010cf36:	83 ec 28             	sub    $0x28,%esp
f010cf39:	8b 45 14             	mov    0x14(%ebp),%eax
f010cf3c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010cf3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010cf46:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010cf4a:	83 f8 65             	cmp    $0x65,%eax
f010cf4d:	74 5d                	je     f010cfac <tst+0x79>
f010cf4f:	83 f8 65             	cmp    $0x65,%eax
f010cf52:	7f 0a                	jg     f010cf5e <tst+0x2b>
f010cf54:	83 f8 62             	cmp    $0x62,%eax
f010cf57:	74 73                	je     f010cfcc <tst+0x99>
f010cf59:	e9 91 00 00 00       	jmp    f010cfef <tst+0xbc>
f010cf5e:	83 f8 67             	cmp    $0x67,%eax
f010cf61:	74 29                	je     f010cf8c <tst+0x59>
f010cf63:	83 f8 6c             	cmp    $0x6c,%eax
f010cf66:	0f 85 83 00 00 00    	jne    f010cfef <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010cf6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf6f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cf72:	73 09                	jae    f010cf7d <tst+0x4a>
			chk = 1;
f010cf74:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cf7b:	eb 68                	jmp    f010cfe5 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010cf7d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cf81:	74 62                	je     f010cfe5 <tst+0xb2>
			chk = 1;
f010cf83:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010cf8a:	eb 59                	jmp    f010cfe5 <tst+0xb2>
	case 'g':
		if (n > v1)
f010cf8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf8f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cf92:	76 09                	jbe    f010cf9d <tst+0x6a>
			chk = 1;
f010cf94:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cf9b:	eb 4b                	jmp    f010cfe8 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010cf9d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cfa1:	74 45                	je     f010cfe8 <tst+0xb5>
			chk = 1;
f010cfa3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010cfaa:	eb 3c                	jmp    f010cfe8 <tst+0xb5>
	case 'e':
		if (n == v1)
f010cfac:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfaf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cfb2:	75 09                	jne    f010cfbd <tst+0x8a>
			chk = 1;
f010cfb4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cfbb:	eb 2e                	jmp    f010cfeb <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010cfbd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cfc1:	74 28                	je     f010cfeb <tst+0xb8>
			chk = 1;
f010cfc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010cfca:	eb 1f                	jmp    f010cfeb <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010cfcc:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfcf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cfd2:	72 1a                	jb     f010cfee <tst+0xbb>
f010cfd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfd7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cfda:	77 12                	ja     f010cfee <tst+0xbb>
			chk = 1;
f010cfdc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010cfe3:	eb 09                	jmp    f010cfee <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010cfe5:	90                   	nop
f010cfe6:	eb 07                	jmp    f010cfef <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010cfe8:	90                   	nop
f010cfe9:	eb 04                	jmp    f010cfef <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010cfeb:	90                   	nop
f010cfec:	eb 01                	jmp    f010cfef <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010cfee:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010cfef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cff3:	75 17                	jne    f010d00c <tst+0xd9>
f010cff5:	83 ec 04             	sub    $0x4,%esp
f010cff8:	68 c1 73 13 f0       	push   $0xf01373c1
f010cffd:	68 00 02 00 00       	push   $0x200
f010d002:	68 1f 73 13 f0       	push   $0xf013731f
f010d007:	e8 ef 31 ff ff       	call   f01001fb <_panic>
	tstcnt++ ;
f010d00c:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010d011:	40                   	inc    %eax
f010d012:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
	return;
f010d017:	90                   	nop
}
f010d018:	c9                   	leave  
f010d019:	c3                   	ret    

f010d01a <chktst>:

void chktst(uint32 n)
{
f010d01a:	55                   	push   %ebp
f010d01b:	89 e5                	mov    %esp,%ebp
f010d01d:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d020:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010d025:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d028:	75 12                	jne    f010d03c <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d02a:	83 ec 0c             	sub    $0xc,%esp
f010d02d:	68 d4 73 13 f0       	push   $0xf01373d4
f010d032:	e8 4b 3c ff ff       	call   f0100c82 <cprintf>
f010d037:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d03a:	eb 17                	jmp    f010d053 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d03c:	83 ec 04             	sub    $0x4,%esp
f010d03f:	68 00 74 13 f0       	push   $0xf0137400
f010d044:	68 0a 02 00 00       	push   $0x20a
f010d049:	68 1f 73 13 f0       	push   $0xf013731f
f010d04e:	e8 a8 31 ff ff       	call   f01001fb <_panic>
}
f010d053:	c9                   	leave  
f010d054:	c3                   	ret    

f010d055 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d055:	55                   	push   %ebp
f010d056:	89 e5                	mov    %esp,%ebp
f010d058:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d05b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010d060:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d063:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d06a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d071:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d075:	0f 84 a5 00 00 00    	je     f010d120 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d07b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d082:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d085:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d08b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d08e:	eb 4a                	jmp    f010d0da <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d093:	8b 00                	mov    (%eax),%eax
f010d095:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d09b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d0a0:	89 c2                	mov    %eax,%edx
f010d0a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d0a5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0af:	01 c8                	add    %ecx,%eax
f010d0b1:	8b 00                	mov    (%eax),%eax
f010d0b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d0b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d0b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d0be:	39 c2                	cmp    %eax,%edx
f010d0c0:	74 09                	je     f010d0cb <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d0c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d0c9:	eb 3e                	jmp    f010d109 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d0cb:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d0ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0d1:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d0da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d0de:	74 08                	je     f010d0e8 <sys_check_LRU_lists+0x93>
f010d0e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0e3:	8b 40 10             	mov    0x10(%eax),%eax
f010d0e6:	eb 05                	jmp    f010d0ed <sys_check_LRU_lists+0x98>
f010d0e8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0ed:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0f0:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d0f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0f9:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0ff:	85 c0                	test   %eax,%eax
f010d101:	75 8d                	jne    f010d090 <sys_check_LRU_lists+0x3b>
f010d103:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d107:	75 87                	jne    f010d090 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d109:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d10c:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d112:	8b 45 10             	mov    0x10(%ebp),%eax
f010d115:	39 c2                	cmp    %eax,%edx
f010d117:	74 07                	je     f010d120 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d119:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d120:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d124:	0f 84 a5 00 00 00    	je     f010d1cf <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d12a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d131:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d134:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d13a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d13d:	eb 4a                	jmp    f010d189 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d13f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d142:	8b 00                	mov    (%eax),%eax
f010d144:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d147:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d14a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d14f:	89 c2                	mov    %eax,%edx
f010d151:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d154:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d15b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d15e:	01 c8                	add    %ecx,%eax
f010d160:	8b 00                	mov    (%eax),%eax
f010d162:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d165:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d168:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d16d:	39 c2                	cmp    %eax,%edx
f010d16f:	74 09                	je     f010d17a <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d171:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d178:	eb 3e                	jmp    f010d1b8 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d17a:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d17d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d180:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d186:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d189:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d18d:	74 08                	je     f010d197 <sys_check_LRU_lists+0x142>
f010d18f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d192:	8b 40 10             	mov    0x10(%eax),%eax
f010d195:	eb 05                	jmp    f010d19c <sys_check_LRU_lists+0x147>
f010d197:	b8 00 00 00 00       	mov    $0x0,%eax
f010d19c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d19f:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d1a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1a8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d1ae:	85 c0                	test   %eax,%eax
f010d1b0:	75 8d                	jne    f010d13f <sys_check_LRU_lists+0xea>
f010d1b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d1b6:	75 87                	jne    f010d13f <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d1b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1bb:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d1c1:	8b 45 14             	mov    0x14(%ebp),%eax
f010d1c4:	39 c2                	cmp    %eax,%edx
f010d1c6:	74 07                	je     f010d1cf <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d1c8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d1cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1d2:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d1d5:	c9                   	leave  
f010d1d6:	c3                   	ret    

f010d1d7 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d1d7:	55                   	push   %ebp
f010d1d8:	89 e5                	mov    %esp,%ebp
f010d1da:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d1dd:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010d1e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d1e5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d1ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d1ef:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d1f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d1f8:	eb 65                	jmp    f010d25f <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d1fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d201:	eb 3a                	jmp    f010d23d <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d203:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d206:	8b 00                	mov    (%eax),%eax
f010d208:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d20b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d20e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d213:	89 c2                	mov    %eax,%edx
f010d215:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d218:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d21f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d222:	01 c8                	add    %ecx,%eax
f010d224:	8b 00                	mov    (%eax),%eax
f010d226:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d229:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d22c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d231:	39 c2                	cmp    %eax,%edx
f010d233:	75 05                	jne    f010d23a <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d235:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d238:	eb 0b                	jmp    f010d245 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d23a:	ff 45 f4             	incl   -0xc(%ebp)
f010d23d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d240:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d243:	7c be                	jl     f010d203 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d245:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d249:	7e 08                	jle    f010d253 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d24b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d24e:	e9 ed 00 00 00       	jmp    f010d340 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d253:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d256:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d25c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d25f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d263:	74 08                	je     f010d26d <sys_check_LRU_lists_free+0x96>
f010d265:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d268:	8b 40 10             	mov    0x10(%eax),%eax
f010d26b:	eb 05                	jmp    f010d272 <sys_check_LRU_lists_free+0x9b>
f010d26d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d272:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d275:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d27b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d27e:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d284:	85 c0                	test   %eax,%eax
f010d286:	0f 85 6e ff ff ff    	jne    f010d1fa <sys_check_LRU_lists_free+0x23>
f010d28c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d290:	0f 85 64 ff ff ff    	jne    f010d1fa <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d296:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d299:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d29f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d2a2:	eb 62                	jmp    f010d306 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d2a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d2ab:	eb 3a                	jmp    f010d2e7 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d2ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d2b0:	8b 00                	mov    (%eax),%eax
f010d2b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d2b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2bd:	89 c2                	mov    %eax,%edx
f010d2bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2c2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2cc:	01 c8                	add    %ecx,%eax
f010d2ce:	8b 00                	mov    (%eax),%eax
f010d2d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d2d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d2d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2db:	39 c2                	cmp    %eax,%edx
f010d2dd:	75 05                	jne    f010d2e4 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d2df:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d2e2:	eb 0b                	jmp    f010d2ef <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d2e4:	ff 45 f0             	incl   -0x10(%ebp)
f010d2e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d2ed:	7c be                	jl     f010d2ad <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d2ef:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d2f3:	7e 05                	jle    f010d2fa <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d2f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d2f8:	eb 46                	jmp    f010d340 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d2fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2fd:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d303:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d306:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d30a:	74 08                	je     f010d314 <sys_check_LRU_lists_free+0x13d>
f010d30c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d30f:	8b 40 10             	mov    0x10(%eax),%eax
f010d312:	eb 05                	jmp    f010d319 <sys_check_LRU_lists_free+0x142>
f010d314:	b8 00 00 00 00       	mov    $0x0,%eax
f010d319:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d31c:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d322:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d325:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d32b:	85 c0                	test   %eax,%eax
f010d32d:	0f 85 71 ff ff ff    	jne    f010d2a4 <sys_check_LRU_lists_free+0xcd>
f010d333:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d337:	0f 85 67 ff ff ff    	jne    f010d2a4 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d33d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d340:	c9                   	leave  
f010d341:	c3                   	ret    

f010d342 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d342:	55                   	push   %ebp
f010d343:	89 e5                	mov    %esp,%ebp
f010d345:	56                   	push   %esi
f010d346:	53                   	push   %ebx
f010d347:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d34a:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d34e:	0f 87 0e 04 00 00    	ja     f010d762 <syscall+0x420>
f010d354:	8b 45 08             	mov    0x8(%ebp),%eax
f010d357:	c1 e0 02             	shl    $0x2,%eax
f010d35a:	05 1c 74 13 f0       	add    $0xf013741c,%eax
f010d35f:	8b 00                	mov    (%eax),%eax
f010d361:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d363:	8b 45 14             	mov    0x14(%ebp),%eax
f010d366:	0f b6 d0             	movzbl %al,%edx
f010d369:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d36c:	83 ec 04             	sub    $0x4,%esp
f010d36f:	52                   	push   %edx
f010d370:	ff 75 10             	pushl  0x10(%ebp)
f010d373:	50                   	push   %eax
f010d374:	e8 db f4 ff ff       	call   f010c854 <sys_cputs>
f010d379:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d37c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d381:	e9 e1 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d386:	e8 3e f5 ff ff       	call   f010c8c9 <sys_cgetc>
f010d38b:	e9 d7 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d390:	83 ec 08             	sub    $0x8,%esp
f010d393:	ff 75 10             	pushl  0x10(%ebp)
f010d396:	ff 75 0c             	pushl  0xc(%ebp)
f010d399:	e8 91 f6 ff ff       	call   f010ca2f <sys_calculate_required_frames>
f010d39e:	83 c4 10             	add    $0x10,%esp
f010d3a1:	e9 c1 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d3a6:	e8 a6 f6 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f010d3ab:	e9 b7 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d3b0:	e8 bb f6 ff ff       	call   f010ca70 <sys_calculate_modified_frames>
f010d3b5:	e9 ad 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d3ba:	e8 cb f6 ff ff       	call   f010ca8a <sys_calculate_notmod_frames>
f010d3bf:	e9 a3 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d3c4:	e8 33 f7 ff ff       	call   f010cafc <sys_pf_calculate_allocated_pages>
f010d3c9:	e9 99 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d3ce:	83 ec 0c             	sub    $0xc,%esp
f010d3d1:	ff 75 0c             	pushl  0xc(%ebp)
f010d3d4:	e8 cb f6 ff ff       	call   f010caa4 <sys_calculate_pages_tobe_removed_ready_exit>
f010d3d9:	83 c4 10             	add    $0x10,%esp
f010d3dc:	e9 86 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d3e1:	e8 d4 f6 ff ff       	call   f010caba <sys_scarce_memory>
		return 0;
f010d3e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3eb:	e9 77 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d3f0:	83 ec 08             	sub    $0x8,%esp
f010d3f3:	ff 75 10             	pushl  0x10(%ebp)
f010d3f6:	ff 75 0c             	pushl  0xc(%ebp)
f010d3f9:	e8 17 f7 ff ff       	call   f010cb15 <sys_free_user_mem>
f010d3fe:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d401:	b8 00 00 00 00       	mov    $0x0,%eax
f010d406:	e9 5c 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d40b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d40e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d411:	83 ec 08             	sub    $0x8,%esp
f010d414:	52                   	push   %edx
f010d415:	50                   	push   %eax
f010d416:	e8 c1 f4 ff ff       	call   f010c8dc <__sys_allocate_page>
f010d41b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d41e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d423:	e9 3f 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d428:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d42b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d42e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d431:	8b 55 10             	mov    0x10(%ebp),%edx
f010d434:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d437:	83 ec 0c             	sub    $0xc,%esp
f010d43a:	56                   	push   %esi
f010d43b:	53                   	push   %ebx
f010d43c:	51                   	push   %ecx
f010d43d:	52                   	push   %edx
f010d43e:	50                   	push   %eax
f010d43f:	e8 b1 f5 ff ff       	call   f010c9f5 <__sys_map_frame>
f010d444:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d447:	b8 00 00 00 00       	mov    $0x0,%eax
f010d44c:	e9 16 03 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d451:	8b 55 10             	mov    0x10(%ebp),%edx
f010d454:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d457:	83 ec 08             	sub    $0x8,%esp
f010d45a:	52                   	push   %edx
f010d45b:	50                   	push   %eax
f010d45c:	e8 b1 f5 ff ff       	call   f010ca12 <__sys_unmap_frame>
f010d461:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d464:	b8 00 00 00 00       	mov    $0x0,%eax
f010d469:	e9 f9 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d46e:	83 ec 04             	sub    $0x4,%esp
f010d471:	ff 75 14             	pushl  0x14(%ebp)
f010d474:	ff 75 10             	pushl  0x10(%ebp)
f010d477:	ff 75 0c             	pushl  0xc(%ebp)
f010d47a:	e8 f8 f6 ff ff       	call   f010cb77 <sys_allocate_chunk>
f010d47f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d482:	b8 00 00 00 00       	mov    $0x0,%eax
f010d487:	e9 db 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d48c:	e8 41 f7 ff ff       	call   f010cbd2 <sys_disable_interrupt>
		return 0;
f010d491:	b8 00 00 00 00       	mov    $0x0,%eax
f010d496:	e9 cc 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d49b:	e8 4c f7 ff ff       	call   f010cbec <sys_enable_interrupt>
		return 0;
f010d4a0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4a5:	e9 bd 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d4aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4ad:	0f be c0             	movsbl %al,%eax
f010d4b0:	83 ec 0c             	sub    $0xc,%esp
f010d4b3:	50                   	push   %eax
f010d4b4:	e8 ec f3 ff ff       	call   f010c8a5 <sys_cputc>
f010d4b9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4c1:	e9 a1 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d4c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4c9:	0f be c0             	movsbl %al,%eax
f010d4cc:	83 ec 0c             	sub    $0xc,%esp
f010d4cf:	50                   	push   %eax
f010d4d0:	e8 f3 f5 ff ff       	call   f010cac8 <sys_clearFFL>
f010d4d5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4d8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4dd:	e9 85 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d4e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4e5:	83 ec 08             	sub    $0x8,%esp
f010d4e8:	ff 75 10             	pushl  0x10(%ebp)
f010d4eb:	50                   	push   %eax
f010d4ec:	e8 15 f7 ff ff       	call   f010cc06 <sys_createSemaphore>
f010d4f1:	83 c4 10             	add    $0x10,%esp
f010d4f4:	e9 6e 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d4f9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d4fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4ff:	83 ec 08             	sub    $0x8,%esp
f010d502:	52                   	push   %edx
f010d503:	50                   	push   %eax
f010d504:	e8 1f f7 ff ff       	call   f010cc28 <sys_waitSemaphore>
f010d509:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d50c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d511:	e9 51 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d516:	8b 55 10             	mov    0x10(%ebp),%edx
f010d519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d51c:	83 ec 08             	sub    $0x8,%esp
f010d51f:	52                   	push   %edx
f010d520:	50                   	push   %eax
f010d521:	e8 1c f7 ff ff       	call   f010cc42 <sys_signalSemaphore>
f010d526:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d529:	b8 00 00 00 00       	mov    $0x0,%eax
f010d52e:	e9 34 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d533:	8b 55 10             	mov    0x10(%ebp),%edx
f010d536:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d539:	83 ec 08             	sub    $0x8,%esp
f010d53c:	52                   	push   %edx
f010d53d:	50                   	push   %eax
f010d53e:	e8 19 f7 ff ff       	call   f010cc5c <sys_getSemaphoreValue>
f010d543:	83 c4 10             	add    $0x10,%esp
f010d546:	e9 1c 02 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d54b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d54e:	8b 45 14             	mov    0x14(%ebp),%eax
f010d551:	0f b6 d0             	movzbl %al,%edx
f010d554:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d557:	51                   	push   %ecx
f010d558:	52                   	push   %edx
f010d559:	ff 75 10             	pushl  0x10(%ebp)
f010d55c:	50                   	push   %eax
f010d55d:	e8 61 f7 ff ff       	call   f010ccc3 <sys_createSharedObject>
f010d562:	83 c4 10             	add    $0x10,%esp
f010d565:	e9 fd 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d56a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d56d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d570:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d573:	83 ec 04             	sub    $0x4,%esp
f010d576:	51                   	push   %ecx
f010d577:	52                   	push   %edx
f010d578:	50                   	push   %eax
f010d579:	e8 8e f7 ff ff       	call   f010cd0c <sys_getSharedObject>
f010d57e:	83 c4 10             	add    $0x10,%esp
f010d581:	e9 e1 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d586:	8b 55 10             	mov    0x10(%ebp),%edx
f010d589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d58c:	83 ec 08             	sub    $0x8,%esp
f010d58f:	52                   	push   %edx
f010d590:	50                   	push   %eax
f010d591:	e8 92 f7 ff ff       	call   f010cd28 <sys_freeSharedObject>
f010d596:	83 c4 10             	add    $0x10,%esp
f010d599:	e9 c9 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d59e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a4:	83 ec 08             	sub    $0x8,%esp
f010d5a7:	52                   	push   %edx
f010d5a8:	50                   	push   %eax
f010d5a9:	e8 45 f7 ff ff       	call   f010ccf3 <sys_getSizeOfSharedObject>
f010d5ae:	83 c4 10             	add    $0x10,%esp
f010d5b1:	e9 b1 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d5b6:	e8 86 f7 ff ff       	call   f010cd41 <sys_getMaxShares>
f010d5bb:	e9 a7 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d5c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c3:	ff 75 18             	pushl  0x18(%ebp)
f010d5c6:	ff 75 14             	pushl  0x14(%ebp)
f010d5c9:	ff 75 10             	pushl  0x10(%ebp)
f010d5cc:	50                   	push   %eax
f010d5cd:	e8 86 f8 ff ff       	call   f010ce58 <sys_create_env>
f010d5d2:	83 c4 10             	add    $0x10,%esp
f010d5d5:	e9 8d 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d5da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5dd:	83 ec 0c             	sub    $0xc,%esp
f010d5e0:	50                   	push   %eax
f010d5e1:	e8 b2 f8 ff ff       	call   f010ce98 <sys_run_env>
f010d5e6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5e9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5ee:	e9 74 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d5f3:	e8 60 f7 ff ff       	call   f010cd58 <sys_getenvindex>
f010d5f8:	e9 6a 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d5fd:	e8 49 f7 ff ff       	call   f010cd4b <sys_getenvid>
f010d602:	e9 60 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d607:	e8 99 f7 ff ff       	call   f010cda5 <sys_getparentenvid>
f010d60c:	e9 56 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d611:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d614:	83 ec 0c             	sub    $0xc,%esp
f010d617:	50                   	push   %eax
f010d618:	e8 95 f7 ff ff       	call   f010cdb2 <sys_destroy_env>
f010d61d:	83 c4 10             	add    $0x10,%esp
f010d620:	e9 42 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d625:	e8 20 f8 ff ff       	call   f010ce4a <sys_exit_env>
		return 0;
f010d62a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d62f:	e9 33 01 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d634:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d637:	83 ec 0c             	sub    $0xc,%esp
f010d63a:	50                   	push   %eax
f010d63b:	e8 70 f8 ff ff       	call   f010ceb0 <sys_get_virtual_time>
f010d640:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d643:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d646:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d649:	8b 45 10             	mov    0x10(%ebp),%eax
f010d64c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d64f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d652:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d655:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d657:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d65a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d65d:	89 10                	mov    %edx,(%eax)
		return 0;
f010d65f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d664:	e9 fe 00 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d669:	83 ec 04             	sub    $0x4,%esp
f010d66c:	ff 75 14             	pushl  0x14(%ebp)
f010d66f:	ff 75 10             	pushl  0x10(%ebp)
f010d672:	ff 75 0c             	pushl  0xc(%ebp)
f010d675:	e8 20 f5 ff ff       	call   f010cb9a <sys_move_user_mem>
f010d67a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d67d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d682:	e9 e0 00 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d687:	e8 53 f8 ff ff       	call   f010cedf <sys_rcr2>
f010d68c:	e9 d6 00 00 00       	jmp    f010d767 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d691:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d694:	0f b6 c0             	movzbl %al,%eax
f010d697:	83 ec 0c             	sub    $0xc,%esp
f010d69a:	50                   	push   %eax
f010d69b:	e8 51 f8 ff ff       	call   f010cef1 <sys_bypassPageFault>
f010d6a0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d6a3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6a8:	e9 ba 00 00 00       	jmp    f010d767 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d6ad:	e8 56 f8 ff ff       	call   f010cf08 <rsttst>
		return 0;
f010d6b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6b7:	e9 ab 00 00 00       	jmp    f010d767 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d6bc:	e8 57 f8 ff ff       	call   f010cf18 <inctst>
		return 0;
f010d6c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6c6:	e9 9c 00 00 00       	jmp    f010d767 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d6cb:	83 ec 0c             	sub    $0xc,%esp
f010d6ce:	ff 75 0c             	pushl  0xc(%ebp)
f010d6d1:	e8 44 f9 ff ff       	call   f010d01a <chktst>
f010d6d6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d6d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6de:	e9 84 00 00 00       	jmp    f010d767 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d6e3:	e8 41 f8 ff ff       	call   f010cf29 <gettst>
f010d6e8:	eb 7d                	jmp    f010d767 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d6ea:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d6ed:	8b 45 18             	mov    0x18(%ebp),%eax
f010d6f0:	0f be c0             	movsbl %al,%eax
f010d6f3:	83 ec 0c             	sub    $0xc,%esp
f010d6f6:	52                   	push   %edx
f010d6f7:	50                   	push   %eax
f010d6f8:	ff 75 14             	pushl  0x14(%ebp)
f010d6fb:	ff 75 10             	pushl  0x10(%ebp)
f010d6fe:	ff 75 0c             	pushl  0xc(%ebp)
f010d701:	e8 2d f8 ff ff       	call   f010cf33 <tst>
f010d706:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d709:	b8 00 00 00 00       	mov    $0x0,%eax
f010d70e:	eb 57                	jmp    f010d767 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d710:	e8 a5 f4 ff ff       	call   f010cbba <sys_get_heap_strategy>
f010d715:	eb 50                	jmp    f010d767 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d717:	83 ec 0c             	sub    $0xc,%esp
f010d71a:	ff 75 0c             	pushl  0xc(%ebp)
f010d71d:	e8 a2 f4 ff ff       	call   f010cbc4 <sys_set_uheap_strategy>
f010d722:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d725:	b8 00 00 00 00       	mov    $0x0,%eax
f010d72a:	eb 3b                	jmp    f010d767 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d72c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d72f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d732:	8b 55 10             	mov    0x10(%ebp),%edx
f010d735:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d738:	53                   	push   %ebx
f010d739:	51                   	push   %ecx
f010d73a:	52                   	push   %edx
f010d73b:	50                   	push   %eax
f010d73c:	e8 14 f9 ff ff       	call   f010d055 <sys_check_LRU_lists>
f010d741:	83 c4 10             	add    $0x10,%esp
f010d744:	eb 21                	jmp    f010d767 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d746:	8b 55 10             	mov    0x10(%ebp),%edx
f010d749:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d74c:	83 ec 08             	sub    $0x8,%esp
f010d74f:	52                   	push   %edx
f010d750:	50                   	push   %eax
f010d751:	e8 81 fa ff ff       	call   f010d1d7 <sys_check_LRU_lists_free>
f010d756:	83 c4 10             	add    $0x10,%esp
f010d759:	eb 0c                	jmp    f010d767 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d75b:	b8 03 00 00 00       	mov    $0x3,%eax
f010d760:	eb 05                	jmp    f010d767 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d762:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d767:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d76a:	5b                   	pop    %ebx
f010d76b:	5e                   	pop    %esi
f010d76c:	5d                   	pop    %ebp
f010d76d:	c3                   	ret    

f010d76e <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d76e:	55                   	push   %ebp
f010d76f:	89 e5                	mov    %esp,%ebp
f010d771:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d774:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d777:	8b 00                	mov    (%eax),%eax
f010d779:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d77c:	8b 45 10             	mov    0x10(%ebp),%eax
f010d77f:	8b 00                	mov    (%eax),%eax
f010d781:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d784:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d78b:	e9 ca 00 00 00       	jmp    f010d85a <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d790:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d793:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d796:	01 d0                	add    %edx,%eax
f010d798:	89 c2                	mov    %eax,%edx
f010d79a:	c1 ea 1f             	shr    $0x1f,%edx
f010d79d:	01 d0                	add    %edx,%eax
f010d79f:	d1 f8                	sar    %eax
f010d7a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d7a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7a7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d7aa:	eb 03                	jmp    f010d7af <stab_binsearch+0x41>
			m--;
f010d7ac:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d7af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7b2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d7b5:	7c 1e                	jl     f010d7d5 <stab_binsearch+0x67>
f010d7b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d7ba:	89 d0                	mov    %edx,%eax
f010d7bc:	01 c0                	add    %eax,%eax
f010d7be:	01 d0                	add    %edx,%eax
f010d7c0:	c1 e0 02             	shl    $0x2,%eax
f010d7c3:	89 c2                	mov    %eax,%edx
f010d7c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7c8:	01 d0                	add    %edx,%eax
f010d7ca:	8a 40 04             	mov    0x4(%eax),%al
f010d7cd:	0f b6 c0             	movzbl %al,%eax
f010d7d0:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d7d3:	75 d7                	jne    f010d7ac <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d7d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7d8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d7db:	7d 09                	jge    f010d7e6 <stab_binsearch+0x78>
			l = true_m + 1;
f010d7dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7e0:	40                   	inc    %eax
f010d7e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d7e4:	eb 74                	jmp    f010d85a <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d7e6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d7ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d7f0:	89 d0                	mov    %edx,%eax
f010d7f2:	01 c0                	add    %eax,%eax
f010d7f4:	01 d0                	add    %edx,%eax
f010d7f6:	c1 e0 02             	shl    $0x2,%eax
f010d7f9:	89 c2                	mov    %eax,%edx
f010d7fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7fe:	01 d0                	add    %edx,%eax
f010d800:	8b 40 08             	mov    0x8(%eax),%eax
f010d803:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d806:	73 11                	jae    f010d819 <stab_binsearch+0xab>
			*region_left = m;
f010d808:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d80b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d80e:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d810:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d813:	40                   	inc    %eax
f010d814:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d817:	eb 41                	jmp    f010d85a <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d819:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d81c:	89 d0                	mov    %edx,%eax
f010d81e:	01 c0                	add    %eax,%eax
f010d820:	01 d0                	add    %edx,%eax
f010d822:	c1 e0 02             	shl    $0x2,%eax
f010d825:	89 c2                	mov    %eax,%edx
f010d827:	8b 45 08             	mov    0x8(%ebp),%eax
f010d82a:	01 d0                	add    %edx,%eax
f010d82c:	8b 40 08             	mov    0x8(%eax),%eax
f010d82f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d832:	76 14                	jbe    f010d848 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d837:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d83a:	8b 45 10             	mov    0x10(%ebp),%eax
f010d83d:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d83f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d842:	48                   	dec    %eax
f010d843:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d846:	eb 12                	jmp    f010d85a <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d848:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d84b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d84e:	89 10                	mov    %edx,(%eax)
			l = m;
f010d850:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d853:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d856:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d85a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d85d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d860:	0f 8e 2a ff ff ff    	jle    f010d790 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d866:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d86a:	75 0f                	jne    f010d87b <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d86c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d86f:	8b 00                	mov    (%eax),%eax
f010d871:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d874:	8b 45 10             	mov    0x10(%ebp),%eax
f010d877:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d879:	eb 3d                	jmp    f010d8b8 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d87b:	8b 45 10             	mov    0x10(%ebp),%eax
f010d87e:	8b 00                	mov    (%eax),%eax
f010d880:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d883:	eb 03                	jmp    f010d888 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d885:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d888:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d88b:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d88d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d890:	7d 1e                	jge    f010d8b0 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d892:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d895:	89 d0                	mov    %edx,%eax
f010d897:	01 c0                	add    %eax,%eax
f010d899:	01 d0                	add    %edx,%eax
f010d89b:	c1 e0 02             	shl    $0x2,%eax
f010d89e:	89 c2                	mov    %eax,%edx
f010d8a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8a3:	01 d0                	add    %edx,%eax
f010d8a5:	8a 40 04             	mov    0x4(%eax),%al
f010d8a8:	0f b6 c0             	movzbl %al,%eax
f010d8ab:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d8ae:	75 d5                	jne    f010d885 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d8b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d8b6:	89 10                	mov    %edx,(%eax)
	}
}
f010d8b8:	90                   	nop
f010d8b9:	c9                   	leave  
f010d8ba:	c3                   	ret    

f010d8bb <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d8bb:	55                   	push   %ebp
f010d8bc:	89 e5                	mov    %esp,%ebp
f010d8be:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d8c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c4:	c7 00 e0 74 13 f0    	movl   $0xf01374e0,(%eax)
	info->eip_line = 0;
f010d8ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d8d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8d7:	c7 40 08 e0 74 13 f0 	movl   $0xf01374e0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d8de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8e1:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d8e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8eb:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8ee:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d8f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8f4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d8fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8fe:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d903:	76 1e                	jbe    f010d923 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d905:	c7 45 f4 50 d1 13 f0 	movl   $0xf013d150,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d90c:	c7 45 f0 d4 c4 17 f0 	movl   $0xf017c4d4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d913:	c7 45 ec d5 c4 17 f0 	movl   $0xf017c4d5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d91a:	c7 45 e8 e4 8f 18 f0 	movl   $0xf0188fe4,-0x18(%ebp)
f010d921:	eb 2a                	jmp    f010d94d <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d923:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d92a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d92d:	8b 00                	mov    (%eax),%eax
f010d92f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d932:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d935:	8b 40 04             	mov    0x4(%eax),%eax
f010d938:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d93b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d93e:	8b 40 08             	mov    0x8(%eax),%eax
f010d941:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d944:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d947:	8b 40 0c             	mov    0xc(%eax),%eax
f010d94a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d94d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d950:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d953:	76 0a                	jbe    f010d95f <debuginfo_eip+0xa4>
f010d955:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d958:	48                   	dec    %eax
f010d959:	8a 00                	mov    (%eax),%al
f010d95b:	84 c0                	test   %al,%al
f010d95d:	74 0a                	je     f010d969 <debuginfo_eip+0xae>
		return -1;
f010d95f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d964:	e9 01 02 00 00       	jmp    f010db6a <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d969:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d970:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d973:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d976:	29 c2                	sub    %eax,%edx
f010d978:	89 d0                	mov    %edx,%eax
f010d97a:	c1 f8 02             	sar    $0x2,%eax
f010d97d:	89 c2                	mov    %eax,%edx
f010d97f:	89 d0                	mov    %edx,%eax
f010d981:	c1 e0 02             	shl    $0x2,%eax
f010d984:	01 d0                	add    %edx,%eax
f010d986:	c1 e0 02             	shl    $0x2,%eax
f010d989:	01 d0                	add    %edx,%eax
f010d98b:	c1 e0 02             	shl    $0x2,%eax
f010d98e:	01 d0                	add    %edx,%eax
f010d990:	89 c1                	mov    %eax,%ecx
f010d992:	c1 e1 08             	shl    $0x8,%ecx
f010d995:	01 c8                	add    %ecx,%eax
f010d997:	89 c1                	mov    %eax,%ecx
f010d999:	c1 e1 10             	shl    $0x10,%ecx
f010d99c:	01 c8                	add    %ecx,%eax
f010d99e:	01 c0                	add    %eax,%eax
f010d9a0:	01 d0                	add    %edx,%eax
f010d9a2:	48                   	dec    %eax
f010d9a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d9a6:	ff 75 08             	pushl  0x8(%ebp)
f010d9a9:	6a 64                	push   $0x64
f010d9ab:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d9ae:	50                   	push   %eax
f010d9af:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d9b2:	50                   	push   %eax
f010d9b3:	ff 75 f4             	pushl  -0xc(%ebp)
f010d9b6:	e8 b3 fd ff ff       	call   f010d76e <stab_binsearch>
f010d9bb:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d9be:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d9c1:	85 c0                	test   %eax,%eax
f010d9c3:	75 0a                	jne    f010d9cf <debuginfo_eip+0x114>
		return -1;
f010d9c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d9ca:	e9 9b 01 00 00       	jmp    f010db6a <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d9cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d9d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d9d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d9d8:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d9db:	ff 75 08             	pushl  0x8(%ebp)
f010d9de:	6a 24                	push   $0x24
f010d9e0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d9e3:	50                   	push   %eax
f010d9e4:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d9e7:	50                   	push   %eax
f010d9e8:	ff 75 f4             	pushl  -0xc(%ebp)
f010d9eb:	e8 7e fd ff ff       	call   f010d76e <stab_binsearch>
f010d9f0:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d9f3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d9f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d9f9:	39 c2                	cmp    %eax,%edx
f010d9fb:	0f 8f 86 00 00 00    	jg     f010da87 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010da01:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010da04:	89 c2                	mov    %eax,%edx
f010da06:	89 d0                	mov    %edx,%eax
f010da08:	01 c0                	add    %eax,%eax
f010da0a:	01 d0                	add    %edx,%eax
f010da0c:	c1 e0 02             	shl    $0x2,%eax
f010da0f:	89 c2                	mov    %eax,%edx
f010da11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da14:	01 d0                	add    %edx,%eax
f010da16:	8b 00                	mov    (%eax),%eax
f010da18:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010da1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da1e:	29 d1                	sub    %edx,%ecx
f010da20:	89 ca                	mov    %ecx,%edx
f010da22:	39 d0                	cmp    %edx,%eax
f010da24:	73 22                	jae    f010da48 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010da26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010da29:	89 c2                	mov    %eax,%edx
f010da2b:	89 d0                	mov    %edx,%eax
f010da2d:	01 c0                	add    %eax,%eax
f010da2f:	01 d0                	add    %edx,%eax
f010da31:	c1 e0 02             	shl    $0x2,%eax
f010da34:	89 c2                	mov    %eax,%edx
f010da36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da39:	01 d0                	add    %edx,%eax
f010da3b:	8b 10                	mov    (%eax),%edx
f010da3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da40:	01 c2                	add    %eax,%edx
f010da42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da45:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010da48:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010da4b:	89 c2                	mov    %eax,%edx
f010da4d:	89 d0                	mov    %edx,%eax
f010da4f:	01 c0                	add    %eax,%eax
f010da51:	01 d0                	add    %edx,%eax
f010da53:	c1 e0 02             	shl    $0x2,%eax
f010da56:	89 c2                	mov    %eax,%edx
f010da58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da5b:	01 d0                	add    %edx,%eax
f010da5d:	8b 50 08             	mov    0x8(%eax),%edx
f010da60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da63:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010da66:	8b 55 08             	mov    0x8(%ebp),%edx
f010da69:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da6c:	8b 40 10             	mov    0x10(%eax),%eax
f010da6f:	29 c2                	sub    %eax,%edx
f010da71:	89 d0                	mov    %edx,%eax
f010da73:	c1 f8 02             	sar    $0x2,%eax
f010da76:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010da79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010da7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010da7f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010da82:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010da85:	eb 15                	jmp    f010da9c <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010da87:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da8a:	8b 55 08             	mov    0x8(%ebp),%edx
f010da8d:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010da90:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010da93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010da96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010da99:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010da9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da9f:	8b 40 08             	mov    0x8(%eax),%eax
f010daa2:	83 ec 08             	sub    $0x8,%esp
f010daa5:	6a 3a                	push   $0x3a
f010daa7:	50                   	push   %eax
f010daa8:	e8 95 34 02 00       	call   f0130f42 <strfind>
f010daad:	83 c4 10             	add    $0x10,%esp
f010dab0:	89 c2                	mov    %eax,%edx
f010dab2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab5:	8b 40 08             	mov    0x8(%eax),%eax
f010dab8:	29 c2                	sub    %eax,%edx
f010daba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dabd:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dac0:	eb 03                	jmp    f010dac5 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010dac2:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dac5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dac8:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dacb:	7c 4e                	jl     f010db1b <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010dacd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dad0:	89 d0                	mov    %edx,%eax
f010dad2:	01 c0                	add    %eax,%eax
f010dad4:	01 d0                	add    %edx,%eax
f010dad6:	c1 e0 02             	shl    $0x2,%eax
f010dad9:	89 c2                	mov    %eax,%edx
f010dadb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dade:	01 d0                	add    %edx,%eax
f010dae0:	8a 40 04             	mov    0x4(%eax),%al
f010dae3:	3c 84                	cmp    $0x84,%al
f010dae5:	74 34                	je     f010db1b <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010daea:	89 d0                	mov    %edx,%eax
f010daec:	01 c0                	add    %eax,%eax
f010daee:	01 d0                	add    %edx,%eax
f010daf0:	c1 e0 02             	shl    $0x2,%eax
f010daf3:	89 c2                	mov    %eax,%edx
f010daf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010daf8:	01 d0                	add    %edx,%eax
f010dafa:	8a 40 04             	mov    0x4(%eax),%al
f010dafd:	3c 64                	cmp    $0x64,%al
f010daff:	75 c1                	jne    f010dac2 <debuginfo_eip+0x207>
f010db01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db04:	89 d0                	mov    %edx,%eax
f010db06:	01 c0                	add    %eax,%eax
f010db08:	01 d0                	add    %edx,%eax
f010db0a:	c1 e0 02             	shl    $0x2,%eax
f010db0d:	89 c2                	mov    %eax,%edx
f010db0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db12:	01 d0                	add    %edx,%eax
f010db14:	8b 40 08             	mov    0x8(%eax),%eax
f010db17:	85 c0                	test   %eax,%eax
f010db19:	74 a7                	je     f010dac2 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010db1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db1e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010db21:	7c 42                	jl     f010db65 <debuginfo_eip+0x2aa>
f010db23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db26:	89 d0                	mov    %edx,%eax
f010db28:	01 c0                	add    %eax,%eax
f010db2a:	01 d0                	add    %edx,%eax
f010db2c:	c1 e0 02             	shl    $0x2,%eax
f010db2f:	89 c2                	mov    %eax,%edx
f010db31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db34:	01 d0                	add    %edx,%eax
f010db36:	8b 00                	mov    (%eax),%eax
f010db38:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010db3b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010db3e:	29 d1                	sub    %edx,%ecx
f010db40:	89 ca                	mov    %ecx,%edx
f010db42:	39 d0                	cmp    %edx,%eax
f010db44:	73 1f                	jae    f010db65 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010db46:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db49:	89 d0                	mov    %edx,%eax
f010db4b:	01 c0                	add    %eax,%eax
f010db4d:	01 d0                	add    %edx,%eax
f010db4f:	c1 e0 02             	shl    $0x2,%eax
f010db52:	89 c2                	mov    %eax,%edx
f010db54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db57:	01 d0                	add    %edx,%eax
f010db59:	8b 10                	mov    (%eax),%edx
f010db5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db5e:	01 c2                	add    %eax,%edx
f010db60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db63:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010db65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010db6a:	c9                   	leave  
f010db6b:	c3                   	ret    

f010db6c <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010db6c:	55                   	push   %ebp
f010db6d:	89 e5                	mov    %esp,%ebp
f010db6f:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010db72:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010db76:	74 1c                	je     f010db94 <setPageReplacmentAlgorithmLRU+0x28>
f010db78:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010db7c:	74 16                	je     f010db94 <setPageReplacmentAlgorithmLRU+0x28>
f010db7e:	68 ec 74 13 f0       	push   $0xf01374ec
f010db83:	68 36 75 13 f0       	push   $0xf0137536
f010db88:	6a 18                	push   $0x18
f010db8a:	68 4b 75 13 f0       	push   $0xf013754b
f010db8f:	e8 67 26 ff ff       	call   f01001fb <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010db94:	8b 45 08             	mov    0x8(%ebp),%eax
f010db97:	a3 88 7b 65 f0       	mov    %eax,0xf0657b88
}
f010db9c:	90                   	nop
f010db9d:	c9                   	leave  
f010db9e:	c3                   	ret    

f010db9f <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010db9f:	55                   	push   %ebp
f010dba0:	89 e5                	mov    %esp,%ebp
f010dba2:	c7 05 88 7b 65 f0 03 	movl   $0x3,0xf0657b88
f010dba9:	00 00 00 
f010dbac:	90                   	nop
f010dbad:	5d                   	pop    %ebp
f010dbae:	c3                   	ret    

f010dbaf <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dbaf:	55                   	push   %ebp
f010dbb0:	89 e5                	mov    %esp,%ebp
f010dbb2:	c7 05 88 7b 65 f0 04 	movl   $0x4,0xf0657b88
f010dbb9:	00 00 00 
f010dbbc:	90                   	nop
f010dbbd:	5d                   	pop    %ebp
f010dbbe:	c3                   	ret    

f010dbbf <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dbbf:	55                   	push   %ebp
f010dbc0:	89 e5                	mov    %esp,%ebp
f010dbc2:	c7 05 88 7b 65 f0 05 	movl   $0x5,0xf0657b88
f010dbc9:	00 00 00 
f010dbcc:	90                   	nop
f010dbcd:	5d                   	pop    %ebp
f010dbce:	c3                   	ret    

f010dbcf <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dbcf:	55                   	push   %ebp
f010dbd0:	89 e5                	mov    %esp,%ebp
f010dbd2:	c7 05 88 7b 65 f0 07 	movl   $0x7,0xf0657b88
f010dbd9:	00 00 00 
f010dbdc:	90                   	nop
f010dbdd:	5d                   	pop    %ebp
f010dbde:	c3                   	ret    

f010dbdf <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dbdf:	55                   	push   %ebp
f010dbe0:	89 e5                	mov    %esp,%ebp
f010dbe2:	c7 05 88 7b 65 f0 06 	movl   $0x6,0xf0657b88
f010dbe9:	00 00 00 
f010dbec:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbef:	a3 e4 7a 65 f0       	mov    %eax,0xf0657ae4
f010dbf4:	90                   	nop
f010dbf5:	5d                   	pop    %ebp
f010dbf6:	c3                   	ret    

f010dbf7 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dbf7:	55                   	push   %ebp
f010dbf8:	89 e5                	mov    %esp,%ebp
f010dbfa:	8b 15 88 7b 65 f0    	mov    0xf0657b88,%edx
f010dc00:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc03:	39 c2                	cmp    %eax,%edx
f010dc05:	0f 94 c0             	sete   %al
f010dc08:	0f b6 c0             	movzbl %al,%eax
f010dc0b:	5d                   	pop    %ebp
f010dc0c:	c3                   	ret    

f010dc0d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dc0d:	55                   	push   %ebp
f010dc0e:	89 e5                	mov    %esp,%ebp
f010dc10:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dc15:	83 f8 03             	cmp    $0x3,%eax
f010dc18:	75 07                	jne    f010dc21 <isPageReplacmentAlgorithmCLOCK+0x14>
f010dc1a:	b8 01 00 00 00       	mov    $0x1,%eax
f010dc1f:	eb 05                	jmp    f010dc26 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dc21:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc26:	5d                   	pop    %ebp
f010dc27:	c3                   	ret    

f010dc28 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dc28:	55                   	push   %ebp
f010dc29:	89 e5                	mov    %esp,%ebp
f010dc2b:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dc30:	83 f8 04             	cmp    $0x4,%eax
f010dc33:	75 07                	jne    f010dc3c <isPageReplacmentAlgorithmFIFO+0x14>
f010dc35:	b8 01 00 00 00       	mov    $0x1,%eax
f010dc3a:	eb 05                	jmp    f010dc41 <isPageReplacmentAlgorithmFIFO+0x19>
f010dc3c:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc41:	5d                   	pop    %ebp
f010dc42:	c3                   	ret    

f010dc43 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dc43:	55                   	push   %ebp
f010dc44:	89 e5                	mov    %esp,%ebp
f010dc46:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dc4b:	83 f8 05             	cmp    $0x5,%eax
f010dc4e:	75 07                	jne    f010dc57 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dc50:	b8 01 00 00 00       	mov    $0x1,%eax
f010dc55:	eb 05                	jmp    f010dc5c <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dc57:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc5c:	5d                   	pop    %ebp
f010dc5d:	c3                   	ret    

f010dc5e <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010dc5e:	55                   	push   %ebp
f010dc5f:	89 e5                	mov    %esp,%ebp
f010dc61:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dc66:	83 f8 07             	cmp    $0x7,%eax
f010dc69:	75 07                	jne    f010dc72 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dc6b:	b8 01 00 00 00       	mov    $0x1,%eax
f010dc70:	eb 05                	jmp    f010dc77 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010dc72:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc77:	5d                   	pop    %ebp
f010dc78:	c3                   	ret    

f010dc79 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010dc79:	55                   	push   %ebp
f010dc7a:	89 e5                	mov    %esp,%ebp
f010dc7c:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dc81:	83 f8 06             	cmp    $0x6,%eax
f010dc84:	75 07                	jne    f010dc8d <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010dc86:	b8 01 00 00 00       	mov    $0x1,%eax
f010dc8b:	eb 05                	jmp    f010dc92 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010dc8d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc92:	5d                   	pop    %ebp
f010dc93:	c3                   	ret    

f010dc94 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dc94:	55                   	push   %ebp
f010dc95:	89 e5                	mov    %esp,%ebp
f010dc97:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc9a:	a3 50 7b 65 f0       	mov    %eax,0xf0657b50
f010dc9f:	90                   	nop
f010dca0:	5d                   	pop    %ebp
f010dca1:	c3                   	ret    

f010dca2 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010dca2:	55                   	push   %ebp
f010dca3:	89 e5                	mov    %esp,%ebp
f010dca5:	a1 50 7b 65 f0       	mov    0xf0657b50,%eax
f010dcaa:	5d                   	pop    %ebp
f010dcab:	c3                   	ret    

f010dcac <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010dcac:	55                   	push   %ebp
f010dcad:	89 e5                	mov    %esp,%ebp
f010dcaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcb2:	a3 90 7b 65 f0       	mov    %eax,0xf0657b90
f010dcb7:	90                   	nop
f010dcb8:	5d                   	pop    %ebp
f010dcb9:	c3                   	ret    

f010dcba <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010dcba:	55                   	push   %ebp
f010dcbb:	89 e5                	mov    %esp,%ebp
f010dcbd:	a1 90 7b 65 f0       	mov    0xf0657b90,%eax
f010dcc2:	5d                   	pop    %ebp
f010dcc3:	c3                   	ret    

f010dcc4 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010dcc4:	55                   	push   %ebp
f010dcc5:	89 e5                	mov    %esp,%ebp
f010dcc7:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcca:	a3 b0 7b 65 f0       	mov    %eax,0xf0657bb0
f010dccf:	90                   	nop
f010dcd0:	5d                   	pop    %ebp
f010dcd1:	c3                   	ret    

f010dcd2 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010dcd2:	55                   	push   %ebp
f010dcd3:	89 e5                	mov    %esp,%ebp
f010dcd5:	a1 b0 7b 65 f0       	mov    0xf0657bb0,%eax
f010dcda:	5d                   	pop    %ebp
f010dcdb:	c3                   	ret    

f010dcdc <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010dcdc:	55                   	push   %ebp
f010dcdd:	89 e5                	mov    %esp,%ebp
f010dcdf:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010dce2:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dce8:	83 ec 08             	sub    $0x8,%esp
f010dceb:	ff 75 0c             	pushl  0xc(%ebp)
f010dcee:	50                   	push   %eax
f010dcef:	e8 3c 8e ff ff       	call   f0106b30 <create_page_table>
f010dcf4:	83 c4 10             	add    $0x10,%esp
f010dcf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010dcfa:	90                   	nop
f010dcfb:	c9                   	leave  
f010dcfc:	c3                   	ret    

f010dcfd <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010dcfd:	55                   	push   %ebp
f010dcfe:	89 e5                	mov    %esp,%ebp
f010dd00:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010dd03:	83 ec 04             	sub    $0x4,%esp
f010dd06:	68 68 75 13 f0       	push   $0xf0137568
f010dd0b:	6a 50                	push   $0x50
f010dd0d:	68 4b 75 13 f0       	push   $0xf013754b
f010dd12:	e8 e4 24 ff ff       	call   f01001fb <_panic>

f010dd17 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010dd17:	55                   	push   %ebp
f010dd18:	89 e5                	mov    %esp,%ebp
f010dd1a:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010dd1d:	83 ec 04             	sub    $0x4,%esp
f010dd20:	68 9c 75 13 f0       	push   $0xf013759c
f010dd25:	6a 57                	push   $0x57
f010dd27:	68 4b 75 13 f0       	push   $0xf013754b
f010dd2c:	e8 ca 24 ff ff       	call   f01001fb <_panic>

f010dd31 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010dd31:	55                   	push   %ebp
f010dd32:	89 e5                	mov    %esp,%ebp
f010dd34:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010dd37:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd3a:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010dd3f:	8b 55 08             	mov    0x8(%ebp),%edx
f010dd42:	89 d0                	mov    %edx,%eax
f010dd44:	c1 e0 02             	shl    $0x2,%eax
f010dd47:	01 d0                	add    %edx,%eax
f010dd49:	01 c0                	add    %eax,%eax
f010dd4b:	01 d0                	add    %edx,%eax
f010dd4d:	01 c0                	add    %eax,%eax
f010dd4f:	01 d0                	add    %edx,%eax
f010dd51:	c1 e0 02             	shl    $0x2,%eax
f010dd54:	83 ec 0c             	sub    $0xc,%esp
f010dd57:	50                   	push   %eax
f010dd58:	e8 b6 9a ff ff       	call   f0107813 <kmalloc>
f010dd5d:	83 c4 10             	add    $0x10,%esp
f010dd60:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
	if (semaphores == NULL)
f010dd65:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dd6a:	85 c0                	test   %eax,%eax
f010dd6c:	75 14                	jne    f010dd82 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010dd6e:	83 ec 04             	sub    $0x4,%esp
f010dd71:	68 e0 75 13 f0       	push   $0xf01375e0
f010dd76:	6a 1e                	push   $0x1e
f010dd78:	68 20 76 13 f0       	push   $0xf0137620
f010dd7d:	e8 79 24 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dd82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dd89:	e9 bd 00 00 00       	jmp    f010de4b <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010dd8e:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd97:	89 d0                	mov    %edx,%eax
f010dd99:	c1 e0 02             	shl    $0x2,%eax
f010dd9c:	01 d0                	add    %edx,%eax
f010dd9e:	01 c0                	add    %eax,%eax
f010dda0:	01 d0                	add    %edx,%eax
f010dda2:	01 c0                	add    %eax,%eax
f010dda4:	01 d0                	add    %edx,%eax
f010dda6:	c1 e0 02             	shl    $0x2,%eax
f010dda9:	01 c8                	add    %ecx,%eax
f010ddab:	83 ec 04             	sub    $0x4,%esp
f010ddae:	6a 5c                	push   $0x5c
f010ddb0:	6a 00                	push   $0x0
f010ddb2:	50                   	push   %eax
f010ddb3:	e8 b6 31 02 00       	call   f0130f6e <memset>
f010ddb8:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010ddbb:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010ddc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddc4:	89 d0                	mov    %edx,%eax
f010ddc6:	c1 e0 02             	shl    $0x2,%eax
f010ddc9:	01 d0                	add    %edx,%eax
f010ddcb:	01 c0                	add    %eax,%eax
f010ddcd:	01 d0                	add    %edx,%eax
f010ddcf:	01 c0                	add    %eax,%eax
f010ddd1:	01 d0                	add    %edx,%eax
f010ddd3:	c1 e0 02             	shl    $0x2,%eax
f010ddd6:	01 c8                	add    %ecx,%eax
f010ddd8:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010dddc:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dde2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dde5:	89 d0                	mov    %edx,%eax
f010dde7:	c1 e0 02             	shl    $0x2,%eax
f010ddea:	01 d0                	add    %edx,%eax
f010ddec:	01 c0                	add    %eax,%eax
f010ddee:	01 d0                	add    %edx,%eax
f010ddf0:	01 c0                	add    %eax,%eax
f010ddf2:	01 d0                	add    %edx,%eax
f010ddf4:	c1 e0 02             	shl    $0x2,%eax
f010ddf7:	01 c8                	add    %ecx,%eax
f010ddf9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010de00:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de09:	89 d0                	mov    %edx,%eax
f010de0b:	c1 e0 02             	shl    $0x2,%eax
f010de0e:	01 d0                	add    %edx,%eax
f010de10:	01 c0                	add    %eax,%eax
f010de12:	01 d0                	add    %edx,%eax
f010de14:	01 c0                	add    %eax,%eax
f010de16:	01 d0                	add    %edx,%eax
f010de18:	c1 e0 02             	shl    $0x2,%eax
f010de1b:	01 c8                	add    %ecx,%eax
f010de1d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010de24:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de2d:	89 d0                	mov    %edx,%eax
f010de2f:	c1 e0 02             	shl    $0x2,%eax
f010de32:	01 d0                	add    %edx,%eax
f010de34:	01 c0                	add    %eax,%eax
f010de36:	01 d0                	add    %edx,%eax
f010de38:	01 c0                	add    %eax,%eax
f010de3a:	01 d0                	add    %edx,%eax
f010de3c:	c1 e0 02             	shl    $0x2,%eax
f010de3f:	01 c8                	add    %ecx,%eax
f010de41:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010de48:	ff 45 f4             	incl   -0xc(%ebp)
f010de4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de4e:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de53:	39 c2                	cmp    %eax,%edx
f010de55:	0f 82 33 ff ff ff    	jb     f010dd8e <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010de5b:	90                   	nop
f010de5c:	c9                   	leave  
f010de5d:	c3                   	ret    

f010de5e <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010de5e:	55                   	push   %ebp
f010de5f:	89 e5                	mov    %esp,%ebp
f010de61:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010de64:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010de6b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010de72:	eb 2f                	jmp    f010dea3 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010de74:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de7d:	89 d0                	mov    %edx,%eax
f010de7f:	c1 e0 02             	shl    $0x2,%eax
f010de82:	01 d0                	add    %edx,%eax
f010de84:	01 c0                	add    %eax,%eax
f010de86:	01 d0                	add    %edx,%eax
f010de88:	01 c0                	add    %eax,%eax
f010de8a:	01 d0                	add    %edx,%eax
f010de8c:	c1 e0 02             	shl    $0x2,%eax
f010de8f:	01 c8                	add    %ecx,%eax
f010de91:	8a 40 58             	mov    0x58(%eax),%al
f010de94:	84 c0                	test   %al,%al
f010de96:	74 08                	je     f010dea0 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010de98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010de9e:	eb 0f                	jmp    f010deaf <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dea0:	ff 45 f0             	incl   -0x10(%ebp)
f010dea3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dea6:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010deab:	39 c2                	cmp    %eax,%edx
f010dead:	72 c5                	jb     f010de74 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010deaf:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010deb3:	75 4d                	jne    f010df02 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010deb5:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010deba:	01 c0                	add    %eax,%eax
f010debc:	89 c2                	mov    %eax,%edx
f010debe:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dec3:	83 ec 08             	sub    $0x8,%esp
f010dec6:	52                   	push   %edx
f010dec7:	50                   	push   %eax
f010dec8:	e8 06 9c ff ff       	call   f0107ad3 <krealloc>
f010decd:	83 c4 10             	add    $0x10,%esp
f010ded0:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
			if (semaphores == NULL)
f010ded5:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010deda:	85 c0                	test   %eax,%eax
f010dedc:	75 10                	jne    f010deee <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010dede:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010dee7:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010deec:	eb 5b                	jmp    f010df49 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010deee:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010def3:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010def6:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010defb:	01 c0                	add    %eax,%eax
f010defd:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010df02:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df0b:	89 d0                	mov    %edx,%eax
f010df0d:	c1 e0 02             	shl    $0x2,%eax
f010df10:	01 d0                	add    %edx,%eax
f010df12:	01 c0                	add    %eax,%eax
f010df14:	01 d0                	add    %edx,%eax
f010df16:	01 c0                	add    %eax,%eax
f010df18:	01 d0                	add    %edx,%eax
f010df1a:	c1 e0 02             	shl    $0x2,%eax
f010df1d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010df20:	8b 45 08             	mov    0x8(%ebp),%eax
f010df23:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010df25:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df2e:	89 d0                	mov    %edx,%eax
f010df30:	c1 e0 02             	shl    $0x2,%eax
f010df33:	01 d0                	add    %edx,%eax
f010df35:	01 c0                	add    %eax,%eax
f010df37:	01 d0                	add    %edx,%eax
f010df39:	01 c0                	add    %eax,%eax
f010df3b:	01 d0                	add    %edx,%eax
f010df3d:	c1 e0 02             	shl    $0x2,%eax
f010df40:	01 c8                	add    %ecx,%eax
f010df42:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010df46:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010df49:	c9                   	leave  
f010df4a:	c3                   	ret    

f010df4b <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010df4b:	55                   	push   %ebp
f010df4c:	89 e5                	mov    %esp,%ebp
f010df4e:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010df51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010df58:	e9 84 00 00 00       	jmp    f010dfe1 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010df5d:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df66:	89 d0                	mov    %edx,%eax
f010df68:	c1 e0 02             	shl    $0x2,%eax
f010df6b:	01 d0                	add    %edx,%eax
f010df6d:	01 c0                	add    %eax,%eax
f010df6f:	01 d0                	add    %edx,%eax
f010df71:	01 c0                	add    %eax,%eax
f010df73:	01 d0                	add    %edx,%eax
f010df75:	c1 e0 02             	shl    $0x2,%eax
f010df78:	01 c8                	add    %ecx,%eax
f010df7a:	8a 40 58             	mov    0x58(%eax),%al
f010df7d:	84 c0                	test   %al,%al
f010df7f:	75 5c                	jne    f010dfdd <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010df81:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df8a:	89 d0                	mov    %edx,%eax
f010df8c:	c1 e0 02             	shl    $0x2,%eax
f010df8f:	01 d0                	add    %edx,%eax
f010df91:	01 c0                	add    %eax,%eax
f010df93:	01 d0                	add    %edx,%eax
f010df95:	01 c0                	add    %eax,%eax
f010df97:	01 d0                	add    %edx,%eax
f010df99:	c1 e0 02             	shl    $0x2,%eax
f010df9c:	01 c8                	add    %ecx,%eax
f010df9e:	8b 00                	mov    (%eax),%eax
f010dfa0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010dfa3:	75 39                	jne    f010dfde <get_semaphore_object_ID+0x93>
f010dfa5:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dfab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfae:	89 d0                	mov    %edx,%eax
f010dfb0:	c1 e0 02             	shl    $0x2,%eax
f010dfb3:	01 d0                	add    %edx,%eax
f010dfb5:	01 c0                	add    %eax,%eax
f010dfb7:	01 d0                	add    %edx,%eax
f010dfb9:	01 c0                	add    %eax,%eax
f010dfbb:	01 d0                	add    %edx,%eax
f010dfbd:	c1 e0 02             	shl    $0x2,%eax
f010dfc0:	01 c8                	add    %ecx,%eax
f010dfc2:	83 c0 04             	add    $0x4,%eax
f010dfc5:	83 ec 08             	sub    $0x8,%esp
f010dfc8:	50                   	push   %eax
f010dfc9:	ff 75 0c             	pushl  0xc(%ebp)
f010dfcc:	e8 bb 2e 02 00       	call   f0130e8c <strcmp>
f010dfd1:	83 c4 10             	add    $0x10,%esp
f010dfd4:	85 c0                	test   %eax,%eax
f010dfd6:	75 06                	jne    f010dfde <get_semaphore_object_ID+0x93>
		{
			return i;
f010dfd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dfdb:	eb 19                	jmp    f010dff6 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dfdd:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dfde:	ff 45 f4             	incl   -0xc(%ebp)
f010dfe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfe4:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dfe9:	39 c2                	cmp    %eax,%edx
f010dfeb:	0f 82 6c ff ff ff    	jb     f010df5d <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010dff1:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010dff6:	c9                   	leave  
f010dff7:	c3                   	ret    

f010dff8 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010dff8:	55                   	push   %ebp
f010dff9:	89 e5                	mov    %esp,%ebp
f010dffb:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010dffe:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010e003:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e006:	72 0a                	jb     f010e012 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e008:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e00d:	e9 bf 00 00 00       	jmp    f010e0d1 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e012:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010e018:	8b 55 08             	mov    0x8(%ebp),%edx
f010e01b:	89 d0                	mov    %edx,%eax
f010e01d:	c1 e0 02             	shl    $0x2,%eax
f010e020:	01 d0                	add    %edx,%eax
f010e022:	01 c0                	add    %eax,%eax
f010e024:	01 d0                	add    %edx,%eax
f010e026:	01 c0                	add    %eax,%eax
f010e028:	01 d0                	add    %edx,%eax
f010e02a:	c1 e0 02             	shl    $0x2,%eax
f010e02d:	01 c8                	add    %ecx,%eax
f010e02f:	83 ec 04             	sub    $0x4,%esp
f010e032:	6a 5c                	push   $0x5c
f010e034:	6a 00                	push   $0x0
f010e036:	50                   	push   %eax
f010e037:	e8 32 2f 02 00       	call   f0130f6e <memset>
f010e03c:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e03f:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010e045:	8b 55 08             	mov    0x8(%ebp),%edx
f010e048:	89 d0                	mov    %edx,%eax
f010e04a:	c1 e0 02             	shl    $0x2,%eax
f010e04d:	01 d0                	add    %edx,%eax
f010e04f:	01 c0                	add    %eax,%eax
f010e051:	01 d0                	add    %edx,%eax
f010e053:	01 c0                	add    %eax,%eax
f010e055:	01 d0                	add    %edx,%eax
f010e057:	c1 e0 02             	shl    $0x2,%eax
f010e05a:	01 c8                	add    %ecx,%eax
f010e05c:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e060:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010e066:	8b 55 08             	mov    0x8(%ebp),%edx
f010e069:	89 d0                	mov    %edx,%eax
f010e06b:	c1 e0 02             	shl    $0x2,%eax
f010e06e:	01 d0                	add    %edx,%eax
f010e070:	01 c0                	add    %eax,%eax
f010e072:	01 d0                	add    %edx,%eax
f010e074:	01 c0                	add    %eax,%eax
f010e076:	01 d0                	add    %edx,%eax
f010e078:	c1 e0 02             	shl    $0x2,%eax
f010e07b:	01 c8                	add    %ecx,%eax
f010e07d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e084:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010e08a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e08d:	89 d0                	mov    %edx,%eax
f010e08f:	c1 e0 02             	shl    $0x2,%eax
f010e092:	01 d0                	add    %edx,%eax
f010e094:	01 c0                	add    %eax,%eax
f010e096:	01 d0                	add    %edx,%eax
f010e098:	01 c0                	add    %eax,%eax
f010e09a:	01 d0                	add    %edx,%eax
f010e09c:	c1 e0 02             	shl    $0x2,%eax
f010e09f:	01 c8                	add    %ecx,%eax
f010e0a1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e0a8:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010e0ae:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0b1:	89 d0                	mov    %edx,%eax
f010e0b3:	c1 e0 02             	shl    $0x2,%eax
f010e0b6:	01 d0                	add    %edx,%eax
f010e0b8:	01 c0                	add    %eax,%eax
f010e0ba:	01 d0                	add    %edx,%eax
f010e0bc:	01 c0                	add    %eax,%eax
f010e0be:	01 d0                	add    %edx,%eax
f010e0c0:	c1 e0 02             	shl    $0x2,%eax
f010e0c3:	01 c8                	add    %ecx,%eax
f010e0c5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e0cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e0d1:	c9                   	leave  
f010e0d2:	c3                   	ret    

f010e0d3 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e0d3:	55                   	push   %ebp
f010e0d4:	89 e5                	mov    %esp,%ebp
f010e0d6:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010e0d9:	83 ec 04             	sub    $0x4,%esp
f010e0dc:	68 40 76 13 f0       	push   $0xf0137640
f010e0e1:	68 94 00 00 00       	push   $0x94
f010e0e6:	68 20 76 13 f0       	push   $0xf0137620
f010e0eb:	e8 0b 21 ff ff       	call   f01001fb <_panic>

f010e0f0 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e0f0:	55                   	push   %ebp
f010e0f1:	89 e5                	mov    %esp,%ebp
f010e0f3:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e0f6:	83 ec 04             	sub    $0x4,%esp
f010e0f9:	68 70 76 13 f0       	push   $0xf0137670
f010e0fe:	68 a6 00 00 00       	push   $0xa6
f010e103:	68 20 76 13 f0       	push   $0xf0137620
f010e108:	e8 ee 20 ff ff       	call   f01001fb <_panic>

f010e10d <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e10d:	55                   	push   %ebp
f010e10e:	89 e5                	mov    %esp,%ebp
f010e110:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e113:	83 ec 04             	sub    $0x4,%esp
f010e116:	68 9c 76 13 f0       	push   $0xf013769c
f010e11b:	68 ba 00 00 00       	push   $0xba
f010e120:	68 20 76 13 f0       	push   $0xf0137620
f010e125:	e8 d1 20 ff ff       	call   f01001fb <_panic>

f010e12a <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e12a:	55                   	push   %ebp
f010e12b:	89 e5                	mov    %esp,%ebp
f010e12d:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e130:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e137:	83 ec 0c             	sub    $0xc,%esp
f010e13a:	ff 75 ec             	pushl  -0x14(%ebp)
f010e13d:	e8 a8 37 02 00       	call   f01318ea <initialize_MemBlocksList>
f010e142:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e145:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e14a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e14d:	74 17                	je     f010e166 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e14f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e154:	50                   	push   %eax
f010e155:	68 e0 76 13 f0       	push   $0xf01376e0
f010e15a:	6a 1f                	push   $0x1f
f010e15c:	68 34 77 13 f0       	push   $0xf0137734
f010e161:	e8 95 20 ff ff       	call   f01001fb <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e166:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e16b:	85 c0                	test   %eax,%eax
f010e16d:	74 17                	je     f010e186 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e16f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e174:	50                   	push   %eax
f010e175:	68 58 77 13 f0       	push   $0xf0137758
f010e17a:	6a 26                	push   $0x26
f010e17c:	68 34 77 13 f0       	push   $0xf0137734
f010e181:	e8 75 20 ff ff       	call   f01001fb <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e186:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e18b:	85 c0                	test   %eax,%eax
f010e18d:	74 17                	je     f010e1a6 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e18f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e194:	50                   	push   %eax
f010e195:	68 a8 77 13 f0       	push   $0xf01377a8
f010e19a:	6a 2c                	push   $0x2c
f010e19c:	68 34 77 13 f0       	push   $0xf0137734
f010e1a1:	e8 55 20 ff ff       	call   f01001fb <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e1a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e1ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e1b4:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f010e1b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e1bc:	eb 29                	jmp    f010e1e7 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e1be:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1c4:	8b 50 0c             	mov    0xc(%eax),%edx
f010e1c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1ca:	8b 40 08             	mov    0x8(%eax),%eax
f010e1cd:	83 ec 04             	sub    $0x4,%esp
f010e1d0:	52                   	push   %edx
f010e1d1:	50                   	push   %eax
f010e1d2:	68 f8 77 13 f0       	push   $0xf01377f8
f010e1d7:	e8 a6 2a ff ff       	call   f0100c82 <cprintf>
f010e1dc:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e1df:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e1e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e1e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e1eb:	74 07                	je     f010e1f4 <test_initialize_MemBlocksList+0xca>
f010e1ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1f0:	8b 00                	mov    (%eax),%eax
f010e1f2:	eb 05                	jmp    f010e1f9 <test_initialize_MemBlocksList+0xcf>
f010e1f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1f9:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f010e1fe:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e203:	85 c0                	test   %eax,%eax
f010e205:	75 b7                	jne    f010e1be <test_initialize_MemBlocksList+0x94>
f010e207:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e20b:	75 b1                	jne    f010e1be <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e20d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e212:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e215:	74 14                	je     f010e22b <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e217:	83 ec 04             	sub    $0x4,%esp
f010e21a:	68 18 78 13 f0       	push   $0xf0137818
f010e21f:	6a 38                	push   $0x38
f010e221:	68 34 77 13 f0       	push   $0xf0137734
f010e226:	e8 d0 1f ff ff       	call   f01001fb <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e22b:	83 ec 0c             	sub    $0xc,%esp
f010e22e:	68 70 78 13 f0       	push   $0xf0137870
f010e233:	e8 4a 2a ff ff       	call   f0100c82 <cprintf>
f010e238:	83 c4 10             	add    $0x10,%esp
}
f010e23b:	90                   	nop
f010e23c:	c9                   	leave  
f010e23d:	c3                   	ret    

f010e23e <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e23e:	55                   	push   %ebp
f010e23f:	89 e5                	mov    %esp,%ebp
f010e241:	57                   	push   %edi
f010e242:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e248:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e24f:	83 ec 0c             	sub    $0xc,%esp
f010e252:	ff 75 f4             	pushl  -0xc(%ebp)
f010e255:	e8 90 36 02 00       	call   f01318ea <initialize_MemBlocksList>
f010e25a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e25d:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e264:	00 00 00 
f010e267:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e26e:	00 00 00 
f010e271:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e278:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e27b:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e282:	00 00 00 
f010e285:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e28c:	00 00 00 
f010e28f:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e296:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e299:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e29c:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e2a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2a6:	89 d7                	mov    %edx,%edi
f010e2a8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e2aa:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e2ad:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e2b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2b7:	89 d7                	mov    %edx,%edi
f010e2b9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e2bb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e2c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e2c9:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e2d0:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e2d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e2da:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e2dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e2e0:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e2e3:	83 ec 0c             	sub    $0xc,%esp
f010e2e6:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e2e9:	50                   	push   %eax
f010e2ea:	e8 30 37 02 00       	call   f0131a1f <insert_sorted_allocList>
f010e2ef:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e2f2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e2f9:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e2fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e301:	74 14                	je     f010e317 <test_insert_sorted_allocList+0xd9>
f010e303:	83 ec 04             	sub    $0x4,%esp
f010e306:	68 bc 78 13 f0       	push   $0xf01378bc
f010e30b:	6a 56                	push   $0x56
f010e30d:	68 34 77 13 f0       	push   $0xf0137734
f010e312:	e8 e4 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e317:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e31c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e31f:	74 14                	je     f010e335 <test_insert_sorted_allocList+0xf7>
f010e321:	83 ec 04             	sub    $0x4,%esp
f010e324:	68 08 79 13 f0       	push   $0xf0137908
f010e329:	6a 59                	push   $0x59
f010e32b:	68 34 77 13 f0       	push   $0xf0137734
f010e330:	e8 c6 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e335:	83 ec 0c             	sub    $0xc,%esp
f010e338:	ff 75 f0             	pushl  -0x10(%ebp)
f010e33b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e33e:	50                   	push   %eax
f010e33f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e342:	50                   	push   %eax
f010e343:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e346:	50                   	push   %eax
f010e347:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e34c:	e8 7d 26 00 00       	call   f01109ce <check_list_data>
f010e351:	83 c4 20             	add    $0x20,%esp
f010e354:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e357:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e35b:	74 14                	je     f010e371 <test_insert_sorted_allocList+0x133>
f010e35d:	83 ec 04             	sub    $0x4,%esp
f010e360:	68 58 79 13 f0       	push   $0xf0137958
f010e365:	6a 5d                	push   $0x5d
f010e367:	68 34 77 13 f0       	push   $0xf0137734
f010e36c:	e8 8a 1e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e371:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e374:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e377:	74 14                	je     f010e38d <test_insert_sorted_allocList+0x14f>
f010e379:	83 ec 04             	sub    $0x4,%esp
f010e37c:	68 a8 79 13 f0       	push   $0xf01379a8
f010e381:	6a 5e                	push   $0x5e
f010e383:	68 34 77 13 f0       	push   $0xf0137734
f010e388:	e8 6e 1e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e38d:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e394:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e39b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e39e:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e3a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e3a4:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e3a7:	83 ec 0c             	sub    $0xc,%esp
f010e3aa:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e3ad:	50                   	push   %eax
f010e3ae:	e8 6c 36 02 00       	call   f0131a1f <insert_sorted_allocList>
f010e3b3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e3b6:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e3bd:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e3c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e3c5:	74 14                	je     f010e3db <test_insert_sorted_allocList+0x19d>
f010e3c7:	83 ec 04             	sub    $0x4,%esp
f010e3ca:	68 bc 78 13 f0       	push   $0xf01378bc
f010e3cf:	6a 6d                	push   $0x6d
f010e3d1:	68 34 77 13 f0       	push   $0xf0137734
f010e3d6:	e8 20 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e3db:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e3e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e3e3:	74 14                	je     f010e3f9 <test_insert_sorted_allocList+0x1bb>
f010e3e5:	83 ec 04             	sub    $0x4,%esp
f010e3e8:	68 08 79 13 f0       	push   $0xf0137908
f010e3ed:	6a 70                	push   $0x70
f010e3ef:	68 34 77 13 f0       	push   $0xf0137734
f010e3f4:	e8 02 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e3f9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e400:	83 ec 0c             	sub    $0xc,%esp
f010e403:	ff 75 f0             	pushl  -0x10(%ebp)
f010e406:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e409:	50                   	push   %eax
f010e40a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e40d:	50                   	push   %eax
f010e40e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e411:	50                   	push   %eax
f010e412:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e417:	e8 b2 25 00 00       	call   f01109ce <check_list_data>
f010e41c:	83 c4 20             	add    $0x20,%esp
f010e41f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e422:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e426:	74 14                	je     f010e43c <test_insert_sorted_allocList+0x1fe>
f010e428:	83 ec 04             	sub    $0x4,%esp
f010e42b:	68 58 79 13 f0       	push   $0xf0137958
f010e430:	6a 75                	push   $0x75
f010e432:	68 34 77 13 f0       	push   $0xf0137734
f010e437:	e8 bf 1d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e43c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e43f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e442:	74 14                	je     f010e458 <test_insert_sorted_allocList+0x21a>
f010e444:	83 ec 04             	sub    $0x4,%esp
f010e447:	68 a8 79 13 f0       	push   $0xf01379a8
f010e44c:	6a 76                	push   $0x76
f010e44e:	68 34 77 13 f0       	push   $0xf0137734
f010e453:	e8 a3 1d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e458:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e45f:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e466:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e469:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e46c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e46f:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e472:	83 ec 0c             	sub    $0xc,%esp
f010e475:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e478:	50                   	push   %eax
f010e479:	e8 a1 35 02 00       	call   f0131a1f <insert_sorted_allocList>
f010e47e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e481:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e488:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e48d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e490:	74 17                	je     f010e4a9 <test_insert_sorted_allocList+0x26b>
f010e492:	83 ec 04             	sub    $0x4,%esp
f010e495:	68 bc 78 13 f0       	push   $0xf01378bc
f010e49a:	68 85 00 00 00       	push   $0x85
f010e49f:	68 34 77 13 f0       	push   $0xf0137734
f010e4a4:	e8 52 1d ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e4a9:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e4ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e4b1:	74 17                	je     f010e4ca <test_insert_sorted_allocList+0x28c>
f010e4b3:	83 ec 04             	sub    $0x4,%esp
f010e4b6:	68 f4 79 13 f0       	push   $0xf01379f4
f010e4bb:	68 88 00 00 00       	push   $0x88
f010e4c0:	68 34 77 13 f0       	push   $0xf0137734
f010e4c5:	e8 31 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e4ca:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e4d1:	83 ec 0c             	sub    $0xc,%esp
f010e4d4:	ff 75 f0             	pushl  -0x10(%ebp)
f010e4d7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e4da:	50                   	push   %eax
f010e4db:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e4de:	50                   	push   %eax
f010e4df:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e4e2:	50                   	push   %eax
f010e4e3:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e4e8:	e8 e1 24 00 00       	call   f01109ce <check_list_data>
f010e4ed:	83 c4 20             	add    $0x20,%esp
f010e4f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e4f3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e4f7:	74 17                	je     f010e510 <test_insert_sorted_allocList+0x2d2>
f010e4f9:	83 ec 04             	sub    $0x4,%esp
f010e4fc:	68 58 79 13 f0       	push   $0xf0137958
f010e501:	68 8d 00 00 00       	push   $0x8d
f010e506:	68 34 77 13 f0       	push   $0xf0137734
f010e50b:	e8 eb 1c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e510:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e513:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e516:	74 17                	je     f010e52f <test_insert_sorted_allocList+0x2f1>
f010e518:	83 ec 04             	sub    $0x4,%esp
f010e51b:	68 a8 79 13 f0       	push   $0xf01379a8
f010e520:	68 8e 00 00 00       	push   $0x8e
f010e525:	68 34 77 13 f0       	push   $0xf0137734
f010e52a:	e8 cc 1c ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e52f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e536:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e53d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e540:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e543:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e546:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e549:	83 ec 0c             	sub    $0xc,%esp
f010e54c:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e54f:	50                   	push   %eax
f010e550:	e8 ca 34 02 00       	call   f0131a1f <insert_sorted_allocList>
f010e555:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e558:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e55f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e564:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e567:	74 17                	je     f010e580 <test_insert_sorted_allocList+0x342>
f010e569:	83 ec 04             	sub    $0x4,%esp
f010e56c:	68 bc 78 13 f0       	push   $0xf01378bc
f010e571:	68 9c 00 00 00       	push   $0x9c
f010e576:	68 34 77 13 f0       	push   $0xf0137734
f010e57b:	e8 7b 1c ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e580:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e585:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e588:	74 17                	je     f010e5a1 <test_insert_sorted_allocList+0x363>
f010e58a:	83 ec 04             	sub    $0x4,%esp
f010e58d:	68 08 79 13 f0       	push   $0xf0137908
f010e592:	68 9f 00 00 00       	push   $0x9f
f010e597:	68 34 77 13 f0       	push   $0xf0137734
f010e59c:	e8 5a 1c ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e5a1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e5a8:	83 ec 0c             	sub    $0xc,%esp
f010e5ab:	ff 75 f0             	pushl  -0x10(%ebp)
f010e5ae:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e5b1:	50                   	push   %eax
f010e5b2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e5b5:	50                   	push   %eax
f010e5b6:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e5b9:	50                   	push   %eax
f010e5ba:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e5bf:	e8 0a 24 00 00       	call   f01109ce <check_list_data>
f010e5c4:	83 c4 20             	add    $0x20,%esp
f010e5c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e5ca:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e5ce:	74 17                	je     f010e5e7 <test_insert_sorted_allocList+0x3a9>
f010e5d0:	83 ec 04             	sub    $0x4,%esp
f010e5d3:	68 58 79 13 f0       	push   $0xf0137958
f010e5d8:	68 a4 00 00 00       	push   $0xa4
f010e5dd:	68 34 77 13 f0       	push   $0xf0137734
f010e5e2:	e8 14 1c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e5e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e5ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5ed:	74 17                	je     f010e606 <test_insert_sorted_allocList+0x3c8>
f010e5ef:	83 ec 04             	sub    $0x4,%esp
f010e5f2:	68 a8 79 13 f0       	push   $0xf01379a8
f010e5f7:	68 a5 00 00 00       	push   $0xa5
f010e5fc:	68 34 77 13 f0       	push   $0xf0137734
f010e601:	e8 f5 1b ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e606:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e60d:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e617:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e61d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e620:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e626:	83 ec 0c             	sub    $0xc,%esp
f010e629:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e62f:	50                   	push   %eax
f010e630:	e8 ea 33 02 00       	call   f0131a1f <insert_sorted_allocList>
f010e635:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e638:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e63f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e644:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e647:	74 17                	je     f010e660 <test_insert_sorted_allocList+0x422>
f010e649:	83 ec 04             	sub    $0x4,%esp
f010e64c:	68 bc 78 13 f0       	push   $0xf01378bc
f010e651:	68 b3 00 00 00       	push   $0xb3
f010e656:	68 34 77 13 f0       	push   $0xf0137734
f010e65b:	e8 9b 1b ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e660:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e665:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e668:	74 17                	je     f010e681 <test_insert_sorted_allocList+0x443>
f010e66a:	83 ec 04             	sub    $0x4,%esp
f010e66d:	68 08 79 13 f0       	push   $0xf0137908
f010e672:	68 b6 00 00 00       	push   $0xb6
f010e677:	68 34 77 13 f0       	push   $0xf0137734
f010e67c:	e8 7a 1b ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e681:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e688:	83 ec 0c             	sub    $0xc,%esp
f010e68b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e68e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e691:	50                   	push   %eax
f010e692:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e695:	50                   	push   %eax
f010e696:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e699:	50                   	push   %eax
f010e69a:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e69f:	e8 2a 23 00 00       	call   f01109ce <check_list_data>
f010e6a4:	83 c4 20             	add    $0x20,%esp
f010e6a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e6aa:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e6ae:	74 17                	je     f010e6c7 <test_insert_sorted_allocList+0x489>
f010e6b0:	83 ec 04             	sub    $0x4,%esp
f010e6b3:	68 58 79 13 f0       	push   $0xf0137958
f010e6b8:	68 bb 00 00 00       	push   $0xbb
f010e6bd:	68 34 77 13 f0       	push   $0xf0137734
f010e6c2:	e8 34 1b ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e6c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e6ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e6cd:	74 17                	je     f010e6e6 <test_insert_sorted_allocList+0x4a8>
f010e6cf:	83 ec 04             	sub    $0x4,%esp
f010e6d2:	68 a8 79 13 f0       	push   $0xf01379a8
f010e6d7:	68 bc 00 00 00       	push   $0xbc
f010e6dc:	68 34 77 13 f0       	push   $0xf0137734
f010e6e1:	e8 15 1b ff ff       	call   f01001fb <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e6e6:	83 ec 0c             	sub    $0xc,%esp
f010e6e9:	68 44 7a 13 f0       	push   $0xf0137a44
f010e6ee:	e8 8f 25 ff ff       	call   f0100c82 <cprintf>
f010e6f3:	83 c4 10             	add    $0x10,%esp
}
f010e6f6:	90                   	nop
f010e6f7:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e6fa:	c9                   	leave  
f010e6fb:	c3                   	ret    

f010e6fc <test_find_block>:

void test_find_block()
{
f010e6fc:	55                   	push   %ebp
f010e6fd:	89 e5                	mov    %esp,%ebp
f010e6ff:	57                   	push   %edi
f010e700:	56                   	push   %esi
f010e701:	53                   	push   %ebx
f010e702:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e708:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e70f:	83 ec 0c             	sub    $0xc,%esp
f010e712:	ff 75 e0             	pushl  -0x20(%ebp)
f010e715:	e8 d0 31 02 00       	call   f01318ea <initialize_MemBlocksList>
f010e71a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e71d:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e724:	00 00 00 
f010e727:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e72e:	00 00 00 
f010e731:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e738:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e73b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e73e:	bb bc 7b 13 f0       	mov    $0xf0137bbc,%ebx
f010e743:	ba 06 00 00 00       	mov    $0x6,%edx
f010e748:	89 c7                	mov    %eax,%edi
f010e74a:	89 de                	mov    %ebx,%esi
f010e74c:	89 d1                	mov    %edx,%ecx
f010e74e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e750:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e753:	bb d4 7b 13 f0       	mov    $0xf0137bd4,%ebx
f010e758:	ba 06 00 00 00       	mov    $0x6,%edx
f010e75d:	89 c7                	mov    %eax,%edi
f010e75f:	89 de                	mov    %ebx,%esi
f010e761:	89 d1                	mov    %edx,%ecx
f010e763:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e765:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e76c:	00 00 00 
f010e76f:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e776:	00 00 00 
f010e779:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e780:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e783:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e78a:	e9 5f 01 00 00       	jmp    f010e8ee <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e78f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e792:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e796:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e799:	c1 e2 04             	shl    $0x4,%edx
f010e79c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e79f:	01 da                	add    %ebx,%edx
f010e7a1:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e7a7:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e7a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7ac:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e7b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e7b3:	c1 e2 04             	shl    $0x4,%edx
f010e7b6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e7b9:	01 f2                	add    %esi,%edx
f010e7bb:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e7c1:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e7c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e7c7:	0f 85 92 00 00 00    	jne    f010e85f <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e7cd:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e7d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e7d5:	c1 e2 04             	shl    $0x4,%edx
f010e7d8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e7db:	01 fa                	add    %edi,%edx
f010e7dd:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e7e3:	89 02                	mov    %eax,(%edx)
f010e7e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7e8:	c1 e0 04             	shl    $0x4,%eax
f010e7eb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e7ee:	01 d8                	add    %ebx,%eax
f010e7f0:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e7f5:	8b 00                	mov    (%eax),%eax
f010e7f7:	85 c0                	test   %eax,%eax
f010e7f9:	74 18                	je     f010e813 <test_find_block+0x117>
f010e7fb:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e800:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e806:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e809:	c1 e1 04             	shl    $0x4,%ecx
f010e80c:	01 ca                	add    %ecx,%edx
f010e80e:	89 50 04             	mov    %edx,0x4(%eax)
f010e811:	eb 13                	jmp    f010e826 <test_find_block+0x12a>
f010e813:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e819:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e81c:	c1 e2 04             	shl    $0x4,%edx
f010e81f:	01 d0                	add    %edx,%eax
f010e821:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e826:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e82c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e82f:	c1 e2 04             	shl    $0x4,%edx
f010e832:	01 d0                	add    %edx,%eax
f010e834:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e839:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e83c:	c1 e0 04             	shl    $0x4,%eax
f010e83f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e842:	01 f0                	add    %esi,%eax
f010e844:	2d 98 00 00 00       	sub    $0x98,%eax
f010e849:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e84f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e854:	40                   	inc    %eax
f010e855:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
f010e85a:	e9 8c 00 00 00       	jmp    f010e8eb <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e85f:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e864:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e867:	c1 e2 04             	shl    $0x4,%edx
f010e86a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e86d:	01 fa                	add    %edi,%edx
f010e86f:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e875:	89 02                	mov    %eax,(%edx)
f010e877:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e87a:	c1 e0 04             	shl    $0x4,%eax
f010e87d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e880:	01 d8                	add    %ebx,%eax
f010e882:	2d 98 00 00 00       	sub    $0x98,%eax
f010e887:	8b 00                	mov    (%eax),%eax
f010e889:	85 c0                	test   %eax,%eax
f010e88b:	74 17                	je     f010e8a4 <test_find_block+0x1a8>
f010e88d:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e892:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e898:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e89b:	c1 e1 04             	shl    $0x4,%ecx
f010e89e:	01 ca                	add    %ecx,%edx
f010e8a0:	89 10                	mov    %edx,(%eax)
f010e8a2:	eb 13                	jmp    f010e8b7 <test_find_block+0x1bb>
f010e8a4:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e8aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8ad:	c1 e2 04             	shl    $0x4,%edx
f010e8b0:	01 d0                	add    %edx,%eax
f010e8b2:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e8b7:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e8bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8c0:	c1 e2 04             	shl    $0x4,%edx
f010e8c3:	01 d0                	add    %edx,%eax
f010e8c5:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e8ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8cd:	c1 e0 04             	shl    $0x4,%eax
f010e8d0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e8d3:	01 f0                	add    %esi,%eax
f010e8d5:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e8da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e8e0:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e8e5:	40                   	inc    %eax
f010e8e6:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e8eb:	ff 45 e4             	incl   -0x1c(%ebp)
f010e8ee:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e8f2:	0f 8e 97 fe ff ff    	jle    f010e78f <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e8f8:	83 ec 08             	sub    $0x8,%esp
f010e8fb:	68 00 10 00 00       	push   $0x1000
f010e900:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e905:	e8 bd 30 02 00       	call   f01319c7 <find_block>
f010e90a:	83 c4 10             	add    $0x10,%esp
f010e90d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e910:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e914:	74 17                	je     f010e92d <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e916:	83 ec 04             	sub    $0x4,%esp
f010e919:	68 84 7a 13 f0       	push   $0xf0137a84
f010e91e:	68 de 00 00 00       	push   $0xde
f010e923:	68 34 77 13 f0       	push   $0xf0137734
f010e928:	e8 ce 18 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e92d:	83 ec 08             	sub    $0x8,%esp
f010e930:	6a 00                	push   $0x0
f010e932:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e937:	e8 8b 30 02 00       	call   f01319c7 <find_block>
f010e93c:	83 c4 10             	add    $0x10,%esp
f010e93f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e942:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e946:	74 17                	je     f010e95f <test_find_block+0x263>
f010e948:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e94b:	8b 40 0c             	mov    0xc(%eax),%eax
f010e94e:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e953:	75 0a                	jne    f010e95f <test_find_block+0x263>
f010e955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e958:	8b 40 08             	mov    0x8(%eax),%eax
f010e95b:	85 c0                	test   %eax,%eax
f010e95d:	74 17                	je     f010e976 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e95f:	83 ec 04             	sub    $0x4,%esp
f010e962:	68 e8 7a 13 f0       	push   $0xf0137ae8
f010e967:	68 e3 00 00 00       	push   $0xe3
f010e96c:	68 34 77 13 f0       	push   $0xf0137734
f010e971:	e8 85 18 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e976:	83 ec 08             	sub    $0x8,%esp
f010e979:	68 00 70 00 00       	push   $0x7000
f010e97e:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e983:	e8 3f 30 02 00       	call   f01319c7 <find_block>
f010e988:	83 c4 10             	add    $0x10,%esp
f010e98b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e98e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e992:	74 1a                	je     f010e9ae <test_find_block+0x2b2>
f010e994:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e997:	8b 40 0c             	mov    0xc(%eax),%eax
f010e99a:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e99f:	75 0d                	jne    f010e9ae <test_find_block+0x2b2>
f010e9a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9a4:	8b 40 08             	mov    0x8(%eax),%eax
f010e9a7:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e9ac:	74 17                	je     f010e9c5 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e9ae:	83 ec 04             	sub    $0x4,%esp
f010e9b1:	68 e8 7a 13 f0       	push   $0xf0137ae8
f010e9b6:	68 e8 00 00 00       	push   $0xe8
f010e9bb:	68 34 77 13 f0       	push   $0xf0137734
f010e9c0:	e8 36 18 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e9c5:	83 ec 08             	sub    $0x8,%esp
f010e9c8:	68 00 a4 01 00       	push   $0x1a400
f010e9cd:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e9d2:	e8 f0 2f 02 00       	call   f01319c7 <find_block>
f010e9d7:	83 c4 10             	add    $0x10,%esp
f010e9da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e9dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e9e1:	74 1a                	je     f010e9fd <test_find_block+0x301>
f010e9e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9e6:	8b 40 0c             	mov    0xc(%eax),%eax
f010e9e9:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e9ee:	75 0d                	jne    f010e9fd <test_find_block+0x301>
f010e9f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9f3:	8b 40 08             	mov    0x8(%eax),%eax
f010e9f6:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e9fb:	74 17                	je     f010ea14 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e9fd:	83 ec 04             	sub    $0x4,%esp
f010ea00:	68 e8 7a 13 f0       	push   $0xf0137ae8
f010ea05:	68 ed 00 00 00       	push   $0xed
f010ea0a:	68 34 77 13 f0       	push   $0xf0137734
f010ea0f:	e8 e7 17 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010ea14:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ea19:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ea1c:	75 09                	jne    f010ea27 <test_find_block+0x32b>
f010ea1e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ea23:	85 c0                	test   %eax,%eax
f010ea25:	74 17                	je     f010ea3e <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010ea27:	83 ec 04             	sub    $0x4,%esp
f010ea2a:	68 1c 7b 13 f0       	push   $0xf0137b1c
f010ea2f:	68 f2 00 00 00       	push   $0xf2
f010ea34:	68 34 77 13 f0       	push   $0xf0137734
f010ea39:	e8 bd 17 ff ff       	call   f01001fb <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010ea3e:	83 ec 0c             	sub    $0xc,%esp
f010ea41:	68 80 7b 13 f0       	push   $0xf0137b80
f010ea46:	e8 37 22 ff ff       	call   f0100c82 <cprintf>
f010ea4b:	83 c4 10             	add    $0x10,%esp
}
f010ea4e:	90                   	nop
f010ea4f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ea52:	5b                   	pop    %ebx
f010ea53:	5e                   	pop    %esi
f010ea54:	5f                   	pop    %edi
f010ea55:	5d                   	pop    %ebp
f010ea56:	c3                   	ret    

f010ea57 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010ea57:	55                   	push   %ebp
f010ea58:	89 e5                	mov    %esp,%ebp
f010ea5a:	57                   	push   %edi
f010ea5b:	56                   	push   %esi
f010ea5c:	53                   	push   %ebx
f010ea5d:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010ea63:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ea6a:	83 ec 0c             	sub    $0xc,%esp
f010ea6d:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea70:	e8 75 2e 02 00       	call   f01318ea <initialize_MemBlocksList>
f010ea75:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ea78:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010ea7f:	00 00 00 
f010ea82:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010ea89:	00 00 00 
f010ea8c:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010ea93:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ea96:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ea99:	bb 60 7e 13 f0       	mov    $0xf0137e60,%ebx
f010ea9e:	ba 08 00 00 00       	mov    $0x8,%edx
f010eaa3:	89 c7                	mov    %eax,%edi
f010eaa5:	89 de                	mov    %ebx,%esi
f010eaa7:	89 d1                	mov    %edx,%ecx
f010eaa9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010eaab:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eaae:	bb 80 7e 13 f0       	mov    $0xf0137e80,%ebx
f010eab3:	ba 08 00 00 00       	mov    $0x8,%edx
f010eab8:	89 c7                	mov    %eax,%edi
f010eaba:	89 de                	mov    %ebx,%esi
f010eabc:	89 d1                	mov    %edx,%ecx
f010eabe:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010eac0:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010eac7:	00 00 00 
f010eaca:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010ead1:	00 00 00 
f010ead4:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010eadb:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010eade:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eae5:	e9 5f 01 00 00       	jmp    f010ec49 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010eaea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eaed:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010eaf1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eaf4:	c1 e2 04             	shl    $0x4,%edx
f010eaf7:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eafa:	01 da                	add    %ebx,%edx
f010eafc:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010eb02:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010eb04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb07:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb0e:	c1 e2 04             	shl    $0x4,%edx
f010eb11:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eb14:	01 f2                	add    %esi,%edx
f010eb16:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010eb1c:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eb1e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eb22:	0f 85 92 00 00 00    	jne    f010ebba <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010eb28:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010eb2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb30:	c1 e2 04             	shl    $0x4,%edx
f010eb33:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eb36:	01 fa                	add    %edi,%edx
f010eb38:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010eb3e:	89 02                	mov    %eax,(%edx)
f010eb40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb43:	c1 e0 04             	shl    $0x4,%eax
f010eb46:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eb49:	01 d8                	add    %ebx,%eax
f010eb4b:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eb50:	8b 00                	mov    (%eax),%eax
f010eb52:	85 c0                	test   %eax,%eax
f010eb54:	74 18                	je     f010eb6e <test_alloc_block_FF+0x117>
f010eb56:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010eb5b:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010eb61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eb64:	c1 e1 04             	shl    $0x4,%ecx
f010eb67:	01 ca                	add    %ecx,%edx
f010eb69:	89 50 04             	mov    %edx,0x4(%eax)
f010eb6c:	eb 13                	jmp    f010eb81 <test_alloc_block_FF+0x12a>
f010eb6e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010eb74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb77:	c1 e2 04             	shl    $0x4,%edx
f010eb7a:	01 d0                	add    %edx,%eax
f010eb7c:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010eb81:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010eb87:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb8a:	c1 e2 04             	shl    $0x4,%edx
f010eb8d:	01 d0                	add    %edx,%eax
f010eb8f:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010eb94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb97:	c1 e0 04             	shl    $0x4,%eax
f010eb9a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eb9d:	01 f0                	add    %esi,%eax
f010eb9f:	2d d0 00 00 00       	sub    $0xd0,%eax
f010eba4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ebaa:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ebaf:	40                   	inc    %eax
f010ebb0:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010ebb5:	e9 8c 00 00 00       	jmp    f010ec46 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ebba:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ebbf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebc2:	c1 e2 04             	shl    $0x4,%edx
f010ebc5:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ebc8:	01 fa                	add    %edi,%edx
f010ebca:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ebd0:	89 02                	mov    %eax,(%edx)
f010ebd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ebd5:	c1 e0 04             	shl    $0x4,%eax
f010ebd8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ebdb:	01 d8                	add    %ebx,%eax
f010ebdd:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ebe2:	8b 00                	mov    (%eax),%eax
f010ebe4:	85 c0                	test   %eax,%eax
f010ebe6:	74 17                	je     f010ebff <test_alloc_block_FF+0x1a8>
f010ebe8:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ebed:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ebf3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ebf6:	c1 e1 04             	shl    $0x4,%ecx
f010ebf9:	01 ca                	add    %ecx,%edx
f010ebfb:	89 10                	mov    %edx,(%eax)
f010ebfd:	eb 13                	jmp    f010ec12 <test_alloc_block_FF+0x1bb>
f010ebff:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec05:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec08:	c1 e2 04             	shl    $0x4,%edx
f010ec0b:	01 d0                	add    %edx,%eax
f010ec0d:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ec12:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec18:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec1b:	c1 e2 04             	shl    $0x4,%edx
f010ec1e:	01 d0                	add    %edx,%eax
f010ec20:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ec25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec28:	c1 e0 04             	shl    $0x4,%eax
f010ec2b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec2e:	01 f0                	add    %esi,%eax
f010ec30:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ec35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ec3b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ec40:	40                   	inc    %eax
f010ec41:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010ec46:	ff 45 e4             	incl   -0x1c(%ebp)
f010ec49:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ec4d:	0f 8e 97 fe ff ff    	jle    f010eaea <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010ec53:	83 ec 0c             	sub    $0xc,%esp
f010ec56:	68 00 00 30 00       	push   $0x300000
f010ec5b:	e8 4c 30 02 00       	call   f0131cac <alloc_block_FF>
f010ec60:	83 c4 10             	add    $0x10,%esp
f010ec63:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010ec66:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec6a:	74 17                	je     f010ec83 <test_alloc_block_FF+0x22c>
f010ec6c:	83 ec 04             	sub    $0x4,%esp
f010ec6f:	68 ec 7b 13 f0       	push   $0xf0137bec
f010ec74:	68 15 01 00 00       	push   $0x115
f010ec79:	68 34 77 13 f0       	push   $0xf0137734
f010ec7e:	e8 78 15 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec83:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ec88:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ec8b:	75 13                	jne    f010eca0 <test_alloc_block_FF+0x249>
f010ec8d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ec92:	83 f8 08             	cmp    $0x8,%eax
f010ec95:	75 09                	jne    f010eca0 <test_alloc_block_FF+0x249>
f010ec97:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ec9c:	85 c0                	test   %eax,%eax
f010ec9e:	74 17                	je     f010ecb7 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010eca0:	83 ec 04             	sub    $0x4,%esp
f010eca3:	68 60 7c 13 f0       	push   $0xf0137c60
f010eca8:	68 19 01 00 00       	push   $0x119
f010ecad:	68 34 77 13 f0       	push   $0xf0137734
f010ecb2:	e8 44 15 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010ecb7:	83 ec 0c             	sub    $0xc,%esp
f010ecba:	68 00 24 00 00       	push   $0x2400
f010ecbf:	e8 e8 2f 02 00       	call   f0131cac <alloc_block_FF>
f010ecc4:	83 c4 10             	add    $0x10,%esp
f010ecc7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010ecca:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ecce:	74 1a                	je     f010ecea <test_alloc_block_FF+0x293>
f010ecd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ecd3:	8b 40 0c             	mov    0xc(%eax),%eax
f010ecd6:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010ecdb:	75 0d                	jne    f010ecea <test_alloc_block_FF+0x293>
f010ecdd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ece0:	8b 40 08             	mov    0x8(%eax),%eax
f010ece3:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ece8:	74 17                	je     f010ed01 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ecea:	83 ec 04             	sub    $0x4,%esp
f010eced:	68 d8 7c 13 f0       	push   $0xf0137cd8
f010ecf2:	68 21 01 00 00       	push   $0x121
f010ecf7:	68 34 77 13 f0       	push   $0xf0137734
f010ecfc:	e8 fa 14 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed01:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ed06:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ed09:	75 13                	jne    f010ed1e <test_alloc_block_FF+0x2c7>
f010ed0b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ed10:	83 f8 07             	cmp    $0x7,%eax
f010ed13:	75 09                	jne    f010ed1e <test_alloc_block_FF+0x2c7>
f010ed15:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ed1a:	85 c0                	test   %eax,%eax
f010ed1c:	74 17                	je     f010ed35 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ed1e:	83 ec 04             	sub    $0x4,%esp
f010ed21:	68 1c 7d 13 f0       	push   $0xf0137d1c
f010ed26:	68 25 01 00 00       	push   $0x125
f010ed2b:	68 34 77 13 f0       	push   $0xf0137734
f010ed30:	e8 c6 14 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ed35:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ed3c:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010ed3f:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ed46:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ed4d:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ed54:	83 ec 0c             	sub    $0xc,%esp
f010ed57:	ff 75 d8             	pushl  -0x28(%ebp)
f010ed5a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ed60:	50                   	push   %eax
f010ed61:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ed64:	50                   	push   %eax
f010ed65:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ed68:	50                   	push   %eax
f010ed69:	68 64 7b 65 f0       	push   $0xf0657b64
f010ed6e:	e8 5b 1c 00 00       	call   f01109ce <check_list_data>
f010ed73:	83 c4 20             	add    $0x20,%esp
f010ed76:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ed79:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ed7d:	74 17                	je     f010ed96 <test_alloc_block_FF+0x33f>
f010ed7f:	83 ec 04             	sub    $0x4,%esp
f010ed82:	68 80 7d 13 f0       	push   $0xf0137d80
f010ed87:	68 2d 01 00 00       	push   $0x12d
f010ed8c:	68 34 77 13 f0       	push   $0xf0137734
f010ed91:	e8 65 14 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ed96:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ed9c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed9f:	74 17                	je     f010edb8 <test_alloc_block_FF+0x361>
f010eda1:	83 ec 04             	sub    $0x4,%esp
f010eda4:	68 cc 7d 13 f0       	push   $0xf0137dcc
f010eda9:	68 2e 01 00 00       	push   $0x12e
f010edae:	68 34 77 13 f0       	push   $0xf0137734
f010edb3:	e8 43 14 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010edb8:	83 ec 0c             	sub    $0xc,%esp
f010edbb:	68 00 00 10 00       	push   $0x100000
f010edc0:	e8 e7 2e 02 00       	call   f0131cac <alloc_block_FF>
f010edc5:	83 c4 10             	add    $0x10,%esp
f010edc8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010edcb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010edcf:	74 1a                	je     f010edeb <test_alloc_block_FF+0x394>
f010edd1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010edd4:	8b 40 0c             	mov    0xc(%eax),%eax
f010edd7:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010eddc:	75 0d                	jne    f010edeb <test_alloc_block_FF+0x394>
f010edde:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ede1:	8b 40 08             	mov    0x8(%eax),%eax
f010ede4:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ede9:	74 17                	je     f010ee02 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010edeb:	83 ec 04             	sub    $0x4,%esp
f010edee:	68 d8 7c 13 f0       	push   $0xf0137cd8
f010edf3:	68 36 01 00 00       	push   $0x136
f010edf8:	68 34 77 13 f0       	push   $0xf0137734
f010edfd:	e8 f9 13 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee02:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ee07:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ee0a:	4a                   	dec    %edx
f010ee0b:	39 d0                	cmp    %edx,%eax
f010ee0d:	75 13                	jne    f010ee22 <test_alloc_block_FF+0x3cb>
f010ee0f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ee14:	83 f8 07             	cmp    $0x7,%eax
f010ee17:	75 09                	jne    f010ee22 <test_alloc_block_FF+0x3cb>
f010ee19:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ee1e:	85 c0                	test   %eax,%eax
f010ee20:	74 17                	je     f010ee39 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ee22:	83 ec 04             	sub    $0x4,%esp
f010ee25:	68 1c 7d 13 f0       	push   $0xf0137d1c
f010ee2a:	68 3a 01 00 00       	push   $0x13a
f010ee2f:	68 34 77 13 f0       	push   $0xf0137734
f010ee34:	e8 c2 13 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ee39:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ee40:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010ee43:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ee4a:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ee51:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ee58:	83 ec 0c             	sub    $0xc,%esp
f010ee5b:	ff 75 d8             	pushl  -0x28(%ebp)
f010ee5e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ee64:	50                   	push   %eax
f010ee65:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee68:	50                   	push   %eax
f010ee69:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ee6c:	50                   	push   %eax
f010ee6d:	68 64 7b 65 f0       	push   $0xf0657b64
f010ee72:	e8 57 1b 00 00       	call   f01109ce <check_list_data>
f010ee77:	83 c4 20             	add    $0x20,%esp
f010ee7a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ee7d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ee81:	74 17                	je     f010ee9a <test_alloc_block_FF+0x443>
f010ee83:	83 ec 04             	sub    $0x4,%esp
f010ee86:	68 80 7d 13 f0       	push   $0xf0137d80
f010ee8b:	68 42 01 00 00       	push   $0x142
f010ee90:	68 34 77 13 f0       	push   $0xf0137734
f010ee95:	e8 61 13 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ee9a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eea0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eea3:	74 17                	je     f010eebc <test_alloc_block_FF+0x465>
f010eea5:	83 ec 04             	sub    $0x4,%esp
f010eea8:	68 cc 7d 13 f0       	push   $0xf0137dcc
f010eead:	68 43 01 00 00       	push   $0x143
f010eeb2:	68 34 77 13 f0       	push   $0xf0137734
f010eeb7:	e8 3f 13 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010eebc:	83 ec 0c             	sub    $0xc,%esp
f010eebf:	68 18 7e 13 f0       	push   $0xf0137e18
f010eec4:	e8 b9 1d ff ff       	call   f0100c82 <cprintf>
f010eec9:	83 c4 10             	add    $0x10,%esp
}
f010eecc:	90                   	nop
f010eecd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eed0:	5b                   	pop    %ebx
f010eed1:	5e                   	pop    %esi
f010eed2:	5f                   	pop    %edi
f010eed3:	5d                   	pop    %ebp
f010eed4:	c3                   	ret    

f010eed5 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010eed5:	55                   	push   %ebp
f010eed6:	89 e5                	mov    %esp,%ebp
f010eed8:	57                   	push   %edi
f010eed9:	56                   	push   %esi
f010eeda:	53                   	push   %ebx
f010eedb:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010eee1:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eee8:	83 ec 0c             	sub    $0xc,%esp
f010eeeb:	ff 75 e0             	pushl  -0x20(%ebp)
f010eeee:	e8 f7 29 02 00       	call   f01318ea <initialize_MemBlocksList>
f010eef3:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eef6:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010eefd:	00 00 00 
f010ef00:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010ef07:	00 00 00 
f010ef0a:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010ef11:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010ef14:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ef17:	bb 94 80 13 f0       	mov    $0xf0138094,%ebx
f010ef1c:	ba 07 00 00 00       	mov    $0x7,%edx
f010ef21:	89 c7                	mov    %eax,%edi
f010ef23:	89 de                	mov    %ebx,%esi
f010ef25:	89 d1                	mov    %edx,%ecx
f010ef27:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010ef29:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ef2c:	bb b0 80 13 f0       	mov    $0xf01380b0,%ebx
f010ef31:	ba 07 00 00 00       	mov    $0x7,%edx
f010ef36:	89 c7                	mov    %eax,%edi
f010ef38:	89 de                	mov    %ebx,%esi
f010ef3a:	89 d1                	mov    %edx,%ecx
f010ef3c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ef3e:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010ef45:	00 00 00 
f010ef48:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010ef4f:	00 00 00 
f010ef52:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010ef59:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010ef5c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ef63:	e9 5f 01 00 00       	jmp    f010f0c7 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ef68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef6b:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010ef6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef72:	c1 e2 04             	shl    $0x4,%edx
f010ef75:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef78:	01 da                	add    %ebx,%edx
f010ef7a:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010ef80:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ef82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef85:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010ef89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef8c:	c1 e2 04             	shl    $0x4,%edx
f010ef8f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef92:	01 f2                	add    %esi,%edx
f010ef94:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010ef9a:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ef9c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010efa0:	0f 85 92 00 00 00    	jne    f010f038 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010efa6:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010efab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efae:	c1 e2 04             	shl    $0x4,%edx
f010efb1:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010efb4:	01 fa                	add    %edi,%edx
f010efb6:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010efbc:	89 02                	mov    %eax,(%edx)
f010efbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efc1:	c1 e0 04             	shl    $0x4,%eax
f010efc4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010efc7:	01 d8                	add    %ebx,%eax
f010efc9:	2d bc 00 00 00       	sub    $0xbc,%eax
f010efce:	8b 00                	mov    (%eax),%eax
f010efd0:	85 c0                	test   %eax,%eax
f010efd2:	74 18                	je     f010efec <test_alloc_block_BF+0x117>
f010efd4:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010efd9:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010efdf:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010efe2:	c1 e1 04             	shl    $0x4,%ecx
f010efe5:	01 ca                	add    %ecx,%edx
f010efe7:	89 50 04             	mov    %edx,0x4(%eax)
f010efea:	eb 13                	jmp    f010efff <test_alloc_block_BF+0x12a>
f010efec:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010eff2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eff5:	c1 e2 04             	shl    $0x4,%edx
f010eff8:	01 d0                	add    %edx,%eax
f010effa:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010efff:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f005:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f008:	c1 e2 04             	shl    $0x4,%edx
f010f00b:	01 d0                	add    %edx,%eax
f010f00d:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f015:	c1 e0 04             	shl    $0x4,%eax
f010f018:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f01b:	01 f0                	add    %esi,%eax
f010f01d:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f022:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f028:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f02d:	40                   	inc    %eax
f010f02e:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010f033:	e9 8c 00 00 00       	jmp    f010f0c4 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f038:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f03d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f040:	c1 e2 04             	shl    $0x4,%edx
f010f043:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f046:	01 fa                	add    %edi,%edx
f010f048:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f04e:	89 02                	mov    %eax,(%edx)
f010f050:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f053:	c1 e0 04             	shl    $0x4,%eax
f010f056:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f059:	01 d8                	add    %ebx,%eax
f010f05b:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f060:	8b 00                	mov    (%eax),%eax
f010f062:	85 c0                	test   %eax,%eax
f010f064:	74 17                	je     f010f07d <test_alloc_block_BF+0x1a8>
f010f066:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f06b:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f071:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f074:	c1 e1 04             	shl    $0x4,%ecx
f010f077:	01 ca                	add    %ecx,%edx
f010f079:	89 10                	mov    %edx,(%eax)
f010f07b:	eb 13                	jmp    f010f090 <test_alloc_block_BF+0x1bb>
f010f07d:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f083:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f086:	c1 e2 04             	shl    $0x4,%edx
f010f089:	01 d0                	add    %edx,%eax
f010f08b:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f090:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f096:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f099:	c1 e2 04             	shl    $0x4,%edx
f010f09c:	01 d0                	add    %edx,%eax
f010f09e:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f0a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0a6:	c1 e0 04             	shl    $0x4,%eax
f010f0a9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0ac:	01 f0                	add    %esi,%eax
f010f0ae:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f0b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f0b9:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f0be:	40                   	inc    %eax
f010f0bf:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f0c4:	ff 45 e4             	incl   -0x1c(%ebp)
f010f0c7:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f0cb:	0f 8e 97 fe ff ff    	jle    f010ef68 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f0d1:	83 ec 0c             	sub    $0xc,%esp
f010f0d4:	68 00 00 40 00       	push   $0x400000
f010f0d9:	e8 9b 2d 02 00       	call   f0131e79 <alloc_block_BF>
f010f0de:	83 c4 10             	add    $0x10,%esp
f010f0e1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f0e4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f0e8:	74 17                	je     f010f101 <test_alloc_block_BF+0x22c>
f010f0ea:	83 ec 04             	sub    $0x4,%esp
f010f0ed:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010f0f2:	68 66 01 00 00       	push   $0x166
f010f0f7:	68 34 77 13 f0       	push   $0xf0137734
f010f0fc:	e8 fa 10 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f101:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f106:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f109:	75 13                	jne    f010f11e <test_alloc_block_BF+0x249>
f010f10b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f110:	83 f8 07             	cmp    $0x7,%eax
f010f113:	75 09                	jne    f010f11e <test_alloc_block_BF+0x249>
f010f115:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f11a:	85 c0                	test   %eax,%eax
f010f11c:	74 17                	je     f010f135 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f11e:	83 ec 04             	sub    $0x4,%esp
f010f121:	68 60 7c 13 f0       	push   $0xf0137c60
f010f126:	68 6a 01 00 00       	push   $0x16a
f010f12b:	68 34 77 13 f0       	push   $0xf0137734
f010f130:	e8 c6 10 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f135:	83 ec 0c             	sub    $0xc,%esp
f010f138:	68 00 00 10 00       	push   $0x100000
f010f13d:	e8 37 2d 02 00       	call   f0131e79 <alloc_block_BF>
f010f142:	83 c4 10             	add    $0x10,%esp
f010f145:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f148:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f14c:	74 1a                	je     f010f168 <test_alloc_block_BF+0x293>
f010f14e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f151:	8b 40 0c             	mov    0xc(%eax),%eax
f010f154:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f159:	75 0d                	jne    f010f168 <test_alloc_block_BF+0x293>
f010f15b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f15e:	8b 40 08             	mov    0x8(%eax),%eax
f010f161:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f166:	74 17                	je     f010f17f <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f168:	83 ec 04             	sub    $0x4,%esp
f010f16b:	68 14 7f 13 f0       	push   $0xf0137f14
f010f170:	68 72 01 00 00       	push   $0x172
f010f175:	68 34 77 13 f0       	push   $0xf0137734
f010f17a:	e8 7c 10 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f17f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f184:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f187:	75 13                	jne    f010f19c <test_alloc_block_BF+0x2c7>
f010f189:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f18e:	83 f8 06             	cmp    $0x6,%eax
f010f191:	75 09                	jne    f010f19c <test_alloc_block_BF+0x2c7>
f010f193:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f198:	85 c0                	test   %eax,%eax
f010f19a:	74 17                	je     f010f1b3 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f19c:	83 ec 04             	sub    $0x4,%esp
f010f19f:	68 58 7f 13 f0       	push   $0xf0137f58
f010f1a4:	68 76 01 00 00       	push   $0x176
f010f1a9:	68 34 77 13 f0       	push   $0xf0137734
f010f1ae:	e8 48 10 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f1b3:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f1ba:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f1bd:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f1c4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f1cb:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1d2:	83 ec 0c             	sub    $0xc,%esp
f010f1d5:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1d8:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f1de:	50                   	push   %eax
f010f1df:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f1e2:	50                   	push   %eax
f010f1e3:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f1e6:	50                   	push   %eax
f010f1e7:	68 64 7b 65 f0       	push   $0xf0657b64
f010f1ec:	e8 dd 17 00 00       	call   f01109ce <check_list_data>
f010f1f1:	83 c4 20             	add    $0x20,%esp
f010f1f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f1f7:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f1fb:	74 17                	je     f010f214 <test_alloc_block_BF+0x33f>
f010f1fd:	83 ec 04             	sub    $0x4,%esp
f010f200:	68 bc 7f 13 f0       	push   $0xf0137fbc
f010f205:	68 7e 01 00 00       	push   $0x17e
f010f20a:	68 34 77 13 f0       	push   $0xf0137734
f010f20f:	e8 e7 0f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f214:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f21a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f21d:	74 17                	je     f010f236 <test_alloc_block_BF+0x361>
f010f21f:	83 ec 04             	sub    $0x4,%esp
f010f222:	68 08 80 13 f0       	push   $0xf0138008
f010f227:	68 7f 01 00 00       	push   $0x17f
f010f22c:	68 34 77 13 f0       	push   $0xf0137734
f010f231:	e8 c5 0f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f236:	83 ec 0c             	sub    $0xc,%esp
f010f239:	68 00 00 10 00       	push   $0x100000
f010f23e:	e8 36 2c 02 00       	call   f0131e79 <alloc_block_BF>
f010f243:	83 c4 10             	add    $0x10,%esp
f010f246:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f249:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f24d:	74 1a                	je     f010f269 <test_alloc_block_BF+0x394>
f010f24f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f252:	8b 40 0c             	mov    0xc(%eax),%eax
f010f255:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f25a:	75 0d                	jne    f010f269 <test_alloc_block_BF+0x394>
f010f25c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f25f:	8b 40 08             	mov    0x8(%eax),%eax
f010f262:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f267:	74 17                	je     f010f280 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f269:	83 ec 04             	sub    $0x4,%esp
f010f26c:	68 14 7f 13 f0       	push   $0xf0137f14
f010f271:	68 87 01 00 00       	push   $0x187
f010f276:	68 34 77 13 f0       	push   $0xf0137734
f010f27b:	e8 7b 0f ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f280:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f285:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f288:	4a                   	dec    %edx
f010f289:	39 d0                	cmp    %edx,%eax
f010f28b:	75 13                	jne    f010f2a0 <test_alloc_block_BF+0x3cb>
f010f28d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f292:	83 f8 06             	cmp    $0x6,%eax
f010f295:	75 09                	jne    f010f2a0 <test_alloc_block_BF+0x3cb>
f010f297:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f29c:	85 c0                	test   %eax,%eax
f010f29e:	74 17                	je     f010f2b7 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2a0:	83 ec 04             	sub    $0x4,%esp
f010f2a3:	68 58 7f 13 f0       	push   $0xf0137f58
f010f2a8:	68 8b 01 00 00       	push   $0x18b
f010f2ad:	68 34 77 13 f0       	push   $0xf0137734
f010f2b2:	e8 44 0f ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2b7:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f2be:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f2c1:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f2c8:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f2cf:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f2d6:	83 ec 0c             	sub    $0xc,%esp
f010f2d9:	ff 75 d8             	pushl  -0x28(%ebp)
f010f2dc:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f2e2:	50                   	push   %eax
f010f2e3:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f2e6:	50                   	push   %eax
f010f2e7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f2ea:	50                   	push   %eax
f010f2eb:	68 64 7b 65 f0       	push   $0xf0657b64
f010f2f0:	e8 d9 16 00 00       	call   f01109ce <check_list_data>
f010f2f5:	83 c4 20             	add    $0x20,%esp
f010f2f8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f2fb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f2ff:	74 17                	je     f010f318 <test_alloc_block_BF+0x443>
f010f301:	83 ec 04             	sub    $0x4,%esp
f010f304:	68 bc 7f 13 f0       	push   $0xf0137fbc
f010f309:	68 93 01 00 00       	push   $0x193
f010f30e:	68 34 77 13 f0       	push   $0xf0137734
f010f313:	e8 e3 0e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f318:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f31e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f321:	74 17                	je     f010f33a <test_alloc_block_BF+0x465>
f010f323:	83 ec 04             	sub    $0x4,%esp
f010f326:	68 08 80 13 f0       	push   $0xf0138008
f010f32b:	68 94 01 00 00       	push   $0x194
f010f330:	68 34 77 13 f0       	push   $0xf0137734
f010f335:	e8 c1 0e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f33a:	83 ec 0c             	sub    $0xc,%esp
f010f33d:	68 00 0c 00 00       	push   $0xc00
f010f342:	e8 32 2b 02 00       	call   f0131e79 <alloc_block_BF>
f010f347:	83 c4 10             	add    $0x10,%esp
f010f34a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f34d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f351:	74 1a                	je     f010f36d <test_alloc_block_BF+0x498>
f010f353:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f356:	8b 40 0c             	mov    0xc(%eax),%eax
f010f359:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f35e:	75 0d                	jne    f010f36d <test_alloc_block_BF+0x498>
f010f360:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f363:	8b 40 08             	mov    0x8(%eax),%eax
f010f366:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f36b:	74 17                	je     f010f384 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f36d:	83 ec 04             	sub    $0x4,%esp
f010f370:	68 14 7f 13 f0       	push   $0xf0137f14
f010f375:	68 9c 01 00 00       	push   $0x19c
f010f37a:	68 34 77 13 f0       	push   $0xf0137734
f010f37f:	e8 77 0e ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f384:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f389:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f38c:	83 ea 02             	sub    $0x2,%edx
f010f38f:	39 d0                	cmp    %edx,%eax
f010f391:	75 13                	jne    f010f3a6 <test_alloc_block_BF+0x4d1>
f010f393:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f398:	83 f8 06             	cmp    $0x6,%eax
f010f39b:	75 09                	jne    f010f3a6 <test_alloc_block_BF+0x4d1>
f010f39d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f3a2:	85 c0                	test   %eax,%eax
f010f3a4:	74 17                	je     f010f3bd <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3a6:	83 ec 04             	sub    $0x4,%esp
f010f3a9:	68 58 7f 13 f0       	push   $0xf0137f58
f010f3ae:	68 a0 01 00 00       	push   $0x1a0
f010f3b3:	68 34 77 13 f0       	push   $0xf0137734
f010f3b8:	e8 3e 0e ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f3bd:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f3c4:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f3c7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f3ce:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f3d5:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f3dc:	83 ec 0c             	sub    $0xc,%esp
f010f3df:	ff 75 d8             	pushl  -0x28(%ebp)
f010f3e2:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f3e8:	50                   	push   %eax
f010f3e9:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f3ec:	50                   	push   %eax
f010f3ed:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f3f0:	50                   	push   %eax
f010f3f1:	68 64 7b 65 f0       	push   $0xf0657b64
f010f3f6:	e8 d3 15 00 00       	call   f01109ce <check_list_data>
f010f3fb:	83 c4 20             	add    $0x20,%esp
f010f3fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f401:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f405:	74 17                	je     f010f41e <test_alloc_block_BF+0x549>
f010f407:	83 ec 04             	sub    $0x4,%esp
f010f40a:	68 bc 7f 13 f0       	push   $0xf0137fbc
f010f40f:	68 a8 01 00 00       	push   $0x1a8
f010f414:	68 34 77 13 f0       	push   $0xf0137734
f010f419:	e8 dd 0d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f41e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f424:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f427:	74 17                	je     f010f440 <test_alloc_block_BF+0x56b>
f010f429:	83 ec 04             	sub    $0x4,%esp
f010f42c:	68 08 80 13 f0       	push   $0xf0138008
f010f431:	68 a9 01 00 00       	push   $0x1a9
f010f436:	68 34 77 13 f0       	push   $0xf0137734
f010f43b:	e8 bb 0d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f440:	83 ec 0c             	sub    $0xc,%esp
f010f443:	68 00 08 00 00       	push   $0x800
f010f448:	e8 2c 2a 02 00       	call   f0131e79 <alloc_block_BF>
f010f44d:	83 c4 10             	add    $0x10,%esp
f010f450:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f453:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f457:	74 17                	je     f010f470 <test_alloc_block_BF+0x59b>
f010f459:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f45c:	8b 40 0c             	mov    0xc(%eax),%eax
f010f45f:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f464:	75 0a                	jne    f010f470 <test_alloc_block_BF+0x59b>
f010f466:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f469:	8b 40 08             	mov    0x8(%eax),%eax
f010f46c:	85 c0                	test   %eax,%eax
f010f46e:	74 17                	je     f010f487 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f470:	83 ec 04             	sub    $0x4,%esp
f010f473:	68 14 7f 13 f0       	push   $0xf0137f14
f010f478:	68 b1 01 00 00       	push   $0x1b1
f010f47d:	68 34 77 13 f0       	push   $0xf0137734
f010f482:	e8 74 0d ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f487:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f48c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f48f:	83 ea 02             	sub    $0x2,%edx
f010f492:	39 d0                	cmp    %edx,%eax
f010f494:	75 13                	jne    f010f4a9 <test_alloc_block_BF+0x5d4>
f010f496:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f49b:	83 f8 05             	cmp    $0x5,%eax
f010f49e:	75 09                	jne    f010f4a9 <test_alloc_block_BF+0x5d4>
f010f4a0:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f4a5:	85 c0                	test   %eax,%eax
f010f4a7:	74 17                	je     f010f4c0 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f4a9:	83 ec 04             	sub    $0x4,%esp
f010f4ac:	68 58 7f 13 f0       	push   $0xf0137f58
f010f4b1:	68 b5 01 00 00       	push   $0x1b5
f010f4b6:	68 34 77 13 f0       	push   $0xf0137734
f010f4bb:	e8 3b 0d ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f4c0:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f4c7:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f4ca:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f4d1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f4d8:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f4df:	83 ec 0c             	sub    $0xc,%esp
f010f4e2:	ff 75 d8             	pushl  -0x28(%ebp)
f010f4e5:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f4eb:	50                   	push   %eax
f010f4ec:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f4ef:	50                   	push   %eax
f010f4f0:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f4f3:	50                   	push   %eax
f010f4f4:	68 64 7b 65 f0       	push   $0xf0657b64
f010f4f9:	e8 d0 14 00 00       	call   f01109ce <check_list_data>
f010f4fe:	83 c4 20             	add    $0x20,%esp
f010f501:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f504:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f508:	74 17                	je     f010f521 <test_alloc_block_BF+0x64c>
f010f50a:	83 ec 04             	sub    $0x4,%esp
f010f50d:	68 bc 7f 13 f0       	push   $0xf0137fbc
f010f512:	68 bd 01 00 00       	push   $0x1bd
f010f517:	68 34 77 13 f0       	push   $0xf0137734
f010f51c:	e8 da 0c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f521:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f527:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f52a:	74 17                	je     f010f543 <test_alloc_block_BF+0x66e>
f010f52c:	83 ec 04             	sub    $0x4,%esp
f010f52f:	68 08 80 13 f0       	push   $0xf0138008
f010f534:	68 be 01 00 00       	push   $0x1be
f010f539:	68 34 77 13 f0       	push   $0xf0137734
f010f53e:	e8 b8 0c ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f543:	83 ec 0c             	sub    $0xc,%esp
f010f546:	68 54 80 13 f0       	push   $0xf0138054
f010f54b:	e8 32 17 ff ff       	call   f0100c82 <cprintf>
f010f550:	83 c4 10             	add    $0x10,%esp
}
f010f553:	90                   	nop
f010f554:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f557:	5b                   	pop    %ebx
f010f558:	5e                   	pop    %esi
f010f559:	5f                   	pop    %edi
f010f55a:	5d                   	pop    %ebp
f010f55b:	c3                   	ret    

f010f55c <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f55c:	55                   	push   %ebp
f010f55d:	89 e5                	mov    %esp,%ebp
f010f55f:	57                   	push   %edi
f010f560:	56                   	push   %esi
f010f561:	53                   	push   %ebx
f010f562:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f568:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f56f:	83 ec 0c             	sub    $0xc,%esp
f010f572:	ff 75 e0             	pushl  -0x20(%ebp)
f010f575:	e8 70 23 02 00       	call   f01318ea <initialize_MemBlocksList>
f010f57a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f57d:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010f584:	00 00 00 
f010f587:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010f58e:	00 00 00 
f010f591:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010f598:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f59b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f59e:	bb 60 7e 13 f0       	mov    $0xf0137e60,%ebx
f010f5a3:	ba 08 00 00 00       	mov    $0x8,%edx
f010f5a8:	89 c7                	mov    %eax,%edi
f010f5aa:	89 de                	mov    %ebx,%esi
f010f5ac:	89 d1                	mov    %edx,%ecx
f010f5ae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f5b0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f5b3:	bb c0 82 13 f0       	mov    $0xf01382c0,%ebx
f010f5b8:	ba 08 00 00 00       	mov    $0x8,%edx
f010f5bd:	89 c7                	mov    %eax,%edi
f010f5bf:	89 de                	mov    %ebx,%esi
f010f5c1:	89 d1                	mov    %edx,%ecx
f010f5c3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f5c5:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010f5cc:	00 00 00 
f010f5cf:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010f5d6:	00 00 00 
f010f5d9:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010f5e0:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f5e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f5ea:	e9 5f 01 00 00       	jmp    f010f74e <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f5ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5f2:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f5f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f5f9:	c1 e2 04             	shl    $0x4,%edx
f010f5fc:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f5ff:	01 da                	add    %ebx,%edx
f010f601:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f607:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f609:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f60c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f610:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f613:	c1 e2 04             	shl    $0x4,%edx
f010f616:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f619:	01 f2                	add    %esi,%edx
f010f61b:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f621:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f623:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f627:	0f 85 92 00 00 00    	jne    f010f6bf <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f62d:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f632:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f635:	c1 e2 04             	shl    $0x4,%edx
f010f638:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f63b:	01 fa                	add    %edi,%edx
f010f63d:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f643:	89 02                	mov    %eax,(%edx)
f010f645:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f648:	c1 e0 04             	shl    $0x4,%eax
f010f64b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f64e:	01 d8                	add    %ebx,%eax
f010f650:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f655:	8b 00                	mov    (%eax),%eax
f010f657:	85 c0                	test   %eax,%eax
f010f659:	74 18                	je     f010f673 <test_alloc_block_NF+0x117>
f010f65b:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f660:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f666:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f669:	c1 e1 04             	shl    $0x4,%ecx
f010f66c:	01 ca                	add    %ecx,%edx
f010f66e:	89 50 04             	mov    %edx,0x4(%eax)
f010f671:	eb 13                	jmp    f010f686 <test_alloc_block_NF+0x12a>
f010f673:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f679:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f67c:	c1 e2 04             	shl    $0x4,%edx
f010f67f:	01 d0                	add    %edx,%eax
f010f681:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f686:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f68c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f68f:	c1 e2 04             	shl    $0x4,%edx
f010f692:	01 d0                	add    %edx,%eax
f010f694:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f699:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f69c:	c1 e0 04             	shl    $0x4,%eax
f010f69f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f6a2:	01 f0                	add    %esi,%eax
f010f6a4:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f6a9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f6af:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f6b4:	40                   	inc    %eax
f010f6b5:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010f6ba:	e9 8c 00 00 00       	jmp    f010f74b <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f6bf:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f6c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f6c7:	c1 e2 04             	shl    $0x4,%edx
f010f6ca:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f6cd:	01 fa                	add    %edi,%edx
f010f6cf:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f6d5:	89 02                	mov    %eax,(%edx)
f010f6d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f6da:	c1 e0 04             	shl    $0x4,%eax
f010f6dd:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f6e0:	01 d8                	add    %ebx,%eax
f010f6e2:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f6e7:	8b 00                	mov    (%eax),%eax
f010f6e9:	85 c0                	test   %eax,%eax
f010f6eb:	74 17                	je     f010f704 <test_alloc_block_NF+0x1a8>
f010f6ed:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f6f2:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f6f8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f6fb:	c1 e1 04             	shl    $0x4,%ecx
f010f6fe:	01 ca                	add    %ecx,%edx
f010f700:	89 10                	mov    %edx,(%eax)
f010f702:	eb 13                	jmp    f010f717 <test_alloc_block_NF+0x1bb>
f010f704:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f70a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f70d:	c1 e2 04             	shl    $0x4,%edx
f010f710:	01 d0                	add    %edx,%eax
f010f712:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f717:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f71d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f720:	c1 e2 04             	shl    $0x4,%edx
f010f723:	01 d0                	add    %edx,%eax
f010f725:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f72a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f72d:	c1 e0 04             	shl    $0x4,%eax
f010f730:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f733:	01 f0                	add    %esi,%eax
f010f735:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f73a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f740:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f745:	40                   	inc    %eax
f010f746:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f74b:	ff 45 e4             	incl   -0x1c(%ebp)
f010f74e:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f752:	0f 8e 97 fe ff ff    	jle    f010f5ef <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f758:	83 ec 0c             	sub    $0xc,%esp
f010f75b:	68 00 00 a0 00       	push   $0xa00000
f010f760:	e8 25 29 02 00       	call   f013208a <alloc_block_NF>
f010f765:	83 c4 10             	add    $0x10,%esp
f010f768:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f76b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f76f:	74 17                	je     f010f788 <test_alloc_block_NF+0x22c>
f010f771:	83 ec 04             	sub    $0x4,%esp
f010f774:	68 cc 80 13 f0       	push   $0xf01380cc
f010f779:	68 e1 01 00 00       	push   $0x1e1
f010f77e:	68 34 77 13 f0       	push   $0xf0137734
f010f783:	e8 73 0a ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f788:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f78d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f790:	75 13                	jne    f010f7a5 <test_alloc_block_NF+0x249>
f010f792:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f797:	83 f8 08             	cmp    $0x8,%eax
f010f79a:	75 09                	jne    f010f7a5 <test_alloc_block_NF+0x249>
f010f79c:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f7a1:	85 c0                	test   %eax,%eax
f010f7a3:	74 17                	je     f010f7bc <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f7a5:	83 ec 04             	sub    $0x4,%esp
f010f7a8:	68 60 7c 13 f0       	push   $0xf0137c60
f010f7ad:	68 e5 01 00 00       	push   $0x1e5
f010f7b2:	68 34 77 13 f0       	push   $0xf0137734
f010f7b7:	e8 3f 0a ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f7bc:	83 ec 0c             	sub    $0xc,%esp
f010f7bf:	68 00 28 00 00       	push   $0x2800
f010f7c4:	e8 c1 28 02 00       	call   f013208a <alloc_block_NF>
f010f7c9:	83 c4 10             	add    $0x10,%esp
f010f7cc:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f7cf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7d3:	74 1a                	je     f010f7ef <test_alloc_block_NF+0x293>
f010f7d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7d8:	8b 40 0c             	mov    0xc(%eax),%eax
f010f7db:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f7e0:	75 0d                	jne    f010f7ef <test_alloc_block_NF+0x293>
f010f7e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7e5:	8b 40 08             	mov    0x8(%eax),%eax
f010f7e8:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f7ed:	74 17                	je     f010f806 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f7ef:	83 ec 04             	sub    $0x4,%esp
f010f7f2:	68 40 81 13 f0       	push   $0xf0138140
f010f7f7:	68 ed 01 00 00       	push   $0x1ed
f010f7fc:	68 34 77 13 f0       	push   $0xf0137734
f010f801:	e8 f5 09 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f806:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f80b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f80e:	75 13                	jne    f010f823 <test_alloc_block_NF+0x2c7>
f010f810:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f815:	83 f8 07             	cmp    $0x7,%eax
f010f818:	75 09                	jne    f010f823 <test_alloc_block_NF+0x2c7>
f010f81a:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f81f:	85 c0                	test   %eax,%eax
f010f821:	74 17                	je     f010f83a <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f823:	83 ec 04             	sub    $0x4,%esp
f010f826:	68 84 81 13 f0       	push   $0xf0138184
f010f82b:	68 f1 01 00 00       	push   $0x1f1
f010f830:	68 34 77 13 f0       	push   $0xf0137734
f010f835:	e8 c1 09 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f83a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f841:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f844:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f84b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f852:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f859:	83 ec 0c             	sub    $0xc,%esp
f010f85c:	ff 75 d8             	pushl  -0x28(%ebp)
f010f85f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f865:	50                   	push   %eax
f010f866:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f869:	50                   	push   %eax
f010f86a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f86d:	50                   	push   %eax
f010f86e:	68 64 7b 65 f0       	push   $0xf0657b64
f010f873:	e8 56 11 00 00       	call   f01109ce <check_list_data>
f010f878:	83 c4 20             	add    $0x20,%esp
f010f87b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f87e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f882:	74 17                	je     f010f89b <test_alloc_block_NF+0x33f>
f010f884:	83 ec 04             	sub    $0x4,%esp
f010f887:	68 e8 81 13 f0       	push   $0xf01381e8
f010f88c:	68 f9 01 00 00       	push   $0x1f9
f010f891:	68 34 77 13 f0       	push   $0xf0137734
f010f896:	e8 60 09 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f89b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f8a1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f8a4:	74 17                	je     f010f8bd <test_alloc_block_NF+0x361>
f010f8a6:	83 ec 04             	sub    $0x4,%esp
f010f8a9:	68 34 82 13 f0       	push   $0xf0138234
f010f8ae:	68 fa 01 00 00       	push   $0x1fa
f010f8b3:	68 34 77 13 f0       	push   $0xf0137734
f010f8b8:	e8 3e 09 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f8bd:	83 ec 0c             	sub    $0xc,%esp
f010f8c0:	68 00 00 20 00       	push   $0x200000
f010f8c5:	e8 c0 27 02 00       	call   f013208a <alloc_block_NF>
f010f8ca:	83 c4 10             	add    $0x10,%esp
f010f8cd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f8d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8d4:	74 1a                	je     f010f8f0 <test_alloc_block_NF+0x394>
f010f8d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8d9:	8b 40 0c             	mov    0xc(%eax),%eax
f010f8dc:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f8e1:	75 0d                	jne    f010f8f0 <test_alloc_block_NF+0x394>
f010f8e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8e6:	8b 40 08             	mov    0x8(%eax),%eax
f010f8e9:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f8ee:	74 17                	je     f010f907 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f8f0:	83 ec 04             	sub    $0x4,%esp
f010f8f3:	68 40 81 13 f0       	push   $0xf0138140
f010f8f8:	68 03 02 00 00       	push   $0x203
f010f8fd:	68 34 77 13 f0       	push   $0xf0137734
f010f902:	e8 f4 08 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f907:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f90c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f90f:	75 13                	jne    f010f924 <test_alloc_block_NF+0x3c8>
f010f911:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f916:	83 f8 06             	cmp    $0x6,%eax
f010f919:	75 09                	jne    f010f924 <test_alloc_block_NF+0x3c8>
f010f91b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f920:	85 c0                	test   %eax,%eax
f010f922:	74 17                	je     f010f93b <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f924:	83 ec 04             	sub    $0x4,%esp
f010f927:	68 84 81 13 f0       	push   $0xf0138184
f010f92c:	68 07 02 00 00       	push   $0x207
f010f931:	68 34 77 13 f0       	push   $0xf0137734
f010f936:	e8 c0 08 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f93b:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f942:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f945:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f94c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f953:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f95a:	83 ec 0c             	sub    $0xc,%esp
f010f95d:	ff 75 d8             	pushl  -0x28(%ebp)
f010f960:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f966:	50                   	push   %eax
f010f967:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f96a:	50                   	push   %eax
f010f96b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f96e:	50                   	push   %eax
f010f96f:	68 64 7b 65 f0       	push   $0xf0657b64
f010f974:	e8 55 10 00 00       	call   f01109ce <check_list_data>
f010f979:	83 c4 20             	add    $0x20,%esp
f010f97c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f97f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f983:	74 17                	je     f010f99c <test_alloc_block_NF+0x440>
f010f985:	83 ec 04             	sub    $0x4,%esp
f010f988:	68 e8 81 13 f0       	push   $0xf01381e8
f010f98d:	68 0f 02 00 00       	push   $0x20f
f010f992:	68 34 77 13 f0       	push   $0xf0137734
f010f997:	e8 5f 08 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f99c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f9a2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f9a5:	74 17                	je     f010f9be <test_alloc_block_NF+0x462>
f010f9a7:	83 ec 04             	sub    $0x4,%esp
f010f9aa:	68 34 82 13 f0       	push   $0xf0138234
f010f9af:	68 10 02 00 00       	push   $0x210
f010f9b4:	68 34 77 13 f0       	push   $0xf0137734
f010f9b9:	e8 3d 08 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f9be:	83 ec 0c             	sub    $0xc,%esp
f010f9c1:	68 00 00 08 00       	push   $0x80000
f010f9c6:	e8 bf 26 02 00       	call   f013208a <alloc_block_NF>
f010f9cb:	83 c4 10             	add    $0x10,%esp
f010f9ce:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f9d1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f9d5:	74 1a                	je     f010f9f1 <test_alloc_block_NF+0x495>
f010f9d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9da:	8b 40 0c             	mov    0xc(%eax),%eax
f010f9dd:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f9e2:	75 0d                	jne    f010f9f1 <test_alloc_block_NF+0x495>
f010f9e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9e7:	8b 40 08             	mov    0x8(%eax),%eax
f010f9ea:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f9ef:	74 17                	je     f010fa08 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f9f1:	83 ec 04             	sub    $0x4,%esp
f010f9f4:	68 40 81 13 f0       	push   $0xf0138140
f010f9f9:	68 19 02 00 00       	push   $0x219
f010f9fe:	68 34 77 13 f0       	push   $0xf0137734
f010fa03:	e8 f3 07 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa08:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fa0d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa10:	4a                   	dec    %edx
f010fa11:	39 d0                	cmp    %edx,%eax
f010fa13:	75 13                	jne    f010fa28 <test_alloc_block_NF+0x4cc>
f010fa15:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fa1a:	83 f8 06             	cmp    $0x6,%eax
f010fa1d:	75 09                	jne    f010fa28 <test_alloc_block_NF+0x4cc>
f010fa1f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fa24:	85 c0                	test   %eax,%eax
f010fa26:	74 17                	je     f010fa3f <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa28:	83 ec 04             	sub    $0x4,%esp
f010fa2b:	68 84 81 13 f0       	push   $0xf0138184
f010fa30:	68 1d 02 00 00       	push   $0x21d
f010fa35:	68 34 77 13 f0       	push   $0xf0137734
f010fa3a:	e8 bc 07 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fa3f:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fa46:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fa49:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010fa50:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010fa57:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fa5e:	83 ec 0c             	sub    $0xc,%esp
f010fa61:	ff 75 d8             	pushl  -0x28(%ebp)
f010fa64:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fa6a:	50                   	push   %eax
f010fa6b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa6e:	50                   	push   %eax
f010fa6f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fa72:	50                   	push   %eax
f010fa73:	68 64 7b 65 f0       	push   $0xf0657b64
f010fa78:	e8 51 0f 00 00       	call   f01109ce <check_list_data>
f010fa7d:	83 c4 20             	add    $0x20,%esp
f010fa80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa83:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa87:	74 17                	je     f010faa0 <test_alloc_block_NF+0x544>
f010fa89:	83 ec 04             	sub    $0x4,%esp
f010fa8c:	68 e8 81 13 f0       	push   $0xf01381e8
f010fa91:	68 25 02 00 00       	push   $0x225
f010fa96:	68 34 77 13 f0       	push   $0xf0137734
f010fa9b:	e8 5b 07 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010faa0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010faa6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010faa9:	74 17                	je     f010fac2 <test_alloc_block_NF+0x566>
f010faab:	83 ec 04             	sub    $0x4,%esp
f010faae:	68 34 82 13 f0       	push   $0xf0138234
f010fab3:	68 26 02 00 00       	push   $0x226
f010fab8:	68 34 77 13 f0       	push   $0xf0137734
f010fabd:	e8 39 07 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010fac2:	83 ec 0c             	sub    $0xc,%esp
f010fac5:	68 00 fc 07 00       	push   $0x7fc00
f010faca:	e8 bb 25 02 00       	call   f013208a <alloc_block_NF>
f010facf:	83 c4 10             	add    $0x10,%esp
f010fad2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010fad5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fad9:	74 1a                	je     f010faf5 <test_alloc_block_NF+0x599>
f010fadb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fade:	8b 40 0c             	mov    0xc(%eax),%eax
f010fae1:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010fae6:	75 0d                	jne    f010faf5 <test_alloc_block_NF+0x599>
f010fae8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010faeb:	8b 40 08             	mov    0x8(%eax),%eax
f010faee:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010faf3:	74 17                	je     f010fb0c <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010faf5:	83 ec 04             	sub    $0x4,%esp
f010faf8:	68 40 81 13 f0       	push   $0xf0138140
f010fafd:	68 2f 02 00 00       	push   $0x22f
f010fb02:	68 34 77 13 f0       	push   $0xf0137734
f010fb07:	e8 ef 06 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb0c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fb11:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb14:	83 ea 02             	sub    $0x2,%edx
f010fb17:	39 d0                	cmp    %edx,%eax
f010fb19:	75 13                	jne    f010fb2e <test_alloc_block_NF+0x5d2>
f010fb1b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fb20:	83 f8 06             	cmp    $0x6,%eax
f010fb23:	75 09                	jne    f010fb2e <test_alloc_block_NF+0x5d2>
f010fb25:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fb2a:	85 c0                	test   %eax,%eax
f010fb2c:	74 17                	je     f010fb45 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb2e:	83 ec 04             	sub    $0x4,%esp
f010fb31:	68 84 81 13 f0       	push   $0xf0138184
f010fb36:	68 33 02 00 00       	push   $0x233
f010fb3b:	68 34 77 13 f0       	push   $0xf0137734
f010fb40:	e8 b6 06 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fb45:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fb4c:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fb4f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010fb56:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010fb5d:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fb64:	83 ec 0c             	sub    $0xc,%esp
f010fb67:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb6a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fb70:	50                   	push   %eax
f010fb71:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb74:	50                   	push   %eax
f010fb75:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fb78:	50                   	push   %eax
f010fb79:	68 64 7b 65 f0       	push   $0xf0657b64
f010fb7e:	e8 4b 0e 00 00       	call   f01109ce <check_list_data>
f010fb83:	83 c4 20             	add    $0x20,%esp
f010fb86:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb89:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb8d:	74 17                	je     f010fba6 <test_alloc_block_NF+0x64a>
f010fb8f:	83 ec 04             	sub    $0x4,%esp
f010fb92:	68 e8 81 13 f0       	push   $0xf01381e8
f010fb97:	68 3b 02 00 00       	push   $0x23b
f010fb9c:	68 34 77 13 f0       	push   $0xf0137734
f010fba1:	e8 55 06 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fba6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fbac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fbaf:	74 17                	je     f010fbc8 <test_alloc_block_NF+0x66c>
f010fbb1:	83 ec 04             	sub    $0x4,%esp
f010fbb4:	68 34 82 13 f0       	push   $0xf0138234
f010fbb9:	68 3c 02 00 00       	push   $0x23c
f010fbbe:	68 34 77 13 f0       	push   $0xf0137734
f010fbc3:	e8 33 06 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010fbc8:	83 ec 0c             	sub    $0xc,%esp
f010fbcb:	68 00 0c 00 00       	push   $0xc00
f010fbd0:	e8 b5 24 02 00       	call   f013208a <alloc_block_NF>
f010fbd5:	83 c4 10             	add    $0x10,%esp
f010fbd8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010fbdb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fbdf:	74 17                	je     f010fbf8 <test_alloc_block_NF+0x69c>
f010fbe1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbe4:	8b 40 0c             	mov    0xc(%eax),%eax
f010fbe7:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fbec:	75 0a                	jne    f010fbf8 <test_alloc_block_NF+0x69c>
f010fbee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbf1:	8b 40 08             	mov    0x8(%eax),%eax
f010fbf4:	85 c0                	test   %eax,%eax
f010fbf6:	74 17                	je     f010fc0f <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fbf8:	83 ec 04             	sub    $0x4,%esp
f010fbfb:	68 40 81 13 f0       	push   $0xf0138140
f010fc00:	68 45 02 00 00       	push   $0x245
f010fc05:	68 34 77 13 f0       	push   $0xf0137734
f010fc0a:	e8 ec 05 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc0f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fc14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fc17:	83 ea 02             	sub    $0x2,%edx
f010fc1a:	39 d0                	cmp    %edx,%eax
f010fc1c:	75 13                	jne    f010fc31 <test_alloc_block_NF+0x6d5>
f010fc1e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fc23:	83 f8 05             	cmp    $0x5,%eax
f010fc26:	75 09                	jne    f010fc31 <test_alloc_block_NF+0x6d5>
f010fc28:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fc2d:	85 c0                	test   %eax,%eax
f010fc2f:	74 17                	je     f010fc48 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc31:	83 ec 04             	sub    $0x4,%esp
f010fc34:	68 84 81 13 f0       	push   $0xf0138184
f010fc39:	68 49 02 00 00       	push   $0x249
f010fc3e:	68 34 77 13 f0       	push   $0xf0137734
f010fc43:	e8 b3 05 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fc48:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fc4f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fc52:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fc59:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010fc60:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fc67:	83 ec 0c             	sub    $0xc,%esp
f010fc6a:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc6d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fc73:	50                   	push   %eax
f010fc74:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fc77:	50                   	push   %eax
f010fc78:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fc7b:	50                   	push   %eax
f010fc7c:	68 64 7b 65 f0       	push   $0xf0657b64
f010fc81:	e8 48 0d 00 00       	call   f01109ce <check_list_data>
f010fc86:	83 c4 20             	add    $0x20,%esp
f010fc89:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc8c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc90:	74 17                	je     f010fca9 <test_alloc_block_NF+0x74d>
f010fc92:	83 ec 04             	sub    $0x4,%esp
f010fc95:	68 e8 81 13 f0       	push   $0xf01381e8
f010fc9a:	68 51 02 00 00       	push   $0x251
f010fc9f:	68 34 77 13 f0       	push   $0xf0137734
f010fca4:	e8 52 05 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fca9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fcaf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fcb2:	74 17                	je     f010fccb <test_alloc_block_NF+0x76f>
f010fcb4:	83 ec 04             	sub    $0x4,%esp
f010fcb7:	68 34 82 13 f0       	push   $0xf0138234
f010fcbc:	68 52 02 00 00       	push   $0x252
f010fcc1:	68 34 77 13 f0       	push   $0xf0137734
f010fcc6:	e8 30 05 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010fccb:	83 ec 0c             	sub    $0xc,%esp
f010fcce:	68 00 04 00 00       	push   $0x400
f010fcd3:	e8 b2 23 02 00       	call   f013208a <alloc_block_NF>
f010fcd8:	83 c4 10             	add    $0x10,%esp
f010fcdb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010fcde:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fce2:	74 1a                	je     f010fcfe <test_alloc_block_NF+0x7a2>
f010fce4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fce7:	8b 40 0c             	mov    0xc(%eax),%eax
f010fcea:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fcef:	75 0d                	jne    f010fcfe <test_alloc_block_NF+0x7a2>
f010fcf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcf4:	8b 40 08             	mov    0x8(%eax),%eax
f010fcf7:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010fcfc:	74 17                	je     f010fd15 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fcfe:	83 ec 04             	sub    $0x4,%esp
f010fd01:	68 40 81 13 f0       	push   $0xf0138140
f010fd06:	68 5b 02 00 00       	push   $0x25b
f010fd0b:	68 34 77 13 f0       	push   $0xf0137734
f010fd10:	e8 e6 04 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd15:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fd1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fd1d:	83 ea 03             	sub    $0x3,%edx
f010fd20:	39 d0                	cmp    %edx,%eax
f010fd22:	75 13                	jne    f010fd37 <test_alloc_block_NF+0x7db>
f010fd24:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fd29:	83 f8 05             	cmp    $0x5,%eax
f010fd2c:	75 09                	jne    f010fd37 <test_alloc_block_NF+0x7db>
f010fd2e:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fd33:	85 c0                	test   %eax,%eax
f010fd35:	74 17                	je     f010fd4e <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd37:	83 ec 04             	sub    $0x4,%esp
f010fd3a:	68 84 81 13 f0       	push   $0xf0138184
f010fd3f:	68 5f 02 00 00       	push   $0x25f
f010fd44:	68 34 77 13 f0       	push   $0xf0137734
f010fd49:	e8 ad 04 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fd4e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fd55:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fd58:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010fd5f:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010fd66:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd6d:	83 ec 0c             	sub    $0xc,%esp
f010fd70:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd73:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fd79:	50                   	push   %eax
f010fd7a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd7d:	50                   	push   %eax
f010fd7e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fd81:	50                   	push   %eax
f010fd82:	68 64 7b 65 f0       	push   $0xf0657b64
f010fd87:	e8 42 0c 00 00       	call   f01109ce <check_list_data>
f010fd8c:	83 c4 20             	add    $0x20,%esp
f010fd8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd92:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd96:	74 17                	je     f010fdaf <test_alloc_block_NF+0x853>
f010fd98:	83 ec 04             	sub    $0x4,%esp
f010fd9b:	68 e8 81 13 f0       	push   $0xf01381e8
f010fda0:	68 67 02 00 00       	push   $0x267
f010fda5:	68 34 77 13 f0       	push   $0xf0137734
f010fdaa:	e8 4c 04 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fdaf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fdb5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fdb8:	74 17                	je     f010fdd1 <test_alloc_block_NF+0x875>
f010fdba:	83 ec 04             	sub    $0x4,%esp
f010fdbd:	68 34 82 13 f0       	push   $0xf0138234
f010fdc2:	68 68 02 00 00       	push   $0x268
f010fdc7:	68 34 77 13 f0       	push   $0xf0137734
f010fdcc:	e8 2a 04 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010fdd1:	83 ec 0c             	sub    $0xc,%esp
f010fdd4:	68 80 82 13 f0       	push   $0xf0138280
f010fdd9:	e8 a4 0e ff ff       	call   f0100c82 <cprintf>
f010fdde:	83 c4 10             	add    $0x10,%esp

}
f010fde1:	90                   	nop
f010fde2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fde5:	5b                   	pop    %ebx
f010fde6:	5e                   	pop    %esi
f010fde7:	5f                   	pop    %edi
f010fde8:	5d                   	pop    %ebp
f010fde9:	c3                   	ret    

f010fdea <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010fdea:	55                   	push   %ebp
f010fdeb:	89 e5                	mov    %esp,%ebp
f010fded:	57                   	push   %edi
f010fdee:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010fdf4:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fdfb:	83 ec 0c             	sub    $0xc,%esp
f010fdfe:	ff 75 f4             	pushl  -0xc(%ebp)
f010fe01:	e8 e4 1a 02 00       	call   f01318ea <initialize_MemBlocksList>
f010fe06:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fe09:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010fe10:	00 00 00 
f010fe13:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010fe1a:	00 00 00 
f010fe1d:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010fe24:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010fe27:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010fe2e:	00 00 00 
f010fe31:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010fe38:	00 00 00 
f010fe3b:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010fe42:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010fe45:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010fe48:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fe4d:	b8 00 00 00 00       	mov    $0x0,%eax
f010fe52:	89 d7                	mov    %edx,%edi
f010fe54:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010fe56:	8d 55 98             	lea    -0x68(%ebp),%edx
f010fe59:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fe5e:	b8 00 00 00 00       	mov    $0x0,%eax
f010fe63:	89 d7                	mov    %edx,%edi
f010fe65:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010fe67:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010fe6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010fe75:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010fe7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe7f:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010fe86:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fe87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe8a:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fe91:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fe92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe95:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fe99:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010fe9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe9f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fea3:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010fea6:	83 ec 0c             	sub    $0xc,%esp
f010fea9:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010feac:	50                   	push   %eax
f010fead:	e8 a5 27 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f010feb2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010feb5:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010feba:	85 c0                	test   %eax,%eax
f010febc:	75 14                	jne    f010fed2 <test_insert_sorted_with_merge_freeList+0xe8>
f010febe:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fec3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fec6:	75 0a                	jne    f010fed2 <test_insert_sorted_with_merge_freeList+0xe8>
f010fec8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fecd:	83 f8 01             	cmp    $0x1,%eax
f010fed0:	74 17                	je     f010fee9 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fed2:	83 ec 04             	sub    $0x4,%esp
f010fed5:	68 e0 82 13 f0       	push   $0xf01382e0
f010feda:	68 88 02 00 00       	push   $0x288
f010fedf:	68 34 77 13 f0       	push   $0xf0137734
f010fee4:	e8 12 03 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the free list content
	size = 0;
f010fee9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010fef0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fef7:	83 ec 0c             	sub    $0xc,%esp
f010fefa:	ff 75 f0             	pushl  -0x10(%ebp)
f010fefd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff00:	50                   	push   %eax
f010ff01:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ff04:	50                   	push   %eax
f010ff05:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ff08:	50                   	push   %eax
f010ff09:	68 64 7b 65 f0       	push   $0xf0657b64
f010ff0e:	e8 bb 0a 00 00       	call   f01109ce <check_list_data>
f010ff13:	83 c4 20             	add    $0x20,%esp
f010ff16:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ff19:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff1d:	74 17                	je     f010ff36 <test_insert_sorted_with_merge_freeList+0x14c>
f010ff1f:	83 ec 04             	sub    $0x4,%esp
f010ff22:	68 4c 83 13 f0       	push   $0xf013834c
f010ff27:	68 8e 02 00 00       	push   $0x28e
f010ff2c:	68 34 77 13 f0       	push   $0xf0137734
f010ff31:	e8 c5 02 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ff36:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff39:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ff3c:	74 17                	je     f010ff55 <test_insert_sorted_with_merge_freeList+0x16b>
f010ff3e:	83 ec 04             	sub    $0x4,%esp
f010ff41:	68 a0 83 13 f0       	push   $0xf01383a0
f010ff46:	68 8f 02 00 00       	push   $0x28f
f010ff4b:	68 34 77 13 f0       	push   $0xf0137734
f010ff50:	e8 a6 02 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010ff55:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010ff5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff5f:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010ff66:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010ff67:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff6a:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010ff71:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ff72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff75:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ff79:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010ff7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff82:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ff86:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010ff89:	83 ec 0c             	sub    $0xc,%esp
f010ff8c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010ff92:	50                   	push   %eax
f010ff93:	e8 bf 26 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f010ff98:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010ff9b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ffa0:	85 c0                	test   %eax,%eax
f010ffa2:	75 14                	jne    f010ffb8 <test_insert_sorted_with_merge_freeList+0x1ce>
f010ffa4:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ffa9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ffac:	75 0a                	jne    f010ffb8 <test_insert_sorted_with_merge_freeList+0x1ce>
f010ffae:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ffb3:	83 f8 02             	cmp    $0x2,%eax
f010ffb6:	74 17                	je     f010ffcf <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ffb8:	83 ec 04             	sub    $0x4,%esp
f010ffbb:	68 e0 82 13 f0       	push   $0xf01382e0
f010ffc0:	68 9e 02 00 00       	push   $0x29e
f010ffc5:	68 34 77 13 f0       	push   $0xf0137734
f010ffca:	e8 2c 02 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ffcf:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010ffd6:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ffdd:	83 ec 0c             	sub    $0xc,%esp
f010ffe0:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffe3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ffe6:	50                   	push   %eax
f010ffe7:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ffea:	50                   	push   %eax
f010ffeb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ffee:	50                   	push   %eax
f010ffef:	68 64 7b 65 f0       	push   $0xf0657b64
f010fff4:	e8 d5 09 00 00       	call   f01109ce <check_list_data>
f010fff9:	83 c4 20             	add    $0x20,%esp
f010fffc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ffff:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110003:	74 17                	je     f011001c <test_insert_sorted_with_merge_freeList+0x232>
f0110005:	83 ec 04             	sub    $0x4,%esp
f0110008:	68 4c 83 13 f0       	push   $0xf013834c
f011000d:	68 a4 02 00 00       	push   $0x2a4
f0110012:	68 34 77 13 f0       	push   $0xf0137734
f0110017:	e8 df 01 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011001c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011001f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110022:	74 17                	je     f011003b <test_insert_sorted_with_merge_freeList+0x251>
f0110024:	83 ec 04             	sub    $0x4,%esp
f0110027:	68 a0 83 13 f0       	push   $0xf01383a0
f011002c:	68 a5 02 00 00       	push   $0x2a5
f0110031:	68 34 77 13 f0       	push   $0xf0137734
f0110036:	e8 c0 01 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f011003b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110042:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110045:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f011004c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011004d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110050:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110057:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110058:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011005b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011005f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110065:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110068:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011006c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110072:	83 ec 0c             	sub    $0xc,%esp
f0110075:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f011007b:	50                   	push   %eax
f011007c:	e8 d6 25 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f0110081:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110084:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110089:	85 c0                	test   %eax,%eax
f011008b:	75 14                	jne    f01100a1 <test_insert_sorted_with_merge_freeList+0x2b7>
f011008d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110092:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110095:	75 0a                	jne    f01100a1 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110097:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f011009c:	83 f8 03             	cmp    $0x3,%eax
f011009f:	74 17                	je     f01100b8 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100a1:	83 ec 04             	sub    $0x4,%esp
f01100a4:	68 e0 82 13 f0       	push   $0xf01382e0
f01100a9:	68 b4 02 00 00       	push   $0x2b4
f01100ae:	68 34 77 13 f0       	push   $0xf0137734
f01100b3:	e8 43 01 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01100b8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01100bf:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01100c6:	83 ec 0c             	sub    $0xc,%esp
f01100c9:	ff 75 f0             	pushl  -0x10(%ebp)
f01100cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01100cf:	50                   	push   %eax
f01100d0:	8d 45 98             	lea    -0x68(%ebp),%eax
f01100d3:	50                   	push   %eax
f01100d4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01100d7:	50                   	push   %eax
f01100d8:	68 64 7b 65 f0       	push   $0xf0657b64
f01100dd:	e8 ec 08 00 00       	call   f01109ce <check_list_data>
f01100e2:	83 c4 20             	add    $0x20,%esp
f01100e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01100e8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01100ec:	74 17                	je     f0110105 <test_insert_sorted_with_merge_freeList+0x31b>
f01100ee:	83 ec 04             	sub    $0x4,%esp
f01100f1:	68 4c 83 13 f0       	push   $0xf013834c
f01100f6:	68 ba 02 00 00       	push   $0x2ba
f01100fb:	68 34 77 13 f0       	push   $0xf0137734
f0110100:	e8 f6 00 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110105:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110108:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011010b:	74 17                	je     f0110124 <test_insert_sorted_with_merge_freeList+0x33a>
f011010d:	83 ec 04             	sub    $0x4,%esp
f0110110:	68 a0 83 13 f0       	push   $0xf01383a0
f0110115:	68 bb 02 00 00       	push   $0x2bb
f011011a:	68 34 77 13 f0       	push   $0xf0137734
f011011f:	e8 d7 00 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110124:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f011012b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011012e:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110135:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110136:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110139:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110140:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110141:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110144:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110148:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f011014e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110151:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110155:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f011015b:	83 ec 0c             	sub    $0xc,%esp
f011015e:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110164:	50                   	push   %eax
f0110165:	e8 ed 24 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f011016a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011016d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110172:	85 c0                	test   %eax,%eax
f0110174:	75 14                	jne    f011018a <test_insert_sorted_with_merge_freeList+0x3a0>
f0110176:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f011017b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011017e:	75 0a                	jne    f011018a <test_insert_sorted_with_merge_freeList+0x3a0>
f0110180:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110185:	83 f8 04             	cmp    $0x4,%eax
f0110188:	74 17                	je     f01101a1 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011018a:	83 ec 04             	sub    $0x4,%esp
f011018d:	68 e0 82 13 f0       	push   $0xf01382e0
f0110192:	68 ca 02 00 00       	push   $0x2ca
f0110197:	68 34 77 13 f0       	push   $0xf0137734
f011019c:	e8 5a 00 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01101a1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01101a8:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01101af:	83 ec 0c             	sub    $0xc,%esp
f01101b2:	ff 75 f0             	pushl  -0x10(%ebp)
f01101b5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101b8:	50                   	push   %eax
f01101b9:	8d 45 98             	lea    -0x68(%ebp),%eax
f01101bc:	50                   	push   %eax
f01101bd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01101c0:	50                   	push   %eax
f01101c1:	68 64 7b 65 f0       	push   $0xf0657b64
f01101c6:	e8 03 08 00 00       	call   f01109ce <check_list_data>
f01101cb:	83 c4 20             	add    $0x20,%esp
f01101ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01101d1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101d5:	74 17                	je     f01101ee <test_insert_sorted_with_merge_freeList+0x404>
f01101d7:	83 ec 04             	sub    $0x4,%esp
f01101da:	68 4c 83 13 f0       	push   $0xf013834c
f01101df:	68 d0 02 00 00       	push   $0x2d0
f01101e4:	68 34 77 13 f0       	push   $0xf0137734
f01101e9:	e8 0d 00 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01101ee:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01101f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01101f4:	74 17                	je     f011020d <test_insert_sorted_with_merge_freeList+0x423>
f01101f6:	83 ec 04             	sub    $0x4,%esp
f01101f9:	68 a0 83 13 f0       	push   $0xf01383a0
f01101fe:	68 d1 02 00 00       	push   $0x2d1
f0110203:	68 34 77 13 f0       	push   $0xf0137734
f0110208:	e8 ee ff fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f011020d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110214:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110217:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f011021e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f011021f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110222:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110229:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011022a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011022d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110231:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110237:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011023a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011023e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110244:	83 ec 0c             	sub    $0xc,%esp
f0110247:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f011024d:	50                   	push   %eax
f011024e:	e8 04 24 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f0110253:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110256:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011025b:	85 c0                	test   %eax,%eax
f011025d:	75 17                	jne    f0110276 <test_insert_sorted_with_merge_freeList+0x48c>
f011025f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110264:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110267:	42                   	inc    %edx
f0110268:	39 d0                	cmp    %edx,%eax
f011026a:	75 0a                	jne    f0110276 <test_insert_sorted_with_merge_freeList+0x48c>
f011026c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110271:	83 f8 04             	cmp    $0x4,%eax
f0110274:	74 17                	je     f011028d <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110276:	83 ec 04             	sub    $0x4,%esp
f0110279:	68 e0 82 13 f0       	push   $0xf01382e0
f011027e:	68 e3 02 00 00       	push   $0x2e3
f0110283:	68 34 77 13 f0       	push   $0xf0137734
f0110288:	e8 6e ff fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011028d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110294:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f011029b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011029e:	8d 50 ff             	lea    -0x1(%eax),%edx
f01102a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a4:	48                   	dec    %eax
f01102a5:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01102a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ac:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01102b0:	01 c8                	add    %ecx,%eax
f01102b2:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01102b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102b9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01102c0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01102c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102c4:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01102cb:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01102cc:	83 ec 0c             	sub    $0xc,%esp
f01102cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01102d2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01102d5:	50                   	push   %eax
f01102d6:	8d 45 98             	lea    -0x68(%ebp),%eax
f01102d9:	50                   	push   %eax
f01102da:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01102dd:	50                   	push   %eax
f01102de:	68 64 7b 65 f0       	push   $0xf0657b64
f01102e3:	e8 e6 06 00 00       	call   f01109ce <check_list_data>
f01102e8:	83 c4 20             	add    $0x20,%esp
f01102eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01102ee:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102f2:	74 17                	je     f011030b <test_insert_sorted_with_merge_freeList+0x521>
f01102f4:	83 ec 04             	sub    $0x4,%esp
f01102f7:	68 4c 83 13 f0       	push   $0xf013834c
f01102fc:	68 ec 02 00 00       	push   $0x2ec
f0110301:	68 34 77 13 f0       	push   $0xf0137734
f0110306:	e8 f0 fe fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011030b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011030e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110311:	74 17                	je     f011032a <test_insert_sorted_with_merge_freeList+0x540>
f0110313:	83 ec 04             	sub    $0x4,%esp
f0110316:	68 a0 83 13 f0       	push   $0xf01383a0
f011031b:	68 ed 02 00 00       	push   $0x2ed
f0110320:	68 34 77 13 f0       	push   $0xf0137734
f0110325:	e8 d1 fe fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011032a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110331:	83 ec 0c             	sub    $0xc,%esp
f0110334:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110337:	50                   	push   %eax
f0110338:	e8 5d 07 00 00       	call   f0110a9a <check_avaliable_list_data>
f011033d:	83 c4 10             	add    $0x10,%esp
f0110340:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110343:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110346:	8d 50 01             	lea    0x1(%eax),%edx
f0110349:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011034c:	39 c2                	cmp    %eax,%edx
f011034e:	74 17                	je     f0110367 <test_insert_sorted_with_merge_freeList+0x57d>
f0110350:	83 ec 04             	sub    $0x4,%esp
f0110353:	68 f4 83 13 f0       	push   $0xf01383f4
f0110358:	68 f2 02 00 00       	push   $0x2f2
f011035d:	68 34 77 13 f0       	push   $0xf0137734
f0110362:	e8 94 fe fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110367:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011036b:	74 17                	je     f0110384 <test_insert_sorted_with_merge_freeList+0x59a>
f011036d:	83 ec 04             	sub    $0x4,%esp
f0110370:	68 4c 84 13 f0       	push   $0xf013844c
f0110375:	68 f3 02 00 00       	push   $0x2f3
f011037a:	68 34 77 13 f0       	push   $0xf0137734
f011037f:	e8 77 fe fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110384:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f011038b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011038e:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110395:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110396:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110399:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01103a0:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01103a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103a4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01103a8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f01103ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103b1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01103b5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f01103bb:	83 ec 0c             	sub    $0xc,%esp
f01103be:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01103c4:	50                   	push   %eax
f01103c5:	e8 8d 22 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f01103ca:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01103cd:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01103d2:	85 c0                	test   %eax,%eax
f01103d4:	75 19                	jne    f01103ef <test_insert_sorted_with_merge_freeList+0x605>
f01103d6:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01103db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01103de:	83 c2 02             	add    $0x2,%edx
f01103e1:	39 d0                	cmp    %edx,%eax
f01103e3:	75 0a                	jne    f01103ef <test_insert_sorted_with_merge_freeList+0x605>
f01103e5:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01103ea:	83 f8 04             	cmp    $0x4,%eax
f01103ed:	74 17                	je     f0110406 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103ef:	83 ec 04             	sub    $0x4,%esp
f01103f2:	68 e0 82 13 f0       	push   $0xf01382e0
f01103f7:	68 05 03 00 00       	push   $0x305
f01103fc:	68 34 77 13 f0       	push   $0xf0137734
f0110401:	e8 f5 fd fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110406:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011040d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110414:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110417:	8d 50 ff             	lea    -0x1(%eax),%edx
f011041a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011041d:	48                   	dec    %eax
f011041e:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110422:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110425:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110429:	01 c8                	add    %ecx,%eax
f011042b:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110432:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110439:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011043a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011043d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110444:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110445:	83 ec 0c             	sub    $0xc,%esp
f0110448:	ff 75 f0             	pushl  -0x10(%ebp)
f011044b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011044e:	50                   	push   %eax
f011044f:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110452:	50                   	push   %eax
f0110453:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110456:	50                   	push   %eax
f0110457:	68 64 7b 65 f0       	push   $0xf0657b64
f011045c:	e8 6d 05 00 00       	call   f01109ce <check_list_data>
f0110461:	83 c4 20             	add    $0x20,%esp
f0110464:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110467:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011046b:	74 17                	je     f0110484 <test_insert_sorted_with_merge_freeList+0x69a>
f011046d:	83 ec 04             	sub    $0x4,%esp
f0110470:	68 4c 83 13 f0       	push   $0xf013834c
f0110475:	68 0e 03 00 00       	push   $0x30e
f011047a:	68 34 77 13 f0       	push   $0xf0137734
f011047f:	e8 77 fd fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110484:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110487:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011048a:	74 17                	je     f01104a3 <test_insert_sorted_with_merge_freeList+0x6b9>
f011048c:	83 ec 04             	sub    $0x4,%esp
f011048f:	68 a0 83 13 f0       	push   $0xf01383a0
f0110494:	68 0f 03 00 00       	push   $0x30f
f0110499:	68 34 77 13 f0       	push   $0xf0137734
f011049e:	e8 58 fd fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01104a3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01104aa:	83 ec 0c             	sub    $0xc,%esp
f01104ad:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104b0:	50                   	push   %eax
f01104b1:	e8 e4 05 00 00       	call   f0110a9a <check_avaliable_list_data>
f01104b6:	83 c4 10             	add    $0x10,%esp
f01104b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01104bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01104bf:	8d 50 02             	lea    0x2(%eax),%edx
f01104c2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01104c5:	39 c2                	cmp    %eax,%edx
f01104c7:	74 17                	je     f01104e0 <test_insert_sorted_with_merge_freeList+0x6f6>
f01104c9:	83 ec 04             	sub    $0x4,%esp
f01104cc:	68 f4 83 13 f0       	push   $0xf01383f4
f01104d1:	68 14 03 00 00       	push   $0x314
f01104d6:	68 34 77 13 f0       	push   $0xf0137734
f01104db:	e8 1b fd fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01104e0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104e4:	74 17                	je     f01104fd <test_insert_sorted_with_merge_freeList+0x713>
f01104e6:	83 ec 04             	sub    $0x4,%esp
f01104e9:	68 4c 84 13 f0       	push   $0xf013844c
f01104ee:	68 15 03 00 00       	push   $0x315
f01104f3:	68 34 77 13 f0       	push   $0xf0137734
f01104f8:	e8 fe fc fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f01104fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110504:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110507:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011050e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011050f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110512:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110519:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011051a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011051d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110521:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110527:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011052a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011052e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110534:	83 ec 0c             	sub    $0xc,%esp
f0110537:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011053d:	50                   	push   %eax
f011053e:	e8 14 21 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f0110543:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110546:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011054b:	85 c0                	test   %eax,%eax
f011054d:	75 19                	jne    f0110568 <test_insert_sorted_with_merge_freeList+0x77e>
f011054f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110554:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110557:	83 c2 03             	add    $0x3,%edx
f011055a:	39 d0                	cmp    %edx,%eax
f011055c:	75 0a                	jne    f0110568 <test_insert_sorted_with_merge_freeList+0x77e>
f011055e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110563:	83 f8 04             	cmp    $0x4,%eax
f0110566:	74 17                	je     f011057f <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110568:	83 ec 04             	sub    $0x4,%esp
f011056b:	68 e0 82 13 f0       	push   $0xf01382e0
f0110570:	68 28 03 00 00       	push   $0x328
f0110575:	68 34 77 13 f0       	push   $0xf0137734
f011057a:	e8 7c fc fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011057f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110586:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f011058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110590:	8d 50 01             	lea    0x1(%eax),%edx
f0110593:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110596:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011059a:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011059e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a1:	8d 50 01             	lea    0x1(%eax),%edx
f01105a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a7:	40                   	inc    %eax
f01105a8:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01105ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105af:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105b3:	01 c8                	add    %ecx,%eax
f01105b5:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01105b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105bc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01105c3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01105c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105c7:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01105ce:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01105cf:	83 ec 0c             	sub    $0xc,%esp
f01105d2:	ff 75 f0             	pushl  -0x10(%ebp)
f01105d5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105d8:	50                   	push   %eax
f01105d9:	8d 45 98             	lea    -0x68(%ebp),%eax
f01105dc:	50                   	push   %eax
f01105dd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01105e0:	50                   	push   %eax
f01105e1:	68 64 7b 65 f0       	push   $0xf0657b64
f01105e6:	e8 e3 03 00 00       	call   f01109ce <check_list_data>
f01105eb:	83 c4 20             	add    $0x20,%esp
f01105ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01105f1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01105f5:	74 17                	je     f011060e <test_insert_sorted_with_merge_freeList+0x824>
f01105f7:	83 ec 04             	sub    $0x4,%esp
f01105fa:	68 4c 83 13 f0       	push   $0xf013834c
f01105ff:	68 32 03 00 00       	push   $0x332
f0110604:	68 34 77 13 f0       	push   $0xf0137734
f0110609:	e8 ed fb fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011060e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110611:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110614:	74 17                	je     f011062d <test_insert_sorted_with_merge_freeList+0x843>
f0110616:	83 ec 04             	sub    $0x4,%esp
f0110619:	68 a0 83 13 f0       	push   $0xf01383a0
f011061e:	68 33 03 00 00       	push   $0x333
f0110623:	68 34 77 13 f0       	push   $0xf0137734
f0110628:	e8 ce fb fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011062d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110634:	83 ec 0c             	sub    $0xc,%esp
f0110637:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011063a:	50                   	push   %eax
f011063b:	e8 5a 04 00 00       	call   f0110a9a <check_avaliable_list_data>
f0110640:	83 c4 10             	add    $0x10,%esp
f0110643:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110646:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110649:	8d 50 03             	lea    0x3(%eax),%edx
f011064c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011064f:	39 c2                	cmp    %eax,%edx
f0110651:	74 17                	je     f011066a <test_insert_sorted_with_merge_freeList+0x880>
f0110653:	83 ec 04             	sub    $0x4,%esp
f0110656:	68 f4 83 13 f0       	push   $0xf01383f4
f011065b:	68 38 03 00 00       	push   $0x338
f0110660:	68 34 77 13 f0       	push   $0xf0137734
f0110665:	e8 91 fb fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011066a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011066e:	74 17                	je     f0110687 <test_insert_sorted_with_merge_freeList+0x89d>
f0110670:	83 ec 04             	sub    $0x4,%esp
f0110673:	68 4c 84 13 f0       	push   $0xf013844c
f0110678:	68 39 03 00 00       	push   $0x339
f011067d:	68 34 77 13 f0       	push   $0xf0137734
f0110682:	e8 74 fb fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110687:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f011068e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110691:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110698:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110699:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011069c:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01106a3:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01106a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106a7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106ab:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f01106b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106b4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106b8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f01106be:	83 ec 0c             	sub    $0xc,%esp
f01106c1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01106c7:	50                   	push   %eax
f01106c8:	e8 8a 1f 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f01106cd:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01106d0:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01106d5:	85 c0                	test   %eax,%eax
f01106d7:	75 19                	jne    f01106f2 <test_insert_sorted_with_merge_freeList+0x908>
f01106d9:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01106de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01106e1:	83 c2 04             	add    $0x4,%edx
f01106e4:	39 d0                	cmp    %edx,%eax
f01106e6:	75 0a                	jne    f01106f2 <test_insert_sorted_with_merge_freeList+0x908>
f01106e8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01106ed:	83 f8 04             	cmp    $0x4,%eax
f01106f0:	74 17                	je     f0110709 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106f2:	83 ec 04             	sub    $0x4,%esp
f01106f5:	68 e0 82 13 f0       	push   $0xf01382e0
f01106fa:	68 4c 03 00 00       	push   $0x34c
f01106ff:	68 34 77 13 f0       	push   $0xf0137734
f0110704:	e8 f2 fa fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110709:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110710:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110717:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071a:	8d 50 01             	lea    0x1(%eax),%edx
f011071d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110720:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110724:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110728:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011072b:	8d 50 01             	lea    0x1(%eax),%edx
f011072e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110731:	40                   	inc    %eax
f0110732:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110736:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110739:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011073d:	01 c8                	add    %ecx,%eax
f011073f:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110743:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110746:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011074d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011074e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110751:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110758:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110759:	83 ec 0c             	sub    $0xc,%esp
f011075c:	ff 75 f0             	pushl  -0x10(%ebp)
f011075f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110762:	50                   	push   %eax
f0110763:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110766:	50                   	push   %eax
f0110767:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011076a:	50                   	push   %eax
f011076b:	68 64 7b 65 f0       	push   $0xf0657b64
f0110770:	e8 59 02 00 00       	call   f01109ce <check_list_data>
f0110775:	83 c4 20             	add    $0x20,%esp
f0110778:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011077b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011077f:	74 17                	je     f0110798 <test_insert_sorted_with_merge_freeList+0x9ae>
f0110781:	83 ec 04             	sub    $0x4,%esp
f0110784:	68 4c 83 13 f0       	push   $0xf013834c
f0110789:	68 56 03 00 00       	push   $0x356
f011078e:	68 34 77 13 f0       	push   $0xf0137734
f0110793:	e8 63 fa fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110798:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011079b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011079e:	74 17                	je     f01107b7 <test_insert_sorted_with_merge_freeList+0x9cd>
f01107a0:	83 ec 04             	sub    $0x4,%esp
f01107a3:	68 a0 83 13 f0       	push   $0xf01383a0
f01107a8:	68 57 03 00 00       	push   $0x357
f01107ad:	68 34 77 13 f0       	push   $0xf0137734
f01107b2:	e8 44 fa fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01107b7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01107be:	83 ec 0c             	sub    $0xc,%esp
f01107c1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107c4:	50                   	push   %eax
f01107c5:	e8 d0 02 00 00       	call   f0110a9a <check_avaliable_list_data>
f01107ca:	83 c4 10             	add    $0x10,%esp
f01107cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01107d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01107d3:	8d 50 04             	lea    0x4(%eax),%edx
f01107d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107d9:	39 c2                	cmp    %eax,%edx
f01107db:	74 17                	je     f01107f4 <test_insert_sorted_with_merge_freeList+0xa0a>
f01107dd:	83 ec 04             	sub    $0x4,%esp
f01107e0:	68 f4 83 13 f0       	push   $0xf01383f4
f01107e5:	68 5c 03 00 00       	push   $0x35c
f01107ea:	68 34 77 13 f0       	push   $0xf0137734
f01107ef:	e8 07 fa fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01107f4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107f8:	74 17                	je     f0110811 <test_insert_sorted_with_merge_freeList+0xa27>
f01107fa:	83 ec 04             	sub    $0x4,%esp
f01107fd:	68 4c 84 13 f0       	push   $0xf013844c
f0110802:	68 5d 03 00 00       	push   $0x35d
f0110807:	68 34 77 13 f0       	push   $0xf0137734
f011080c:	e8 ea f9 fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110811:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110818:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011081b:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110822:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110823:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110826:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f011082d:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011082e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110831:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110835:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f011083b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011083e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110842:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110848:	83 ec 0c             	sub    $0xc,%esp
f011084b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110851:	50                   	push   %eax
f0110852:	e8 00 1e 02 00       	call   f0132657 <insert_sorted_with_merge_freeList>
f0110857:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011085a:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011085f:	85 c0                	test   %eax,%eax
f0110861:	75 19                	jne    f011087c <test_insert_sorted_with_merge_freeList+0xa92>
f0110863:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110868:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011086b:	83 c2 06             	add    $0x6,%edx
f011086e:	39 d0                	cmp    %edx,%eax
f0110870:	75 0a                	jne    f011087c <test_insert_sorted_with_merge_freeList+0xa92>
f0110872:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110877:	83 f8 03             	cmp    $0x3,%eax
f011087a:	74 17                	je     f0110893 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011087c:	83 ec 04             	sub    $0x4,%esp
f011087f:	68 e0 82 13 f0       	push   $0xf01382e0
f0110884:	68 70 03 00 00       	push   $0x370
f0110889:	68 34 77 13 f0       	push   $0xf0137734
f011088e:	e8 68 f9 fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110893:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f011089a:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01108a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108a4:	48                   	dec    %eax
f01108a5:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01108ac:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01108ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108b0:	8d 50 ff             	lea    -0x1(%eax),%edx
f01108b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108b6:	48                   	dec    %eax
f01108b7:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01108bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108be:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108c2:	01 c1                	add    %eax,%ecx
f01108c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108c7:	40                   	inc    %eax
f01108c8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108cc:	01 c8                	add    %ecx,%eax
f01108ce:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01108d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108d5:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01108dc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01108dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108e0:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01108e7:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f01108e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108eb:	40                   	inc    %eax
f01108ec:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01108f3:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f01108f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108f7:	40                   	inc    %eax
f01108f8:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01108ff:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110900:	83 ec 0c             	sub    $0xc,%esp
f0110903:	ff 75 f0             	pushl  -0x10(%ebp)
f0110906:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110909:	50                   	push   %eax
f011090a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011090d:	50                   	push   %eax
f011090e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110911:	50                   	push   %eax
f0110912:	68 64 7b 65 f0       	push   $0xf0657b64
f0110917:	e8 b2 00 00 00       	call   f01109ce <check_list_data>
f011091c:	83 c4 20             	add    $0x20,%esp
f011091f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110922:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110926:	74 17                	je     f011093f <test_insert_sorted_with_merge_freeList+0xb55>
f0110928:	83 ec 04             	sub    $0x4,%esp
f011092b:	68 4c 83 13 f0       	push   $0xf013834c
f0110930:	68 7c 03 00 00       	push   $0x37c
f0110935:	68 34 77 13 f0       	push   $0xf0137734
f011093a:	e8 bc f8 fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011093f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110942:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110945:	74 17                	je     f011095e <test_insert_sorted_with_merge_freeList+0xb74>
f0110947:	83 ec 04             	sub    $0x4,%esp
f011094a:	68 a0 83 13 f0       	push   $0xf01383a0
f011094f:	68 7d 03 00 00       	push   $0x37d
f0110954:	68 34 77 13 f0       	push   $0xf0137734
f0110959:	e8 9d f8 fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011095e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110965:	83 ec 0c             	sub    $0xc,%esp
f0110968:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011096b:	50                   	push   %eax
f011096c:	e8 29 01 00 00       	call   f0110a9a <check_avaliable_list_data>
f0110971:	83 c4 10             	add    $0x10,%esp
f0110974:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011097a:	8d 50 06             	lea    0x6(%eax),%edx
f011097d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110980:	39 c2                	cmp    %eax,%edx
f0110982:	74 17                	je     f011099b <test_insert_sorted_with_merge_freeList+0xbb1>
f0110984:	83 ec 04             	sub    $0x4,%esp
f0110987:	68 f4 83 13 f0       	push   $0xf01383f4
f011098c:	68 82 03 00 00       	push   $0x382
f0110991:	68 34 77 13 f0       	push   $0xf0137734
f0110996:	e8 60 f8 fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011099b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011099f:	74 17                	je     f01109b8 <test_insert_sorted_with_merge_freeList+0xbce>
f01109a1:	83 ec 04             	sub    $0x4,%esp
f01109a4:	68 4c 84 13 f0       	push   $0xf013844c
f01109a9:	68 83 03 00 00       	push   $0x383
f01109ae:	68 34 77 13 f0       	push   $0xf0137734
f01109b3:	e8 43 f8 fe ff       	call   f01001fb <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01109b8:	83 ec 0c             	sub    $0xc,%esp
f01109bb:	68 a8 84 13 f0       	push   $0xf01384a8
f01109c0:	e8 bd 02 ff ff       	call   f0100c82 <cprintf>
f01109c5:	83 c4 10             	add    $0x10,%esp

}
f01109c8:	90                   	nop
f01109c9:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01109cc:	c9                   	leave  
f01109cd:	c3                   	ret    

f01109ce <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01109ce:	55                   	push   %ebp
f01109cf:	89 e5                	mov    %esp,%ebp
f01109d1:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01109d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01109db:	8b 45 14             	mov    0x14(%ebp),%eax
f01109de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f01109e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f01109eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01109ee:	8b 00                	mov    (%eax),%eax
f01109f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01109f3:	eb 6e                	jmp    f0110a63 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f01109f5:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f01109f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01109fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110a02:	8b 45 10             	mov    0x10(%ebp),%eax
f0110a05:	01 d0                	add    %edx,%eax
f0110a07:	8b 00                	mov    (%eax),%eax
f0110a09:	85 c0                	test   %eax,%eax
f0110a0b:	74 e8                	je     f01109f5 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110a0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110a10:	8b 50 08             	mov    0x8(%eax),%edx
f0110a13:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110a16:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110a1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110a20:	01 c8                	add    %ecx,%eax
f0110a22:	8b 00                	mov    (%eax),%eax
f0110a24:	39 c2                	cmp    %eax,%edx
f0110a26:	75 1b                	jne    f0110a43 <check_list_data+0x75>
f0110a28:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110a2b:	8b 50 0c             	mov    0xc(%eax),%edx
f0110a2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110a31:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110a38:	8b 45 10             	mov    0x10(%ebp),%eax
f0110a3b:	01 c8                	add    %ecx,%eax
f0110a3d:	8b 00                	mov    (%eax),%eax
f0110a3f:	39 c2                	cmp    %eax,%edx
f0110a41:	74 07                	je     f0110a4a <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110a43:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a48:	eb 4e                	jmp    f0110a98 <check_list_data+0xca>
		}
		(*size)++;
f0110a4a:	8b 45 14             	mov    0x14(%ebp),%eax
f0110a4d:	8b 00                	mov    (%eax),%eax
f0110a4f:	8d 50 01             	lea    0x1(%eax),%edx
f0110a52:	8b 45 14             	mov    0x14(%ebp),%eax
f0110a55:	89 10                	mov    %edx,(%eax)
		i++;
f0110a57:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0110a5d:	8b 40 08             	mov    0x8(%eax),%eax
f0110a60:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110a63:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110a67:	74 07                	je     f0110a70 <check_list_data+0xa2>
f0110a69:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110a6c:	8b 00                	mov    (%eax),%eax
f0110a6e:	eb 05                	jmp    f0110a75 <check_list_data+0xa7>
f0110a70:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a75:	8b 55 08             	mov    0x8(%ebp),%edx
f0110a78:	89 42 08             	mov    %eax,0x8(%edx)
f0110a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0110a7e:	8b 40 08             	mov    0x8(%eax),%eax
f0110a81:	85 c0                	test   %eax,%eax
f0110a83:	0f 85 6f ff ff ff    	jne    f01109f8 <check_list_data+0x2a>
f0110a89:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110a8d:	0f 85 65 ff ff ff    	jne    f01109f8 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110a93:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110a98:	c9                   	leave  
f0110a99:	c3                   	ret    

f0110a9a <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110a9a:	55                   	push   %ebp
f0110a9b:	89 e5                	mov    %esp,%ebp
f0110a9d:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110aa0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0110aaa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110ab0:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0110ab5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110ab8:	eb 30                	jmp    f0110aea <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110aba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110abd:	8b 40 08             	mov    0x8(%eax),%eax
f0110ac0:	85 c0                	test   %eax,%eax
f0110ac2:	75 0a                	jne    f0110ace <check_avaliable_list_data+0x34>
f0110ac4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110ac7:	8b 40 0c             	mov    0xc(%eax),%eax
f0110aca:	85 c0                	test   %eax,%eax
f0110acc:	74 07                	je     f0110ad5 <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110ace:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ad3:	eb 40                	jmp    f0110b15 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ad8:	8b 00                	mov    (%eax),%eax
f0110ada:	8d 50 01             	lea    0x1(%eax),%edx
f0110add:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ae0:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110ae2:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f0110ae7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110aea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110aee:	74 07                	je     f0110af7 <check_avaliable_list_data+0x5d>
f0110af0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110af3:	8b 00                	mov    (%eax),%eax
f0110af5:	eb 05                	jmp    f0110afc <check_avaliable_list_data+0x62>
f0110af7:	b8 00 00 00 00       	mov    $0x0,%eax
f0110afc:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f0110b01:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f0110b06:	85 c0                	test   %eax,%eax
f0110b08:	75 b0                	jne    f0110aba <check_avaliable_list_data+0x20>
f0110b0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110b0e:	75 aa                	jne    f0110aba <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110b10:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110b15:	c9                   	leave  
f0110b16:	c3                   	ret    

f0110b17 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110b17:	55                   	push   %ebp
f0110b18:	89 e5                	mov    %esp,%ebp
f0110b1a:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110b1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110b24:	8b 45 08             	mov    0x8(%ebp),%eax
f0110b27:	8b 00                	mov    (%eax),%eax
f0110b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110b2c:	eb 27                	jmp    f0110b55 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0110b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b31:	8b 50 0c             	mov    0xc(%eax),%edx
f0110b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b37:	8b 40 08             	mov    0x8(%eax),%eax
f0110b3a:	83 ec 04             	sub    $0x4,%esp
f0110b3d:	52                   	push   %edx
f0110b3e:	50                   	push   %eax
f0110b3f:	68 f8 77 13 f0       	push   $0xf01377f8
f0110b44:	e8 39 01 ff ff       	call   f0100c82 <cprintf>
f0110b49:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110b4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0110b4f:	8b 40 08             	mov    0x8(%eax),%eax
f0110b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110b55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110b59:	74 07                	je     f0110b62 <show_list_content+0x4b>
f0110b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110b5e:	8b 00                	mov    (%eax),%eax
f0110b60:	eb 05                	jmp    f0110b67 <show_list_content+0x50>
f0110b62:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b67:	8b 55 08             	mov    0x8(%ebp),%edx
f0110b6a:	89 42 08             	mov    %eax,0x8(%edx)
f0110b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0110b70:	8b 40 08             	mov    0x8(%eax),%eax
f0110b73:	85 c0                	test   %eax,%eax
f0110b75:	75 b7                	jne    f0110b2e <show_list_content+0x17>
f0110b77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110b7b:	75 b1                	jne    f0110b2e <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110b7d:	90                   	nop
f0110b7e:	c9                   	leave  
f0110b7f:	c3                   	ret    

f0110b80 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110b80:	55                   	push   %ebp
f0110b81:	89 e5                	mov    %esp,%ebp
f0110b83:	57                   	push   %edi
f0110b84:	56                   	push   %esi
f0110b85:	53                   	push   %ebx
f0110b86:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110b8c:	83 ec 0c             	sub    $0xc,%esp
f0110b8f:	68 fc 84 13 f0       	push   $0xf01384fc
f0110b94:	e8 e9 00 ff ff       	call   f0100c82 <cprintf>
f0110b99:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110b9c:	83 ec 0c             	sub    $0xc,%esp
f0110b9f:	68 20 85 13 f0       	push   $0xf0138520
f0110ba4:	e8 d9 00 ff ff       	call   f0100c82 <cprintf>
f0110ba9:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110bac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110bb3:	83 ec 0c             	sub    $0xc,%esp
f0110bb6:	68 3c 85 13 f0       	push   $0xf013853c
f0110bbb:	e8 c2 00 ff ff       	call   f0100c82 <cprintf>
f0110bc0:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110bc3:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110bc6:	bb f6 85 13 f0       	mov    $0xf01385f6,%ebx
f0110bcb:	ba 03 00 00 00       	mov    $0x3,%edx
f0110bd0:	89 c7                	mov    %eax,%edi
f0110bd2:	89 de                	mov    %ebx,%esi
f0110bd4:	89 d1                	mov    %edx,%ecx
f0110bd6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110bd8:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110bdb:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110be0:	b8 00 00 00 00       	mov    $0x0,%eax
f0110be5:	89 d7                	mov    %edx,%edi
f0110be7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110be9:	83 ec 0c             	sub    $0xc,%esp
f0110bec:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110bef:	50                   	push   %eax
f0110bf0:	e8 ef 00 ff ff       	call   f0100ce4 <execute_command>
f0110bf5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110bf8:	83 ec 0c             	sub    $0xc,%esp
f0110bfb:	68 6a 85 13 f0       	push   $0xf013856a
f0110c00:	e8 7d 00 ff ff       	call   f0100c82 <cprintf>
f0110c05:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110c08:	83 ec 0c             	sub    $0xc,%esp
f0110c0b:	68 80 85 13 f0       	push   $0xf0138580
f0110c10:	e8 6d 00 ff ff       	call   f0100c82 <cprintf>
f0110c15:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110c18:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110c1f:	65 00 00 
f0110c22:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110c28:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110c2d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c32:	89 d7                	mov    %edx,%edi
f0110c34:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110c36:	83 ec 0c             	sub    $0xc,%esp
f0110c39:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110c3f:	50                   	push   %eax
f0110c40:	e8 9f 00 ff ff       	call   f0100ce4 <execute_command>
f0110c45:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110c48:	83 ec 0c             	sub    $0xc,%esp
f0110c4b:	68 6a 85 13 f0       	push   $0xf013856a
f0110c50:	e8 2d 00 ff ff       	call   f0100c82 <cprintf>
f0110c55:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110c58:	83 ec 0c             	sub    $0xc,%esp
f0110c5b:	68 a8 85 13 f0       	push   $0xf01385a8
f0110c60:	e8 1d 00 ff ff       	call   f0100c82 <cprintf>
f0110c65:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110c68:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110c6f:	75 00 00 
f0110c72:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110c78:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110c7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c82:	89 d7                	mov    %edx,%edi
f0110c84:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110c86:	83 ec 0c             	sub    $0xc,%esp
f0110c89:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110c8f:	50                   	push   %eax
f0110c90:	e8 4f 00 ff ff       	call   f0100ce4 <execute_command>
f0110c95:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110c98:	83 ec 0c             	sub    $0xc,%esp
f0110c9b:	68 6a 85 13 f0       	push   $0xf013856a
f0110ca0:	e8 dd ff fe ff       	call   f0100c82 <cprintf>
f0110ca5:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110ca8:	83 ec 0c             	sub    $0xc,%esp
f0110cab:	68 d0 85 13 f0       	push   $0xf01385d0
f0110cb0:	e8 cd ff fe ff       	call   f0100c82 <cprintf>
f0110cb5:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110cb8:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110cbf:	6d 6d 00 
f0110cc2:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110cc8:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110ccd:	b8 00 00 00 00       	mov    $0x0,%eax
f0110cd2:	89 d7                	mov    %edx,%edi
f0110cd4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110cd6:	83 ec 0c             	sub    $0xc,%esp
f0110cd9:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0110cdf:	50                   	push   %eax
f0110ce0:	e8 ff ff fe ff       	call   f0100ce4 <execute_command>
f0110ce5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110ce8:	83 ec 0c             	sub    $0xc,%esp
f0110ceb:	68 6a 85 13 f0       	push   $0xf013856a
f0110cf0:	e8 8d ff fe ff       	call   f0100c82 <cprintf>
f0110cf5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110cf8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110cfd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110d00:	5b                   	pop    %ebx
f0110d01:	5e                   	pop    %esi
f0110d02:	5f                   	pop    %edi
f0110d03:	5d                   	pop    %ebp
f0110d04:	c3                   	ret    

f0110d05 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110d05:	55                   	push   %ebp
f0110d06:	89 e5                	mov    %esp,%ebp
f0110d08:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0110d0b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110d12:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110d19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d20:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d25:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d28:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d2e:	50                   	push   %eax
f0110d2f:	e8 07 6e ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110d34:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d37:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d3c:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d3f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d42:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d45:	50                   	push   %eax
f0110d46:	e8 9e 4e 00 00       	call   f0115be9 <CP>
f0110d4b:	83 c4 10             	add    $0x10,%esp
f0110d4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110d51:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d55:	74 14                	je     f0110d6b <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110d57:	83 ec 04             	sub    $0x4,%esp
f0110d5a:	68 5c 86 13 f0       	push   $0xf013865c
f0110d5f:	6a 5a                	push   $0x5a
f0110d61:	68 7e 86 13 f0       	push   $0xf013867e
f0110d66:	e8 90 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110d6b:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110d72:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110d79:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d80:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d85:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d88:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d8e:	50                   	push   %eax
f0110d8f:	e8 a7 6d ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110d94:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d97:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d9c:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d9f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110da2:	ff 75 f4             	pushl  -0xc(%ebp)
f0110da5:	50                   	push   %eax
f0110da6:	e8 3e 4e 00 00       	call   f0115be9 <CP>
f0110dab:	83 c4 10             	add    $0x10,%esp
f0110dae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110db1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110db5:	74 14                	je     f0110dcb <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110db7:	83 ec 04             	sub    $0x4,%esp
f0110dba:	68 9c 86 13 f0       	push   $0xf013869c
f0110dbf:	6a 66                	push   $0x66
f0110dc1:	68 7e 86 13 f0       	push   $0xf013867e
f0110dc6:	e8 30 f4 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0110dcb:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110dd2:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110dd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110de0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110de5:	ff 75 ec             	pushl  -0x14(%ebp)
f0110de8:	ff 75 f0             	pushl  -0x10(%ebp)
f0110deb:	ff 75 f4             	pushl  -0xc(%ebp)
f0110dee:	50                   	push   %eax
f0110def:	e8 47 6d ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110df4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110df7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110dfc:	ff 75 ec             	pushl  -0x14(%ebp)
f0110dff:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e02:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e05:	50                   	push   %eax
f0110e06:	e8 de 4d 00 00       	call   f0115be9 <CP>
f0110e0b:	83 c4 10             	add    $0x10,%esp
f0110e0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110e11:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e15:	74 14                	je     f0110e2b <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0110e17:	83 ec 04             	sub    $0x4,%esp
f0110e1a:	68 c0 86 13 f0       	push   $0xf01386c0
f0110e1f:	6a 71                	push   $0x71
f0110e21:	68 7e 86 13 f0       	push   $0xf013867e
f0110e26:	e8 d0 f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0110e2b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0110e32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0110e39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e40:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e45:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e48:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e4e:	50                   	push   %eax
f0110e4f:	e8 e7 6c ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110e54:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e57:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e5c:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e62:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e65:	50                   	push   %eax
f0110e66:	e8 7e 4d 00 00       	call   f0115be9 <CP>
f0110e6b:	83 c4 10             	add    $0x10,%esp
f0110e6e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110e71:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e75:	74 14                	je     f0110e8b <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110e77:	83 ec 04             	sub    $0x4,%esp
f0110e7a:	68 e4 86 13 f0       	push   $0xf01386e4
f0110e7f:	6a 7d                	push   $0x7d
f0110e81:	68 7e 86 13 f0       	push   $0xf013867e
f0110e86:	e8 70 f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110e8b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110e92:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110e99:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ea0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ea5:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ea8:	ff 75 f0             	pushl  -0x10(%ebp)
f0110eab:	ff 75 f4             	pushl  -0xc(%ebp)
f0110eae:	50                   	push   %eax
f0110eaf:	e8 87 6c ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110eb4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110eb7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ebc:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ebf:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ec2:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ec5:	50                   	push   %eax
f0110ec6:	e8 1e 4d 00 00       	call   f0115be9 <CP>
f0110ecb:	83 c4 10             	add    $0x10,%esp
f0110ece:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110ed1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ed5:	74 17                	je     f0110eee <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110ed7:	83 ec 04             	sub    $0x4,%esp
f0110eda:	68 08 87 13 f0       	push   $0xf0138708
f0110edf:	68 89 00 00 00       	push   $0x89
f0110ee4:	68 7e 86 13 f0       	push   $0xf013867e
f0110ee9:	e8 0d f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110eee:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110ef5:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110efc:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f03:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f08:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f0b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f0e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f11:	50                   	push   %eax
f0110f12:	e8 24 6c ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110f17:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f1a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f22:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f28:	50                   	push   %eax
f0110f29:	e8 bb 4c 00 00       	call   f0115be9 <CP>
f0110f2e:	83 c4 10             	add    $0x10,%esp
f0110f31:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110f34:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f38:	74 17                	je     f0110f51 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0110f3a:	83 ec 04             	sub    $0x4,%esp
f0110f3d:	68 2c 87 13 f0       	push   $0xf013872c
f0110f42:	68 95 00 00 00       	push   $0x95
f0110f47:	68 7e 86 13 f0       	push   $0xf013867e
f0110f4c:	e8 aa f2 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0110f51:	83 ec 0c             	sub    $0xc,%esp
f0110f54:	68 58 87 13 f0       	push   $0xf0138758
f0110f59:	e8 24 fd fe ff       	call   f0100c82 <cprintf>
f0110f5e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110f61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110f66:	c9                   	leave  
f0110f67:	c3                   	ret    

f0110f68 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110f68:	55                   	push   %ebp
f0110f69:	89 e5                	mov    %esp,%ebp
f0110f6b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110f6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110f75:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110f7c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f83:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f88:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f8b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f8e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f91:	50                   	push   %eax
f0110f92:	e8 a4 6b ff ff       	call   f0107b3b <pt_set_page_permissions>
f0110f97:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110f9a:	83 ec 04             	sub    $0x4,%esp
f0110f9d:	68 a8 87 13 f0       	push   $0xf01387a8
f0110fa2:	68 a2 00 00 00       	push   $0xa2
f0110fa7:	68 7e 86 13 f0       	push   $0xf013867e
f0110fac:	e8 4a f2 fe ff       	call   f01001fb <_panic>

f0110fb1 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110fb1:	55                   	push   %ebp
f0110fb2:	89 e5                	mov    %esp,%ebp
f0110fb4:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110fb7:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110fbe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fc3:	83 ec 08             	sub    $0x8,%esp
f0110fc6:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fc9:	50                   	push   %eax
f0110fca:	e8 20 6c ff ff       	call   f0107bef <pt_get_page_permissions>
f0110fcf:	83 c4 10             	add    $0x10,%esp
f0110fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110fd5:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110fd9:	74 17                	je     f0110ff2 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110fdb:	83 ec 04             	sub    $0x4,%esp
f0110fde:	68 44 88 13 f0       	push   $0xf0138844
f0110fe3:	68 b0 00 00 00       	push   $0xb0
f0110fe8:	68 7e 86 13 f0       	push   $0xf013867e
f0110fed:	e8 09 f2 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110ff2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110ff9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ffe:	83 ec 08             	sub    $0x8,%esp
f0111001:	ff 75 f4             	pushl  -0xc(%ebp)
f0111004:	50                   	push   %eax
f0111005:	e8 e5 6b ff ff       	call   f0107bef <pt_get_page_permissions>
f011100a:	83 c4 10             	add    $0x10,%esp
f011100d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111010:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111014:	74 17                	je     f011102d <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111016:	83 ec 04             	sub    $0x4,%esp
f0111019:	68 68 88 13 f0       	push   $0xf0138868
f011101e:	68 b8 00 00 00       	push   $0xb8
f0111023:	68 7e 86 13 f0       	push   $0xf013867e
f0111028:	e8 ce f1 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011102d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111034:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111039:	83 ec 08             	sub    $0x8,%esp
f011103c:	ff 75 f4             	pushl  -0xc(%ebp)
f011103f:	50                   	push   %eax
f0111040:	e8 aa 6b ff ff       	call   f0107bef <pt_get_page_permissions>
f0111045:	83 c4 10             	add    $0x10,%esp
f0111048:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011104b:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011104f:	74 17                	je     f0111068 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111051:	83 ec 04             	sub    $0x4,%esp
f0111054:	68 8c 88 13 f0       	push   $0xf013888c
f0111059:	68 c0 00 00 00       	push   $0xc0
f011105e:	68 7e 86 13 f0       	push   $0xf013867e
f0111063:	e8 93 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF1000000;
f0111068:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011106f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111074:	83 ec 08             	sub    $0x8,%esp
f0111077:	ff 75 f4             	pushl  -0xc(%ebp)
f011107a:	50                   	push   %eax
f011107b:	e8 6f 6b ff ff       	call   f0107bef <pt_get_page_permissions>
f0111080:	83 c4 10             	add    $0x10,%esp
f0111083:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111086:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011108a:	74 17                	je     f01110a3 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f011108c:	83 ec 04             	sub    $0x4,%esp
f011108f:	68 b0 88 13 f0       	push   $0xf01388b0
f0111094:	68 c7 00 00 00       	push   $0xc7
f0111099:	68 7e 86 13 f0       	push   $0xf013867e
f011109e:	e8 58 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f01110a3:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01110aa:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110af:	83 ec 08             	sub    $0x8,%esp
f01110b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01110b5:	50                   	push   %eax
f01110b6:	e8 34 6b ff ff       	call   f0107bef <pt_get_page_permissions>
f01110bb:	83 c4 10             	add    $0x10,%esp
f01110be:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01110c1:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01110c5:	74 17                	je     f01110de <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01110c7:	83 ec 04             	sub    $0x4,%esp
f01110ca:	68 d4 88 13 f0       	push   $0xf01388d4
f01110cf:	68 ce 00 00 00       	push   $0xce
f01110d4:	68 7e 86 13 f0       	push   $0xf013867e
f01110d9:	e8 1d f1 fe ff       	call   f01001fb <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01110de:	83 ec 0c             	sub    $0xc,%esp
f01110e1:	68 f8 88 13 f0       	push   $0xf01388f8
f01110e6:	e8 97 fb fe ff       	call   f0100c82 <cprintf>
f01110eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01110ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01110f3:	c9                   	leave  
f01110f4:	c3                   	ret    

f01110f5 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f01110f5:	55                   	push   %ebp
f01110f6:	89 e5                	mov    %esp,%ebp
f01110f8:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f01110fb:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111102:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111107:	83 ec 08             	sub    $0x8,%esp
f011110a:	ff 75 f4             	pushl  -0xc(%ebp)
f011110d:	50                   	push   %eax
f011110e:	e8 37 6b ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f0111113:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111116:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011111b:	83 ec 08             	sub    $0x8,%esp
f011111e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111121:	50                   	push   %eax
f0111122:	e8 1e 4a 00 00       	call   f0115b45 <CE>
f0111127:	83 c4 10             	add    $0x10,%esp
f011112a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011112d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111131:	74 17                	je     f011114a <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111133:	83 ec 04             	sub    $0x4,%esp
f0111136:	68 40 89 13 f0       	push   $0xf0138940
f011113b:	68 de 00 00 00       	push   $0xde
f0111140:	68 7e 86 13 f0       	push   $0xf013867e
f0111145:	e8 b1 f0 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f011114a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111151:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111156:	83 ec 08             	sub    $0x8,%esp
f0111159:	ff 75 f4             	pushl  -0xc(%ebp)
f011115c:	50                   	push   %eax
f011115d:	e8 e8 6a ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f0111162:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111165:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011116a:	83 ec 08             	sub    $0x8,%esp
f011116d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111170:	50                   	push   %eax
f0111171:	e8 cf 49 00 00       	call   f0115b45 <CE>
f0111176:	83 c4 10             	add    $0x10,%esp
f0111179:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011117c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111180:	74 17                	je     f0111199 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111182:	83 ec 04             	sub    $0x4,%esp
f0111185:	68 6c 89 13 f0       	push   $0xf013896c
f011118a:	68 e6 00 00 00       	push   $0xe6
f011118f:	68 7e 86 13 f0       	push   $0xf013867e
f0111194:	e8 62 f0 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0111199:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01111a0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111a5:	83 ec 08             	sub    $0x8,%esp
f01111a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01111ab:	50                   	push   %eax
f01111ac:	e8 99 6a ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f01111b1:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01111b4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111b9:	83 ec 08             	sub    $0x8,%esp
f01111bc:	ff 75 f4             	pushl  -0xc(%ebp)
f01111bf:	50                   	push   %eax
f01111c0:	e8 80 49 00 00       	call   f0115b45 <CE>
f01111c5:	83 c4 10             	add    $0x10,%esp
f01111c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01111cb:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01111cf:	74 17                	je     f01111e8 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01111d1:	83 ec 04             	sub    $0x4,%esp
f01111d4:	68 98 89 13 f0       	push   $0xf0138998
f01111d9:	68 ee 00 00 00       	push   $0xee
f01111de:	68 7e 86 13 f0       	push   $0xf013867e
f01111e3:	e8 13 f0 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0000000;
f01111e8:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01111ef:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111f4:	83 ec 08             	sub    $0x8,%esp
f01111f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01111fa:	50                   	push   %eax
f01111fb:	e8 4a 6a ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f0111200:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111203:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111208:	83 ec 08             	sub    $0x8,%esp
f011120b:	ff 75 f4             	pushl  -0xc(%ebp)
f011120e:	50                   	push   %eax
f011120f:	e8 31 49 00 00       	call   f0115b45 <CE>
f0111214:	83 c4 10             	add    $0x10,%esp
f0111217:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011121a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011121e:	74 17                	je     f0111237 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111220:	83 ec 04             	sub    $0x4,%esp
f0111223:	68 c4 89 13 f0       	push   $0xf01389c4
f0111228:	68 f6 00 00 00       	push   $0xf6
f011122d:	68 7e 86 13 f0       	push   $0xf013867e
f0111232:	e8 c4 ef fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111237:	83 ec 0c             	sub    $0xc,%esp
f011123a:	68 f0 89 13 f0       	push   $0xf01389f0
f011123f:	e8 3e fa fe ff       	call   f0100c82 <cprintf>
f0111244:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111247:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011124c:	c9                   	leave  
f011124d:	c3                   	ret    

f011124e <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011124e:	55                   	push   %ebp
f011124f:	89 e5                	mov    %esp,%ebp
f0111251:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111254:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011125b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111260:	83 ec 08             	sub    $0x8,%esp
f0111263:	ff 75 f4             	pushl  -0xc(%ebp)
f0111266:	50                   	push   %eax
f0111267:	e8 de 69 ff ff       	call   f0107c4a <pt_clear_page_table_entry>
f011126c:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011126f:	83 ec 04             	sub    $0x4,%esp
f0111272:	68 3c 8a 13 f0       	push   $0xf0138a3c
f0111277:	68 01 01 00 00       	push   $0x101
f011127c:	68 7e 86 13 f0       	push   $0xf013867e
f0111281:	e8 75 ef fe ff       	call   f01001fb <_panic>

f0111286 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111286:	55                   	push   %ebp
f0111287:	89 e5                	mov    %esp,%ebp
f0111289:	57                   	push   %edi
f011128a:	56                   	push   %esi
f011128b:	53                   	push   %ebx
f011128c:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111292:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111299:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f01112a0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01112a5:	83 ec 0c             	sub    $0xc,%esp
f01112a8:	50                   	push   %eax
f01112a9:	e8 79 49 00 00       	call   f0115c27 <ClearUserSpace>
f01112ae:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f01112b1:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f01112b8:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01112bd:	83 ec 08             	sub    $0x8,%esp
f01112c0:	ff 75 dc             	pushl  -0x24(%ebp)
f01112c3:	50                   	push   %eax
f01112c4:	e8 ed 69 ff ff       	call   f0107cb6 <virtual_to_physical>
f01112c9:	83 c4 10             	add    $0x10,%esp
f01112cc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f01112cf:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f01112d3:	74 17                	je     f01112ec <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f01112d5:	83 ec 04             	sub    $0x4,%esp
f01112d8:	68 d4 8a 13 f0       	push   $0xf0138ad4
f01112dd:	68 16 01 00 00       	push   $0x116
f01112e2:	68 7e 86 13 f0       	push   $0xf013867e
f01112e7:	e8 0f ef fe ff       	call   f01001fb <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f01112ec:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01112f3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01112f8:	83 ec 08             	sub    $0x8,%esp
f01112fb:	ff 75 dc             	pushl  -0x24(%ebp)
f01112fe:	50                   	push   %eax
f01112ff:	e8 b2 69 ff ff       	call   f0107cb6 <virtual_to_physical>
f0111304:	83 c4 10             	add    $0x10,%esp
f0111307:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011130a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011130f:	83 ec 08             	sub    $0x8,%esp
f0111312:	ff 75 dc             	pushl  -0x24(%ebp)
f0111315:	50                   	push   %eax
f0111316:	e8 0b 48 00 00       	call   f0115b26 <CA>
f011131b:	83 c4 10             	add    $0x10,%esp
f011131e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111321:	74 17                	je     f011133a <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111323:	83 ec 04             	sub    $0x4,%esp
f0111326:	68 0c 8b 13 f0       	push   $0xf0138b0c
f011132b:	68 1f 01 00 00       	push   $0x11f
f0111330:	68 7e 86 13 f0       	push   $0xf013867e
f0111335:	e8 c1 ee fe ff       	call   f01001fb <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f011133a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111340:	bb d8 8c 13 f0       	mov    $0xf0138cd8,%ebx
f0111345:	ba 0d 00 00 00       	mov    $0xd,%edx
f011134a:	89 c7                	mov    %eax,%edi
f011134c:	89 de                	mov    %ebx,%esi
f011134e:	89 d1                	mov    %edx,%ecx
f0111350:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111352:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111355:	b9 57 00 00 00       	mov    $0x57,%ecx
f011135a:	b0 00                	mov    $0x0,%al
f011135c:	89 d7                	mov    %edx,%edi
f011135e:	f3 aa                	rep stos %al,%es:(%edi)
f0111360:	83 ec 0c             	sub    $0xc,%esp
f0111363:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111369:	50                   	push   %eax
f011136a:	e8 75 f9 fe ff       	call   f0100ce4 <execute_command>
f011136f:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111372:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111379:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011137e:	83 ec 08             	sub    $0x8,%esp
f0111381:	ff 75 dc             	pushl  -0x24(%ebp)
f0111384:	50                   	push   %eax
f0111385:	e8 2c 69 ff ff       	call   f0107cb6 <virtual_to_physical>
f011138a:	83 c4 10             	add    $0x10,%esp
f011138d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111390:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111395:	83 ec 08             	sub    $0x8,%esp
f0111398:	ff 75 dc             	pushl  -0x24(%ebp)
f011139b:	50                   	push   %eax
f011139c:	e8 85 47 00 00       	call   f0115b26 <CA>
f01113a1:	83 c4 10             	add    $0x10,%esp
f01113a4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01113a7:	74 17                	je     f01113c0 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f01113a9:	83 ec 04             	sub    $0x4,%esp
f01113ac:	68 44 8b 13 f0       	push   $0xf0138b44
f01113b1:	68 28 01 00 00       	push   $0x128
f01113b6:	68 7e 86 13 f0       	push   $0xf013867e
f01113bb:	e8 3b ee fe ff       	call   f01001fb <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f01113c0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01113c6:	bb 3c 8d 13 f0       	mov    $0xf0138d3c,%ebx
f01113cb:	ba 0d 00 00 00       	mov    $0xd,%edx
f01113d0:	89 c7                	mov    %eax,%edi
f01113d2:	89 de                	mov    %ebx,%esi
f01113d4:	89 d1                	mov    %edx,%ecx
f01113d6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01113d8:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f01113de:	b9 57 00 00 00       	mov    $0x57,%ecx
f01113e3:	b0 00                	mov    $0x0,%al
f01113e5:	89 d7                	mov    %edx,%edi
f01113e7:	f3 aa                	rep stos %al,%es:(%edi)
f01113e9:	83 ec 0c             	sub    $0xc,%esp
f01113ec:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01113f2:	50                   	push   %eax
f01113f3:	e8 ec f8 fe ff       	call   f0100ce4 <execute_command>
f01113f8:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f01113fb:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111402:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111407:	83 ec 08             	sub    $0x8,%esp
f011140a:	ff 75 dc             	pushl  -0x24(%ebp)
f011140d:	50                   	push   %eax
f011140e:	e8 a3 68 ff ff       	call   f0107cb6 <virtual_to_physical>
f0111413:	83 c4 10             	add    $0x10,%esp
f0111416:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111419:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011141e:	83 ec 08             	sub    $0x8,%esp
f0111421:	ff 75 dc             	pushl  -0x24(%ebp)
f0111424:	50                   	push   %eax
f0111425:	e8 fc 46 00 00       	call   f0115b26 <CA>
f011142a:	83 c4 10             	add    $0x10,%esp
f011142d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111430:	74 17                	je     f0111449 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111432:	83 ec 04             	sub    $0x4,%esp
f0111435:	68 7c 8b 13 f0       	push   $0xf0138b7c
f011143a:	68 31 01 00 00       	push   $0x131
f011143f:	68 7e 86 13 f0       	push   $0xf013867e
f0111444:	e8 b2 ed fe ff       	call   f01001fb <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111449:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f011144f:	bb a0 8d 13 f0       	mov    $0xf0138da0,%ebx
f0111454:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111459:	89 c7                	mov    %eax,%edi
f011145b:	89 de                	mov    %ebx,%esi
f011145d:	89 d1                	mov    %edx,%ecx
f011145f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111461:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111467:	b9 57 00 00 00       	mov    $0x57,%ecx
f011146c:	b0 00                	mov    $0x0,%al
f011146e:	89 d7                	mov    %edx,%edi
f0111470:	f3 aa                	rep stos %al,%es:(%edi)
f0111472:	83 ec 0c             	sub    $0xc,%esp
f0111475:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f011147b:	50                   	push   %eax
f011147c:	e8 63 f8 fe ff       	call   f0100ce4 <execute_command>
f0111481:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111484:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011148b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111490:	83 ec 08             	sub    $0x8,%esp
f0111493:	ff 75 dc             	pushl  -0x24(%ebp)
f0111496:	50                   	push   %eax
f0111497:	e8 1a 68 ff ff       	call   f0107cb6 <virtual_to_physical>
f011149c:	83 c4 10             	add    $0x10,%esp
f011149f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01114a2:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01114a7:	83 ec 08             	sub    $0x8,%esp
f01114aa:	ff 75 dc             	pushl  -0x24(%ebp)
f01114ad:	50                   	push   %eax
f01114ae:	e8 73 46 00 00       	call   f0115b26 <CA>
f01114b3:	83 c4 10             	add    $0x10,%esp
f01114b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01114b9:	74 17                	je     f01114d2 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f01114bb:	83 ec 04             	sub    $0x4,%esp
f01114be:	68 b4 8b 13 f0       	push   $0xf0138bb4
f01114c3:	68 3a 01 00 00       	push   $0x13a
f01114c8:	68 7e 86 13 f0       	push   $0xf013867e
f01114cd:	e8 29 ed fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001000;
f01114d2:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01114d9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01114de:	83 ec 08             	sub    $0x8,%esp
f01114e1:	ff 75 dc             	pushl  -0x24(%ebp)
f01114e4:	50                   	push   %eax
f01114e5:	e8 cc 67 ff ff       	call   f0107cb6 <virtual_to_physical>
f01114ea:	83 c4 10             	add    $0x10,%esp
f01114ed:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01114f0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01114f5:	83 ec 08             	sub    $0x8,%esp
f01114f8:	ff 75 dc             	pushl  -0x24(%ebp)
f01114fb:	50                   	push   %eax
f01114fc:	e8 25 46 00 00       	call   f0115b26 <CA>
f0111501:	83 c4 10             	add    $0x10,%esp
f0111504:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111507:	74 17                	je     f0111520 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111509:	83 ec 04             	sub    $0x4,%esp
f011150c:	68 ec 8b 13 f0       	push   $0xf0138bec
f0111511:	68 42 01 00 00       	push   $0x142
f0111516:	68 7e 86 13 f0       	push   $0xf013867e
f011151b:	e8 db ec fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001005;
f0111520:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111527:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011152c:	83 ec 08             	sub    $0x8,%esp
f011152f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111532:	50                   	push   %eax
f0111533:	e8 7e 67 ff ff       	call   f0107cb6 <virtual_to_physical>
f0111538:	83 c4 10             	add    $0x10,%esp
f011153b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011153e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111543:	83 ec 08             	sub    $0x8,%esp
f0111546:	ff 75 dc             	pushl  -0x24(%ebp)
f0111549:	50                   	push   %eax
f011154a:	e8 d7 45 00 00       	call   f0115b26 <CA>
f011154f:	83 c4 10             	add    $0x10,%esp
f0111552:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111555:	74 17                	je     f011156e <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111557:	83 ec 04             	sub    $0x4,%esp
f011155a:	68 24 8c 13 f0       	push   $0xf0138c24
f011155f:	68 4a 01 00 00       	push   $0x14a
f0111564:	68 7e 86 13 f0       	push   $0xf013867e
f0111569:	e8 8d ec fe ff       	call   f01001fb <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f011156e:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111574:	bb 04 8e 13 f0       	mov    $0xf0138e04,%ebx
f0111579:	ba 0e 00 00 00       	mov    $0xe,%edx
f011157e:	89 c7                	mov    %eax,%edi
f0111580:	89 de                	mov    %ebx,%esi
f0111582:	89 d1                	mov    %edx,%ecx
f0111584:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111586:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f011158c:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111591:	b0 00                	mov    $0x0,%al
f0111593:	89 d7                	mov    %edx,%edi
f0111595:	f3 aa                	rep stos %al,%es:(%edi)
f0111597:	83 ec 0c             	sub    $0xc,%esp
f011159a:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01115a0:	50                   	push   %eax
f01115a1:	e8 3e f7 fe ff       	call   f0100ce4 <execute_command>
f01115a6:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f01115a9:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01115b0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01115b5:	83 ec 08             	sub    $0x8,%esp
f01115b8:	ff 75 dc             	pushl  -0x24(%ebp)
f01115bb:	50                   	push   %eax
f01115bc:	e8 f5 66 ff ff       	call   f0107cb6 <virtual_to_physical>
f01115c1:	83 c4 10             	add    $0x10,%esp
f01115c4:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01115c7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01115cc:	83 ec 08             	sub    $0x8,%esp
f01115cf:	ff 75 dc             	pushl  -0x24(%ebp)
f01115d2:	50                   	push   %eax
f01115d3:	e8 4e 45 00 00       	call   f0115b26 <CA>
f01115d8:	83 c4 10             	add    $0x10,%esp
f01115db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01115de:	74 17                	je     f01115f7 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f01115e0:	83 ec 04             	sub    $0x4,%esp
f01115e3:	68 5c 8c 13 f0       	push   $0xf0138c5c
f01115e8:	68 53 01 00 00       	push   $0x153
f01115ed:	68 7e 86 13 f0       	push   $0xf013867e
f01115f2:	e8 04 ec fe ff       	call   f01001fb <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f01115f7:	83 ec 0c             	sub    $0xc,%esp
f01115fa:	68 94 8c 13 f0       	push   $0xf0138c94
f01115ff:	e8 7e f6 fe ff       	call   f0100c82 <cprintf>
f0111604:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111607:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011160c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011160f:	5b                   	pop    %ebx
f0111610:	5e                   	pop    %esi
f0111611:	5f                   	pop    %edi
f0111612:	5d                   	pop    %ebp
f0111613:	c3                   	ret    

f0111614 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111614:	55                   	push   %ebp
f0111615:	89 e5                	mov    %esp,%ebp
f0111617:	57                   	push   %edi
f0111618:	56                   	push   %esi
f0111619:	53                   	push   %ebx
f011161a:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111620:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111626:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f011162b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111630:	89 c7                	mov    %eax,%edi
f0111632:	89 de                	mov    %ebx,%esi
f0111634:	89 d1                	mov    %edx,%ecx
f0111636:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111638:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011163e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111643:	b0 00                	mov    $0x0,%al
f0111645:	89 d7                	mov    %edx,%edi
f0111647:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111649:	6a 00                	push   $0x0
f011164b:	6a 0a                	push   $0xa
f011164d:	6a 14                	push   $0x14
f011164f:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111655:	50                   	push   %eax
f0111656:	e8 96 77 ff ff       	call   f0108df1 <env_create>
f011165b:	83 c4 10             	add    $0x10,%esp
f011165e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111661:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111664:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111667:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011166a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011166d:	8b 40 60             	mov    0x60(%eax),%eax
f0111670:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111673:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111676:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111679:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111680:	75 70 20 
f0111683:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f011168a:	00 00 00 
f011168d:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111693:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111698:	b8 00 00 00 00       	mov    $0x0,%eax
f011169d:	89 d7                	mov    %edx,%edi
f011169f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01116a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01116a4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01116a7:	83 ec 08             	sub    $0x8,%esp
f01116aa:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01116b0:	52                   	push   %edx
f01116b1:	50                   	push   %eax
f01116b2:	e8 6f fb 01 00       	call   f0131226 <ltostr>
f01116b7:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01116ba:	83 ec 04             	sub    $0x4,%esp
f01116bd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01116c3:	50                   	push   %eax
f01116c4:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01116ca:	50                   	push   %eax
f01116cb:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01116d1:	50                   	push   %eax
f01116d2:	e8 47 fc 01 00       	call   f013131e <strcconcat>
f01116d7:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01116da:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01116e1:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01116e8:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01116ef:	83 ec 0c             	sub    $0xc,%esp
f01116f2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116f5:	e8 2d 45 00 00       	call   f0115c27 <ClearUserSpace>
f01116fa:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01116fd:	83 ec 04             	sub    $0x4,%esp
f0111700:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111706:	50                   	push   %eax
f0111707:	68 68 8e 13 f0       	push   $0xf0138e68
f011170c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111712:	50                   	push   %eax
f0111713:	e8 06 fc 01 00       	call   f013131e <strcconcat>
f0111718:	83 c4 10             	add    $0x10,%esp
f011171b:	83 ec 0c             	sub    $0xc,%esp
f011171e:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111724:	50                   	push   %eax
f0111725:	e8 ba f5 fe ff       	call   f0100ce4 <execute_command>
f011172a:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f011172d:	83 ec 04             	sub    $0x4,%esp
f0111730:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111736:	50                   	push   %eax
f0111737:	68 73 8e 13 f0       	push   $0xf0138e73
f011173c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111742:	50                   	push   %eax
f0111743:	e8 d6 fb 01 00       	call   f013131e <strcconcat>
f0111748:	83 c4 10             	add    $0x10,%esp
f011174b:	83 ec 0c             	sub    $0xc,%esp
f011174e:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111754:	50                   	push   %eax
f0111755:	e8 8a f5 fe ff       	call   f0100ce4 <execute_command>
f011175a:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f011175d:	83 ec 04             	sub    $0x4,%esp
f0111760:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111766:	50                   	push   %eax
f0111767:	68 7e 8e 13 f0       	push   $0xf0138e7e
f011176c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111772:	50                   	push   %eax
f0111773:	e8 a6 fb 01 00       	call   f013131e <strcconcat>
f0111778:	83 c4 10             	add    $0x10,%esp
f011177b:	83 ec 0c             	sub    $0xc,%esp
f011177e:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111784:	50                   	push   %eax
f0111785:	e8 5a f5 fe ff       	call   f0100ce4 <execute_command>
f011178a:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f011178d:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111794:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111797:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011179a:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01117a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01117a4:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01117a7:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01117ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01117b1:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01117b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01117b7:	83 ec 08             	sub    $0x8,%esp
f01117ba:	50                   	push   %eax
f01117bb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117be:	e8 45 44 00 00       	call   f0115c08 <GP>
f01117c3:	83 c4 10             	add    $0x10,%esp
f01117c6:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01117c9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01117d0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01117d7:	e8 75 b2 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01117dc:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01117df:	83 ec 0c             	sub    $0xc,%esp
f01117e2:	68 8c 8e 13 f0       	push   $0xf0138e8c
f01117e7:	e8 96 f4 fe ff       	call   f0100c82 <cprintf>
f01117ec:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01117ef:	6a 03                	push   $0x3
f01117f1:	68 00 00 90 02       	push   $0x2900000
f01117f6:	68 00 00 80 02       	push   $0x2800000
f01117fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117fe:	e8 db 6e ff ff       	call   f01086de <cut_paste_pages>
f0111803:	83 c4 10             	add    $0x10,%esp
f0111806:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111809:	e8 43 b2 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011180e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111811:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111818:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011181c:	75 08                	jne    f0111826 <test_cut_paste_pages+0x212>
f011181e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111821:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111824:	74 2b                	je     f0111851 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111826:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111829:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011182c:	83 ec 0c             	sub    $0xc,%esp
f011182f:	50                   	push   %eax
f0111830:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111833:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111838:	68 91 01 00 00       	push   $0x191
f011183d:	68 7e 86 13 f0       	push   $0xf013867e
f0111842:	e8 40 eb fe ff       	call   f0100387 <_warn>
f0111847:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011184a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111851:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111855:	74 04                	je     f011185b <test_cut_paste_pages+0x247>
f0111857:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011185b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111862:	83 ec 08             	sub    $0x8,%esp
f0111865:	6a 00                	push   $0x0
f0111867:	6a 01                	push   $0x1
f0111869:	6a 00                	push   $0x0
f011186b:	68 ff 0f 00 00       	push   $0xfff
f0111870:	ff 75 bc             	pushl  -0x44(%ebp)
f0111873:	6a 01                	push   $0x1
f0111875:	68 00 30 00 00       	push   $0x3000
f011187a:	68 00 00 90 02       	push   $0x2900000
f011187f:	68 00 00 80 02       	push   $0x2800000
f0111884:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111887:	e8 cf 43 00 00       	call   f0115c5b <CCP>
f011188c:	83 c4 30             	add    $0x30,%esp
f011188f:	83 f8 01             	cmp    $0x1,%eax
f0111892:	74 21                	je     f01118b5 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111894:	83 ec 04             	sub    $0x4,%esp
f0111897:	68 10 8f 13 f0       	push   $0xf0138f10
f011189c:	68 99 01 00 00       	push   $0x199
f01118a1:	68 7e 86 13 f0       	push   $0xf013867e
f01118a6:	e8 dc ea fe ff       	call   f0100387 <_warn>
f01118ab:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01118ae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01118b5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01118b9:	74 04                	je     f01118bf <test_cut_paste_pages+0x2ab>
f01118bb:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01118bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01118c6:	83 ec 04             	sub    $0x4,%esp
f01118c9:	6a 00                	push   $0x0
f01118cb:	68 00 00 90 02       	push   $0x2900000
f01118d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118d3:	e8 5f 41 00 00       	call   f0115a37 <CB>
f01118d8:	83 c4 10             	add    $0x10,%esp
f01118db:	85 c0                	test   %eax,%eax
f01118dd:	0f 84 f6 00 00 00    	je     f01119d9 <test_cut_paste_pages+0x3c5>
f01118e3:	83 ec 04             	sub    $0x4,%esp
f01118e6:	6a 00                	push   $0x0
f01118e8:	68 00 10 90 02       	push   $0x2901000
f01118ed:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118f0:	e8 42 41 00 00       	call   f0115a37 <CB>
f01118f5:	83 c4 10             	add    $0x10,%esp
f01118f8:	85 c0                	test   %eax,%eax
f01118fa:	0f 84 d9 00 00 00    	je     f01119d9 <test_cut_paste_pages+0x3c5>
f0111900:	83 ec 04             	sub    $0x4,%esp
f0111903:	6a 00                	push   $0x0
f0111905:	68 00 20 90 02       	push   $0x2902000
f011190a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011190d:	e8 25 41 00 00       	call   f0115a37 <CB>
f0111912:	83 c4 10             	add    $0x10,%esp
f0111915:	85 c0                	test   %eax,%eax
f0111917:	0f 84 bc 00 00 00    	je     f01119d9 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011191d:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111924:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f011192b:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0111932:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111935:	8a 00                	mov    (%eax),%al
f0111937:	3c 61                	cmp    $0x61,%al
f0111939:	75 12                	jne    f011194d <test_cut_paste_pages+0x339>
f011193b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011193e:	8a 00                	mov    (%eax),%al
f0111940:	3c 62                	cmp    $0x62,%al
f0111942:	75 09                	jne    f011194d <test_cut_paste_pages+0x339>
f0111944:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111947:	8a 00                	mov    (%eax),%al
f0111949:	3c 63                	cmp    $0x63,%al
f011194b:	74 21                	je     f011196e <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011194d:	83 ec 04             	sub    $0x4,%esp
f0111950:	68 5c 8f 13 f0       	push   $0xf0138f5c
f0111955:	68 a6 01 00 00       	push   $0x1a6
f011195a:	68 7e 86 13 f0       	push   $0xf013867e
f011195f:	e8 23 ea fe ff       	call   f0100387 <_warn>
f0111964:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111967:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011196e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111972:	74 04                	je     f0111978 <test_cut_paste_pages+0x364>
f0111974:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111978:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011197f:	83 ec 04             	sub    $0x4,%esp
f0111982:	6a 01                	push   $0x1
f0111984:	68 00 10 90 02       	push   $0x2901000
f0111989:	ff 75 d4             	pushl  -0x2c(%ebp)
f011198c:	e8 a6 40 00 00       	call   f0115a37 <CB>
f0111991:	83 c4 10             	add    $0x10,%esp
f0111994:	85 c0                	test   %eax,%eax
f0111996:	74 41                	je     f01119d9 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111998:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011199b:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f011199e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01119a1:	8a 00                	mov    (%eax),%al
f01119a3:	3c 79                	cmp    $0x79,%al
f01119a5:	74 21                	je     f01119c8 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01119a7:	83 ec 04             	sub    $0x4,%esp
f01119aa:	68 5c 8f 13 f0       	push   $0xf0138f5c
f01119af:	68 b1 01 00 00       	push   $0x1b1
f01119b4:	68 7e 86 13 f0       	push   $0xf013867e
f01119b9:	e8 c9 e9 fe ff       	call   f0100387 <_warn>
f01119be:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01119c1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01119c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01119cc:	74 04                	je     f01119d2 <test_cut_paste_pages+0x3be>
f01119ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01119d2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01119d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01119dc:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01119df:	6a 02                	push   $0x2
f01119e1:	68 00 f0 bf 02       	push   $0x2bff000
f01119e6:	68 00 10 90 02       	push   $0x2901000
f01119eb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01119ee:	e8 eb 6c ff ff       	call   f01086de <cut_paste_pages>
f01119f3:	83 c4 10             	add    $0x10,%esp
f01119f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01119f9:	e8 53 b0 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01119fe:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111a01:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111a05:	75 0b                	jne    f0111a12 <test_cut_paste_pages+0x3fe>
f0111a07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111a0a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111a0d:	83 f8 01             	cmp    $0x1,%eax
f0111a10:	74 2b                	je     f0111a3d <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111a12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111a15:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111a18:	83 ec 0c             	sub    $0xc,%esp
f0111a1b:	50                   	push   %eax
f0111a1c:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111a1f:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111a24:	68 c2 01 00 00       	push   $0x1c2
f0111a29:	68 7e 86 13 f0       	push   $0xf013867e
f0111a2e:	e8 54 e9 fe ff       	call   f0100387 <_warn>
f0111a33:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111a36:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111a3d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111a41:	74 04                	je     f0111a47 <test_cut_paste_pages+0x433>
f0111a43:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111a47:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111a4e:	83 ec 08             	sub    $0x8,%esp
f0111a51:	6a 00                	push   $0x0
f0111a53:	6a 01                	push   $0x1
f0111a55:	6a 00                	push   $0x0
f0111a57:	68 ff 0f 00 00       	push   $0xfff
f0111a5c:	ff 75 bc             	pushl  -0x44(%ebp)
f0111a5f:	6a 01                	push   $0x1
f0111a61:	68 00 20 00 00       	push   $0x2000
f0111a66:	68 00 f0 bf 02       	push   $0x2bff000
f0111a6b:	68 00 10 90 02       	push   $0x2901000
f0111a70:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a73:	e8 e3 41 00 00       	call   f0115c5b <CCP>
f0111a78:	83 c4 30             	add    $0x30,%esp
f0111a7b:	83 f8 01             	cmp    $0x1,%eax
f0111a7e:	74 21                	je     f0111aa1 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111a80:	83 ec 04             	sub    $0x4,%esp
f0111a83:	68 10 8f 13 f0       	push   $0xf0138f10
f0111a88:	68 ca 01 00 00       	push   $0x1ca
f0111a8d:	68 7e 86 13 f0       	push   $0xf013867e
f0111a92:	e8 f0 e8 fe ff       	call   f0100387 <_warn>
f0111a97:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111a9a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111aa1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111aa5:	74 04                	je     f0111aab <test_cut_paste_pages+0x497>
f0111aa7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111aab:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111ab2:	83 ec 04             	sub    $0x4,%esp
f0111ab5:	6a 00                	push   $0x0
f0111ab7:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111abc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111abf:	e8 73 3f 00 00       	call   f0115a37 <CB>
f0111ac4:	83 c4 10             	add    $0x10,%esp
f0111ac7:	85 c0                	test   %eax,%eax
f0111ac9:	74 6b                	je     f0111b36 <test_cut_paste_pages+0x522>
f0111acb:	83 ec 04             	sub    $0x4,%esp
f0111ace:	6a 00                	push   $0x0
f0111ad0:	68 ff 0f c0 02       	push   $0x2c00fff
f0111ad5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ad8:	e8 5a 3f 00 00       	call   f0115a37 <CB>
f0111add:	83 c4 10             	add    $0x10,%esp
f0111ae0:	85 c0                	test   %eax,%eax
f0111ae2:	74 52                	je     f0111b36 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111ae4:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111aeb:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111af2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111af5:	8a 00                	mov    (%eax),%al
f0111af7:	3c 79                	cmp    $0x79,%al
f0111af9:	75 09                	jne    f0111b04 <test_cut_paste_pages+0x4f0>
f0111afb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111afe:	8a 00                	mov    (%eax),%al
f0111b00:	3c 63                	cmp    $0x63,%al
f0111b02:	74 21                	je     f0111b25 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111b04:	83 ec 04             	sub    $0x4,%esp
f0111b07:	68 5c 8f 13 f0       	push   $0xf0138f5c
f0111b0c:	68 d6 01 00 00       	push   $0x1d6
f0111b11:	68 7e 86 13 f0       	push   $0xf013867e
f0111b16:	e8 6c e8 fe ff       	call   f0100387 <_warn>
f0111b1b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111b1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111b25:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b29:	74 04                	je     f0111b2f <test_cut_paste_pages+0x51b>
f0111b2b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111b2f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0111b36:	83 ec 0c             	sub    $0xc,%esp
f0111b39:	68 95 8f 13 f0       	push   $0xf0138f95
f0111b3e:	e8 3f f1 fe ff       	call   f0100c82 <cprintf>
f0111b43:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0111b46:	83 ec 0c             	sub    $0xc,%esp
f0111b49:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0111b4e:	e8 2f f1 fe ff       	call   f0100c82 <cprintf>
f0111b53:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111b56:	83 ec 04             	sub    $0x4,%esp
f0111b59:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111b5f:	50                   	push   %eax
f0111b60:	68 cd 8f 13 f0       	push   $0xf0138fcd
f0111b65:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b6b:	50                   	push   %eax
f0111b6c:	e8 ad f7 01 00       	call   f013131e <strcconcat>
f0111b71:	83 c4 10             	add    $0x10,%esp
f0111b74:	83 ec 0c             	sub    $0xc,%esp
f0111b77:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111b7d:	50                   	push   %eax
f0111b7e:	e8 61 f1 fe ff       	call   f0100ce4 <execute_command>
f0111b83:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111b86:	83 ec 04             	sub    $0x4,%esp
f0111b89:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111b8f:	50                   	push   %eax
f0111b90:	68 d8 8f 13 f0       	push   $0xf0138fd8
f0111b95:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b9b:	50                   	push   %eax
f0111b9c:	e8 7d f7 01 00       	call   f013131e <strcconcat>
f0111ba1:	83 c4 10             	add    $0x10,%esp
f0111ba4:	83 ec 0c             	sub    $0xc,%esp
f0111ba7:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111bad:	50                   	push   %eax
f0111bae:	e8 31 f1 fe ff       	call   f0100ce4 <execute_command>
f0111bb3:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111bb6:	83 ec 04             	sub    $0x4,%esp
f0111bb9:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111bbf:	50                   	push   %eax
f0111bc0:	68 e3 8f 13 f0       	push   $0xf0138fe3
f0111bc5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111bcb:	50                   	push   %eax
f0111bcc:	e8 4d f7 01 00       	call   f013131e <strcconcat>
f0111bd1:	83 c4 10             	add    $0x10,%esp
f0111bd4:	83 ec 0c             	sub    $0xc,%esp
f0111bd7:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111bdd:	50                   	push   %eax
f0111bde:	e8 01 f1 fe ff       	call   f0100ce4 <execute_command>
f0111be3:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111be6:	83 ec 04             	sub    $0x4,%esp
f0111be9:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111bef:	50                   	push   %eax
f0111bf0:	68 ee 8f 13 f0       	push   $0xf0138fee
f0111bf5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111bfb:	50                   	push   %eax
f0111bfc:	e8 1d f7 01 00       	call   f013131e <strcconcat>
f0111c01:	83 c4 10             	add    $0x10,%esp
f0111c04:	83 ec 0c             	sub    $0xc,%esp
f0111c07:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111c0d:	50                   	push   %eax
f0111c0e:	e8 d1 f0 fe ff       	call   f0100ce4 <execute_command>
f0111c13:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111c16:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111c1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c20:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111c23:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111c2a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c2d:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111c30:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111c37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c3a:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111c3d:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111c44:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c47:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111c4a:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111c51:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c54:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111c57:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111c5e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c61:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111c64:	83 ec 08             	sub    $0x8,%esp
f0111c67:	68 00 00 c0 01       	push   $0x1c00000
f0111c6c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c6f:	e8 94 3f 00 00       	call   f0115c08 <GP>
f0111c74:	83 c4 10             	add    $0x10,%esp
f0111c77:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111c7a:	83 ec 08             	sub    $0x8,%esp
f0111c7d:	68 00 00 40 01       	push   $0x1400000
f0111c82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c85:	e8 7e 3f 00 00       	call   f0115c08 <GP>
f0111c8a:	83 c4 10             	add    $0x10,%esp
f0111c8d:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111c90:	e8 bc ad ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0111c95:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111c98:	6a 01                	push   $0x1
f0111c9a:	68 00 00 40 01       	push   $0x1400000
f0111c9f:	68 00 00 c0 01       	push   $0x1c00000
f0111ca4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ca7:	e8 32 6a ff ff       	call   f01086de <cut_paste_pages>
f0111cac:	83 c4 10             	add    $0x10,%esp
f0111caf:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111cb2:	e8 9a ad ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0111cb7:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111cba:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111cbe:	75 08                	jne    f0111cc8 <test_cut_paste_pages+0x6b4>
f0111cc0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cc3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111cc6:	74 2b                	je     f0111cf3 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111cc8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111ccb:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111cce:	83 ec 0c             	sub    $0xc,%esp
f0111cd1:	50                   	push   %eax
f0111cd2:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111cd5:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0111cda:	68 f9 01 00 00       	push   $0x1f9
f0111cdf:	68 7e 86 13 f0       	push   $0xf013867e
f0111ce4:	e8 9e e6 fe ff       	call   f0100387 <_warn>
f0111ce9:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111cec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111cf3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111cf7:	74 04                	je     f0111cfd <test_cut_paste_pages+0x6e9>
f0111cf9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111cfd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111d04:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0111d0b:	83 ec 08             	sub    $0x8,%esp
f0111d0e:	6a 00                	push   $0x0
f0111d10:	68 ff 0f 00 00       	push   $0xfff
f0111d15:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111d18:	68 ff 0f 00 00       	push   $0xfff
f0111d1d:	ff 75 a0             	pushl  -0x60(%ebp)
f0111d20:	6a 01                	push   $0x1
f0111d22:	68 00 10 00 00       	push   $0x1000
f0111d27:	68 00 00 40 01       	push   $0x1400000
f0111d2c:	68 00 00 c0 01       	push   $0x1c00000
f0111d31:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d34:	e8 22 3f 00 00       	call   f0115c5b <CCP>
f0111d39:	83 c4 30             	add    $0x30,%esp
f0111d3c:	83 f8 01             	cmp    $0x1,%eax
f0111d3f:	74 28                	je     f0111d69 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111d41:	83 ec 04             	sub    $0x4,%esp
f0111d44:	68 10 8f 13 f0       	push   $0xf0138f10
f0111d49:	68 02 02 00 00       	push   $0x202
f0111d4e:	68 7e 86 13 f0       	push   $0xf013867e
f0111d53:	e8 2f e6 fe ff       	call   f0100387 <_warn>
f0111d58:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111d5b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111d62:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111d69:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d6d:	74 04                	je     f0111d73 <test_cut_paste_pages+0x75f>
f0111d6f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111d73:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111d7a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111d7e:	0f 84 92 00 00 00    	je     f0111e16 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111d84:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111d8b:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111d92:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111d99:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111da0:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111da7:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111dae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111db1:	8a 00                	mov    (%eax),%al
f0111db3:	3c 61                	cmp    $0x61,%al
f0111db5:	75 2d                	jne    f0111de4 <test_cut_paste_pages+0x7d0>
f0111db7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111dba:	8a 00                	mov    (%eax),%al
f0111dbc:	3c 78                	cmp    $0x78,%al
f0111dbe:	75 24                	jne    f0111de4 <test_cut_paste_pages+0x7d0>
f0111dc0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111dc3:	8a 00                	mov    (%eax),%al
f0111dc5:	3c 62                	cmp    $0x62,%al
f0111dc7:	75 1b                	jne    f0111de4 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111dc9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111dcc:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111dce:	3c 79                	cmp    $0x79,%al
f0111dd0:	75 12                	jne    f0111de4 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111dd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111dd5:	8a 00                	mov    (%eax),%al
f0111dd7:	3c 63                	cmp    $0x63,%al
f0111dd9:	75 09                	jne    f0111de4 <test_cut_paste_pages+0x7d0>
f0111ddb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111dde:	8a 00                	mov    (%eax),%al
f0111de0:	3c 7a                	cmp    $0x7a,%al
f0111de2:	74 21                	je     f0111e05 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111de4:	83 ec 04             	sub    $0x4,%esp
f0111de7:	68 5c 8f 13 f0       	push   $0xf0138f5c
f0111dec:	68 14 02 00 00       	push   $0x214
f0111df1:	68 7e 86 13 f0       	push   $0xf013867e
f0111df6:	e8 8c e5 fe ff       	call   f0100387 <_warn>
f0111dfb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111dfe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111e05:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e09:	74 04                	je     f0111e0f <test_cut_paste_pages+0x7fb>
f0111e0b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e0f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0111e16:	e8 36 ac ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0111e1b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111e1e:	6a 03                	push   $0x3
f0111e20:	68 00 f0 bf 01       	push   $0x1bff000
f0111e25:	68 00 00 40 01       	push   $0x1400000
f0111e2a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e2d:	e8 ac 68 ff ff       	call   f01086de <cut_paste_pages>
f0111e32:	83 c4 10             	add    $0x10,%esp
f0111e35:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111e38:	e8 14 ac ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0111e3d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111e40:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111e44:	75 08                	jne    f0111e4e <test_cut_paste_pages+0x83a>
f0111e46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e49:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111e4c:	74 2b                	je     f0111e79 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111e4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e51:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111e54:	83 ec 0c             	sub    $0xc,%esp
f0111e57:	50                   	push   %eax
f0111e58:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111e5b:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0111e60:	68 23 02 00 00       	push   $0x223
f0111e65:	68 7e 86 13 f0       	push   $0xf013867e
f0111e6a:	e8 18 e5 fe ff       	call   f0100387 <_warn>
f0111e6f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111e72:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111e79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e7d:	74 04                	je     f0111e83 <test_cut_paste_pages+0x86f>
f0111e7f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111e83:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111e8a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111e91:	83 ec 04             	sub    $0x4,%esp
f0111e94:	6a 00                	push   $0x0
f0111e96:	68 00 00 40 01       	push   $0x1400000
f0111e9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e9e:	e8 94 3b 00 00       	call   f0115a37 <CB>
f0111ea3:	83 c4 10             	add    $0x10,%esp
f0111ea6:	83 f8 01             	cmp    $0x1,%eax
f0111ea9:	0f 85 80 00 00 00    	jne    f0111f2f <test_cut_paste_pages+0x91b>
f0111eaf:	83 ec 04             	sub    $0x4,%esp
f0111eb2:	6a 00                	push   $0x0
f0111eb4:	68 00 10 40 01       	push   $0x1401000
f0111eb9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ebc:	e8 76 3b 00 00       	call   f0115a37 <CB>
f0111ec1:	83 c4 10             	add    $0x10,%esp
f0111ec4:	83 f8 01             	cmp    $0x1,%eax
f0111ec7:	75 66                	jne    f0111f2f <test_cut_paste_pages+0x91b>
f0111ec9:	83 ec 04             	sub    $0x4,%esp
f0111ecc:	6a 00                	push   $0x0
f0111ece:	68 00 20 40 01       	push   $0x1402000
f0111ed3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ed6:	e8 5c 3b 00 00       	call   f0115a37 <CB>
f0111edb:	83 c4 10             	add    $0x10,%esp
f0111ede:	83 f8 01             	cmp    $0x1,%eax
f0111ee1:	75 4c                	jne    f0111f2f <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111ee3:	83 ec 04             	sub    $0x4,%esp
f0111ee6:	6a 00                	push   $0x0
f0111ee8:	68 00 f0 bf 01       	push   $0x1bff000
f0111eed:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ef0:	e8 42 3b 00 00       	call   f0115a37 <CB>
f0111ef5:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111ef8:	85 c0                	test   %eax,%eax
f0111efa:	75 33                	jne    f0111f2f <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111efc:	83 ec 04             	sub    $0x4,%esp
f0111eff:	6a 00                	push   $0x0
f0111f01:	68 00 00 c0 01       	push   $0x1c00000
f0111f06:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f09:	e8 29 3b 00 00       	call   f0115a37 <CB>
f0111f0e:	83 c4 10             	add    $0x10,%esp
f0111f11:	83 f8 01             	cmp    $0x1,%eax
f0111f14:	75 19                	jne    f0111f2f <test_cut_paste_pages+0x91b>
f0111f16:	83 ec 04             	sub    $0x4,%esp
f0111f19:	6a 00                	push   $0x0
f0111f1b:	68 00 10 c0 01       	push   $0x1c01000
f0111f20:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f23:	e8 0f 3b 00 00       	call   f0115a37 <CB>
f0111f28:	83 c4 10             	add    $0x10,%esp
f0111f2b:	85 c0                	test   %eax,%eax
f0111f2d:	74 28                	je     f0111f57 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0111f2f:	83 ec 04             	sub    $0x4,%esp
f0111f32:	68 5c 90 13 f0       	push   $0xf013905c
f0111f37:	68 2c 02 00 00       	push   $0x22c
f0111f3c:	68 7e 86 13 f0       	push   $0xf013867e
f0111f41:	e8 41 e4 fe ff       	call   f0100387 <_warn>
f0111f46:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111f49:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111f50:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111f57:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f5b:	74 04                	je     f0111f61 <test_cut_paste_pages+0x94d>
f0111f5d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111f61:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111f68:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111f6c:	0f 84 99 00 00 00    	je     f011200b <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111f72:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111f79:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111f80:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111f87:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111f8e:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111f95:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111f9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111f9f:	8a 00                	mov    (%eax),%al
f0111fa1:	3c 61                	cmp    $0x61,%al
f0111fa3:	75 2d                	jne    f0111fd2 <test_cut_paste_pages+0x9be>
f0111fa5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111fa8:	8a 00                	mov    (%eax),%al
f0111faa:	3c 78                	cmp    $0x78,%al
f0111fac:	75 24                	jne    f0111fd2 <test_cut_paste_pages+0x9be>
f0111fae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111fb1:	8a 00                	mov    (%eax),%al
f0111fb3:	3c 62                	cmp    $0x62,%al
f0111fb5:	75 1b                	jne    f0111fd2 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111fb7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111fba:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111fbc:	3c 79                	cmp    $0x79,%al
f0111fbe:	75 12                	jne    f0111fd2 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111fc0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111fc3:	8a 00                	mov    (%eax),%al
f0111fc5:	3c 63                	cmp    $0x63,%al
f0111fc7:	75 09                	jne    f0111fd2 <test_cut_paste_pages+0x9be>
f0111fc9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111fcc:	8a 00                	mov    (%eax),%al
f0111fce:	3c 7a                	cmp    $0x7a,%al
f0111fd0:	74 28                	je     f0111ffa <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111fd2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111fd9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111fe0:	83 ec 04             	sub    $0x4,%esp
f0111fe3:	68 5c 8f 13 f0       	push   $0xf0138f5c
f0111fe8:	68 40 02 00 00       	push   $0x240
f0111fed:	68 7e 86 13 f0       	push   $0xf013867e
f0111ff2:	e8 90 e3 fe ff       	call   f0100387 <_warn>
f0111ff7:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111ffa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ffe:	74 04                	je     f0112004 <test_cut_paste_pages+0x9f0>
f0112000:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112004:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011200b:	83 ec 0c             	sub    $0xc,%esp
f011200e:	68 95 90 13 f0       	push   $0xf0139095
f0112013:	e8 6a ec fe ff       	call   f0100c82 <cprintf>
f0112018:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f011201b:	83 ec 08             	sub    $0x8,%esp
f011201e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112021:	68 a4 90 13 f0       	push   $0xf01390a4
f0112026:	e8 57 ec fe ff       	call   f0100c82 <cprintf>
f011202b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011202e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112032:	75 10                	jne    f0112044 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112034:	83 ec 0c             	sub    $0xc,%esp
f0112037:	68 d8 90 13 f0       	push   $0xf01390d8
f011203c:	e8 41 ec fe ff       	call   f0100c82 <cprintf>
f0112041:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112044:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0112049:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011204c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011204f:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112052:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112057:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011205a:	5b                   	pop    %ebx
f011205b:	5e                   	pop    %esi
f011205c:	5f                   	pop    %edi
f011205d:	5d                   	pop    %ebp
f011205e:	c3                   	ret    

f011205f <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011205f:	55                   	push   %ebp
f0112060:	89 e5                	mov    %esp,%ebp
f0112062:	57                   	push   %edi
f0112063:	56                   	push   %esi
f0112064:	53                   	push   %ebx
f0112065:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011206b:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112071:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f0112076:	ba 0f 00 00 00       	mov    $0xf,%edx
f011207b:	89 c7                	mov    %eax,%edi
f011207d:	89 de                	mov    %ebx,%esi
f011207f:	89 d1                	mov    %edx,%ecx
f0112081:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112083:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112089:	b9 23 00 00 00       	mov    $0x23,%ecx
f011208e:	b0 00                	mov    $0x0,%al
f0112090:	89 d7                	mov    %edx,%edi
f0112092:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112094:	6a 00                	push   $0x0
f0112096:	6a 0a                	push   $0xa
f0112098:	6a 14                	push   $0x14
f011209a:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01120a0:	50                   	push   %eax
f01120a1:	e8 4b 6d ff ff       	call   f0108df1 <env_create>
f01120a6:	83 c4 10             	add    $0x10,%esp
f01120a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01120ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01120af:	8b 40 5c             	mov    0x5c(%eax),%eax
f01120b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01120b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01120b8:	8b 40 60             	mov    0x60(%eax),%eax
f01120bb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01120c1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01120c7:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01120ca:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01120d1:	75 70 20 
f01120d4:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f01120db:	00 00 00 
f01120de:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01120e4:	b9 03 00 00 00       	mov    $0x3,%ecx
f01120e9:	b8 00 00 00 00       	mov    $0x0,%eax
f01120ee:	89 d7                	mov    %edx,%edi
f01120f0:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01120f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01120f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01120f8:	83 ec 08             	sub    $0x8,%esp
f01120fb:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112101:	52                   	push   %edx
f0112102:	50                   	push   %eax
f0112103:	e8 1e f1 01 00       	call   f0131226 <ltostr>
f0112108:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011210b:	83 ec 04             	sub    $0x4,%esp
f011210e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112114:	50                   	push   %eax
f0112115:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f011211b:	50                   	push   %eax
f011211c:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112122:	50                   	push   %eax
f0112123:	e8 f6 f1 01 00       	call   f013131e <strcconcat>
f0112128:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f011212b:	83 ec 0c             	sub    $0xc,%esp
f011212e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112131:	e8 f1 3a 00 00       	call   f0115c27 <ClearUserSpace>
f0112136:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112139:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112140:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112147:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011214e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112155:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011215c:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112163:	83 ec 0c             	sub    $0xc,%esp
f0112166:	68 4c 91 13 f0       	push   $0xf013914c
f011216b:	e8 12 eb fe ff       	call   f0100c82 <cprintf>
f0112170:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112173:	83 ec 04             	sub    $0x4,%esp
f0112176:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011217c:	50                   	push   %eax
f011217d:	68 82 91 13 f0       	push   $0xf0139182
f0112182:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112188:	50                   	push   %eax
f0112189:	e8 90 f1 01 00       	call   f013131e <strcconcat>
f011218e:	83 c4 10             	add    $0x10,%esp
f0112191:	83 ec 0c             	sub    $0xc,%esp
f0112194:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011219a:	50                   	push   %eax
f011219b:	e8 44 eb fe ff       	call   f0100ce4 <execute_command>
f01121a0:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01121a3:	83 ec 04             	sub    $0x4,%esp
f01121a6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01121ac:	50                   	push   %eax
f01121ad:	68 87 91 13 f0       	push   $0xf0139187
f01121b2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121b8:	50                   	push   %eax
f01121b9:	e8 60 f1 01 00       	call   f013131e <strcconcat>
f01121be:	83 c4 10             	add    $0x10,%esp
f01121c1:	83 ec 0c             	sub    $0xc,%esp
f01121c4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01121ca:	50                   	push   %eax
f01121cb:	e8 14 eb fe ff       	call   f0100ce4 <execute_command>
f01121d0:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01121d3:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01121d9:	bb 8d 94 13 f0       	mov    $0xf013948d,%ebx
f01121de:	ba 0f 00 00 00       	mov    $0xf,%edx
f01121e3:	89 c7                	mov    %eax,%edi
f01121e5:	89 de                	mov    %ebx,%esi
f01121e7:	89 d1                	mov    %edx,%ecx
f01121e9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121eb:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01121f1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01121f6:	b0 00                	mov    $0x0,%al
f01121f8:	89 d7                	mov    %edx,%edi
f01121fa:	f3 aa                	rep stos %al,%es:(%edi)
f01121fc:	83 ec 0c             	sub    $0xc,%esp
f01121ff:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112205:	50                   	push   %eax
f0112206:	e8 d9 ea fe ff       	call   f0100ce4 <execute_command>
f011220b:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011220e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112214:	bb f1 94 13 f0       	mov    $0xf01394f1,%ebx
f0112219:	ba 0f 00 00 00       	mov    $0xf,%edx
f011221e:	89 c7                	mov    %eax,%edi
f0112220:	89 de                	mov    %ebx,%esi
f0112222:	89 d1                	mov    %edx,%ecx
f0112224:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112226:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011222c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112231:	b0 00                	mov    $0x0,%al
f0112233:	89 d7                	mov    %edx,%edi
f0112235:	f3 aa                	rep stos %al,%es:(%edi)
f0112237:	83 ec 0c             	sub    $0xc,%esp
f011223a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112240:	50                   	push   %eax
f0112241:	e8 9e ea fe ff       	call   f0100ce4 <execute_command>
f0112246:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112249:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011224f:	bb 55 95 13 f0       	mov    $0xf0139555,%ebx
f0112254:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112259:	89 c7                	mov    %eax,%edi
f011225b:	89 de                	mov    %ebx,%esi
f011225d:	89 d1                	mov    %edx,%ecx
f011225f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112261:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112267:	b9 55 00 00 00       	mov    $0x55,%ecx
f011226c:	b0 00                	mov    $0x0,%al
f011226e:	89 d7                	mov    %edx,%edi
f0112270:	f3 aa                	rep stos %al,%es:(%edi)
f0112272:	83 ec 0c             	sub    $0xc,%esp
f0112275:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011227b:	50                   	push   %eax
f011227c:	e8 63 ea fe ff       	call   f0100ce4 <execute_command>
f0112281:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112284:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011228a:	bb b9 95 13 f0       	mov    $0xf01395b9,%ebx
f011228f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112294:	89 c7                	mov    %eax,%edi
f0112296:	89 de                	mov    %ebx,%esi
f0112298:	89 d1                	mov    %edx,%ecx
f011229a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011229c:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01122a2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122a7:	b0 00                	mov    $0x0,%al
f01122a9:	89 d7                	mov    %edx,%edi
f01122ab:	f3 aa                	rep stos %al,%es:(%edi)
f01122ad:	83 ec 0c             	sub    $0xc,%esp
f01122b0:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01122b6:	50                   	push   %eax
f01122b7:	e8 28 ea fe ff       	call   f0100ce4 <execute_command>
f01122bc:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f01122bf:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01122c5:	bb 1d 96 13 f0       	mov    $0xf013961d,%ebx
f01122ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122cf:	89 c7                	mov    %eax,%edi
f01122d1:	89 de                	mov    %ebx,%esi
f01122d3:	89 d1                	mov    %edx,%ecx
f01122d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122d7:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01122dd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122e2:	b0 00                	mov    $0x0,%al
f01122e4:	89 d7                	mov    %edx,%edi
f01122e6:	f3 aa                	rep stos %al,%es:(%edi)
f01122e8:	83 ec 0c             	sub    $0xc,%esp
f01122eb:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01122f1:	50                   	push   %eax
f01122f2:	e8 ed e9 fe ff       	call   f0100ce4 <execute_command>
f01122f7:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f01122fa:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112300:	bb 81 96 13 f0       	mov    $0xf0139681,%ebx
f0112305:	ba 0f 00 00 00       	mov    $0xf,%edx
f011230a:	89 c7                	mov    %eax,%edi
f011230c:	89 de                	mov    %ebx,%esi
f011230e:	89 d1                	mov    %edx,%ecx
f0112310:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112312:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112318:	b9 55 00 00 00       	mov    $0x55,%ecx
f011231d:	b0 00                	mov    $0x0,%al
f011231f:	89 d7                	mov    %edx,%edi
f0112321:	f3 aa                	rep stos %al,%es:(%edi)
f0112323:	83 ec 0c             	sub    $0xc,%esp
f0112326:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011232c:	50                   	push   %eax
f011232d:	e8 b2 e9 fe ff       	call   f0100ce4 <execute_command>
f0112332:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112335:	83 ec 04             	sub    $0x4,%esp
f0112338:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011233e:	50                   	push   %eax
f011233f:	68 8f 91 13 f0       	push   $0xf013918f
f0112344:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011234a:	50                   	push   %eax
f011234b:	e8 ce ef 01 00       	call   f013131e <strcconcat>
f0112350:	83 c4 10             	add    $0x10,%esp
f0112353:	83 ec 0c             	sub    $0xc,%esp
f0112356:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011235c:	50                   	push   %eax
f011235d:	e8 82 e9 fe ff       	call   f0100ce4 <execute_command>
f0112362:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112365:	83 ec 04             	sub    $0x4,%esp
f0112368:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011236e:	50                   	push   %eax
f011236f:	68 99 91 13 f0       	push   $0xf0139199
f0112374:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011237a:	50                   	push   %eax
f011237b:	e8 9e ef 01 00       	call   f013131e <strcconcat>
f0112380:	83 c4 10             	add    $0x10,%esp
f0112383:	83 ec 0c             	sub    $0xc,%esp
f0112386:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011238c:	50                   	push   %eax
f011238d:	e8 52 e9 fe ff       	call   f0100ce4 <execute_command>
f0112392:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112395:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011239b:	bb e5 96 13 f0       	mov    $0xf01396e5,%ebx
f01123a0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01123a5:	89 c7                	mov    %eax,%edi
f01123a7:	89 de                	mov    %ebx,%esi
f01123a9:	89 d1                	mov    %edx,%ecx
f01123ab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01123ad:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01123b3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01123b8:	b0 00                	mov    $0x0,%al
f01123ba:	89 d7                	mov    %edx,%edi
f01123bc:	f3 aa                	rep stos %al,%es:(%edi)
f01123be:	83 ec 0c             	sub    $0xc,%esp
f01123c1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01123c7:	50                   	push   %eax
f01123c8:	e8 17 e9 fe ff       	call   f0100ce4 <execute_command>
f01123cd:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01123d0:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01123d6:	bb 49 97 13 f0       	mov    $0xf0139749,%ebx
f01123db:	ba 0f 00 00 00       	mov    $0xf,%edx
f01123e0:	89 c7                	mov    %eax,%edi
f01123e2:	89 de                	mov    %ebx,%esi
f01123e4:	89 d1                	mov    %edx,%ecx
f01123e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01123e8:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01123ee:	b9 55 00 00 00       	mov    $0x55,%ecx
f01123f3:	b0 00                	mov    $0x0,%al
f01123f5:	89 d7                	mov    %edx,%edi
f01123f7:	f3 aa                	rep stos %al,%es:(%edi)
f01123f9:	83 ec 0c             	sub    $0xc,%esp
f01123fc:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112402:	50                   	push   %eax
f0112403:	e8 dc e8 fe ff       	call   f0100ce4 <execute_command>
f0112408:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f011240b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112411:	bb ad 97 13 f0       	mov    $0xf01397ad,%ebx
f0112416:	ba 0f 00 00 00       	mov    $0xf,%edx
f011241b:	89 c7                	mov    %eax,%edi
f011241d:	89 de                	mov    %ebx,%esi
f011241f:	89 d1                	mov    %edx,%ecx
f0112421:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112423:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112429:	b9 55 00 00 00       	mov    $0x55,%ecx
f011242e:	b0 00                	mov    $0x0,%al
f0112430:	89 d7                	mov    %edx,%edi
f0112432:	f3 aa                	rep stos %al,%es:(%edi)
f0112434:	83 ec 0c             	sub    $0xc,%esp
f0112437:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011243d:	50                   	push   %eax
f011243e:	e8 a1 e8 fe ff       	call   f0100ce4 <execute_command>
f0112443:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112446:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011244d:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112454:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f011245b:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112462:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112469:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112470:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112477:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f011247e:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112485:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f011248c:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112493:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f011249a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011249d:	8a 00                	mov    (%eax),%al
f011249f:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01124a5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124a8:	8a 00                	mov    (%eax),%al
f01124aa:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01124b0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01124b3:	8a 00                	mov    (%eax),%al
f01124b5:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01124bb:	e8 91 a5 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01124c0:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01124c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01124c6:	89 d0                	mov    %edx,%eax
f01124c8:	01 c0                	add    %eax,%eax
f01124ca:	01 d0                	add    %edx,%eax
f01124cc:	01 c0                	add    %eax,%eax
f01124ce:	50                   	push   %eax
f01124cf:	68 00 00 10 00       	push   $0x100000
f01124d4:	6a 00                	push   $0x0
f01124d6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124d9:	e8 7e 63 ff ff       	call   f010885c <copy_paste_chunk>
f01124de:	83 c4 10             	add    $0x10,%esp
f01124e1:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01124e4:	e8 68 a5 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01124e9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01124ec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01124f3:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f01124f7:	75 08                	jne    f0112501 <test_copy_paste_chunk+0x4a2>
f01124f9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01124fc:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01124ff:	74 2b                	je     f011252c <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112501:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112504:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112507:	83 ec 0c             	sub    $0xc,%esp
f011250a:	50                   	push   %eax
f011250b:	ff 75 88             	pushl  -0x78(%ebp)
f011250e:	68 a8 91 13 f0       	push   $0xf01391a8
f0112513:	68 93 02 00 00       	push   $0x293
f0112518:	68 7e 86 13 f0       	push   $0xf013867e
f011251d:	e8 65 de fe ff       	call   f0100387 <_warn>
f0112522:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112525:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011252c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112530:	74 04                	je     f0112536 <test_copy_paste_chunk+0x4d7>
f0112532:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112536:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f011253d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112540:	8a 00                	mov    (%eax),%al
f0112542:	3c 61                	cmp    $0x61,%al
f0112544:	75 75                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f0112546:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112549:	8a 00                	mov    (%eax),%al
f011254b:	3c 78                	cmp    $0x78,%al
f011254d:	75 6c                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f011254f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112552:	8a 00                	mov    (%eax),%al
f0112554:	3c 62                	cmp    $0x62,%al
f0112556:	75 63                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f0112558:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011255b:	8a 00                	mov    (%eax),%al
f011255d:	3c 79                	cmp    $0x79,%al
f011255f:	75 5a                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f0112561:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112564:	8a 00                	mov    (%eax),%al
f0112566:	3c 63                	cmp    $0x63,%al
f0112568:	75 51                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f011256a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011256d:	8a 00                	mov    (%eax),%al
f011256f:	3c 7a                	cmp    $0x7a,%al
f0112571:	75 48                	jne    f01125bb <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112573:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112576:	8a 00                	mov    (%eax),%al
f0112578:	3c 64                	cmp    $0x64,%al
f011257a:	75 3f                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f011257c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011257f:	8a 10                	mov    (%eax),%dl
f0112581:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112587:	38 c2                	cmp    %al,%dl
f0112589:	75 30                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f011258b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011258e:	8a 00                	mov    (%eax),%al
f0112590:	3c 65                	cmp    $0x65,%al
f0112592:	75 27                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f0112594:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112597:	8a 10                	mov    (%eax),%dl
f0112599:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f011259f:	38 c2                	cmp    %al,%dl
f01125a1:	75 18                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f01125a3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01125a6:	8a 00                	mov    (%eax),%al
f01125a8:	3c 66                	cmp    $0x66,%al
f01125aa:	75 0f                	jne    f01125bb <test_copy_paste_chunk+0x55c>
f01125ac:	8b 45 90             	mov    -0x70(%ebp),%eax
f01125af:	8a 10                	mov    (%eax),%dl
f01125b1:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01125b7:	38 c2                	cmp    %al,%dl
f01125b9:	74 21                	je     f01125dc <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01125bb:	83 ec 04             	sub    $0x4,%esp
f01125be:	68 0c 92 13 f0       	push   $0xf013920c
f01125c3:	68 9c 02 00 00       	push   $0x29c
f01125c8:	68 7e 86 13 f0       	push   $0xf013867e
f01125cd:	e8 b5 dd fe ff       	call   f0100387 <_warn>
f01125d2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125d5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01125dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125e0:	74 04                	je     f01125e6 <test_copy_paste_chunk+0x587>
f01125e2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01125e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01125ed:	83 ec 0c             	sub    $0xc,%esp
f01125f0:	68 46 92 13 f0       	push   $0xf0139246
f01125f5:	e8 88 e6 fe ff       	call   f0100c82 <cprintf>
f01125fa:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f01125fd:	83 ec 0c             	sub    $0xc,%esp
f0112600:	68 58 92 13 f0       	push   $0xf0139258
f0112605:	e8 78 e6 fe ff       	call   f0100c82 <cprintf>
f011260a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f011260d:	83 ec 04             	sub    $0x4,%esp
f0112610:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112616:	50                   	push   %eax
f0112617:	68 8e 92 13 f0       	push   $0xf013928e
f011261c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112622:	50                   	push   %eax
f0112623:	e8 f6 ec 01 00       	call   f013131e <strcconcat>
f0112628:	83 c4 10             	add    $0x10,%esp
f011262b:	83 ec 0c             	sub    $0xc,%esp
f011262e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112634:	50                   	push   %eax
f0112635:	e8 aa e6 fe ff       	call   f0100ce4 <execute_command>
f011263a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f011263d:	83 ec 04             	sub    $0x4,%esp
f0112640:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112646:	50                   	push   %eax
f0112647:	68 98 92 13 f0       	push   $0xf0139298
f011264c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112652:	50                   	push   %eax
f0112653:	e8 c6 ec 01 00       	call   f013131e <strcconcat>
f0112658:	83 c4 10             	add    $0x10,%esp
f011265b:	83 ec 0c             	sub    $0xc,%esp
f011265e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112664:	50                   	push   %eax
f0112665:	e8 7a e6 fe ff       	call   f0100ce4 <execute_command>
f011266a:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f011266d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112673:	bb 11 98 13 f0       	mov    $0xf0139811,%ebx
f0112678:	ba 0f 00 00 00       	mov    $0xf,%edx
f011267d:	89 c7                	mov    %eax,%edi
f011267f:	89 de                	mov    %ebx,%esi
f0112681:	89 d1                	mov    %edx,%ecx
f0112683:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112685:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011268b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112690:	b0 00                	mov    $0x0,%al
f0112692:	89 d7                	mov    %edx,%edi
f0112694:	f3 aa                	rep stos %al,%es:(%edi)
f0112696:	83 ec 0c             	sub    $0xc,%esp
f0112699:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011269f:	50                   	push   %eax
f01126a0:	e8 3f e6 fe ff       	call   f0100ce4 <execute_command>
f01126a5:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01126a8:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01126ae:	bb 75 98 13 f0       	mov    $0xf0139875,%ebx
f01126b3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126b8:	89 c7                	mov    %eax,%edi
f01126ba:	89 de                	mov    %ebx,%esi
f01126bc:	89 d1                	mov    %edx,%ecx
f01126be:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126c0:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01126c6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126cb:	b0 00                	mov    $0x0,%al
f01126cd:	89 d7                	mov    %edx,%edi
f01126cf:	f3 aa                	rep stos %al,%es:(%edi)
f01126d1:	83 ec 0c             	sub    $0xc,%esp
f01126d4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01126da:	50                   	push   %eax
f01126db:	e8 04 e6 fe ff       	call   f0100ce4 <execute_command>
f01126e0:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01126e3:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01126e9:	bb d9 98 13 f0       	mov    $0xf01398d9,%ebx
f01126ee:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126f3:	89 c7                	mov    %eax,%edi
f01126f5:	89 de                	mov    %ebx,%esi
f01126f7:	89 d1                	mov    %edx,%ecx
f01126f9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126fb:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112701:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112706:	b0 00                	mov    $0x0,%al
f0112708:	89 d7                	mov    %edx,%edi
f011270a:	f3 aa                	rep stos %al,%es:(%edi)
f011270c:	83 ec 0c             	sub    $0xc,%esp
f011270f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112715:	50                   	push   %eax
f0112716:	e8 c9 e5 fe ff       	call   f0100ce4 <execute_command>
f011271b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011271e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112724:	bb 3d 99 13 f0       	mov    $0xf013993d,%ebx
f0112729:	ba 0f 00 00 00       	mov    $0xf,%edx
f011272e:	89 c7                	mov    %eax,%edi
f0112730:	89 de                	mov    %ebx,%esi
f0112732:	89 d1                	mov    %edx,%ecx
f0112734:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112736:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011273c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112741:	b0 00                	mov    $0x0,%al
f0112743:	89 d7                	mov    %edx,%edi
f0112745:	f3 aa                	rep stos %al,%es:(%edi)
f0112747:	83 ec 0c             	sub    $0xc,%esp
f011274a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112750:	50                   	push   %eax
f0112751:	e8 8e e5 fe ff       	call   f0100ce4 <execute_command>
f0112756:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112759:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011275f:	bb a1 99 13 f0       	mov    $0xf01399a1,%ebx
f0112764:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112769:	89 c7                	mov    %eax,%edi
f011276b:	89 de                	mov    %ebx,%esi
f011276d:	89 d1                	mov    %edx,%ecx
f011276f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112771:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112777:	b9 55 00 00 00       	mov    $0x55,%ecx
f011277c:	b0 00                	mov    $0x0,%al
f011277e:	89 d7                	mov    %edx,%edi
f0112780:	f3 aa                	rep stos %al,%es:(%edi)
f0112782:	83 ec 0c             	sub    $0xc,%esp
f0112785:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011278b:	50                   	push   %eax
f011278c:	e8 53 e5 fe ff       	call   f0100ce4 <execute_command>
f0112791:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112794:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011279a:	bb 05 9a 13 f0       	mov    $0xf0139a05,%ebx
f011279f:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127a4:	89 c7                	mov    %eax,%edi
f01127a6:	89 de                	mov    %ebx,%esi
f01127a8:	89 d1                	mov    %edx,%ecx
f01127aa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127ac:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01127b2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127b7:	b0 00                	mov    $0x0,%al
f01127b9:	89 d7                	mov    %edx,%edi
f01127bb:	f3 aa                	rep stos %al,%es:(%edi)
f01127bd:	83 ec 0c             	sub    $0xc,%esp
f01127c0:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01127c6:	50                   	push   %eax
f01127c7:	e8 18 e5 fe ff       	call   f0100ce4 <execute_command>
f01127cc:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01127cf:	83 ec 04             	sub    $0x4,%esp
f01127d2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127d8:	50                   	push   %eax
f01127d9:	68 a2 92 13 f0       	push   $0xf01392a2
f01127de:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01127e4:	50                   	push   %eax
f01127e5:	e8 34 eb 01 00       	call   f013131e <strcconcat>
f01127ea:	83 c4 10             	add    $0x10,%esp
f01127ed:	83 ec 0c             	sub    $0xc,%esp
f01127f0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127f6:	50                   	push   %eax
f01127f7:	e8 e8 e4 fe ff       	call   f0100ce4 <execute_command>
f01127fc:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01127ff:	83 ec 04             	sub    $0x4,%esp
f0112802:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112808:	50                   	push   %eax
f0112809:	68 ac 92 13 f0       	push   $0xf01392ac
f011280e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112814:	50                   	push   %eax
f0112815:	e8 04 eb 01 00       	call   f013131e <strcconcat>
f011281a:	83 c4 10             	add    $0x10,%esp
f011281d:	83 ec 0c             	sub    $0xc,%esp
f0112820:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112826:	50                   	push   %eax
f0112827:	e8 b8 e4 fe ff       	call   f0100ce4 <execute_command>
f011282c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011282f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112835:	bb 69 9a 13 f0       	mov    $0xf0139a69,%ebx
f011283a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011283f:	89 c7                	mov    %eax,%edi
f0112841:	89 de                	mov    %ebx,%esi
f0112843:	89 d1                	mov    %edx,%ecx
f0112845:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112847:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011284d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112852:	b0 00                	mov    $0x0,%al
f0112854:	89 d7                	mov    %edx,%edi
f0112856:	f3 aa                	rep stos %al,%es:(%edi)
f0112858:	83 ec 0c             	sub    $0xc,%esp
f011285b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112861:	50                   	push   %eax
f0112862:	e8 7d e4 fe ff       	call   f0100ce4 <execute_command>
f0112867:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f011286a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112870:	bb cd 9a 13 f0       	mov    $0xf0139acd,%ebx
f0112875:	ba 0f 00 00 00       	mov    $0xf,%edx
f011287a:	89 c7                	mov    %eax,%edi
f011287c:	89 de                	mov    %ebx,%esi
f011287e:	89 d1                	mov    %edx,%ecx
f0112880:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112882:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112888:	b9 55 00 00 00       	mov    $0x55,%ecx
f011288d:	b0 00                	mov    $0x0,%al
f011288f:	89 d7                	mov    %edx,%edi
f0112891:	f3 aa                	rep stos %al,%es:(%edi)
f0112893:	83 ec 0c             	sub    $0xc,%esp
f0112896:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011289c:	50                   	push   %eax
f011289d:	e8 42 e4 fe ff       	call   f0100ce4 <execute_command>
f01128a2:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01128a5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01128ab:	bb 31 9b 13 f0       	mov    $0xf0139b31,%ebx
f01128b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128b5:	89 c7                	mov    %eax,%edi
f01128b7:	89 de                	mov    %ebx,%esi
f01128b9:	89 d1                	mov    %edx,%ecx
f01128bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128bd:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01128c3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01128c8:	b0 00                	mov    $0x0,%al
f01128ca:	89 d7                	mov    %edx,%edi
f01128cc:	f3 aa                	rep stos %al,%es:(%edi)
f01128ce:	83 ec 0c             	sub    $0xc,%esp
f01128d1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01128d7:	50                   	push   %eax
f01128d8:	e8 07 e4 fe ff       	call   f0100ce4 <execute_command>
f01128dd:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01128e0:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01128e7:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01128ee:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01128f5:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01128fc:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112903:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011290a:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112911:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112918:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011291f:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112926:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011292d:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0112934:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112937:	8a 00                	mov    (%eax),%al
f0112939:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011293f:	e8 0d a1 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112944:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011294a:	89 d0                	mov    %edx,%eax
f011294c:	01 c0                	add    %eax,%eax
f011294e:	01 d0                	add    %edx,%eax
f0112950:	01 c0                	add    %eax,%eax
f0112952:	50                   	push   %eax
f0112953:	68 00 00 40 00       	push   $0x400000
f0112958:	68 00 00 20 00       	push   $0x200000
f011295d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112960:	e8 f7 5e ff ff       	call   f010885c <copy_paste_chunk>
f0112965:	83 c4 10             	add    $0x10,%esp
f0112968:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011296b:	e8 e1 a0 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112970:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112973:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011297a:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011297e:	75 08                	jne    f0112988 <test_copy_paste_chunk+0x929>
f0112980:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112983:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112986:	74 2b                	je     f01129b3 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112988:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011298b:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011298e:	83 ec 0c             	sub    $0xc,%esp
f0112991:	50                   	push   %eax
f0112992:	ff 75 80             	pushl  -0x80(%ebp)
f0112995:	68 b8 92 13 f0       	push   $0xf01392b8
f011299a:	68 cc 02 00 00       	push   $0x2cc
f011299f:	68 7e 86 13 f0       	push   $0xf013867e
f01129a4:	e8 de d9 fe ff       	call   f0100387 <_warn>
f01129a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129ac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01129b3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129b7:	74 04                	je     f01129bd <test_copy_paste_chunk+0x95e>
f01129b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129bd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01129c4:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01129cb:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01129ce:	83 ec 08             	sub    $0x8,%esp
f01129d1:	6a 01                	push   $0x1
f01129d3:	6a 07                	push   $0x7
f01129d5:	6a 07                	push   $0x7
f01129d7:	6a 07                	push   $0x7
f01129d9:	6a 07                	push   $0x7
f01129db:	6a 01                	push   $0x1
f01129dd:	68 00 20 00 00       	push   $0x2000
f01129e2:	68 00 00 40 00       	push   $0x400000
f01129e7:	68 00 00 20 00       	push   $0x200000
f01129ec:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129ef:	e8 67 32 00 00       	call   f0115c5b <CCP>
f01129f4:	83 c4 30             	add    $0x30,%esp
f01129f7:	83 f8 01             	cmp    $0x1,%eax
f01129fa:	74 2b                	je     f0112a27 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01129fc:	83 ec 04             	sub    $0x4,%esp
f01129ff:	68 0c 93 13 f0       	push   $0xf013930c
f0112a04:	68 d5 02 00 00       	push   $0x2d5
f0112a09:	68 7e 86 13 f0       	push   $0xf013867e
f0112a0e:	e8 74 d9 fe ff       	call   f0100387 <_warn>
f0112a13:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112a1d:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112a24:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112a27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a2b:	74 04                	je     f0112a31 <test_copy_paste_chunk+0x9d2>
f0112a2d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a31:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112a38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a3b:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112a3e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a41:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112a44:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a47:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112a4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a4d:	8a 00                	mov    (%eax),%al
f0112a4f:	3c 61                	cmp    $0x61,%al
f0112a51:	75 69                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a56:	8a 00                	mov    (%eax),%al
f0112a58:	3c 61                	cmp    $0x61,%al
f0112a5a:	75 60                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a5f:	8a 00                	mov    (%eax),%al
f0112a61:	3c 79                	cmp    $0x79,%al
f0112a63:	75 57                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a65:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112a68:	8a 00                	mov    (%eax),%al
f0112a6a:	3c 62                	cmp    $0x62,%al
f0112a6c:	75 4e                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a6e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a71:	8a 00                	mov    (%eax),%al
f0112a73:	3c 63                	cmp    $0x63,%al
f0112a75:	75 45                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a77:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a7a:	8a 00                	mov    (%eax),%al
f0112a7c:	3c 7a                	cmp    $0x7a,%al
f0112a7e:	75 3c                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112a80:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a83:	8a 00                	mov    (%eax),%al
f0112a85:	3c 77                	cmp    $0x77,%al
f0112a87:	75 33                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a89:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112a8c:	8a 00                	mov    (%eax),%al
f0112a8e:	3c 64                	cmp    $0x64,%al
f0112a90:	75 2a                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a92:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a95:	8a 00                	mov    (%eax),%al
f0112a97:	3c 65                	cmp    $0x65,%al
f0112a99:	75 21                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112a9b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a9e:	8a 00                	mov    (%eax),%al
f0112aa0:	3c 65                	cmp    $0x65,%al
f0112aa2:	75 18                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112aa4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112aa7:	8a 00                	mov    (%eax),%al
f0112aa9:	3c 66                	cmp    $0x66,%al
f0112aab:	75 0f                	jne    f0112abc <test_copy_paste_chunk+0xa5d>
f0112aad:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112ab0:	8a 10                	mov    (%eax),%dl
f0112ab2:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112ab8:	38 c2                	cmp    %al,%dl
f0112aba:	74 21                	je     f0112add <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112abc:	83 ec 04             	sub    $0x4,%esp
f0112abf:	68 0c 92 13 f0       	push   $0xf013920c
f0112ac4:	68 e3 02 00 00       	push   $0x2e3
f0112ac9:	68 7e 86 13 f0       	push   $0xf013867e
f0112ace:	e8 b4 d8 fe ff       	call   f0100387 <_warn>
f0112ad3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ad6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112add:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ae1:	74 04                	je     f0112ae7 <test_copy_paste_chunk+0xa88>
f0112ae3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ae7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112aee:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112af1:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112af4:	e8 58 9f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112af9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112afc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112aff:	89 c2                	mov    %eax,%edx
f0112b01:	01 d2                	add    %edx,%edx
f0112b03:	01 d0                	add    %edx,%eax
f0112b05:	50                   	push   %eax
f0112b06:	68 00 08 20 00       	push   $0x200800
f0112b0b:	68 00 08 40 00       	push   $0x400800
f0112b10:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b13:	e8 44 5d ff ff       	call   f010885c <copy_paste_chunk>
f0112b18:	83 c4 10             	add    $0x10,%esp
f0112b1b:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112b1e:	e8 2e 9f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112b23:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112b26:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112b2a:	75 08                	jne    f0112b34 <test_copy_paste_chunk+0xad5>
f0112b2c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112b2f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112b32:	74 2b                	je     f0112b5f <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112b34:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112b37:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112b3a:	83 ec 0c             	sub    $0xc,%esp
f0112b3d:	50                   	push   %eax
f0112b3e:	ff 75 80             	pushl  -0x80(%ebp)
f0112b41:	68 b8 92 13 f0       	push   $0xf01392b8
f0112b46:	68 f3 02 00 00       	push   $0x2f3
f0112b4b:	68 7e 86 13 f0       	push   $0xf013867e
f0112b50:	e8 32 d8 fe ff       	call   f0100387 <_warn>
f0112b55:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112b58:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112b5f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b63:	74 04                	je     f0112b69 <test_copy_paste_chunk+0xb0a>
f0112b65:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b69:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112b70:	83 ec 08             	sub    $0x8,%esp
f0112b73:	6a 01                	push   $0x1
f0112b75:	6a 07                	push   $0x7
f0112b77:	6a 07                	push   $0x7
f0112b79:	6a 07                	push   $0x7
f0112b7b:	6a 07                	push   $0x7
f0112b7d:	6a 01                	push   $0x1
f0112b7f:	68 00 20 00 00       	push   $0x2000
f0112b84:	68 00 00 20 00       	push   $0x200000
f0112b89:	68 00 00 40 00       	push   $0x400000
f0112b8e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b91:	e8 c5 30 00 00       	call   f0115c5b <CCP>
f0112b96:	83 c4 30             	add    $0x30,%esp
f0112b99:	83 f8 01             	cmp    $0x1,%eax
f0112b9c:	74 21                	je     f0112bbf <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112b9e:	83 ec 04             	sub    $0x4,%esp
f0112ba1:	68 58 93 13 f0       	push   $0xf0139358
f0112ba6:	68 fb 02 00 00       	push   $0x2fb
f0112bab:	68 7e 86 13 f0       	push   $0xf013867e
f0112bb0:	e8 d2 d7 fe ff       	call   f0100387 <_warn>
f0112bb5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112bb8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112bbf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112bc3:	74 04                	je     f0112bc9 <test_copy_paste_chunk+0xb6a>
f0112bc5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112bc9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112bd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112bd3:	8a 00                	mov    (%eax),%al
f0112bd5:	3c 61                	cmp    $0x61,%al
f0112bd7:	75 69                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112bd9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bdc:	8a 00                	mov    (%eax),%al
f0112bde:	3c 61                	cmp    $0x61,%al
f0112be0:	75 60                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112be2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112be5:	8a 00                	mov    (%eax),%al
f0112be7:	3c 79                	cmp    $0x79,%al
f0112be9:	75 57                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112beb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112bee:	8a 00                	mov    (%eax),%al
f0112bf0:	3c 62                	cmp    $0x62,%al
f0112bf2:	75 4e                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112bf4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112bf7:	8a 00                	mov    (%eax),%al
f0112bf9:	3c 7a                	cmp    $0x7a,%al
f0112bfb:	75 45                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112bfd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c00:	8a 00                	mov    (%eax),%al
f0112c02:	3c 7a                	cmp    $0x7a,%al
f0112c04:	75 3c                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112c06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112c09:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112c0b:	3c 64                	cmp    $0x64,%al
f0112c0d:	75 33                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112c0f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112c12:	8a 00                	mov    (%eax),%al
f0112c14:	3c 64                	cmp    $0x64,%al
f0112c16:	75 2a                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112c18:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c1b:	8a 00                	mov    (%eax),%al
f0112c1d:	3c 65                	cmp    $0x65,%al
f0112c1f:	75 21                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112c21:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c24:	8a 00                	mov    (%eax),%al
f0112c26:	3c 78                	cmp    $0x78,%al
f0112c28:	75 18                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112c2a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c2d:	8a 00                	mov    (%eax),%al
f0112c2f:	3c 66                	cmp    $0x66,%al
f0112c31:	75 0f                	jne    f0112c42 <test_copy_paste_chunk+0xbe3>
f0112c33:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112c36:	8a 10                	mov    (%eax),%dl
f0112c38:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112c3e:	38 c2                	cmp    %al,%dl
f0112c40:	74 21                	je     f0112c63 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112c42:	83 ec 04             	sub    $0x4,%esp
f0112c45:	68 0c 92 13 f0       	push   $0xf013920c
f0112c4a:	68 04 03 00 00       	push   $0x304
f0112c4f:	68 7e 86 13 f0       	push   $0xf013867e
f0112c54:	e8 2e d7 fe ff       	call   f0100387 <_warn>
f0112c59:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c5c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112c63:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c67:	74 04                	je     f0112c6d <test_copy_paste_chunk+0xc0e>
f0112c69:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112c6d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112c74:	83 ec 0c             	sub    $0xc,%esp
f0112c77:	68 a3 93 13 f0       	push   $0xf01393a3
f0112c7c:	e8 01 e0 fe ff       	call   f0100c82 <cprintf>
f0112c81:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112c84:	83 ec 0c             	sub    $0xc,%esp
f0112c87:	68 b4 93 13 f0       	push   $0xf01393b4
f0112c8c:	e8 f1 df fe ff       	call   f0100c82 <cprintf>
f0112c91:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112c94:	83 ec 04             	sub    $0x4,%esp
f0112c97:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c9d:	50                   	push   %eax
f0112c9e:	68 e8 93 13 f0       	push   $0xf01393e8
f0112ca3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ca9:	50                   	push   %eax
f0112caa:	e8 6f e6 01 00       	call   f013131e <strcconcat>
f0112caf:	83 c4 10             	add    $0x10,%esp
f0112cb2:	83 ec 0c             	sub    $0xc,%esp
f0112cb5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cbb:	50                   	push   %eax
f0112cbc:	e8 23 e0 fe ff       	call   f0100ce4 <execute_command>
f0112cc1:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112cc4:	83 ec 04             	sub    $0x4,%esp
f0112cc7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ccd:	50                   	push   %eax
f0112cce:	68 f2 93 13 f0       	push   $0xf01393f2
f0112cd3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112cd9:	50                   	push   %eax
f0112cda:	e8 3f e6 01 00       	call   f013131e <strcconcat>
f0112cdf:	83 c4 10             	add    $0x10,%esp
f0112ce2:	83 ec 0c             	sub    $0xc,%esp
f0112ce5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ceb:	50                   	push   %eax
f0112cec:	e8 f3 df fe ff       	call   f0100ce4 <execute_command>
f0112cf1:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112cf4:	83 ec 04             	sub    $0x4,%esp
f0112cf7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cfd:	50                   	push   %eax
f0112cfe:	68 fc 93 13 f0       	push   $0xf01393fc
f0112d03:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d09:	50                   	push   %eax
f0112d0a:	e8 0f e6 01 00       	call   f013131e <strcconcat>
f0112d0f:	83 c4 10             	add    $0x10,%esp
f0112d12:	83 ec 0c             	sub    $0xc,%esp
f0112d15:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d1b:	50                   	push   %eax
f0112d1c:	e8 c3 df fe ff       	call   f0100ce4 <execute_command>
f0112d21:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0112d24:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d2a:	bb 95 9b 13 f0       	mov    $0xf0139b95,%ebx
f0112d2f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d34:	89 c7                	mov    %eax,%edi
f0112d36:	89 de                	mov    %ebx,%esi
f0112d38:	89 d1                	mov    %edx,%ecx
f0112d3a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d3c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112d42:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d47:	b0 00                	mov    $0x0,%al
f0112d49:	89 d7                	mov    %edx,%edi
f0112d4b:	f3 aa                	rep stos %al,%es:(%edi)
f0112d4d:	83 ec 0c             	sub    $0xc,%esp
f0112d50:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d56:	50                   	push   %eax
f0112d57:	e8 88 df fe ff       	call   f0100ce4 <execute_command>
f0112d5c:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112d5f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d65:	bb f9 9b 13 f0       	mov    $0xf0139bf9,%ebx
f0112d6a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d6f:	89 c7                	mov    %eax,%edi
f0112d71:	89 de                	mov    %ebx,%esi
f0112d73:	89 d1                	mov    %edx,%ecx
f0112d75:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d77:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112d7d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d82:	b0 00                	mov    $0x0,%al
f0112d84:	89 d7                	mov    %edx,%edi
f0112d86:	f3 aa                	rep stos %al,%es:(%edi)
f0112d88:	83 ec 0c             	sub    $0xc,%esp
f0112d8b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d91:	50                   	push   %eax
f0112d92:	e8 4d df fe ff       	call   f0100ce4 <execute_command>
f0112d97:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112d9a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112da0:	bb 5d 9c 13 f0       	mov    $0xf0139c5d,%ebx
f0112da5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112daa:	89 c7                	mov    %eax,%edi
f0112dac:	89 de                	mov    %ebx,%esi
f0112dae:	89 d1                	mov    %edx,%ecx
f0112db0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112db2:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112db8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112dbd:	b0 00                	mov    $0x0,%al
f0112dbf:	89 d7                	mov    %edx,%edi
f0112dc1:	f3 aa                	rep stos %al,%es:(%edi)
f0112dc3:	83 ec 0c             	sub    $0xc,%esp
f0112dc6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112dcc:	50                   	push   %eax
f0112dcd:	e8 12 df fe ff       	call   f0100ce4 <execute_command>
f0112dd2:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112dd5:	e8 77 9c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112dda:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112ddd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112de0:	89 d0                	mov    %edx,%eax
f0112de2:	01 c0                	add    %eax,%eax
f0112de4:	01 d0                	add    %edx,%eax
f0112de6:	c1 e0 02             	shl    $0x2,%eax
f0112de9:	50                   	push   %eax
f0112dea:	68 00 00 90 00       	push   $0x900000
f0112def:	68 00 00 80 00       	push   $0x800000
f0112df4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112df7:	e8 60 5a ff ff       	call   f010885c <copy_paste_chunk>
f0112dfc:	83 c4 10             	add    $0x10,%esp
f0112dff:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e05:	e8 47 9c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112e0a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112e0d:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112e14:	75 0b                	jne    f0112e21 <test_copy_paste_chunk+0xdc2>
f0112e16:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e19:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e1c:	83 f8 03             	cmp    $0x3,%eax
f0112e1f:	74 2e                	je     f0112e4f <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112e21:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e24:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e27:	83 ec 0c             	sub    $0xc,%esp
f0112e2a:	50                   	push   %eax
f0112e2b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112e31:	68 b8 92 13 f0       	push   $0xf01392b8
f0112e36:	68 22 03 00 00       	push   $0x322
f0112e3b:	68 7e 86 13 f0       	push   $0xf013867e
f0112e40:	e8 42 d5 fe ff       	call   f0100387 <_warn>
f0112e45:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e48:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112e4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e53:	74 04                	je     f0112e59 <test_copy_paste_chunk+0xdfa>
f0112e55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112e60:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112e67:	83 ec 08             	sub    $0x8,%esp
f0112e6a:	6a 01                	push   $0x1
f0112e6c:	6a 07                	push   $0x7
f0112e6e:	6a 07                	push   $0x7
f0112e70:	6a 07                	push   $0x7
f0112e72:	6a 07                	push   $0x7
f0112e74:	6a 01                	push   $0x1
f0112e76:	68 00 30 00 00       	push   $0x3000
f0112e7b:	68 00 00 90 00       	push   $0x900000
f0112e80:	68 00 00 80 00       	push   $0x800000
f0112e85:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e88:	e8 ce 2d 00 00       	call   f0115c5b <CCP>
f0112e8d:	83 c4 30             	add    $0x30,%esp
f0112e90:	83 f8 01             	cmp    $0x1,%eax
f0112e93:	74 28                	je     f0112ebd <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112e95:	83 ec 04             	sub    $0x4,%esp
f0112e98:	68 58 93 13 f0       	push   $0xf0139358
f0112e9d:	68 2b 03 00 00       	push   $0x32b
f0112ea2:	68 7e 86 13 f0       	push   $0xf013867e
f0112ea7:	e8 db d4 fe ff       	call   f0100387 <_warn>
f0112eac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112eaf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112eb6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112ebd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ec1:	74 04                	je     f0112ec7 <test_copy_paste_chunk+0xe68>
f0112ec3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ec7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112ece:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112ed2:	0f 84 9e 00 00 00    	je     f0112f76 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112ed8:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0112edf:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112ee6:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112eed:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0112ef4:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112efb:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0112f02:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f05:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112f08:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f0b:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0112f0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f11:	8a 00                	mov    (%eax),%al
f0112f13:	3c 61                	cmp    $0x61,%al
f0112f15:	75 2d                	jne    f0112f44 <test_copy_paste_chunk+0xee5>
f0112f17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f1a:	8a 00                	mov    (%eax),%al
f0112f1c:	3c 61                	cmp    $0x61,%al
f0112f1e:	75 24                	jne    f0112f44 <test_copy_paste_chunk+0xee5>
f0112f20:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f23:	8a 00                	mov    (%eax),%al
f0112f25:	3c 79                	cmp    $0x79,%al
f0112f27:	75 1b                	jne    f0112f44 <test_copy_paste_chunk+0xee5>
f0112f29:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f2c:	8a 00                	mov    (%eax),%al
f0112f2e:	3c 62                	cmp    $0x62,%al
f0112f30:	75 12                	jne    f0112f44 <test_copy_paste_chunk+0xee5>
f0112f32:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112f35:	8a 00                	mov    (%eax),%al
f0112f37:	3c 63                	cmp    $0x63,%al
f0112f39:	75 09                	jne    f0112f44 <test_copy_paste_chunk+0xee5>
f0112f3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f3e:	8a 00                	mov    (%eax),%al
f0112f40:	3c 7a                	cmp    $0x7a,%al
f0112f42:	74 21                	je     f0112f65 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f44:	83 ec 04             	sub    $0x4,%esp
f0112f47:	68 0c 92 13 f0       	push   $0xf013920c
f0112f4c:	68 3d 03 00 00       	push   $0x33d
f0112f51:	68 7e 86 13 f0       	push   $0xf013867e
f0112f56:	e8 2c d4 fe ff       	call   f0100387 <_warn>
f0112f5b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112f5e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112f65:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f69:	74 04                	je     f0112f6f <test_copy_paste_chunk+0xf10>
f0112f6b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0112f6f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f76:	e8 d6 9a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112f7b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112f7e:	6a 00                	push   $0x0
f0112f80:	6a 02                	push   $0x2
f0112f82:	68 00 10 90 00       	push   $0x901000
f0112f87:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f8a:	e8 59 2b 00 00       	call   f0115ae8 <SB>
f0112f8f:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112f92:	6a 00                	push   $0x0
f0112f94:	6a 02                	push   $0x2
f0112f96:	68 00 20 90 00       	push   $0x902000
f0112f9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f9e:	e8 45 2b 00 00       	call   f0115ae8 <SB>
f0112fa3:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112fa6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112fa9:	c1 e0 03             	shl    $0x3,%eax
f0112fac:	50                   	push   %eax
f0112fad:	68 00 f0 bf 00       	push   $0xbff000
f0112fb2:	68 00 10 90 00       	push   $0x901000
f0112fb7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112fba:	e8 9d 58 ff ff       	call   f010885c <copy_paste_chunk>
f0112fbf:	83 c4 10             	add    $0x10,%esp
f0112fc2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112fc8:	e8 84 9a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0112fcd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112fd0:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112fd7:	75 0b                	jne    f0112fe4 <test_copy_paste_chunk+0xf85>
f0112fd9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112fdc:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112fdf:	83 f8 03             	cmp    $0x3,%eax
f0112fe2:	74 2e                	je     f0113012 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112fe4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112fe7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112fea:	83 ec 0c             	sub    $0xc,%esp
f0112fed:	50                   	push   %eax
f0112fee:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112ff4:	68 b8 92 13 f0       	push   $0xf01392b8
f0112ff9:	68 4d 03 00 00       	push   $0x34d
f0112ffe:	68 7e 86 13 f0       	push   $0xf013867e
f0113003:	e8 7f d3 fe ff       	call   f0100387 <_warn>
f0113008:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011300b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113012:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113016:	74 04                	je     f011301c <test_copy_paste_chunk+0xfbd>
f0113018:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011301c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113023:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f011302a:	83 ec 08             	sub    $0x8,%esp
f011302d:	6a 01                	push   $0x1
f011302f:	6a 07                	push   $0x7
f0113031:	6a 03                	push   $0x3
f0113033:	6a 07                	push   $0x7
f0113035:	6a 03                	push   $0x3
f0113037:	6a 01                	push   $0x1
f0113039:	68 00 20 00 00       	push   $0x2000
f011303e:	68 00 f0 bf 00       	push   $0xbff000
f0113043:	68 00 10 90 00       	push   $0x901000
f0113048:	ff 75 d4             	pushl  -0x2c(%ebp)
f011304b:	e8 0b 2c 00 00       	call   f0115c5b <CCP>
f0113050:	83 c4 30             	add    $0x30,%esp
f0113053:	83 f8 01             	cmp    $0x1,%eax
f0113056:	74 28                	je     f0113080 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113058:	83 ec 04             	sub    $0x4,%esp
f011305b:	68 58 93 13 f0       	push   $0xf0139358
f0113060:	68 56 03 00 00       	push   $0x356
f0113065:	68 7e 86 13 f0       	push   $0xf013867e
f011306a:	e8 18 d3 fe ff       	call   f0100387 <_warn>
f011306f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113072:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113079:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113080:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113084:	74 04                	je     f011308a <test_copy_paste_chunk+0x102b>
f0113086:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011308a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113091:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113095:	74 72                	je     f0113109 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113097:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f011309e:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01130a5:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01130ac:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01130b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01130b6:	8a 00                	mov    (%eax),%al
f01130b8:	3c 62                	cmp    $0x62,%al
f01130ba:	75 1b                	jne    f01130d7 <test_copy_paste_chunk+0x1078>
f01130bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01130bf:	8a 00                	mov    (%eax),%al
f01130c1:	3c 62                	cmp    $0x62,%al
f01130c3:	75 12                	jne    f01130d7 <test_copy_paste_chunk+0x1078>
f01130c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130c8:	8a 00                	mov    (%eax),%al
f01130ca:	3c 7a                	cmp    $0x7a,%al
f01130cc:	75 09                	jne    f01130d7 <test_copy_paste_chunk+0x1078>
f01130ce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01130d1:	8a 00                	mov    (%eax),%al
f01130d3:	3c 7a                	cmp    $0x7a,%al
f01130d5:	74 21                	je     f01130f8 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01130d7:	83 ec 04             	sub    $0x4,%esp
f01130da:	68 0c 92 13 f0       	push   $0xf013920c
f01130df:	68 62 03 00 00       	push   $0x362
f01130e4:	68 7e 86 13 f0       	push   $0xf013867e
f01130e9:	e8 99 d2 fe ff       	call   f0100387 <_warn>
f01130ee:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01130f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01130f8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130fc:	74 04                	je     f0113102 <test_copy_paste_chunk+0x10a3>
f01130fe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113102:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113109:	83 ec 0c             	sub    $0xc,%esp
f011310c:	68 06 94 13 f0       	push   $0xf0139406
f0113111:	e8 6c db fe ff       	call   f0100c82 <cprintf>
f0113116:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113119:	83 ec 08             	sub    $0x8,%esp
f011311c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011311f:	68 18 94 13 f0       	push   $0xf0139418
f0113124:	e8 59 db fe ff       	call   f0100c82 <cprintf>
f0113129:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011312c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113130:	75 10                	jne    f0113142 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113132:	83 ec 0c             	sub    $0xc,%esp
f0113135:	68 4c 94 13 f0       	push   $0xf013944c
f011313a:	e8 43 db fe ff       	call   f0100c82 <cprintf>
f011313f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113142:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0113147:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011314a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011314d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113150:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113155:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113158:	5b                   	pop    %ebx
f0113159:	5e                   	pop    %esi
f011315a:	5f                   	pop    %edi
f011315b:	5d                   	pop    %ebp
f011315c:	c3                   	ret    

f011315d <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f011315d:	55                   	push   %ebp
f011315e:	89 e5                	mov    %esp,%ebp
f0113160:	57                   	push   %edi
f0113161:	56                   	push   %esi
f0113162:	53                   	push   %ebx
f0113163:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113169:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011316f:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f0113174:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113179:	89 c7                	mov    %eax,%edi
f011317b:	89 de                	mov    %ebx,%esi
f011317d:	89 d1                	mov    %edx,%ecx
f011317f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113181:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113187:	b9 23 00 00 00       	mov    $0x23,%ecx
f011318c:	b0 00                	mov    $0x0,%al
f011318e:	89 d7                	mov    %edx,%edi
f0113190:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113192:	6a 00                	push   $0x0
f0113194:	6a 0a                	push   $0xa
f0113196:	6a 14                	push   $0x14
f0113198:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011319e:	50                   	push   %eax
f011319f:	e8 4d 5c ff ff       	call   f0108df1 <env_create>
f01131a4:	83 c4 10             	add    $0x10,%esp
f01131a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01131aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01131ad:	8b 40 5c             	mov    0x5c(%eax),%eax
f01131b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01131b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01131b6:	8b 40 60             	mov    0x60(%eax),%eax
f01131b9:	89 45 80             	mov    %eax,-0x80(%ebp)
f01131bc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01131bf:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01131c2:	83 ec 0c             	sub    $0xc,%esp
f01131c5:	ff 75 cc             	pushl  -0x34(%ebp)
f01131c8:	e8 5a 2a 00 00       	call   f0115c27 <ClearUserSpace>
f01131cd:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01131d0:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01131d7:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01131de:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01131e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f01131e9:	83 ec 0c             	sub    $0xc,%esp
f01131ec:	68 c4 9c 13 f0       	push   $0xf0139cc4
f01131f1:	e8 8c da fe ff       	call   f0100c82 <cprintf>
f01131f6:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f01131f9:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113200:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113207:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011320a:	8a 00                	mov    (%eax),%al
f011320c:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113212:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113215:	8a 00                	mov    (%eax),%al
f0113217:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011321d:	e8 2f 98 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113222:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113225:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113228:	89 d0                	mov    %edx,%eax
f011322a:	01 c0                	add    %eax,%eax
f011322c:	01 d0                	add    %edx,%eax
f011322e:	01 c0                	add    %eax,%eax
f0113230:	83 ec 0c             	sub    $0xc,%esp
f0113233:	6a 02                	push   $0x2
f0113235:	50                   	push   %eax
f0113236:	68 00 40 10 f0       	push   $0xf0104000
f011323b:	68 00 00 10 f0       	push   $0xf0100000
f0113240:	ff 75 cc             	pushl  -0x34(%ebp)
f0113243:	e8 58 57 ff ff       	call   f01089a0 <share_chunk>
f0113248:	83 c4 20             	add    $0x20,%esp
f011324b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011324e:	e8 fe 97 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113253:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113256:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011325a:	75 08                	jne    f0113264 <test_share_chunk+0x107>
f011325c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011325f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113262:	74 28                	je     f011328c <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113264:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113267:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011326a:	83 ec 0c             	sub    $0xc,%esp
f011326d:	50                   	push   %eax
f011326e:	ff 75 b0             	pushl  -0x50(%ebp)
f0113271:	68 f0 9c 13 f0       	push   $0xf0139cf0
f0113276:	68 9e 03 00 00       	push   $0x39e
f011327b:	68 7e 86 13 f0       	push   $0xf013867e
f0113280:	e8 02 d1 fe ff       	call   f0100387 <_warn>
f0113285:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113288:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011328c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113290:	74 04                	je     f0113296 <test_share_chunk+0x139>
f0113292:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113296:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f011329a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011329d:	c1 e0 03             	shl    $0x3,%eax
f01132a0:	83 ec 08             	sub    $0x8,%esp
f01132a3:	68 fd 00 00 00       	push   $0xfd
f01132a8:	6a 07                	push   $0x7
f01132aa:	6a 03                	push   $0x3
f01132ac:	6a 07                	push   $0x7
f01132ae:	6a 03                	push   $0x3
f01132b0:	6a 01                	push   $0x1
f01132b2:	50                   	push   %eax
f01132b3:	68 00 40 10 f0       	push   $0xf0104000
f01132b8:	68 00 00 10 f0       	push   $0xf0100000
f01132bd:	ff 75 cc             	pushl  -0x34(%ebp)
f01132c0:	e8 96 29 00 00       	call   f0115c5b <CCP>
f01132c5:	83 c4 30             	add    $0x30,%esp
f01132c8:	85 c0                	test   %eax,%eax
f01132ca:	75 1e                	jne    f01132ea <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01132cc:	83 ec 04             	sub    $0x4,%esp
f01132cf:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01132d4:	68 a6 03 00 00       	push   $0x3a6
f01132d9:	68 7e 86 13 f0       	push   $0xf013867e
f01132de:	e8 a4 d0 fe ff       	call   f0100387 <_warn>
f01132e3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01132ea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01132ee:	74 04                	je     f01132f4 <test_share_chunk+0x197>
f01132f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f01132f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01132f7:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f01132fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01132fd:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113300:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113303:	8a 00                	mov    (%eax),%al
f0113305:	3c 41                	cmp    $0x41,%al
f0113307:	75 09                	jne    f0113312 <test_share_chunk+0x1b5>
f0113309:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011330c:	8a 00                	mov    (%eax),%al
f011330e:	3c 42                	cmp    $0x42,%al
f0113310:	74 1e                	je     f0113330 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113312:	83 ec 04             	sub    $0x4,%esp
f0113315:	68 94 9d 13 f0       	push   $0xf0139d94
f011331a:	68 b0 03 00 00       	push   $0x3b0
f011331f:	68 7e 86 13 f0       	push   $0xf013867e
f0113324:	e8 5e d0 fe ff       	call   f0100387 <_warn>
f0113329:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011332c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113330:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113334:	74 04                	je     f011333a <test_share_chunk+0x1dd>
f0113336:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011333a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f011333e:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113344:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113347:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113349:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f011334f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113352:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113354:	83 ec 0c             	sub    $0xc,%esp
f0113357:	68 c9 9d 13 f0       	push   $0xf0139dc9
f011335c:	e8 21 d9 fe ff       	call   f0100c82 <cprintf>
f0113361:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113364:	83 ec 0c             	sub    $0xc,%esp
f0113367:	68 d8 9d 13 f0       	push   $0xf0139dd8
f011336c:	e8 11 d9 fe ff       	call   f0100c82 <cprintf>
f0113371:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113374:	e8 d8 96 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113379:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011337c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011337f:	c1 e0 05             	shl    $0x5,%eax
f0113382:	83 ec 0c             	sub    $0xc,%esp
f0113385:	68 02 0e 00 00       	push   $0xe02
f011338a:	50                   	push   %eax
f011338b:	68 00 00 00 40       	push   $0x40000000
f0113390:	68 00 00 00 f0       	push   $0xf0000000
f0113395:	ff 75 cc             	pushl  -0x34(%ebp)
f0113398:	e8 03 56 ff ff       	call   f01089a0 <share_chunk>
f011339d:	83 c4 20             	add    $0x20,%esp
f01133a0:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133a3:	e8 a9 96 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01133a8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01133ab:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01133af:	75 1f                	jne    f01133d0 <test_share_chunk+0x273>
f01133b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133b4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133b7:	89 c1                	mov    %eax,%ecx
f01133b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01133bc:	c1 e0 05             	shl    $0x5,%eax
f01133bf:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01133c2:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01133c9:	99                   	cltd   
f01133ca:	f7 fb                	idiv   %ebx
f01133cc:	39 c1                	cmp    %eax,%ecx
f01133ce:	74 28                	je     f01133f8 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01133d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133d3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133d6:	83 ec 0c             	sub    $0xc,%esp
f01133d9:	50                   	push   %eax
f01133da:	ff 75 a8             	pushl  -0x58(%ebp)
f01133dd:	68 14 9e 13 f0       	push   $0xf0139e14
f01133e2:	68 c8 03 00 00       	push   $0x3c8
f01133e7:	68 7e 86 13 f0       	push   $0xf013867e
f01133ec:	e8 96 cf fe ff       	call   f0100387 <_warn>
f01133f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01133f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133fc:	74 04                	je     f0113402 <test_share_chunk+0x2a5>
f01133fe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113402:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113406:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011340d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113410:	c1 e0 05             	shl    $0x5,%eax
f0113413:	83 ec 08             	sub    $0x8,%esp
f0113416:	6a 02                	push   $0x2
f0113418:	6a 07                	push   $0x7
f011341a:	6a 03                	push   $0x3
f011341c:	68 07 0e 00 00       	push   $0xe07
f0113421:	68 03 0e 00 00       	push   $0xe03
f0113426:	6a ff                	push   $0xffffffff
f0113428:	50                   	push   %eax
f0113429:	68 00 00 00 40       	push   $0x40000000
f011342e:	68 00 00 00 f0       	push   $0xf0000000
f0113433:	ff 75 cc             	pushl  -0x34(%ebp)
f0113436:	e8 20 28 00 00       	call   f0115c5b <CCP>
f011343b:	83 c4 30             	add    $0x30,%esp
f011343e:	85 c0                	test   %eax,%eax
f0113440:	75 25                	jne    f0113467 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113442:	83 ec 04             	sub    $0x4,%esp
f0113445:	68 4c 9d 13 f0       	push   $0xf0139d4c
f011344a:	68 d1 03 00 00       	push   $0x3d1
f011344f:	68 7e 86 13 f0       	push   $0xf013867e
f0113454:	e8 2e cf fe ff       	call   f0100387 <_warn>
f0113459:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011345c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113460:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113467:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011346a:	89 d0                	mov    %edx,%eax
f011346c:	01 c0                	add    %eax,%eax
f011346e:	01 d0                	add    %edx,%eax
f0113470:	c1 e0 02             	shl    $0x2,%eax
f0113473:	83 ec 08             	sub    $0x8,%esp
f0113476:	6a 02                	push   $0x2
f0113478:	6a 07                	push   $0x7
f011347a:	6a 03                	push   $0x3
f011347c:	68 07 0e 00 00       	push   $0xe07
f0113481:	68 03 0e 00 00       	push   $0xe03
f0113486:	6a 02                	push   $0x2
f0113488:	50                   	push   %eax
f0113489:	68 00 00 00 40       	push   $0x40000000
f011348e:	68 00 00 00 f0       	push   $0xf0000000
f0113493:	ff 75 cc             	pushl  -0x34(%ebp)
f0113496:	e8 c0 27 00 00       	call   f0115c5b <CCP>
f011349b:	83 c4 30             	add    $0x30,%esp
f011349e:	85 c0                	test   %eax,%eax
f01134a0:	75 1e                	jne    f01134c0 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01134a2:	83 ec 04             	sub    $0x4,%esp
f01134a5:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01134aa:	68 d8 03 00 00       	push   $0x3d8
f01134af:	68 7e 86 13 f0       	push   $0xf013867e
f01134b4:	e8 ce ce fe ff       	call   f0100387 <_warn>
f01134b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134bc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01134c0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134c4:	74 04                	je     f01134ca <test_share_chunk+0x36d>
f01134c6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01134ca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01134ce:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f01134d3:	05 00 00 00 10       	add    $0x10000000,%eax
f01134d8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01134db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01134de:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01134e3:	83 ec 08             	sub    $0x8,%esp
f01134e6:	6a 02                	push   $0x2
f01134e8:	6a 07                	push   $0x7
f01134ea:	6a 03                	push   $0x3
f01134ec:	68 07 0e 00 00       	push   $0xe07
f01134f1:	68 03 0e 00 00       	push   $0xe03
f01134f6:	6a 02                	push   $0x2
f01134f8:	50                   	push   %eax
f01134f9:	68 00 00 0a 40       	push   $0x400a0000
f01134fe:	68 00 00 0a f0       	push   $0xf00a0000
f0113503:	ff 75 cc             	pushl  -0x34(%ebp)
f0113506:	e8 50 27 00 00       	call   f0115c5b <CCP>
f011350b:	83 c4 30             	add    $0x30,%esp
f011350e:	85 c0                	test   %eax,%eax
f0113510:	75 1e                	jne    f0113530 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113512:	83 ec 04             	sub    $0x4,%esp
f0113515:	68 4c 9d 13 f0       	push   $0xf0139d4c
f011351a:	68 e2 03 00 00       	push   $0x3e2
f011351f:	68 7e 86 13 f0       	push   $0xf013867e
f0113524:	e8 5e ce fe ff       	call   f0100387 <_warn>
f0113529:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011352c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113530:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113534:	74 04                	je     f011353a <test_share_chunk+0x3dd>
f0113536:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011353a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011353e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113542:	0f 84 a4 00 00 00    	je     f01135ec <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113548:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f011354f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113552:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113555:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f011355c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011355f:	8a 00                	mov    (%eax),%al
f0113561:	3c 41                	cmp    $0x41,%al
f0113563:	75 09                	jne    f011356e <test_share_chunk+0x411>
f0113565:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113568:	8a 00                	mov    (%eax),%al
f011356a:	3c 41                	cmp    $0x41,%al
f011356c:	74 1e                	je     f011358c <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011356e:	83 ec 04             	sub    $0x4,%esp
f0113571:	68 94 9d 13 f0       	push   $0xf0139d94
f0113576:	68 ef 03 00 00       	push   $0x3ef
f011357b:	68 7e 86 13 f0       	push   $0xf013867e
f0113580:	e8 02 ce fe ff       	call   f0100387 <_warn>
f0113585:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113588:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011358c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113590:	74 04                	je     f0113596 <test_share_chunk+0x439>
f0113592:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113596:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f011359a:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01135a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01135a4:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01135a7:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01135ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01135b1:	8a 00                	mov    (%eax),%al
f01135b3:	3c 43                	cmp    $0x43,%al
f01135b5:	75 09                	jne    f01135c0 <test_share_chunk+0x463>
f01135b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01135ba:	8a 00                	mov    (%eax),%al
f01135bc:	3c 43                	cmp    $0x43,%al
f01135be:	74 1e                	je     f01135de <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01135c0:	83 ec 04             	sub    $0x4,%esp
f01135c3:	68 94 9d 13 f0       	push   $0xf0139d94
f01135c8:	68 fa 03 00 00       	push   $0x3fa
f01135cd:	68 7e 86 13 f0       	push   $0xf013867e
f01135d2:	e8 b0 cd fe ff       	call   f0100387 <_warn>
f01135d7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01135da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01135de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135e2:	74 04                	je     f01135e8 <test_share_chunk+0x48b>
f01135e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01135e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01135ec:	83 ec 0c             	sub    $0xc,%esp
f01135ef:	68 a3 93 13 f0       	push   $0xf01393a3
f01135f4:	e8 89 d6 fe ff       	call   f0100c82 <cprintf>
f01135f9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01135fc:	83 ec 0c             	sub    $0xc,%esp
f01135ff:	68 64 9e 13 f0       	push   $0xf0139e64
f0113604:	e8 79 d6 fe ff       	call   f0100c82 <cprintf>
f0113609:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011360c:	e8 40 94 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113611:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113614:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113617:	89 d0                	mov    %edx,%eax
f0113619:	c1 e0 03             	shl    $0x3,%eax
f011361c:	01 d0                	add    %edx,%eax
f011361e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113625:	01 d0                	add    %edx,%eax
f0113627:	c1 e0 03             	shl    $0x3,%eax
f011362a:	83 ec 0c             	sub    $0xc,%esp
f011362d:	6a 06                	push   $0x6
f011362f:	50                   	push   %eax
f0113630:	6a 00                	push   $0x0
f0113632:	68 00 00 00 40       	push   $0x40000000
f0113637:	ff 75 cc             	pushl  -0x34(%ebp)
f011363a:	e8 61 53 ff ff       	call   f01089a0 <share_chunk>
f011363f:	83 c4 20             	add    $0x20,%esp
f0113642:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113645:	e8 07 94 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011364a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011364d:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113651:	75 0b                	jne    f011365e <test_share_chunk+0x501>
f0113653:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113656:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113659:	83 f8 01             	cmp    $0x1,%eax
f011365c:	74 28                	je     f0113686 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011365e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113661:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113664:	83 ec 0c             	sub    $0xc,%esp
f0113667:	50                   	push   %eax
f0113668:	ff 75 a0             	pushl  -0x60(%ebp)
f011366b:	68 14 9e 13 f0       	push   $0xf0139e14
f0113670:	68 10 04 00 00       	push   $0x410
f0113675:	68 7e 86 13 f0       	push   $0xf013867e
f011367a:	e8 08 cd fe ff       	call   f0100387 <_warn>
f011367f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113682:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113686:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011368a:	74 04                	je     f0113690 <test_share_chunk+0x533>
f011368c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113690:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113694:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011369b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011369e:	05 00 80 02 00       	add    $0x28000,%eax
f01136a3:	c1 e0 02             	shl    $0x2,%eax
f01136a6:	83 ec 08             	sub    $0x8,%esp
f01136a9:	6a 02                	push   $0x2
f01136ab:	6a 07                	push   $0x7
f01136ad:	6a 03                	push   $0x3
f01136af:	6a 07                	push   $0x7
f01136b1:	6a 07                	push   $0x7
f01136b3:	6a ff                	push   $0xffffffff
f01136b5:	50                   	push   %eax
f01136b6:	6a 00                	push   $0x0
f01136b8:	68 00 00 00 40       	push   $0x40000000
f01136bd:	ff 75 cc             	pushl  -0x34(%ebp)
f01136c0:	e8 96 25 00 00       	call   f0115c5b <CCP>
f01136c5:	83 c4 30             	add    $0x30,%esp
f01136c8:	85 c0                	test   %eax,%eax
f01136ca:	75 25                	jne    f01136f1 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01136cc:	83 ec 04             	sub    $0x4,%esp
f01136cf:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01136d4:	68 19 04 00 00       	push   $0x419
f01136d9:	68 7e 86 13 f0       	push   $0xf013867e
f01136de:	e8 a4 cc fe ff       	call   f0100387 <_warn>
f01136e3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01136ea:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01136f1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01136f4:	89 d0                	mov    %edx,%eax
f01136f6:	01 c0                	add    %eax,%eax
f01136f8:	01 d0                	add    %edx,%eax
f01136fa:	c1 e0 02             	shl    $0x2,%eax
f01136fd:	83 ec 08             	sub    $0x8,%esp
f0113700:	6a 02                	push   $0x2
f0113702:	6a 07                	push   $0x7
f0113704:	6a 03                	push   $0x3
f0113706:	6a 07                	push   $0x7
f0113708:	6a 07                	push   $0x7
f011370a:	6a 03                	push   $0x3
f011370c:	50                   	push   %eax
f011370d:	6a 00                	push   $0x0
f011370f:	68 00 00 00 40       	push   $0x40000000
f0113714:	ff 75 cc             	pushl  -0x34(%ebp)
f0113717:	e8 3f 25 00 00       	call   f0115c5b <CCP>
f011371c:	83 c4 30             	add    $0x30,%esp
f011371f:	85 c0                	test   %eax,%eax
f0113721:	75 1e                	jne    f0113741 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113723:	83 ec 04             	sub    $0x4,%esp
f0113726:	68 4c 9d 13 f0       	push   $0xf0139d4c
f011372b:	68 20 04 00 00       	push   $0x420
f0113730:	68 7e 86 13 f0       	push   $0xf013867e
f0113735:	e8 4d cc fe ff       	call   f0100387 <_warn>
f011373a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011373d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113741:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113745:	74 04                	je     f011374b <test_share_chunk+0x5ee>
f0113747:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011374b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011374f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113752:	89 d0                	mov    %edx,%eax
f0113754:	01 c0                	add    %eax,%eax
f0113756:	01 d0                	add    %edx,%eax
f0113758:	c1 e0 02             	shl    $0x2,%eax
f011375b:	f7 d8                	neg    %eax
f011375d:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113762:	83 ec 08             	sub    $0x8,%esp
f0113765:	6a 02                	push   $0x2
f0113767:	6a 07                	push   $0x7
f0113769:	6a 03                	push   $0x3
f011376b:	6a 07                	push   $0x7
f011376d:	6a 07                	push   $0x7
f011376f:	6a 02                	push   $0x2
f0113771:	50                   	push   %eax
f0113772:	68 00 30 00 00       	push   $0x3000
f0113777:	68 00 30 00 40       	push   $0x40003000
f011377c:	ff 75 cc             	pushl  -0x34(%ebp)
f011377f:	e8 d7 24 00 00       	call   f0115c5b <CCP>
f0113784:	83 c4 30             	add    $0x30,%esp
f0113787:	85 c0                	test   %eax,%eax
f0113789:	75 1e                	jne    f01137a9 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011378b:	83 ec 04             	sub    $0x4,%esp
f011378e:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0113793:	68 28 04 00 00       	push   $0x428
f0113798:	68 7e 86 13 f0       	push   $0xf013867e
f011379d:	e8 e5 cb fe ff       	call   f0100387 <_warn>
f01137a2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01137a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137ad:	74 04                	je     f01137b3 <test_share_chunk+0x656>
f01137af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01137b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137ba:	c1 e0 02             	shl    $0x2,%eax
f01137bd:	83 ec 08             	sub    $0x8,%esp
f01137c0:	6a 02                	push   $0x2
f01137c2:	6a 07                	push   $0x7
f01137c4:	6a 03                	push   $0x3
f01137c6:	6a 07                	push   $0x7
f01137c8:	6a 07                	push   $0x7
f01137ca:	6a 03                	push   $0x3
f01137cc:	50                   	push   %eax
f01137cd:	68 00 00 0a 00       	push   $0xa0000
f01137d2:	68 00 00 0a 40       	push   $0x400a0000
f01137d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01137da:	e8 7c 24 00 00       	call   f0115c5b <CCP>
f01137df:	83 c4 30             	add    $0x30,%esp
f01137e2:	85 c0                	test   %eax,%eax
f01137e4:	75 1e                	jne    f0113804 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01137e6:	83 ec 04             	sub    $0x4,%esp
f01137e9:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01137ee:	68 30 04 00 00       	push   $0x430
f01137f3:	68 7e 86 13 f0       	push   $0xf013867e
f01137f8:	e8 8a cb fe ff       	call   f0100387 <_warn>
f01137fd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113800:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113804:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113808:	74 04                	je     f011380e <test_share_chunk+0x6b1>
f011380a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011380e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113812:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113816:	0f 84 92 00 00 00    	je     f01138ae <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011381c:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113823:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011382a:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0113831:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113838:	8b 45 98             	mov    -0x68(%ebp),%eax
f011383b:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f011383e:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113845:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011384c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011384f:	8a 00                	mov    (%eax),%al
f0113851:	3c 41                	cmp    $0x41,%al
f0113853:	75 2d                	jne    f0113882 <test_share_chunk+0x725>
f0113855:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113858:	8a 00                	mov    (%eax),%al
f011385a:	3c 41                	cmp    $0x41,%al
f011385c:	75 24                	jne    f0113882 <test_share_chunk+0x725>
f011385e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113861:	8a 00                	mov    (%eax),%al
f0113863:	3c 41                	cmp    $0x41,%al
f0113865:	75 1b                	jne    f0113882 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113867:	8b 45 98             	mov    -0x68(%ebp),%eax
f011386a:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011386c:	3c 44                	cmp    $0x44,%al
f011386e:	75 12                	jne    f0113882 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113870:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113873:	8a 00                	mov    (%eax),%al
f0113875:	3c 44                	cmp    $0x44,%al
f0113877:	75 09                	jne    f0113882 <test_share_chunk+0x725>
f0113879:	8b 45 90             	mov    -0x70(%ebp),%eax
f011387c:	8a 00                	mov    (%eax),%al
f011387e:	3c 44                	cmp    $0x44,%al
f0113880:	74 1e                	je     f01138a0 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113882:	83 ec 04             	sub    $0x4,%esp
f0113885:	68 94 9d 13 f0       	push   $0xf0139d94
f011388a:	68 42 04 00 00       	push   $0x442
f011388f:	68 7e 86 13 f0       	push   $0xf013867e
f0113894:	e8 ee ca fe ff       	call   f0100387 <_warn>
f0113899:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011389c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01138a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138a4:	74 04                	je     f01138aa <test_share_chunk+0x74d>
f01138a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01138aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01138ae:	83 ec 0c             	sub    $0xc,%esp
f01138b1:	68 06 94 13 f0       	push   $0xf0139406
f01138b6:	e8 c7 d3 fe ff       	call   f0100c82 <cprintf>
f01138bb:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01138be:	83 ec 0c             	sub    $0xc,%esp
f01138c1:	68 a0 9e 13 f0       	push   $0xf0139ea0
f01138c6:	e8 b7 d3 fe ff       	call   f0100c82 <cprintf>
f01138cb:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01138ce:	e8 7e 91 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01138d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01138d6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01138d9:	89 d0                	mov    %edx,%eax
f01138db:	01 c0                	add    %eax,%eax
f01138dd:	01 d0                	add    %edx,%eax
f01138df:	01 c0                	add    %eax,%eax
f01138e1:	01 d0                	add    %edx,%eax
f01138e3:	83 ec 0c             	sub    $0xc,%esp
f01138e6:	6a 04                	push   $0x4
f01138e8:	50                   	push   %eax
f01138e9:	68 00 fc 3f 00       	push   $0x3ffc00
f01138ee:	68 00 fc 09 00       	push   $0x9fc00
f01138f3:	ff 75 cc             	pushl  -0x34(%ebp)
f01138f6:	e8 a5 50 ff ff       	call   f01089a0 <share_chunk>
f01138fb:	83 c4 20             	add    $0x20,%esp
f01138fe:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113901:	e8 4b 91 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113906:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113909:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011390d:	75 0b                	jne    f011391a <test_share_chunk+0x7bd>
f011390f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113912:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113915:	83 f8 01             	cmp    $0x1,%eax
f0113918:	74 28                	je     f0113942 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011391a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011391d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113920:	83 ec 0c             	sub    $0xc,%esp
f0113923:	50                   	push   %eax
f0113924:	ff 75 8c             	pushl  -0x74(%ebp)
f0113927:	68 14 9e 13 f0       	push   $0xf0139e14
f011392c:	68 58 04 00 00       	push   $0x458
f0113931:	68 7e 86 13 f0       	push   $0xf013867e
f0113936:	e8 4c ca fe ff       	call   f0100387 <_warn>
f011393b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011393e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113942:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113946:	74 04                	je     f011394c <test_share_chunk+0x7ef>
f0113948:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011394c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113950:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113957:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011395a:	89 d0                	mov    %edx,%eax
f011395c:	01 c0                	add    %eax,%eax
f011395e:	01 d0                	add    %edx,%eax
f0113960:	c1 e0 02             	shl    $0x2,%eax
f0113963:	83 ec 08             	sub    $0x8,%esp
f0113966:	6a 02                	push   $0x2
f0113968:	6a 07                	push   $0x7
f011396a:	6a 07                	push   $0x7
f011396c:	6a 07                	push   $0x7
f011396e:	6a 05                	push   $0x5
f0113970:	6a ff                	push   $0xffffffff
f0113972:	50                   	push   %eax
f0113973:	68 00 f0 3f 00       	push   $0x3ff000
f0113978:	68 00 f0 09 00       	push   $0x9f000
f011397d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113980:	e8 d6 22 00 00       	call   f0115c5b <CCP>
f0113985:	83 c4 30             	add    $0x30,%esp
f0113988:	85 c0                	test   %eax,%eax
f011398a:	75 25                	jne    f01139b1 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011398c:	83 ec 04             	sub    $0x4,%esp
f011398f:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0113994:	68 61 04 00 00       	push   $0x461
f0113999:	68 7e 86 13 f0       	push   $0xf013867e
f011399e:	e8 e4 c9 fe ff       	call   f0100387 <_warn>
f01139a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01139aa:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01139b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139b5:	74 04                	je     f01139bb <test_share_chunk+0x85e>
f01139b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01139bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139c2:	c1 e0 02             	shl    $0x2,%eax
f01139c5:	83 ec 08             	sub    $0x8,%esp
f01139c8:	6a 02                	push   $0x2
f01139ca:	6a 07                	push   $0x7
f01139cc:	6a 07                	push   $0x7
f01139ce:	6a 07                	push   $0x7
f01139d0:	6a 05                	push   $0x5
f01139d2:	6a 03                	push   $0x3
f01139d4:	50                   	push   %eax
f01139d5:	68 00 f0 3f 00       	push   $0x3ff000
f01139da:	68 00 f0 09 00       	push   $0x9f000
f01139df:	ff 75 cc             	pushl  -0x34(%ebp)
f01139e2:	e8 74 22 00 00       	call   f0115c5b <CCP>
f01139e7:	83 c4 30             	add    $0x30,%esp
f01139ea:	85 c0                	test   %eax,%eax
f01139ec:	75 1e                	jne    f0113a0c <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01139ee:	83 ec 04             	sub    $0x4,%esp
f01139f1:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01139f6:	68 6a 04 00 00       	push   $0x46a
f01139fb:	68 7e 86 13 f0       	push   $0xf013867e
f0113a00:	e8 82 c9 fe ff       	call   f0100387 <_warn>
f0113a05:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a08:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a0c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a10:	74 04                	je     f0113a16 <test_share_chunk+0x8b9>
f0113a12:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a16:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113a1a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a1d:	c1 e0 03             	shl    $0x3,%eax
f0113a20:	83 ec 08             	sub    $0x8,%esp
f0113a23:	6a 02                	push   $0x2
f0113a25:	6a 07                	push   $0x7
f0113a27:	6a 07                	push   $0x7
f0113a29:	6a 07                	push   $0x7
f0113a2b:	6a 05                	push   $0x5
f0113a2d:	6a 04                	push   $0x4
f0113a2f:	50                   	push   %eax
f0113a30:	68 00 00 40 00       	push   $0x400000
f0113a35:	68 00 00 0a 00       	push   $0xa0000
f0113a3a:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a3d:	e8 19 22 00 00       	call   f0115c5b <CCP>
f0113a42:	83 c4 30             	add    $0x30,%esp
f0113a45:	85 c0                	test   %eax,%eax
f0113a47:	75 1e                	jne    f0113a67 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113a49:	83 ec 04             	sub    $0x4,%esp
f0113a4c:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0113a51:	68 72 04 00 00       	push   $0x472
f0113a56:	68 7e 86 13 f0       	push   $0xf013867e
f0113a5b:	e8 27 c9 fe ff       	call   f0100387 <_warn>
f0113a60:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a63:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a67:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a6b:	74 04                	je     f0113a71 <test_share_chunk+0x914>
f0113a6d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a71:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113a75:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113a79:	0f 84 b2 00 00 00    	je     f0113b31 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113a7f:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113a86:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113a8d:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113a94:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113a9b:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113aa2:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113aa9:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113ab0:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113ab7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113aba:	8a 00                	mov    (%eax),%al
f0113abc:	3c 44                	cmp    $0x44,%al
f0113abe:	75 45                	jne    f0113b05 <test_share_chunk+0x9a8>
f0113ac0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ac3:	8a 00                	mov    (%eax),%al
f0113ac5:	3c 44                	cmp    $0x44,%al
f0113ac7:	75 3c                	jne    f0113b05 <test_share_chunk+0x9a8>
f0113ac9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113acc:	8a 00                	mov    (%eax),%al
f0113ace:	3c 44                	cmp    $0x44,%al
f0113ad0:	75 33                	jne    f0113b05 <test_share_chunk+0x9a8>
f0113ad2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113ad5:	8a 00                	mov    (%eax),%al
f0113ad7:	3c 44                	cmp    $0x44,%al
f0113ad9:	75 2a                	jne    f0113b05 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113adb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113ade:	8a 10                	mov    (%eax),%dl
f0113ae0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113ae3:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113ae5:	38 c2                	cmp    %al,%dl
f0113ae7:	75 1c                	jne    f0113b05 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113ae9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113aec:	8a 10                	mov    (%eax),%dl
f0113aee:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113af1:	8a 00                	mov    (%eax),%al
f0113af3:	38 c2                	cmp    %al,%dl
f0113af5:	75 0e                	jne    f0113b05 <test_share_chunk+0x9a8>
f0113af7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113afa:	8a 10                	mov    (%eax),%dl
f0113afc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113aff:	8a 00                	mov    (%eax),%al
f0113b01:	38 c2                	cmp    %al,%dl
f0113b03:	74 1e                	je     f0113b23 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113b05:	83 ec 04             	sub    $0x4,%esp
f0113b08:	68 94 9d 13 f0       	push   $0xf0139d94
f0113b0d:	68 87 04 00 00       	push   $0x487
f0113b12:	68 7e 86 13 f0       	push   $0xf013867e
f0113b17:	e8 6b c8 fe ff       	call   f0100387 <_warn>
f0113b1c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113b1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113b23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b27:	74 04                	je     f0113b2d <test_share_chunk+0x9d0>
f0113b29:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113b2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113b31:	83 ec 0c             	sub    $0xc,%esp
f0113b34:	68 d8 9e 13 f0       	push   $0xf0139ed8
f0113b39:	e8 44 d1 fe ff       	call   f0100c82 <cprintf>
f0113b3e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113b41:	83 ec 08             	sub    $0x8,%esp
f0113b44:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113b47:	68 e8 9e 13 f0       	push   $0xf0139ee8
f0113b4c:	e8 31 d1 fe ff       	call   f0100c82 <cprintf>
f0113b51:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113b54:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113b58:	75 10                	jne    f0113b6a <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113b5a:	83 ec 0c             	sub    $0xc,%esp
f0113b5d:	68 18 9f 13 f0       	push   $0xf0139f18
f0113b62:	e8 1b d1 fe ff       	call   f0100c82 <cprintf>
f0113b67:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113b6a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0113b6f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113b72:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b75:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113b78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113b7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113b80:	5b                   	pop    %ebx
f0113b81:	5e                   	pop    %esi
f0113b82:	5f                   	pop    %edi
f0113b83:	5d                   	pop    %ebp
f0113b84:	c3                   	ret    

f0113b85 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113b85:	55                   	push   %ebp
f0113b86:	89 e5                	mov    %esp,%ebp
f0113b88:	57                   	push   %edi
f0113b89:	56                   	push   %esi
f0113b8a:	53                   	push   %ebx
f0113b8b:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113b91:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113b97:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f0113b9c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ba1:	89 c7                	mov    %eax,%edi
f0113ba3:	89 de                	mov    %ebx,%esi
f0113ba5:	89 d1                	mov    %edx,%ecx
f0113ba7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ba9:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113baf:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113bb4:	b0 00                	mov    $0x0,%al
f0113bb6:	89 d7                	mov    %edx,%edi
f0113bb8:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113bba:	6a 00                	push   $0x0
f0113bbc:	6a 0a                	push   $0xa
f0113bbe:	6a 14                	push   $0x14
f0113bc0:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113bc6:	50                   	push   %eax
f0113bc7:	e8 25 52 ff ff       	call   f0108df1 <env_create>
f0113bcc:	83 c4 10             	add    $0x10,%esp
f0113bcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113bd2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113bd5:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113bd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113bdb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113bde:	8b 40 60             	mov    0x60(%eax),%eax
f0113be1:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113be4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113be7:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113bea:	83 ec 0c             	sub    $0xc,%esp
f0113bed:	ff 75 d0             	pushl  -0x30(%ebp)
f0113bf0:	e8 32 20 00 00       	call   f0115c27 <ClearUserSpace>
f0113bf5:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113bf8:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113bff:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113c06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113c0d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113c11:	83 ec 0c             	sub    $0xc,%esp
f0113c14:	68 54 9f 13 f0       	push   $0xf0139f54
f0113c19:	e8 64 d0 fe ff       	call   f0100c82 <cprintf>
f0113c1e:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113c21:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113c28:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113c2f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c32:	8a 00                	mov    (%eax),%al
f0113c34:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113c3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c3d:	8a 00                	mov    (%eax),%al
f0113c3f:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113c45:	83 ec 08             	sub    $0x8,%esp
f0113c48:	68 00 f0 bf ef       	push   $0xefbff000
f0113c4d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113c50:	e8 b3 1f 00 00       	call   f0115c08 <GP>
f0113c55:	83 c4 10             	add    $0x10,%esp
f0113c58:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c5b:	e8 f1 8d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113c60:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113c63:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c66:	c1 e0 02             	shl    $0x2,%eax
f0113c69:	6a 02                	push   $0x2
f0113c6b:	50                   	push   %eax
f0113c6c:	68 00 f0 bf ef       	push   $0xefbff000
f0113c71:	ff 75 d0             	pushl  -0x30(%ebp)
f0113c74:	e8 3a 4e ff ff       	call   f0108ab3 <allocate_chunk>
f0113c79:	83 c4 10             	add    $0x10,%esp
f0113c7c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c7f:	e8 cd 8d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113c84:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113c87:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113c8b:	75 08                	jne    f0113c95 <test_allocate_chunk+0x110>
f0113c8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c90:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113c93:	74 2a                	je     f0113cbf <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113c95:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c98:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c9b:	83 ec 08             	sub    $0x8,%esp
f0113c9e:	6a 00                	push   $0x0
f0113ca0:	50                   	push   %eax
f0113ca1:	ff 75 b0             	pushl  -0x50(%ebp)
f0113ca4:	68 80 9f 13 f0       	push   $0xf0139f80
f0113ca9:	68 c3 04 00 00       	push   $0x4c3
f0113cae:	68 7e 86 13 f0       	push   $0xf013867e
f0113cb3:	e8 cf c6 fe ff       	call   f0100387 <_warn>
f0113cb8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cbb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113cbf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cc3:	74 04                	je     f0113cc9 <test_allocate_chunk+0x144>
f0113cc5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113cc9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ccd:	e8 7f 8d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113cd2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113cd5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113cd8:	01 c0                	add    %eax,%eax
f0113cda:	89 c1                	mov    %eax,%ecx
f0113cdc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113cdf:	89 d0                	mov    %edx,%eax
f0113ce1:	c1 e0 02             	shl    $0x2,%eax
f0113ce4:	01 d0                	add    %edx,%eax
f0113ce6:	f7 d8                	neg    %eax
f0113ce8:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113ced:	6a 02                	push   $0x2
f0113cef:	51                   	push   %ecx
f0113cf0:	50                   	push   %eax
f0113cf1:	ff 75 d0             	pushl  -0x30(%ebp)
f0113cf4:	e8 ba 4d ff ff       	call   f0108ab3 <allocate_chunk>
f0113cf9:	83 c4 10             	add    $0x10,%esp
f0113cfc:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113cff:	e8 4d 8d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113d04:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113d07:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113d0b:	75 08                	jne    f0113d15 <test_allocate_chunk+0x190>
f0113d0d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d10:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113d13:	74 2a                	je     f0113d3f <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113d15:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d18:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d1b:	83 ec 08             	sub    $0x8,%esp
f0113d1e:	6a 00                	push   $0x0
f0113d20:	50                   	push   %eax
f0113d21:	ff 75 b0             	pushl  -0x50(%ebp)
f0113d24:	68 80 9f 13 f0       	push   $0xf0139f80
f0113d29:	68 d1 04 00 00       	push   $0x4d1
f0113d2e:	68 7e 86 13 f0       	push   $0xf013867e
f0113d33:	e8 4f c6 fe ff       	call   f0100387 <_warn>
f0113d38:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d3b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113d3f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d43:	74 04                	je     f0113d49 <test_allocate_chunk+0x1c4>
f0113d45:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d49:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113d4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113d50:	c1 e0 02             	shl    $0x2,%eax
f0113d53:	83 ec 08             	sub    $0x8,%esp
f0113d56:	6a 03                	push   $0x3
f0113d58:	6a 00                	push   $0x0
f0113d5a:	6a 00                	push   $0x0
f0113d5c:	68 ff 0f 00 00       	push   $0xfff
f0113d61:	ff 75 b8             	pushl  -0x48(%ebp)
f0113d64:	6a 01                	push   $0x1
f0113d66:	50                   	push   %eax
f0113d67:	68 00 f0 bf ef       	push   $0xefbff000
f0113d6c:	6a 00                	push   $0x0
f0113d6e:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d71:	e8 e5 1e 00 00       	call   f0115c5b <CCP>
f0113d76:	83 c4 30             	add    $0x30,%esp
f0113d79:	85 c0                	test   %eax,%eax
f0113d7b:	75 1e                	jne    f0113d9b <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113d7d:	83 ec 04             	sub    $0x4,%esp
f0113d80:	68 e8 9f 13 f0       	push   $0xf0139fe8
f0113d85:	68 d9 04 00 00       	push   $0x4d9
f0113d8a:	68 7e 86 13 f0       	push   $0xf013867e
f0113d8f:	e8 f3 c5 fe ff       	call   f0100387 <_warn>
f0113d94:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d97:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d9b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d9f:	74 04                	je     f0113da5 <test_allocate_chunk+0x220>
f0113da1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113da5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113da9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113dac:	8a 10                	mov    (%eax),%dl
f0113dae:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113db4:	38 c2                	cmp    %al,%dl
f0113db6:	75 0f                	jne    f0113dc7 <test_allocate_chunk+0x242>
f0113db8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dbb:	8a 10                	mov    (%eax),%dl
f0113dbd:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113dc3:	38 c2                	cmp    %al,%dl
f0113dc5:	74 1e                	je     f0113de5 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113dc7:	83 ec 04             	sub    $0x4,%esp
f0113dca:	68 34 a0 13 f0       	push   $0xf013a034
f0113dcf:	68 e1 04 00 00       	push   $0x4e1
f0113dd4:	68 7e 86 13 f0       	push   $0xf013867e
f0113dd9:	e8 a9 c5 fe ff       	call   f0100387 <_warn>
f0113dde:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113de1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113de5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113de9:	74 04                	je     f0113def <test_allocate_chunk+0x26a>
f0113deb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113def:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113df3:	83 ec 0c             	sub    $0xc,%esp
f0113df6:	68 c9 9d 13 f0       	push   $0xf0139dc9
f0113dfb:	e8 82 ce fe ff       	call   f0100c82 <cprintf>
f0113e00:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113e03:	83 ec 0c             	sub    $0xc,%esp
f0113e06:	68 6c a0 13 f0       	push   $0xf013a06c
f0113e0b:	e8 72 ce fe ff       	call   f0100c82 <cprintf>
f0113e10:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e13:	e8 39 8c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113e18:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113e1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e1e:	c1 e0 05             	shl    $0x5,%eax
f0113e21:	68 02 0e 00 00       	push   $0xe02
f0113e26:	50                   	push   %eax
f0113e27:	6a 00                	push   $0x0
f0113e29:	ff 75 d0             	pushl  -0x30(%ebp)
f0113e2c:	e8 82 4c ff ff       	call   f0108ab3 <allocate_chunk>
f0113e31:	83 c4 10             	add    $0x10,%esp
f0113e34:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e37:	e8 15 8c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113e3c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113e3f:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113e43:	75 36                	jne    f0113e7b <test_allocate_chunk+0x2f6>
f0113e45:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e48:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e4b:	89 c1                	mov    %eax,%ecx
f0113e4d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e50:	c1 e0 05             	shl    $0x5,%eax
f0113e53:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e56:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113e5d:	99                   	cltd   
f0113e5e:	f7 fe                	idiv   %esi
f0113e60:	89 c3                	mov    %eax,%ebx
f0113e62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e65:	c1 e0 05             	shl    $0x5,%eax
f0113e68:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113e6b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113e72:	99                   	cltd   
f0113e73:	f7 fe                	idiv   %esi
f0113e75:	01 d8                	add    %ebx,%eax
f0113e77:	39 c1                	cmp    %eax,%ecx
f0113e79:	74 54                	je     f0113ecf <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113e7b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e7e:	c1 e0 05             	shl    $0x5,%eax
f0113e81:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e84:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113e8b:	99                   	cltd   
f0113e8c:	f7 ff                	idiv   %edi
f0113e8e:	89 c1                	mov    %eax,%ecx
f0113e90:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e93:	c1 e0 05             	shl    $0x5,%eax
f0113e96:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113e99:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ea0:	99                   	cltd   
f0113ea1:	f7 fe                	idiv   %esi
f0113ea3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113ea6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ea9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113eac:	83 ec 08             	sub    $0x8,%esp
f0113eaf:	52                   	push   %edx
f0113eb0:	50                   	push   %eax
f0113eb1:	ff 75 a8             	pushl  -0x58(%ebp)
f0113eb4:	68 ac a0 13 f0       	push   $0xf013a0ac
f0113eb9:	68 f6 04 00 00       	push   $0x4f6
f0113ebe:	68 7e 86 13 f0       	push   $0xf013867e
f0113ec3:	e8 bf c4 fe ff       	call   f0100387 <_warn>
f0113ec8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ecb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ecf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ed3:	74 04                	je     f0113ed9 <test_allocate_chunk+0x354>
f0113ed5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ed9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113edd:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113ee4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ee7:	c1 e0 05             	shl    $0x5,%eax
f0113eea:	83 ec 08             	sub    $0x8,%esp
f0113eed:	6a 03                	push   $0x3
f0113eef:	6a 00                	push   $0x0
f0113ef1:	6a 00                	push   $0x0
f0113ef3:	68 07 0e 00 00       	push   $0xe07
f0113ef8:	68 03 0e 00 00       	push   $0xe03
f0113efd:	6a 01                	push   $0x1
f0113eff:	50                   	push   %eax
f0113f00:	6a 00                	push   $0x0
f0113f02:	6a 00                	push   $0x0
f0113f04:	ff 75 d0             	pushl  -0x30(%ebp)
f0113f07:	e8 4f 1d 00 00       	call   f0115c5b <CCP>
f0113f0c:	83 c4 30             	add    $0x30,%esp
f0113f0f:	85 c0                	test   %eax,%eax
f0113f11:	75 25                	jne    f0113f38 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113f13:	83 ec 04             	sub    $0x4,%esp
f0113f16:	68 e8 9f 13 f0       	push   $0xf0139fe8
f0113f1b:	68 ff 04 00 00       	push   $0x4ff
f0113f20:	68 7e 86 13 f0       	push   $0xf013867e
f0113f25:	e8 5d c4 fe ff       	call   f0100387 <_warn>
f0113f2a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f31:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113f38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f3c:	74 04                	je     f0113f42 <test_allocate_chunk+0x3bd>
f0113f3e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113f46:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113f4a:	74 5a                	je     f0113fa6 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0113f4c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f4f:	01 c0                	add    %eax,%eax
f0113f51:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113f54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113f57:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113f5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f5d:	01 c0                	add    %eax,%eax
f0113f5f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113f62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f65:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113f68:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113f6b:	8a 00                	mov    (%eax),%al
f0113f6d:	3c 4b                	cmp    $0x4b,%al
f0113f6f:	75 09                	jne    f0113f7a <test_allocate_chunk+0x3f5>
f0113f71:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f74:	8a 00                	mov    (%eax),%al
f0113f76:	3c 4d                	cmp    $0x4d,%al
f0113f78:	74 1e                	je     f0113f98 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113f7a:	83 ec 04             	sub    $0x4,%esp
f0113f7d:	68 34 a0 13 f0       	push   $0xf013a034
f0113f82:	68 0d 05 00 00       	push   $0x50d
f0113f87:	68 7e 86 13 f0       	push   $0xf013867e
f0113f8c:	e8 f6 c3 fe ff       	call   f0100387 <_warn>
f0113f91:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f94:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f98:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f9c:	74 04                	je     f0113fa2 <test_allocate_chunk+0x41d>
f0113f9e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113fa2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113fa6:	83 ec 0c             	sub    $0xc,%esp
f0113fa9:	68 a3 93 13 f0       	push   $0xf01393a3
f0113fae:	e8 cf cc fe ff       	call   f0100c82 <cprintf>
f0113fb3:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113fb6:	83 ec 0c             	sub    $0xc,%esp
f0113fb9:	68 0c a1 13 f0       	push   $0xf013a10c
f0113fbe:	e8 bf cc fe ff       	call   f0100c82 <cprintf>
f0113fc3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113fc6:	e8 86 8a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113fcb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113fce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fd1:	c1 e0 06             	shl    $0x6,%eax
f0113fd4:	89 c2                	mov    %eax,%edx
f0113fd6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fd9:	c1 e0 05             	shl    $0x5,%eax
f0113fdc:	6a 00                	push   $0x0
f0113fde:	52                   	push   %edx
f0113fdf:	50                   	push   %eax
f0113fe0:	ff 75 d0             	pushl  -0x30(%ebp)
f0113fe3:	e8 cb 4a ff ff       	call   f0108ab3 <allocate_chunk>
f0113fe8:	83 c4 10             	add    $0x10,%esp
f0113feb:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113fee:	e8 5e 8a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0113ff3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113ff6:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113ffa:	75 36                	jne    f0114032 <test_allocate_chunk+0x4ad>
f0113ffc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fff:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114002:	89 c1                	mov    %eax,%ecx
f0114004:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114007:	c1 e0 06             	shl    $0x6,%eax
f011400a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011400d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114014:	99                   	cltd   
f0114015:	f7 ff                	idiv   %edi
f0114017:	89 c3                	mov    %eax,%ebx
f0114019:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011401c:	c1 e0 06             	shl    $0x6,%eax
f011401f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114022:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114029:	99                   	cltd   
f011402a:	f7 fe                	idiv   %esi
f011402c:	01 d8                	add    %ebx,%eax
f011402e:	39 c1                	cmp    %eax,%ecx
f0114030:	74 54                	je     f0114086 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114032:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114035:	c1 e0 06             	shl    $0x6,%eax
f0114038:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011403b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114042:	99                   	cltd   
f0114043:	f7 fb                	idiv   %ebx
f0114045:	89 c1                	mov    %eax,%ecx
f0114047:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011404a:	c1 e0 06             	shl    $0x6,%eax
f011404d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114050:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114057:	99                   	cltd   
f0114058:	f7 ff                	idiv   %edi
f011405a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011405d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114060:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114063:	83 ec 08             	sub    $0x8,%esp
f0114066:	52                   	push   %edx
f0114067:	50                   	push   %eax
f0114068:	ff 75 a4             	pushl  -0x5c(%ebp)
f011406b:	68 ac a0 13 f0       	push   $0xf013a0ac
f0114070:	68 23 05 00 00       	push   $0x523
f0114075:	68 7e 86 13 f0       	push   $0xf013867e
f011407a:	e8 08 c3 fe ff       	call   f0100387 <_warn>
f011407f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114082:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114086:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011408a:	74 04                	je     f0114090 <test_allocate_chunk+0x50b>
f011408c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114090:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114094:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011409b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011409e:	c1 e0 06             	shl    $0x6,%eax
f01140a1:	89 c2                	mov    %eax,%edx
f01140a3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01140a6:	c1 e0 05             	shl    $0x5,%eax
f01140a9:	83 ec 08             	sub    $0x8,%esp
f01140ac:	6a 03                	push   $0x3
f01140ae:	6a 00                	push   $0x0
f01140b0:	6a 00                	push   $0x0
f01140b2:	68 07 0e 00 00       	push   $0xe07
f01140b7:	6a 01                	push   $0x1
f01140b9:	6a 01                	push   $0x1
f01140bb:	52                   	push   %edx
f01140bc:	50                   	push   %eax
f01140bd:	6a 00                	push   $0x0
f01140bf:	ff 75 d0             	pushl  -0x30(%ebp)
f01140c2:	e8 94 1b 00 00       	call   f0115c5b <CCP>
f01140c7:	83 c4 30             	add    $0x30,%esp
f01140ca:	85 c0                	test   %eax,%eax
f01140cc:	75 25                	jne    f01140f3 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01140ce:	83 ec 04             	sub    $0x4,%esp
f01140d1:	68 e8 9f 13 f0       	push   $0xf0139fe8
f01140d6:	68 2c 05 00 00       	push   $0x52c
f01140db:	68 7e 86 13 f0       	push   $0xf013867e
f01140e0:	e8 a2 c2 fe ff       	call   f0100387 <_warn>
f01140e5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140ec:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f01140f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140f7:	74 04                	je     f01140fd <test_allocate_chunk+0x578>
f01140f9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01140fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114101:	83 ec 0c             	sub    $0xc,%esp
f0114104:	68 06 94 13 f0       	push   $0xf0139406
f0114109:	e8 74 cb fe ff       	call   f0100c82 <cprintf>
f011410e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114111:	83 ec 0c             	sub    $0xc,%esp
f0114114:	68 4c a1 13 f0       	push   $0xf013a14c
f0114119:	e8 64 cb fe ff       	call   f0100c82 <cprintf>
f011411e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114121:	e8 2b 89 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0114126:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114129:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011412c:	c1 e0 06             	shl    $0x6,%eax
f011412f:	68 06 0e 00 00       	push   $0xe06
f0114134:	50                   	push   %eax
f0114135:	68 00 00 00 80       	push   $0x80000000
f011413a:	ff 75 d0             	pushl  -0x30(%ebp)
f011413d:	e8 71 49 ff ff       	call   f0108ab3 <allocate_chunk>
f0114142:	83 c4 10             	add    $0x10,%esp
f0114145:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114148:	e8 04 89 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011414d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114150:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114154:	75 36                	jne    f011418c <test_allocate_chunk+0x607>
f0114156:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114159:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011415c:	89 c1                	mov    %eax,%ecx
f011415e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114161:	c1 e0 06             	shl    $0x6,%eax
f0114164:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114167:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011416e:	99                   	cltd   
f011416f:	f7 fb                	idiv   %ebx
f0114171:	89 c3                	mov    %eax,%ebx
f0114173:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114176:	c1 e0 06             	shl    $0x6,%eax
f0114179:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011417c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114183:	99                   	cltd   
f0114184:	f7 fe                	idiv   %esi
f0114186:	01 d8                	add    %ebx,%eax
f0114188:	39 c1                	cmp    %eax,%ecx
f011418a:	74 54                	je     f01141e0 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f011418c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011418f:	c1 e0 06             	shl    $0x6,%eax
f0114192:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114195:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011419c:	99                   	cltd   
f011419d:	f7 ff                	idiv   %edi
f011419f:	89 c1                	mov    %eax,%ecx
f01141a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141a4:	c1 e0 06             	shl    $0x6,%eax
f01141a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01141aa:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01141b1:	99                   	cltd   
f01141b2:	f7 fb                	idiv   %ebx
f01141b4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01141b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141ba:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141bd:	83 ec 08             	sub    $0x8,%esp
f01141c0:	52                   	push   %edx
f01141c1:	50                   	push   %eax
f01141c2:	ff 75 9c             	pushl  -0x64(%ebp)
f01141c5:	68 ac a0 13 f0       	push   $0xf013a0ac
f01141ca:	68 42 05 00 00       	push   $0x542
f01141cf:	68 7e 86 13 f0       	push   $0xf013867e
f01141d4:	e8 ae c1 fe ff       	call   f0100387 <_warn>
f01141d9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141dc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141e0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141e4:	74 04                	je     f01141ea <test_allocate_chunk+0x665>
f01141e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141ea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141ee:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01141f5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141f8:	c1 e0 06             	shl    $0x6,%eax
f01141fb:	83 ec 08             	sub    $0x8,%esp
f01141fe:	6a 03                	push   $0x3
f0114200:	6a 00                	push   $0x0
f0114202:	6a 00                	push   $0x0
f0114204:	68 07 0e 00 00       	push   $0xe07
f0114209:	68 07 0e 00 00       	push   $0xe07
f011420e:	6a 01                	push   $0x1
f0114210:	50                   	push   %eax
f0114211:	68 00 00 00 80       	push   $0x80000000
f0114216:	6a 00                	push   $0x0
f0114218:	ff 75 d0             	pushl  -0x30(%ebp)
f011421b:	e8 3b 1a 00 00       	call   f0115c5b <CCP>
f0114220:	83 c4 30             	add    $0x30,%esp
f0114223:	85 c0                	test   %eax,%eax
f0114225:	75 25                	jne    f011424c <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114227:	83 ec 04             	sub    $0x4,%esp
f011422a:	68 e8 9f 13 f0       	push   $0xf0139fe8
f011422f:	68 4b 05 00 00       	push   $0x54b
f0114234:	68 7e 86 13 f0       	push   $0xf013867e
f0114239:	e8 49 c1 fe ff       	call   f0100387 <_warn>
f011423e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114241:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114245:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f011424c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114250:	74 04                	je     f0114256 <test_allocate_chunk+0x6d1>
f0114252:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114256:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011425a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011425e:	74 6f                	je     f01142cf <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114260:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114263:	01 c0                	add    %eax,%eax
f0114265:	05 00 00 00 80       	add    $0x80000000,%eax
f011426a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011426d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114270:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114273:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114276:	89 d0                	mov    %edx,%eax
f0114278:	c1 e0 02             	shl    $0x2,%eax
f011427b:	01 d0                	add    %edx,%eax
f011427d:	01 c0                	add    %eax,%eax
f011427f:	01 d0                	add    %edx,%eax
f0114281:	01 c0                	add    %eax,%eax
f0114283:	05 00 00 00 80       	add    $0x80000000,%eax
f0114288:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011428b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011428e:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114291:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114294:	8a 00                	mov    (%eax),%al
f0114296:	3c 4b                	cmp    $0x4b,%al
f0114298:	75 09                	jne    f01142a3 <test_allocate_chunk+0x71e>
f011429a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011429d:	8a 00                	mov    (%eax),%al
f011429f:	3c 4d                	cmp    $0x4d,%al
f01142a1:	74 1e                	je     f01142c1 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01142a3:	83 ec 04             	sub    $0x4,%esp
f01142a6:	68 34 a0 13 f0       	push   $0xf013a034
f01142ab:	68 59 05 00 00       	push   $0x559
f01142b0:	68 7e 86 13 f0       	push   $0xf013867e
f01142b5:	e8 cd c0 fe ff       	call   f0100387 <_warn>
f01142ba:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142c1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142c5:	74 04                	je     f01142cb <test_allocate_chunk+0x746>
f01142c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142cb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01142cf:	83 ec 0c             	sub    $0xc,%esp
f01142d2:	68 d8 9e 13 f0       	push   $0xf0139ed8
f01142d7:	e8 a6 c9 fe ff       	call   f0100c82 <cprintf>
f01142dc:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01142df:	83 ec 0c             	sub    $0xc,%esp
f01142e2:	68 88 a1 13 f0       	push   $0xf013a188
f01142e7:	e8 96 c9 fe ff       	call   f0100c82 <cprintf>
f01142ec:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01142ef:	e8 5d 87 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01142f4:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01142f7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01142fa:	89 d0                	mov    %edx,%eax
f01142fc:	01 c0                	add    %eax,%eax
f01142fe:	01 d0                	add    %edx,%eax
f0114300:	01 c0                	add    %eax,%eax
f0114302:	01 d0                	add    %edx,%eax
f0114304:	68 04 0e 00 00       	push   $0xe04
f0114309:	50                   	push   %eax
f011430a:	68 00 fc 3f 40       	push   $0x403ffc00
f011430f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114312:	e8 9c 47 ff ff       	call   f0108ab3 <allocate_chunk>
f0114317:	83 c4 10             	add    $0x10,%esp
f011431a:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011431d:	e8 2f 87 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0114322:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114325:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114329:	75 0b                	jne    f0114336 <test_allocate_chunk+0x7b1>
f011432b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011432e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114331:	83 f8 05             	cmp    $0x5,%eax
f0114334:	74 2a                	je     f0114360 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114336:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114339:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011433c:	83 ec 08             	sub    $0x8,%esp
f011433f:	6a 05                	push   $0x5
f0114341:	50                   	push   %eax
f0114342:	ff 75 98             	pushl  -0x68(%ebp)
f0114345:	68 ac a0 13 f0       	push   $0xf013a0ac
f011434a:	68 70 05 00 00       	push   $0x570
f011434f:	68 7e 86 13 f0       	push   $0xf013867e
f0114354:	e8 2e c0 fe ff       	call   f0100387 <_warn>
f0114359:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011435c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114360:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114364:	74 04                	je     f011436a <test_allocate_chunk+0x7e5>
f0114366:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011436a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011436e:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114375:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114378:	89 d0                	mov    %edx,%eax
f011437a:	01 c0                	add    %eax,%eax
f011437c:	01 d0                	add    %edx,%eax
f011437e:	c1 e0 02             	shl    $0x2,%eax
f0114381:	83 ec 08             	sub    $0x8,%esp
f0114384:	6a 03                	push   $0x3
f0114386:	6a 00                	push   $0x0
f0114388:	6a 00                	push   $0x0
f011438a:	68 07 0e 00 00       	push   $0xe07
f011438f:	68 05 0e 00 00       	push   $0xe05
f0114394:	6a 01                	push   $0x1
f0114396:	50                   	push   %eax
f0114397:	68 00 f0 3f 40       	push   $0x403ff000
f011439c:	6a 00                	push   $0x0
f011439e:	ff 75 d0             	pushl  -0x30(%ebp)
f01143a1:	e8 b5 18 00 00       	call   f0115c5b <CCP>
f01143a6:	83 c4 30             	add    $0x30,%esp
f01143a9:	85 c0                	test   %eax,%eax
f01143ab:	75 25                	jne    f01143d2 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01143ad:	83 ec 04             	sub    $0x4,%esp
f01143b0:	68 e8 9f 13 f0       	push   $0xf0139fe8
f01143b5:	68 79 05 00 00       	push   $0x579
f01143ba:	68 7e 86 13 f0       	push   $0xf013867e
f01143bf:	e8 c3 bf fe ff       	call   f0100387 <_warn>
f01143c4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01143cb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01143d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143d6:	74 04                	je     f01143dc <test_allocate_chunk+0x857>
f01143d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01143e0:	83 ec 0c             	sub    $0xc,%esp
f01143e3:	68 bf a1 13 f0       	push   $0xf013a1bf
f01143e8:	e8 95 c8 fe ff       	call   f0100c82 <cprintf>
f01143ed:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01143f0:	83 ec 08             	sub    $0x8,%esp
f01143f3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01143f6:	68 d0 a1 13 f0       	push   $0xf013a1d0
f01143fb:	e8 82 c8 fe ff       	call   f0100c82 <cprintf>
f0114400:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114403:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114407:	75 10                	jne    f0114419 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114409:	83 ec 0c             	sub    $0xc,%esp
f011440c:	68 04 a2 13 f0       	push   $0xf013a204
f0114411:	e8 6c c8 fe ff       	call   f0100c82 <cprintf>
f0114416:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114419:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f011441e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114421:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114424:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114427:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011442c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011442f:	5b                   	pop    %ebx
f0114430:	5e                   	pop    %esi
f0114431:	5f                   	pop    %edi
f0114432:	5d                   	pop    %ebp
f0114433:	c3                   	ret    

f0114434 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114434:	55                   	push   %ebp
f0114435:	89 e5                	mov    %esp,%ebp
f0114437:	57                   	push   %edi
f0114438:	56                   	push   %esi
f0114439:	53                   	push   %ebx
f011443a:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114440:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114443:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f0114448:	ba 0f 00 00 00       	mov    $0xf,%edx
f011444d:	89 c7                	mov    %eax,%edi
f011444f:	89 de                	mov    %ebx,%esi
f0114451:	89 d1                	mov    %edx,%ecx
f0114453:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114455:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114458:	b9 23 00 00 00       	mov    $0x23,%ecx
f011445d:	b0 00                	mov    $0x0,%al
f011445f:	89 d7                	mov    %edx,%edi
f0114461:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114463:	6a 00                	push   $0x0
f0114465:	6a 0a                	push   $0xa
f0114467:	6a 14                	push   $0x14
f0114469:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011446c:	50                   	push   %eax
f011446d:	e8 7f 49 ff ff       	call   f0108df1 <env_create>
f0114472:	83 c4 10             	add    $0x10,%esp
f0114475:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114478:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011447b:	8b 40 5c             	mov    0x5c(%eax),%eax
f011447e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114481:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114484:	8b 40 60             	mov    0x60(%eax),%eax
f0114487:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011448a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011448d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114490:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114497:	75 70 20 
f011449a:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01144a1:	00 00 00 
f01144a4:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01144a7:	b9 03 00 00 00       	mov    $0x3,%ecx
f01144ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01144b1:	89 d7                	mov    %edx,%edi
f01144b3:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01144b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01144b8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01144bb:	83 ec 08             	sub    $0x8,%esp
f01144be:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01144c4:	52                   	push   %edx
f01144c5:	50                   	push   %eax
f01144c6:	e8 5b cd 01 00       	call   f0131226 <ltostr>
f01144cb:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01144ce:	83 ec 04             	sub    $0x4,%esp
f01144d1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01144d7:	50                   	push   %eax
f01144d8:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01144de:	50                   	push   %eax
f01144df:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01144e5:	50                   	push   %eax
f01144e6:	e8 33 ce 01 00       	call   f013131e <strcconcat>
f01144eb:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01144ee:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01144f5:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01144fc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114503:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011450a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f011450e:	83 ec 0c             	sub    $0xc,%esp
f0114511:	ff 75 d8             	pushl  -0x28(%ebp)
f0114514:	e8 0e 17 00 00       	call   f0115c27 <ClearUserSpace>
f0114519:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011451c:	83 ec 0c             	sub    $0xc,%esp
f011451f:	68 44 a2 13 f0       	push   $0xf013a244
f0114524:	e8 59 c7 fe ff       	call   f0100c82 <cprintf>
f0114529:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011452c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011452f:	c1 e0 03             	shl    $0x3,%eax
f0114532:	83 ec 04             	sub    $0x4,%esp
f0114535:	50                   	push   %eax
f0114536:	6a 00                	push   $0x0
f0114538:	ff 75 d8             	pushl  -0x28(%ebp)
f011453b:	e8 8e 47 ff ff       	call   f0108cce <calculate_required_frames>
f0114540:	83 c4 10             	add    $0x10,%esp
f0114543:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114546:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011454a:	74 23                	je     f011456f <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011454c:	83 ec 0c             	sub    $0xc,%esp
f011454f:	6a 03                	push   $0x3
f0114551:	ff 75 c8             	pushl  -0x38(%ebp)
f0114554:	68 78 a2 13 f0       	push   $0xf013a278
f0114559:	68 b2 05 00 00       	push   $0x5b2
f011455e:	68 7e 86 13 f0       	push   $0xf013867e
f0114563:	e8 1f be fe ff       	call   f0100387 <_warn>
f0114568:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011456b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011456f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114573:	74 04                	je     f0114579 <test_calculate_required_frames+0x145>
f0114575:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114579:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f011457d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114580:	c1 e0 02             	shl    $0x2,%eax
f0114583:	83 ec 04             	sub    $0x4,%esp
f0114586:	50                   	push   %eax
f0114587:	6a 00                	push   $0x0
f0114589:	ff 75 d8             	pushl  -0x28(%ebp)
f011458c:	e8 3d 47 ff ff       	call   f0108cce <calculate_required_frames>
f0114591:	83 c4 10             	add    $0x10,%esp
f0114594:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114597:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f011459e:	74 26                	je     f01145c6 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01145a0:	83 ec 0c             	sub    $0xc,%esp
f01145a3:	68 01 04 00 00       	push   $0x401
f01145a8:	ff 75 c8             	pushl  -0x38(%ebp)
f01145ab:	68 78 a2 13 f0       	push   $0xf013a278
f01145b0:	68 bc 05 00 00       	push   $0x5bc
f01145b5:	68 7e 86 13 f0       	push   $0xf013867e
f01145ba:	e8 c8 bd fe ff       	call   f0100387 <_warn>
f01145bf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145c2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145c6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145ca:	74 04                	je     f01145d0 <test_calculate_required_frames+0x19c>
f01145cc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145d0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01145d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01145d7:	c1 e0 0a             	shl    $0xa,%eax
f01145da:	83 ec 04             	sub    $0x4,%esp
f01145dd:	50                   	push   %eax
f01145de:	6a 00                	push   $0x0
f01145e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01145e3:	e8 e6 46 ff ff       	call   f0108cce <calculate_required_frames>
f01145e8:	83 c4 10             	add    $0x10,%esp
f01145eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01145ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01145f1:	c1 e0 0a             	shl    $0xa,%eax
f01145f4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01145f7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01145fe:	99                   	cltd   
f01145ff:	f7 fb                	idiv   %ebx
f0114601:	89 c1                	mov    %eax,%ecx
f0114603:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114606:	c1 e0 0a             	shl    $0xa,%eax
f0114609:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011460c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114613:	99                   	cltd   
f0114614:	f7 fe                	idiv   %esi
f0114616:	01 c8                	add    %ecx,%eax
f0114618:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011461b:	74 4c                	je     f0114669 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f011461d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114620:	c1 e0 0a             	shl    $0xa,%eax
f0114623:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114626:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011462d:	99                   	cltd   
f011462e:	f7 fb                	idiv   %ebx
f0114630:	89 c1                	mov    %eax,%ecx
f0114632:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114635:	c1 e0 0a             	shl    $0xa,%eax
f0114638:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011463b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114642:	99                   	cltd   
f0114643:	f7 fe                	idiv   %esi
f0114645:	01 c8                	add    %ecx,%eax
f0114647:	83 ec 0c             	sub    $0xc,%esp
f011464a:	50                   	push   %eax
f011464b:	ff 75 c8             	pushl  -0x38(%ebp)
f011464e:	68 78 a2 13 f0       	push   $0xf013a278
f0114653:	68 c6 05 00 00       	push   $0x5c6
f0114658:	68 7e 86 13 f0       	push   $0xf013867e
f011465d:	e8 25 bd fe ff       	call   f0100387 <_warn>
f0114662:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114665:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114669:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011466d:	74 04                	je     f0114673 <test_calculate_required_frames+0x23f>
f011466f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114673:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114677:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011467a:	89 d0                	mov    %edx,%eax
f011467c:	01 c0                	add    %eax,%eax
f011467e:	01 d0                	add    %edx,%eax
f0114680:	01 c0                	add    %eax,%eax
f0114682:	83 ec 04             	sub    $0x4,%esp
f0114685:	50                   	push   %eax
f0114686:	68 00 10 00 00       	push   $0x1000
f011468b:	ff 75 d8             	pushl  -0x28(%ebp)
f011468e:	e8 3b 46 ff ff       	call   f0108cce <calculate_required_frames>
f0114693:	83 c4 10             	add    $0x10,%esp
f0114696:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114699:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011469d:	74 23                	je     f01146c2 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011469f:	83 ec 0c             	sub    $0xc,%esp
f01146a2:	6a 03                	push   $0x3
f01146a4:	ff 75 c8             	pushl  -0x38(%ebp)
f01146a7:	68 78 a2 13 f0       	push   $0xf013a278
f01146ac:	68 d2 05 00 00       	push   $0x5d2
f01146b1:	68 7e 86 13 f0       	push   $0xf013867e
f01146b6:	e8 cc bc fe ff       	call   f0100387 <_warn>
f01146bb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146be:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146c2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146c6:	74 04                	je     f01146cc <test_calculate_required_frames+0x298>
f01146c8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146cc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01146d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01146d3:	89 c2                	mov    %eax,%edx
f01146d5:	01 d2                	add    %edx,%edx
f01146d7:	01 d0                	add    %edx,%eax
f01146d9:	83 ec 04             	sub    $0x4,%esp
f01146dc:	50                   	push   %eax
f01146dd:	68 00 18 00 00       	push   $0x1800
f01146e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01146e5:	e8 e4 45 ff ff       	call   f0108cce <calculate_required_frames>
f01146ea:	83 c4 10             	add    $0x10,%esp
f01146ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01146f0:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01146f4:	74 23                	je     f0114719 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01146f6:	83 ec 0c             	sub    $0xc,%esp
f01146f9:	6a 03                	push   $0x3
f01146fb:	ff 75 c8             	pushl  -0x38(%ebp)
f01146fe:	68 78 a2 13 f0       	push   $0xf013a278
f0114703:	68 dc 05 00 00       	push   $0x5dc
f0114708:	68 7e 86 13 f0       	push   $0xf013867e
f011470d:	e8 75 bc fe ff       	call   f0100387 <_warn>
f0114712:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114715:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114719:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011471d:	74 04                	je     f0114723 <test_calculate_required_frames+0x2ef>
f011471f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114723:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114727:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011472a:	89 d0                	mov    %edx,%eax
f011472c:	c1 e0 02             	shl    $0x2,%eax
f011472f:	01 d0                	add    %edx,%eax
f0114731:	01 c0                	add    %eax,%eax
f0114733:	83 ec 04             	sub    $0x4,%esp
f0114736:	50                   	push   %eax
f0114737:	68 00 00 40 00       	push   $0x400000
f011473c:	ff 75 d8             	pushl  -0x28(%ebp)
f011473f:	e8 8a 45 ff ff       	call   f0108cce <calculate_required_frames>
f0114744:	83 c4 10             	add    $0x10,%esp
f0114747:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011474a:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114751:	74 26                	je     f0114779 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114753:	83 ec 0c             	sub    $0xc,%esp
f0114756:	68 03 0a 00 00       	push   $0xa03
f011475b:	ff 75 c8             	pushl  -0x38(%ebp)
f011475e:	68 78 a2 13 f0       	push   $0xf013a278
f0114763:	68 e6 05 00 00       	push   $0x5e6
f0114768:	68 7e 86 13 f0       	push   $0xf013867e
f011476d:	e8 15 bc fe ff       	call   f0100387 <_warn>
f0114772:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114775:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114779:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011477d:	74 04                	je     f0114783 <test_calculate_required_frames+0x34f>
f011477f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114783:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114787:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011478a:	01 c0                	add    %eax,%eax
f011478c:	83 ec 04             	sub    $0x4,%esp
f011478f:	50                   	push   %eax
f0114790:	68 00 00 70 00       	push   $0x700000
f0114795:	ff 75 d8             	pushl  -0x28(%ebp)
f0114798:	e8 31 45 ff ff       	call   f0108cce <calculate_required_frames>
f011479d:	83 c4 10             	add    $0x10,%esp
f01147a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01147a3:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01147aa:	74 26                	je     f01147d2 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01147ac:	83 ec 0c             	sub    $0xc,%esp
f01147af:	68 02 02 00 00       	push   $0x202
f01147b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01147b7:	68 78 a2 13 f0       	push   $0xf013a278
f01147bc:	68 f2 05 00 00       	push   $0x5f2
f01147c1:	68 7e 86 13 f0       	push   $0xf013867e
f01147c6:	e8 bc bb fe ff       	call   f0100387 <_warn>
f01147cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01147d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147d6:	74 04                	je     f01147dc <test_calculate_required_frames+0x3a8>
f01147d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01147dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01147e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01147e3:	83 ec 04             	sub    $0x4,%esp
f01147e6:	50                   	push   %eax
f01147e7:	68 ff ff 3f 00       	push   $0x3fffff
f01147ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01147ef:	e8 da 44 ff ff       	call   f0108cce <calculate_required_frames>
f01147f4:	83 c4 10             	add    $0x10,%esp
f01147f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01147fa:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01147fe:	74 23                	je     f0114823 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114800:	83 ec 0c             	sub    $0xc,%esp
f0114803:	6a 04                	push   $0x4
f0114805:	ff 75 c8             	pushl  -0x38(%ebp)
f0114808:	68 78 a2 13 f0       	push   $0xf013a278
f011480d:	68 fc 05 00 00       	push   $0x5fc
f0114812:	68 7e 86 13 f0       	push   $0xf013867e
f0114817:	e8 6b bb fe ff       	call   f0100387 <_warn>
f011481c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011481f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114823:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114827:	74 04                	je     f011482d <test_calculate_required_frames+0x3f9>
f0114829:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011482d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114831:	83 ec 0c             	sub    $0xc,%esp
f0114834:	68 c9 9d 13 f0       	push   $0xf0139dc9
f0114839:	e8 44 c4 fe ff       	call   f0100c82 <cprintf>
f011483e:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114841:	83 ec 0c             	sub    $0xc,%esp
f0114844:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114849:	e8 34 c4 fe ff       	call   f0100c82 <cprintf>
f011484e:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114851:	83 ec 04             	sub    $0x4,%esp
f0114854:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011485a:	50                   	push   %eax
f011485b:	68 82 91 13 f0       	push   $0xf0139182
f0114860:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114866:	50                   	push   %eax
f0114867:	e8 b2 ca 01 00       	call   f013131e <strcconcat>
f011486c:	83 c4 10             	add    $0x10,%esp
f011486f:	83 ec 0c             	sub    $0xc,%esp
f0114872:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114878:	50                   	push   %eax
f0114879:	e8 66 c4 fe ff       	call   f0100ce4 <execute_command>
f011487e:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114881:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114884:	c1 e0 03             	shl    $0x3,%eax
f0114887:	83 ec 04             	sub    $0x4,%esp
f011488a:	50                   	push   %eax
f011488b:	6a 00                	push   $0x0
f011488d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114890:	e8 39 44 ff ff       	call   f0108cce <calculate_required_frames>
f0114895:	83 c4 10             	add    $0x10,%esp
f0114898:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011489b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01148a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148a5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01148a8:	74 24                	je     f01148ce <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01148aa:	83 ec 0c             	sub    $0xc,%esp
f01148ad:	ff 75 c4             	pushl  -0x3c(%ebp)
f01148b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01148b3:	68 78 a2 13 f0       	push   $0xf013a278
f01148b8:	68 10 06 00 00       	push   $0x610
f01148bd:	68 7e 86 13 f0       	push   $0xf013867e
f01148c2:	e8 c0 ba fe ff       	call   f0100387 <_warn>
f01148c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148d2:	74 04                	je     f01148d8 <test_calculate_required_frames+0x4a4>
f01148d4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01148dc:	83 ec 04             	sub    $0x4,%esp
f01148df:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01148e5:	50                   	push   %eax
f01148e6:	68 8f 91 13 f0       	push   $0xf013918f
f01148eb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01148f1:	50                   	push   %eax
f01148f2:	e8 27 ca 01 00       	call   f013131e <strcconcat>
f01148f7:	83 c4 10             	add    $0x10,%esp
f01148fa:	83 ec 0c             	sub    $0xc,%esp
f01148fd:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114903:	50                   	push   %eax
f0114904:	e8 db c3 fe ff       	call   f0100ce4 <execute_command>
f0114909:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011490c:	83 ec 04             	sub    $0x4,%esp
f011490f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114915:	50                   	push   %eax
f0114916:	68 04 a3 13 f0       	push   $0xf013a304
f011491b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114921:	50                   	push   %eax
f0114922:	e8 f7 c9 01 00       	call   f013131e <strcconcat>
f0114927:	83 c4 10             	add    $0x10,%esp
f011492a:	83 ec 0c             	sub    $0xc,%esp
f011492d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114933:	50                   	push   %eax
f0114934:	e8 ab c3 fe ff       	call   f0100ce4 <execute_command>
f0114939:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011493c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011493f:	c1 e0 03             	shl    $0x3,%eax
f0114942:	83 ec 04             	sub    $0x4,%esp
f0114945:	50                   	push   %eax
f0114946:	6a 00                	push   $0x0
f0114948:	ff 75 d8             	pushl  -0x28(%ebp)
f011494b:	e8 7e 43 ff ff       	call   f0108cce <calculate_required_frames>
f0114950:	83 c4 10             	add    $0x10,%esp
f0114953:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114956:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f011495d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114960:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114963:	74 24                	je     f0114989 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114965:	83 ec 0c             	sub    $0xc,%esp
f0114968:	ff 75 c4             	pushl  -0x3c(%ebp)
f011496b:	ff 75 c8             	pushl  -0x38(%ebp)
f011496e:	68 78 a2 13 f0       	push   $0xf013a278
f0114973:	68 1e 06 00 00       	push   $0x61e
f0114978:	68 7e 86 13 f0       	push   $0xf013867e
f011497d:	e8 05 ba fe ff       	call   f0100387 <_warn>
f0114982:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114985:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114989:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011498d:	74 04                	je     f0114993 <test_calculate_required_frames+0x55f>
f011498f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114993:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114997:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011499a:	c1 e0 0a             	shl    $0xa,%eax
f011499d:	83 ec 04             	sub    $0x4,%esp
f01149a0:	50                   	push   %eax
f01149a1:	6a 00                	push   $0x0
f01149a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01149a6:	e8 23 43 ff ff       	call   f0108cce <calculate_required_frames>
f01149ab:	83 c4 10             	add    $0x10,%esp
f01149ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01149b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149b4:	c1 e0 0a             	shl    $0xa,%eax
f01149b7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149ba:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01149c1:	99                   	cltd   
f01149c2:	f7 fb                	idiv   %ebx
f01149c4:	89 c1                	mov    %eax,%ecx
f01149c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149c9:	c1 e0 0a             	shl    $0xa,%eax
f01149cc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01149cf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149d6:	99                   	cltd   
f01149d7:	f7 fe                	idiv   %esi
f01149d9:	01 c8                	add    %ecx,%eax
f01149db:	83 e8 05             	sub    $0x5,%eax
f01149de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01149e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149e4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01149e7:	74 24                	je     f0114a0d <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01149e9:	83 ec 0c             	sub    $0xc,%esp
f01149ec:	ff 75 c4             	pushl  -0x3c(%ebp)
f01149ef:	ff 75 c8             	pushl  -0x38(%ebp)
f01149f2:	68 78 a2 13 f0       	push   $0xf013a278
f01149f7:	68 29 06 00 00       	push   $0x629
f01149fc:	68 7e 86 13 f0       	push   $0xf013867e
f0114a01:	e8 81 b9 fe ff       	call   f0100387 <_warn>
f0114a06:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114a0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a11:	74 04                	je     f0114a17 <test_calculate_required_frames+0x5e3>
f0114a13:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114a1b:	83 ec 04             	sub    $0x4,%esp
f0114a1e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a24:	50                   	push   %eax
f0114a25:	68 10 a3 13 f0       	push   $0xf013a310
f0114a2a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a30:	50                   	push   %eax
f0114a31:	e8 e8 c8 01 00       	call   f013131e <strcconcat>
f0114a36:	83 c4 10             	add    $0x10,%esp
f0114a39:	83 ec 0c             	sub    $0xc,%esp
f0114a3c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a42:	50                   	push   %eax
f0114a43:	e8 9c c2 fe ff       	call   f0100ce4 <execute_command>
f0114a48:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114a4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a4e:	89 c2                	mov    %eax,%edx
f0114a50:	01 d2                	add    %edx,%edx
f0114a52:	01 d0                	add    %edx,%eax
f0114a54:	83 ec 04             	sub    $0x4,%esp
f0114a57:	50                   	push   %eax
f0114a58:	68 00 18 00 00       	push   $0x1800
f0114a5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a60:	e8 69 42 ff ff       	call   f0108cce <calculate_required_frames>
f0114a65:	83 c4 10             	add    $0x10,%esp
f0114a68:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114a6b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114a72:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a75:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a78:	74 24                	je     f0114a9e <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114a7a:	83 ec 0c             	sub    $0xc,%esp
f0114a7d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a80:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a83:	68 78 a2 13 f0       	push   $0xf013a278
f0114a88:	68 38 06 00 00       	push   $0x638
f0114a8d:	68 7e 86 13 f0       	push   $0xf013867e
f0114a92:	e8 f0 b8 fe ff       	call   f0100387 <_warn>
f0114a97:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a9a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a9e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114aa2:	74 04                	je     f0114aa8 <test_calculate_required_frames+0x674>
f0114aa4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114aa8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114aac:	83 ec 04             	sub    $0x4,%esp
f0114aaf:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114ab5:	50                   	push   %eax
f0114ab6:	68 e8 93 13 f0       	push   $0xf01393e8
f0114abb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ac1:	50                   	push   %eax
f0114ac2:	e8 57 c8 01 00       	call   f013131e <strcconcat>
f0114ac7:	83 c4 10             	add    $0x10,%esp
f0114aca:	83 ec 0c             	sub    $0xc,%esp
f0114acd:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114ad3:	50                   	push   %eax
f0114ad4:	e8 0b c2 fe ff       	call   f0100ce4 <execute_command>
f0114ad9:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114adc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114adf:	89 d0                	mov    %edx,%eax
f0114ae1:	c1 e0 02             	shl    $0x2,%eax
f0114ae4:	01 d0                	add    %edx,%eax
f0114ae6:	01 c0                	add    %eax,%eax
f0114ae8:	83 ec 04             	sub    $0x4,%esp
f0114aeb:	50                   	push   %eax
f0114aec:	68 00 00 40 00       	push   $0x400000
f0114af1:	ff 75 d8             	pushl  -0x28(%ebp)
f0114af4:	e8 d5 41 ff ff       	call   f0108cce <calculate_required_frames>
f0114af9:	83 c4 10             	add    $0x10,%esp
f0114afc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114aff:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114b06:	74 26                	je     f0114b2e <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114b08:	83 ec 0c             	sub    $0xc,%esp
f0114b0b:	68 03 0a 00 00       	push   $0xa03
f0114b10:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b13:	68 78 a2 13 f0       	push   $0xf013a278
f0114b18:	68 44 06 00 00       	push   $0x644
f0114b1d:	68 7e 86 13 f0       	push   $0xf013867e
f0114b22:	e8 60 b8 fe ff       	call   f0100387 <_warn>
f0114b27:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b2e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b32:	74 04                	je     f0114b38 <test_calculate_required_frames+0x704>
f0114b34:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b38:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114b3c:	83 ec 04             	sub    $0x4,%esp
f0114b3f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114b45:	50                   	push   %eax
f0114b46:	68 f2 93 13 f0       	push   $0xf01393f2
f0114b4b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114b51:	50                   	push   %eax
f0114b52:	e8 c7 c7 01 00       	call   f013131e <strcconcat>
f0114b57:	83 c4 10             	add    $0x10,%esp
f0114b5a:	83 ec 0c             	sub    $0xc,%esp
f0114b5d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114b63:	50                   	push   %eax
f0114b64:	e8 7b c1 fe ff       	call   f0100ce4 <execute_command>
f0114b69:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114b6c:	83 ec 04             	sub    $0x4,%esp
f0114b6f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114b75:	50                   	push   %eax
f0114b76:	68 18 a3 13 f0       	push   $0xf013a318
f0114b7b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114b81:	50                   	push   %eax
f0114b82:	e8 97 c7 01 00       	call   f013131e <strcconcat>
f0114b87:	83 c4 10             	add    $0x10,%esp
f0114b8a:	83 ec 0c             	sub    $0xc,%esp
f0114b8d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114b93:	50                   	push   %eax
f0114b94:	e8 4b c1 fe ff       	call   f0100ce4 <execute_command>
f0114b99:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114b9c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b9f:	01 c0                	add    %eax,%eax
f0114ba1:	83 ec 04             	sub    $0x4,%esp
f0114ba4:	50                   	push   %eax
f0114ba5:	68 00 00 70 00       	push   $0x700000
f0114baa:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bad:	e8 1c 41 ff ff       	call   f0108cce <calculate_required_frames>
f0114bb2:	83 c4 10             	add    $0x10,%esp
f0114bb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114bb8:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114bbf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114bc2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114bc5:	74 24                	je     f0114beb <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114bc7:	83 ec 0c             	sub    $0xc,%esp
f0114bca:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114bcd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114bd0:	68 78 a2 13 f0       	push   $0xf013a278
f0114bd5:	68 54 06 00 00       	push   $0x654
f0114bda:	68 7e 86 13 f0       	push   $0xf013867e
f0114bdf:	e8 a3 b7 fe ff       	call   f0100387 <_warn>
f0114be4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114be7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114beb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bef:	74 04                	je     f0114bf5 <test_calculate_required_frames+0x7c1>
f0114bf1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bf5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114bf9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114bfc:	83 ec 04             	sub    $0x4,%esp
f0114bff:	50                   	push   %eax
f0114c00:	68 ff ff 3f 00       	push   $0x3fffff
f0114c05:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c08:	e8 c1 40 ff ff       	call   f0108cce <calculate_required_frames>
f0114c0d:	83 c4 10             	add    $0x10,%esp
f0114c10:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114c13:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114c1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114c1d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c20:	74 24                	je     f0114c46 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114c22:	83 ec 0c             	sub    $0xc,%esp
f0114c25:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c28:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c2b:	68 78 a2 13 f0       	push   $0xf013a278
f0114c30:	68 5f 06 00 00       	push   $0x65f
f0114c35:	68 7e 86 13 f0       	push   $0xf013867e
f0114c3a:	e8 48 b7 fe ff       	call   f0100387 <_warn>
f0114c3f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c42:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c46:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c4a:	74 04                	je     f0114c50 <test_calculate_required_frames+0x81c>
f0114c4c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c50:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114c54:	83 ec 0c             	sub    $0xc,%esp
f0114c57:	68 a3 93 13 f0       	push   $0xf01393a3
f0114c5c:	e8 21 c0 fe ff       	call   f0100c82 <cprintf>
f0114c61:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114c64:	83 ec 08             	sub    $0x8,%esp
f0114c67:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114c6a:	68 24 a3 13 f0       	push   $0xf013a324
f0114c6f:	e8 0e c0 fe ff       	call   f0100c82 <cprintf>
f0114c74:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114c77:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114c7b:	75 10                	jne    f0114c8d <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114c7d:	83 ec 0c             	sub    $0xc,%esp
f0114c80:	68 64 a3 13 f0       	push   $0xf013a364
f0114c85:	e8 f8 bf fe ff       	call   f0100c82 <cprintf>
f0114c8a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114c8d:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114c92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114c95:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114c98:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114c9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114ca0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114ca3:	5b                   	pop    %ebx
f0114ca4:	5e                   	pop    %esi
f0114ca5:	5f                   	pop    %edi
f0114ca6:	5d                   	pop    %ebp
f0114ca7:	c3                   	ret    

f0114ca8 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114ca8:	55                   	push   %ebp
f0114ca9:	89 e5                	mov    %esp,%ebp
f0114cab:	57                   	push   %edi
f0114cac:	56                   	push   %esi
f0114cad:	53                   	push   %ebx
f0114cae:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114cb4:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114cb7:	bb 18 91 13 f0       	mov    $0xf0139118,%ebx
f0114cbc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114cc1:	89 c7                	mov    %eax,%edi
f0114cc3:	89 de                	mov    %ebx,%esi
f0114cc5:	89 d1                	mov    %edx,%ecx
f0114cc7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114cc9:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114ccc:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114cd1:	b0 00                	mov    $0x0,%al
f0114cd3:	89 d7                	mov    %edx,%edi
f0114cd5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114cd7:	6a 00                	push   $0x0
f0114cd9:	6a 0a                	push   $0xa
f0114cdb:	6a 14                	push   $0x14
f0114cdd:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114ce0:	50                   	push   %eax
f0114ce1:	e8 0b 41 ff ff       	call   f0108df1 <env_create>
f0114ce6:	83 c4 10             	add    $0x10,%esp
f0114ce9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114cec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114cef:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114cf2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114cf5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114cf8:	8b 40 60             	mov    0x60(%eax),%eax
f0114cfb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114cfe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d01:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114d04:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114d0b:	75 70 20 
f0114d0e:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114d15:	00 00 00 
f0114d18:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114d1b:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114d20:	b8 00 00 00 00       	mov    $0x0,%eax
f0114d25:	89 d7                	mov    %edx,%edi
f0114d27:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114d29:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114d2c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114d2f:	83 ec 08             	sub    $0x8,%esp
f0114d32:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114d38:	52                   	push   %edx
f0114d39:	50                   	push   %eax
f0114d3a:	e8 e7 c4 01 00       	call   f0131226 <ltostr>
f0114d3f:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114d42:	83 ec 04             	sub    $0x4,%esp
f0114d45:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d4b:	50                   	push   %eax
f0114d4c:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114d52:	50                   	push   %eax
f0114d53:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114d59:	50                   	push   %eax
f0114d5a:	e8 bf c5 01 00       	call   f013131e <strcconcat>
f0114d5f:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114d62:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114d69:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114d70:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114d77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114d7b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d82:	00 00 00 
	uint32 num_tables = 0;
f0114d85:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d8c:	00 00 00 
	ClearUserSpace(proc_directory);
f0114d8f:	83 ec 0c             	sub    $0xc,%esp
f0114d92:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d95:	e8 8d 0e 00 00       	call   f0115c27 <ClearUserSpace>
f0114d9a:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114d9d:	83 ec 0c             	sub    $0xc,%esp
f0114da0:	68 44 a2 13 f0       	push   $0xf013a244
f0114da5:	e8 d8 be fe ff       	call   f0100c82 <cprintf>
f0114daa:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114dad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114db0:	c1 e0 03             	shl    $0x3,%eax
f0114db3:	89 c2                	mov    %eax,%edx
f0114db5:	83 ec 0c             	sub    $0xc,%esp
f0114db8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114dbe:	50                   	push   %eax
f0114dbf:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114dc5:	50                   	push   %eax
f0114dc6:	52                   	push   %edx
f0114dc7:	6a 00                	push   $0x0
f0114dc9:	ff 75 d8             	pushl  -0x28(%ebp)
f0114dcc:	e8 08 3e ff ff       	call   f0108bd9 <calculate_allocated_space>
f0114dd1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114dd4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114dda:	85 c0                	test   %eax,%eax
f0114ddc:	74 27                	je     f0114e05 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114dde:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114de4:	83 ec 0c             	sub    $0xc,%esp
f0114de7:	6a 00                	push   $0x0
f0114de9:	50                   	push   %eax
f0114dea:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0114def:	68 94 06 00 00       	push   $0x694
f0114df4:	68 7e 86 13 f0       	push   $0xf013867e
f0114df9:	e8 89 b5 fe ff       	call   f0100387 <_warn>
f0114dfe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e01:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114e05:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e0b:	85 c0                	test   %eax,%eax
f0114e0d:	74 27                	je     f0114e36 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114e0f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e15:	83 ec 0c             	sub    $0xc,%esp
f0114e18:	6a 00                	push   $0x0
f0114e1a:	50                   	push   %eax
f0114e1b:	68 10 a4 13 f0       	push   $0xf013a410
f0114e20:	68 99 06 00 00       	push   $0x699
f0114e25:	68 7e 86 13 f0       	push   $0xf013867e
f0114e2a:	e8 58 b5 fe ff       	call   f0100387 <_warn>
f0114e2f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e32:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e36:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e3a:	74 04                	je     f0114e40 <test_calculate_allocated_space+0x198>
f0114e3c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e40:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114e44:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e4b:	00 00 00 
		num_pages = 0;
f0114e4e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e55:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114e58:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e5b:	c1 e0 02             	shl    $0x2,%eax
f0114e5e:	89 c2                	mov    %eax,%edx
f0114e60:	83 ec 0c             	sub    $0xc,%esp
f0114e63:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e69:	50                   	push   %eax
f0114e6a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e70:	50                   	push   %eax
f0114e71:	52                   	push   %edx
f0114e72:	6a 00                	push   $0x0
f0114e74:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e77:	e8 5d 3d ff ff       	call   f0108bd9 <calculate_allocated_space>
f0114e7c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114e7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e85:	85 c0                	test   %eax,%eax
f0114e87:	74 27                	je     f0114eb0 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114e89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e8f:	83 ec 0c             	sub    $0xc,%esp
f0114e92:	6a 00                	push   $0x0
f0114e94:	50                   	push   %eax
f0114e95:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0114e9a:	68 a5 06 00 00       	push   $0x6a5
f0114e9f:	68 7e 86 13 f0       	push   $0xf013867e
f0114ea4:	e8 de b4 fe ff       	call   f0100387 <_warn>
f0114ea9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114eb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114eb6:	85 c0                	test   %eax,%eax
f0114eb8:	74 27                	je     f0114ee1 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114eba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114ec0:	83 ec 0c             	sub    $0xc,%esp
f0114ec3:	6a 00                	push   $0x0
f0114ec5:	50                   	push   %eax
f0114ec6:	68 10 a4 13 f0       	push   $0xf013a410
f0114ecb:	68 aa 06 00 00       	push   $0x6aa
f0114ed0:	68 7e 86 13 f0       	push   $0xf013867e
f0114ed5:	e8 ad b4 fe ff       	call   f0100387 <_warn>
f0114eda:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114edd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ee1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ee5:	74 04                	je     f0114eeb <test_calculate_allocated_space+0x243>
f0114ee7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114eeb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114eef:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ef6:	00 00 00 
		num_pages = 0;
f0114ef9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114f00:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114f03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f06:	c1 e0 0a             	shl    $0xa,%eax
f0114f09:	89 c2                	mov    %eax,%edx
f0114f0b:	83 ec 0c             	sub    $0xc,%esp
f0114f0e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114f14:	50                   	push   %eax
f0114f15:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114f1b:	50                   	push   %eax
f0114f1c:	52                   	push   %edx
f0114f1d:	6a 00                	push   $0x0
f0114f1f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f22:	e8 b2 3c ff ff       	call   f0108bd9 <calculate_allocated_space>
f0114f27:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114f2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f30:	85 c0                	test   %eax,%eax
f0114f32:	74 27                	je     f0114f5b <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114f34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f3a:	83 ec 0c             	sub    $0xc,%esp
f0114f3d:	6a 00                	push   $0x0
f0114f3f:	50                   	push   %eax
f0114f40:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0114f45:	68 b6 06 00 00       	push   $0x6b6
f0114f4a:	68 7e 86 13 f0       	push   $0xf013867e
f0114f4f:	e8 33 b4 fe ff       	call   f0100387 <_warn>
f0114f54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114f5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f61:	85 c0                	test   %eax,%eax
f0114f63:	74 27                	je     f0114f8c <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114f65:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f6b:	83 ec 0c             	sub    $0xc,%esp
f0114f6e:	6a 00                	push   $0x0
f0114f70:	50                   	push   %eax
f0114f71:	68 10 a4 13 f0       	push   $0xf013a410
f0114f76:	68 bb 06 00 00       	push   $0x6bb
f0114f7b:	68 7e 86 13 f0       	push   $0xf013867e
f0114f80:	e8 02 b4 fe ff       	call   f0100387 <_warn>
f0114f85:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f88:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f8c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f90:	74 04                	je     f0114f96 <test_calculate_allocated_space+0x2ee>
f0114f92:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f96:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114f9a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114fa1:	00 00 00 
		num_pages = 0;
f0114fa4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114fab:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114fae:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114fb1:	89 d0                	mov    %edx,%eax
f0114fb3:	01 c0                	add    %eax,%eax
f0114fb5:	01 d0                	add    %edx,%eax
f0114fb7:	01 c0                	add    %eax,%eax
f0114fb9:	05 00 10 00 00       	add    $0x1000,%eax
f0114fbe:	89 c2                	mov    %eax,%edx
f0114fc0:	83 ec 0c             	sub    $0xc,%esp
f0114fc3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114fc9:	50                   	push   %eax
f0114fca:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114fd0:	50                   	push   %eax
f0114fd1:	52                   	push   %edx
f0114fd2:	68 00 10 00 00       	push   $0x1000
f0114fd7:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fda:	e8 fa 3b ff ff       	call   f0108bd9 <calculate_allocated_space>
f0114fdf:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114fe2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fe8:	85 c0                	test   %eax,%eax
f0114fea:	74 27                	je     f0115013 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114fec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ff2:	83 ec 0c             	sub    $0xc,%esp
f0114ff5:	6a 00                	push   $0x0
f0114ff7:	50                   	push   %eax
f0114ff8:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0114ffd:	68 c8 06 00 00       	push   $0x6c8
f0115002:	68 7e 86 13 f0       	push   $0xf013867e
f0115007:	e8 7b b3 fe ff       	call   f0100387 <_warn>
f011500c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011500f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115013:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115019:	85 c0                	test   %eax,%eax
f011501b:	74 27                	je     f0115044 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011501d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115023:	83 ec 0c             	sub    $0xc,%esp
f0115026:	6a 00                	push   $0x0
f0115028:	50                   	push   %eax
f0115029:	68 10 a4 13 f0       	push   $0xf013a410
f011502e:	68 cd 06 00 00       	push   $0x6cd
f0115033:	68 7e 86 13 f0       	push   $0xf013867e
f0115038:	e8 4a b3 fe ff       	call   f0100387 <_warn>
f011503d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115040:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115044:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115048:	74 04                	je     f011504e <test_calculate_allocated_space+0x3a6>
f011504a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011504e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115052:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115059:	00 00 00 
		num_pages = 0;
f011505c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115063:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115066:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115069:	89 c2                	mov    %eax,%edx
f011506b:	01 d2                	add    %edx,%edx
f011506d:	01 d0                	add    %edx,%eax
f011506f:	05 00 18 00 00       	add    $0x1800,%eax
f0115074:	89 c2                	mov    %eax,%edx
f0115076:	83 ec 0c             	sub    $0xc,%esp
f0115079:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011507f:	50                   	push   %eax
f0115080:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115086:	50                   	push   %eax
f0115087:	52                   	push   %edx
f0115088:	68 00 18 00 00       	push   $0x1800
f011508d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115090:	e8 44 3b ff ff       	call   f0108bd9 <calculate_allocated_space>
f0115095:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115098:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011509e:	85 c0                	test   %eax,%eax
f01150a0:	74 27                	je     f01150c9 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01150a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01150a8:	83 ec 0c             	sub    $0xc,%esp
f01150ab:	6a 00                	push   $0x0
f01150ad:	50                   	push   %eax
f01150ae:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01150b3:	68 d9 06 00 00       	push   $0x6d9
f01150b8:	68 7e 86 13 f0       	push   $0xf013867e
f01150bd:	e8 c5 b2 fe ff       	call   f0100387 <_warn>
f01150c2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150c5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01150c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150cf:	85 c0                	test   %eax,%eax
f01150d1:	74 27                	je     f01150fa <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01150d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150d9:	83 ec 0c             	sub    $0xc,%esp
f01150dc:	6a 00                	push   $0x0
f01150de:	50                   	push   %eax
f01150df:	68 10 a4 13 f0       	push   $0xf013a410
f01150e4:	68 de 06 00 00       	push   $0x6de
f01150e9:	68 7e 86 13 f0       	push   $0xf013867e
f01150ee:	e8 94 b2 fe ff       	call   f0100387 <_warn>
f01150f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150fe:	74 04                	je     f0115104 <test_calculate_allocated_space+0x45c>
f0115100:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115104:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115108:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011510f:	00 00 00 
		num_pages = 0;
f0115112:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115119:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011511c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011511f:	89 d0                	mov    %edx,%eax
f0115121:	c1 e0 02             	shl    $0x2,%eax
f0115124:	01 d0                	add    %edx,%eax
f0115126:	01 c0                	add    %eax,%eax
f0115128:	05 00 00 40 00       	add    $0x400000,%eax
f011512d:	89 c2                	mov    %eax,%edx
f011512f:	83 ec 0c             	sub    $0xc,%esp
f0115132:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115138:	50                   	push   %eax
f0115139:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011513f:	50                   	push   %eax
f0115140:	52                   	push   %edx
f0115141:	68 00 00 40 00       	push   $0x400000
f0115146:	ff 75 d8             	pushl  -0x28(%ebp)
f0115149:	e8 8b 3a ff ff       	call   f0108bd9 <calculate_allocated_space>
f011514e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115151:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115157:	85 c0                	test   %eax,%eax
f0115159:	74 27                	je     f0115182 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011515b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115161:	83 ec 0c             	sub    $0xc,%esp
f0115164:	6a 00                	push   $0x0
f0115166:	50                   	push   %eax
f0115167:	68 b0 a3 13 f0       	push   $0xf013a3b0
f011516c:	68 ea 06 00 00       	push   $0x6ea
f0115171:	68 7e 86 13 f0       	push   $0xf013867e
f0115176:	e8 0c b2 fe ff       	call   f0100387 <_warn>
f011517b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011517e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115182:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115188:	85 c0                	test   %eax,%eax
f011518a:	74 27                	je     f01151b3 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011518c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115192:	83 ec 0c             	sub    $0xc,%esp
f0115195:	6a 00                	push   $0x0
f0115197:	50                   	push   %eax
f0115198:	68 10 a4 13 f0       	push   $0xf013a410
f011519d:	68 ef 06 00 00       	push   $0x6ef
f01151a2:	68 7e 86 13 f0       	push   $0xf013867e
f01151a7:	e8 db b1 fe ff       	call   f0100387 <_warn>
f01151ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151b7:	74 04                	je     f01151bd <test_calculate_allocated_space+0x515>
f01151b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01151c1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151c8:	00 00 00 
		num_pages = 0;
f01151cb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151d2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01151d5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151d8:	05 00 00 38 00       	add    $0x380000,%eax
f01151dd:	01 c0                	add    %eax,%eax
f01151df:	89 c2                	mov    %eax,%edx
f01151e1:	83 ec 0c             	sub    $0xc,%esp
f01151e4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01151ea:	50                   	push   %eax
f01151eb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01151f1:	50                   	push   %eax
f01151f2:	52                   	push   %edx
f01151f3:	68 00 00 70 00       	push   $0x700000
f01151f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01151fb:	e8 d9 39 ff ff       	call   f0108bd9 <calculate_allocated_space>
f0115200:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115203:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115209:	85 c0                	test   %eax,%eax
f011520b:	74 27                	je     f0115234 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011520d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115213:	83 ec 0c             	sub    $0xc,%esp
f0115216:	6a 00                	push   $0x0
f0115218:	50                   	push   %eax
f0115219:	68 b0 a3 13 f0       	push   $0xf013a3b0
f011521e:	68 fc 06 00 00       	push   $0x6fc
f0115223:	68 7e 86 13 f0       	push   $0xf013867e
f0115228:	e8 5a b1 fe ff       	call   f0100387 <_warn>
f011522d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115230:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115234:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011523a:	85 c0                	test   %eax,%eax
f011523c:	74 27                	je     f0115265 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011523e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115244:	83 ec 0c             	sub    $0xc,%esp
f0115247:	6a 00                	push   $0x0
f0115249:	50                   	push   %eax
f011524a:	68 10 a4 13 f0       	push   $0xf013a410
f011524f:	68 01 07 00 00       	push   $0x701
f0115254:	68 7e 86 13 f0       	push   $0xf013867e
f0115259:	e8 29 b1 fe ff       	call   f0100387 <_warn>
f011525e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115261:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115265:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115269:	74 04                	je     f011526f <test_calculate_allocated_space+0x5c7>
f011526b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011526f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115273:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011527a:	00 00 00 
		num_pages = 0;
f011527d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115284:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115287:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011528a:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011528f:	89 c2                	mov    %eax,%edx
f0115291:	83 ec 0c             	sub    $0xc,%esp
f0115294:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011529a:	50                   	push   %eax
f011529b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01152a1:	50                   	push   %eax
f01152a2:	52                   	push   %edx
f01152a3:	68 ff ff 3f 00       	push   $0x3fffff
f01152a8:	ff 75 d8             	pushl  -0x28(%ebp)
f01152ab:	e8 29 39 ff ff       	call   f0108bd9 <calculate_allocated_space>
f01152b0:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01152b3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152b9:	85 c0                	test   %eax,%eax
f01152bb:	74 27                	je     f01152e4 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01152bd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152c3:	83 ec 0c             	sub    $0xc,%esp
f01152c6:	6a 00                	push   $0x0
f01152c8:	50                   	push   %eax
f01152c9:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01152ce:	68 0d 07 00 00       	push   $0x70d
f01152d3:	68 7e 86 13 f0       	push   $0xf013867e
f01152d8:	e8 aa b0 fe ff       	call   f0100387 <_warn>
f01152dd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01152e4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152ea:	85 c0                	test   %eax,%eax
f01152ec:	74 27                	je     f0115315 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01152ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152f4:	83 ec 0c             	sub    $0xc,%esp
f01152f7:	6a 00                	push   $0x0
f01152f9:	50                   	push   %eax
f01152fa:	68 10 a4 13 f0       	push   $0xf013a410
f01152ff:	68 12 07 00 00       	push   $0x712
f0115304:	68 7e 86 13 f0       	push   $0xf013867e
f0115309:	e8 79 b0 fe ff       	call   f0100387 <_warn>
f011530e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115311:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115315:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115319:	74 04                	je     f011531f <test_calculate_allocated_space+0x677>
f011531b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011531f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115323:	83 ec 0c             	sub    $0xc,%esp
f0115326:	68 c9 9d 13 f0       	push   $0xf0139dc9
f011532b:	e8 52 b9 fe ff       	call   f0100c82 <cprintf>
f0115330:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115333:	83 ec 0c             	sub    $0xc,%esp
f0115336:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011533b:	e8 42 b9 fe ff       	call   f0100c82 <cprintf>
f0115340:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115343:	83 ec 04             	sub    $0x4,%esp
f0115346:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f011534c:	50                   	push   %eax
f011534d:	68 82 91 13 f0       	push   $0xf0139182
f0115352:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115358:	50                   	push   %eax
f0115359:	e8 c0 bf 01 00       	call   f013131e <strcconcat>
f011535e:	83 c4 10             	add    $0x10,%esp
f0115361:	83 ec 0c             	sub    $0xc,%esp
f0115364:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f011536a:	50                   	push   %eax
f011536b:	e8 74 b9 fe ff       	call   f0100ce4 <execute_command>
f0115370:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115373:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011537a:	00 00 00 
		num_pages = 0;
f011537d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115384:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115387:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011538a:	c1 e0 03             	shl    $0x3,%eax
f011538d:	89 c2                	mov    %eax,%edx
f011538f:	83 ec 0c             	sub    $0xc,%esp
f0115392:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115398:	50                   	push   %eax
f0115399:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011539f:	50                   	push   %eax
f01153a0:	52                   	push   %edx
f01153a1:	6a 00                	push   $0x0
f01153a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01153a6:	e8 2e 38 ff ff       	call   f0108bd9 <calculate_allocated_space>
f01153ab:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01153ae:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01153b5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01153bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153c2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01153c5:	74 28                	je     f01153ef <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01153c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153cd:	83 ec 0c             	sub    $0xc,%esp
f01153d0:	ff 75 c8             	pushl  -0x38(%ebp)
f01153d3:	50                   	push   %eax
f01153d4:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01153d9:	68 29 07 00 00       	push   $0x729
f01153de:	68 7e 86 13 f0       	push   $0xf013867e
f01153e3:	e8 9f af fe ff       	call   f0100387 <_warn>
f01153e8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01153ef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153f5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153f8:	74 28                	je     f0115422 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01153fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115400:	83 ec 0c             	sub    $0xc,%esp
f0115403:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115406:	50                   	push   %eax
f0115407:	68 10 a4 13 f0       	push   $0xf013a410
f011540c:	68 2e 07 00 00       	push   $0x72e
f0115411:	68 7e 86 13 f0       	push   $0xf013867e
f0115416:	e8 6c af fe ff       	call   f0100387 <_warn>
f011541b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011541e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115422:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115426:	74 04                	je     f011542c <test_calculate_allocated_space+0x784>
f0115428:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011542c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115430:	83 ec 04             	sub    $0x4,%esp
f0115433:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115439:	50                   	push   %eax
f011543a:	68 8f 91 13 f0       	push   $0xf013918f
f011543f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115445:	50                   	push   %eax
f0115446:	e8 d3 be 01 00       	call   f013131e <strcconcat>
f011544b:	83 c4 10             	add    $0x10,%esp
f011544e:	83 ec 0c             	sub    $0xc,%esp
f0115451:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115457:	50                   	push   %eax
f0115458:	e8 87 b8 fe ff       	call   f0100ce4 <execute_command>
f011545d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115460:	83 ec 04             	sub    $0x4,%esp
f0115463:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115469:	50                   	push   %eax
f011546a:	68 04 a3 13 f0       	push   $0xf013a304
f011546f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115475:	50                   	push   %eax
f0115476:	e8 a3 be 01 00       	call   f013131e <strcconcat>
f011547b:	83 c4 10             	add    $0x10,%esp
f011547e:	83 ec 0c             	sub    $0xc,%esp
f0115481:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115487:	50                   	push   %eax
f0115488:	e8 57 b8 fe ff       	call   f0100ce4 <execute_command>
f011548d:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115490:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115497:	00 00 00 
		num_pages = 0;
f011549a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154a1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01154a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154a7:	c1 e0 03             	shl    $0x3,%eax
f01154aa:	89 c2                	mov    %eax,%edx
f01154ac:	83 ec 0c             	sub    $0xc,%esp
f01154af:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154b5:	50                   	push   %eax
f01154b6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154bc:	50                   	push   %eax
f01154bd:	52                   	push   %edx
f01154be:	6a 00                	push   $0x0
f01154c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01154c3:	e8 11 37 ff ff       	call   f0108bd9 <calculate_allocated_space>
f01154c8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01154cb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01154d2:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01154d9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154df:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01154e2:	74 28                	je     f011550c <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01154e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154ea:	83 ec 0c             	sub    $0xc,%esp
f01154ed:	ff 75 c8             	pushl  -0x38(%ebp)
f01154f0:	50                   	push   %eax
f01154f1:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01154f6:	68 3f 07 00 00       	push   $0x73f
f01154fb:	68 7e 86 13 f0       	push   $0xf013867e
f0115500:	e8 82 ae fe ff       	call   f0100387 <_warn>
f0115505:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115508:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011550c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115512:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115515:	74 28                	je     f011553f <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115517:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011551d:	83 ec 0c             	sub    $0xc,%esp
f0115520:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115523:	50                   	push   %eax
f0115524:	68 10 a4 13 f0       	push   $0xf013a410
f0115529:	68 44 07 00 00       	push   $0x744
f011552e:	68 7e 86 13 f0       	push   $0xf013867e
f0115533:	e8 4f ae fe ff       	call   f0100387 <_warn>
f0115538:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011553b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011553f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115543:	74 04                	je     f0115549 <test_calculate_allocated_space+0x8a1>
f0115545:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115549:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011554d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115554:	00 00 00 
		num_pages = 0;
f0115557:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011555e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115561:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115564:	c1 e0 0a             	shl    $0xa,%eax
f0115567:	89 c2                	mov    %eax,%edx
f0115569:	83 ec 0c             	sub    $0xc,%esp
f011556c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115572:	50                   	push   %eax
f0115573:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115579:	50                   	push   %eax
f011557a:	52                   	push   %edx
f011557b:	6a 00                	push   $0x0
f011557d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115580:	e8 54 36 ff ff       	call   f0108bd9 <calculate_allocated_space>
f0115585:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115588:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011558f:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115596:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011559c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011559f:	74 28                	je     f01155c9 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01155a1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155a7:	83 ec 0c             	sub    $0xc,%esp
f01155aa:	ff 75 c8             	pushl  -0x38(%ebp)
f01155ad:	50                   	push   %eax
f01155ae:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01155b3:	68 52 07 00 00       	push   $0x752
f01155b8:	68 7e 86 13 f0       	push   $0xf013867e
f01155bd:	e8 c5 ad fe ff       	call   f0100387 <_warn>
f01155c2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155c5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01155c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155cf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155d2:	74 28                	je     f01155fc <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01155d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155da:	83 ec 0c             	sub    $0xc,%esp
f01155dd:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155e0:	50                   	push   %eax
f01155e1:	68 10 a4 13 f0       	push   $0xf013a410
f01155e6:	68 57 07 00 00       	push   $0x757
f01155eb:	68 7e 86 13 f0       	push   $0xf013867e
f01155f0:	e8 92 ad fe ff       	call   f0100387 <_warn>
f01155f5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155f8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01155fc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115600:	74 04                	je     f0115606 <test_calculate_allocated_space+0x95e>
f0115602:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115606:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011560a:	83 ec 04             	sub    $0x4,%esp
f011560d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115613:	50                   	push   %eax
f0115614:	68 10 a3 13 f0       	push   $0xf013a310
f0115619:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011561f:	50                   	push   %eax
f0115620:	e8 f9 bc 01 00       	call   f013131e <strcconcat>
f0115625:	83 c4 10             	add    $0x10,%esp
f0115628:	83 ec 0c             	sub    $0xc,%esp
f011562b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115631:	50                   	push   %eax
f0115632:	e8 ad b6 fe ff       	call   f0100ce4 <execute_command>
f0115637:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011563a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115641:	00 00 00 
		num_pages = 0;
f0115644:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011564b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011564e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115651:	89 c2                	mov    %eax,%edx
f0115653:	01 d2                	add    %edx,%edx
f0115655:	01 d0                	add    %edx,%eax
f0115657:	05 00 18 00 00       	add    $0x1800,%eax
f011565c:	89 c2                	mov    %eax,%edx
f011565e:	83 ec 0c             	sub    $0xc,%esp
f0115661:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115667:	50                   	push   %eax
f0115668:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011566e:	50                   	push   %eax
f011566f:	52                   	push   %edx
f0115670:	68 00 18 00 00       	push   $0x1800
f0115675:	ff 75 d8             	pushl  -0x28(%ebp)
f0115678:	e8 5c 35 ff ff       	call   f0108bd9 <calculate_allocated_space>
f011567d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115680:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115687:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011568e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115694:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115697:	74 28                	je     f01156c1 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115699:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011569f:	83 ec 0c             	sub    $0xc,%esp
f01156a2:	ff 75 c8             	pushl  -0x38(%ebp)
f01156a5:	50                   	push   %eax
f01156a6:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01156ab:	68 68 07 00 00       	push   $0x768
f01156b0:	68 7e 86 13 f0       	push   $0xf013867e
f01156b5:	e8 cd ac fe ff       	call   f0100387 <_warn>
f01156ba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01156c1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156c7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156ca:	74 28                	je     f01156f4 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01156cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156d2:	83 ec 0c             	sub    $0xc,%esp
f01156d5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156d8:	50                   	push   %eax
f01156d9:	68 10 a4 13 f0       	push   $0xf013a410
f01156de:	68 6d 07 00 00       	push   $0x76d
f01156e3:	68 7e 86 13 f0       	push   $0xf013867e
f01156e8:	e8 9a ac fe ff       	call   f0100387 <_warn>
f01156ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156f8:	74 04                	je     f01156fe <test_calculate_allocated_space+0xa56>
f01156fa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115702:	83 ec 04             	sub    $0x4,%esp
f0115705:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011570b:	50                   	push   %eax
f011570c:	68 e8 93 13 f0       	push   $0xf01393e8
f0115711:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115717:	50                   	push   %eax
f0115718:	e8 01 bc 01 00       	call   f013131e <strcconcat>
f011571d:	83 c4 10             	add    $0x10,%esp
f0115720:	83 ec 0c             	sub    $0xc,%esp
f0115723:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115729:	50                   	push   %eax
f011572a:	e8 b5 b5 fe ff       	call   f0100ce4 <execute_command>
f011572f:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115732:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115739:	00 00 00 
		num_pages = 0;
f011573c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115743:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115746:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115749:	89 d0                	mov    %edx,%eax
f011574b:	c1 e0 02             	shl    $0x2,%eax
f011574e:	01 d0                	add    %edx,%eax
f0115750:	01 c0                	add    %eax,%eax
f0115752:	05 00 00 40 00       	add    $0x400000,%eax
f0115757:	89 c2                	mov    %eax,%edx
f0115759:	83 ec 0c             	sub    $0xc,%esp
f011575c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115762:	50                   	push   %eax
f0115763:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115769:	50                   	push   %eax
f011576a:	52                   	push   %edx
f011576b:	68 00 00 40 00       	push   $0x400000
f0115770:	ff 75 d8             	pushl  -0x28(%ebp)
f0115773:	e8 61 34 ff ff       	call   f0108bd9 <calculate_allocated_space>
f0115778:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011577b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115782:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115789:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011578f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115792:	74 28                	je     f01157bc <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115794:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011579a:	83 ec 0c             	sub    $0xc,%esp
f011579d:	ff 75 c8             	pushl  -0x38(%ebp)
f01157a0:	50                   	push   %eax
f01157a1:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01157a6:	68 7d 07 00 00       	push   $0x77d
f01157ab:	68 7e 86 13 f0       	push   $0xf013867e
f01157b0:	e8 d2 ab fe ff       	call   f0100387 <_warn>
f01157b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157b8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01157bc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157c2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01157c5:	74 28                	je     f01157ef <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01157c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157cd:	83 ec 0c             	sub    $0xc,%esp
f01157d0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01157d3:	50                   	push   %eax
f01157d4:	68 10 a4 13 f0       	push   $0xf013a410
f01157d9:	68 82 07 00 00       	push   $0x782
f01157de:	68 7e 86 13 f0       	push   $0xf013867e
f01157e3:	e8 9f ab fe ff       	call   f0100387 <_warn>
f01157e8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157ef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157f3:	74 04                	je     f01157f9 <test_calculate_allocated_space+0xb51>
f01157f5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157f9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01157fd:	83 ec 04             	sub    $0x4,%esp
f0115800:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115806:	50                   	push   %eax
f0115807:	68 f2 93 13 f0       	push   $0xf01393f2
f011580c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115812:	50                   	push   %eax
f0115813:	e8 06 bb 01 00       	call   f013131e <strcconcat>
f0115818:	83 c4 10             	add    $0x10,%esp
f011581b:	83 ec 0c             	sub    $0xc,%esp
f011581e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115824:	50                   	push   %eax
f0115825:	e8 ba b4 fe ff       	call   f0100ce4 <execute_command>
f011582a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011582d:	83 ec 04             	sub    $0x4,%esp
f0115830:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115836:	50                   	push   %eax
f0115837:	68 18 a3 13 f0       	push   $0xf013a318
f011583c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115842:	50                   	push   %eax
f0115843:	e8 d6 ba 01 00       	call   f013131e <strcconcat>
f0115848:	83 c4 10             	add    $0x10,%esp
f011584b:	83 ec 0c             	sub    $0xc,%esp
f011584e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115854:	50                   	push   %eax
f0115855:	e8 8a b4 fe ff       	call   f0100ce4 <execute_command>
f011585a:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011585d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115864:	00 00 00 
		num_pages = 0;
f0115867:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011586e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115871:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115874:	05 00 00 38 00       	add    $0x380000,%eax
f0115879:	01 c0                	add    %eax,%eax
f011587b:	89 c2                	mov    %eax,%edx
f011587d:	83 ec 0c             	sub    $0xc,%esp
f0115880:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115886:	50                   	push   %eax
f0115887:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011588d:	50                   	push   %eax
f011588e:	52                   	push   %edx
f011588f:	68 00 00 70 00       	push   $0x700000
f0115894:	ff 75 d8             	pushl  -0x28(%ebp)
f0115897:	e8 3d 33 ff ff       	call   f0108bd9 <calculate_allocated_space>
f011589c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011589f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01158a6:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01158ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158b3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01158b6:	74 28                	je     f01158e0 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01158b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158be:	83 ec 0c             	sub    $0xc,%esp
f01158c1:	ff 75 c8             	pushl  -0x38(%ebp)
f01158c4:	50                   	push   %eax
f01158c5:	68 b0 a3 13 f0       	push   $0xf013a3b0
f01158ca:	68 94 07 00 00       	push   $0x794
f01158cf:	68 7e 86 13 f0       	push   $0xf013867e
f01158d4:	e8 ae aa fe ff       	call   f0100387 <_warn>
f01158d9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158dc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01158e0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158e6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158e9:	74 28                	je     f0115913 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01158eb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158f1:	83 ec 0c             	sub    $0xc,%esp
f01158f4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158f7:	50                   	push   %eax
f01158f8:	68 10 a4 13 f0       	push   $0xf013a410
f01158fd:	68 99 07 00 00       	push   $0x799
f0115902:	68 7e 86 13 f0       	push   $0xf013867e
f0115907:	e8 7b aa fe ff       	call   f0100387 <_warn>
f011590c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011590f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115913:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115917:	74 04                	je     f011591d <test_calculate_allocated_space+0xc75>
f0115919:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011591d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115921:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115928:	00 00 00 
		num_pages = 0;
f011592b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115932:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115935:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115938:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011593d:	89 c2                	mov    %eax,%edx
f011593f:	83 ec 0c             	sub    $0xc,%esp
f0115942:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115948:	50                   	push   %eax
f0115949:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011594f:	50                   	push   %eax
f0115950:	52                   	push   %edx
f0115951:	68 ff ff 3f 00       	push   $0x3fffff
f0115956:	ff 75 d8             	pushl  -0x28(%ebp)
f0115959:	e8 7b 32 ff ff       	call   f0108bd9 <calculate_allocated_space>
f011595e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115961:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115968:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011596f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115975:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115978:	74 28                	je     f01159a2 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011597a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115980:	83 ec 0c             	sub    $0xc,%esp
f0115983:	ff 75 c8             	pushl  -0x38(%ebp)
f0115986:	50                   	push   %eax
f0115987:	68 b0 a3 13 f0       	push   $0xf013a3b0
f011598c:	68 a7 07 00 00       	push   $0x7a7
f0115991:	68 7e 86 13 f0       	push   $0xf013867e
f0115996:	e8 ec a9 fe ff       	call   f0100387 <_warn>
f011599b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011599e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01159a2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159a8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01159ab:	74 28                	je     f01159d5 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01159ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159b3:	83 ec 0c             	sub    $0xc,%esp
f01159b6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01159b9:	50                   	push   %eax
f01159ba:	68 10 a4 13 f0       	push   $0xf013a410
f01159bf:	68 ac 07 00 00       	push   $0x7ac
f01159c4:	68 7e 86 13 f0       	push   $0xf013867e
f01159c9:	e8 b9 a9 fe ff       	call   f0100387 <_warn>
f01159ce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01159d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159d9:	74 04                	je     f01159df <test_calculate_allocated_space+0xd37>
f01159db:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01159df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01159e3:	83 ec 0c             	sub    $0xc,%esp
f01159e6:	68 a3 93 13 f0       	push   $0xf01393a3
f01159eb:	e8 92 b2 fe ff       	call   f0100c82 <cprintf>
f01159f0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01159f3:	83 ec 08             	sub    $0x8,%esp
f01159f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01159f9:	68 6c a4 13 f0       	push   $0xf013a46c
f01159fe:	e8 7f b2 fe ff       	call   f0100c82 <cprintf>
f0115a03:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115a06:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115a0a:	75 10                	jne    f0115a1c <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115a0c:	83 ec 0c             	sub    $0xc,%esp
f0115a0f:	68 ac a4 13 f0       	push   $0xf013a4ac
f0115a14:	e8 69 b2 fe ff       	call   f0100c82 <cprintf>
f0115a19:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115a1c:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0115a21:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115a24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115a27:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115a2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a32:	5b                   	pop    %ebx
f0115a33:	5e                   	pop    %esi
f0115a34:	5f                   	pop    %edi
f0115a35:	5d                   	pop    %ebp
f0115a36:	c3                   	ret    

f0115a37 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115a37:	55                   	push   %ebp
f0115a38:	89 e5                	mov    %esp,%ebp
f0115a3a:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115a3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0115a40:	ba 01 00 00 00       	mov    $0x1,%edx
f0115a45:	88 c1                	mov    %al,%cl
f0115a47:	d3 e2                	shl    %cl,%edx
f0115a49:	89 d0                	mov    %edx,%eax
f0115a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a51:	c1 e8 16             	shr    $0x16,%eax
f0115a54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0115a5e:	01 d0                	add    %edx,%eax
f0115a60:	8b 00                	mov    (%eax),%eax
f0115a62:	83 e0 01             	and    $0x1,%eax
f0115a65:	85 c0                	test   %eax,%eax
f0115a67:	75 07                	jne    f0115a70 <CB+0x39>
f0115a69:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a6e:	eb 76                	jmp    f0115ae6 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115a70:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a73:	c1 e8 16             	shr    $0x16,%eax
f0115a76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0115a80:	01 d0                	add    %edx,%eax
f0115a82:	8b 00                	mov    (%eax),%eax
f0115a84:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115a89:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115a8f:	c1 e8 0c             	shr    $0xc,%eax
f0115a92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115a95:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115a9a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115a9d:	72 17                	jb     f0115ab6 <CB+0x7f>
f0115a9f:	ff 75 f0             	pushl  -0x10(%ebp)
f0115aa2:	68 f8 a4 13 f0       	push   $0xf013a4f8
f0115aa7:	68 c7 07 00 00       	push   $0x7c7
f0115aac:	68 7e 86 13 f0       	push   $0xf013867e
f0115ab1:	e8 45 a7 fe ff       	call   f01001fb <_panic>
f0115ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115ab9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115abe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ac4:	c1 e8 0c             	shr    $0xc,%eax
f0115ac7:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115acc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115ad6:	01 d0                	add    %edx,%eax
f0115ad8:	8b 00                	mov    (%eax),%eax
f0115ada:	23 45 f4             	and    -0xc(%ebp),%eax
f0115add:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115ae0:	0f 94 c0             	sete   %al
f0115ae3:	0f b6 c0             	movzbl %al,%eax
}
f0115ae6:	c9                   	leave  
f0115ae7:	c3                   	ret    

f0115ae8 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115ae8:	55                   	push   %ebp
f0115ae9:	89 e5                	mov    %esp,%ebp
f0115aeb:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115aee:	68 27 a5 13 f0       	push   $0xf013a527
f0115af3:	68 36 a5 13 f0       	push   $0xf013a536
f0115af8:	68 cc 07 00 00       	push   $0x7cc
f0115afd:	68 7e 86 13 f0       	push   $0xf013867e
f0115b02:	e8 f4 a6 fe ff       	call   f01001fb <_panic>

f0115b07 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115b07:	55                   	push   %ebp
f0115b08:	89 e5                	mov    %esp,%ebp
f0115b0a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115b0d:	68 27 a5 13 f0       	push   $0xf013a527
f0115b12:	68 36 a5 13 f0       	push   $0xf013a536
f0115b17:	68 d6 07 00 00       	push   $0x7d6
f0115b1c:	68 7e 86 13 f0       	push   $0xf013867e
f0115b21:	e8 d5 a6 fe ff       	call   f01001fb <_panic>

f0115b26 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115b26:	55                   	push   %ebp
f0115b27:	89 e5                	mov    %esp,%ebp
f0115b29:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115b2c:	68 27 a5 13 f0       	push   $0xf013a527
f0115b31:	68 36 a5 13 f0       	push   $0xf013a536
f0115b36:	68 e5 07 00 00       	push   $0x7e5
f0115b3b:	68 7e 86 13 f0       	push   $0xf013867e
f0115b40:	e8 b6 a6 fe ff       	call   f01001fb <_panic>

f0115b45 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0115b45:	55                   	push   %ebp
f0115b46:	89 e5                	mov    %esp,%ebp
f0115b48:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115b4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115b4e:	c1 e8 16             	shr    $0x16,%eax
f0115b51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115b58:	8b 45 08             	mov    0x8(%ebp),%eax
f0115b5b:	01 d0                	add    %edx,%eax
f0115b5d:	8b 00                	mov    (%eax),%eax
f0115b5f:	83 e0 01             	and    $0x1,%eax
f0115b62:	85 c0                	test   %eax,%eax
f0115b64:	75 07                	jne    f0115b6d <CE+0x28>
f0115b66:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b6b:	eb 7a                	jmp    f0115be7 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115b70:	c1 e8 16             	shr    $0x16,%eax
f0115b73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115b7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0115b7d:	01 d0                	add    %edx,%eax
f0115b7f:	8b 00                	mov    (%eax),%eax
f0115b81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115b89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115b8c:	c1 e8 0c             	shr    $0xc,%eax
f0115b8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115b92:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115b97:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115b9a:	72 17                	jb     f0115bb3 <CE+0x6e>
f0115b9c:	ff 75 f4             	pushl  -0xc(%ebp)
f0115b9f:	68 f8 a4 13 f0       	push   $0xf013a4f8
f0115ba4:	68 ee 07 00 00       	push   $0x7ee
f0115ba9:	68 7e 86 13 f0       	push   $0xf013867e
f0115bae:	e8 48 a6 fe ff       	call   f01001fb <_panic>
f0115bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115bb6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115bbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115bc1:	c1 e8 0c             	shr    $0xc,%eax
f0115bc4:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115bc9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115bd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115bd3:	01 d0                	add    %edx,%eax
f0115bd5:	8b 00                	mov    (%eax),%eax
f0115bd7:	85 c0                	test   %eax,%eax
f0115bd9:	74 07                	je     f0115be2 <CE+0x9d>
f0115bdb:	b8 00 00 00 00       	mov    $0x0,%eax
f0115be0:	eb 05                	jmp    f0115be7 <CE+0xa2>
	return 1;
f0115be2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115be7:	c9                   	leave  
f0115be8:	c3                   	ret    

f0115be9 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115be9:	55                   	push   %ebp
f0115bea:	89 e5                	mov    %esp,%ebp
f0115bec:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115bef:	68 27 a5 13 f0       	push   $0xf013a527
f0115bf4:	68 36 a5 13 f0       	push   $0xf013a536
f0115bf9:	68 f5 07 00 00       	push   $0x7f5
f0115bfe:	68 7e 86 13 f0       	push   $0xf013867e
f0115c03:	e8 f3 a5 fe ff       	call   f01001fb <_panic>

f0115c08 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115c08:	55                   	push   %ebp
f0115c09:	89 e5                	mov    %esp,%ebp
f0115c0b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115c0e:	68 27 a5 13 f0       	push   $0xf013a527
f0115c13:	68 36 a5 13 f0       	push   $0xf013a536
f0115c18:	68 05 08 00 00       	push   $0x805
f0115c1d:	68 7e 86 13 f0       	push   $0xf013867e
f0115c22:	e8 d4 a5 fe ff       	call   f01001fb <_panic>

f0115c27 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115c27:	55                   	push   %ebp
f0115c28:	89 e5                	mov    %esp,%ebp
f0115c2a:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115c2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115c34:	eb 18                	jmp    f0115c4e <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115c36:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115c39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115c40:	8b 45 08             	mov    0x8(%ebp),%eax
f0115c43:	01 d0                	add    %edx,%eax
f0115c45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115c4b:	ff 45 fc             	incl   -0x4(%ebp)
f0115c4e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115c51:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115c56:	76 de                	jbe    f0115c36 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115c58:	90                   	nop
f0115c59:	c9                   	leave  
f0115c5a:	c3                   	ret    

f0115c5b <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115c5b:	55                   	push   %ebp
f0115c5c:	89 e5                	mov    %esp,%ebp
f0115c5e:	83 ec 38             	sub    $0x38,%esp
f0115c61:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115c64:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115c67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115c6a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115c72:	8b 45 10             	mov    0x10(%ebp),%eax
f0115c75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115c7a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115c7d:	e9 ea 01 00 00       	jmp    f0115e6c <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115c82:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115c86:	74 44                	je     f0115ccc <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115c8b:	83 ec 04             	sub    $0x4,%esp
f0115c8e:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115c91:	52                   	push   %edx
f0115c92:	50                   	push   %eax
f0115c93:	ff 75 08             	pushl  0x8(%ebp)
f0115c96:	e8 94 10 ff ff       	call   f0106d2f <get_frame_info>
f0115c9b:	83 c4 10             	add    $0x10,%esp
f0115c9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115ca1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ca4:	85 c0                	test   %eax,%eax
f0115ca6:	75 24                	jne    f0115ccc <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115ca8:	83 ec 04             	sub    $0x4,%esp
f0115cab:	68 4c a5 13 f0       	push   $0xf013a54c
f0115cb0:	68 22 08 00 00       	push   $0x822
f0115cb5:	68 7e 86 13 f0       	push   $0xf013867e
f0115cba:	e8 c8 a6 fe ff       	call   f0100387 <_warn>
f0115cbf:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115cc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cc7:	e9 b6 01 00 00       	jmp    f0115e82 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0115ccc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115ccf:	83 ec 04             	sub    $0x4,%esp
f0115cd2:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115cd5:	52                   	push   %edx
f0115cd6:	50                   	push   %eax
f0115cd7:	ff 75 08             	pushl  0x8(%ebp)
f0115cda:	e8 50 10 ff ff       	call   f0106d2f <get_frame_info>
f0115cdf:	83 c4 10             	add    $0x10,%esp
f0115ce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115ce5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115ce8:	85 c0                	test   %eax,%eax
f0115cea:	75 24                	jne    f0115d10 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0115cec:	83 ec 04             	sub    $0x4,%esp
f0115cef:	68 78 a5 13 f0       	push   $0xf013a578
f0115cf4:	68 29 08 00 00       	push   $0x829
f0115cf9:	68 7e 86 13 f0       	push   $0xf013867e
f0115cfe:	e8 84 a6 fe ff       	call   f0100387 <_warn>
f0115d03:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115d06:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d0b:	e9 72 01 00 00       	jmp    f0115e82 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115d10:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115d14:	75 70                	jne    f0115d86 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115d16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115d19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115d1c:	c1 ea 0c             	shr    $0xc,%edx
f0115d1f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115d25:	c1 e2 02             	shl    $0x2,%edx
f0115d28:	01 d0                	add    %edx,%eax
f0115d2a:	8b 00                	mov    (%eax),%eax
f0115d2c:	c1 e8 0c             	shr    $0xc,%eax
f0115d2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115d32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115d35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115d38:	c1 ea 0c             	shr    $0xc,%edx
f0115d3b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115d41:	c1 e2 02             	shl    $0x2,%edx
f0115d44:	01 d0                	add    %edx,%eax
f0115d46:	8b 00                	mov    (%eax),%eax
f0115d48:	c1 e8 0c             	shr    $0xc,%eax
f0115d4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115d4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115d51:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115d54:	74 30                	je     f0115d86 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115d56:	83 ec 04             	sub    $0x4,%esp
f0115d59:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115d5c:	ff 75 e8             	pushl  -0x18(%ebp)
f0115d5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0115d62:	ff 75 f4             	pushl  -0xc(%ebp)
f0115d65:	68 a4 a5 13 f0       	push   $0xf013a5a4
f0115d6a:	68 33 08 00 00       	push   $0x833
f0115d6f:	68 7e 86 13 f0       	push   $0xf013867e
f0115d74:	e8 0e a6 fe ff       	call   f0100387 <_warn>
f0115d79:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115d7c:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d81:	e9 fc 00 00 00       	jmp    f0115e82 <CCP+0x227>
			}
		}
		if (ref != -1)
f0115d86:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115d8a:	74 52                	je     f0115dde <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115d8c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115d90:	74 0e                	je     f0115da0 <CCP+0x145>
f0115d92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115d95:	8b 40 08             	mov    0x8(%eax),%eax
f0115d98:	0f b7 c0             	movzwl %ax,%eax
f0115d9b:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115d9e:	74 3e                	je     f0115dde <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115da0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115da4:	74 0b                	je     f0115db1 <CCP+0x156>
f0115da6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115da9:	8b 40 08             	mov    0x8(%eax),%eax
f0115dac:	0f b7 c0             	movzwl %ax,%eax
f0115daf:	eb 05                	jmp    f0115db6 <CCP+0x15b>
f0115db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0115db6:	83 ec 0c             	sub    $0xc,%esp
f0115db9:	50                   	push   %eax
f0115dba:	ff 75 f0             	pushl  -0x10(%ebp)
f0115dbd:	68 00 a6 13 f0       	push   $0xf013a600
f0115dc2:	68 3b 08 00 00       	push   $0x83b
f0115dc7:	68 7e 86 13 f0       	push   $0xf013867e
f0115dcc:	e8 b6 a5 fe ff       	call   f0100387 <_warn>
f0115dd1:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115dd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0115dd9:	e9 a4 00 00 00       	jmp    f0115e82 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115de1:	ff 75 20             	pushl  0x20(%ebp)
f0115de4:	ff 75 1c             	pushl  0x1c(%ebp)
f0115de7:	50                   	push   %eax
f0115de8:	ff 75 08             	pushl  0x8(%ebp)
f0115deb:	e8 17 fd ff ff       	call   f0115b07 <CPs>
f0115df0:	83 c4 10             	add    $0x10,%esp
f0115df3:	85 c0                	test   %eax,%eax
f0115df5:	7f 21                	jg     f0115e18 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115df7:	83 ec 04             	sub    $0x4,%esp
f0115dfa:	68 70 a6 13 f0       	push   $0xf013a670
f0115dff:	68 41 08 00 00       	push   $0x841
f0115e04:	68 7e 86 13 f0       	push   $0xf013867e
f0115e09:	e8 79 a5 fe ff       	call   f0100387 <_warn>
f0115e0e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115e11:	b8 00 00 00 00       	mov    $0x0,%eax
f0115e16:	eb 6a                	jmp    f0115e82 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115e18:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115e1c:	74 3a                	je     f0115e58 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115e21:	ff 75 28             	pushl  0x28(%ebp)
f0115e24:	ff 75 24             	pushl  0x24(%ebp)
f0115e27:	50                   	push   %eax
f0115e28:	ff 75 08             	pushl  0x8(%ebp)
f0115e2b:	e8 d7 fc ff ff       	call   f0115b07 <CPs>
f0115e30:	83 c4 10             	add    $0x10,%esp
f0115e33:	85 c0                	test   %eax,%eax
f0115e35:	7f 21                	jg     f0115e58 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115e37:	83 ec 04             	sub    $0x4,%esp
f0115e3a:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0115e3f:	68 48 08 00 00       	push   $0x848
f0115e44:	68 7e 86 13 f0       	push   $0xf013867e
f0115e49:	e8 39 a5 fe ff       	call   f0100387 <_warn>
f0115e4e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115e51:	b8 00 00 00 00       	mov    $0x0,%eax
f0115e56:	eb 2a                	jmp    f0115e82 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115e58:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115e5c:	74 07                	je     f0115e65 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115e5e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115e65:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115e6c:	8b 55 10             	mov    0x10(%ebp),%edx
f0115e6f:	8b 45 14             	mov    0x14(%ebp),%eax
f0115e72:	01 d0                	add    %edx,%eax
f0115e74:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115e77:	0f 87 05 fe ff ff    	ja     f0115c82 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115e7d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115e82:	c9                   	leave  
f0115e83:	c3                   	ret    

f0115e84 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115e84:	55                   	push   %ebp
f0115e85:	89 e5                	mov    %esp,%ebp
f0115e87:	57                   	push   %edi
f0115e88:	56                   	push   %esi
f0115e89:	53                   	push   %ebx
f0115e8a:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115e90:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0115e95:	84 c0                	test   %al,%al
f0115e97:	0f 84 b4 09 00 00    	je     f0116851 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115e9d:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0115ea4:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115eaa:	bb 58 a9 13 f0       	mov    $0xf013a958,%ebx
f0115eaf:	ba 04 00 00 00       	mov    $0x4,%edx
f0115eb4:	89 c7                	mov    %eax,%edi
f0115eb6:	89 de                	mov    %ebx,%esi
f0115eb8:	89 d1                	mov    %edx,%ecx
f0115eba:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115ebc:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115ec2:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115ec7:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ecc:	89 d7                	mov    %edx,%edi
f0115ece:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115ed0:	83 ec 0c             	sub    $0xc,%esp
f0115ed3:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115ed9:	50                   	push   %eax
f0115eda:	e8 05 ae fe ff       	call   f0100ce4 <execute_command>
f0115edf:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115ee2:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115ee8:	bb bc a9 13 f0       	mov    $0xf013a9bc,%ebx
f0115eed:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115ef2:	89 c7                	mov    %eax,%edi
f0115ef4:	89 de                	mov    %ebx,%esi
f0115ef6:	89 d1                	mov    %edx,%ecx
f0115ef8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115efa:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115f00:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115f05:	b0 00                	mov    $0x0,%al
f0115f07:	89 d7                	mov    %edx,%edi
f0115f09:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115f0b:	83 ec 0c             	sub    $0xc,%esp
f0115f0e:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115f14:	50                   	push   %eax
f0115f15:	e8 ca ad fe ff       	call   f0100ce4 <execute_command>
f0115f1a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115f1d:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115f23:	bb 20 aa 13 f0       	mov    $0xf013aa20,%ebx
f0115f28:	ba 17 00 00 00       	mov    $0x17,%edx
f0115f2d:	89 c7                	mov    %eax,%edi
f0115f2f:	89 de                	mov    %ebx,%esi
f0115f31:	89 d1                	mov    %edx,%ecx
f0115f33:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115f35:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115f3b:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115f40:	b0 00                	mov    $0x0,%al
f0115f42:	89 d7                	mov    %edx,%edi
f0115f44:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115f46:	83 ec 0c             	sub    $0xc,%esp
f0115f49:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115f4f:	50                   	push   %eax
f0115f50:	e8 8f ad fe ff       	call   f0100ce4 <execute_command>
f0115f55:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115f58:	83 ec 04             	sub    $0x4,%esp
f0115f5b:	6a 00                	push   $0x0
f0115f5d:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115f60:	50                   	push   %eax
f0115f61:	68 00 10 00 00       	push   $0x1000
f0115f66:	e8 2d 3b ff ff       	call   f0109a98 <envid2env>
f0115f6b:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115f6e:	83 ec 04             	sub    $0x4,%esp
f0115f71:	6a 00                	push   $0x0
f0115f73:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115f76:	50                   	push   %eax
f0115f77:	68 01 10 00 00       	push   $0x1001
f0115f7c:	e8 17 3b ff ff       	call   f0109a98 <envid2env>
f0115f81:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115f84:	83 ec 04             	sub    $0x4,%esp
f0115f87:	6a 00                	push   $0x0
f0115f89:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115f8c:	50                   	push   %eax
f0115f8d:	68 02 10 00 00       	push   $0x1002
f0115f92:	e8 01 3b ff ff       	call   f0109a98 <envid2env>
f0115f97:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115f9a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f9d:	85 c0                	test   %eax,%eax
f0115f9f:	74 0e                	je     f0115faf <test_priority_normal_and_higher+0x12b>
f0115fa1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fa4:	85 c0                	test   %eax,%eax
f0115fa6:	74 07                	je     f0115faf <test_priority_normal_and_higher+0x12b>
f0115fa8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fab:	85 c0                	test   %eax,%eax
f0115fad:	75 14                	jne    f0115fc3 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115faf:	83 ec 04             	sub    $0x4,%esp
f0115fb2:	68 f8 a6 13 f0       	push   $0xf013a6f8
f0115fb7:	6a 26                	push   $0x26
f0115fb9:	68 11 a7 13 f0       	push   $0xf013a711
f0115fbe:	e8 38 a2 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115fc3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115fc6:	8b 40 74             	mov    0x74(%eax),%eax
f0115fc9:	83 f8 14             	cmp    $0x14,%eax
f0115fcc:	75 16                	jne    f0115fe4 <test_priority_normal_and_higher+0x160>
f0115fce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fd1:	8b 40 74             	mov    0x74(%eax),%eax
f0115fd4:	83 f8 0f             	cmp    $0xf,%eax
f0115fd7:	75 0b                	jne    f0115fe4 <test_priority_normal_and_higher+0x160>
f0115fd9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fdc:	8b 40 74             	mov    0x74(%eax),%eax
f0115fdf:	83 f8 0a             	cmp    $0xa,%eax
f0115fe2:	74 14                	je     f0115ff8 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115fe4:	83 ec 04             	sub    $0x4,%esp
f0115fe7:	68 2c a7 13 f0       	push   $0xf013a72c
f0115fec:	6a 29                	push   $0x29
f0115fee:	68 11 a7 13 f0       	push   $0xf013a711
f0115ff3:	e8 03 a2 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f0115ff8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115fff:	eb 44                	jmp    f0116045 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116001:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116004:	8b 48 78             	mov    0x78(%eax),%ecx
f0116007:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011600a:	89 d0                	mov    %edx,%eax
f011600c:	01 c0                	add    %eax,%eax
f011600e:	01 d0                	add    %edx,%eax
f0116010:	c1 e0 03             	shl    $0x3,%eax
f0116013:	01 c8                	add    %ecx,%eax
f0116015:	8b 10                	mov    (%eax),%edx
f0116017:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011601a:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116021:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116024:	8b 48 78             	mov    0x78(%eax),%ecx
f0116027:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011602a:	89 d0                	mov    %edx,%eax
f011602c:	01 c0                	add    %eax,%eax
f011602e:	01 d0                	add    %edx,%eax
f0116030:	c1 e0 03             	shl    $0x3,%eax
f0116033:	01 c8                	add    %ecx,%eax
f0116035:	8b 50 08             	mov    0x8(%eax),%edx
f0116038:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011603b:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116042:	ff 45 e4             	incl   -0x1c(%ebp)
f0116045:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116049:	7e b6                	jle    f0116001 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011604b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116052:	eb 44                	jmp    f0116098 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116054:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116057:	8b 48 78             	mov    0x78(%eax),%ecx
f011605a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011605d:	89 d0                	mov    %edx,%eax
f011605f:	01 c0                	add    %eax,%eax
f0116061:	01 d0                	add    %edx,%eax
f0116063:	c1 e0 03             	shl    $0x3,%eax
f0116066:	01 c8                	add    %ecx,%eax
f0116068:	8b 10                	mov    (%eax),%edx
f011606a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011606d:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116074:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116077:	8b 48 78             	mov    0x78(%eax),%ecx
f011607a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011607d:	89 d0                	mov    %edx,%eax
f011607f:	01 c0                	add    %eax,%eax
f0116081:	01 d0                	add    %edx,%eax
f0116083:	c1 e0 03             	shl    $0x3,%eax
f0116086:	01 c8                	add    %ecx,%eax
f0116088:	8b 50 08             	mov    0x8(%eax),%edx
f011608b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011608e:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116095:	ff 45 e0             	incl   -0x20(%ebp)
f0116098:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f011609c:	7e b6                	jle    f0116054 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011609e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01160a5:	eb 44                	jmp    f01160eb <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01160a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160aa:	8b 48 78             	mov    0x78(%eax),%ecx
f01160ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01160b0:	89 d0                	mov    %edx,%eax
f01160b2:	01 c0                	add    %eax,%eax
f01160b4:	01 d0                	add    %edx,%eax
f01160b6:	c1 e0 03             	shl    $0x3,%eax
f01160b9:	01 c8                	add    %ecx,%eax
f01160bb:	8b 10                	mov    (%eax),%edx
f01160bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01160c0:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01160c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01160cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01160d0:	89 d0                	mov    %edx,%eax
f01160d2:	01 c0                	add    %eax,%eax
f01160d4:	01 d0                	add    %edx,%eax
f01160d6:	c1 e0 03             	shl    $0x3,%eax
f01160d9:	01 c8                	add    %ecx,%eax
f01160db:	8b 50 08             	mov    0x8(%eax),%edx
f01160de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01160e1:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01160e8:	ff 45 dc             	incl   -0x24(%ebp)
f01160eb:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01160ef:	7e b6                	jle    f01160a7 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01160f1:	e8 5b 69 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01160f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01160f9:	e8 3e dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160fe:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116101:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116104:	83 ec 08             	sub    $0x8,%esp
f0116107:	6a 03                	push   $0x3
f0116109:	50                   	push   %eax
f011610a:	e8 1e 4e ff ff       	call   f010af2d <set_program_priority>
f011610f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116112:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116115:	83 ec 08             	sub    $0x8,%esp
f0116118:	6a 03                	push   $0x3
f011611a:	50                   	push   %eax
f011611b:	e8 0d 4e ff ff       	call   f010af2d <set_program_priority>
f0116120:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116123:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116126:	83 ec 08             	sub    $0x8,%esp
f0116129:	6a 03                	push   $0x3
f011612b:	50                   	push   %eax
f011612c:	e8 fc 4d ff ff       	call   f010af2d <set_program_priority>
f0116131:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116134:	e8 03 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116139:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011613c:	74 14                	je     f0116152 <test_priority_normal_and_higher+0x2ce>
f011613e:	83 ec 04             	sub    $0x4,%esp
f0116141:	68 78 a7 13 f0       	push   $0xf013a778
f0116146:	6a 45                	push   $0x45
f0116148:	68 11 a7 13 f0       	push   $0xf013a711
f011614d:	e8 a9 a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116152:	e8 fa 68 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116157:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011615a:	74 14                	je     f0116170 <test_priority_normal_and_higher+0x2ec>
f011615c:	83 ec 04             	sub    $0x4,%esp
f011615f:	68 78 a7 13 f0       	push   $0xf013a778
f0116164:	6a 46                	push   $0x46
f0116166:	68 11 a7 13 f0       	push   $0xf013a711
f011616b:	e8 8b a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116170:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116173:	8b 40 74             	mov    0x74(%eax),%eax
f0116176:	83 f8 14             	cmp    $0x14,%eax
f0116179:	75 16                	jne    f0116191 <test_priority_normal_and_higher+0x30d>
f011617b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011617e:	8b 40 74             	mov    0x74(%eax),%eax
f0116181:	83 f8 0f             	cmp    $0xf,%eax
f0116184:	75 0b                	jne    f0116191 <test_priority_normal_and_higher+0x30d>
f0116186:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116189:	8b 40 74             	mov    0x74(%eax),%eax
f011618c:	83 f8 0a             	cmp    $0xa,%eax
f011618f:	74 14                	je     f01161a5 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116191:	83 ec 04             	sub    $0x4,%esp
f0116194:	68 a4 a7 13 f0       	push   $0xf013a7a4
f0116199:	6a 49                	push   $0x49
f011619b:	68 11 a7 13 f0       	push   $0xf013a711
f01161a0:	e8 56 a0 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f01161a5:	e8 a7 68 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01161aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01161ad:	e8 8a db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01161b2:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01161b5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01161b8:	83 ec 08             	sub    $0x8,%esp
f01161bb:	6a 04                	push   $0x4
f01161bd:	50                   	push   %eax
f01161be:	e8 6a 4d ff ff       	call   f010af2d <set_program_priority>
f01161c3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01161c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161c9:	83 ec 08             	sub    $0x8,%esp
f01161cc:	6a 04                	push   $0x4
f01161ce:	50                   	push   %eax
f01161cf:	e8 59 4d ff ff       	call   f010af2d <set_program_priority>
f01161d4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01161d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161da:	83 ec 08             	sub    $0x8,%esp
f01161dd:	6a 04                	push   $0x4
f01161df:	50                   	push   %eax
f01161e0:	e8 48 4d ff ff       	call   f010af2d <set_program_priority>
f01161e5:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161e8:	e8 4f db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01161ed:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01161f0:	74 14                	je     f0116206 <test_priority_normal_and_higher+0x382>
f01161f2:	83 ec 04             	sub    $0x4,%esp
f01161f5:	68 78 a7 13 f0       	push   $0xf013a778
f01161fa:	6a 53                	push   $0x53
f01161fc:	68 11 a7 13 f0       	push   $0xf013a711
f0116201:	e8 f5 9f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116206:	e8 46 68 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011620b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011620e:	74 14                	je     f0116224 <test_priority_normal_and_higher+0x3a0>
f0116210:	83 ec 04             	sub    $0x4,%esp
f0116213:	68 f8 a7 13 f0       	push   $0xf013a7f8
f0116218:	6a 54                	push   $0x54
f011621a:	68 11 a7 13 f0       	push   $0xf013a711
f011621f:	e8 d7 9f fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116224:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116227:	8b 40 74             	mov    0x74(%eax),%eax
f011622a:	83 f8 14             	cmp    $0x14,%eax
f011622d:	75 16                	jne    f0116245 <test_priority_normal_and_higher+0x3c1>
f011622f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116232:	8b 40 74             	mov    0x74(%eax),%eax
f0116235:	83 f8 0f             	cmp    $0xf,%eax
f0116238:	75 0b                	jne    f0116245 <test_priority_normal_and_higher+0x3c1>
f011623a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011623d:	8b 40 74             	mov    0x74(%eax),%eax
f0116240:	83 f8 14             	cmp    $0x14,%eax
f0116243:	74 14                	je     f0116259 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116245:	83 ec 04             	sub    $0x4,%esp
f0116248:	68 28 a8 13 f0       	push   $0xf013a828
f011624d:	6a 57                	push   $0x57
f011624f:	68 11 a7 13 f0       	push   $0xf013a711
f0116254:	e8 a2 9f fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116259:	e8 f3 67 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011625e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116261:	e8 d6 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116266:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116269:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011626c:	83 ec 08             	sub    $0x8,%esp
f011626f:	6a 04                	push   $0x4
f0116271:	50                   	push   %eax
f0116272:	e8 b6 4c ff ff       	call   f010af2d <set_program_priority>
f0116277:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011627a:	e8 bd da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011627f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116282:	74 14                	je     f0116298 <test_priority_normal_and_higher+0x414>
f0116284:	83 ec 04             	sub    $0x4,%esp
f0116287:	68 78 a7 13 f0       	push   $0xf013a778
f011628c:	6a 5f                	push   $0x5f
f011628e:	68 11 a7 13 f0       	push   $0xf013a711
f0116293:	e8 63 9f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116298:	e8 b4 67 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011629d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01162a0:	74 14                	je     f01162b6 <test_priority_normal_and_higher+0x432>
f01162a2:	83 ec 04             	sub    $0x4,%esp
f01162a5:	68 78 a7 13 f0       	push   $0xf013a778
f01162aa:	6a 60                	push   $0x60
f01162ac:	68 11 a7 13 f0       	push   $0xf013a711
f01162b1:	e8 45 9f fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01162b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01162b9:	8b 40 74             	mov    0x74(%eax),%eax
f01162bc:	83 f8 14             	cmp    $0x14,%eax
f01162bf:	75 16                	jne    f01162d7 <test_priority_normal_and_higher+0x453>
f01162c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162c4:	8b 40 74             	mov    0x74(%eax),%eax
f01162c7:	83 f8 0f             	cmp    $0xf,%eax
f01162ca:	75 0b                	jne    f01162d7 <test_priority_normal_and_higher+0x453>
f01162cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162cf:	8b 40 74             	mov    0x74(%eax),%eax
f01162d2:	83 f8 14             	cmp    $0x14,%eax
f01162d5:	74 14                	je     f01162eb <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f01162d7:	83 ec 04             	sub    $0x4,%esp
f01162da:	68 70 a8 13 f0       	push   $0xf013a870
f01162df:	6a 63                	push   $0x63
f01162e1:	68 11 a7 13 f0       	push   $0xf013a711
f01162e6:	e8 10 9f fe ff       	call   f01001fb <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01162eb:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01162f2:	eb 1b                	jmp    f011630f <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01162f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162f7:	8b 48 78             	mov    0x78(%eax),%ecx
f01162fa:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01162fd:	89 d0                	mov    %edx,%eax
f01162ff:	01 c0                	add    %eax,%eax
f0116301:	01 d0                	add    %edx,%eax
f0116303:	c1 e0 03             	shl    $0x3,%eax
f0116306:	01 c8                	add    %ecx,%eax
f0116308:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011630c:	ff 45 d8             	incl   -0x28(%ebp)
f011630f:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116313:	7e df                	jle    f01162f4 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116315:	e8 37 67 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011631a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011631d:	e8 1a da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116322:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116325:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116328:	83 ec 08             	sub    $0x8,%esp
f011632b:	6a 04                	push   $0x4
f011632d:	50                   	push   %eax
f011632e:	e8 fa 4b ff ff       	call   f010af2d <set_program_priority>
f0116333:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116336:	e8 01 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011633b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011633e:	74 14                	je     f0116354 <test_priority_normal_and_higher+0x4d0>
f0116340:	83 ec 04             	sub    $0x4,%esp
f0116343:	68 78 a7 13 f0       	push   $0xf013a778
f0116348:	6a 70                	push   $0x70
f011634a:	68 11 a7 13 f0       	push   $0xf013a711
f011634f:	e8 a7 9e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116354:	e8 f8 66 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116359:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011635c:	74 14                	je     f0116372 <test_priority_normal_and_higher+0x4ee>
f011635e:	83 ec 04             	sub    $0x4,%esp
f0116361:	68 78 a7 13 f0       	push   $0xf013a778
f0116366:	6a 71                	push   $0x71
f0116368:	68 11 a7 13 f0       	push   $0xf013a711
f011636d:	e8 89 9e fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116372:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116375:	8b 40 74             	mov    0x74(%eax),%eax
f0116378:	83 f8 14             	cmp    $0x14,%eax
f011637b:	75 16                	jne    f0116393 <test_priority_normal_and_higher+0x50f>
f011637d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116380:	8b 40 74             	mov    0x74(%eax),%eax
f0116383:	83 f8 0f             	cmp    $0xf,%eax
f0116386:	75 0b                	jne    f0116393 <test_priority_normal_and_higher+0x50f>
f0116388:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011638b:	8b 40 74             	mov    0x74(%eax),%eax
f011638e:	83 f8 14             	cmp    $0x14,%eax
f0116391:	74 14                	je     f01163a7 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116393:	83 ec 04             	sub    $0x4,%esp
f0116396:	68 70 a8 13 f0       	push   $0xf013a870
f011639b:	6a 74                	push   $0x74
f011639d:	68 11 a7 13 f0       	push   $0xf013a711
f01163a2:	e8 54 9e fe ff       	call   f01001fb <_panic>

		for(int i = 10; i < 15; i++)
f01163a7:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01163ae:	eb 1b                	jmp    f01163cb <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01163b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163b3:	8b 48 78             	mov    0x78(%eax),%ecx
f01163b6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01163b9:	89 d0                	mov    %edx,%eax
f01163bb:	01 c0                	add    %eax,%eax
f01163bd:	01 d0                	add    %edx,%eax
f01163bf:	c1 e0 03             	shl    $0x3,%eax
f01163c2:	01 c8                	add    %ecx,%eax
f01163c4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01163c8:	ff 45 d4             	incl   -0x2c(%ebp)
f01163cb:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01163cf:	7e df                	jle    f01163b0 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01163d1:	e8 7b 66 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01163d6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163d9:	e8 5e d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01163de:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01163e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163e4:	83 ec 08             	sub    $0x8,%esp
f01163e7:	6a 05                	push   $0x5
f01163e9:	50                   	push   %eax
f01163ea:	e8 3e 4b ff ff       	call   f010af2d <set_program_priority>
f01163ef:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01163f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01163f5:	83 ec 08             	sub    $0x8,%esp
f01163f8:	6a 05                	push   $0x5
f01163fa:	50                   	push   %eax
f01163fb:	e8 2d 4b ff ff       	call   f010af2d <set_program_priority>
f0116400:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116403:	e8 34 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116408:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011640b:	74 14                	je     f0116421 <test_priority_normal_and_higher+0x59d>
f011640d:	83 ec 04             	sub    $0x4,%esp
f0116410:	68 78 a7 13 f0       	push   $0xf013a778
f0116415:	6a 7f                	push   $0x7f
f0116417:	68 11 a7 13 f0       	push   $0xf013a711
f011641c:	e8 da 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116421:	e8 2b 66 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116426:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116429:	74 17                	je     f0116442 <test_priority_normal_and_higher+0x5be>
f011642b:	83 ec 04             	sub    $0x4,%esp
f011642e:	68 78 a7 13 f0       	push   $0xf013a778
f0116433:	68 80 00 00 00       	push   $0x80
f0116438:	68 11 a7 13 f0       	push   $0xf013a711
f011643d:	e8 b9 9d fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116442:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116445:	8b 40 74             	mov    0x74(%eax),%eax
f0116448:	83 f8 14             	cmp    $0x14,%eax
f011644b:	75 16                	jne    f0116463 <test_priority_normal_and_higher+0x5df>
f011644d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116450:	8b 40 74             	mov    0x74(%eax),%eax
f0116453:	83 f8 1e             	cmp    $0x1e,%eax
f0116456:	75 0b                	jne    f0116463 <test_priority_normal_and_higher+0x5df>
f0116458:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011645b:	8b 40 74             	mov    0x74(%eax),%eax
f011645e:	83 f8 28             	cmp    $0x28,%eax
f0116461:	74 17                	je     f011647a <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116463:	83 ec 04             	sub    $0x4,%esp
f0116466:	68 ac a8 13 f0       	push   $0xf013a8ac
f011646b:	68 83 00 00 00       	push   $0x83
f0116470:	68 11 a7 13 f0       	push   $0xf013a711
f0116475:	e8 81 9d fe ff       	call   f01001fb <_panic>

		for(int i = 20; i < 40; i++)
f011647a:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116481:	eb 1b                	jmp    f011649e <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116483:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116486:	8b 48 78             	mov    0x78(%eax),%ecx
f0116489:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011648c:	89 d0                	mov    %edx,%eax
f011648e:	01 c0                	add    %eax,%eax
f0116490:	01 d0                	add    %edx,%eax
f0116492:	c1 e0 03             	shl    $0x3,%eax
f0116495:	01 c8                	add    %ecx,%eax
f0116497:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011649b:	ff 45 d0             	incl   -0x30(%ebp)
f011649e:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01164a2:	7e df                	jle    f0116483 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01164a4:	e8 a8 65 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01164a9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01164ac:	e8 8b d8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01164b1:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01164b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164b7:	83 ec 08             	sub    $0x8,%esp
f01164ba:	6a 05                	push   $0x5
f01164bc:	50                   	push   %eax
f01164bd:	e8 6b 4a ff ff       	call   f010af2d <set_program_priority>
f01164c2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01164c5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164c8:	83 ec 08             	sub    $0x8,%esp
f01164cb:	6a 04                	push   $0x4
f01164cd:	50                   	push   %eax
f01164ce:	e8 5a 4a ff ff       	call   f010af2d <set_program_priority>
f01164d3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164d6:	e8 61 d8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01164db:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01164de:	74 17                	je     f01164f7 <test_priority_normal_and_higher+0x673>
f01164e0:	83 ec 04             	sub    $0x4,%esp
f01164e3:	68 78 a7 13 f0       	push   $0xf013a778
f01164e8:	68 8e 00 00 00       	push   $0x8e
f01164ed:	68 11 a7 13 f0       	push   $0xf013a711
f01164f2:	e8 04 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01164f7:	e8 55 65 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01164fc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01164ff:	74 17                	je     f0116518 <test_priority_normal_and_higher+0x694>
f0116501:	83 ec 04             	sub    $0x4,%esp
f0116504:	68 78 a7 13 f0       	push   $0xf013a778
f0116509:	68 8f 00 00 00       	push   $0x8f
f011650e:	68 11 a7 13 f0       	push   $0xf013a711
f0116513:	e8 e3 9c fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116518:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011651b:	8b 40 74             	mov    0x74(%eax),%eax
f011651e:	83 f8 14             	cmp    $0x14,%eax
f0116521:	75 16                	jne    f0116539 <test_priority_normal_and_higher+0x6b5>
f0116523:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116526:	8b 40 74             	mov    0x74(%eax),%eax
f0116529:	83 f8 1e             	cmp    $0x1e,%eax
f011652c:	75 0b                	jne    f0116539 <test_priority_normal_and_higher+0x6b5>
f011652e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116531:	8b 40 74             	mov    0x74(%eax),%eax
f0116534:	83 f8 28             	cmp    $0x28,%eax
f0116537:	74 17                	je     f0116550 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116539:	83 ec 04             	sub    $0x4,%esp
f011653c:	68 ac a8 13 f0       	push   $0xf013a8ac
f0116541:	68 92 00 00 00       	push   $0x92
f0116546:	68 11 a7 13 f0       	push   $0xf013a711
f011654b:	e8 ab 9c fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 30; i++)
f0116550:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116557:	eb 1b                	jmp    f0116574 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116559:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011655c:	8b 48 78             	mov    0x78(%eax),%ecx
f011655f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116562:	89 d0                	mov    %edx,%eax
f0116564:	01 c0                	add    %eax,%eax
f0116566:	01 d0                	add    %edx,%eax
f0116568:	c1 e0 03             	shl    $0x3,%eax
f011656b:	01 c8                	add    %ecx,%eax
f011656d:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116571:	ff 45 cc             	incl   -0x34(%ebp)
f0116574:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116578:	7e df                	jle    f0116559 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011657a:	e8 d2 64 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011657f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116582:	e8 b5 d7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116587:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011658a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011658d:	83 ec 08             	sub    $0x8,%esp
f0116590:	6a 05                	push   $0x5
f0116592:	50                   	push   %eax
f0116593:	e8 95 49 ff ff       	call   f010af2d <set_program_priority>
f0116598:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011659b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011659e:	83 ec 08             	sub    $0x8,%esp
f01165a1:	6a 04                	push   $0x4
f01165a3:	50                   	push   %eax
f01165a4:	e8 84 49 ff ff       	call   f010af2d <set_program_priority>
f01165a9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01165ac:	e8 8b d7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01165b1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01165b4:	74 17                	je     f01165cd <test_priority_normal_and_higher+0x749>
f01165b6:	83 ec 04             	sub    $0x4,%esp
f01165b9:	68 78 a7 13 f0       	push   $0xf013a778
f01165be:	68 9d 00 00 00       	push   $0x9d
f01165c3:	68 11 a7 13 f0       	push   $0xf013a711
f01165c8:	e8 2e 9c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01165cd:	e8 7f 64 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01165d2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01165d5:	74 17                	je     f01165ee <test_priority_normal_and_higher+0x76a>
f01165d7:	83 ec 04             	sub    $0x4,%esp
f01165da:	68 78 a7 13 f0       	push   $0xf013a778
f01165df:	68 9e 00 00 00       	push   $0x9e
f01165e4:	68 11 a7 13 f0       	push   $0xf013a711
f01165e9:	e8 0d 9c fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01165ee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01165f1:	8b 40 74             	mov    0x74(%eax),%eax
f01165f4:	83 f8 14             	cmp    $0x14,%eax
f01165f7:	75 16                	jne    f011660f <test_priority_normal_and_higher+0x78b>
f01165f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01165fc:	8b 40 74             	mov    0x74(%eax),%eax
f01165ff:	83 f8 3c             	cmp    $0x3c,%eax
f0116602:	75 0b                	jne    f011660f <test_priority_normal_and_higher+0x78b>
f0116604:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116607:	8b 40 74             	mov    0x74(%eax),%eax
f011660a:	83 f8 28             	cmp    $0x28,%eax
f011660d:	74 17                	je     f0116626 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f011660f:	83 ec 04             	sub    $0x4,%esp
f0116612:	68 ac a8 13 f0       	push   $0xf013a8ac
f0116617:	68 a1 00 00 00       	push   $0xa1
f011661c:	68 11 a7 13 f0       	push   $0xf013a711
f0116621:	e8 d5 9b fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 60; i++)
f0116626:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f011662d:	eb 1b                	jmp    f011664a <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011662f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116632:	8b 48 78             	mov    0x78(%eax),%ecx
f0116635:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116638:	89 d0                	mov    %edx,%eax
f011663a:	01 c0                	add    %eax,%eax
f011663c:	01 d0                	add    %edx,%eax
f011663e:	c1 e0 03             	shl    $0x3,%eax
f0116641:	01 c8                	add    %ecx,%eax
f0116643:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116647:	ff 45 c8             	incl   -0x38(%ebp)
f011664a:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011664e:	7e df                	jle    f011662f <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116650:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116657:	eb 1b                	jmp    f0116674 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116659:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011665c:	8b 48 78             	mov    0x78(%eax),%ecx
f011665f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116662:	89 d0                	mov    %edx,%eax
f0116664:	01 c0                	add    %eax,%eax
f0116666:	01 d0                	add    %edx,%eax
f0116668:	c1 e0 03             	shl    $0x3,%eax
f011666b:	01 c8                	add    %ecx,%eax
f011666d:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116671:	ff 45 c4             	incl   -0x3c(%ebp)
f0116674:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116678:	7e df                	jle    f0116659 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011667a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116681:	eb 7a                	jmp    f01166fd <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116683:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116686:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f011668d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116690:	8b 58 78             	mov    0x78(%eax),%ebx
f0116693:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116696:	89 d0                	mov    %edx,%eax
f0116698:	01 c0                	add    %eax,%eax
f011669a:	01 d0                	add    %edx,%eax
f011669c:	c1 e0 03             	shl    $0x3,%eax
f011669f:	01 d8                	add    %ebx,%eax
f01166a1:	8b 00                	mov    (%eax),%eax
f01166a3:	39 c1                	cmp    %eax,%ecx
f01166a5:	74 17                	je     f01166be <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f01166a7:	83 ec 04             	sub    $0x4,%esp
f01166aa:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01166af:	68 af 00 00 00       	push   $0xaf
f01166b4:	68 11 a7 13 f0       	push   $0xf013a711
f01166b9:	e8 3d 9b fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01166be:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01166c1:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01166c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01166cb:	8b 58 78             	mov    0x78(%eax),%ebx
f01166ce:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01166d1:	89 d0                	mov    %edx,%eax
f01166d3:	01 c0                	add    %eax,%eax
f01166d5:	01 d0                	add    %edx,%eax
f01166d7:	c1 e0 03             	shl    $0x3,%eax
f01166da:	01 d8                	add    %ebx,%eax
f01166dc:	8b 40 08             	mov    0x8(%eax),%eax
f01166df:	39 c1                	cmp    %eax,%ecx
f01166e1:	74 17                	je     f01166fa <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f01166e3:	83 ec 04             	sub    $0x4,%esp
f01166e6:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01166eb:	68 b2 00 00 00       	push   $0xb2
f01166f0:	68 11 a7 13 f0       	push   $0xf013a711
f01166f5:	e8 01 9b fe ff       	call   f01001fb <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01166fa:	ff 45 c0             	incl   -0x40(%ebp)
f01166fd:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116701:	7e 80                	jle    f0116683 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116703:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011670a:	eb 7a                	jmp    f0116786 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011670c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011670f:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116716:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116719:	8b 58 78             	mov    0x78(%eax),%ebx
f011671c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011671f:	89 d0                	mov    %edx,%eax
f0116721:	01 c0                	add    %eax,%eax
f0116723:	01 d0                	add    %edx,%eax
f0116725:	c1 e0 03             	shl    $0x3,%eax
f0116728:	01 d8                	add    %ebx,%eax
f011672a:	8b 00                	mov    (%eax),%eax
f011672c:	39 c1                	cmp    %eax,%ecx
f011672e:	74 17                	je     f0116747 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116730:	83 ec 04             	sub    $0x4,%esp
f0116733:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116738:	68 b8 00 00 00       	push   $0xb8
f011673d:	68 11 a7 13 f0       	push   $0xf013a711
f0116742:	e8 b4 9a fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116747:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011674a:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116751:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116754:	8b 58 78             	mov    0x78(%eax),%ebx
f0116757:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011675a:	89 d0                	mov    %edx,%eax
f011675c:	01 c0                	add    %eax,%eax
f011675e:	01 d0                	add    %edx,%eax
f0116760:	c1 e0 03             	shl    $0x3,%eax
f0116763:	01 d8                	add    %ebx,%eax
f0116765:	8b 40 08             	mov    0x8(%eax),%eax
f0116768:	39 c1                	cmp    %eax,%ecx
f011676a:	74 17                	je     f0116783 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f011676c:	83 ec 04             	sub    $0x4,%esp
f011676f:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116774:	68 bb 00 00 00       	push   $0xbb
f0116779:	68 11 a7 13 f0       	push   $0xf013a711
f011677e:	e8 78 9a fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116783:	ff 45 bc             	incl   -0x44(%ebp)
f0116786:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011678a:	7e 80                	jle    f011670c <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011678c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116793:	eb 7a                	jmp    f011680f <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116795:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116798:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011679f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167a2:	8b 58 78             	mov    0x78(%eax),%ebx
f01167a5:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01167a8:	89 d0                	mov    %edx,%eax
f01167aa:	01 c0                	add    %eax,%eax
f01167ac:	01 d0                	add    %edx,%eax
f01167ae:	c1 e0 03             	shl    $0x3,%eax
f01167b1:	01 d8                	add    %ebx,%eax
f01167b3:	8b 00                	mov    (%eax),%eax
f01167b5:	39 c1                	cmp    %eax,%ecx
f01167b7:	74 17                	je     f01167d0 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f01167b9:	83 ec 04             	sub    $0x4,%esp
f01167bc:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01167c1:	68 c1 00 00 00       	push   $0xc1
f01167c6:	68 11 a7 13 f0       	push   $0xf013a711
f01167cb:	e8 2b 9a fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01167d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01167d3:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01167da:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167dd:	8b 58 78             	mov    0x78(%eax),%ebx
f01167e0:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01167e3:	89 d0                	mov    %edx,%eax
f01167e5:	01 c0                	add    %eax,%eax
f01167e7:	01 d0                	add    %edx,%eax
f01167e9:	c1 e0 03             	shl    $0x3,%eax
f01167ec:	01 d8                	add    %ebx,%eax
f01167ee:	8b 40 08             	mov    0x8(%eax),%eax
f01167f1:	39 c1                	cmp    %eax,%ecx
f01167f3:	74 17                	je     f011680c <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f01167f5:	83 ec 04             	sub    $0x4,%esp
f01167f8:	68 e8 a8 13 f0       	push   $0xf013a8e8
f01167fd:	68 c4 00 00 00       	push   $0xc4
f0116802:	68 11 a7 13 f0       	push   $0xf013a711
f0116807:	e8 ef 99 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011680c:	ff 45 b8             	incl   -0x48(%ebp)
f011680f:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116813:	7e 80                	jle    f0116795 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116815:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011681c:	75 6e 61 
f011681f:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116826:	6c 00 00 
f0116829:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011682f:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116834:	b8 00 00 00 00       	mov    $0x0,%eax
f0116839:	89 d7                	mov    %edx,%edi
f011683b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011683d:	83 ec 0c             	sub    $0xc,%esp
f0116840:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116846:	50                   	push   %eax
f0116847:	e8 98 a4 fe ff       	call   f0100ce4 <execute_command>
f011684c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011684f:	eb 10                	jmp    f0116861 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116851:	83 ec 0c             	sub    $0xc,%esp
f0116854:	68 1c a9 13 f0       	push   $0xf013a91c
f0116859:	e8 24 a4 fe ff       	call   f0100c82 <cprintf>
f011685e:	83 c4 10             	add    $0x10,%esp
	}
}
f0116861:	90                   	nop
f0116862:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116865:	5b                   	pop    %ebx
f0116866:	5e                   	pop    %esi
f0116867:	5f                   	pop    %edi
f0116868:	5d                   	pop    %ebp
f0116869:	c3                   	ret    

f011686a <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011686a:	55                   	push   %ebp
f011686b:	89 e5                	mov    %esp,%ebp
f011686d:	57                   	push   %edi
f011686e:	56                   	push   %esi
f011686f:	53                   	push   %ebx
f0116870:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116876:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f011687b:	84 c0                	test   %al,%al
f011687d:	0f 84 be 09 00 00    	je     f0117241 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116883:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f011688a:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116890:	bb 58 a9 13 f0       	mov    $0xf013a958,%ebx
f0116895:	ba 04 00 00 00       	mov    $0x4,%edx
f011689a:	89 c7                	mov    %eax,%edi
f011689c:	89 de                	mov    %ebx,%esi
f011689e:	89 d1                	mov    %edx,%ecx
f01168a0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01168a2:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01168a8:	b9 15 00 00 00       	mov    $0x15,%ecx
f01168ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01168b2:	89 d7                	mov    %edx,%edi
f01168b4:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01168b6:	83 ec 0c             	sub    $0xc,%esp
f01168b9:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01168bf:	50                   	push   %eax
f01168c0:	e8 1f a4 fe ff       	call   f0100ce4 <execute_command>
f01168c5:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01168c8:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01168ce:	bb 14 ac 13 f0       	mov    $0xf013ac14,%ebx
f01168d3:	ba 0d 00 00 00       	mov    $0xd,%edx
f01168d8:	89 c7                	mov    %eax,%edi
f01168da:	89 de                	mov    %ebx,%esi
f01168dc:	89 d1                	mov    %edx,%ecx
f01168de:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01168e0:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01168e6:	b9 57 00 00 00       	mov    $0x57,%ecx
f01168eb:	b0 00                	mov    $0x0,%al
f01168ed:	89 d7                	mov    %edx,%edi
f01168ef:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01168f1:	83 ec 0c             	sub    $0xc,%esp
f01168f4:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01168fa:	50                   	push   %eax
f01168fb:	e8 e4 a3 fe ff       	call   f0100ce4 <execute_command>
f0116900:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116903:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116909:	bb 78 ac 13 f0       	mov    $0xf013ac78,%ebx
f011690e:	ba 17 00 00 00       	mov    $0x17,%edx
f0116913:	89 c7                	mov    %eax,%edi
f0116915:	89 de                	mov    %ebx,%esi
f0116917:	89 d1                	mov    %edx,%ecx
f0116919:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011691b:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116921:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116926:	b0 00                	mov    $0x0,%al
f0116928:	89 d7                	mov    %edx,%edi
f011692a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011692c:	83 ec 0c             	sub    $0xc,%esp
f011692f:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116935:	50                   	push   %eax
f0116936:	e8 a9 a3 fe ff       	call   f0100ce4 <execute_command>
f011693b:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011693e:	83 ec 04             	sub    $0x4,%esp
f0116941:	6a 00                	push   $0x0
f0116943:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116946:	50                   	push   %eax
f0116947:	68 00 10 00 00       	push   $0x1000
f011694c:	e8 47 31 ff ff       	call   f0109a98 <envid2env>
f0116951:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116954:	83 ec 04             	sub    $0x4,%esp
f0116957:	6a 00                	push   $0x0
f0116959:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011695c:	50                   	push   %eax
f011695d:	68 01 10 00 00       	push   $0x1001
f0116962:	e8 31 31 ff ff       	call   f0109a98 <envid2env>
f0116967:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011696a:	83 ec 04             	sub    $0x4,%esp
f011696d:	6a 00                	push   $0x0
f011696f:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116972:	50                   	push   %eax
f0116973:	68 02 10 00 00       	push   $0x1002
f0116978:	e8 1b 31 ff ff       	call   f0109a98 <envid2env>
f011697d:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116980:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116983:	85 c0                	test   %eax,%eax
f0116985:	74 0e                	je     f0116995 <test_priority_normal_and_lower+0x12b>
f0116987:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011698a:	85 c0                	test   %eax,%eax
f011698c:	74 07                	je     f0116995 <test_priority_normal_and_lower+0x12b>
f011698e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116991:	85 c0                	test   %eax,%eax
f0116993:	75 17                	jne    f01169ac <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116995:	83 ec 04             	sub    $0x4,%esp
f0116998:	68 f8 a6 13 f0       	push   $0xf013a6f8
f011699d:	68 eb 00 00 00       	push   $0xeb
f01169a2:	68 11 a7 13 f0       	push   $0xf013a711
f01169a7:	e8 4f 98 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01169ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169af:	8b 40 74             	mov    0x74(%eax),%eax
f01169b2:	83 f8 14             	cmp    $0x14,%eax
f01169b5:	75 16                	jne    f01169cd <test_priority_normal_and_lower+0x163>
f01169b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169ba:	8b 40 74             	mov    0x74(%eax),%eax
f01169bd:	83 f8 1e             	cmp    $0x1e,%eax
f01169c0:	75 0b                	jne    f01169cd <test_priority_normal_and_lower+0x163>
f01169c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169c5:	8b 40 74             	mov    0x74(%eax),%eax
f01169c8:	83 f8 28             	cmp    $0x28,%eax
f01169cb:	74 17                	je     f01169e4 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01169cd:	83 ec 04             	sub    $0x4,%esp
f01169d0:	68 2c a7 13 f0       	push   $0xf013a72c
f01169d5:	68 ee 00 00 00       	push   $0xee
f01169da:	68 11 a7 13 f0       	push   $0xf013a711
f01169df:	e8 17 98 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f01169e4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01169eb:	eb 44                	jmp    f0116a31 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01169ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169f0:	8b 48 78             	mov    0x78(%eax),%ecx
f01169f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01169f6:	89 d0                	mov    %edx,%eax
f01169f8:	01 c0                	add    %eax,%eax
f01169fa:	01 d0                	add    %edx,%eax
f01169fc:	c1 e0 03             	shl    $0x3,%eax
f01169ff:	01 c8                	add    %ecx,%eax
f0116a01:	8b 10                	mov    (%eax),%edx
f0116a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116a06:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116a0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a10:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116a16:	89 d0                	mov    %edx,%eax
f0116a18:	01 c0                	add    %eax,%eax
f0116a1a:	01 d0                	add    %edx,%eax
f0116a1c:	c1 e0 03             	shl    $0x3,%eax
f0116a1f:	01 c8                	add    %ecx,%eax
f0116a21:	8b 50 08             	mov    0x8(%eax),%edx
f0116a24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116a27:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116a2e:	ff 45 e4             	incl   -0x1c(%ebp)
f0116a31:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116a35:	7e b6                	jle    f01169ed <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116a37:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116a3e:	eb 44                	jmp    f0116a84 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116a40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a43:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a46:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116a49:	89 d0                	mov    %edx,%eax
f0116a4b:	01 c0                	add    %eax,%eax
f0116a4d:	01 d0                	add    %edx,%eax
f0116a4f:	c1 e0 03             	shl    $0x3,%eax
f0116a52:	01 c8                	add    %ecx,%eax
f0116a54:	8b 10                	mov    (%eax),%edx
f0116a56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116a59:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116a60:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a63:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a66:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116a69:	89 d0                	mov    %edx,%eax
f0116a6b:	01 c0                	add    %eax,%eax
f0116a6d:	01 d0                	add    %edx,%eax
f0116a6f:	c1 e0 03             	shl    $0x3,%eax
f0116a72:	01 c8                	add    %ecx,%eax
f0116a74:	8b 50 08             	mov    0x8(%eax),%edx
f0116a77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116a7a:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116a81:	ff 45 e0             	incl   -0x20(%ebp)
f0116a84:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116a88:	7e b6                	jle    f0116a40 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116a8a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116a91:	eb 44                	jmp    f0116ad7 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116a93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a96:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a99:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116a9c:	89 d0                	mov    %edx,%eax
f0116a9e:	01 c0                	add    %eax,%eax
f0116aa0:	01 d0                	add    %edx,%eax
f0116aa2:	c1 e0 03             	shl    $0x3,%eax
f0116aa5:	01 c8                	add    %ecx,%eax
f0116aa7:	8b 10                	mov    (%eax),%edx
f0116aa9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116aac:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116ab3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ab6:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ab9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116abc:	89 d0                	mov    %edx,%eax
f0116abe:	01 c0                	add    %eax,%eax
f0116ac0:	01 d0                	add    %edx,%eax
f0116ac2:	c1 e0 03             	shl    $0x3,%eax
f0116ac5:	01 c8                	add    %ecx,%eax
f0116ac7:	8b 50 08             	mov    0x8(%eax),%edx
f0116aca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116acd:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116ad4:	ff 45 dc             	incl   -0x24(%ebp)
f0116ad7:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116adb:	7e b6                	jle    f0116a93 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116add:	e8 6f 5f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116ae2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116ae5:	e8 52 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116aea:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116aed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116af0:	83 ec 08             	sub    $0x8,%esp
f0116af3:	6a 03                	push   $0x3
f0116af5:	50                   	push   %eax
f0116af6:	e8 32 44 ff ff       	call   f010af2d <set_program_priority>
f0116afb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116afe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b01:	83 ec 08             	sub    $0x8,%esp
f0116b04:	6a 03                	push   $0x3
f0116b06:	50                   	push   %eax
f0116b07:	e8 21 44 ff ff       	call   f010af2d <set_program_priority>
f0116b0c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116b0f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b12:	83 ec 08             	sub    $0x8,%esp
f0116b15:	6a 03                	push   $0x3
f0116b17:	50                   	push   %eax
f0116b18:	e8 10 44 ff ff       	call   f010af2d <set_program_priority>
f0116b1d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b20:	e8 17 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116b25:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116b28:	74 17                	je     f0116b41 <test_priority_normal_and_lower+0x2d7>
f0116b2a:	83 ec 04             	sub    $0x4,%esp
f0116b2d:	68 78 a7 13 f0       	push   $0xf013a778
f0116b32:	68 0a 01 00 00       	push   $0x10a
f0116b37:	68 11 a7 13 f0       	push   $0xf013a711
f0116b3c:	e8 ba 96 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116b41:	e8 0b 5f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116b46:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116b49:	74 17                	je     f0116b62 <test_priority_normal_and_lower+0x2f8>
f0116b4b:	83 ec 04             	sub    $0x4,%esp
f0116b4e:	68 78 a7 13 f0       	push   $0xf013a778
f0116b53:	68 0b 01 00 00       	push   $0x10b
f0116b58:	68 11 a7 13 f0       	push   $0xf013a711
f0116b5d:	e8 99 96 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116b62:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b65:	8b 40 74             	mov    0x74(%eax),%eax
f0116b68:	83 f8 14             	cmp    $0x14,%eax
f0116b6b:	75 16                	jne    f0116b83 <test_priority_normal_and_lower+0x319>
f0116b6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b70:	8b 40 74             	mov    0x74(%eax),%eax
f0116b73:	83 f8 1e             	cmp    $0x1e,%eax
f0116b76:	75 0b                	jne    f0116b83 <test_priority_normal_and_lower+0x319>
f0116b78:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b7b:	8b 40 74             	mov    0x74(%eax),%eax
f0116b7e:	83 f8 28             	cmp    $0x28,%eax
f0116b81:	74 17                	je     f0116b9a <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116b83:	83 ec 04             	sub    $0x4,%esp
f0116b86:	68 a4 a7 13 f0       	push   $0xf013a7a4
f0116b8b:	68 0e 01 00 00       	push   $0x10e
f0116b90:	68 11 a7 13 f0       	push   $0xf013a711
f0116b95:	e8 61 96 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116b9a:	e8 b2 5e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116b9f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ba2:	e8 95 d1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116ba7:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116baa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bad:	83 ec 08             	sub    $0x8,%esp
f0116bb0:	6a 02                	push   $0x2
f0116bb2:	50                   	push   %eax
f0116bb3:	e8 75 43 ff ff       	call   f010af2d <set_program_priority>
f0116bb8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116bbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116bbe:	83 ec 08             	sub    $0x8,%esp
f0116bc1:	6a 02                	push   $0x2
f0116bc3:	50                   	push   %eax
f0116bc4:	e8 64 43 ff ff       	call   f010af2d <set_program_priority>
f0116bc9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116bcc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116bcf:	83 ec 08             	sub    $0x8,%esp
f0116bd2:	6a 02                	push   $0x2
f0116bd4:	50                   	push   %eax
f0116bd5:	e8 53 43 ff ff       	call   f010af2d <set_program_priority>
f0116bda:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116bdd:	e8 5a d1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116be2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116be5:	74 17                	je     f0116bfe <test_priority_normal_and_lower+0x394>
f0116be7:	83 ec 04             	sub    $0x4,%esp
f0116bea:	68 78 a7 13 f0       	push   $0xf013a778
f0116bef:	68 18 01 00 00       	push   $0x118
f0116bf4:	68 11 a7 13 f0       	push   $0xf013a711
f0116bf9:	e8 fd 95 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116bfe:	e8 4e 5e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116c03:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116c06:	74 21                	je     f0116c29 <test_priority_normal_and_lower+0x3bf>
f0116c08:	e8 44 5e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116c0d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116c10:	29 c2                	sub    %eax,%edx
f0116c12:	89 d0                	mov    %edx,%eax
f0116c14:	50                   	push   %eax
f0116c15:	68 f8 a7 13 f0       	push   $0xf013a7f8
f0116c1a:	68 19 01 00 00       	push   $0x119
f0116c1f:	68 11 a7 13 f0       	push   $0xf013a711
f0116c24:	e8 d2 95 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116c29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c2c:	8b 40 74             	mov    0x74(%eax),%eax
f0116c2f:	83 f8 0a             	cmp    $0xa,%eax
f0116c32:	75 16                	jne    f0116c4a <test_priority_normal_and_lower+0x3e0>
f0116c34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c37:	8b 40 74             	mov    0x74(%eax),%eax
f0116c3a:	83 f8 0f             	cmp    $0xf,%eax
f0116c3d:	75 0b                	jne    f0116c4a <test_priority_normal_and_lower+0x3e0>
f0116c3f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c42:	8b 40 74             	mov    0x74(%eax),%eax
f0116c45:	83 f8 14             	cmp    $0x14,%eax
f0116c48:	74 17                	je     f0116c61 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116c4a:	83 ec 04             	sub    $0x4,%esp
f0116c4d:	68 28 a8 13 f0       	push   $0xf013a828
f0116c52:	68 1c 01 00 00       	push   $0x11c
f0116c57:	68 11 a7 13 f0       	push   $0xf013a711
f0116c5c:	e8 9a 95 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116c61:	e8 eb 5d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116c66:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c69:	e8 ce d0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116c6e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116c71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c74:	83 ec 08             	sub    $0x8,%esp
f0116c77:	6a 02                	push   $0x2
f0116c79:	50                   	push   %eax
f0116c7a:	e8 ae 42 ff ff       	call   f010af2d <set_program_priority>
f0116c7f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116c82:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c85:	83 ec 08             	sub    $0x8,%esp
f0116c88:	6a 02                	push   $0x2
f0116c8a:	50                   	push   %eax
f0116c8b:	e8 9d 42 ff ff       	call   f010af2d <set_program_priority>
f0116c90:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116c93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c96:	83 ec 08             	sub    $0x8,%esp
f0116c99:	6a 02                	push   $0x2
f0116c9b:	50                   	push   %eax
f0116c9c:	e8 8c 42 ff ff       	call   f010af2d <set_program_priority>
f0116ca1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ca4:	e8 93 d0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116ca9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116cac:	74 17                	je     f0116cc5 <test_priority_normal_and_lower+0x45b>
f0116cae:	83 ec 04             	sub    $0x4,%esp
f0116cb1:	68 78 a7 13 f0       	push   $0xf013a778
f0116cb6:	68 26 01 00 00       	push   $0x126
f0116cbb:	68 11 a7 13 f0       	push   $0xf013a711
f0116cc0:	e8 36 95 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116cc5:	e8 87 5d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116cca:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116ccd:	74 21                	je     f0116cf0 <test_priority_normal_and_lower+0x486>
f0116ccf:	e8 7d 5d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116cd4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116cd7:	29 c2                	sub    %eax,%edx
f0116cd9:	89 d0                	mov    %edx,%eax
f0116cdb:	50                   	push   %eax
f0116cdc:	68 f8 a7 13 f0       	push   $0xf013a7f8
f0116ce1:	68 27 01 00 00       	push   $0x127
f0116ce6:	68 11 a7 13 f0       	push   $0xf013a711
f0116ceb:	e8 0b 95 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116cf0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cf3:	8b 40 74             	mov    0x74(%eax),%eax
f0116cf6:	83 f8 0a             	cmp    $0xa,%eax
f0116cf9:	75 16                	jne    f0116d11 <test_priority_normal_and_lower+0x4a7>
f0116cfb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116cfe:	8b 40 74             	mov    0x74(%eax),%eax
f0116d01:	83 f8 0f             	cmp    $0xf,%eax
f0116d04:	75 0b                	jne    f0116d11 <test_priority_normal_and_lower+0x4a7>
f0116d06:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d09:	8b 40 74             	mov    0x74(%eax),%eax
f0116d0c:	83 f8 0a             	cmp    $0xa,%eax
f0116d0f:	74 17                	je     f0116d28 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116d11:	83 ec 04             	sub    $0x4,%esp
f0116d14:	68 28 a8 13 f0       	push   $0xf013a828
f0116d19:	68 2a 01 00 00       	push   $0x12a
f0116d1e:	68 11 a7 13 f0       	push   $0xf013a711
f0116d23:	e8 d3 94 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 10; i++)
f0116d28:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116d2f:	eb 7a                	jmp    f0116dab <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116d34:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116d3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d3e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d41:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116d44:	89 d0                	mov    %edx,%eax
f0116d46:	01 c0                	add    %eax,%eax
f0116d48:	01 d0                	add    %edx,%eax
f0116d4a:	c1 e0 03             	shl    $0x3,%eax
f0116d4d:	01 d8                	add    %ebx,%eax
f0116d4f:	8b 00                	mov    (%eax),%eax
f0116d51:	39 c1                	cmp    %eax,%ecx
f0116d53:	74 17                	je     f0116d6c <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116d55:	83 ec 04             	sub    $0x4,%esp
f0116d58:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116d5d:	68 2f 01 00 00       	push   $0x12f
f0116d62:	68 11 a7 13 f0       	push   $0xf013a711
f0116d67:	e8 8f 94 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116d6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116d6f:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116d76:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d79:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d7c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116d7f:	89 d0                	mov    %edx,%eax
f0116d81:	01 c0                	add    %eax,%eax
f0116d83:	01 d0                	add    %edx,%eax
f0116d85:	c1 e0 03             	shl    $0x3,%eax
f0116d88:	01 d8                	add    %ebx,%eax
f0116d8a:	8b 40 08             	mov    0x8(%eax),%eax
f0116d8d:	39 c1                	cmp    %eax,%ecx
f0116d8f:	74 17                	je     f0116da8 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116d91:	83 ec 04             	sub    $0x4,%esp
f0116d94:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116d99:	68 32 01 00 00       	push   $0x132
f0116d9e:	68 11 a7 13 f0       	push   $0xf013a711
f0116da3:	e8 53 94 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116da8:	ff 45 d8             	incl   -0x28(%ebp)
f0116dab:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116daf:	7e 80                	jle    f0116d31 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116db1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116db8:	eb 7a                	jmp    f0116e34 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116dba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116dbd:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116dc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dc7:	8b 58 78             	mov    0x78(%eax),%ebx
f0116dca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116dcd:	89 d0                	mov    %edx,%eax
f0116dcf:	01 c0                	add    %eax,%eax
f0116dd1:	01 d0                	add    %edx,%eax
f0116dd3:	c1 e0 03             	shl    $0x3,%eax
f0116dd6:	01 d8                	add    %ebx,%eax
f0116dd8:	8b 00                	mov    (%eax),%eax
f0116dda:	39 c1                	cmp    %eax,%ecx
f0116ddc:	74 17                	je     f0116df5 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116dde:	83 ec 04             	sub    $0x4,%esp
f0116de1:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116de6:	68 38 01 00 00       	push   $0x138
f0116deb:	68 11 a7 13 f0       	push   $0xf013a711
f0116df0:	e8 06 94 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116df5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116df8:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116dff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e02:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e05:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116e08:	89 d0                	mov    %edx,%eax
f0116e0a:	01 c0                	add    %eax,%eax
f0116e0c:	01 d0                	add    %edx,%eax
f0116e0e:	c1 e0 03             	shl    $0x3,%eax
f0116e11:	01 d8                	add    %ebx,%eax
f0116e13:	8b 40 08             	mov    0x8(%eax),%eax
f0116e16:	39 c1                	cmp    %eax,%ecx
f0116e18:	74 17                	je     f0116e31 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116e1a:	83 ec 04             	sub    $0x4,%esp
f0116e1d:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116e22:	68 3b 01 00 00       	push   $0x13b
f0116e27:	68 11 a7 13 f0       	push   $0xf013a711
f0116e2c:	e8 ca 93 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116e31:	ff 45 d4             	incl   -0x2c(%ebp)
f0116e34:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116e38:	7e 80                	jle    f0116dba <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116e3a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116e41:	eb 7a                	jmp    f0116ebd <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e43:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e46:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116e4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e50:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e53:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116e56:	89 d0                	mov    %edx,%eax
f0116e58:	01 c0                	add    %eax,%eax
f0116e5a:	01 d0                	add    %edx,%eax
f0116e5c:	c1 e0 03             	shl    $0x3,%eax
f0116e5f:	01 d8                	add    %ebx,%eax
f0116e61:	8b 00                	mov    (%eax),%eax
f0116e63:	39 c1                	cmp    %eax,%ecx
f0116e65:	74 17                	je     f0116e7e <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116e67:	83 ec 04             	sub    $0x4,%esp
f0116e6a:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116e6f:	68 41 01 00 00       	push   $0x141
f0116e74:	68 11 a7 13 f0       	push   $0xf013a711
f0116e79:	e8 7d 93 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116e7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e81:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116e88:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e8b:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e8e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116e91:	89 d0                	mov    %edx,%eax
f0116e93:	01 c0                	add    %eax,%eax
f0116e95:	01 d0                	add    %edx,%eax
f0116e97:	c1 e0 03             	shl    $0x3,%eax
f0116e9a:	01 d8                	add    %ebx,%eax
f0116e9c:	8b 40 08             	mov    0x8(%eax),%eax
f0116e9f:	39 c1                	cmp    %eax,%ecx
f0116ea1:	74 17                	je     f0116eba <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116ea3:	83 ec 04             	sub    $0x4,%esp
f0116ea6:	68 e8 a8 13 f0       	push   $0xf013a8e8
f0116eab:	68 44 01 00 00       	push   $0x144
f0116eb0:	68 11 a7 13 f0       	push   $0xf013a711
f0116eb5:	e8 41 93 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116eba:	ff 45 d0             	incl   -0x30(%ebp)
f0116ebd:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116ec1:	7e 80                	jle    f0116e43 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116ec3:	e8 89 5b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116ec8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ecb:	e8 6c ce fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116ed0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116ed3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ed6:	83 ec 08             	sub    $0x8,%esp
f0116ed9:	6a 01                	push   $0x1
f0116edb:	50                   	push   %eax
f0116edc:	e8 4c 40 ff ff       	call   f010af2d <set_program_priority>
f0116ee1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116ee4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ee7:	83 ec 08             	sub    $0x8,%esp
f0116eea:	6a 01                	push   $0x1
f0116eec:	50                   	push   %eax
f0116eed:	e8 3b 40 ff ff       	call   f010af2d <set_program_priority>
f0116ef2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116ef5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ef8:	83 ec 08             	sub    $0x8,%esp
f0116efb:	6a 01                	push   $0x1
f0116efd:	50                   	push   %eax
f0116efe:	e8 2a 40 ff ff       	call   f010af2d <set_program_priority>
f0116f03:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f06:	e8 31 ce fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116f0b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116f0e:	74 17                	je     f0116f27 <test_priority_normal_and_lower+0x6bd>
f0116f10:	83 ec 04             	sub    $0x4,%esp
f0116f13:	68 78 a7 13 f0       	push   $0xf013a778
f0116f18:	68 4d 01 00 00       	push   $0x14d
f0116f1d:	68 11 a7 13 f0       	push   $0xf013a711
f0116f22:	e8 d4 92 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116f27:	e8 25 5b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116f2c:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116f2f:	83 f8 0d             	cmp    $0xd,%eax
f0116f32:	74 17                	je     f0116f4b <test_priority_normal_and_lower+0x6e1>
f0116f34:	83 ec 04             	sub    $0x4,%esp
f0116f37:	68 84 aa 13 f0       	push   $0xf013aa84
f0116f3c:	68 4e 01 00 00       	push   $0x14e
f0116f41:	68 11 a7 13 f0       	push   $0xf013a711
f0116f46:	e8 b0 92 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116f4b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f4e:	8b 40 74             	mov    0x74(%eax),%eax
f0116f51:	83 f8 05             	cmp    $0x5,%eax
f0116f54:	75 16                	jne    f0116f6c <test_priority_normal_and_lower+0x702>
f0116f56:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f59:	8b 40 74             	mov    0x74(%eax),%eax
f0116f5c:	83 f8 07             	cmp    $0x7,%eax
f0116f5f:	75 0b                	jne    f0116f6c <test_priority_normal_and_lower+0x702>
f0116f61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f64:	8b 40 74             	mov    0x74(%eax),%eax
f0116f67:	83 f8 05             	cmp    $0x5,%eax
f0116f6a:	74 17                	je     f0116f83 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0116f6c:	83 ec 04             	sub    $0x4,%esp
f0116f6f:	68 cc aa 13 f0       	push   $0xf013aacc
f0116f74:	68 51 01 00 00       	push   $0x151
f0116f79:	68 11 a7 13 f0       	push   $0xf013a711
f0116f7e:	e8 78 92 fe ff       	call   f01001fb <_panic>


		freeFrames = sys_calculate_free_frames();
f0116f83:	e8 c9 5a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116f88:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f8b:	e8 ac cd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116f90:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116f93:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f96:	83 ec 08             	sub    $0x8,%esp
f0116f99:	6a 01                	push   $0x1
f0116f9b:	50                   	push   %eax
f0116f9c:	e8 8c 3f ff ff       	call   f010af2d <set_program_priority>
f0116fa1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116fa4:	e8 93 cd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116fa9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116fac:	74 17                	je     f0116fc5 <test_priority_normal_and_lower+0x75b>
f0116fae:	83 ec 04             	sub    $0x4,%esp
f0116fb1:	68 78 a7 13 f0       	push   $0xf013a778
f0116fb6:	68 57 01 00 00       	push   $0x157
f0116fbb:	68 11 a7 13 f0       	push   $0xf013a711
f0116fc0:	e8 36 92 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116fc5:	e8 87 5a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0116fca:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116fcd:	83 f8 03             	cmp    $0x3,%eax
f0116fd0:	74 17                	je     f0116fe9 <test_priority_normal_and_lower+0x77f>
f0116fd2:	83 ec 04             	sub    $0x4,%esp
f0116fd5:	68 78 a7 13 f0       	push   $0xf013a778
f0116fda:	68 58 01 00 00       	push   $0x158
f0116fdf:	68 11 a7 13 f0       	push   $0xf013a711
f0116fe4:	e8 12 92 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116fe9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116fec:	8b 40 74             	mov    0x74(%eax),%eax
f0116fef:	83 f8 02             	cmp    $0x2,%eax
f0116ff2:	75 16                	jne    f011700a <test_priority_normal_and_lower+0x7a0>
f0116ff4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ff7:	8b 40 74             	mov    0x74(%eax),%eax
f0116ffa:	83 f8 07             	cmp    $0x7,%eax
f0116ffd:	75 0b                	jne    f011700a <test_priority_normal_and_lower+0x7a0>
f0116fff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117002:	8b 40 74             	mov    0x74(%eax),%eax
f0117005:	83 f8 05             	cmp    $0x5,%eax
f0117008:	74 17                	je     f0117021 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011700a:	83 ec 04             	sub    $0x4,%esp
f011700d:	68 ac a8 13 f0       	push   $0xf013a8ac
f0117012:	68 5b 01 00 00       	push   $0x15b
f0117017:	68 11 a7 13 f0       	push   $0xf013a711
f011701c:	e8 da 91 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 2; i++)
f0117021:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117028:	e9 80 00 00 00       	jmp    f01170ad <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011702d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117030:	83 c0 08             	add    $0x8,%eax
f0117033:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011703a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011703d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117040:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117043:	89 d0                	mov    %edx,%eax
f0117045:	01 c0                	add    %eax,%eax
f0117047:	01 d0                	add    %edx,%eax
f0117049:	c1 e0 03             	shl    $0x3,%eax
f011704c:	01 d8                	add    %ebx,%eax
f011704e:	8b 00                	mov    (%eax),%eax
f0117050:	39 c1                	cmp    %eax,%ecx
f0117052:	74 17                	je     f011706b <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117054:	83 ec 04             	sub    $0x4,%esp
f0117057:	68 fc aa 13 f0       	push   $0xf013aafc
f011705c:	68 60 01 00 00       	push   $0x160
f0117061:	68 11 a7 13 f0       	push   $0xf013a711
f0117066:	e8 90 91 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011706b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011706e:	83 c0 08             	add    $0x8,%eax
f0117071:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117078:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011707b:	8b 58 78             	mov    0x78(%eax),%ebx
f011707e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117081:	89 d0                	mov    %edx,%eax
f0117083:	01 c0                	add    %eax,%eax
f0117085:	01 d0                	add    %edx,%eax
f0117087:	c1 e0 03             	shl    $0x3,%eax
f011708a:	01 d8                	add    %ebx,%eax
f011708c:	8b 40 08             	mov    0x8(%eax),%eax
f011708f:	39 c1                	cmp    %eax,%ecx
f0117091:	74 17                	je     f01170aa <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117093:	83 ec 04             	sub    $0x4,%esp
f0117096:	68 fc aa 13 f0       	push   $0xf013aafc
f011709b:	68 63 01 00 00       	push   $0x163
f01170a0:	68 11 a7 13 f0       	push   $0xf013a711
f01170a5:	e8 51 91 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01170aa:	ff 45 cc             	incl   -0x34(%ebp)
f01170ad:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01170b1:	0f 8e 76 ff ff ff    	jle    f011702d <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01170b7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01170be:	e9 80 00 00 00       	jmp    f0117143 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01170c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01170c6:	83 c0 03             	add    $0x3,%eax
f01170c9:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01170d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170d3:	8b 58 78             	mov    0x78(%eax),%ebx
f01170d6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01170d9:	89 d0                	mov    %edx,%eax
f01170db:	01 c0                	add    %eax,%eax
f01170dd:	01 d0                	add    %edx,%eax
f01170df:	c1 e0 03             	shl    $0x3,%eax
f01170e2:	01 d8                	add    %ebx,%eax
f01170e4:	8b 00                	mov    (%eax),%eax
f01170e6:	39 c1                	cmp    %eax,%ecx
f01170e8:	74 17                	je     f0117101 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01170ea:	ff 75 c8             	pushl  -0x38(%ebp)
f01170ed:	68 68 ab 13 f0       	push   $0xf013ab68
f01170f2:	68 69 01 00 00       	push   $0x169
f01170f7:	68 11 a7 13 f0       	push   $0xf013a711
f01170fc:	e8 fa 90 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117101:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117104:	83 c0 03             	add    $0x3,%eax
f0117107:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011710e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117111:	8b 58 78             	mov    0x78(%eax),%ebx
f0117114:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117117:	89 d0                	mov    %edx,%eax
f0117119:	01 c0                	add    %eax,%eax
f011711b:	01 d0                	add    %edx,%eax
f011711d:	c1 e0 03             	shl    $0x3,%eax
f0117120:	01 d8                	add    %ebx,%eax
f0117122:	8b 40 08             	mov    0x8(%eax),%eax
f0117125:	39 c1                	cmp    %eax,%ecx
f0117127:	74 17                	je     f0117140 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117129:	83 ec 04             	sub    $0x4,%esp
f011712c:	68 fc aa 13 f0       	push   $0xf013aafc
f0117131:	68 6c 01 00 00       	push   $0x16c
f0117136:	68 11 a7 13 f0       	push   $0xf013a711
f011713b:	e8 bb 90 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117140:	ff 45 c8             	incl   -0x38(%ebp)
f0117143:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117147:	0f 8e 76 ff ff ff    	jle    f01170c3 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011714d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117154:	e9 80 00 00 00       	jmp    f01171d9 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117159:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011715c:	83 c0 05             	add    $0x5,%eax
f011715f:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117166:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117169:	8b 58 78             	mov    0x78(%eax),%ebx
f011716c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011716f:	89 d0                	mov    %edx,%eax
f0117171:	01 c0                	add    %eax,%eax
f0117173:	01 d0                	add    %edx,%eax
f0117175:	c1 e0 03             	shl    $0x3,%eax
f0117178:	01 d8                	add    %ebx,%eax
f011717a:	8b 00                	mov    (%eax),%eax
f011717c:	39 c1                	cmp    %eax,%ecx
f011717e:	74 17                	je     f0117197 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117180:	83 ec 04             	sub    $0x4,%esp
f0117183:	68 fc aa 13 f0       	push   $0xf013aafc
f0117188:	68 72 01 00 00       	push   $0x172
f011718d:	68 11 a7 13 f0       	push   $0xf013a711
f0117192:	e8 64 90 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117197:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011719a:	83 c0 05             	add    $0x5,%eax
f011719d:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01171a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171a7:	8b 58 78             	mov    0x78(%eax),%ebx
f01171aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01171ad:	89 d0                	mov    %edx,%eax
f01171af:	01 c0                	add    %eax,%eax
f01171b1:	01 d0                	add    %edx,%eax
f01171b3:	c1 e0 03             	shl    $0x3,%eax
f01171b6:	01 d8                	add    %ebx,%eax
f01171b8:	8b 40 08             	mov    0x8(%eax),%eax
f01171bb:	39 c1                	cmp    %eax,%ecx
f01171bd:	74 17                	je     f01171d6 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01171bf:	83 ec 04             	sub    $0x4,%esp
f01171c2:	68 fc aa 13 f0       	push   $0xf013aafc
f01171c7:	68 75 01 00 00       	push   $0x175
f01171cc:	68 11 a7 13 f0       	push   $0xf013a711
f01171d1:	e8 25 90 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01171d6:	ff 45 c4             	incl   -0x3c(%ebp)
f01171d9:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01171dd:	0f 8e 76 ff ff ff    	jle    f0117159 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01171e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171e6:	83 ec 08             	sub    $0x8,%esp
f01171e9:	6a 05                	push   $0x5
f01171eb:	50                   	push   %eax
f01171ec:	e8 3c 3d ff ff       	call   f010af2d <set_program_priority>
f01171f1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01171f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171f7:	83 ec 08             	sub    $0x8,%esp
f01171fa:	6a 05                	push   $0x5
f01171fc:	50                   	push   %eax
f01171fd:	e8 2b 3d ff ff       	call   f010af2d <set_program_priority>
f0117202:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117205:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011720c:	75 6e 61 
f011720f:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117216:	6c 00 00 
f0117219:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011721f:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117224:	b8 00 00 00 00       	mov    $0x0,%eax
f0117229:	89 d7                	mov    %edx,%edi
f011722b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011722d:	83 ec 0c             	sub    $0xc,%esp
f0117230:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117236:	50                   	push   %eax
f0117237:	e8 a8 9a fe ff       	call   f0100ce4 <execute_command>
f011723c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f011723f:	eb 10                	jmp    f0117251 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117241:	83 ec 0c             	sub    $0xc,%esp
f0117244:	68 d8 ab 13 f0       	push   $0xf013abd8
f0117249:	e8 34 9a fe ff       	call   f0100c82 <cprintf>
f011724e:	83 c4 10             	add    $0x10,%esp
	}
}
f0117251:	90                   	nop
f0117252:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117255:	5b                   	pop    %ebx
f0117256:	5e                   	pop    %esi
f0117257:	5f                   	pop    %edi
f0117258:	5d                   	pop    %ebp
f0117259:	c3                   	ret    

f011725a <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f011725a:	55                   	push   %ebp
f011725b:	89 e5                	mov    %esp,%ebp
f011725d:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0117262:	83 f8 03             	cmp    $0x3,%eax
f0117265:	75 04                	jne    f011726b <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117267:	b0 01                	mov    $0x1,%al
f0117269:	eb 02                	jmp    f011726d <isKHeapPlacementStrategyNEXTFIT+0x13>
f011726b:	b0 00                	mov    $0x0,%al
f011726d:	5d                   	pop    %ebp
f011726e:	c3                   	ret    

f011726f <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f011726f:	55                   	push   %ebp
f0117270:	89 e5                	mov    %esp,%ebp
f0117272:	57                   	push   %edi
f0117273:	53                   	push   %ebx
f0117274:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f011727a:	83 ec 0c             	sub    $0xc,%esp
f011727d:	68 dc ac 13 f0       	push   $0xf013acdc
f0117282:	e8 fb 99 fe ff       	call   f0100c82 <cprintf>
f0117287:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011728a:	83 ec 0c             	sub    $0xc,%esp
f011728d:	68 0c ad 13 f0       	push   $0xf013ad0c
f0117292:	e8 eb 99 fe ff       	call   f0100c82 <cprintf>
f0117297:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011729a:	83 ec 0c             	sub    $0xc,%esp
f011729d:	68 dc ac 13 f0       	push   $0xf013acdc
f01172a2:	e8 db 99 fe ff       	call   f0100c82 <cprintf>
f01172a7:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01172aa:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01172ae:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01172b2:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01172b8:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01172be:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01172c5:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01172cc:	e8 80 57 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01172d1:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01172d4:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f01172da:	b9 14 00 00 00       	mov    $0x14,%ecx
f01172df:	b8 00 00 00 00       	mov    $0x0,%eax
f01172e4:	89 d7                	mov    %edx,%edi
f01172e6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01172e8:	e8 64 57 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01172ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01172f0:	e8 47 ca fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01172f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01172f8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01172ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117302:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117307:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011730a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011730d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117312:	f7 75 d4             	divl   -0x2c(%ebp)
f0117315:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117318:	29 d0                	sub    %edx,%eax
f011731a:	89 c1                	mov    %eax,%ecx
f011731c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117323:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117328:	0f b6 d0             	movzbl %al,%edx
f011732b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011732e:	01 d0                	add    %edx,%eax
f0117330:	48                   	dec    %eax
f0117331:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117334:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117337:	ba 00 00 00 00       	mov    $0x0,%edx
f011733c:	f7 75 cc             	divl   -0x34(%ebp)
f011733f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117342:	29 d0                	sub    %edx,%eax
f0117344:	01 c1                	add    %eax,%ecx
f0117346:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011734d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117352:	0f b6 c0             	movzbl %al,%eax
f0117355:	c1 e0 04             	shl    $0x4,%eax
f0117358:	89 c2                	mov    %eax,%edx
f011735a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011735d:	01 d0                	add    %edx,%eax
f011735f:	48                   	dec    %eax
f0117360:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117363:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117366:	ba 00 00 00 00       	mov    $0x0,%edx
f011736b:	f7 75 c4             	divl   -0x3c(%ebp)
f011736e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117371:	29 d0                	sub    %edx,%eax
f0117373:	01 c8                	add    %ecx,%eax
f0117375:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011737a:	29 c2                	sub    %eax,%edx
f011737c:	89 d0                	mov    %edx,%eax
f011737e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117381:	83 ec 0c             	sub    $0xc,%esp
f0117384:	ff 75 bc             	pushl  -0x44(%ebp)
f0117387:	e8 87 04 ff ff       	call   f0107813 <kmalloc>
f011738c:	83 c4 10             	add    $0x10,%esp
f011738f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117395:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011739b:	85 c0                	test   %eax,%eax
f011739d:	74 14                	je     f01173b3 <test_kmalloc+0x144>
f011739f:	83 ec 04             	sub    $0x4,%esp
f01173a2:	68 68 ad 13 f0       	push   $0xf013ad68
f01173a7:	6a 40                	push   $0x40
f01173a9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01173ae:	e8 48 8e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01173b3:	e8 84 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01173b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01173bb:	74 14                	je     f01173d1 <test_kmalloc+0x162>
f01173bd:	83 ec 04             	sub    $0x4,%esp
f01173c0:	68 b4 ad 13 f0       	push   $0xf013adb4
f01173c5:	6a 41                	push   $0x41
f01173c7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01173cc:	e8 2a 8e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01173d1:	e8 7b 56 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01173d6:	89 c2                	mov    %eax,%edx
f01173d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173db:	39 c2                	cmp    %eax,%edx
f01173dd:	74 14                	je     f01173f3 <test_kmalloc+0x184>
f01173df:	83 ec 04             	sub    $0x4,%esp
f01173e2:	68 1c ae 13 f0       	push   $0xf013ae1c
f01173e7:	6a 42                	push   $0x42
f01173e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01173ee:	e8 08 8e fe ff       	call   f01001fb <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01173f3:	83 ec 0c             	sub    $0xc,%esp
f01173f6:	68 5c ae 13 f0       	push   $0xf013ae5c
f01173fb:	e8 82 98 fe ff       	call   f0100c82 <cprintf>
f0117400:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117403:	e8 49 56 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117408:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011740b:	e8 2c c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117410:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117413:	83 ec 0c             	sub    $0xc,%esp
f0117416:	68 00 fc 1f 00       	push   $0x1ffc00
f011741b:	e8 f3 03 ff ff       	call   f0107813 <kmalloc>
f0117420:	83 c4 10             	add    $0x10,%esp
f0117423:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117429:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011742f:	89 c1                	mov    %eax,%ecx
f0117431:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117438:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011743b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117440:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117443:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117446:	ba 00 00 00 00       	mov    $0x0,%edx
f011744b:	f7 75 b8             	divl   -0x48(%ebp)
f011744e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117451:	29 d0                	sub    %edx,%eax
f0117453:	89 c3                	mov    %eax,%ebx
f0117455:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011745c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117461:	0f b6 d0             	movzbl %al,%edx
f0117464:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117467:	01 d0                	add    %edx,%eax
f0117469:	48                   	dec    %eax
f011746a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011746d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117470:	ba 00 00 00 00       	mov    $0x0,%edx
f0117475:	f7 75 b0             	divl   -0x50(%ebp)
f0117478:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011747b:	29 d0                	sub    %edx,%eax
f011747d:	01 c3                	add    %eax,%ebx
f011747f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117486:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011748b:	0f b6 c0             	movzbl %al,%eax
f011748e:	c1 e0 04             	shl    $0x4,%eax
f0117491:	89 c2                	mov    %eax,%edx
f0117493:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117496:	01 d0                	add    %edx,%eax
f0117498:	48                   	dec    %eax
f0117499:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011749c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011749f:	ba 00 00 00 00       	mov    $0x0,%edx
f01174a4:	f7 75 a8             	divl   -0x58(%ebp)
f01174a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174aa:	29 d0                	sub    %edx,%eax
f01174ac:	01 d8                	add    %ebx,%eax
f01174ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01174b3:	39 c1                	cmp    %eax,%ecx
f01174b5:	74 14                	je     f01174cb <test_kmalloc+0x25c>
f01174b7:	83 ec 04             	sub    $0x4,%esp
f01174ba:	68 80 ae 13 f0       	push   $0xf013ae80
f01174bf:	6a 49                	push   $0x49
f01174c1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01174c6:	e8 30 8d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174cb:	e8 6c c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01174d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01174d3:	74 14                	je     f01174e9 <test_kmalloc+0x27a>
f01174d5:	83 ec 04             	sub    $0x4,%esp
f01174d8:	68 b4 ad 13 f0       	push   $0xf013adb4
f01174dd:	6a 4a                	push   $0x4a
f01174df:	68 9a ad 13 f0       	push   $0xf013ad9a
f01174e4:	e8 12 8d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01174e9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01174ec:	e8 60 55 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01174f1:	29 c3                	sub    %eax,%ebx
f01174f3:	89 d8                	mov    %ebx,%eax
f01174f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01174fa:	74 14                	je     f0117510 <test_kmalloc+0x2a1>
f01174fc:	83 ec 04             	sub    $0x4,%esp
f01174ff:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117504:	6a 4b                	push   $0x4b
f0117506:	68 9a ad 13 f0       	push   $0xf013ad9a
f011750b:	e8 eb 8c fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117510:	e8 3c 55 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117515:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117518:	e8 1f c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011751d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117520:	83 ec 0c             	sub    $0xc,%esp
f0117523:	68 00 fc 1f 00       	push   $0x1ffc00
f0117528:	e8 e6 02 ff ff       	call   f0107813 <kmalloc>
f011752d:	83 c4 10             	add    $0x10,%esp
f0117530:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117536:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011753c:	89 c1                	mov    %eax,%ecx
f011753e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117545:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117548:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011754d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117550:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117553:	ba 00 00 00 00       	mov    $0x0,%edx
f0117558:	f7 75 a0             	divl   -0x60(%ebp)
f011755b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011755e:	29 d0                	sub    %edx,%eax
f0117560:	89 c3                	mov    %eax,%ebx
f0117562:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117569:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011756e:	0f b6 d0             	movzbl %al,%edx
f0117571:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117574:	01 d0                	add    %edx,%eax
f0117576:	48                   	dec    %eax
f0117577:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011757a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011757d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117582:	f7 75 98             	divl   -0x68(%ebp)
f0117585:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117588:	29 d0                	sub    %edx,%eax
f011758a:	01 c3                	add    %eax,%ebx
f011758c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117593:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117598:	0f b6 c0             	movzbl %al,%eax
f011759b:	c1 e0 04             	shl    $0x4,%eax
f011759e:	89 c2                	mov    %eax,%edx
f01175a0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01175a3:	01 d0                	add    %edx,%eax
f01175a5:	48                   	dec    %eax
f01175a6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01175a9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01175ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01175b1:	f7 75 90             	divl   -0x70(%ebp)
f01175b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01175b7:	29 d0                	sub    %edx,%eax
f01175b9:	01 d8                	add    %ebx,%eax
f01175bb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01175c0:	39 c1                	cmp    %eax,%ecx
f01175c2:	74 14                	je     f01175d8 <test_kmalloc+0x369>
f01175c4:	83 ec 04             	sub    $0x4,%esp
f01175c7:	68 80 ae 13 f0       	push   $0xf013ae80
f01175cc:	6a 51                	push   $0x51
f01175ce:	68 9a ad 13 f0       	push   $0xf013ad9a
f01175d3:	e8 23 8c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01175d8:	e8 5f c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01175dd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01175e0:	74 14                	je     f01175f6 <test_kmalloc+0x387>
f01175e2:	83 ec 04             	sub    $0x4,%esp
f01175e5:	68 b4 ad 13 f0       	push   $0xf013adb4
f01175ea:	6a 52                	push   $0x52
f01175ec:	68 9a ad 13 f0       	push   $0xf013ad9a
f01175f1:	e8 05 8c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01175f6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01175f9:	e8 53 54 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01175fe:	29 c3                	sub    %eax,%ebx
f0117600:	89 d8                	mov    %ebx,%eax
f0117602:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117607:	74 14                	je     f011761d <test_kmalloc+0x3ae>
f0117609:	83 ec 04             	sub    $0x4,%esp
f011760c:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117611:	6a 53                	push   $0x53
f0117613:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117618:	e8 de 8b fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011761d:	e8 2f 54 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117622:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117625:	e8 12 c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011762a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011762d:	83 ec 0c             	sub    $0xc,%esp
f0117630:	68 00 08 00 00       	push   $0x800
f0117635:	e8 d9 01 ff ff       	call   f0107813 <kmalloc>
f011763a:	83 c4 10             	add    $0x10,%esp
f011763d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117643:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117649:	89 c1                	mov    %eax,%ecx
f011764b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117652:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117655:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011765a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011765d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117660:	ba 00 00 00 00       	mov    $0x0,%edx
f0117665:	f7 75 88             	divl   -0x78(%ebp)
f0117668:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011766b:	29 d0                	sub    %edx,%eax
f011766d:	89 c3                	mov    %eax,%ebx
f011766f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117676:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011767b:	0f b6 d0             	movzbl %al,%edx
f011767e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117681:	01 d0                	add    %edx,%eax
f0117683:	48                   	dec    %eax
f0117684:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011768a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117690:	ba 00 00 00 00       	mov    $0x0,%edx
f0117695:	f7 75 80             	divl   -0x80(%ebp)
f0117698:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011769e:	29 d0                	sub    %edx,%eax
f01176a0:	01 c3                	add    %eax,%ebx
f01176a2:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01176a9:	10 00 00 
f01176ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01176b1:	0f b6 c0             	movzbl %al,%eax
f01176b4:	c1 e0 04             	shl    $0x4,%eax
f01176b7:	89 c2                	mov    %eax,%edx
f01176b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01176bf:	01 d0                	add    %edx,%eax
f01176c1:	48                   	dec    %eax
f01176c2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01176c8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01176ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01176d3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01176d9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01176df:	29 d0                	sub    %edx,%eax
f01176e1:	01 d8                	add    %ebx,%eax
f01176e3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01176e8:	39 c1                	cmp    %eax,%ecx
f01176ea:	74 14                	je     f0117700 <test_kmalloc+0x491>
f01176ec:	83 ec 04             	sub    $0x4,%esp
f01176ef:	68 80 ae 13 f0       	push   $0xf013ae80
f01176f4:	6a 59                	push   $0x59
f01176f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01176fb:	e8 fb 8a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117700:	e8 37 c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117705:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117708:	74 14                	je     f011771e <test_kmalloc+0x4af>
f011770a:	83 ec 04             	sub    $0x4,%esp
f011770d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117712:	6a 5a                	push   $0x5a
f0117714:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117719:	e8 dd 8a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011771e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117721:	e8 2b 53 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117726:	29 c3                	sub    %eax,%ebx
f0117728:	89 d8                	mov    %ebx,%eax
f011772a:	83 f8 01             	cmp    $0x1,%eax
f011772d:	74 14                	je     f0117743 <test_kmalloc+0x4d4>
f011772f:	83 ec 04             	sub    $0x4,%esp
f0117732:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117737:	6a 5b                	push   $0x5b
f0117739:	68 9a ad 13 f0       	push   $0xf013ad9a
f011773e:	e8 b8 8a fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117743:	e8 09 53 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117748:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011774b:	e8 ec c5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117750:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117753:	83 ec 0c             	sub    $0xc,%esp
f0117756:	68 00 08 00 00       	push   $0x800
f011775b:	e8 b3 00 ff ff       	call   f0107813 <kmalloc>
f0117760:	83 c4 10             	add    $0x10,%esp
f0117763:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117769:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011776f:	89 c1                	mov    %eax,%ecx
f0117771:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117778:	10 00 00 
f011777b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117781:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117786:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011778c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117792:	ba 00 00 00 00       	mov    $0x0,%edx
f0117797:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011779d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01177a3:	29 d0                	sub    %edx,%eax
f01177a5:	89 c3                	mov    %eax,%ebx
f01177a7:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01177ae:	10 00 00 
f01177b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01177b6:	0f b6 d0             	movzbl %al,%edx
f01177b9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01177bf:	01 d0                	add    %edx,%eax
f01177c1:	48                   	dec    %eax
f01177c2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01177c8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01177ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01177d3:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01177d9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01177df:	29 d0                	sub    %edx,%eax
f01177e1:	01 c3                	add    %eax,%ebx
f01177e3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01177ea:	10 00 00 
f01177ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01177f2:	0f b6 c0             	movzbl %al,%eax
f01177f5:	c1 e0 04             	shl    $0x4,%eax
f01177f8:	89 c2                	mov    %eax,%edx
f01177fa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117800:	01 d0                	add    %edx,%eax
f0117802:	48                   	dec    %eax
f0117803:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117809:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011780f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117814:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011781a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117820:	29 d0                	sub    %edx,%eax
f0117822:	01 d8                	add    %ebx,%eax
f0117824:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117829:	39 c1                	cmp    %eax,%ecx
f011782b:	74 14                	je     f0117841 <test_kmalloc+0x5d2>
f011782d:	83 ec 04             	sub    $0x4,%esp
f0117830:	68 80 ae 13 f0       	push   $0xf013ae80
f0117835:	6a 61                	push   $0x61
f0117837:	68 9a ad 13 f0       	push   $0xf013ad9a
f011783c:	e8 ba 89 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117841:	e8 f6 c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117846:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117849:	74 14                	je     f011785f <test_kmalloc+0x5f0>
f011784b:	83 ec 04             	sub    $0x4,%esp
f011784e:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117853:	6a 62                	push   $0x62
f0117855:	68 9a ad 13 f0       	push   $0xf013ad9a
f011785a:	e8 9c 89 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011785f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117862:	e8 ea 51 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117867:	29 c3                	sub    %eax,%ebx
f0117869:	89 d8                	mov    %ebx,%eax
f011786b:	83 f8 01             	cmp    $0x1,%eax
f011786e:	74 14                	je     f0117884 <test_kmalloc+0x615>
f0117870:	83 ec 04             	sub    $0x4,%esp
f0117873:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117878:	6a 63                	push   $0x63
f011787a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011787f:	e8 77 89 fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117884:	e8 c8 51 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117889:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011788c:	e8 ab c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117891:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117894:	83 ec 0c             	sub    $0xc,%esp
f0117897:	68 00 1c 00 00       	push   $0x1c00
f011789c:	e8 72 ff fe ff       	call   f0107813 <kmalloc>
f01178a1:	83 c4 10             	add    $0x10,%esp
f01178a4:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01178aa:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01178b0:	89 c1                	mov    %eax,%ecx
f01178b2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01178b9:	10 00 00 
f01178bc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01178c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01178c7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01178cd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01178d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01178d8:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01178de:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01178e4:	29 d0                	sub    %edx,%eax
f01178e6:	89 c3                	mov    %eax,%ebx
f01178e8:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01178ef:	10 00 00 
f01178f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01178f7:	0f b6 d0             	movzbl %al,%edx
f01178fa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117900:	01 d0                	add    %edx,%eax
f0117902:	48                   	dec    %eax
f0117903:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117909:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011790f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117914:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011791a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117920:	29 d0                	sub    %edx,%eax
f0117922:	01 c3                	add    %eax,%ebx
f0117924:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011792b:	10 00 00 
f011792e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117933:	0f b6 c0             	movzbl %al,%eax
f0117936:	c1 e0 04             	shl    $0x4,%eax
f0117939:	89 c2                	mov    %eax,%edx
f011793b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117941:	01 d0                	add    %edx,%eax
f0117943:	48                   	dec    %eax
f0117944:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011794a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117950:	ba 00 00 00 00       	mov    $0x0,%edx
f0117955:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011795b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117961:	29 d0                	sub    %edx,%eax
f0117963:	01 d8                	add    %ebx,%eax
f0117965:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011796a:	39 c1                	cmp    %eax,%ecx
f011796c:	74 14                	je     f0117982 <test_kmalloc+0x713>
f011796e:	83 ec 04             	sub    $0x4,%esp
f0117971:	68 80 ae 13 f0       	push   $0xf013ae80
f0117976:	6a 69                	push   $0x69
f0117978:	68 9a ad 13 f0       	push   $0xf013ad9a
f011797d:	e8 79 88 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117982:	e8 b5 c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117987:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011798a:	74 14                	je     f01179a0 <test_kmalloc+0x731>
f011798c:	83 ec 04             	sub    $0x4,%esp
f011798f:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117994:	6a 6a                	push   $0x6a
f0117996:	68 9a ad 13 f0       	push   $0xf013ad9a
f011799b:	e8 5b 88 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01179a0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01179a3:	e8 a9 50 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01179a8:	29 c3                	sub    %eax,%ebx
f01179aa:	89 d8                	mov    %ebx,%eax
f01179ac:	83 f8 02             	cmp    $0x2,%eax
f01179af:	74 14                	je     f01179c5 <test_kmalloc+0x756>
f01179b1:	83 ec 04             	sub    $0x4,%esp
f01179b4:	68 1c ae 13 f0       	push   $0xf013ae1c
f01179b9:	6a 6b                	push   $0x6b
f01179bb:	68 9a ad 13 f0       	push   $0xf013ad9a
f01179c0:	e8 36 88 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01179c5:	e8 87 50 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01179ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179cd:	e8 6a c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01179d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01179d5:	83 ec 0c             	sub    $0xc,%esp
f01179d8:	68 00 fc 2f 00       	push   $0x2ffc00
f01179dd:	e8 31 fe fe ff       	call   f0107813 <kmalloc>
f01179e2:	83 c4 10             	add    $0x10,%esp
f01179e5:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01179eb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01179f1:	89 c1                	mov    %eax,%ecx
f01179f3:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01179fa:	10 00 00 
f01179fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117a03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a08:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117a0e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117a14:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a19:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117a1f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117a25:	29 d0                	sub    %edx,%eax
f0117a27:	89 c3                	mov    %eax,%ebx
f0117a29:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117a30:	10 00 00 
f0117a33:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117a38:	0f b6 d0             	movzbl %al,%edx
f0117a3b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117a41:	01 d0                	add    %edx,%eax
f0117a43:	48                   	dec    %eax
f0117a44:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117a4a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117a50:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a55:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117a5b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117a61:	29 d0                	sub    %edx,%eax
f0117a63:	01 c3                	add    %eax,%ebx
f0117a65:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117a6c:	10 00 00 
f0117a6f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117a74:	0f b6 c0             	movzbl %al,%eax
f0117a77:	c1 e0 04             	shl    $0x4,%eax
f0117a7a:	89 c2                	mov    %eax,%edx
f0117a7c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117a82:	01 d0                	add    %edx,%eax
f0117a84:	48                   	dec    %eax
f0117a85:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117a8b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117a91:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a96:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117a9c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117aa2:	29 d0                	sub    %edx,%eax
f0117aa4:	01 d8                	add    %ebx,%eax
f0117aa6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117aab:	39 c1                	cmp    %eax,%ecx
f0117aad:	74 14                	je     f0117ac3 <test_kmalloc+0x854>
f0117aaf:	83 ec 04             	sub    $0x4,%esp
f0117ab2:	68 80 ae 13 f0       	push   $0xf013ae80
f0117ab7:	6a 71                	push   $0x71
f0117ab9:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117abe:	e8 38 87 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ac3:	e8 74 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117ac8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117acb:	74 14                	je     f0117ae1 <test_kmalloc+0x872>
f0117acd:	83 ec 04             	sub    $0x4,%esp
f0117ad0:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117ad5:	6a 72                	push   $0x72
f0117ad7:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117adc:	e8 1a 87 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ae1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117ae4:	e8 68 4f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117ae9:	29 c3                	sub    %eax,%ebx
f0117aeb:	89 d8                	mov    %ebx,%eax
f0117aed:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117af2:	74 14                	je     f0117b08 <test_kmalloc+0x899>
f0117af4:	83 ec 04             	sub    $0x4,%esp
f0117af7:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117afc:	6a 73                	push   $0x73
f0117afe:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117b03:	e8 f3 86 fe ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117b08:	e8 44 4f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117b0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b10:	e8 27 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117b15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117b18:	83 ec 0c             	sub    $0xc,%esp
f0117b1b:	68 00 fc 5f 00       	push   $0x5ffc00
f0117b20:	e8 ee fc fe ff       	call   f0107813 <kmalloc>
f0117b25:	83 c4 10             	add    $0x10,%esp
f0117b28:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b2e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117b34:	89 c1                	mov    %eax,%ecx
f0117b36:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117b3d:	10 00 00 
f0117b40:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117b46:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b4b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117b51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b57:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b5c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117b62:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b68:	29 d0                	sub    %edx,%eax
f0117b6a:	89 c3                	mov    %eax,%ebx
f0117b6c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117b73:	10 00 00 
f0117b76:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117b7b:	0f b6 d0             	movzbl %al,%edx
f0117b7e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117b84:	01 d0                	add    %edx,%eax
f0117b86:	48                   	dec    %eax
f0117b87:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117b8d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117b93:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b98:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117b9e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117ba4:	29 d0                	sub    %edx,%eax
f0117ba6:	01 c3                	add    %eax,%ebx
f0117ba8:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117baf:	10 00 00 
f0117bb2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117bb7:	0f b6 c0             	movzbl %al,%eax
f0117bba:	c1 e0 04             	shl    $0x4,%eax
f0117bbd:	89 c2                	mov    %eax,%edx
f0117bbf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117bc5:	01 d0                	add    %edx,%eax
f0117bc7:	48                   	dec    %eax
f0117bc8:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117bce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117bd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bd9:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117bdf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117be5:	29 d0                	sub    %edx,%eax
f0117be7:	01 d8                	add    %ebx,%eax
f0117be9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117bee:	39 c1                	cmp    %eax,%ecx
f0117bf0:	74 14                	je     f0117c06 <test_kmalloc+0x997>
f0117bf2:	83 ec 04             	sub    $0x4,%esp
f0117bf5:	68 80 ae 13 f0       	push   $0xf013ae80
f0117bfa:	6a 79                	push   $0x79
f0117bfc:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117c01:	e8 f5 85 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c06:	e8 31 c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117c0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117c0e:	74 14                	je     f0117c24 <test_kmalloc+0x9b5>
f0117c10:	83 ec 04             	sub    $0x4,%esp
f0117c13:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117c18:	6a 7a                	push   $0x7a
f0117c1a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117c1f:	e8 d7 85 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c24:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117c27:	e8 25 4e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117c2c:	29 c3                	sub    %eax,%ebx
f0117c2e:	89 d8                	mov    %ebx,%eax
f0117c30:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117c35:	74 14                	je     f0117c4b <test_kmalloc+0x9dc>
f0117c37:	83 ec 04             	sub    $0x4,%esp
f0117c3a:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117c3f:	6a 7b                	push   $0x7b
f0117c41:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117c46:	e8 b0 85 fe ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117c4b:	e8 01 4e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117c50:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c53:	e8 e4 c0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117c58:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117c5b:	83 ec 0c             	sub    $0xc,%esp
f0117c5e:	68 00 38 00 00       	push   $0x3800
f0117c63:	e8 ab fb fe ff       	call   f0107813 <kmalloc>
f0117c68:	83 c4 10             	add    $0x10,%esp
f0117c6b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c71:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117c77:	89 c1                	mov    %eax,%ecx
f0117c79:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117c80:	10 00 00 
f0117c83:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117c89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c8e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117c94:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117c9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c9f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117ca5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117cab:	29 d0                	sub    %edx,%eax
f0117cad:	89 c3                	mov    %eax,%ebx
f0117caf:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117cb6:	10 00 00 
f0117cb9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117cbe:	0f b6 d0             	movzbl %al,%edx
f0117cc1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117cc7:	01 d0                	add    %edx,%eax
f0117cc9:	48                   	dec    %eax
f0117cca:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117cd0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117cd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cdb:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117ce1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117ce7:	29 d0                	sub    %edx,%eax
f0117ce9:	01 c3                	add    %eax,%ebx
f0117ceb:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117cf2:	10 00 00 
f0117cf5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117cfa:	0f b6 c0             	movzbl %al,%eax
f0117cfd:	c1 e0 04             	shl    $0x4,%eax
f0117d00:	89 c2                	mov    %eax,%edx
f0117d02:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117d08:	01 d0                	add    %edx,%eax
f0117d0a:	48                   	dec    %eax
f0117d0b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117d11:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117d17:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d1c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117d22:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117d28:	29 d0                	sub    %edx,%eax
f0117d2a:	01 d8                	add    %ebx,%eax
f0117d2c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117d31:	39 c1                	cmp    %eax,%ecx
f0117d33:	74 17                	je     f0117d4c <test_kmalloc+0xadd>
f0117d35:	83 ec 04             	sub    $0x4,%esp
f0117d38:	68 80 ae 13 f0       	push   $0xf013ae80
f0117d3d:	68 81 00 00 00       	push   $0x81
f0117d42:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117d47:	e8 af 84 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d4c:	e8 eb bf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117d51:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d54:	74 17                	je     f0117d6d <test_kmalloc+0xafe>
f0117d56:	83 ec 04             	sub    $0x4,%esp
f0117d59:	68 b4 ad 13 f0       	push   $0xf013adb4
f0117d5e:	68 82 00 00 00       	push   $0x82
f0117d63:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117d68:	e8 8e 84 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d6d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d70:	e8 dc 4c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117d75:	29 c3                	sub    %eax,%ebx
f0117d77:	89 d8                	mov    %ebx,%eax
f0117d79:	83 f8 04             	cmp    $0x4,%eax
f0117d7c:	74 17                	je     f0117d95 <test_kmalloc+0xb26>
f0117d7e:	83 ec 04             	sub    $0x4,%esp
f0117d81:	68 1c ae 13 f0       	push   $0xf013ae1c
f0117d86:	68 83 00 00 00       	push   $0x83
f0117d8b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117d90:	e8 66 84 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b50%");
f0117d95:	83 ec 0c             	sub    $0xc,%esp
f0117d98:	68 e6 ae 13 f0       	push   $0xf013aee6
f0117d9d:	e8 e0 8e fe ff       	call   f0100c82 <cprintf>
f0117da2:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117da5:	e8 a7 4c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0117daa:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117dad:	e8 8a bf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117db2:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117db5:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117dbc:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117dbf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117dc5:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117dcb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117dd1:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117dd4:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117dd6:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117ddc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117de2:	01 c2                	add    %eax,%edx
f0117de4:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117de7:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117de9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117def:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117df5:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117dfc:	fd 0f 00 
			shortArr[0] = minShort;
f0117dff:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117e08:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117e0b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117e11:	01 c0                	add    %eax,%eax
f0117e13:	89 c2                	mov    %eax,%edx
f0117e15:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e1b:	01 c2                	add    %eax,%edx
f0117e1d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117e21:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117e24:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117e2a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117e30:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117e37:	01 00 00 
			intArr[0] = minInt;
f0117e3a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e40:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117e43:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117e45:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117e4b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117e52:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e58:	01 c2                	add    %eax,%edx
f0117e5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e5d:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117e5f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117e65:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117e6b:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117e72:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117e75:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117e7b:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117e7e:	88 10                	mov    %dl,(%eax)
f0117e80:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117e86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117e89:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117e8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117e93:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117e96:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117e99:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117e9f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ea6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117eac:	01 c2                	add    %eax,%edx
f0117eae:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117eb1:	88 02                	mov    %al,(%edx)
f0117eb3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117eb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ec0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ec6:	01 c2                	add    %eax,%edx
f0117ec8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117ecc:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117ed0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117ed6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117edd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ee3:	01 c2                	add    %eax,%edx
f0117ee5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117ee8:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117eeb:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117ef2:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117ef5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117efb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117f01:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f07:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117f0a:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117f0c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117f12:	89 c2                	mov    %eax,%edx
f0117f14:	c1 ea 1f             	shr    $0x1f,%edx
f0117f17:	01 d0                	add    %edx,%eax
f0117f19:	d1 f8                	sar    %eax
f0117f1b:	89 c2                	mov    %eax,%edx
f0117f1d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f23:	01 c2                	add    %eax,%edx
f0117f25:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117f28:	88 c1                	mov    %al,%cl
f0117f2a:	c0 e9 07             	shr    $0x7,%cl
f0117f2d:	01 c8                	add    %ecx,%eax
f0117f2f:	d0 f8                	sar    %al
f0117f31:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117f33:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117f39:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f3f:	01 c2                	add    %eax,%edx
f0117f41:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117f44:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117f46:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117f4c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117f52:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117f59:	1b 00 00 
			shortArr2[0] = minShort;
f0117f5c:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117f65:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117f68:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117f6e:	01 c0                	add    %eax,%eax
f0117f70:	89 c2                	mov    %eax,%edx
f0117f72:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117f78:	01 c2                	add    %eax,%edx
f0117f7a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117f7e:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117f81:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117f87:	8a 00                	mov    (%eax),%al
f0117f89:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117f8c:	75 15                	jne    f0117fa3 <test_kmalloc+0xd34>
f0117f8e:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117f94:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117f9a:	01 d0                	add    %edx,%eax
f0117f9c:	8a 00                	mov    (%eax),%al
f0117f9e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117fa1:	74 17                	je     f0117fba <test_kmalloc+0xd4b>
f0117fa3:	83 ec 04             	sub    $0x4,%esp
f0117fa6:	68 f0 ae 13 f0       	push   $0xf013aef0
f0117fab:	68 b2 00 00 00       	push   $0xb2
f0117fb0:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117fb5:	e8 41 82 fe ff       	call   f01001fb <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117fba:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117fc0:	66 8b 00             	mov    (%eax),%ax
f0117fc3:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117fc7:	75 1b                	jne    f0117fe4 <test_kmalloc+0xd75>
f0117fc9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117fcf:	01 c0                	add    %eax,%eax
f0117fd1:	89 c2                	mov    %eax,%edx
f0117fd3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117fd9:	01 d0                	add    %edx,%eax
f0117fdb:	66 8b 00             	mov    (%eax),%ax
f0117fde:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117fe2:	74 17                	je     f0117ffb <test_kmalloc+0xd8c>
f0117fe4:	83 ec 04             	sub    $0x4,%esp
f0117fe7:	68 f0 ae 13 f0       	push   $0xf013aef0
f0117fec:	68 b3 00 00 00       	push   $0xb3
f0117ff1:	68 9a ad 13 f0       	push   $0xf013ad9a
f0117ff6:	e8 00 82 fe ff       	call   f01001fb <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117ffb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118001:	8b 00                	mov    (%eax),%eax
f0118003:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118006:	75 1c                	jne    f0118024 <test_kmalloc+0xdb5>
f0118008:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011800e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118015:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011801b:	01 d0                	add    %edx,%eax
f011801d:	8b 00                	mov    (%eax),%eax
f011801f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118022:	74 17                	je     f011803b <test_kmalloc+0xdcc>
f0118024:	83 ec 04             	sub    $0x4,%esp
f0118027:	68 f0 ae 13 f0       	push   $0xf013aef0
f011802c:	68 b4 00 00 00       	push   $0xb4
f0118031:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118036:	e8 c0 81 fe ff       	call   f01001fb <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011803b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118041:	8a 00                	mov    (%eax),%al
f0118043:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118046:	75 1c                	jne    f0118064 <test_kmalloc+0xdf5>
f0118048:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011804e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118055:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011805b:	01 d0                	add    %edx,%eax
f011805d:	8a 00                	mov    (%eax),%al
f011805f:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118062:	74 17                	je     f011807b <test_kmalloc+0xe0c>
f0118064:	83 ec 04             	sub    $0x4,%esp
f0118067:	68 f0 ae 13 f0       	push   $0xf013aef0
f011806c:	68 b6 00 00 00       	push   $0xb6
f0118071:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118076:	e8 80 81 fe ff       	call   f01001fb <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011807b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118081:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118085:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118089:	75 1f                	jne    f01180aa <test_kmalloc+0xe3b>
f011808b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118091:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118098:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011809e:	01 d0                	add    %edx,%eax
f01180a0:	66 8b 40 02          	mov    0x2(%eax),%ax
f01180a4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01180a8:	74 17                	je     f01180c1 <test_kmalloc+0xe52>
f01180aa:	83 ec 04             	sub    $0x4,%esp
f01180ad:	68 f0 ae 13 f0       	push   $0xf013aef0
f01180b2:	68 b7 00 00 00       	push   $0xb7
f01180b7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01180bc:	e8 3a 81 fe ff       	call   f01001fb <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01180c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01180c7:	8b 40 04             	mov    0x4(%eax),%eax
f01180ca:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01180cd:	75 1d                	jne    f01180ec <test_kmalloc+0xe7d>
f01180cf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01180d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01180dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01180e2:	01 d0                	add    %edx,%eax
f01180e4:	8b 40 04             	mov    0x4(%eax),%eax
f01180e7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01180ea:	74 17                	je     f0118103 <test_kmalloc+0xe94>
f01180ec:	83 ec 04             	sub    $0x4,%esp
f01180ef:	68 f0 ae 13 f0       	push   $0xf013aef0
f01180f4:	68 b8 00 00 00       	push   $0xb8
f01180f9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01180fe:	e8 f8 80 fe ff       	call   f01001fb <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118103:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118109:	8a 00                	mov    (%eax),%al
f011810b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011810e:	75 40                	jne    f0118150 <test_kmalloc+0xee1>
f0118110:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118116:	89 c2                	mov    %eax,%edx
f0118118:	c1 ea 1f             	shr    $0x1f,%edx
f011811b:	01 d0                	add    %edx,%eax
f011811d:	d1 f8                	sar    %eax
f011811f:	89 c2                	mov    %eax,%edx
f0118121:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118127:	01 d0                	add    %edx,%eax
f0118129:	8a 10                	mov    (%eax),%dl
f011812b:	8a 45 f2             	mov    -0xe(%ebp),%al
f011812e:	88 c1                	mov    %al,%cl
f0118130:	c0 e9 07             	shr    $0x7,%cl
f0118133:	01 c8                	add    %ecx,%eax
f0118135:	d0 f8                	sar    %al
f0118137:	38 c2                	cmp    %al,%dl
f0118139:	75 15                	jne    f0118150 <test_kmalloc+0xee1>
f011813b:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118141:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118147:	01 d0                	add    %edx,%eax
f0118149:	8a 00                	mov    (%eax),%al
f011814b:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011814e:	74 17                	je     f0118167 <test_kmalloc+0xef8>
f0118150:	83 ec 04             	sub    $0x4,%esp
f0118153:	68 f0 ae 13 f0       	push   $0xf013aef0
f0118158:	68 ba 00 00 00       	push   $0xba
f011815d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118162:	e8 94 80 fe ff       	call   f01001fb <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118167:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011816d:	66 8b 00             	mov    (%eax),%ax
f0118170:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118174:	75 1b                	jne    f0118191 <test_kmalloc+0xf22>
f0118176:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011817c:	01 c0                	add    %eax,%eax
f011817e:	89 c2                	mov    %eax,%edx
f0118180:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118186:	01 d0                	add    %edx,%eax
f0118188:	66 8b 00             	mov    (%eax),%ax
f011818b:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011818f:	74 17                	je     f01181a8 <test_kmalloc+0xf39>
f0118191:	83 ec 04             	sub    $0x4,%esp
f0118194:	68 f0 ae 13 f0       	push   $0xf013aef0
f0118199:	68 bb 00 00 00       	push   $0xbb
f011819e:	68 9a ad 13 f0       	push   $0xf013ad9a
f01181a3:	e8 53 80 fe ff       	call   f01001fb <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181a8:	e8 a4 48 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01181ad:	89 c2                	mov    %eax,%edx
f01181af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01181b2:	39 c2                	cmp    %eax,%edx
f01181b4:	74 17                	je     f01181cd <test_kmalloc+0xf5e>
f01181b6:	83 ec 04             	sub    $0x4,%esp
f01181b9:	68 1c ae 13 f0       	push   $0xf013ae1c
f01181be:	68 bd 00 00 00       	push   $0xbd
f01181c3:	68 9a ad 13 f0       	push   $0xf013ad9a
f01181c8:	e8 2e 80 fe ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181cd:	e8 6a bb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01181d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181d5:	74 17                	je     f01181ee <test_kmalloc+0xf7f>
f01181d7:	83 ec 04             	sub    $0x4,%esp
f01181da:	68 b4 ad 13 f0       	push   $0xf013adb4
f01181df:	68 be 00 00 00       	push   $0xbe
f01181e4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01181e9:	e8 0d 80 fe ff       	call   f01001fb <_panic>
		}

		cprintf("\b\b\b80%");
f01181ee:	83 ec 0c             	sub    $0xc,%esp
f01181f1:	68 25 af 13 f0       	push   $0xf013af25
f01181f6:	e8 87 8a fe ff       	call   f0100c82 <cprintf>
f01181fb:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f01181fe:	e8 4e 48 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118203:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118206:	e8 31 bb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011820b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011820e:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118215:	10 00 00 
f0118218:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011821e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118223:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118229:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011822f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118234:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011823a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118240:	29 d0                	sub    %edx,%eax
f0118242:	89 c1                	mov    %eax,%ecx
f0118244:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011824b:	10 00 00 
f011824e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118253:	0f b6 d0             	movzbl %al,%edx
f0118256:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011825c:	01 d0                	add    %edx,%eax
f011825e:	48                   	dec    %eax
f011825f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118265:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011826b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118270:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118276:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011827c:	29 d0                	sub    %edx,%eax
f011827e:	01 c1                	add    %eax,%ecx
f0118280:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118287:	10 00 00 
f011828a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011828f:	0f b6 c0             	movzbl %al,%eax
f0118292:	c1 e0 04             	shl    $0x4,%eax
f0118295:	89 c2                	mov    %eax,%edx
f0118297:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011829d:	01 d0                	add    %edx,%eax
f011829f:	48                   	dec    %eax
f01182a0:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01182a6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01182ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01182b1:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01182b7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01182bd:	29 d0                	sub    %edx,%eax
f01182bf:	01 c8                	add    %ecx,%eax
f01182c1:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01182c6:	29 c2                	sub    %eax,%edx
f01182c8:	89 d0                	mov    %edx,%eax
f01182ca:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01182d0:	83 ec 0c             	sub    $0xc,%esp
f01182d3:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01182d9:	e8 35 f5 fe ff       	call   f0107813 <kmalloc>
f01182de:	83 c4 10             	add    $0x10,%esp
f01182e1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01182e7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01182ed:	85 c0                	test   %eax,%eax
f01182ef:	74 17                	je     f0118308 <test_kmalloc+0x1099>
f01182f1:	83 ec 04             	sub    $0x4,%esp
f01182f4:	68 68 ad 13 f0       	push   $0xf013ad68
f01182f9:	68 c8 00 00 00       	push   $0xc8
f01182fe:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118303:	e8 f3 7e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118308:	e8 2f ba fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011830d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118310:	74 17                	je     f0118329 <test_kmalloc+0x10ba>
f0118312:	83 ec 04             	sub    $0x4,%esp
f0118315:	68 b4 ad 13 f0       	push   $0xf013adb4
f011831a:	68 c9 00 00 00       	push   $0xc9
f011831f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118324:	e8 d2 7e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118329:	e8 23 47 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011832e:	89 c2                	mov    %eax,%edx
f0118330:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118333:	39 c2                	cmp    %eax,%edx
f0118335:	74 17                	je     f011834e <test_kmalloc+0x10df>
f0118337:	83 ec 04             	sub    $0x4,%esp
f011833a:	68 1c ae 13 f0       	push   $0xf013ae1c
f011833f:	68 ca 00 00 00       	push   $0xca
f0118344:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118349:	e8 ad 7e fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b90%");
f011834e:	83 ec 0c             	sub    $0xc,%esp
f0118351:	68 2c af 13 f0       	push   $0xf013af2c
f0118356:	e8 27 89 fe ff       	call   f0100c82 <cprintf>
f011835b:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f011835e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118364:	05 00 40 00 00       	add    $0x4000,%eax
f0118369:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011836f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118376:	10 00 00 
f0118379:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011837f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118384:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011838a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118390:	ba 00 00 00 00       	mov    $0x0,%edx
f0118395:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011839b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01183a1:	29 d0                	sub    %edx,%eax
f01183a3:	89 c1                	mov    %eax,%ecx
f01183a5:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01183ac:	10 00 00 
f01183af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01183b4:	0f b6 d0             	movzbl %al,%edx
f01183b7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01183bd:	01 d0                	add    %edx,%eax
f01183bf:	48                   	dec    %eax
f01183c0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01183c6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01183cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01183d1:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01183d7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01183dd:	29 d0                	sub    %edx,%eax
f01183df:	01 c1                	add    %eax,%ecx
f01183e1:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01183e8:	10 00 00 
f01183eb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01183f0:	0f b6 c0             	movzbl %al,%eax
f01183f3:	c1 e0 04             	shl    $0x4,%eax
f01183f6:	89 c2                	mov    %eax,%edx
f01183f8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01183fe:	01 d0                	add    %edx,%eax
f0118400:	48                   	dec    %eax
f0118401:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118407:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011840d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118412:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118418:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011841e:	29 d0                	sub    %edx,%eax
f0118420:	01 c8                	add    %ecx,%eax
f0118422:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118427:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011842a:	eb 6a                	jmp    f0118496 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011842c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0118431:	83 ec 04             	sub    $0x4,%esp
f0118434:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f011843a:	52                   	push   %edx
f011843b:	ff 75 f4             	pushl  -0xc(%ebp)
f011843e:	50                   	push   %eax
f011843f:	e8 96 e5 fe ff       	call   f01069da <get_page_table>
f0118444:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118447:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011844d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118450:	c1 ea 0c             	shr    $0xc,%edx
f0118453:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118459:	c1 e2 02             	shl    $0x2,%edx
f011845c:	01 d0                	add    %edx,%eax
f011845e:	8b 00                	mov    (%eax),%eax
f0118460:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118465:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011846b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118471:	83 e0 04             	and    $0x4,%eax
f0118474:	85 c0                	test   %eax,%eax
f0118476:	74 17                	je     f011848f <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118478:	83 ec 04             	sub    $0x4,%esp
f011847b:	68 34 af 13 f0       	push   $0xf013af34
f0118480:	68 d7 00 00 00       	push   $0xd7
f0118485:	68 9a ad 13 f0       	push   $0xf013ad9a
f011848a:	e8 6c 7d fe ff       	call   f01001fb <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011848f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118496:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118499:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f011849f:	72 8b                	jb     f011842c <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01184a1:	83 ec 0c             	sub    $0xc,%esp
f01184a4:	68 7e af 13 f0       	push   $0xf013af7e
f01184a9:	e8 d4 87 fe ff       	call   f0100c82 <cprintf>
f01184ae:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01184b1:	83 ec 0c             	sub    $0xc,%esp
f01184b4:	68 88 af 13 f0       	push   $0xf013af88
f01184b9:	e8 c4 87 fe ff       	call   f0100c82 <cprintf>
f01184be:	83 c4 10             	add    $0x10,%esp

	return 1;
f01184c1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01184c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01184c9:	5b                   	pop    %ebx
f01184ca:	5f                   	pop    %edi
f01184cb:	5d                   	pop    %ebp
f01184cc:	c3                   	ret    

f01184cd <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01184cd:	55                   	push   %ebp
f01184ce:	89 e5                	mov    %esp,%ebp
f01184d0:	57                   	push   %edi
f01184d1:	53                   	push   %ebx
f01184d2:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01184d8:	83 ec 0c             	sub    $0xc,%esp
f01184db:	68 dc ac 13 f0       	push   $0xf013acdc
f01184e0:	e8 9d 87 fe ff       	call   f0100c82 <cprintf>
f01184e5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01184e8:	83 ec 0c             	sub    $0xc,%esp
f01184eb:	68 0c ad 13 f0       	push   $0xf013ad0c
f01184f0:	e8 8d 87 fe ff       	call   f0100c82 <cprintf>
f01184f5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01184f8:	83 ec 0c             	sub    $0xc,%esp
f01184fb:	68 dc ac 13 f0       	push   $0xf013acdc
f0118500:	e8 7d 87 fe ff       	call   f0100c82 <cprintf>
f0118505:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118508:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f011850e:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118513:	b8 00 00 00 00       	mov    $0x0,%eax
f0118518:	89 d7                	mov    %edx,%edi
f011851a:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011851c:	83 ec 0c             	sub    $0xc,%esp
f011851f:	68 c4 af 13 f0       	push   $0xf013afc4
f0118524:	e8 59 87 fe ff       	call   f0100c82 <cprintf>
f0118529:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011852c:	e8 20 45 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118531:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118534:	e8 03 b8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118539:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f011853c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118543:	eb 1f                	jmp    f0118564 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118545:	83 ec 0c             	sub    $0xc,%esp
f0118548:	68 00 00 20 00       	push   $0x200000
f011854d:	e8 c1 f2 fe ff       	call   f0107813 <kmalloc>
f0118552:	83 c4 10             	add    $0x10,%esp
f0118555:	89 c2                	mov    %eax,%edx
f0118557:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011855a:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118561:	ff 45 f4             	incl   -0xc(%ebp)
f0118564:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118568:	7e db                	jle    f0118545 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f011856a:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118571:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118574:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118579:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011857c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011857f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118584:	f7 75 e8             	divl   -0x18(%ebp)
f0118587:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011858a:	29 d0                	sub    %edx,%eax
f011858c:	89 c1                	mov    %eax,%ecx
f011858e:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118595:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011859a:	0f b6 d0             	movzbl %al,%edx
f011859d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01185a0:	01 d0                	add    %edx,%eax
f01185a2:	48                   	dec    %eax
f01185a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01185a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01185a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01185ae:	f7 75 e0             	divl   -0x20(%ebp)
f01185b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01185b4:	29 d0                	sub    %edx,%eax
f01185b6:	01 c1                	add    %eax,%ecx
f01185b8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01185bf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01185c4:	0f b6 c0             	movzbl %al,%eax
f01185c7:	c1 e0 04             	shl    $0x4,%eax
f01185ca:	89 c2                	mov    %eax,%edx
f01185cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01185cf:	01 d0                	add    %edx,%eax
f01185d1:	48                   	dec    %eax
f01185d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01185d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01185d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01185dd:	f7 75 d8             	divl   -0x28(%ebp)
f01185e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01185e3:	29 d0                	sub    %edx,%eax
f01185e5:	01 c8                	add    %ecx,%eax
f01185e7:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01185ec:	29 c2                	sub    %eax,%edx
f01185ee:	89 d0                	mov    %edx,%eax
f01185f0:	83 ec 0c             	sub    $0xc,%esp
f01185f3:	50                   	push   %eax
f01185f4:	e8 1a f2 fe ff       	call   f0107813 <kmalloc>
f01185f9:	83 c4 10             	add    $0x10,%esp
f01185fc:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118602:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118608:	89 c1                	mov    %eax,%ecx
f011860a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118611:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118614:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118619:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011861c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011861f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118624:	f7 75 d0             	divl   -0x30(%ebp)
f0118627:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011862a:	29 d0                	sub    %edx,%eax
f011862c:	89 c3                	mov    %eax,%ebx
f011862e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118635:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011863a:	0f b6 d0             	movzbl %al,%edx
f011863d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118640:	01 d0                	add    %edx,%eax
f0118642:	48                   	dec    %eax
f0118643:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118646:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118649:	ba 00 00 00 00       	mov    $0x0,%edx
f011864e:	f7 75 c8             	divl   -0x38(%ebp)
f0118651:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118654:	29 d0                	sub    %edx,%eax
f0118656:	01 c3                	add    %eax,%ebx
f0118658:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011865f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118664:	0f b6 c0             	movzbl %al,%eax
f0118667:	c1 e0 04             	shl    $0x4,%eax
f011866a:	89 c2                	mov    %eax,%edx
f011866c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011866f:	01 d0                	add    %edx,%eax
f0118671:	48                   	dec    %eax
f0118672:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118675:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118678:	ba 00 00 00 00       	mov    $0x0,%edx
f011867d:	f7 75 c0             	divl   -0x40(%ebp)
f0118680:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118683:	29 d0                	sub    %edx,%eax
f0118685:	01 d8                	add    %ebx,%eax
f0118687:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011868c:	39 c1                	cmp    %eax,%ecx
f011868e:	0f 85 ed 04 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118694:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011869a:	89 c1                	mov    %eax,%ecx
f011869c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01186a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01186a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186ab:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01186ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01186b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01186b6:	f7 75 b8             	divl   -0x48(%ebp)
f01186b9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01186bc:	29 d0                	sub    %edx,%eax
f01186be:	89 c3                	mov    %eax,%ebx
f01186c0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01186c7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01186cc:	0f b6 d0             	movzbl %al,%edx
f01186cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01186d2:	01 d0                	add    %edx,%eax
f01186d4:	48                   	dec    %eax
f01186d5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01186d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186db:	ba 00 00 00 00       	mov    $0x0,%edx
f01186e0:	f7 75 b0             	divl   -0x50(%ebp)
f01186e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186e6:	29 d0                	sub    %edx,%eax
f01186e8:	01 c3                	add    %eax,%ebx
f01186ea:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01186f1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01186f6:	0f b6 c0             	movzbl %al,%eax
f01186f9:	c1 e0 04             	shl    $0x4,%eax
f01186fc:	89 c2                	mov    %eax,%edx
f01186fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118701:	01 d0                	add    %edx,%eax
f0118703:	48                   	dec    %eax
f0118704:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118707:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011870a:	ba 00 00 00 00       	mov    $0x0,%edx
f011870f:	f7 75 a8             	divl   -0x58(%ebp)
f0118712:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118715:	29 d0                	sub    %edx,%eax
f0118717:	01 d8                	add    %ebx,%eax
f0118719:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011871e:	39 c1                	cmp    %eax,%ecx
f0118720:	0f 85 5b 04 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118726:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f011872c:	89 c1                	mov    %eax,%ecx
f011872e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118735:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118738:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011873d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118740:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118743:	ba 00 00 00 00       	mov    $0x0,%edx
f0118748:	f7 75 a0             	divl   -0x60(%ebp)
f011874b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011874e:	29 d0                	sub    %edx,%eax
f0118750:	89 c3                	mov    %eax,%ebx
f0118752:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118759:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011875e:	0f b6 d0             	movzbl %al,%edx
f0118761:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118764:	01 d0                	add    %edx,%eax
f0118766:	48                   	dec    %eax
f0118767:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011876a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011876d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118772:	f7 75 98             	divl   -0x68(%ebp)
f0118775:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118778:	29 d0                	sub    %edx,%eax
f011877a:	01 c3                	add    %eax,%ebx
f011877c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118783:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118788:	0f b6 c0             	movzbl %al,%eax
f011878b:	c1 e0 04             	shl    $0x4,%eax
f011878e:	89 c2                	mov    %eax,%edx
f0118790:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118793:	01 d0                	add    %edx,%eax
f0118795:	48                   	dec    %eax
f0118796:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118799:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011879c:	ba 00 00 00 00       	mov    $0x0,%edx
f01187a1:	f7 75 90             	divl   -0x70(%ebp)
f01187a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01187a7:	29 d0                	sub    %edx,%eax
f01187a9:	01 d8                	add    %ebx,%eax
f01187ab:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01187b0:	39 c1                	cmp    %eax,%ecx
f01187b2:	0f 85 c9 03 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01187b8:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01187be:	89 c1                	mov    %eax,%ecx
f01187c0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01187c7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01187ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187cf:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01187d2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01187d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01187da:	f7 75 88             	divl   -0x78(%ebp)
f01187dd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01187e0:	29 d0                	sub    %edx,%eax
f01187e2:	89 c3                	mov    %eax,%ebx
f01187e4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01187eb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01187f0:	0f b6 d0             	movzbl %al,%edx
f01187f3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01187f6:	01 d0                	add    %edx,%eax
f01187f8:	48                   	dec    %eax
f01187f9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01187ff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118805:	ba 00 00 00 00       	mov    $0x0,%edx
f011880a:	f7 75 80             	divl   -0x80(%ebp)
f011880d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118813:	29 d0                	sub    %edx,%eax
f0118815:	01 c3                	add    %eax,%ebx
f0118817:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011881e:	10 00 00 
f0118821:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118826:	0f b6 c0             	movzbl %al,%eax
f0118829:	c1 e0 04             	shl    $0x4,%eax
f011882c:	89 c2                	mov    %eax,%edx
f011882e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118834:	01 d0                	add    %edx,%eax
f0118836:	48                   	dec    %eax
f0118837:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011883d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118843:	ba 00 00 00 00       	mov    $0x0,%edx
f0118848:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011884e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118854:	29 d0                	sub    %edx,%eax
f0118856:	01 d8                	add    %ebx,%eax
f0118858:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011885d:	39 c1                	cmp    %eax,%ecx
f011885f:	0f 85 1c 03 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118865:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011886b:	89 c1                	mov    %eax,%ecx
f011886d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118874:	10 00 00 
f0118877:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011887d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118882:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118888:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011888e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118893:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118899:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011889f:	29 d0                	sub    %edx,%eax
f01188a1:	89 c3                	mov    %eax,%ebx
f01188a3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01188aa:	10 00 00 
f01188ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188b2:	0f b6 d0             	movzbl %al,%edx
f01188b5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01188bb:	01 d0                	add    %edx,%eax
f01188bd:	48                   	dec    %eax
f01188be:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01188c4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01188ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01188cf:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01188d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01188db:	29 d0                	sub    %edx,%eax
f01188dd:	01 c3                	add    %eax,%ebx
f01188df:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01188e6:	10 00 00 
f01188e9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188ee:	0f b6 c0             	movzbl %al,%eax
f01188f1:	c1 e0 04             	shl    $0x4,%eax
f01188f4:	89 c2                	mov    %eax,%edx
f01188f6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01188fc:	01 d0                	add    %edx,%eax
f01188fe:	48                   	dec    %eax
f01188ff:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118905:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011890b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118910:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118916:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011891c:	29 d0                	sub    %edx,%eax
f011891e:	01 d8                	add    %ebx,%eax
f0118920:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118925:	39 c1                	cmp    %eax,%ecx
f0118927:	0f 85 54 02 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011892d:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118933:	89 c1                	mov    %eax,%ecx
f0118935:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011893c:	10 00 00 
f011893f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118945:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011894a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118950:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118956:	ba 00 00 00 00       	mov    $0x0,%edx
f011895b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118961:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118967:	29 d0                	sub    %edx,%eax
f0118969:	89 c3                	mov    %eax,%ebx
f011896b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118972:	10 00 00 
f0118975:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011897a:	0f b6 d0             	movzbl %al,%edx
f011897d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118983:	01 d0                	add    %edx,%eax
f0118985:	48                   	dec    %eax
f0118986:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011898c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118992:	ba 00 00 00 00       	mov    $0x0,%edx
f0118997:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011899d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01189a3:	29 d0                	sub    %edx,%eax
f01189a5:	01 c3                	add    %eax,%ebx
f01189a7:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01189ae:	10 00 00 
f01189b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01189b6:	0f b6 c0             	movzbl %al,%eax
f01189b9:	c1 e0 04             	shl    $0x4,%eax
f01189bc:	89 c2                	mov    %eax,%edx
f01189be:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01189c4:	01 d0                	add    %edx,%eax
f01189c6:	48                   	dec    %eax
f01189c7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01189cd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01189d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01189d8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01189de:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01189e4:	29 d0                	sub    %edx,%eax
f01189e6:	01 d8                	add    %ebx,%eax
f01189e8:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01189ed:	39 c1                	cmp    %eax,%ecx
f01189ef:	0f 85 8c 01 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01189f5:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01189fb:	89 c1                	mov    %eax,%ecx
f01189fd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118a04:	10 00 00 
f0118a07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118a0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a12:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118a18:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118a1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a23:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118a29:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118a2f:	29 d0                	sub    %edx,%eax
f0118a31:	89 c3                	mov    %eax,%ebx
f0118a33:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118a3a:	10 00 00 
f0118a3d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a42:	0f b6 d0             	movzbl %al,%edx
f0118a45:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118a4b:	01 d0                	add    %edx,%eax
f0118a4d:	48                   	dec    %eax
f0118a4e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118a54:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118a5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a5f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118a65:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118a6b:	29 d0                	sub    %edx,%eax
f0118a6d:	01 c3                	add    %eax,%ebx
f0118a6f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118a76:	10 00 00 
f0118a79:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a7e:	0f b6 c0             	movzbl %al,%eax
f0118a81:	c1 e0 04             	shl    $0x4,%eax
f0118a84:	89 c2                	mov    %eax,%edx
f0118a86:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118a8c:	01 d0                	add    %edx,%eax
f0118a8e:	48                   	dec    %eax
f0118a8f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118a95:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa0:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118aa6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118aac:	29 d0                	sub    %edx,%eax
f0118aae:	01 d8                	add    %ebx,%eax
f0118ab0:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118ab5:	39 c1                	cmp    %eax,%ecx
f0118ab7:	0f 85 c4 00 00 00    	jne    f0118b81 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118abd:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118ac3:	89 c1                	mov    %eax,%ecx
f0118ac5:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118acc:	10 00 00 
f0118acf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ad5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ada:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118ae0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ae6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aeb:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118af1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118af7:	29 d0                	sub    %edx,%eax
f0118af9:	89 c3                	mov    %eax,%ebx
f0118afb:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118b02:	10 00 00 
f0118b05:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118b0a:	0f b6 d0             	movzbl %al,%edx
f0118b0d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118b13:	01 d0                	add    %edx,%eax
f0118b15:	48                   	dec    %eax
f0118b16:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118b1c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b22:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b27:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118b2d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b33:	29 d0                	sub    %edx,%eax
f0118b35:	01 c3                	add    %eax,%ebx
f0118b37:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118b3e:	10 00 00 
f0118b41:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118b46:	0f b6 c0             	movzbl %al,%eax
f0118b49:	c1 e0 04             	shl    $0x4,%eax
f0118b4c:	89 c2                	mov    %eax,%edx
f0118b4e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118b54:	01 d0                	add    %edx,%eax
f0118b56:	48                   	dec    %eax
f0118b57:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118b5d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118b63:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b68:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118b6e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118b74:	29 d0                	sub    %edx,%eax
f0118b76:	01 d8                	add    %ebx,%eax
f0118b78:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118b7d:	39 c1                	cmp    %eax,%ecx
f0118b7f:	74 17                	je     f0118b98 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118b81:	83 ec 04             	sub    $0x4,%esp
f0118b84:	68 14 b0 13 f0       	push   $0xf013b014
f0118b89:	68 03 01 00 00       	push   $0x103
f0118b8e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118b93:	e8 63 76 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b98:	e8 9f b1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118b9d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118ba0:	74 17                	je     f0118bb9 <test_kmalloc_nextfit+0x6ec>
f0118ba2:	83 ec 04             	sub    $0x4,%esp
f0118ba5:	68 b4 ad 13 f0       	push   $0xf013adb4
f0118baa:	68 05 01 00 00       	push   $0x105
f0118baf:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118bb4:	e8 42 76 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118bb9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118bbc:	e8 90 3e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118bc1:	29 c3                	sub    %eax,%ebx
f0118bc3:	89 d9                	mov    %ebx,%ecx
f0118bc5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118bcc:	10 00 00 
f0118bcf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118bd5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118bda:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118be0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118be6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118beb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118bf1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118bf7:	29 d0                	sub    %edx,%eax
f0118bf9:	89 c3                	mov    %eax,%ebx
f0118bfb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118c02:	10 00 00 
f0118c05:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c0a:	0f b6 d0             	movzbl %al,%edx
f0118c0d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118c13:	01 d0                	add    %edx,%eax
f0118c15:	48                   	dec    %eax
f0118c16:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118c1c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118c22:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c27:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118c2d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118c33:	29 d0                	sub    %edx,%eax
f0118c35:	01 c3                	add    %eax,%ebx
f0118c37:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118c3e:	10 00 00 
f0118c41:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c46:	0f b6 c0             	movzbl %al,%eax
f0118c49:	c1 e0 04             	shl    $0x4,%eax
f0118c4c:	89 c2                	mov    %eax,%edx
f0118c4e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118c54:	01 d0                	add    %edx,%eax
f0118c56:	48                   	dec    %eax
f0118c57:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118c5d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118c63:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c68:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118c6e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118c74:	29 d0                	sub    %edx,%eax
f0118c76:	01 d8                	add    %ebx,%eax
f0118c78:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118c7d:	29 c2                	sub    %eax,%edx
f0118c7f:	89 d0                	mov    %edx,%eax
f0118c81:	c1 e8 0c             	shr    $0xc,%eax
f0118c84:	39 c1                	cmp    %eax,%ecx
f0118c86:	74 17                	je     f0118c9f <test_kmalloc_nextfit+0x7d2>
f0118c88:	83 ec 04             	sub    $0x4,%esp
f0118c8b:	68 57 b0 13 f0       	push   $0xf013b057
f0118c90:	68 06 01 00 00       	push   $0x106
f0118c95:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118c9a:	e8 5c 75 fe ff       	call   f01001fb <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118c9f:	e8 98 b0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118ca4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118ca7:	e8 a5 3d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118cac:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118caf:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118cb5:	83 ec 0c             	sub    $0xc,%esp
f0118cb8:	50                   	push   %eax
f0118cb9:	e8 20 ec fe ff       	call   f01078de <kfree>
f0118cbe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118cc1:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118cc7:	83 ec 0c             	sub    $0xc,%esp
f0118cca:	50                   	push   %eax
f0118ccb:	e8 0e ec fe ff       	call   f01078de <kfree>
f0118cd0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118cd3:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118cd9:	83 ec 0c             	sub    $0xc,%esp
f0118cdc:	50                   	push   %eax
f0118cdd:	e8 fc eb fe ff       	call   f01078de <kfree>
f0118ce2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118ce5:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0118ceb:	83 ec 0c             	sub    $0xc,%esp
f0118cee:	50                   	push   %eax
f0118cef:	e8 ea eb fe ff       	call   f01078de <kfree>
f0118cf4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0118cf7:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118cfd:	83 ec 0c             	sub    $0xc,%esp
f0118d00:	50                   	push   %eax
f0118d01:	e8 d8 eb fe ff       	call   f01078de <kfree>
f0118d06:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0118d09:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118d0f:	83 ec 0c             	sub    $0xc,%esp
f0118d12:	50                   	push   %eax
f0118d13:	e8 c6 eb fe ff       	call   f01078de <kfree>
f0118d18:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118d1b:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118d21:	83 ec 0c             	sub    $0xc,%esp
f0118d24:	50                   	push   %eax
f0118d25:	e8 b4 eb fe ff       	call   f01078de <kfree>
f0118d2a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118d2d:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118d33:	83 ec 0c             	sub    $0xc,%esp
f0118d36:	50                   	push   %eax
f0118d37:	e8 a2 eb fe ff       	call   f01078de <kfree>
f0118d3c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118d3f:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118d45:	83 ec 0c             	sub    $0xc,%esp
f0118d48:	50                   	push   %eax
f0118d49:	e8 90 eb fe ff       	call   f01078de <kfree>
f0118d4e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118d51:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118d57:	83 ec 0c             	sub    $0xc,%esp
f0118d5a:	50                   	push   %eax
f0118d5b:	e8 7e eb fe ff       	call   f01078de <kfree>
f0118d60:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d63:	e8 d4 af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118d68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118d6b:	74 17                	je     f0118d84 <test_kmalloc_nextfit+0x8b7>
f0118d6d:	83 ec 04             	sub    $0x4,%esp
f0118d70:	68 b4 ad 13 f0       	push   $0xf013adb4
f0118d75:	68 17 01 00 00       	push   $0x117
f0118d7a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118d7f:	e8 77 74 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118d84:	e8 c8 3c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118d89:	89 c2                	mov    %eax,%edx
f0118d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118d8e:	89 d1                	mov    %edx,%ecx
f0118d90:	29 c1                	sub    %eax,%ecx
f0118d92:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118d99:	10 00 00 
f0118d9c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118da2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118da7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118dad:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118db3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118db8:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118dbe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118dc4:	29 d0                	sub    %edx,%eax
f0118dc6:	89 c3                	mov    %eax,%ebx
f0118dc8:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118dcf:	10 00 00 
f0118dd2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118dd7:	0f b6 d0             	movzbl %al,%edx
f0118dda:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118de0:	01 d0                	add    %edx,%eax
f0118de2:	48                   	dec    %eax
f0118de3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118de9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118def:	ba 00 00 00 00       	mov    $0x0,%edx
f0118df4:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118dfa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118e00:	29 d0                	sub    %edx,%eax
f0118e02:	01 c3                	add    %eax,%ebx
f0118e04:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118e0b:	10 00 00 
f0118e0e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118e13:	0f b6 c0             	movzbl %al,%eax
f0118e16:	c1 e0 04             	shl    $0x4,%eax
f0118e19:	89 c2                	mov    %eax,%edx
f0118e1b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118e21:	01 d0                	add    %edx,%eax
f0118e23:	48                   	dec    %eax
f0118e24:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118e2a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118e30:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e35:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118e3b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118e41:	29 d0                	sub    %edx,%eax
f0118e43:	01 d8                	add    %ebx,%eax
f0118e45:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118e4a:	29 c2                	sub    %eax,%edx
f0118e4c:	89 d0                	mov    %edx,%eax
f0118e4e:	c1 e8 0c             	shr    $0xc,%eax
f0118e51:	39 c1                	cmp    %eax,%ecx
f0118e53:	74 17                	je     f0118e6c <test_kmalloc_nextfit+0x99f>
f0118e55:	83 ec 04             	sub    $0x4,%esp
f0118e58:	68 68 b0 13 f0       	push   $0xf013b068
f0118e5d:	68 18 01 00 00       	push   $0x118
f0118e62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118e67:	e8 8f 73 fe ff       	call   f01001fb <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118e6c:	e8 cb ae fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118e71:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e74:	e8 d8 3b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118e79:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118e7c:	83 ec 0c             	sub    $0xc,%esp
f0118e7f:	68 00 fc 0f 00       	push   $0xffc00
f0118e84:	e8 8a e9 fe ff       	call   f0107813 <kmalloc>
f0118e89:	83 c4 10             	add    $0x10,%esp
f0118e8c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118e92:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118e99:	10 00 00 
f0118e9c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118ea2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ea7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118ead:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118eb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118ebe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118ec4:	29 d0                	sub    %edx,%eax
f0118ec6:	89 c1                	mov    %eax,%ecx
f0118ec8:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118ecf:	10 00 00 
f0118ed2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118ed7:	0f b6 d0             	movzbl %al,%edx
f0118eda:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118ee0:	01 d0                	add    %edx,%eax
f0118ee2:	48                   	dec    %eax
f0118ee3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118ee9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118eef:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef4:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118efa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118f00:	29 d0                	sub    %edx,%eax
f0118f02:	01 c1                	add    %eax,%ecx
f0118f04:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118f0b:	10 00 00 
f0118f0e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118f13:	0f b6 c0             	movzbl %al,%eax
f0118f16:	c1 e0 04             	shl    $0x4,%eax
f0118f19:	89 c2                	mov    %eax,%edx
f0118f1b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118f21:	01 d0                	add    %edx,%eax
f0118f23:	48                   	dec    %eax
f0118f24:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118f2a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118f30:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f35:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118f3b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118f41:	29 d0                	sub    %edx,%eax
f0118f43:	01 c8                	add    %ecx,%eax
f0118f45:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118f4b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118f51:	39 c2                	cmp    %eax,%edx
f0118f53:	74 17                	je     f0118f6c <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118f55:	83 ec 04             	sub    $0x4,%esp
f0118f58:	68 a8 b0 13 f0       	push   $0xf013b0a8
f0118f5d:	68 1f 01 00 00       	push   $0x11f
f0118f62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118f67:	e8 8f 72 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f6c:	e8 cb ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118f71:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f74:	74 17                	je     f0118f8d <test_kmalloc_nextfit+0xac0>
f0118f76:	83 ec 04             	sub    $0x4,%esp
f0118f79:	68 b4 ad 13 f0       	push   $0xf013adb4
f0118f7e:	68 20 01 00 00       	push   $0x120
f0118f83:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118f88:	e8 6e 72 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118f8d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f90:	e8 bc 3a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118f95:	29 c3                	sub    %eax,%ebx
f0118f97:	89 d8                	mov    %ebx,%eax
f0118f99:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118f9e:	74 17                	je     f0118fb7 <test_kmalloc_nextfit+0xaea>
f0118fa0:	83 ec 04             	sub    $0x4,%esp
f0118fa3:	68 57 b0 13 f0       	push   $0xf013b057
f0118fa8:	68 21 01 00 00       	push   $0x121
f0118fad:	68 9a ad 13 f0       	push   $0xf013ad9a
f0118fb2:	e8 44 72 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118fb7:	e8 80 ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118fbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118fbf:	e8 8d 3a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0118fc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118fc7:	83 ec 0c             	sub    $0xc,%esp
f0118fca:	68 00 04 00 00       	push   $0x400
f0118fcf:	e8 3f e8 fe ff       	call   f0107813 <kmalloc>
f0118fd4:	83 c4 10             	add    $0x10,%esp
f0118fd7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118fdd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118fe4:	10 00 00 
f0118fe7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118fed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ff2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118ff8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119003:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119009:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011900f:	29 d0                	sub    %edx,%eax
f0119011:	89 c1                	mov    %eax,%ecx
f0119013:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011901a:	10 00 00 
f011901d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119022:	0f b6 d0             	movzbl %al,%edx
f0119025:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011902b:	01 d0                	add    %edx,%eax
f011902d:	48                   	dec    %eax
f011902e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119034:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011903a:	ba 00 00 00 00       	mov    $0x0,%edx
f011903f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119045:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011904b:	29 d0                	sub    %edx,%eax
f011904d:	01 c1                	add    %eax,%ecx
f011904f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119056:	10 00 00 
f0119059:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011905e:	0f b6 c0             	movzbl %al,%eax
f0119061:	c1 e0 04             	shl    $0x4,%eax
f0119064:	89 c2                	mov    %eax,%edx
f0119066:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011906c:	01 d0                	add    %edx,%eax
f011906e:	48                   	dec    %eax
f011906f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119075:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011907b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119080:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119086:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011908c:	29 d0                	sub    %edx,%eax
f011908e:	01 c8                	add    %ecx,%eax
f0119090:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119096:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011909c:	39 c2                	cmp    %eax,%edx
f011909e:	74 17                	je     f01190b7 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01190a0:	83 ec 04             	sub    $0x4,%esp
f01190a3:	68 a8 b0 13 f0       	push   $0xf013b0a8
f01190a8:	68 27 01 00 00       	push   $0x127
f01190ad:	68 9a ad 13 f0       	push   $0xf013ad9a
f01190b2:	e8 44 71 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190b7:	e8 80 ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01190bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01190bf:	74 17                	je     f01190d8 <test_kmalloc_nextfit+0xc0b>
f01190c1:	83 ec 04             	sub    $0x4,%esp
f01190c4:	68 b4 ad 13 f0       	push   $0xf013adb4
f01190c9:	68 28 01 00 00       	push   $0x128
f01190ce:	68 9a ad 13 f0       	push   $0xf013ad9a
f01190d3:	e8 23 71 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01190d8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01190db:	e8 71 39 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01190e0:	29 c3                	sub    %eax,%ebx
f01190e2:	89 d8                	mov    %ebx,%eax
f01190e4:	83 f8 01             	cmp    $0x1,%eax
f01190e7:	74 17                	je     f0119100 <test_kmalloc_nextfit+0xc33>
f01190e9:	83 ec 04             	sub    $0x4,%esp
f01190ec:	68 57 b0 13 f0       	push   $0xf013b057
f01190f1:	68 29 01 00 00       	push   $0x129
f01190f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01190fb:	e8 fb 70 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119100:	e8 37 ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119105:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119108:	e8 44 39 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011910d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119110:	83 ec 0c             	sub    $0xc,%esp
f0119113:	68 00 00 50 00       	push   $0x500000
f0119118:	e8 f6 e6 fe ff       	call   f0107813 <kmalloc>
f011911d:	83 c4 10             	add    $0x10,%esp
f0119120:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119126:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011912d:	10 00 00 
f0119130:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119136:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011913b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119141:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119147:	ba 00 00 00 00       	mov    $0x0,%edx
f011914c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119152:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119158:	29 d0                	sub    %edx,%eax
f011915a:	89 c1                	mov    %eax,%ecx
f011915c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119163:	10 00 00 
f0119166:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011916b:	0f b6 d0             	movzbl %al,%edx
f011916e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119174:	01 d0                	add    %edx,%eax
f0119176:	48                   	dec    %eax
f0119177:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011917d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119183:	ba 00 00 00 00       	mov    $0x0,%edx
f0119188:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011918e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119194:	29 d0                	sub    %edx,%eax
f0119196:	01 c1                	add    %eax,%ecx
f0119198:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f011919f:	10 00 00 
f01191a2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01191a7:	0f b6 c0             	movzbl %al,%eax
f01191aa:	c1 e0 04             	shl    $0x4,%eax
f01191ad:	89 c2                	mov    %eax,%edx
f01191af:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01191b5:	01 d0                	add    %edx,%eax
f01191b7:	48                   	dec    %eax
f01191b8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01191be:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01191c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01191c9:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01191cf:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01191d5:	29 d0                	sub    %edx,%eax
f01191d7:	01 c8                	add    %ecx,%eax
f01191d9:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01191df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191e5:	39 c2                	cmp    %eax,%edx
f01191e7:	74 17                	je     f0119200 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f01191e9:	83 ec 04             	sub    $0x4,%esp
f01191ec:	68 a8 b0 13 f0       	push   $0xf013b0a8
f01191f1:	68 2f 01 00 00       	push   $0x12f
f01191f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01191fb:	e8 fb 6f fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119200:	e8 37 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119205:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119208:	74 17                	je     f0119221 <test_kmalloc_nextfit+0xd54>
f011920a:	83 ec 04             	sub    $0x4,%esp
f011920d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119212:	68 30 01 00 00       	push   $0x130
f0119217:	68 9a ad 13 f0       	push   $0xf013ad9a
f011921c:	e8 da 6f fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119221:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119224:	e8 28 38 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119229:	29 c3                	sub    %eax,%ebx
f011922b:	89 d8                	mov    %ebx,%eax
f011922d:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119232:	74 17                	je     f011924b <test_kmalloc_nextfit+0xd7e>
f0119234:	83 ec 04             	sub    $0x4,%esp
f0119237:	68 57 b0 13 f0       	push   $0xf013b057
f011923c:	68 31 01 00 00       	push   $0x131
f0119241:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119246:	e8 b0 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011924b:	e8 ec aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119250:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119253:	e8 f9 37 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119258:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011925b:	83 ec 0c             	sub    $0xc,%esp
f011925e:	68 00 00 10 00       	push   $0x100000
f0119263:	e8 ab e5 fe ff       	call   f0107813 <kmalloc>
f0119268:	83 c4 10             	add    $0x10,%esp
f011926b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119271:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119278:	10 00 00 
f011927b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119281:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119286:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f011928c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119292:	ba 00 00 00 00       	mov    $0x0,%edx
f0119297:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f011929d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01192a3:	29 d0                	sub    %edx,%eax
f01192a5:	89 c1                	mov    %eax,%ecx
f01192a7:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01192ae:	10 00 00 
f01192b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01192b6:	0f b6 d0             	movzbl %al,%edx
f01192b9:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01192bf:	01 d0                	add    %edx,%eax
f01192c1:	48                   	dec    %eax
f01192c2:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01192c8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01192ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d3:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01192d9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01192df:	29 d0                	sub    %edx,%eax
f01192e1:	01 c1                	add    %eax,%ecx
f01192e3:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f01192ea:	10 00 00 
f01192ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01192f2:	0f b6 c0             	movzbl %al,%eax
f01192f5:	c1 e0 04             	shl    $0x4,%eax
f01192f8:	89 c2                	mov    %eax,%edx
f01192fa:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119300:	01 d0                	add    %edx,%eax
f0119302:	48                   	dec    %eax
f0119303:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119309:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011930f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119314:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011931a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119320:	29 d0                	sub    %edx,%eax
f0119322:	01 c8                	add    %ecx,%eax
f0119324:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011932a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119330:	39 c2                	cmp    %eax,%edx
f0119332:	74 17                	je     f011934b <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119334:	83 ec 04             	sub    $0x4,%esp
f0119337:	68 a8 b0 13 f0       	push   $0xf013b0a8
f011933c:	68 37 01 00 00       	push   $0x137
f0119341:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119346:	e8 b0 6e fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011934b:	e8 ec a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119350:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119353:	74 17                	je     f011936c <test_kmalloc_nextfit+0xe9f>
f0119355:	83 ec 04             	sub    $0x4,%esp
f0119358:	68 b4 ad 13 f0       	push   $0xf013adb4
f011935d:	68 38 01 00 00       	push   $0x138
f0119362:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119367:	e8 8f 6e fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011936c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011936f:	e8 dd 36 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119374:	29 c3                	sub    %eax,%ebx
f0119376:	89 d8                	mov    %ebx,%eax
f0119378:	3d 00 01 00 00       	cmp    $0x100,%eax
f011937d:	74 17                	je     f0119396 <test_kmalloc_nextfit+0xec9>
f011937f:	83 ec 04             	sub    $0x4,%esp
f0119382:	68 57 b0 13 f0       	push   $0xf013b057
f0119387:	68 39 01 00 00       	push   $0x139
f011938c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119391:	e8 65 6e fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119396:	e8 a1 a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011939b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011939e:	e8 ae 36 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01193a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01193a6:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01193ac:	83 ec 0c             	sub    $0xc,%esp
f01193af:	50                   	push   %eax
f01193b0:	e8 29 e5 fe ff       	call   f01078de <kfree>
f01193b5:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193b8:	e8 7f a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01193bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01193c0:	74 17                	je     f01193d9 <test_kmalloc_nextfit+0xf0c>
f01193c2:	83 ec 04             	sub    $0x4,%esp
f01193c5:	68 b4 ad 13 f0       	push   $0xf013adb4
f01193ca:	68 3e 01 00 00       	push   $0x13e
f01193cf:	68 9a ad 13 f0       	push   $0xf013ad9a
f01193d4:	e8 22 6e fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01193d9:	e8 73 36 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01193de:	89 c2                	mov    %eax,%edx
f01193e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01193e3:	29 c2                	sub    %eax,%edx
f01193e5:	89 d0                	mov    %edx,%eax
f01193e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01193ec:	74 17                	je     f0119405 <test_kmalloc_nextfit+0xf38>
f01193ee:	83 ec 04             	sub    $0x4,%esp
f01193f1:	68 68 b0 13 f0       	push   $0xf013b068
f01193f6:	68 3f 01 00 00       	push   $0x13f
f01193fb:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119400:	e8 f6 6d fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119405:	e8 32 a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011940a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011940d:	e8 3f 36 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119412:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119415:	83 ec 0c             	sub    $0xc,%esp
f0119418:	68 00 04 00 00       	push   $0x400
f011941d:	e8 f1 e3 fe ff       	call   f0107813 <kmalloc>
f0119422:	83 c4 10             	add    $0x10,%esp
f0119425:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011942b:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119432:	10 00 00 
f0119435:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011943b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119440:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119446:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011944c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119451:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119457:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011945d:	29 d0                	sub    %edx,%eax
f011945f:	89 c1                	mov    %eax,%ecx
f0119461:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119468:	10 00 00 
f011946b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119470:	0f b6 d0             	movzbl %al,%edx
f0119473:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119479:	01 d0                	add    %edx,%eax
f011947b:	48                   	dec    %eax
f011947c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119482:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119488:	ba 00 00 00 00       	mov    $0x0,%edx
f011948d:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119493:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119499:	29 d0                	sub    %edx,%eax
f011949b:	01 c1                	add    %eax,%ecx
f011949d:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01194a4:	10 00 00 
f01194a7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01194ac:	0f b6 c0             	movzbl %al,%eax
f01194af:	c1 e0 04             	shl    $0x4,%eax
f01194b2:	89 c2                	mov    %eax,%edx
f01194b4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01194ba:	01 d0                	add    %edx,%eax
f01194bc:	48                   	dec    %eax
f01194bd:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01194c3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01194c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01194ce:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01194d4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01194da:	29 d0                	sub    %edx,%eax
f01194dc:	01 c8                	add    %ecx,%eax
f01194de:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01194e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01194ea:	39 c2                	cmp    %eax,%edx
f01194ec:	74 17                	je     f0119505 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f01194ee:	83 ec 04             	sub    $0x4,%esp
f01194f1:	68 a8 b0 13 f0       	push   $0xf013b0a8
f01194f6:	68 45 01 00 00       	push   $0x145
f01194fb:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119500:	e8 f6 6c fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119505:	e8 32 a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011950a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011950d:	74 17                	je     f0119526 <test_kmalloc_nextfit+0x1059>
f011950f:	83 ec 04             	sub    $0x4,%esp
f0119512:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119517:	68 46 01 00 00       	push   $0x146
f011951c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119521:	e8 d5 6c fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119526:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119529:	e8 23 35 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011952e:	29 c3                	sub    %eax,%ebx
f0119530:	89 d8                	mov    %ebx,%eax
f0119532:	83 f8 01             	cmp    $0x1,%eax
f0119535:	74 17                	je     f011954e <test_kmalloc_nextfit+0x1081>
f0119537:	83 ec 04             	sub    $0x4,%esp
f011953a:	68 57 b0 13 f0       	push   $0xf013b057
f011953f:	68 47 01 00 00       	push   $0x147
f0119544:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119549:	e8 ad 6c fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011954e:	e8 e9 a7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119553:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119556:	e8 f6 34 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011955b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011955e:	83 ec 0c             	sub    $0xc,%esp
f0119561:	68 00 e0 1f 00       	push   $0x1fe000
f0119566:	e8 a8 e2 fe ff       	call   f0107813 <kmalloc>
f011956b:	83 c4 10             	add    $0x10,%esp
f011956e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119574:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011957b:	10 00 00 
f011957e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119584:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119589:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011958f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119595:	ba 00 00 00 00       	mov    $0x0,%edx
f011959a:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01195a0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01195a6:	29 d0                	sub    %edx,%eax
f01195a8:	89 c1                	mov    %eax,%ecx
f01195aa:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01195b1:	10 00 00 
f01195b4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01195b9:	0f b6 d0             	movzbl %al,%edx
f01195bc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01195c2:	01 d0                	add    %edx,%eax
f01195c4:	48                   	dec    %eax
f01195c5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01195cb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01195d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01195d6:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01195dc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01195e2:	29 d0                	sub    %edx,%eax
f01195e4:	01 c1                	add    %eax,%ecx
f01195e6:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01195ed:	10 00 00 
f01195f0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01195f5:	0f b6 c0             	movzbl %al,%eax
f01195f8:	c1 e0 04             	shl    $0x4,%eax
f01195fb:	89 c2                	mov    %eax,%edx
f01195fd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119603:	01 d0                	add    %edx,%eax
f0119605:	48                   	dec    %eax
f0119606:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011960c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119612:	ba 00 00 00 00       	mov    $0x0,%edx
f0119617:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011961d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119623:	29 d0                	sub    %edx,%eax
f0119625:	01 c8                	add    %ecx,%eax
f0119627:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011962d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119633:	39 c2                	cmp    %eax,%edx
f0119635:	74 17                	je     f011964e <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119637:	83 ec 04             	sub    $0x4,%esp
f011963a:	68 a8 b0 13 f0       	push   $0xf013b0a8
f011963f:	68 4d 01 00 00       	push   $0x14d
f0119644:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119649:	e8 ad 6b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011964e:	e8 e9 a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119653:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119656:	74 17                	je     f011966f <test_kmalloc_nextfit+0x11a2>
f0119658:	83 ec 04             	sub    $0x4,%esp
f011965b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119660:	68 4e 01 00 00       	push   $0x14e
f0119665:	68 9a ad 13 f0       	push   $0xf013ad9a
f011966a:	e8 8c 6b fe ff       	call   f01001fb <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011966f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119672:	e8 da 33 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119677:	29 c3                	sub    %eax,%ebx
f0119679:	89 d8                	mov    %ebx,%eax
f011967b:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119680:	74 17                	je     f0119699 <test_kmalloc_nextfit+0x11cc>
f0119682:	83 ec 04             	sub    $0x4,%esp
f0119685:	68 57 b0 13 f0       	push   $0xf013b057
f011968a:	68 50 01 00 00       	push   $0x150
f011968f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119694:	e8 62 6b fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119699:	e8 9e a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011969e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196a1:	e8 ab 33 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01196a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f01196a9:	83 ec 0c             	sub    $0xc,%esp
f01196ac:	68 00 00 08 00       	push   $0x80000
f01196b1:	e8 5d e1 fe ff       	call   f0107813 <kmalloc>
f01196b6:	83 c4 10             	add    $0x10,%esp
f01196b9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f01196bf:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01196c6:	10 00 00 
f01196c9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01196cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196d4:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01196da:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01196e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e5:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01196eb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01196f1:	29 d0                	sub    %edx,%eax
f01196f3:	89 c1                	mov    %eax,%ecx
f01196f5:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01196fc:	10 00 00 
f01196ff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119704:	0f b6 d0             	movzbl %al,%edx
f0119707:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011970d:	01 d0                	add    %edx,%eax
f011970f:	48                   	dec    %eax
f0119710:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119716:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011971c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119721:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119727:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011972d:	29 d0                	sub    %edx,%eax
f011972f:	01 c1                	add    %eax,%ecx
f0119731:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119738:	10 00 00 
f011973b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119740:	0f b6 c0             	movzbl %al,%eax
f0119743:	c1 e0 04             	shl    $0x4,%eax
f0119746:	89 c2                	mov    %eax,%edx
f0119748:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011974e:	01 d0                	add    %edx,%eax
f0119750:	48                   	dec    %eax
f0119751:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119757:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011975d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119762:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119768:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011976e:	29 d0                	sub    %edx,%eax
f0119770:	01 c8                	add    %ecx,%eax
f0119772:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119778:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011977e:	39 c2                	cmp    %eax,%edx
f0119780:	74 17                	je     f0119799 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119782:	83 ec 04             	sub    $0x4,%esp
f0119785:	68 a8 b0 13 f0       	push   $0xf013b0a8
f011978a:	68 56 01 00 00       	push   $0x156
f011978f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119794:	e8 62 6a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119799:	e8 9e a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011979e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197a1:	74 17                	je     f01197ba <test_kmalloc_nextfit+0x12ed>
f01197a3:	83 ec 04             	sub    $0x4,%esp
f01197a6:	68 b4 ad 13 f0       	push   $0xf013adb4
f01197ab:	68 57 01 00 00       	push   $0x157
f01197b0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01197b5:	e8 41 6a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01197ba:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197bd:	e8 8f 32 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01197c2:	29 c3                	sub    %eax,%ebx
f01197c4:	89 d8                	mov    %ebx,%eax
f01197c6:	3d 80 00 00 00       	cmp    $0x80,%eax
f01197cb:	74 17                	je     f01197e4 <test_kmalloc_nextfit+0x1317>
f01197cd:	83 ec 04             	sub    $0x4,%esp
f01197d0:	68 57 b0 13 f0       	push   $0xf013b057
f01197d5:	68 58 01 00 00       	push   $0x158
f01197da:	68 9a ad 13 f0       	push   $0xf013ad9a
f01197df:	e8 17 6a fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01197e4:	83 ec 0c             	sub    $0xc,%esp
f01197e7:	68 c8 b0 13 f0       	push   $0xf013b0c8
f01197ec:	e8 91 74 fe ff       	call   f0100c82 <cprintf>
f01197f1:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01197f4:	e8 43 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01197f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197fc:	e8 50 32 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119801:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119804:	83 ec 0c             	sub    $0xc,%esp
f0119807:	68 00 00 38 00       	push   $0x380000
f011980c:	e8 02 e0 fe ff       	call   f0107813 <kmalloc>
f0119811:	83 c4 10             	add    $0x10,%esp
f0119814:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011981a:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119821:	10 00 00 
f0119824:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011982a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011982f:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119835:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011983b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119840:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119846:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011984c:	29 d0                	sub    %edx,%eax
f011984e:	89 c1                	mov    %eax,%ecx
f0119850:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119857:	10 00 00 
f011985a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011985f:	0f b6 d0             	movzbl %al,%edx
f0119862:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119868:	01 d0                	add    %edx,%eax
f011986a:	48                   	dec    %eax
f011986b:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119871:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119877:	ba 00 00 00 00       	mov    $0x0,%edx
f011987c:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119882:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119888:	29 d0                	sub    %edx,%eax
f011988a:	01 c1                	add    %eax,%ecx
f011988c:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119893:	10 00 00 
f0119896:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011989b:	0f b6 c0             	movzbl %al,%eax
f011989e:	c1 e0 04             	shl    $0x4,%eax
f01198a1:	89 c2                	mov    %eax,%edx
f01198a3:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01198a9:	01 d0                	add    %edx,%eax
f01198ab:	48                   	dec    %eax
f01198ac:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f01198b2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01198b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01198bd:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f01198c3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01198c9:	29 d0                	sub    %edx,%eax
f01198cb:	01 c8                	add    %ecx,%eax
f01198cd:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f01198d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01198d9:	39 c2                	cmp    %eax,%edx
f01198db:	74 17                	je     f01198f4 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01198dd:	83 ec 04             	sub    $0x4,%esp
f01198e0:	68 a8 b0 13 f0       	push   $0xf013b0a8
f01198e5:	68 62 01 00 00       	push   $0x162
f01198ea:	68 9a ad 13 f0       	push   $0xf013ad9a
f01198ef:	e8 07 69 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198f4:	e8 43 a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01198f9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198fc:	74 17                	je     f0119915 <test_kmalloc_nextfit+0x1448>
f01198fe:	83 ec 04             	sub    $0x4,%esp
f0119901:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119906:	68 63 01 00 00       	push   $0x163
f011990b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119910:	e8 e6 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119915:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119918:	e8 34 31 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011991d:	29 c3                	sub    %eax,%ebx
f011991f:	89 d8                	mov    %ebx,%eax
f0119921:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119926:	74 17                	je     f011993f <test_kmalloc_nextfit+0x1472>
f0119928:	83 ec 04             	sub    $0x4,%esp
f011992b:	68 57 b0 13 f0       	push   $0xf013b057
f0119930:	68 64 01 00 00       	push   $0x164
f0119935:	68 9a ad 13 f0       	push   $0xf013ad9a
f011993a:	e8 bc 68 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011993f:	e8 f8 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119944:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119947:	e8 05 31 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011994c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011994f:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119955:	83 ec 0c             	sub    $0xc,%esp
f0119958:	50                   	push   %eax
f0119959:	e8 80 df fe ff       	call   f01078de <kfree>
f011995e:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119961:	e8 d6 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119966:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119969:	74 17                	je     f0119982 <test_kmalloc_nextfit+0x14b5>
f011996b:	83 ec 04             	sub    $0x4,%esp
f011996e:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119973:	68 69 01 00 00       	push   $0x169
f0119978:	68 9a ad 13 f0       	push   $0xf013ad9a
f011997d:	e8 79 68 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119982:	e8 ca 30 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119987:	89 c2                	mov    %eax,%edx
f0119989:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011998c:	29 c2                	sub    %eax,%edx
f011998e:	89 d0                	mov    %edx,%eax
f0119990:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119995:	74 17                	je     f01199ae <test_kmalloc_nextfit+0x14e1>
f0119997:	83 ec 04             	sub    $0x4,%esp
f011999a:	68 68 b0 13 f0       	push   $0xf013b068
f011999f:	68 6a 01 00 00       	push   $0x16a
f01199a4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01199a9:	e8 4d 68 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01199ae:	e8 89 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01199b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199b6:	e8 96 30 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f01199bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f01199be:	83 ec 0c             	sub    $0xc,%esp
f01199c1:	68 00 fc 3f 00       	push   $0x3ffc00
f01199c6:	e8 48 de fe ff       	call   f0107813 <kmalloc>
f01199cb:	83 c4 10             	add    $0x10,%esp
f01199ce:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f01199d4:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01199db:	10 00 00 
f01199de:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01199e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01199e9:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01199ef:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01199f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01199fa:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119a00:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119a06:	29 d0                	sub    %edx,%eax
f0119a08:	89 c1                	mov    %eax,%ecx
f0119a0a:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119a11:	10 00 00 
f0119a14:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119a19:	0f b6 d0             	movzbl %al,%edx
f0119a1c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119a22:	01 d0                	add    %edx,%eax
f0119a24:	48                   	dec    %eax
f0119a25:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119a2b:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119a31:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a36:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119a3c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119a42:	29 d0                	sub    %edx,%eax
f0119a44:	01 c1                	add    %eax,%ecx
f0119a46:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119a4d:	10 00 00 
f0119a50:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119a55:	0f b6 c0             	movzbl %al,%eax
f0119a58:	c1 e0 04             	shl    $0x4,%eax
f0119a5b:	89 c2                	mov    %eax,%edx
f0119a5d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119a63:	01 d0                	add    %edx,%eax
f0119a65:	48                   	dec    %eax
f0119a66:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119a6c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119a72:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a77:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119a7d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119a83:	29 d0                	sub    %edx,%eax
f0119a85:	01 c8                	add    %ecx,%eax
f0119a87:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119a8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a93:	39 c2                	cmp    %eax,%edx
f0119a95:	74 17                	je     f0119aae <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119a97:	83 ec 04             	sub    $0x4,%esp
f0119a9a:	68 a8 b0 13 f0       	push   $0xf013b0a8
f0119a9f:	68 70 01 00 00       	push   $0x170
f0119aa4:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119aa9:	e8 4d 67 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119aae:	e8 89 a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119ab3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ab6:	74 17                	je     f0119acf <test_kmalloc_nextfit+0x1602>
f0119ab8:	83 ec 04             	sub    $0x4,%esp
f0119abb:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119ac0:	68 71 01 00 00       	push   $0x171
f0119ac5:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119aca:	e8 2c 67 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119acf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ad2:	e8 7a 2f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119ad7:	29 c3                	sub    %eax,%ebx
f0119ad9:	89 d8                	mov    %ebx,%eax
f0119adb:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119ae0:	74 17                	je     f0119af9 <test_kmalloc_nextfit+0x162c>
f0119ae2:	83 ec 04             	sub    $0x4,%esp
f0119ae5:	68 57 b0 13 f0       	push   $0xf013b057
f0119aea:	68 72 01 00 00       	push   $0x172
f0119aef:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119af4:	e8 02 67 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119af9:	83 ec 0c             	sub    $0xc,%esp
f0119afc:	68 04 b1 13 f0       	push   $0xf013b104
f0119b01:	e8 7c 71 fe ff       	call   f0100c82 <cprintf>
f0119b06:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b09:	e8 2e a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119b0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b11:	e8 3b 2f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119b16:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119b19:	83 ec 0c             	sub    $0xc,%esp
f0119b1c:	68 00 00 60 00       	push   $0x600000
f0119b21:	e8 ed dc fe ff       	call   f0107813 <kmalloc>
f0119b26:	83 c4 10             	add    $0x10,%esp
f0119b29:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119b2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b35:	85 c0                	test   %eax,%eax
f0119b37:	74 17                	je     f0119b50 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119b39:	83 ec 04             	sub    $0x4,%esp
f0119b3c:	68 a8 b0 13 f0       	push   $0xf013b0a8
f0119b41:	68 7c 01 00 00       	push   $0x17c
f0119b46:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119b4b:	e8 ab 66 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b50:	e8 e7 a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119b55:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b58:	74 17                	je     f0119b71 <test_kmalloc_nextfit+0x16a4>
f0119b5a:	83 ec 04             	sub    $0x4,%esp
f0119b5d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119b62:	68 7d 01 00 00       	push   $0x17d
f0119b67:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119b6c:	e8 8a 66 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119b71:	e8 db 2e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119b76:	89 c2                	mov    %eax,%edx
f0119b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119b7b:	39 c2                	cmp    %eax,%edx
f0119b7d:	74 17                	je     f0119b96 <test_kmalloc_nextfit+0x16c9>
f0119b7f:	83 ec 04             	sub    $0x4,%esp
f0119b82:	68 57 b0 13 f0       	push   $0xf013b057
f0119b87:	68 7e 01 00 00       	push   $0x17e
f0119b8c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119b91:	e8 65 66 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119b96:	83 ec 0c             	sub    $0xc,%esp
f0119b99:	68 3c b1 13 f0       	push   $0xf013b13c
f0119b9e:	e8 df 70 fe ff       	call   f0100c82 <cprintf>
f0119ba3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119ba6:	83 ec 0c             	sub    $0xc,%esp
f0119ba9:	68 78 b1 13 f0       	push   $0xf013b178
f0119bae:	e8 cf 70 fe ff       	call   f0100c82 <cprintf>
f0119bb3:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119bb6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119bbb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119bbe:	5b                   	pop    %ebx
f0119bbf:	5f                   	pop    %edi
f0119bc0:	5d                   	pop    %ebp
f0119bc1:	c3                   	ret    

f0119bc2 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119bc2:	55                   	push   %ebp
f0119bc3:	89 e5                	mov    %esp,%ebp
f0119bc5:	57                   	push   %edi
f0119bc6:	53                   	push   %ebx
f0119bc7:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119bcd:	83 ec 0c             	sub    $0xc,%esp
f0119bd0:	68 dc ac 13 f0       	push   $0xf013acdc
f0119bd5:	e8 a8 70 fe ff       	call   f0100c82 <cprintf>
f0119bda:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119bdd:	83 ec 0c             	sub    $0xc,%esp
f0119be0:	68 0c ad 13 f0       	push   $0xf013ad0c
f0119be5:	e8 98 70 fe ff       	call   f0100c82 <cprintf>
f0119bea:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119bed:	83 ec 0c             	sub    $0xc,%esp
f0119bf0:	68 dc ac 13 f0       	push   $0xf013acdc
f0119bf5:	e8 88 70 fe ff       	call   f0100c82 <cprintf>
f0119bfa:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119bfd:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119c03:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119c08:	b8 00 00 00 00       	mov    $0x0,%eax
f0119c0d:	89 d7                	mov    %edx,%edi
f0119c0f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119c11:	e8 3b 2e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c19:	e8 1e a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119c1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119c21:	83 ec 0c             	sub    $0xc,%esp
f0119c24:	68 00 fc 2f 00       	push   $0x2ffc00
f0119c29:	e8 e5 db fe ff       	call   f0107813 <kmalloc>
f0119c2e:	83 c4 10             	add    $0x10,%esp
f0119c31:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119c37:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119c3d:	89 c1                	mov    %eax,%ecx
f0119c3f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119c46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119c49:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119c54:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c59:	f7 75 ec             	divl   -0x14(%ebp)
f0119c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119c5f:	29 d0                	sub    %edx,%eax
f0119c61:	89 c3                	mov    %eax,%ebx
f0119c63:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119c6a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119c6f:	0f b6 d0             	movzbl %al,%edx
f0119c72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119c75:	01 d0                	add    %edx,%eax
f0119c77:	48                   	dec    %eax
f0119c78:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119c7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c83:	f7 75 e4             	divl   -0x1c(%ebp)
f0119c86:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119c89:	29 d0                	sub    %edx,%eax
f0119c8b:	01 c3                	add    %eax,%ebx
f0119c8d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119c94:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119c99:	0f b6 c0             	movzbl %al,%eax
f0119c9c:	c1 e0 04             	shl    $0x4,%eax
f0119c9f:	89 c2                	mov    %eax,%edx
f0119ca1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119ca4:	01 d0                	add    %edx,%eax
f0119ca6:	48                   	dec    %eax
f0119ca7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119caa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119cad:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cb2:	f7 75 dc             	divl   -0x24(%ebp)
f0119cb5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119cb8:	29 d0                	sub    %edx,%eax
f0119cba:	01 d8                	add    %ebx,%eax
f0119cbc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119cc1:	39 c1                	cmp    %eax,%ecx
f0119cc3:	74 17                	je     f0119cdc <test_kmalloc_bestfit1+0x11a>
f0119cc5:	83 ec 04             	sub    $0x4,%esp
f0119cc8:	68 b4 b1 13 f0       	push   $0xf013b1b4
f0119ccd:	68 98 01 00 00       	push   $0x198
f0119cd2:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119cd7:	e8 1f 65 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cdc:	e8 5b a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119ce1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ce4:	74 17                	je     f0119cfd <test_kmalloc_bestfit1+0x13b>
f0119ce6:	83 ec 04             	sub    $0x4,%esp
f0119ce9:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119cee:	68 99 01 00 00       	push   $0x199
f0119cf3:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119cf8:	e8 fe 64 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119cfd:	e8 4f 2d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119d02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d05:	29 c2                	sub    %eax,%edx
f0119d07:	89 d0                	mov    %edx,%eax
f0119d09:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119d0e:	74 17                	je     f0119d27 <test_kmalloc_bestfit1+0x165>
f0119d10:	83 ec 04             	sub    $0x4,%esp
f0119d13:	68 e4 b1 13 f0       	push   $0xf013b1e4
f0119d18:	68 9a 01 00 00       	push   $0x19a
f0119d1d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119d22:	e8 d4 64 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d27:	e8 25 2d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119d2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d2f:	e8 08 a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119d37:	83 ec 0c             	sub    $0xc,%esp
f0119d3a:	68 00 fc 2f 00       	push   $0x2ffc00
f0119d3f:	e8 cf da fe ff       	call   f0107813 <kmalloc>
f0119d44:	83 c4 10             	add    $0x10,%esp
f0119d47:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119d4d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119d53:	89 c1                	mov    %eax,%ecx
f0119d55:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119d5c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119d5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d64:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119d67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119d6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d6f:	f7 75 d4             	divl   -0x2c(%ebp)
f0119d72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119d75:	29 d0                	sub    %edx,%eax
f0119d77:	89 c3                	mov    %eax,%ebx
f0119d79:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119d80:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119d85:	0f b6 d0             	movzbl %al,%edx
f0119d88:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119d8b:	01 d0                	add    %edx,%eax
f0119d8d:	48                   	dec    %eax
f0119d8e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119d91:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119d94:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d99:	f7 75 cc             	divl   -0x34(%ebp)
f0119d9c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119d9f:	29 d0                	sub    %edx,%eax
f0119da1:	01 c3                	add    %eax,%ebx
f0119da3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119daa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119daf:	0f b6 c0             	movzbl %al,%eax
f0119db2:	c1 e0 04             	shl    $0x4,%eax
f0119db5:	89 c2                	mov    %eax,%edx
f0119db7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119dba:	01 d0                	add    %edx,%eax
f0119dbc:	48                   	dec    %eax
f0119dbd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119dc0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119dc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dc8:	f7 75 c4             	divl   -0x3c(%ebp)
f0119dcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119dce:	29 d0                	sub    %edx,%eax
f0119dd0:	01 d8                	add    %ebx,%eax
f0119dd2:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119dd7:	39 c1                	cmp    %eax,%ecx
f0119dd9:	74 17                	je     f0119df2 <test_kmalloc_bestfit1+0x230>
f0119ddb:	83 ec 04             	sub    $0x4,%esp
f0119dde:	68 b4 b1 13 f0       	push   $0xf013b1b4
f0119de3:	68 a0 01 00 00       	push   $0x1a0
f0119de8:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119ded:	e8 09 64 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119df2:	e8 45 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119df7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119dfa:	74 17                	je     f0119e13 <test_kmalloc_bestfit1+0x251>
f0119dfc:	83 ec 04             	sub    $0x4,%esp
f0119dff:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119e04:	68 a1 01 00 00       	push   $0x1a1
f0119e09:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119e0e:	e8 e8 63 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119e13:	e8 39 2c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119e18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e1b:	29 c2                	sub    %eax,%edx
f0119e1d:	89 d0                	mov    %edx,%eax
f0119e1f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119e24:	74 17                	je     f0119e3d <test_kmalloc_bestfit1+0x27b>
f0119e26:	83 ec 04             	sub    $0x4,%esp
f0119e29:	68 e4 b1 13 f0       	push   $0xf013b1e4
f0119e2e:	68 a2 01 00 00       	push   $0x1a2
f0119e33:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119e38:	e8 be 63 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119e3d:	e8 0f 2c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e45:	e8 f2 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119e4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119e4d:	83 ec 0c             	sub    $0xc,%esp
f0119e50:	68 00 fc 1f 00       	push   $0x1ffc00
f0119e55:	e8 b9 d9 fe ff       	call   f0107813 <kmalloc>
f0119e5a:	83 c4 10             	add    $0x10,%esp
f0119e5d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119e63:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119e69:	89 c1                	mov    %eax,%ecx
f0119e6b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119e72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119e75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e7a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119e7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e85:	f7 75 bc             	divl   -0x44(%ebp)
f0119e88:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119e8b:	29 d0                	sub    %edx,%eax
f0119e8d:	89 c3                	mov    %eax,%ebx
f0119e8f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119e96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119e9b:	0f b6 d0             	movzbl %al,%edx
f0119e9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119ea1:	01 d0                	add    %edx,%eax
f0119ea3:	48                   	dec    %eax
f0119ea4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119ea7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119eaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eaf:	f7 75 b4             	divl   -0x4c(%ebp)
f0119eb2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119eb5:	29 d0                	sub    %edx,%eax
f0119eb7:	01 c3                	add    %eax,%ebx
f0119eb9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119ec0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ec5:	0f b6 c0             	movzbl %al,%eax
f0119ec8:	c1 e0 04             	shl    $0x4,%eax
f0119ecb:	89 c2                	mov    %eax,%edx
f0119ecd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119ed0:	01 d0                	add    %edx,%eax
f0119ed2:	48                   	dec    %eax
f0119ed3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119ed6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119ed9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ede:	f7 75 ac             	divl   -0x54(%ebp)
f0119ee1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119ee4:	29 d0                	sub    %edx,%eax
f0119ee6:	01 d8                	add    %ebx,%eax
f0119ee8:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119eed:	39 c1                	cmp    %eax,%ecx
f0119eef:	74 17                	je     f0119f08 <test_kmalloc_bestfit1+0x346>
f0119ef1:	83 ec 04             	sub    $0x4,%esp
f0119ef4:	68 b4 b1 13 f0       	push   $0xf013b1b4
f0119ef9:	68 a8 01 00 00       	push   $0x1a8
f0119efe:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119f03:	e8 f3 62 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f08:	e8 2f 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119f0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f10:	74 17                	je     f0119f29 <test_kmalloc_bestfit1+0x367>
f0119f12:	83 ec 04             	sub    $0x4,%esp
f0119f15:	68 b4 ad 13 f0       	push   $0xf013adb4
f0119f1a:	68 a9 01 00 00       	push   $0x1a9
f0119f1f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119f24:	e8 d2 62 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119f29:	e8 23 2b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119f2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119f31:	29 c2                	sub    %eax,%edx
f0119f33:	89 d0                	mov    %edx,%eax
f0119f35:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119f3a:	74 17                	je     f0119f53 <test_kmalloc_bestfit1+0x391>
f0119f3c:	83 ec 04             	sub    $0x4,%esp
f0119f3f:	68 e4 b1 13 f0       	push   $0xf013b1e4
f0119f44:	68 aa 01 00 00       	push   $0x1aa
f0119f49:	68 9a ad 13 f0       	push   $0xf013ad9a
f0119f4e:	e8 a8 62 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119f53:	e8 f9 2a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f0119f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f5b:	e8 dc 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119f60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119f63:	83 ec 0c             	sub    $0xc,%esp
f0119f66:	68 00 fc 1f 00       	push   $0x1ffc00
f0119f6b:	e8 a3 d8 fe ff       	call   f0107813 <kmalloc>
f0119f70:	83 c4 10             	add    $0x10,%esp
f0119f73:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119f79:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119f7f:	89 c1                	mov    %eax,%ecx
f0119f81:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119f88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119f8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f90:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119f93:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119f96:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f9b:	f7 75 a4             	divl   -0x5c(%ebp)
f0119f9e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119fa1:	29 d0                	sub    %edx,%eax
f0119fa3:	89 c3                	mov    %eax,%ebx
f0119fa5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119fac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119fb1:	0f b6 d0             	movzbl %al,%edx
f0119fb4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119fb7:	01 d0                	add    %edx,%eax
f0119fb9:	48                   	dec    %eax
f0119fba:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119fbd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119fc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fc5:	f7 75 9c             	divl   -0x64(%ebp)
f0119fc8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119fcb:	29 d0                	sub    %edx,%eax
f0119fcd:	01 c3                	add    %eax,%ebx
f0119fcf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119fd6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119fdb:	0f b6 c0             	movzbl %al,%eax
f0119fde:	c1 e0 04             	shl    $0x4,%eax
f0119fe1:	89 c2                	mov    %eax,%edx
f0119fe3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119fe6:	01 d0                	add    %edx,%eax
f0119fe8:	48                   	dec    %eax
f0119fe9:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119fec:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119fef:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ff4:	f7 75 94             	divl   -0x6c(%ebp)
f0119ff7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ffa:	29 d0                	sub    %edx,%eax
f0119ffc:	01 d8                	add    %ebx,%eax
f0119ffe:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a003:	39 c1                	cmp    %eax,%ecx
f011a005:	74 17                	je     f011a01e <test_kmalloc_bestfit1+0x45c>
f011a007:	83 ec 04             	sub    $0x4,%esp
f011a00a:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a00f:	68 b0 01 00 00       	push   $0x1b0
f011a014:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a019:	e8 dd 61 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a01e:	e8 19 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a023:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a026:	74 17                	je     f011a03f <test_kmalloc_bestfit1+0x47d>
f011a028:	83 ec 04             	sub    $0x4,%esp
f011a02b:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a030:	68 b1 01 00 00       	push   $0x1b1
f011a035:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a03a:	e8 bc 61 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a03f:	e8 0d 2a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a044:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a047:	29 c2                	sub    %eax,%edx
f011a049:	89 d0                	mov    %edx,%eax
f011a04b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a050:	74 17                	je     f011a069 <test_kmalloc_bestfit1+0x4a7>
f011a052:	83 ec 04             	sub    $0x4,%esp
f011a055:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a05a:	68 b2 01 00 00       	push   $0x1b2
f011a05f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a064:	e8 92 61 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a069:	e8 e3 29 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a06e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a071:	e8 c6 9c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a076:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a079:	83 ec 0c             	sub    $0xc,%esp
f011a07c:	68 00 fc 0f 00       	push   $0xffc00
f011a081:	e8 8d d7 fe ff       	call   f0107813 <kmalloc>
f011a086:	83 c4 10             	add    $0x10,%esp
f011a089:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a08f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a095:	89 c1                	mov    %eax,%ecx
f011a097:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a09e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a0a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0a6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a0a9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a0ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0b1:	f7 75 8c             	divl   -0x74(%ebp)
f011a0b4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a0b7:	29 d0                	sub    %edx,%eax
f011a0b9:	89 c3                	mov    %eax,%ebx
f011a0bb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a0c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a0c7:	0f b6 d0             	movzbl %al,%edx
f011a0ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a0cd:	01 d0                	add    %edx,%eax
f011a0cf:	48                   	dec    %eax
f011a0d0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a0d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a0d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0db:	f7 75 84             	divl   -0x7c(%ebp)
f011a0de:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a0e1:	29 d0                	sub    %edx,%eax
f011a0e3:	01 c3                	add    %eax,%ebx
f011a0e5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a0ec:	10 00 00 
f011a0ef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a0f4:	0f b6 c0             	movzbl %al,%eax
f011a0f7:	c1 e0 04             	shl    $0x4,%eax
f011a0fa:	89 c2                	mov    %eax,%edx
f011a0fc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a102:	01 d0                	add    %edx,%eax
f011a104:	48                   	dec    %eax
f011a105:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a10b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a111:	ba 00 00 00 00       	mov    $0x0,%edx
f011a116:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a11c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a122:	29 d0                	sub    %edx,%eax
f011a124:	01 d8                	add    %ebx,%eax
f011a126:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a12b:	39 c1                	cmp    %eax,%ecx
f011a12d:	74 17                	je     f011a146 <test_kmalloc_bestfit1+0x584>
f011a12f:	83 ec 04             	sub    $0x4,%esp
f011a132:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a137:	68 b8 01 00 00       	push   $0x1b8
f011a13c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a141:	e8 b5 60 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a146:	e8 f1 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a14b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a14e:	74 17                	je     f011a167 <test_kmalloc_bestfit1+0x5a5>
f011a150:	83 ec 04             	sub    $0x4,%esp
f011a153:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a158:	68 b9 01 00 00       	push   $0x1b9
f011a15d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a162:	e8 94 60 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a167:	e8 e5 28 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a16c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a16f:	29 c2                	sub    %eax,%edx
f011a171:	89 d0                	mov    %edx,%eax
f011a173:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a178:	74 17                	je     f011a191 <test_kmalloc_bestfit1+0x5cf>
f011a17a:	83 ec 04             	sub    $0x4,%esp
f011a17d:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a182:	68 ba 01 00 00       	push   $0x1ba
f011a187:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a18c:	e8 6a 60 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a191:	e8 bb 28 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a196:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a199:	e8 9e 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a19e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a1a1:	83 ec 0c             	sub    $0xc,%esp
f011a1a4:	68 00 fc 0f 00       	push   $0xffc00
f011a1a9:	e8 65 d6 fe ff       	call   f0107813 <kmalloc>
f011a1ae:	83 c4 10             	add    $0x10,%esp
f011a1b1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a1b7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a1bd:	89 c1                	mov    %eax,%ecx
f011a1bf:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a1c6:	10 00 00 
f011a1c9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a1cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1d4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a1da:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a1e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1e5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a1eb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a1f1:	29 d0                	sub    %edx,%eax
f011a1f3:	89 c3                	mov    %eax,%ebx
f011a1f5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a1fc:	10 00 00 
f011a1ff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a204:	0f b6 d0             	movzbl %al,%edx
f011a207:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a20d:	01 d0                	add    %edx,%eax
f011a20f:	48                   	dec    %eax
f011a210:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a216:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a21c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a221:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a227:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a22d:	29 d0                	sub    %edx,%eax
f011a22f:	01 c3                	add    %eax,%ebx
f011a231:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a238:	10 00 00 
f011a23b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a240:	0f b6 c0             	movzbl %al,%eax
f011a243:	c1 e0 04             	shl    $0x4,%eax
f011a246:	89 c2                	mov    %eax,%edx
f011a248:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a24e:	01 d0                	add    %edx,%eax
f011a250:	48                   	dec    %eax
f011a251:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a257:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a25d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a262:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a268:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a26e:	29 d0                	sub    %edx,%eax
f011a270:	01 d8                	add    %ebx,%eax
f011a272:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a277:	39 c1                	cmp    %eax,%ecx
f011a279:	74 17                	je     f011a292 <test_kmalloc_bestfit1+0x6d0>
f011a27b:	83 ec 04             	sub    $0x4,%esp
f011a27e:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a283:	68 c0 01 00 00       	push   $0x1c0
f011a288:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a28d:	e8 69 5f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a292:	e8 a5 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a297:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a29a:	74 17                	je     f011a2b3 <test_kmalloc_bestfit1+0x6f1>
f011a29c:	83 ec 04             	sub    $0x4,%esp
f011a29f:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a2a4:	68 c1 01 00 00       	push   $0x1c1
f011a2a9:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a2ae:	e8 48 5f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a2b3:	e8 99 27 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a2b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a2bb:	29 c2                	sub    %eax,%edx
f011a2bd:	89 d0                	mov    %edx,%eax
f011a2bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a2c4:	74 17                	je     f011a2dd <test_kmalloc_bestfit1+0x71b>
f011a2c6:	83 ec 04             	sub    $0x4,%esp
f011a2c9:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a2ce:	68 c2 01 00 00       	push   $0x1c2
f011a2d3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a2d8:	e8 1e 5f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a2dd:	e8 6f 27 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a2e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2e5:	e8 52 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a2ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a2ed:	83 ec 0c             	sub    $0xc,%esp
f011a2f0:	68 00 fc 0f 00       	push   $0xffc00
f011a2f5:	e8 19 d5 fe ff       	call   f0107813 <kmalloc>
f011a2fa:	83 c4 10             	add    $0x10,%esp
f011a2fd:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a303:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a309:	89 c1                	mov    %eax,%ecx
f011a30b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a312:	10 00 00 
f011a315:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a31b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a320:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a326:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a331:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a337:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a33d:	29 d0                	sub    %edx,%eax
f011a33f:	89 c3                	mov    %eax,%ebx
f011a341:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a348:	10 00 00 
f011a34b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a350:	0f b6 d0             	movzbl %al,%edx
f011a353:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a359:	01 d0                	add    %edx,%eax
f011a35b:	48                   	dec    %eax
f011a35c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a362:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a368:	ba 00 00 00 00       	mov    $0x0,%edx
f011a36d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a373:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a379:	29 d0                	sub    %edx,%eax
f011a37b:	01 c3                	add    %eax,%ebx
f011a37d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a384:	10 00 00 
f011a387:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a38c:	0f b6 c0             	movzbl %al,%eax
f011a38f:	c1 e0 04             	shl    $0x4,%eax
f011a392:	89 c2                	mov    %eax,%edx
f011a394:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a39a:	01 d0                	add    %edx,%eax
f011a39c:	48                   	dec    %eax
f011a39d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a3a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a3a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3ae:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a3b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a3ba:	29 d0                	sub    %edx,%eax
f011a3bc:	01 d8                	add    %ebx,%eax
f011a3be:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a3c3:	39 c1                	cmp    %eax,%ecx
f011a3c5:	74 17                	je     f011a3de <test_kmalloc_bestfit1+0x81c>
f011a3c7:	83 ec 04             	sub    $0x4,%esp
f011a3ca:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a3cf:	68 c8 01 00 00       	push   $0x1c8
f011a3d4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a3d9:	e8 1d 5e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3de:	e8 59 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a3e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3e6:	74 17                	je     f011a3ff <test_kmalloc_bestfit1+0x83d>
f011a3e8:	83 ec 04             	sub    $0x4,%esp
f011a3eb:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a3f0:	68 c9 01 00 00       	push   $0x1c9
f011a3f5:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a3fa:	e8 fc 5d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a3ff:	e8 4d 26 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a404:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a407:	29 c2                	sub    %eax,%edx
f011a409:	89 d0                	mov    %edx,%eax
f011a40b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a410:	74 17                	je     f011a429 <test_kmalloc_bestfit1+0x867>
f011a412:	83 ec 04             	sub    $0x4,%esp
f011a415:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a41a:	68 ca 01 00 00       	push   $0x1ca
f011a41f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a424:	e8 d2 5d fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a429:	e8 23 26 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a42e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a431:	e8 06 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a436:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a439:	83 ec 0c             	sub    $0xc,%esp
f011a43c:	68 00 fc 0f 00       	push   $0xffc00
f011a441:	e8 cd d3 fe ff       	call   f0107813 <kmalloc>
f011a446:	83 c4 10             	add    $0x10,%esp
f011a449:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a44f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a455:	89 c1                	mov    %eax,%ecx
f011a457:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a45e:	10 00 00 
f011a461:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a467:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a46c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a472:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a478:	ba 00 00 00 00       	mov    $0x0,%edx
f011a47d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a483:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a489:	29 d0                	sub    %edx,%eax
f011a48b:	89 c3                	mov    %eax,%ebx
f011a48d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a494:	10 00 00 
f011a497:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a49c:	0f b6 d0             	movzbl %al,%edx
f011a49f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a4a5:	01 d0                	add    %edx,%eax
f011a4a7:	48                   	dec    %eax
f011a4a8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a4ae:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a4b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a4bf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a4c5:	29 d0                	sub    %edx,%eax
f011a4c7:	01 c3                	add    %eax,%ebx
f011a4c9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a4d0:	10 00 00 
f011a4d3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a4d8:	0f b6 c0             	movzbl %al,%eax
f011a4db:	c1 e0 04             	shl    $0x4,%eax
f011a4de:	89 c2                	mov    %eax,%edx
f011a4e0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a4e6:	01 d0                	add    %edx,%eax
f011a4e8:	48                   	dec    %eax
f011a4e9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a4ef:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a4f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4fa:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a500:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a506:	29 d0                	sub    %edx,%eax
f011a508:	01 d8                	add    %ebx,%eax
f011a50a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a50f:	39 c1                	cmp    %eax,%ecx
f011a511:	74 17                	je     f011a52a <test_kmalloc_bestfit1+0x968>
f011a513:	83 ec 04             	sub    $0x4,%esp
f011a516:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a51b:	68 d0 01 00 00       	push   $0x1d0
f011a520:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a525:	e8 d1 5c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a52a:	e8 0d 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a52f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a532:	74 17                	je     f011a54b <test_kmalloc_bestfit1+0x989>
f011a534:	83 ec 04             	sub    $0x4,%esp
f011a537:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a53c:	68 d1 01 00 00       	push   $0x1d1
f011a541:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a546:	e8 b0 5c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a54b:	e8 01 25 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a550:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a553:	29 c2                	sub    %eax,%edx
f011a555:	89 d0                	mov    %edx,%eax
f011a557:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a55c:	74 17                	je     f011a575 <test_kmalloc_bestfit1+0x9b3>
f011a55e:	83 ec 04             	sub    $0x4,%esp
f011a561:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a566:	68 d2 01 00 00       	push   $0x1d2
f011a56b:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a570:	e8 86 5c fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a575:	e8 d7 24 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a57a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a57d:	e8 ba 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a582:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a585:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a58b:	83 ec 0c             	sub    $0xc,%esp
f011a58e:	50                   	push   %eax
f011a58f:	e8 4a d3 fe ff       	call   f01078de <kfree>
f011a594:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a597:	e8 a0 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a59c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a59f:	74 17                	je     f011a5b8 <test_kmalloc_bestfit1+0x9f6>
f011a5a1:	83 ec 04             	sub    $0x4,%esp
f011a5a4:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a5a9:	68 db 01 00 00       	push   $0x1db
f011a5ae:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a5b3:	e8 43 5c fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a5b8:	e8 94 24 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a5bd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a5c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a5c5:	74 17                	je     f011a5de <test_kmalloc_bestfit1+0xa1c>
f011a5c7:	83 ec 04             	sub    $0x4,%esp
f011a5ca:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011a5cf:	68 dc 01 00 00       	push   $0x1dc
f011a5d4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a5d9:	e8 1d 5c fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a5de:	e8 6e 24 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a5e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a5e6:	e8 51 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a5eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a5ee:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a5f4:	83 ec 0c             	sub    $0xc,%esp
f011a5f7:	50                   	push   %eax
f011a5f8:	e8 e1 d2 fe ff       	call   f01078de <kfree>
f011a5fd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a600:	e8 37 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a605:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a608:	74 17                	je     f011a621 <test_kmalloc_bestfit1+0xa5f>
f011a60a:	83 ec 04             	sub    $0x4,%esp
f011a60d:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a612:	68 e2 01 00 00       	push   $0x1e2
f011a617:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a61c:	e8 da 5b fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a621:	e8 2b 24 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a626:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a629:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a62e:	74 17                	je     f011a647 <test_kmalloc_bestfit1+0xa85>
f011a630:	83 ec 04             	sub    $0x4,%esp
f011a633:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011a638:	68 e3 01 00 00       	push   $0x1e3
f011a63d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a642:	e8 b4 5b fe ff       	call   f01001fb <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a647:	e8 05 24 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a64c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a64f:	e8 e8 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a654:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a657:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a65d:	83 ec 0c             	sub    $0xc,%esp
f011a660:	50                   	push   %eax
f011a661:	e8 78 d2 fe ff       	call   f01078de <kfree>
f011a666:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a669:	e8 ce 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a66e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a671:	74 17                	je     f011a68a <test_kmalloc_bestfit1+0xac8>
f011a673:	83 ec 04             	sub    $0x4,%esp
f011a676:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a67b:	68 e9 01 00 00       	push   $0x1e9
f011a680:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a685:	e8 71 5b fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a68a:	e8 c2 23 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a68f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a692:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a697:	74 17                	je     f011a6b0 <test_kmalloc_bestfit1+0xaee>
f011a699:	83 ec 04             	sub    $0x4,%esp
f011a69c:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011a6a1:	68 ea 01 00 00       	push   $0x1ea
f011a6a6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a6ab:	e8 4b 5b fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a6b0:	e8 9c 23 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a6b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6b8:	e8 7f 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a6bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a6c0:	83 ec 0c             	sub    $0xc,%esp
f011a6c3:	68 00 00 08 00       	push   $0x80000
f011a6c8:	e8 46 d1 fe ff       	call   f0107813 <kmalloc>
f011a6cd:	83 c4 10             	add    $0x10,%esp
f011a6d0:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a6d6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a6dc:	89 c1                	mov    %eax,%ecx
f011a6de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a6e5:	10 00 00 
f011a6e8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a6ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a6f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a6ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011a704:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a70a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a710:	29 d0                	sub    %edx,%eax
f011a712:	89 c3                	mov    %eax,%ebx
f011a714:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a71b:	10 00 00 
f011a71e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a723:	0f b6 d0             	movzbl %al,%edx
f011a726:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a72c:	01 d0                	add    %edx,%eax
f011a72e:	48                   	dec    %eax
f011a72f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a735:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a73b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a740:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a746:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a74c:	29 d0                	sub    %edx,%eax
f011a74e:	01 c3                	add    %eax,%ebx
f011a750:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a757:	10 00 00 
f011a75a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a75f:	0f b6 c0             	movzbl %al,%eax
f011a762:	c1 e0 04             	shl    $0x4,%eax
f011a765:	89 c2                	mov    %eax,%edx
f011a767:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a76d:	01 d0                	add    %edx,%eax
f011a76f:	48                   	dec    %eax
f011a770:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a776:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a77c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a781:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a787:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a78d:	29 d0                	sub    %edx,%eax
f011a78f:	01 d8                	add    %ebx,%eax
f011a791:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a796:	39 c1                	cmp    %eax,%ecx
f011a798:	74 17                	je     f011a7b1 <test_kmalloc_bestfit1+0xbef>
f011a79a:	83 ec 04             	sub    $0x4,%esp
f011a79d:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a7a2:	68 f3 01 00 00       	push   $0x1f3
f011a7a7:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a7ac:	e8 4a 5a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7b1:	e8 86 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a7b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7b9:	74 17                	je     f011a7d2 <test_kmalloc_bestfit1+0xc10>
f011a7bb:	83 ec 04             	sub    $0x4,%esp
f011a7be:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a7c3:	68 f4 01 00 00       	push   $0x1f4
f011a7c8:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a7cd:	e8 29 5a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a7d2:	e8 7a 22 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a7d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7da:	29 c2                	sub    %eax,%edx
f011a7dc:	89 d0                	mov    %edx,%eax
f011a7de:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a7e3:	74 17                	je     f011a7fc <test_kmalloc_bestfit1+0xc3a>
f011a7e5:	83 ec 04             	sub    $0x4,%esp
f011a7e8:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a7ed:	68 f5 01 00 00       	push   $0x1f5
f011a7f2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a7f7:	e8 ff 59 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a7fc:	e8 50 22 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a801:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a804:	e8 33 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a809:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a80c:	83 ec 0c             	sub    $0xc,%esp
f011a80f:	68 00 fc 0f 00       	push   $0xffc00
f011a814:	e8 fa cf fe ff       	call   f0107813 <kmalloc>
f011a819:	83 c4 10             	add    $0x10,%esp
f011a81c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a822:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a828:	89 c1                	mov    %eax,%ecx
f011a82a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a831:	10 00 00 
f011a834:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a83a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a83f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a845:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a84b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a850:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a856:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a85c:	29 d0                	sub    %edx,%eax
f011a85e:	89 c3                	mov    %eax,%ebx
f011a860:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a867:	10 00 00 
f011a86a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a86f:	0f b6 d0             	movzbl %al,%edx
f011a872:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a878:	01 d0                	add    %edx,%eax
f011a87a:	48                   	dec    %eax
f011a87b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a881:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a887:	ba 00 00 00 00       	mov    $0x0,%edx
f011a88c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a892:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a898:	29 d0                	sub    %edx,%eax
f011a89a:	01 c3                	add    %eax,%ebx
f011a89c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a8a3:	10 00 00 
f011a8a6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a8ab:	0f b6 c0             	movzbl %al,%eax
f011a8ae:	c1 e0 04             	shl    $0x4,%eax
f011a8b1:	89 c2                	mov    %eax,%edx
f011a8b3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a8b9:	01 d0                	add    %edx,%eax
f011a8bb:	48                   	dec    %eax
f011a8bc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a8c2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8cd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a8d3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a8d9:	29 d0                	sub    %edx,%eax
f011a8db:	01 d8                	add    %ebx,%eax
f011a8dd:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a8e2:	39 c1                	cmp    %eax,%ecx
f011a8e4:	74 17                	je     f011a8fd <test_kmalloc_bestfit1+0xd3b>
f011a8e6:	83 ec 04             	sub    $0x4,%esp
f011a8e9:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011a8ee:	68 fb 01 00 00       	push   $0x1fb
f011a8f3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a8f8:	e8 fe 58 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8fd:	e8 3a 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a902:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a905:	74 17                	je     f011a91e <test_kmalloc_bestfit1+0xd5c>
f011a907:	83 ec 04             	sub    $0x4,%esp
f011a90a:	68 b4 ad 13 f0       	push   $0xf013adb4
f011a90f:	68 fc 01 00 00       	push   $0x1fc
f011a914:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a919:	e8 dd 58 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a91e:	e8 2e 21 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a923:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a926:	29 c2                	sub    %eax,%edx
f011a928:	89 d0                	mov    %edx,%eax
f011a92a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a92f:	74 17                	je     f011a948 <test_kmalloc_bestfit1+0xd86>
f011a931:	83 ec 04             	sub    $0x4,%esp
f011a934:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011a939:	68 fd 01 00 00       	push   $0x1fd
f011a93e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011a943:	e8 b3 58 fe ff       	call   f01001fb <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a948:	e8 04 21 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011a94d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a950:	e8 e7 93 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a955:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a958:	83 ec 0c             	sub    $0xc,%esp
f011a95b:	68 00 fc 03 00       	push   $0x3fc00
f011a960:	e8 ae ce fe ff       	call   f0107813 <kmalloc>
f011a965:	83 c4 10             	add    $0x10,%esp
f011a968:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a96e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a974:	89 c1                	mov    %eax,%ecx
f011a976:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a97d:	10 00 00 
f011a980:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a986:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a98b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a991:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a997:	ba 00 00 00 00       	mov    $0x0,%edx
f011a99c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a9a2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a9a8:	29 d0                	sub    %edx,%eax
f011a9aa:	89 c3                	mov    %eax,%ebx
f011a9ac:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a9b3:	10 00 00 
f011a9b6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a9bb:	0f b6 d0             	movzbl %al,%edx
f011a9be:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a9c4:	01 d0                	add    %edx,%eax
f011a9c6:	48                   	dec    %eax
f011a9c7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a9cd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a9d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9d8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a9de:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a9e4:	29 d0                	sub    %edx,%eax
f011a9e6:	01 c3                	add    %eax,%ebx
f011a9e8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a9ef:	10 00 00 
f011a9f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a9f7:	0f b6 c0             	movzbl %al,%eax
f011a9fa:	c1 e0 04             	shl    $0x4,%eax
f011a9fd:	89 c2                	mov    %eax,%edx
f011a9ff:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011aa05:	01 d0                	add    %edx,%eax
f011aa07:	48                   	dec    %eax
f011aa08:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011aa0e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011aa14:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa19:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011aa1f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011aa25:	29 d0                	sub    %edx,%eax
f011aa27:	01 d8                	add    %ebx,%eax
f011aa29:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011aa2e:	39 c1                	cmp    %eax,%ecx
f011aa30:	74 17                	je     f011aa49 <test_kmalloc_bestfit1+0xe87>
f011aa32:	83 ec 04             	sub    $0x4,%esp
f011aa35:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011aa3a:	68 03 02 00 00       	push   $0x203
f011aa3f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011aa44:	e8 b2 57 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa49:	e8 ee 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa4e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa51:	74 17                	je     f011aa6a <test_kmalloc_bestfit1+0xea8>
f011aa53:	83 ec 04             	sub    $0x4,%esp
f011aa56:	68 b4 ad 13 f0       	push   $0xf013adb4
f011aa5b:	68 04 02 00 00       	push   $0x204
f011aa60:	68 9a ad 13 f0       	push   $0xf013ad9a
f011aa65:	e8 91 57 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011aa6a:	e8 e2 1f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011aa6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa72:	29 c2                	sub    %eax,%edx
f011aa74:	89 d0                	mov    %edx,%eax
f011aa76:	83 f8 40             	cmp    $0x40,%eax
f011aa79:	74 17                	je     f011aa92 <test_kmalloc_bestfit1+0xed0>
f011aa7b:	83 ec 04             	sub    $0x4,%esp
f011aa7e:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011aa83:	68 05 02 00 00       	push   $0x205
f011aa88:	68 9a ad 13 f0       	push   $0xf013ad9a
f011aa8d:	e8 69 57 fe ff       	call   f01001fb <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011aa92:	e8 ba 1f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011aa97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa9a:	e8 9d 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011aaa2:	83 ec 0c             	sub    $0xc,%esp
f011aaa5:	68 00 fc 3f 00       	push   $0x3ffc00
f011aaaa:	e8 64 cd fe ff       	call   f0107813 <kmalloc>
f011aaaf:	83 c4 10             	add    $0x10,%esp
f011aab2:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011aab8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011aabe:	89 c1                	mov    %eax,%ecx
f011aac0:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011aac7:	10 00 00 
f011aaca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011aad0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aad5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011aadb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011aae1:	ba 00 00 00 00       	mov    $0x0,%edx
f011aae6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011aaec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011aaf2:	29 d0                	sub    %edx,%eax
f011aaf4:	89 c3                	mov    %eax,%ebx
f011aaf6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011aafd:	10 00 00 
f011ab00:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ab05:	0f b6 d0             	movzbl %al,%edx
f011ab08:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ab0e:	01 d0                	add    %edx,%eax
f011ab10:	48                   	dec    %eax
f011ab11:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ab17:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ab1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab22:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ab28:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ab2e:	29 d0                	sub    %edx,%eax
f011ab30:	01 c3                	add    %eax,%ebx
f011ab32:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ab39:	10 00 00 
f011ab3c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ab41:	0f b6 c0             	movzbl %al,%eax
f011ab44:	c1 e0 04             	shl    $0x4,%eax
f011ab47:	89 c2                	mov    %eax,%edx
f011ab49:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ab4f:	01 d0                	add    %edx,%eax
f011ab51:	48                   	dec    %eax
f011ab52:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011ab58:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ab5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab63:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011ab69:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ab6f:	29 d0                	sub    %edx,%eax
f011ab71:	01 d8                	add    %ebx,%eax
f011ab73:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011ab78:	39 c1                	cmp    %eax,%ecx
f011ab7a:	74 17                	je     f011ab93 <test_kmalloc_bestfit1+0xfd1>
f011ab7c:	83 ec 04             	sub    $0x4,%esp
f011ab7f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011ab84:	68 0b 02 00 00       	push   $0x20b
f011ab89:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ab8e:	e8 68 56 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab93:	e8 a4 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab98:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab9b:	74 17                	je     f011abb4 <test_kmalloc_bestfit1+0xff2>
f011ab9d:	83 ec 04             	sub    $0x4,%esp
f011aba0:	68 b4 ad 13 f0       	push   $0xf013adb4
f011aba5:	68 0c 02 00 00       	push   $0x20c
f011abaa:	68 9a ad 13 f0       	push   $0xf013ad9a
f011abaf:	e8 47 56 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011abb4:	e8 98 1e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011abb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abbc:	29 c2                	sub    %eax,%edx
f011abbe:	89 d0                	mov    %edx,%eax
f011abc0:	3d 00 04 00 00       	cmp    $0x400,%eax
f011abc5:	74 17                	je     f011abde <test_kmalloc_bestfit1+0x101c>
f011abc7:	83 ec 04             	sub    $0x4,%esp
f011abca:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011abcf:	68 0d 02 00 00       	push   $0x20d
f011abd4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011abd9:	e8 1d 56 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011abde:	e8 6e 1e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011abe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abe6:	e8 51 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011abeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011abee:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011abf4:	83 ec 0c             	sub    $0xc,%esp
f011abf7:	50                   	push   %eax
f011abf8:	e8 e1 cc fe ff       	call   f01078de <kfree>
f011abfd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac00:	e8 37 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ac05:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac08:	74 17                	je     f011ac21 <test_kmalloc_bestfit1+0x105f>
f011ac0a:	83 ec 04             	sub    $0x4,%esp
f011ac0d:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ac12:	68 16 02 00 00       	push   $0x216
f011ac17:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ac1c:	e8 da 55 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ac21:	e8 2b 1e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011ac26:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ac29:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac2e:	74 17                	je     f011ac47 <test_kmalloc_bestfit1+0x1085>
f011ac30:	83 ec 04             	sub    $0x4,%esp
f011ac33:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011ac38:	68 17 02 00 00       	push   $0x217
f011ac3d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ac42:	e8 b4 55 fe ff       	call   f01001fb <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011ac47:	e8 05 1e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011ac4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac4f:	e8 e8 90 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ac54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011ac57:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ac5d:	83 ec 0c             	sub    $0xc,%esp
f011ac60:	50                   	push   %eax
f011ac61:	e8 78 cc fe ff       	call   f01078de <kfree>
f011ac66:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac69:	e8 ce 90 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ac6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac71:	74 17                	je     f011ac8a <test_kmalloc_bestfit1+0x10c8>
f011ac73:	83 ec 04             	sub    $0x4,%esp
f011ac76:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ac7b:	68 1d 02 00 00       	push   $0x21d
f011ac80:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ac85:	e8 71 55 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011ac8a:	e8 c2 1d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011ac8f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ac92:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ac97:	74 17                	je     f011acb0 <test_kmalloc_bestfit1+0x10ee>
f011ac99:	83 ec 04             	sub    $0x4,%esp
f011ac9c:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011aca1:	68 1e 02 00 00       	push   $0x21e
f011aca6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011acab:	e8 4b 55 fe ff       	call   f01001fb <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011acb0:	e8 9c 1d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011acb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acb8:	e8 7f 90 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011acbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011acc0:	83 ec 0c             	sub    $0xc,%esp
f011acc3:	68 00 fc 1f 00       	push   $0x1ffc00
f011acc8:	e8 46 cb fe ff       	call   f0107813 <kmalloc>
f011accd:	83 c4 10             	add    $0x10,%esp
f011acd0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011acd6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011acdc:	89 c1                	mov    %eax,%ecx
f011acde:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ace5:	10 00 00 
f011ace8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011acee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acf3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011acf9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011acff:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad04:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ad0a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ad10:	29 d0                	sub    %edx,%eax
f011ad12:	89 c3                	mov    %eax,%ebx
f011ad14:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ad1b:	10 00 00 
f011ad1e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad23:	0f b6 d0             	movzbl %al,%edx
f011ad26:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ad2c:	01 d0                	add    %edx,%eax
f011ad2e:	48                   	dec    %eax
f011ad2f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ad35:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ad3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad40:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ad46:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ad4c:	29 d0                	sub    %edx,%eax
f011ad4e:	01 c3                	add    %eax,%ebx
f011ad50:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011ad57:	10 00 00 
f011ad5a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad5f:	0f b6 c0             	movzbl %al,%eax
f011ad62:	c1 e0 04             	shl    $0x4,%eax
f011ad65:	89 c2                	mov    %eax,%edx
f011ad67:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ad6d:	01 d0                	add    %edx,%eax
f011ad6f:	48                   	dec    %eax
f011ad70:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011ad76:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ad7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad81:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ad87:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ad8d:	29 d0                	sub    %edx,%eax
f011ad8f:	01 d8                	add    %ebx,%eax
f011ad91:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ad96:	39 c1                	cmp    %eax,%ecx
f011ad98:	74 17                	je     f011adb1 <test_kmalloc_bestfit1+0x11ef>
f011ad9a:	83 ec 04             	sub    $0x4,%esp
f011ad9d:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011ada2:	68 27 02 00 00       	push   $0x227
f011ada7:	68 9a ad 13 f0       	push   $0xf013ad9a
f011adac:	e8 4a 54 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adb1:	e8 86 8f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011adb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adb9:	74 17                	je     f011add2 <test_kmalloc_bestfit1+0x1210>
f011adbb:	83 ec 04             	sub    $0x4,%esp
f011adbe:	68 b4 ad 13 f0       	push   $0xf013adb4
f011adc3:	68 28 02 00 00       	push   $0x228
f011adc8:	68 9a ad 13 f0       	push   $0xf013ad9a
f011adcd:	e8 29 54 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011add2:	e8 7a 1c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011add7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adda:	29 c2                	sub    %eax,%edx
f011addc:	89 d0                	mov    %edx,%eax
f011adde:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ade3:	74 17                	je     f011adfc <test_kmalloc_bestfit1+0x123a>
f011ade5:	83 ec 04             	sub    $0x4,%esp
f011ade8:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011aded:	68 29 02 00 00       	push   $0x229
f011adf2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011adf7:	e8 ff 53 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011adfc:	83 ec 0c             	sub    $0xc,%esp
f011adff:	68 04 b2 13 f0       	push   $0xf013b204
f011ae04:	e8 79 5e fe ff       	call   f0100c82 <cprintf>
f011ae09:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ae0c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ae11:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ae14:	5b                   	pop    %ebx
f011ae15:	5f                   	pop    %edi
f011ae16:	5d                   	pop    %ebp
f011ae17:	c3                   	ret    

f011ae18 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ae18:	55                   	push   %ebp
f011ae19:	89 e5                	mov    %esp,%ebp
f011ae1b:	57                   	push   %edi
f011ae1c:	53                   	push   %ebx
f011ae1d:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ae23:	83 ec 0c             	sub    $0xc,%esp
f011ae26:	68 dc ac 13 f0       	push   $0xf013acdc
f011ae2b:	e8 52 5e fe ff       	call   f0100c82 <cprintf>
f011ae30:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ae33:	83 ec 0c             	sub    $0xc,%esp
f011ae36:	68 0c ad 13 f0       	push   $0xf013ad0c
f011ae3b:	e8 42 5e fe ff       	call   f0100c82 <cprintf>
f011ae40:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ae43:	83 ec 0c             	sub    $0xc,%esp
f011ae46:	68 dc ac 13 f0       	push   $0xf013acdc
f011ae4b:	e8 32 5e fe ff       	call   f0100c82 <cprintf>
f011ae50:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ae53:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ae59:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ae5e:	b8 00 00 00 00       	mov    $0x0,%eax
f011ae63:	89 d7                	mov    %edx,%edi
f011ae65:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011ae67:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ae6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ae71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae76:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ae79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ae7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae81:	f7 75 f4             	divl   -0xc(%ebp)
f011ae84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ae87:	29 d0                	sub    %edx,%eax
f011ae89:	89 c1                	mov    %eax,%ecx
f011ae8b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ae92:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ae97:	0f b6 d0             	movzbl %al,%edx
f011ae9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ae9d:	01 d0                	add    %edx,%eax
f011ae9f:	48                   	dec    %eax
f011aea0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011aea3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aea6:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeab:	f7 75 ec             	divl   -0x14(%ebp)
f011aeae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aeb1:	29 d0                	sub    %edx,%eax
f011aeb3:	01 c1                	add    %eax,%ecx
f011aeb5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011aebc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011aec1:	0f b6 c0             	movzbl %al,%eax
f011aec4:	c1 e0 04             	shl    $0x4,%eax
f011aec7:	89 c2                	mov    %eax,%edx
f011aec9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011aecc:	01 d0                	add    %edx,%eax
f011aece:	48                   	dec    %eax
f011aecf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011aed2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aed5:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeda:	f7 75 e4             	divl   -0x1c(%ebp)
f011aedd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aee0:	29 d0                	sub    %edx,%eax
f011aee2:	01 c8                	add    %ecx,%eax
f011aee4:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011aee9:	29 c2                	sub    %eax,%edx
f011aeeb:	89 d0                	mov    %edx,%eax
f011aeed:	83 ec 0c             	sub    $0xc,%esp
f011aef0:	50                   	push   %eax
f011aef1:	e8 1d c9 fe ff       	call   f0107813 <kmalloc>
f011aef6:	83 c4 10             	add    $0x10,%esp
f011aef9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011aeff:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011af05:	85 c0                	test   %eax,%eax
f011af07:	74 17                	je     f011af20 <test_kmalloc_bestfit2+0x108>
f011af09:	83 ec 04             	sub    $0x4,%esp
f011af0c:	68 4c b2 13 f0       	push   $0xf013b24c
f011af11:	68 3f 02 00 00       	push   $0x23f
f011af16:	68 9a ad 13 f0       	push   $0xf013ad9a
f011af1b:	e8 db 52 fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011af20:	e8 2c 1b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011af25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af28:	e8 0f 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011af2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011af30:	83 ec 0c             	sub    $0xc,%esp
f011af33:	68 00 fc 1f 00       	push   $0x1ffc00
f011af38:	e8 d6 c8 fe ff       	call   f0107813 <kmalloc>
f011af3d:	83 c4 10             	add    $0x10,%esp
f011af40:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011af46:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011af4c:	89 c1                	mov    %eax,%ecx
f011af4e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011af55:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011af58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011af60:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011af63:	ba 00 00 00 00       	mov    $0x0,%edx
f011af68:	f7 75 d4             	divl   -0x2c(%ebp)
f011af6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011af6e:	29 d0                	sub    %edx,%eax
f011af70:	89 c3                	mov    %eax,%ebx
f011af72:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011af79:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af7e:	0f b6 d0             	movzbl %al,%edx
f011af81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011af84:	01 d0                	add    %edx,%eax
f011af86:	48                   	dec    %eax
f011af87:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011af8a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011af8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011af92:	f7 75 cc             	divl   -0x34(%ebp)
f011af95:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011af98:	29 d0                	sub    %edx,%eax
f011af9a:	01 c3                	add    %eax,%ebx
f011af9c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011afa3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011afa8:	0f b6 c0             	movzbl %al,%eax
f011afab:	c1 e0 04             	shl    $0x4,%eax
f011afae:	89 c2                	mov    %eax,%edx
f011afb0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011afb3:	01 d0                	add    %edx,%eax
f011afb5:	48                   	dec    %eax
f011afb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011afb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011afbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011afc1:	f7 75 c4             	divl   -0x3c(%ebp)
f011afc4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011afc7:	29 d0                	sub    %edx,%eax
f011afc9:	01 d8                	add    %ebx,%eax
f011afcb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011afd0:	39 c1                	cmp    %eax,%ecx
f011afd2:	74 17                	je     f011afeb <test_kmalloc_bestfit2+0x1d3>
f011afd4:	83 ec 04             	sub    $0x4,%esp
f011afd7:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011afdc:	68 49 02 00 00       	push   $0x249
f011afe1:	68 9a ad 13 f0       	push   $0xf013ad9a
f011afe6:	e8 10 52 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afeb:	e8 4c 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aff0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aff3:	74 17                	je     f011b00c <test_kmalloc_bestfit2+0x1f4>
f011aff5:	83 ec 04             	sub    $0x4,%esp
f011aff8:	68 b4 ad 13 f0       	push   $0xf013adb4
f011affd:	68 4a 02 00 00       	push   $0x24a
f011b002:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b007:	e8 ef 51 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b00c:	e8 40 1a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b011:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b014:	29 c2                	sub    %eax,%edx
f011b016:	89 d0                	mov    %edx,%eax
f011b018:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b01d:	74 17                	je     f011b036 <test_kmalloc_bestfit2+0x21e>
f011b01f:	83 ec 04             	sub    $0x4,%esp
f011b022:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b027:	68 4b 02 00 00       	push   $0x24b
f011b02c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b031:	e8 c5 51 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b036:	e8 16 1a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b03b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b03e:	e8 f9 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b043:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b046:	83 ec 0c             	sub    $0xc,%esp
f011b049:	68 00 fc 1f 00       	push   $0x1ffc00
f011b04e:	e8 c0 c7 fe ff       	call   f0107813 <kmalloc>
f011b053:	83 c4 10             	add    $0x10,%esp
f011b056:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b05c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b062:	89 c1                	mov    %eax,%ecx
f011b064:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b06b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b06e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b073:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b076:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b079:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07e:	f7 75 bc             	divl   -0x44(%ebp)
f011b081:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b084:	29 d0                	sub    %edx,%eax
f011b086:	89 c3                	mov    %eax,%ebx
f011b088:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b08f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b094:	0f b6 d0             	movzbl %al,%edx
f011b097:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b09a:	01 d0                	add    %edx,%eax
f011b09c:	48                   	dec    %eax
f011b09d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b0a0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b0a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0a8:	f7 75 b4             	divl   -0x4c(%ebp)
f011b0ab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b0ae:	29 d0                	sub    %edx,%eax
f011b0b0:	01 c3                	add    %eax,%ebx
f011b0b2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b0b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b0be:	0f b6 c0             	movzbl %al,%eax
f011b0c1:	c1 e0 04             	shl    $0x4,%eax
f011b0c4:	89 c2                	mov    %eax,%edx
f011b0c6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b0c9:	01 d0                	add    %edx,%eax
f011b0cb:	48                   	dec    %eax
f011b0cc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b0cf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b0d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0d7:	f7 75 ac             	divl   -0x54(%ebp)
f011b0da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b0dd:	29 d0                	sub    %edx,%eax
f011b0df:	01 d8                	add    %ebx,%eax
f011b0e1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b0e6:	39 c1                	cmp    %eax,%ecx
f011b0e8:	74 17                	je     f011b101 <test_kmalloc_bestfit2+0x2e9>
f011b0ea:	83 ec 04             	sub    $0x4,%esp
f011b0ed:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b0f2:	68 51 02 00 00       	push   $0x251
f011b0f7:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b0fc:	e8 fa 50 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b101:	e8 36 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b106:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b109:	74 17                	je     f011b122 <test_kmalloc_bestfit2+0x30a>
f011b10b:	83 ec 04             	sub    $0x4,%esp
f011b10e:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b113:	68 52 02 00 00       	push   $0x252
f011b118:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b11d:	e8 d9 50 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b122:	e8 2a 19 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b127:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b12a:	29 c2                	sub    %eax,%edx
f011b12c:	89 d0                	mov    %edx,%eax
f011b12e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b133:	74 17                	je     f011b14c <test_kmalloc_bestfit2+0x334>
f011b135:	83 ec 04             	sub    $0x4,%esp
f011b138:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b13d:	68 53 02 00 00       	push   $0x253
f011b142:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b147:	e8 af 50 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b14c:	e8 00 19 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b151:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b154:	e8 e3 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b159:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b15c:	83 ec 0c             	sub    $0xc,%esp
f011b15f:	68 00 08 00 00       	push   $0x800
f011b164:	e8 aa c6 fe ff       	call   f0107813 <kmalloc>
f011b169:	83 c4 10             	add    $0x10,%esp
f011b16c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b172:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b178:	89 c1                	mov    %eax,%ecx
f011b17a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b181:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b184:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b189:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b18c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b18f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b194:	f7 75 a4             	divl   -0x5c(%ebp)
f011b197:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b19a:	29 d0                	sub    %edx,%eax
f011b19c:	89 c3                	mov    %eax,%ebx
f011b19e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b1a5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b1aa:	0f b6 d0             	movzbl %al,%edx
f011b1ad:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b1b0:	01 d0                	add    %edx,%eax
f011b1b2:	48                   	dec    %eax
f011b1b3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b1b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b1b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1be:	f7 75 9c             	divl   -0x64(%ebp)
f011b1c1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b1c4:	29 d0                	sub    %edx,%eax
f011b1c6:	01 c3                	add    %eax,%ebx
f011b1c8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b1cf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b1d4:	0f b6 c0             	movzbl %al,%eax
f011b1d7:	c1 e0 04             	shl    $0x4,%eax
f011b1da:	89 c2                	mov    %eax,%edx
f011b1dc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b1df:	01 d0                	add    %edx,%eax
f011b1e1:	48                   	dec    %eax
f011b1e2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b1e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b1e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1ed:	f7 75 94             	divl   -0x6c(%ebp)
f011b1f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b1f3:	29 d0                	sub    %edx,%eax
f011b1f5:	01 d8                	add    %ebx,%eax
f011b1f7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b1fc:	39 c1                	cmp    %eax,%ecx
f011b1fe:	74 17                	je     f011b217 <test_kmalloc_bestfit2+0x3ff>
f011b200:	83 ec 04             	sub    $0x4,%esp
f011b203:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b208:	68 59 02 00 00       	push   $0x259
f011b20d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b212:	e8 e4 4f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b217:	e8 20 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b21c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b21f:	74 17                	je     f011b238 <test_kmalloc_bestfit2+0x420>
f011b221:	83 ec 04             	sub    $0x4,%esp
f011b224:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b229:	68 5a 02 00 00       	push   $0x25a
f011b22e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b233:	e8 c3 4f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b238:	e8 14 18 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b23d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b240:	29 c2                	sub    %eax,%edx
f011b242:	89 d0                	mov    %edx,%eax
f011b244:	83 f8 01             	cmp    $0x1,%eax
f011b247:	74 17                	je     f011b260 <test_kmalloc_bestfit2+0x448>
f011b249:	83 ec 04             	sub    $0x4,%esp
f011b24c:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b251:	68 5b 02 00 00       	push   $0x25b
f011b256:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b25b:	e8 9b 4f fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b260:	e8 ec 17 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b265:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b268:	e8 cf 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b26d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b270:	83 ec 0c             	sub    $0xc,%esp
f011b273:	68 00 08 00 00       	push   $0x800
f011b278:	e8 96 c5 fe ff       	call   f0107813 <kmalloc>
f011b27d:	83 c4 10             	add    $0x10,%esp
f011b280:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b286:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b28c:	89 c1                	mov    %eax,%ecx
f011b28e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b295:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b298:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b29d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b2a0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b2a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2a8:	f7 75 8c             	divl   -0x74(%ebp)
f011b2ab:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b2ae:	29 d0                	sub    %edx,%eax
f011b2b0:	89 c3                	mov    %eax,%ebx
f011b2b2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b2b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b2be:	0f b6 d0             	movzbl %al,%edx
f011b2c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b2c4:	01 d0                	add    %edx,%eax
f011b2c6:	48                   	dec    %eax
f011b2c7:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b2ca:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b2cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2d2:	f7 75 84             	divl   -0x7c(%ebp)
f011b2d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b2d8:	29 d0                	sub    %edx,%eax
f011b2da:	01 c3                	add    %eax,%ebx
f011b2dc:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b2e3:	10 00 00 
f011b2e6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b2eb:	0f b6 c0             	movzbl %al,%eax
f011b2ee:	c1 e0 04             	shl    $0x4,%eax
f011b2f1:	89 c2                	mov    %eax,%edx
f011b2f3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b2f9:	01 d0                	add    %edx,%eax
f011b2fb:	48                   	dec    %eax
f011b2fc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b302:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b308:	ba 00 00 00 00       	mov    $0x0,%edx
f011b30d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b313:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b319:	29 d0                	sub    %edx,%eax
f011b31b:	01 d8                	add    %ebx,%eax
f011b31d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b322:	39 c1                	cmp    %eax,%ecx
f011b324:	74 17                	je     f011b33d <test_kmalloc_bestfit2+0x525>
f011b326:	83 ec 04             	sub    $0x4,%esp
f011b329:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b32e:	68 61 02 00 00       	push   $0x261
f011b333:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b338:	e8 be 4e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b33d:	e8 fa 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b342:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b345:	74 17                	je     f011b35e <test_kmalloc_bestfit2+0x546>
f011b347:	83 ec 04             	sub    $0x4,%esp
f011b34a:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b34f:	68 62 02 00 00       	push   $0x262
f011b354:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b359:	e8 9d 4e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b35e:	e8 ee 16 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b363:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b366:	29 c2                	sub    %eax,%edx
f011b368:	89 d0                	mov    %edx,%eax
f011b36a:	83 f8 01             	cmp    $0x1,%eax
f011b36d:	74 17                	je     f011b386 <test_kmalloc_bestfit2+0x56e>
f011b36f:	83 ec 04             	sub    $0x4,%esp
f011b372:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b377:	68 63 02 00 00       	push   $0x263
f011b37c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b381:	e8 75 4e fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b386:	e8 c6 16 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b38b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b38e:	e8 a9 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b393:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b396:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b39c:	83 ec 0c             	sub    $0xc,%esp
f011b39f:	50                   	push   %eax
f011b3a0:	e8 39 c5 fe ff       	call   f01078de <kfree>
f011b3a5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3a8:	e8 8f 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b3b0:	74 17                	je     f011b3c9 <test_kmalloc_bestfit2+0x5b1>
f011b3b2:	83 ec 04             	sub    $0x4,%esp
f011b3b5:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b3ba:	68 69 02 00 00       	push   $0x269
f011b3bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b3c4:	e8 32 4e fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b3c9:	e8 83 16 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b3ce:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b3d1:	83 f8 01             	cmp    $0x1,%eax
f011b3d4:	74 17                	je     f011b3ed <test_kmalloc_bestfit2+0x5d5>
f011b3d6:	83 ec 04             	sub    $0x4,%esp
f011b3d9:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b3de:	68 6a 02 00 00       	push   $0x26a
f011b3e3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b3e8:	e8 0e 4e fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b3ed:	e8 5f 16 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b3f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3f5:	e8 42 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b3fd:	83 ec 0c             	sub    $0xc,%esp
f011b400:	68 00 1c 00 00       	push   $0x1c00
f011b405:	e8 09 c4 fe ff       	call   f0107813 <kmalloc>
f011b40a:	83 c4 10             	add    $0x10,%esp
f011b40d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b413:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b419:	89 c1                	mov    %eax,%ecx
f011b41b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b422:	10 00 00 
f011b425:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b42b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b430:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b436:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b43c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b441:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b447:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b44d:	29 d0                	sub    %edx,%eax
f011b44f:	89 c3                	mov    %eax,%ebx
f011b451:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b458:	10 00 00 
f011b45b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b460:	0f b6 d0             	movzbl %al,%edx
f011b463:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b469:	01 d0                	add    %edx,%eax
f011b46b:	48                   	dec    %eax
f011b46c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b472:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b478:	ba 00 00 00 00       	mov    $0x0,%edx
f011b47d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b483:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b489:	29 d0                	sub    %edx,%eax
f011b48b:	01 c3                	add    %eax,%ebx
f011b48d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b494:	10 00 00 
f011b497:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b49c:	0f b6 c0             	movzbl %al,%eax
f011b49f:	c1 e0 04             	shl    $0x4,%eax
f011b4a2:	89 c2                	mov    %eax,%edx
f011b4a4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b4aa:	01 d0                	add    %edx,%eax
f011b4ac:	48                   	dec    %eax
f011b4ad:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b4b3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b4b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4be:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b4c4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b4ca:	29 d0                	sub    %edx,%eax
f011b4cc:	01 d8                	add    %ebx,%eax
f011b4ce:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b4d3:	39 c1                	cmp    %eax,%ecx
f011b4d5:	74 17                	je     f011b4ee <test_kmalloc_bestfit2+0x6d6>
f011b4d7:	83 ec 04             	sub    $0x4,%esp
f011b4da:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b4df:	68 70 02 00 00       	push   $0x270
f011b4e4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b4e9:	e8 0d 4d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4ee:	e8 49 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b4f3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4f6:	74 17                	je     f011b50f <test_kmalloc_bestfit2+0x6f7>
f011b4f8:	83 ec 04             	sub    $0x4,%esp
f011b4fb:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b500:	68 71 02 00 00       	push   $0x271
f011b505:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b50a:	e8 ec 4c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b50f:	e8 3d 15 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b514:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b517:	29 c2                	sub    %eax,%edx
f011b519:	89 d0                	mov    %edx,%eax
f011b51b:	83 f8 02             	cmp    $0x2,%eax
f011b51e:	74 17                	je     f011b537 <test_kmalloc_bestfit2+0x71f>
f011b520:	83 ec 04             	sub    $0x4,%esp
f011b523:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b528:	68 72 02 00 00       	push   $0x272
f011b52d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b532:	e8 c4 4c fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b537:	e8 15 15 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b53c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b53f:	e8 f8 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b544:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b547:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b54d:	83 ec 0c             	sub    $0xc,%esp
f011b550:	50                   	push   %eax
f011b551:	e8 88 c3 fe ff       	call   f01078de <kfree>
f011b556:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b559:	e8 de 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b55e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b561:	74 17                	je     f011b57a <test_kmalloc_bestfit2+0x762>
f011b563:	83 ec 04             	sub    $0x4,%esp
f011b566:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b56b:	68 78 02 00 00       	push   $0x278
f011b570:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b575:	e8 81 4c fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b57a:	e8 d2 14 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b57f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b582:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b587:	74 17                	je     f011b5a0 <test_kmalloc_bestfit2+0x788>
f011b589:	83 ec 04             	sub    $0x4,%esp
f011b58c:	68 68 b0 13 f0       	push   $0xf013b068
f011b591:	68 79 02 00 00       	push   $0x279
f011b596:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b59b:	e8 5b 4c fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b5a0:	e8 ac 14 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b5a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5a8:	e8 8f 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b5ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b5b0:	83 ec 0c             	sub    $0xc,%esp
f011b5b3:	68 00 fc 2f 00       	push   $0x2ffc00
f011b5b8:	e8 56 c2 fe ff       	call   f0107813 <kmalloc>
f011b5bd:	83 c4 10             	add    $0x10,%esp
f011b5c0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b5c6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b5cc:	89 c1                	mov    %eax,%ecx
f011b5ce:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b5d5:	10 00 00 
f011b5d8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b5de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b5e3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b5e9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b5ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5f4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b5fa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b600:	29 d0                	sub    %edx,%eax
f011b602:	89 c3                	mov    %eax,%ebx
f011b604:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b60b:	10 00 00 
f011b60e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b613:	0f b6 d0             	movzbl %al,%edx
f011b616:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b61c:	01 d0                	add    %edx,%eax
f011b61e:	48                   	dec    %eax
f011b61f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b625:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b62b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b630:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b636:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b63c:	29 d0                	sub    %edx,%eax
f011b63e:	01 c3                	add    %eax,%ebx
f011b640:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b647:	10 00 00 
f011b64a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b64f:	0f b6 c0             	movzbl %al,%eax
f011b652:	c1 e0 04             	shl    $0x4,%eax
f011b655:	89 c2                	mov    %eax,%edx
f011b657:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b65d:	01 d0                	add    %edx,%eax
f011b65f:	48                   	dec    %eax
f011b660:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b666:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b66c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b671:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b677:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b67d:	29 d0                	sub    %edx,%eax
f011b67f:	01 d8                	add    %ebx,%eax
f011b681:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b686:	39 c1                	cmp    %eax,%ecx
f011b688:	74 17                	je     f011b6a1 <test_kmalloc_bestfit2+0x889>
f011b68a:	83 ec 04             	sub    $0x4,%esp
f011b68d:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b692:	68 7f 02 00 00       	push   $0x27f
f011b697:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b69c:	e8 5a 4b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6a1:	e8 96 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b6a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6a9:	74 17                	je     f011b6c2 <test_kmalloc_bestfit2+0x8aa>
f011b6ab:	83 ec 04             	sub    $0x4,%esp
f011b6ae:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b6b3:	68 80 02 00 00       	push   $0x280
f011b6b8:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b6bd:	e8 39 4b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b6c2:	e8 8a 13 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b6c7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b6ca:	29 c2                	sub    %eax,%edx
f011b6cc:	89 d0                	mov    %edx,%eax
f011b6ce:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b6d3:	74 17                	je     f011b6ec <test_kmalloc_bestfit2+0x8d4>
f011b6d5:	83 ec 04             	sub    $0x4,%esp
f011b6d8:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b6dd:	68 81 02 00 00       	push   $0x281
f011b6e2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b6e7:	e8 0f 4b fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b6ec:	e8 60 13 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b6f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6f4:	e8 43 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b6f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b6fc:	83 ec 0c             	sub    $0xc,%esp
f011b6ff:	68 00 18 20 00       	push   $0x201800
f011b704:	e8 0a c1 fe ff       	call   f0107813 <kmalloc>
f011b709:	83 c4 10             	add    $0x10,%esp
f011b70c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b712:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b718:	89 c1                	mov    %eax,%ecx
f011b71a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b721:	10 00 00 
f011b724:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b72a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b72f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b735:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b73b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b740:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b746:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b74c:	29 d0                	sub    %edx,%eax
f011b74e:	89 c3                	mov    %eax,%ebx
f011b750:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b757:	10 00 00 
f011b75a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b75f:	0f b6 d0             	movzbl %al,%edx
f011b762:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b768:	01 d0                	add    %edx,%eax
f011b76a:	48                   	dec    %eax
f011b76b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b771:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b777:	ba 00 00 00 00       	mov    $0x0,%edx
f011b77c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b782:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b788:	29 d0                	sub    %edx,%eax
f011b78a:	01 c3                	add    %eax,%ebx
f011b78c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b793:	10 00 00 
f011b796:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b79b:	0f b6 c0             	movzbl %al,%eax
f011b79e:	c1 e0 04             	shl    $0x4,%eax
f011b7a1:	89 c2                	mov    %eax,%edx
f011b7a3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b7a9:	01 d0                	add    %edx,%eax
f011b7ab:	48                   	dec    %eax
f011b7ac:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b7b2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b7b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7bd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b7c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b7c9:	29 d0                	sub    %edx,%eax
f011b7cb:	01 d8                	add    %ebx,%eax
f011b7cd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b7d2:	39 c1                	cmp    %eax,%ecx
f011b7d4:	74 17                	je     f011b7ed <test_kmalloc_bestfit2+0x9d5>
f011b7d6:	83 ec 04             	sub    $0x4,%esp
f011b7d9:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b7de:	68 87 02 00 00       	push   $0x287
f011b7e3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b7e8:	e8 0e 4a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7ed:	e8 4a 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b7f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7f5:	74 17                	je     f011b80e <test_kmalloc_bestfit2+0x9f6>
f011b7f7:	83 ec 04             	sub    $0x4,%esp
f011b7fa:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b7ff:	68 88 02 00 00       	push   $0x288
f011b804:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b809:	e8 ed 49 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b80e:	e8 3e 12 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b813:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b816:	29 c2                	sub    %eax,%edx
f011b818:	89 d0                	mov    %edx,%eax
f011b81a:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b81f:	74 17                	je     f011b838 <test_kmalloc_bestfit2+0xa20>
f011b821:	83 ec 04             	sub    $0x4,%esp
f011b824:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b829:	68 89 02 00 00       	push   $0x289
f011b82e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b833:	e8 c3 49 fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b838:	e8 14 12 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b83d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b840:	e8 f7 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b845:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b848:	83 ec 0c             	sub    $0xc,%esp
f011b84b:	68 00 fc 4f 00       	push   $0x4ffc00
f011b850:	e8 be bf fe ff       	call   f0107813 <kmalloc>
f011b855:	83 c4 10             	add    $0x10,%esp
f011b858:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b85e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b864:	89 c1                	mov    %eax,%ecx
f011b866:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b86d:	10 00 00 
f011b870:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b876:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b87b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b881:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b887:	ba 00 00 00 00       	mov    $0x0,%edx
f011b88c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b892:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b898:	29 d0                	sub    %edx,%eax
f011b89a:	89 c3                	mov    %eax,%ebx
f011b89c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b8a3:	10 00 00 
f011b8a6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b8ab:	0f b6 d0             	movzbl %al,%edx
f011b8ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b8b4:	01 d0                	add    %edx,%eax
f011b8b6:	48                   	dec    %eax
f011b8b7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b8bd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8c8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b8ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b8d4:	29 d0                	sub    %edx,%eax
f011b8d6:	01 c3                	add    %eax,%ebx
f011b8d8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b8df:	10 00 00 
f011b8e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b8e7:	0f b6 c0             	movzbl %al,%eax
f011b8ea:	c1 e0 04             	shl    $0x4,%eax
f011b8ed:	89 c2                	mov    %eax,%edx
f011b8ef:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b8f5:	01 d0                	add    %edx,%eax
f011b8f7:	48                   	dec    %eax
f011b8f8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b8fe:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b904:	ba 00 00 00 00       	mov    $0x0,%edx
f011b909:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b90f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b915:	29 d0                	sub    %edx,%eax
f011b917:	01 d8                	add    %ebx,%eax
f011b919:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b91e:	39 c1                	cmp    %eax,%ecx
f011b920:	74 17                	je     f011b939 <test_kmalloc_bestfit2+0xb21>
f011b922:	83 ec 04             	sub    $0x4,%esp
f011b925:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011b92a:	68 8f 02 00 00       	push   $0x28f
f011b92f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b934:	e8 c2 48 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b939:	e8 fe 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b93e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b941:	74 17                	je     f011b95a <test_kmalloc_bestfit2+0xb42>
f011b943:	83 ec 04             	sub    $0x4,%esp
f011b946:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b94b:	68 90 02 00 00       	push   $0x290
f011b950:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b955:	e8 a1 48 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b95a:	e8 f2 10 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b95f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b962:	29 c2                	sub    %eax,%edx
f011b964:	89 d0                	mov    %edx,%eax
f011b966:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b96b:	74 17                	je     f011b984 <test_kmalloc_bestfit2+0xb6c>
f011b96d:	83 ec 04             	sub    $0x4,%esp
f011b970:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011b975:	68 91 02 00 00       	push   $0x291
f011b97a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b97f:	e8 77 48 fe ff       	call   f01001fb <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b984:	e8 c8 10 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b989:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b98c:	e8 ab 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b991:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b994:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b99a:	83 ec 0c             	sub    $0xc,%esp
f011b99d:	50                   	push   %eax
f011b99e:	e8 3b bf fe ff       	call   f01078de <kfree>
f011b9a3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9a6:	e8 91 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b9ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b9ae:	74 17                	je     f011b9c7 <test_kmalloc_bestfit2+0xbaf>
f011b9b0:	83 ec 04             	sub    $0x4,%esp
f011b9b3:	68 b4 ad 13 f0       	push   $0xf013adb4
f011b9b8:	68 97 02 00 00       	push   $0x297
f011b9bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b9c2:	e8 34 48 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b9c7:	e8 85 10 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b9cc:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b9cf:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b9d4:	74 17                	je     f011b9ed <test_kmalloc_bestfit2+0xbd5>
f011b9d6:	83 ec 04             	sub    $0x4,%esp
f011b9d9:	68 68 b0 13 f0       	push   $0xf013b068
f011b9de:	68 98 02 00 00       	push   $0x298
f011b9e3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011b9e8:	e8 0e 48 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b9ed:	e8 5f 10 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011b9f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b9f5:	e8 42 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b9fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b9fd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ba03:	83 ec 0c             	sub    $0xc,%esp
f011ba06:	50                   	push   %eax
f011ba07:	e8 d2 be fe ff       	call   f01078de <kfree>
f011ba0c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba0f:	e8 28 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ba14:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba17:	74 17                	je     f011ba30 <test_kmalloc_bestfit2+0xc18>
f011ba19:	83 ec 04             	sub    $0x4,%esp
f011ba1c:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ba21:	68 9e 02 00 00       	push   $0x29e
f011ba26:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ba2b:	e8 cb 47 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011ba30:	e8 1c 10 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011ba35:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ba38:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba3d:	74 17                	je     f011ba56 <test_kmalloc_bestfit2+0xc3e>
f011ba3f:	83 ec 04             	sub    $0x4,%esp
f011ba42:	68 94 b2 13 f0       	push   $0xf013b294
f011ba47:	68 9f 02 00 00       	push   $0x29f
f011ba4c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ba51:	e8 a5 47 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba56:	e8 f6 0f ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011ba5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba5e:	e8 d9 82 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ba63:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011ba66:	83 ec 0c             	sub    $0xc,%esp
f011ba69:	68 00 fc 1f 00       	push   $0x1ffc00
f011ba6e:	e8 a0 bd fe ff       	call   f0107813 <kmalloc>
f011ba73:	83 c4 10             	add    $0x10,%esp
f011ba76:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba7c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ba82:	89 c1                	mov    %eax,%ecx
f011ba84:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ba8b:	10 00 00 
f011ba8e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ba94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba99:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ba9f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011baa5:	ba 00 00 00 00       	mov    $0x0,%edx
f011baaa:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011bab0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bab6:	29 d0                	sub    %edx,%eax
f011bab8:	89 c3                	mov    %eax,%ebx
f011baba:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011bac1:	10 00 00 
f011bac4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bac9:	0f b6 d0             	movzbl %al,%edx
f011bacc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011bad2:	01 d0                	add    %edx,%eax
f011bad4:	48                   	dec    %eax
f011bad5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011badb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bae1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bae6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011baec:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011baf2:	29 d0                	sub    %edx,%eax
f011baf4:	01 c3                	add    %eax,%ebx
f011baf6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011bafd:	10 00 00 
f011bb00:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bb05:	0f b6 c0             	movzbl %al,%eax
f011bb08:	c1 e0 04             	shl    $0x4,%eax
f011bb0b:	89 c2                	mov    %eax,%edx
f011bb0d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011bb13:	01 d0                	add    %edx,%eax
f011bb15:	48                   	dec    %eax
f011bb16:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011bb1c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bb22:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb27:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011bb2d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bb33:	29 d0                	sub    %edx,%eax
f011bb35:	01 d8                	add    %ebx,%eax
f011bb37:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bb3c:	39 c1                	cmp    %eax,%ecx
f011bb3e:	74 17                	je     f011bb57 <test_kmalloc_bestfit2+0xd3f>
f011bb40:	83 ec 04             	sub    $0x4,%esp
f011bb43:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011bb48:	68 a5 02 00 00       	push   $0x2a5
f011bb4d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bb52:	e8 a4 46 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb57:	e8 e0 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb5c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb5f:	74 17                	je     f011bb78 <test_kmalloc_bestfit2+0xd60>
f011bb61:	83 ec 04             	sub    $0x4,%esp
f011bb64:	68 b4 ad 13 f0       	push   $0xf013adb4
f011bb69:	68 a6 02 00 00       	push   $0x2a6
f011bb6e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bb73:	e8 83 46 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011bb78:	e8 d4 0e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bb7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb80:	29 c2                	sub    %eax,%edx
f011bb82:	89 d0                	mov    %edx,%eax
f011bb84:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bb89:	74 17                	je     f011bba2 <test_kmalloc_bestfit2+0xd8a>
f011bb8b:	83 ec 04             	sub    $0x4,%esp
f011bb8e:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011bb93:	68 a7 02 00 00       	push   $0x2a7
f011bb98:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bb9d:	e8 59 46 fe ff       	call   f01001fb <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bba2:	e8 aa 0e ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bba7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbaa:	e8 8d 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bbaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011bbb2:	83 ec 0c             	sub    $0xc,%esp
f011bbb5:	68 00 18 00 00       	push   $0x1800
f011bbba:	e8 54 bc fe ff       	call   f0107813 <kmalloc>
f011bbbf:	83 c4 10             	add    $0x10,%esp
f011bbc2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bbc8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011bbce:	89 c1                	mov    %eax,%ecx
f011bbd0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011bbd7:	10 00 00 
f011bbda:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011bbe0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbe5:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011bbeb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bbf1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbf6:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011bbfc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bc02:	29 d0                	sub    %edx,%eax
f011bc04:	89 c3                	mov    %eax,%ebx
f011bc06:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011bc0d:	10 00 00 
f011bc10:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc15:	0f b6 d0             	movzbl %al,%edx
f011bc18:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011bc1e:	01 d0                	add    %edx,%eax
f011bc20:	48                   	dec    %eax
f011bc21:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011bc27:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bc2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc32:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011bc38:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bc3e:	29 d0                	sub    %edx,%eax
f011bc40:	01 c3                	add    %eax,%ebx
f011bc42:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bc49:	10 00 00 
f011bc4c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc51:	0f b6 c0             	movzbl %al,%eax
f011bc54:	c1 e0 04             	shl    $0x4,%eax
f011bc57:	89 c2                	mov    %eax,%edx
f011bc59:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bc5f:	01 d0                	add    %edx,%eax
f011bc61:	48                   	dec    %eax
f011bc62:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011bc68:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bc6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc73:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011bc79:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bc7f:	29 d0                	sub    %edx,%eax
f011bc81:	01 d8                	add    %ebx,%eax
f011bc83:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011bc88:	39 c1                	cmp    %eax,%ecx
f011bc8a:	74 17                	je     f011bca3 <test_kmalloc_bestfit2+0xe8b>
f011bc8c:	83 ec 04             	sub    $0x4,%esp
f011bc8f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011bc94:	68 ad 02 00 00       	push   $0x2ad
f011bc99:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bc9e:	e8 58 45 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bca3:	e8 94 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bca8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcab:	74 17                	je     f011bcc4 <test_kmalloc_bestfit2+0xeac>
f011bcad:	83 ec 04             	sub    $0x4,%esp
f011bcb0:	68 b4 ad 13 f0       	push   $0xf013adb4
f011bcb5:	68 ae 02 00 00       	push   $0x2ae
f011bcba:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bcbf:	e8 37 45 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bcc4:	e8 88 0d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bcc9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bccc:	29 c2                	sub    %eax,%edx
f011bcce:	89 d0                	mov    %edx,%eax
f011bcd0:	83 f8 02             	cmp    $0x2,%eax
f011bcd3:	74 17                	je     f011bcec <test_kmalloc_bestfit2+0xed4>
f011bcd5:	83 ec 04             	sub    $0x4,%esp
f011bcd8:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011bcdd:	68 af 02 00 00       	push   $0x2af
f011bce2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bce7:	e8 0f 45 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bcec:	e8 60 0d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bcf1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcf4:	e8 43 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bcf9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011bcfc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bd02:	83 ec 0c             	sub    $0xc,%esp
f011bd05:	50                   	push   %eax
f011bd06:	e8 d3 bb fe ff       	call   f01078de <kfree>
f011bd0b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd0e:	e8 29 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bd13:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd16:	74 17                	je     f011bd2f <test_kmalloc_bestfit2+0xf17>
f011bd18:	83 ec 04             	sub    $0x4,%esp
f011bd1b:	68 b4 ad 13 f0       	push   $0xf013adb4
f011bd20:	68 b5 02 00 00       	push   $0x2b5
f011bd25:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bd2a:	e8 cc 44 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bd2f:	e8 1d 0d ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bd34:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bd37:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bd3c:	74 17                	je     f011bd55 <test_kmalloc_bestfit2+0xf3d>
f011bd3e:	83 ec 04             	sub    $0x4,%esp
f011bd41:	68 94 b2 13 f0       	push   $0xf013b294
f011bd46:	68 b6 02 00 00       	push   $0x2b6
f011bd4b:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bd50:	e8 a6 44 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd55:	e8 f7 0c ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bd5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd5d:	e8 da 7f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bd62:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011bd65:	83 ec 0c             	sub    $0xc,%esp
f011bd68:	68 00 fc 2f 00       	push   $0x2ffc00
f011bd6d:	e8 a1 ba fe ff       	call   f0107813 <kmalloc>
f011bd72:	83 c4 10             	add    $0x10,%esp
f011bd75:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd7b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011bd81:	89 c1                	mov    %eax,%ecx
f011bd83:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011bd8a:	10 00 00 
f011bd8d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011bd93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd98:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011bd9e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bda4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bda9:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011bdaf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bdb5:	29 d0                	sub    %edx,%eax
f011bdb7:	89 c3                	mov    %eax,%ebx
f011bdb9:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bdc0:	10 00 00 
f011bdc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bdc8:	0f b6 d0             	movzbl %al,%edx
f011bdcb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bdd1:	01 d0                	add    %edx,%eax
f011bdd3:	48                   	dec    %eax
f011bdd4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bdda:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bde0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bdeb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bdf1:	29 d0                	sub    %edx,%eax
f011bdf3:	01 c3                	add    %eax,%ebx
f011bdf5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bdfc:	10 00 00 
f011bdff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011be04:	0f b6 c0             	movzbl %al,%eax
f011be07:	c1 e0 04             	shl    $0x4,%eax
f011be0a:	89 c2                	mov    %eax,%edx
f011be0c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011be12:	01 d0                	add    %edx,%eax
f011be14:	48                   	dec    %eax
f011be15:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011be1b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011be21:	ba 00 00 00 00       	mov    $0x0,%edx
f011be26:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011be2c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011be32:	29 d0                	sub    %edx,%eax
f011be34:	01 d8                	add    %ebx,%eax
f011be36:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011be3b:	39 c1                	cmp    %eax,%ecx
f011be3d:	74 17                	je     f011be56 <test_kmalloc_bestfit2+0x103e>
f011be3f:	83 ec 04             	sub    $0x4,%esp
f011be42:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011be47:	68 bc 02 00 00       	push   $0x2bc
f011be4c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011be51:	e8 a5 43 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be56:	e8 e1 7e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011be5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be5e:	74 17                	je     f011be77 <test_kmalloc_bestfit2+0x105f>
f011be60:	83 ec 04             	sub    $0x4,%esp
f011be63:	68 b4 ad 13 f0       	push   $0xf013adb4
f011be68:	68 bd 02 00 00       	push   $0x2bd
f011be6d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011be72:	e8 84 43 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011be77:	e8 d5 0b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011be7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be7f:	29 c2                	sub    %eax,%edx
f011be81:	89 d0                	mov    %edx,%eax
f011be83:	3d 00 03 00 00       	cmp    $0x300,%eax
f011be88:	74 17                	je     f011bea1 <test_kmalloc_bestfit2+0x1089>
f011be8a:	83 ec 04             	sub    $0x4,%esp
f011be8d:	68 94 b2 13 f0       	push   $0xf013b294
f011be92:	68 be 02 00 00       	push   $0x2be
f011be97:	68 9a ad 13 f0       	push   $0xf013ad9a
f011be9c:	e8 5a 43 fe ff       	call   f01001fb <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bea1:	e8 ab 0b ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bea6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bea9:	e8 8e 7e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011beae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011beb1:	83 ec 0c             	sub    $0xc,%esp
f011beb4:	68 00 fc 3f 00       	push   $0x3ffc00
f011beb9:	e8 55 b9 fe ff       	call   f0107813 <kmalloc>
f011bebe:	83 c4 10             	add    $0x10,%esp
f011bec1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bec7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011becd:	89 c1                	mov    %eax,%ecx
f011becf:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011bed6:	10 00 00 
f011bed9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bedf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bee4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011beea:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bef0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bef5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011befb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bf01:	29 d0                	sub    %edx,%eax
f011bf03:	89 c3                	mov    %eax,%ebx
f011bf05:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011bf0c:	10 00 00 
f011bf0f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bf14:	0f b6 d0             	movzbl %al,%edx
f011bf17:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bf1d:	01 d0                	add    %edx,%eax
f011bf1f:	48                   	dec    %eax
f011bf20:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011bf26:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bf2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf31:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011bf37:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bf3d:	29 d0                	sub    %edx,%eax
f011bf3f:	01 c3                	add    %eax,%ebx
f011bf41:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011bf48:	10 00 00 
f011bf4b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bf50:	0f b6 c0             	movzbl %al,%eax
f011bf53:	c1 e0 04             	shl    $0x4,%eax
f011bf56:	89 c2                	mov    %eax,%edx
f011bf58:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011bf5e:	01 d0                	add    %edx,%eax
f011bf60:	48                   	dec    %eax
f011bf61:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011bf67:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bf6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf72:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011bf78:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bf7e:	29 d0                	sub    %edx,%eax
f011bf80:	01 d8                	add    %ebx,%eax
f011bf82:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bf87:	39 c1                	cmp    %eax,%ecx
f011bf89:	74 17                	je     f011bfa2 <test_kmalloc_bestfit2+0x118a>
f011bf8b:	83 ec 04             	sub    $0x4,%esp
f011bf8e:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011bf93:	68 c4 02 00 00       	push   $0x2c4
f011bf98:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bf9d:	e8 59 42 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfa2:	e8 95 7d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bfa7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfaa:	74 17                	je     f011bfc3 <test_kmalloc_bestfit2+0x11ab>
f011bfac:	83 ec 04             	sub    $0x4,%esp
f011bfaf:	68 b4 ad 13 f0       	push   $0xf013adb4
f011bfb4:	68 c5 02 00 00       	push   $0x2c5
f011bfb9:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bfbe:	e8 38 42 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bfc3:	e8 89 0a ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011bfc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bfcb:	29 c2                	sub    %eax,%edx
f011bfcd:	89 d0                	mov    %edx,%eax
f011bfcf:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bfd4:	74 17                	je     f011bfed <test_kmalloc_bestfit2+0x11d5>
f011bfd6:	83 ec 04             	sub    $0x4,%esp
f011bfd9:	68 94 b2 13 f0       	push   $0xf013b294
f011bfde:	68 c6 02 00 00       	push   $0x2c6
f011bfe3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011bfe8:	e8 0e 42 fe ff       	call   f01001fb <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bfed:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011bff4:	10 00 00 
f011bff7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011bffd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c002:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c008:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c00e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c013:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c019:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c01f:	29 d0                	sub    %edx,%eax
f011c021:	89 c1                	mov    %eax,%ecx
f011c023:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c02a:	10 00 00 
f011c02d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c032:	0f b6 d0             	movzbl %al,%edx
f011c035:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c03b:	01 d0                	add    %edx,%eax
f011c03d:	48                   	dec    %eax
f011c03e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c044:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c04a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c04f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c055:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c05b:	29 d0                	sub    %edx,%eax
f011c05d:	01 c1                	add    %eax,%ecx
f011c05f:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c066:	10 00 00 
f011c069:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c06e:	0f b6 c0             	movzbl %al,%eax
f011c071:	c1 e0 04             	shl    $0x4,%eax
f011c074:	89 c2                	mov    %eax,%edx
f011c076:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c07c:	01 d0                	add    %edx,%eax
f011c07e:	48                   	dec    %eax
f011c07f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c085:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c08b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c090:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c096:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c09c:	29 d0                	sub    %edx,%eax
f011c09e:	01 c8                	add    %ecx,%eax
f011c0a0:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c0a5:	29 c2                	sub    %eax,%edx
f011c0a7:	89 d0                	mov    %edx,%eax
f011c0a9:	83 ec 0c             	sub    $0xc,%esp
f011c0ac:	50                   	push   %eax
f011c0ad:	e8 61 b7 fe ff       	call   f0107813 <kmalloc>
f011c0b2:	83 c4 10             	add    $0x10,%esp
f011c0b5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c0bb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c0c1:	85 c0                	test   %eax,%eax
f011c0c3:	74 17                	je     f011c0dc <test_kmalloc_bestfit2+0x12c4>
f011c0c5:	83 ec 04             	sub    $0x4,%esp
f011c0c8:	68 e4 b2 13 f0       	push   $0xf013b2e4
f011c0cd:	68 ce 02 00 00       	push   $0x2ce
f011c0d2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c0d7:	e8 1f 41 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c0dc:	83 ec 0c             	sub    $0xc,%esp
f011c0df:	68 48 b3 13 f0       	push   $0xf013b348
f011c0e4:	e8 99 4b fe ff       	call   f0100c82 <cprintf>
f011c0e9:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c0ec:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c0f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c0f4:	5b                   	pop    %ebx
f011c0f5:	5f                   	pop    %edi
f011c0f6:	5d                   	pop    %ebp
f011c0f7:	c3                   	ret    

f011c0f8 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c0f8:	55                   	push   %ebp
f011c0f9:	89 e5                	mov    %esp,%ebp
f011c0fb:	57                   	push   %edi
f011c0fc:	53                   	push   %ebx
f011c0fd:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c103:	83 ec 0c             	sub    $0xc,%esp
f011c106:	68 dc ac 13 f0       	push   $0xf013acdc
f011c10b:	e8 72 4b fe ff       	call   f0100c82 <cprintf>
f011c110:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c113:	83 ec 0c             	sub    $0xc,%esp
f011c116:	68 0c ad 13 f0       	push   $0xf013ad0c
f011c11b:	e8 62 4b fe ff       	call   f0100c82 <cprintf>
f011c120:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c123:	83 ec 0c             	sub    $0xc,%esp
f011c126:	68 dc ac 13 f0       	push   $0xf013acdc
f011c12b:	e8 52 4b fe ff       	call   f0100c82 <cprintf>
f011c130:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c133:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c139:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c13e:	b8 00 00 00 00       	mov    $0x0,%eax
f011c143:	89 d7                	mov    %edx,%edi
f011c145:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c147:	e8 05 09 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c14c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c14f:	e8 e8 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c154:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c157:	83 ec 0c             	sub    $0xc,%esp
f011c15a:	68 00 fc 0f 00       	push   $0xffc00
f011c15f:	e8 af b6 fe ff       	call   f0107813 <kmalloc>
f011c164:	83 c4 10             	add    $0x10,%esp
f011c167:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c16d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c173:	89 c1                	mov    %eax,%ecx
f011c175:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c17c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c17f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c184:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c187:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c18a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c18f:	f7 75 ec             	divl   -0x14(%ebp)
f011c192:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c195:	29 d0                	sub    %edx,%eax
f011c197:	89 c3                	mov    %eax,%ebx
f011c199:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c1a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c1a5:	0f b6 d0             	movzbl %al,%edx
f011c1a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c1ab:	01 d0                	add    %edx,%eax
f011c1ad:	48                   	dec    %eax
f011c1ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c1b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c1b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1b9:	f7 75 e4             	divl   -0x1c(%ebp)
f011c1bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c1bf:	29 d0                	sub    %edx,%eax
f011c1c1:	01 c3                	add    %eax,%ebx
f011c1c3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c1ca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c1cf:	0f b6 c0             	movzbl %al,%eax
f011c1d2:	c1 e0 04             	shl    $0x4,%eax
f011c1d5:	89 c2                	mov    %eax,%edx
f011c1d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c1da:	01 d0                	add    %edx,%eax
f011c1dc:	48                   	dec    %eax
f011c1dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c1e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c1e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1e8:	f7 75 dc             	divl   -0x24(%ebp)
f011c1eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c1ee:	29 d0                	sub    %edx,%eax
f011c1f0:	01 d8                	add    %ebx,%eax
f011c1f2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c1f7:	39 c1                	cmp    %eax,%ecx
f011c1f9:	74 17                	je     f011c212 <test_kmalloc_firstfit1+0x11a>
f011c1fb:	83 ec 04             	sub    $0x4,%esp
f011c1fe:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c203:	68 e6 02 00 00       	push   $0x2e6
f011c208:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c20d:	e8 e9 3f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c212:	e8 25 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c217:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c21a:	74 17                	je     f011c233 <test_kmalloc_firstfit1+0x13b>
f011c21c:	83 ec 04             	sub    $0x4,%esp
f011c21f:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c224:	68 e7 02 00 00       	push   $0x2e7
f011c229:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c22e:	e8 c8 3f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c233:	e8 19 08 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c238:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c23b:	29 c2                	sub    %eax,%edx
f011c23d:	89 d0                	mov    %edx,%eax
f011c23f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c244:	74 17                	je     f011c25d <test_kmalloc_firstfit1+0x165>
f011c246:	83 ec 04             	sub    $0x4,%esp
f011c249:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c24e:	68 e8 02 00 00       	push   $0x2e8
f011c253:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c258:	e8 9e 3f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c25d:	e8 ef 07 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c262:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c265:	e8 d2 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c26a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c26d:	83 ec 0c             	sub    $0xc,%esp
f011c270:	68 00 fc 0f 00       	push   $0xffc00
f011c275:	e8 99 b5 fe ff       	call   f0107813 <kmalloc>
f011c27a:	83 c4 10             	add    $0x10,%esp
f011c27d:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c283:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c289:	89 c1                	mov    %eax,%ecx
f011c28b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c292:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c295:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c29a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c29d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c2a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2a5:	f7 75 d4             	divl   -0x2c(%ebp)
f011c2a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c2ab:	29 d0                	sub    %edx,%eax
f011c2ad:	89 c3                	mov    %eax,%ebx
f011c2af:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c2b6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c2bb:	0f b6 d0             	movzbl %al,%edx
f011c2be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c2c1:	01 d0                	add    %edx,%eax
f011c2c3:	48                   	dec    %eax
f011c2c4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c2c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c2ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2cf:	f7 75 cc             	divl   -0x34(%ebp)
f011c2d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c2d5:	29 d0                	sub    %edx,%eax
f011c2d7:	01 c3                	add    %eax,%ebx
f011c2d9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c2e0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c2e5:	0f b6 c0             	movzbl %al,%eax
f011c2e8:	c1 e0 04             	shl    $0x4,%eax
f011c2eb:	89 c2                	mov    %eax,%edx
f011c2ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c2f0:	01 d0                	add    %edx,%eax
f011c2f2:	48                   	dec    %eax
f011c2f3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c2f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c2f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2fe:	f7 75 c4             	divl   -0x3c(%ebp)
f011c301:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c304:	29 d0                	sub    %edx,%eax
f011c306:	01 d8                	add    %ebx,%eax
f011c308:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c30d:	39 c1                	cmp    %eax,%ecx
f011c30f:	74 17                	je     f011c328 <test_kmalloc_firstfit1+0x230>
f011c311:	83 ec 04             	sub    $0x4,%esp
f011c314:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c319:	68 ee 02 00 00       	push   $0x2ee
f011c31e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c323:	e8 d3 3e fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c328:	e8 0f 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c32d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c330:	74 17                	je     f011c349 <test_kmalloc_firstfit1+0x251>
f011c332:	83 ec 04             	sub    $0x4,%esp
f011c335:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c33a:	68 ef 02 00 00       	push   $0x2ef
f011c33f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c344:	e8 b2 3e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c349:	e8 03 07 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c34e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c351:	29 c2                	sub    %eax,%edx
f011c353:	89 d0                	mov    %edx,%eax
f011c355:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c35a:	74 17                	je     f011c373 <test_kmalloc_firstfit1+0x27b>
f011c35c:	83 ec 04             	sub    $0x4,%esp
f011c35f:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c364:	68 f0 02 00 00       	push   $0x2f0
f011c369:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c36e:	e8 88 3e fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c373:	e8 d9 06 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c378:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c37b:	e8 bc 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c380:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c383:	83 ec 0c             	sub    $0xc,%esp
f011c386:	68 00 fc 0f 00       	push   $0xffc00
f011c38b:	e8 83 b4 fe ff       	call   f0107813 <kmalloc>
f011c390:	83 c4 10             	add    $0x10,%esp
f011c393:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c399:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c39f:	89 c1                	mov    %eax,%ecx
f011c3a1:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c3a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c3ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c3b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c3b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3bb:	f7 75 bc             	divl   -0x44(%ebp)
f011c3be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c3c1:	29 d0                	sub    %edx,%eax
f011c3c3:	89 c3                	mov    %eax,%ebx
f011c3c5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c3cc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c3d1:	0f b6 d0             	movzbl %al,%edx
f011c3d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c3d7:	01 d0                	add    %edx,%eax
f011c3d9:	48                   	dec    %eax
f011c3da:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c3dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c3e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3e5:	f7 75 b4             	divl   -0x4c(%ebp)
f011c3e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c3eb:	29 d0                	sub    %edx,%eax
f011c3ed:	01 c3                	add    %eax,%ebx
f011c3ef:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c3f6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c3fb:	0f b6 c0             	movzbl %al,%eax
f011c3fe:	c1 e0 04             	shl    $0x4,%eax
f011c401:	89 c2                	mov    %eax,%edx
f011c403:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c406:	01 d0                	add    %edx,%eax
f011c408:	48                   	dec    %eax
f011c409:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c40c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c40f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c414:	f7 75 ac             	divl   -0x54(%ebp)
f011c417:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c41a:	29 d0                	sub    %edx,%eax
f011c41c:	01 d8                	add    %ebx,%eax
f011c41e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c423:	39 c1                	cmp    %eax,%ecx
f011c425:	74 17                	je     f011c43e <test_kmalloc_firstfit1+0x346>
f011c427:	83 ec 04             	sub    $0x4,%esp
f011c42a:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c42f:	68 f6 02 00 00       	push   $0x2f6
f011c434:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c439:	e8 bd 3d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c43e:	e8 f9 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c443:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c446:	74 17                	je     f011c45f <test_kmalloc_firstfit1+0x367>
f011c448:	83 ec 04             	sub    $0x4,%esp
f011c44b:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c450:	68 f7 02 00 00       	push   $0x2f7
f011c455:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c45a:	e8 9c 3d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c45f:	e8 ed 05 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c464:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c467:	29 c2                	sub    %eax,%edx
f011c469:	89 d0                	mov    %edx,%eax
f011c46b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c470:	74 17                	je     f011c489 <test_kmalloc_firstfit1+0x391>
f011c472:	83 ec 04             	sub    $0x4,%esp
f011c475:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c47a:	68 f8 02 00 00       	push   $0x2f8
f011c47f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c484:	e8 72 3d fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c489:	e8 c3 05 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c48e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c491:	e8 a6 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c496:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c499:	83 ec 0c             	sub    $0xc,%esp
f011c49c:	68 00 fc 0f 00       	push   $0xffc00
f011c4a1:	e8 6d b3 fe ff       	call   f0107813 <kmalloc>
f011c4a6:	83 c4 10             	add    $0x10,%esp
f011c4a9:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c4af:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c4b5:	89 c1                	mov    %eax,%ecx
f011c4b7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c4be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c4c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4c6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c4c9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c4cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4d1:	f7 75 a4             	divl   -0x5c(%ebp)
f011c4d4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c4d7:	29 d0                	sub    %edx,%eax
f011c4d9:	89 c3                	mov    %eax,%ebx
f011c4db:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c4e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c4e7:	0f b6 d0             	movzbl %al,%edx
f011c4ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c4ed:	01 d0                	add    %edx,%eax
f011c4ef:	48                   	dec    %eax
f011c4f0:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c4f3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4fb:	f7 75 9c             	divl   -0x64(%ebp)
f011c4fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c501:	29 d0                	sub    %edx,%eax
f011c503:	01 c3                	add    %eax,%ebx
f011c505:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c50c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c511:	0f b6 c0             	movzbl %al,%eax
f011c514:	c1 e0 04             	shl    $0x4,%eax
f011c517:	89 c2                	mov    %eax,%edx
f011c519:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c51c:	01 d0                	add    %edx,%eax
f011c51e:	48                   	dec    %eax
f011c51f:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c522:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c525:	ba 00 00 00 00       	mov    $0x0,%edx
f011c52a:	f7 75 94             	divl   -0x6c(%ebp)
f011c52d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c530:	29 d0                	sub    %edx,%eax
f011c532:	01 d8                	add    %ebx,%eax
f011c534:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c539:	39 c1                	cmp    %eax,%ecx
f011c53b:	74 17                	je     f011c554 <test_kmalloc_firstfit1+0x45c>
f011c53d:	83 ec 04             	sub    $0x4,%esp
f011c540:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c545:	68 fe 02 00 00       	push   $0x2fe
f011c54a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c54f:	e8 a7 3c fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c554:	e8 e3 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c559:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c55c:	74 17                	je     f011c575 <test_kmalloc_firstfit1+0x47d>
f011c55e:	83 ec 04             	sub    $0x4,%esp
f011c561:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c566:	68 ff 02 00 00       	push   $0x2ff
f011c56b:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c570:	e8 86 3c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c575:	e8 d7 04 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c57a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c57d:	29 c2                	sub    %eax,%edx
f011c57f:	89 d0                	mov    %edx,%eax
f011c581:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c586:	74 17                	je     f011c59f <test_kmalloc_firstfit1+0x4a7>
f011c588:	83 ec 04             	sub    $0x4,%esp
f011c58b:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c590:	68 00 03 00 00       	push   $0x300
f011c595:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c59a:	e8 5c 3c fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c59f:	e8 ad 04 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c5a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5a7:	e8 90 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c5ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c5af:	83 ec 0c             	sub    $0xc,%esp
f011c5b2:	68 00 fc 1f 00       	push   $0x1ffc00
f011c5b7:	e8 57 b2 fe ff       	call   f0107813 <kmalloc>
f011c5bc:	83 c4 10             	add    $0x10,%esp
f011c5bf:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c5c5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c5cb:	89 c1                	mov    %eax,%ecx
f011c5cd:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c5d4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c5d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5dc:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c5df:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c5e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5e7:	f7 75 8c             	divl   -0x74(%ebp)
f011c5ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c5ed:	29 d0                	sub    %edx,%eax
f011c5ef:	89 c3                	mov    %eax,%ebx
f011c5f1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c5f8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c5fd:	0f b6 d0             	movzbl %al,%edx
f011c600:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c603:	01 d0                	add    %edx,%eax
f011c605:	48                   	dec    %eax
f011c606:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c609:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c60c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c611:	f7 75 84             	divl   -0x7c(%ebp)
f011c614:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c617:	29 d0                	sub    %edx,%eax
f011c619:	01 c3                	add    %eax,%ebx
f011c61b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c622:	10 00 00 
f011c625:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c62a:	0f b6 c0             	movzbl %al,%eax
f011c62d:	c1 e0 04             	shl    $0x4,%eax
f011c630:	89 c2                	mov    %eax,%edx
f011c632:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c638:	01 d0                	add    %edx,%eax
f011c63a:	48                   	dec    %eax
f011c63b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c641:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c647:	ba 00 00 00 00       	mov    $0x0,%edx
f011c64c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c652:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c658:	29 d0                	sub    %edx,%eax
f011c65a:	01 d8                	add    %ebx,%eax
f011c65c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c661:	39 c1                	cmp    %eax,%ecx
f011c663:	74 17                	je     f011c67c <test_kmalloc_firstfit1+0x584>
f011c665:	83 ec 04             	sub    $0x4,%esp
f011c668:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c66d:	68 06 03 00 00       	push   $0x306
f011c672:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c677:	e8 7f 3b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c67c:	e8 bb 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c681:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c684:	74 17                	je     f011c69d <test_kmalloc_firstfit1+0x5a5>
f011c686:	83 ec 04             	sub    $0x4,%esp
f011c689:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c68e:	68 07 03 00 00       	push   $0x307
f011c693:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c698:	e8 5e 3b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c69d:	e8 af 03 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c6a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6a5:	29 c2                	sub    %eax,%edx
f011c6a7:	89 d0                	mov    %edx,%eax
f011c6a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c6ae:	74 17                	je     f011c6c7 <test_kmalloc_firstfit1+0x5cf>
f011c6b0:	83 ec 04             	sub    $0x4,%esp
f011c6b3:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c6b8:	68 08 03 00 00       	push   $0x308
f011c6bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c6c2:	e8 34 3b fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6c7:	e8 85 03 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c6cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6cf:	e8 68 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c6d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c6d7:	83 ec 0c             	sub    $0xc,%esp
f011c6da:	68 00 fc 1f 00       	push   $0x1ffc00
f011c6df:	e8 2f b1 fe ff       	call   f0107813 <kmalloc>
f011c6e4:	83 c4 10             	add    $0x10,%esp
f011c6e7:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c6ed:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c6f3:	89 c1                	mov    %eax,%ecx
f011c6f5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c6fc:	10 00 00 
f011c6ff:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c705:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c70a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c710:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c716:	ba 00 00 00 00       	mov    $0x0,%edx
f011c71b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c721:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c727:	29 d0                	sub    %edx,%eax
f011c729:	89 c3                	mov    %eax,%ebx
f011c72b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c732:	10 00 00 
f011c735:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c73a:	0f b6 d0             	movzbl %al,%edx
f011c73d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c743:	01 d0                	add    %edx,%eax
f011c745:	48                   	dec    %eax
f011c746:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c74c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c752:	ba 00 00 00 00       	mov    $0x0,%edx
f011c757:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c75d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c763:	29 d0                	sub    %edx,%eax
f011c765:	01 c3                	add    %eax,%ebx
f011c767:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c76e:	10 00 00 
f011c771:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c776:	0f b6 c0             	movzbl %al,%eax
f011c779:	c1 e0 04             	shl    $0x4,%eax
f011c77c:	89 c2                	mov    %eax,%edx
f011c77e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c784:	01 d0                	add    %edx,%eax
f011c786:	48                   	dec    %eax
f011c787:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c78d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c793:	ba 00 00 00 00       	mov    $0x0,%edx
f011c798:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c79e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c7a4:	29 d0                	sub    %edx,%eax
f011c7a6:	01 d8                	add    %ebx,%eax
f011c7a8:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c7ad:	39 c1                	cmp    %eax,%ecx
f011c7af:	74 17                	je     f011c7c8 <test_kmalloc_firstfit1+0x6d0>
f011c7b1:	83 ec 04             	sub    $0x4,%esp
f011c7b4:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c7b9:	68 0e 03 00 00       	push   $0x30e
f011c7be:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c7c3:	e8 33 3a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7c8:	e8 6f 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c7cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7d0:	74 17                	je     f011c7e9 <test_kmalloc_firstfit1+0x6f1>
f011c7d2:	83 ec 04             	sub    $0x4,%esp
f011c7d5:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c7da:	68 0f 03 00 00       	push   $0x30f
f011c7df:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c7e4:	e8 12 3a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c7e9:	e8 63 02 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c7ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7f1:	29 c2                	sub    %eax,%edx
f011c7f3:	89 d0                	mov    %edx,%eax
f011c7f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7fa:	74 17                	je     f011c813 <test_kmalloc_firstfit1+0x71b>
f011c7fc:	83 ec 04             	sub    $0x4,%esp
f011c7ff:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c804:	68 10 03 00 00       	push   $0x310
f011c809:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c80e:	e8 e8 39 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c813:	e8 39 02 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c818:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c81b:	e8 1c 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c820:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c823:	83 ec 0c             	sub    $0xc,%esp
f011c826:	68 00 fc 2f 00       	push   $0x2ffc00
f011c82b:	e8 e3 af fe ff       	call   f0107813 <kmalloc>
f011c830:	83 c4 10             	add    $0x10,%esp
f011c833:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c839:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c83f:	89 c1                	mov    %eax,%ecx
f011c841:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c848:	10 00 00 
f011c84b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c851:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c856:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c85c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c862:	ba 00 00 00 00       	mov    $0x0,%edx
f011c867:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c86d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c873:	29 d0                	sub    %edx,%eax
f011c875:	89 c3                	mov    %eax,%ebx
f011c877:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c87e:	10 00 00 
f011c881:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c886:	0f b6 d0             	movzbl %al,%edx
f011c889:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c88f:	01 d0                	add    %edx,%eax
f011c891:	48                   	dec    %eax
f011c892:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c898:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c89e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8a3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c8a9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c8af:	29 d0                	sub    %edx,%eax
f011c8b1:	01 c3                	add    %eax,%ebx
f011c8b3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c8ba:	10 00 00 
f011c8bd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c8c2:	0f b6 c0             	movzbl %al,%eax
f011c8c5:	c1 e0 04             	shl    $0x4,%eax
f011c8c8:	89 c2                	mov    %eax,%edx
f011c8ca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c8d0:	01 d0                	add    %edx,%eax
f011c8d2:	48                   	dec    %eax
f011c8d3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c8d9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c8df:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8e4:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c8ea:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c8f0:	29 d0                	sub    %edx,%eax
f011c8f2:	01 d8                	add    %ebx,%eax
f011c8f4:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c8f9:	39 c1                	cmp    %eax,%ecx
f011c8fb:	74 17                	je     f011c914 <test_kmalloc_firstfit1+0x81c>
f011c8fd:	83 ec 04             	sub    $0x4,%esp
f011c900:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011c905:	68 16 03 00 00       	push   $0x316
f011c90a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c90f:	e8 e7 38 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c914:	e8 23 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c919:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c91c:	74 17                	je     f011c935 <test_kmalloc_firstfit1+0x83d>
f011c91e:	83 ec 04             	sub    $0x4,%esp
f011c921:	68 b4 ad 13 f0       	push   $0xf013adb4
f011c926:	68 17 03 00 00       	push   $0x317
f011c92b:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c930:	e8 c6 38 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c935:	e8 17 01 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c93a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c93d:	29 c2                	sub    %eax,%edx
f011c93f:	89 d0                	mov    %edx,%eax
f011c941:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c946:	74 17                	je     f011c95f <test_kmalloc_firstfit1+0x867>
f011c948:	83 ec 04             	sub    $0x4,%esp
f011c94b:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011c950:	68 18 03 00 00       	push   $0x318
f011c955:	68 9a ad 13 f0       	push   $0xf013ad9a
f011c95a:	e8 9c 38 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c95f:	e8 ed 00 ff ff       	call   f010ca51 <sys_calculate_free_frames>
f011c964:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c967:	e8 d0 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c96c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c96f:	83 ec 0c             	sub    $0xc,%esp
f011c972:	68 00 fc 2f 00       	push   $0x2ffc00
f011c977:	e8 97 ae fe ff       	call   f0107813 <kmalloc>
f011c97c:	83 c4 10             	add    $0x10,%esp
f011c97f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c985:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c98b:	89 c1                	mov    %eax,%ecx
f011c98d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c994:	10 00 00 
f011c997:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c99d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9a2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c9a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c9ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9b3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c9b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c9bf:	29 d0                	sub    %edx,%eax
f011c9c1:	89 c3                	mov    %eax,%ebx
f011c9c3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c9ca:	10 00 00 
f011c9cd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c9d2:	0f b6 d0             	movzbl %al,%edx
f011c9d5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c9db:	01 d0                	add    %edx,%eax
f011c9dd:	48                   	dec    %eax
f011c9de:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c9e4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c9ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9ef:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c9f5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c9fb:	29 d0                	sub    %edx,%eax
f011c9fd:	01 c3                	add    %eax,%ebx
f011c9ff:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ca06:	10 00 00 
f011ca09:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ca0e:	0f b6 c0             	movzbl %al,%eax
f011ca11:	c1 e0 04             	shl    $0x4,%eax
f011ca14:	89 c2                	mov    %eax,%edx
f011ca16:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ca1c:	01 d0                	add    %edx,%eax
f011ca1e:	48                   	dec    %eax
f011ca1f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ca25:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ca2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca30:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ca36:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ca3c:	29 d0                	sub    %edx,%eax
f011ca3e:	01 d8                	add    %ebx,%eax
f011ca40:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ca45:	39 c1                	cmp    %eax,%ecx
f011ca47:	74 17                	je     f011ca60 <test_kmalloc_firstfit1+0x968>
f011ca49:	83 ec 04             	sub    $0x4,%esp
f011ca4c:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011ca51:	68 1e 03 00 00       	push   $0x31e
f011ca56:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ca5b:	e8 9b 37 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca60:	e8 d7 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca68:	74 17                	je     f011ca81 <test_kmalloc_firstfit1+0x989>
f011ca6a:	83 ec 04             	sub    $0x4,%esp
f011ca6d:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ca72:	68 1f 03 00 00       	push   $0x31f
f011ca77:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ca7c:	e8 7a 37 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ca81:	e8 cb ff fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ca86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca89:	29 c2                	sub    %eax,%edx
f011ca8b:	89 d0                	mov    %edx,%eax
f011ca8d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca92:	74 17                	je     f011caab <test_kmalloc_firstfit1+0x9b3>
f011ca94:	83 ec 04             	sub    $0x4,%esp
f011ca97:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011ca9c:	68 20 03 00 00       	push   $0x320
f011caa1:	68 9a ad 13 f0       	push   $0xf013ad9a
f011caa6:	e8 50 37 fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011caab:	e8 a1 ff fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cab3:	e8 84 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cab8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cabb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cac1:	83 ec 0c             	sub    $0xc,%esp
f011cac4:	50                   	push   %eax
f011cac5:	e8 14 ae fe ff       	call   f01078de <kfree>
f011caca:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cacd:	e8 6a 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cad2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cad5:	74 17                	je     f011caee <test_kmalloc_firstfit1+0x9f6>
f011cad7:	83 ec 04             	sub    $0x4,%esp
f011cada:	68 b4 ad 13 f0       	push   $0xf013adb4
f011cadf:	68 29 03 00 00       	push   $0x329
f011cae4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cae9:	e8 0d 37 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011caee:	e8 5e ff fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011caf3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011caf6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cafb:	74 17                	je     f011cb14 <test_kmalloc_firstfit1+0xa1c>
f011cafd:	83 ec 04             	sub    $0x4,%esp
f011cb00:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011cb05:	68 2a 03 00 00       	push   $0x32a
f011cb0a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cb0f:	e8 e7 36 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb14:	e8 38 ff fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cb19:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb1c:	e8 1b 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cb21:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cb24:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cb2a:	83 ec 0c             	sub    $0xc,%esp
f011cb2d:	50                   	push   %eax
f011cb2e:	e8 ab ad fe ff       	call   f01078de <kfree>
f011cb33:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb36:	e8 01 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cb3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb3e:	74 17                	je     f011cb57 <test_kmalloc_firstfit1+0xa5f>
f011cb40:	83 ec 04             	sub    $0x4,%esp
f011cb43:	68 b4 ad 13 f0       	push   $0xf013adb4
f011cb48:	68 30 03 00 00       	push   $0x330
f011cb4d:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cb52:	e8 a4 36 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cb57:	e8 f5 fe fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cb5c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb5f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb64:	74 17                	je     f011cb7d <test_kmalloc_firstfit1+0xa85>
f011cb66:	83 ec 04             	sub    $0x4,%esp
f011cb69:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011cb6e:	68 31 03 00 00       	push   $0x331
f011cb73:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cb78:	e8 7e 36 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb7d:	e8 cf fe fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cb82:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb85:	e8 b2 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cb8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cb8d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cb93:	83 ec 0c             	sub    $0xc,%esp
f011cb96:	50                   	push   %eax
f011cb97:	e8 42 ad fe ff       	call   f01078de <kfree>
f011cb9c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb9f:	e8 98 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cba4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cba7:	74 17                	je     f011cbc0 <test_kmalloc_firstfit1+0xac8>
f011cba9:	83 ec 04             	sub    $0x4,%esp
f011cbac:	68 b4 ad 13 f0       	push   $0xf013adb4
f011cbb1:	68 37 03 00 00       	push   $0x337
f011cbb6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cbbb:	e8 3b 36 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cbc0:	e8 8c fe fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cbc5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cbc8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cbcd:	74 17                	je     f011cbe6 <test_kmalloc_firstfit1+0xaee>
f011cbcf:	83 ec 04             	sub    $0x4,%esp
f011cbd2:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011cbd7:	68 38 03 00 00       	push   $0x338
f011cbdc:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cbe1:	e8 15 36 fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cbe6:	e8 66 fe fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cbeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbee:	e8 49 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cbf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cbf6:	83 ec 0c             	sub    $0xc,%esp
f011cbf9:	68 00 fc 07 00       	push   $0x7fc00
f011cbfe:	e8 10 ac fe ff       	call   f0107813 <kmalloc>
f011cc03:	83 c4 10             	add    $0x10,%esp
f011cc06:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cc0c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011cc12:	89 c1                	mov    %eax,%ecx
f011cc14:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011cc1b:	10 00 00 
f011cc1e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011cc24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc29:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011cc2f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc3a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cc40:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cc46:	29 d0                	sub    %edx,%eax
f011cc48:	89 c3                	mov    %eax,%ebx
f011cc4a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cc51:	10 00 00 
f011cc54:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc59:	0f b6 d0             	movzbl %al,%edx
f011cc5c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cc62:	01 d0                	add    %edx,%eax
f011cc64:	48                   	dec    %eax
f011cc65:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cc6b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cc71:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc76:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011cc7c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cc82:	29 d0                	sub    %edx,%eax
f011cc84:	01 c3                	add    %eax,%ebx
f011cc86:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cc8d:	10 00 00 
f011cc90:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc95:	0f b6 c0             	movzbl %al,%eax
f011cc98:	c1 e0 04             	shl    $0x4,%eax
f011cc9b:	89 c2                	mov    %eax,%edx
f011cc9d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cca3:	01 d0                	add    %edx,%eax
f011cca5:	48                   	dec    %eax
f011cca6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ccac:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ccb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccb7:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ccbd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ccc3:	29 d0                	sub    %edx,%eax
f011ccc5:	01 d8                	add    %ebx,%eax
f011ccc7:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cccc:	39 c1                	cmp    %eax,%ecx
f011ccce:	74 17                	je     f011cce7 <test_kmalloc_firstfit1+0xbef>
f011ccd0:	83 ec 04             	sub    $0x4,%esp
f011ccd3:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011ccd8:	68 41 03 00 00       	push   $0x341
f011ccdd:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cce2:	e8 14 35 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cce7:	e8 50 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ccec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccef:	74 17                	je     f011cd08 <test_kmalloc_firstfit1+0xc10>
f011ccf1:	83 ec 04             	sub    $0x4,%esp
f011ccf4:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ccf9:	68 42 03 00 00       	push   $0x342
f011ccfe:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cd03:	e8 f3 34 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cd08:	e8 44 fd fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cd0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd10:	29 c2                	sub    %eax,%edx
f011cd12:	89 d0                	mov    %edx,%eax
f011cd14:	3d 80 00 00 00       	cmp    $0x80,%eax
f011cd19:	74 17                	je     f011cd32 <test_kmalloc_firstfit1+0xc3a>
f011cd1b:	83 ec 04             	sub    $0x4,%esp
f011cd1e:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011cd23:	68 43 03 00 00       	push   $0x343
f011cd28:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cd2d:	e8 c9 34 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cd32:	e8 1a fd fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cd37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd3a:	e8 fd 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cd3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cd42:	83 ec 0c             	sub    $0xc,%esp
f011cd45:	68 00 fc 0f 00       	push   $0xffc00
f011cd4a:	e8 c4 aa fe ff       	call   f0107813 <kmalloc>
f011cd4f:	83 c4 10             	add    $0x10,%esp
f011cd52:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cd58:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cd5e:	89 c1                	mov    %eax,%ecx
f011cd60:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011cd67:	10 00 00 
f011cd6a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cd70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd75:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cd7b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cd81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd86:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011cd8c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cd92:	29 d0                	sub    %edx,%eax
f011cd94:	89 c3                	mov    %eax,%ebx
f011cd96:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011cd9d:	10 00 00 
f011cda0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cda5:	0f b6 d0             	movzbl %al,%edx
f011cda8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cdae:	01 d0                	add    %edx,%eax
f011cdb0:	48                   	dec    %eax
f011cdb1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011cdb7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cdbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdc2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011cdc8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cdce:	29 d0                	sub    %edx,%eax
f011cdd0:	01 c3                	add    %eax,%ebx
f011cdd2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cdd9:	10 00 00 
f011cddc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cde1:	0f b6 c0             	movzbl %al,%eax
f011cde4:	c1 e0 04             	shl    $0x4,%eax
f011cde7:	89 c2                	mov    %eax,%edx
f011cde9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cdef:	01 d0                	add    %edx,%eax
f011cdf1:	48                   	dec    %eax
f011cdf2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011cdf8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cdfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce03:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ce09:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ce0f:	29 d0                	sub    %edx,%eax
f011ce11:	01 d8                	add    %ebx,%eax
f011ce13:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ce18:	39 c1                	cmp    %eax,%ecx
f011ce1a:	74 17                	je     f011ce33 <test_kmalloc_firstfit1+0xd3b>
f011ce1c:	83 ec 04             	sub    $0x4,%esp
f011ce1f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011ce24:	68 49 03 00 00       	push   $0x349
f011ce29:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ce2e:	e8 c8 33 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce33:	e8 04 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ce38:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce3b:	74 17                	je     f011ce54 <test_kmalloc_firstfit1+0xd5c>
f011ce3d:	83 ec 04             	sub    $0x4,%esp
f011ce40:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ce45:	68 4a 03 00 00       	push   $0x34a
f011ce4a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ce4f:	e8 a7 33 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ce54:	e8 f8 fb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ce59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce5c:	29 c2                	sub    %eax,%edx
f011ce5e:	89 d0                	mov    %edx,%eax
f011ce60:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce65:	74 17                	je     f011ce7e <test_kmalloc_firstfit1+0xd86>
f011ce67:	83 ec 04             	sub    $0x4,%esp
f011ce6a:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011ce6f:	68 4b 03 00 00       	push   $0x34b
f011ce74:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ce79:	e8 7d 33 fe ff       	call   f01001fb <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ce7e:	e8 ce fb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ce83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce86:	e8 b1 6e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ce8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ce8e:	83 ec 0c             	sub    $0xc,%esp
f011ce91:	68 00 fc 03 00       	push   $0x3fc00
f011ce96:	e8 78 a9 fe ff       	call   f0107813 <kmalloc>
f011ce9b:	83 c4 10             	add    $0x10,%esp
f011ce9e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cea4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ceaa:	89 c1                	mov    %eax,%ecx
f011ceac:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ceb3:	10 00 00 
f011ceb6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cebc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cec1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011cec7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cecd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced2:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ced8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cede:	29 d0                	sub    %edx,%eax
f011cee0:	89 c3                	mov    %eax,%ebx
f011cee2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cee9:	10 00 00 
f011ceec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cef1:	0f b6 d0             	movzbl %al,%edx
f011cef4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cefa:	01 d0                	add    %edx,%eax
f011cefc:	48                   	dec    %eax
f011cefd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011cf03:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cf09:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf0e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011cf14:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cf1a:	29 d0                	sub    %edx,%eax
f011cf1c:	01 c3                	add    %eax,%ebx
f011cf1e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011cf25:	10 00 00 
f011cf28:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cf2d:	0f b6 c0             	movzbl %al,%eax
f011cf30:	c1 e0 04             	shl    $0x4,%eax
f011cf33:	89 c2                	mov    %eax,%edx
f011cf35:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cf3b:	01 d0                	add    %edx,%eax
f011cf3d:	48                   	dec    %eax
f011cf3e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011cf44:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cf4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf4f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011cf55:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cf5b:	29 d0                	sub    %edx,%eax
f011cf5d:	01 d8                	add    %ebx,%eax
f011cf5f:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cf64:	39 c1                	cmp    %eax,%ecx
f011cf66:	74 17                	je     f011cf7f <test_kmalloc_firstfit1+0xe87>
f011cf68:	83 ec 04             	sub    $0x4,%esp
f011cf6b:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011cf70:	68 52 03 00 00       	push   $0x352
f011cf75:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cf7a:	e8 7c 32 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf7f:	e8 b8 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cf84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf87:	74 17                	je     f011cfa0 <test_kmalloc_firstfit1+0xea8>
f011cf89:	83 ec 04             	sub    $0x4,%esp
f011cf8c:	68 b4 ad 13 f0       	push   $0xf013adb4
f011cf91:	68 53 03 00 00       	push   $0x353
f011cf96:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cf9b:	e8 5b 32 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011cfa0:	e8 ac fa fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cfa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfa8:	29 c2                	sub    %eax,%edx
f011cfaa:	89 d0                	mov    %edx,%eax
f011cfac:	83 f8 40             	cmp    $0x40,%eax
f011cfaf:	74 17                	je     f011cfc8 <test_kmalloc_firstfit1+0xed0>
f011cfb1:	83 ec 04             	sub    $0x4,%esp
f011cfb4:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011cfb9:	68 54 03 00 00       	push   $0x354
f011cfbe:	68 9a ad 13 f0       	push   $0xf013ad9a
f011cfc3:	e8 33 32 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011cfc8:	e8 84 fa fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011cfcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfd0:	e8 67 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cfd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011cfd8:	83 ec 0c             	sub    $0xc,%esp
f011cfdb:	68 00 00 20 00       	push   $0x200000
f011cfe0:	e8 2e a8 fe ff       	call   f0107813 <kmalloc>
f011cfe5:	83 c4 10             	add    $0x10,%esp
f011cfe8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cfee:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cff4:	89 c1                	mov    %eax,%ecx
f011cff6:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011cffd:	10 00 00 
f011d000:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d006:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d00b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d011:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d017:	ba 00 00 00 00       	mov    $0x0,%edx
f011d01c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d022:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d028:	29 d0                	sub    %edx,%eax
f011d02a:	89 c3                	mov    %eax,%ebx
f011d02c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d033:	10 00 00 
f011d036:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d03b:	0f b6 d0             	movzbl %al,%edx
f011d03e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d044:	01 d0                	add    %edx,%eax
f011d046:	48                   	dec    %eax
f011d047:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d04d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d053:	ba 00 00 00 00       	mov    $0x0,%edx
f011d058:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d05e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d064:	29 d0                	sub    %edx,%eax
f011d066:	01 c3                	add    %eax,%ebx
f011d068:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d06f:	10 00 00 
f011d072:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d077:	0f b6 c0             	movzbl %al,%eax
f011d07a:	c1 e0 04             	shl    $0x4,%eax
f011d07d:	89 c2                	mov    %eax,%edx
f011d07f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d085:	01 d0                	add    %edx,%eax
f011d087:	48                   	dec    %eax
f011d088:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d08e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d094:	ba 00 00 00 00       	mov    $0x0,%edx
f011d099:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d09f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d0a5:	29 d0                	sub    %edx,%eax
f011d0a7:	01 d8                	add    %ebx,%eax
f011d0a9:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d0ae:	39 c1                	cmp    %eax,%ecx
f011d0b0:	74 17                	je     f011d0c9 <test_kmalloc_firstfit1+0xfd1>
f011d0b2:	83 ec 04             	sub    $0x4,%esp
f011d0b5:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d0ba:	68 5a 03 00 00       	push   $0x35a
f011d0bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d0c4:	e8 32 31 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d0c9:	e8 83 f9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d0ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0d1:	29 c2                	sub    %eax,%edx
f011d0d3:	89 d0                	mov    %edx,%eax
f011d0d5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d0da:	74 17                	je     f011d0f3 <test_kmalloc_firstfit1+0xffb>
f011d0dc:	83 ec 04             	sub    $0x4,%esp
f011d0df:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d0e4:	68 5b 03 00 00       	push   $0x35b
f011d0e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d0ee:	e8 08 31 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0f3:	e8 44 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d0f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0fb:	74 17                	je     f011d114 <test_kmalloc_firstfit1+0x101c>
f011d0fd:	83 ec 04             	sub    $0x4,%esp
f011d100:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d105:	68 5c 03 00 00       	push   $0x35c
f011d10a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d10f:	e8 e7 30 fe ff       	call   f01001fb <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d114:	e8 38 f9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d119:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d11c:	e8 1b 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d121:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d124:	83 ec 0c             	sub    $0xc,%esp
f011d127:	68 00 fc 3f 00       	push   $0x3ffc00
f011d12c:	e8 e2 a6 fe ff       	call   f0107813 <kmalloc>
f011d131:	83 c4 10             	add    $0x10,%esp
f011d134:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d13a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d140:	89 c1                	mov    %eax,%ecx
f011d142:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d149:	10 00 00 
f011d14c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d152:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d157:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d15d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d163:	ba 00 00 00 00       	mov    $0x0,%edx
f011d168:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d16e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d174:	29 d0                	sub    %edx,%eax
f011d176:	89 c3                	mov    %eax,%ebx
f011d178:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d17f:	10 00 00 
f011d182:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d187:	0f b6 d0             	movzbl %al,%edx
f011d18a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d190:	01 d0                	add    %edx,%eax
f011d192:	48                   	dec    %eax
f011d193:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d199:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d19f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1a4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d1aa:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d1b0:	29 d0                	sub    %edx,%eax
f011d1b2:	01 c3                	add    %eax,%ebx
f011d1b4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d1bb:	10 00 00 
f011d1be:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d1c3:	0f b6 c0             	movzbl %al,%eax
f011d1c6:	c1 e0 04             	shl    $0x4,%eax
f011d1c9:	89 c2                	mov    %eax,%edx
f011d1cb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d1d1:	01 d0                	add    %edx,%eax
f011d1d3:	48                   	dec    %eax
f011d1d4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d1da:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d1e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d1eb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d1f1:	29 d0                	sub    %edx,%eax
f011d1f3:	01 d8                	add    %ebx,%eax
f011d1f5:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d1fa:	39 c1                	cmp    %eax,%ecx
f011d1fc:	74 17                	je     f011d215 <test_kmalloc_firstfit1+0x111d>
f011d1fe:	83 ec 04             	sub    $0x4,%esp
f011d201:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d206:	68 63 03 00 00       	push   $0x363
f011d20b:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d210:	e8 e6 2f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d215:	e8 22 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d21a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d21d:	74 17                	je     f011d236 <test_kmalloc_firstfit1+0x113e>
f011d21f:	83 ec 04             	sub    $0x4,%esp
f011d222:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d227:	68 64 03 00 00       	push   $0x364
f011d22c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d231:	e8 c5 2f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d236:	e8 16 f8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d23b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d23e:	29 c2                	sub    %eax,%edx
f011d240:	89 d0                	mov    %edx,%eax
f011d242:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d247:	74 17                	je     f011d260 <test_kmalloc_firstfit1+0x1168>
f011d249:	83 ec 04             	sub    $0x4,%esp
f011d24c:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d251:	68 65 03 00 00       	push   $0x365
f011d256:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d25b:	e8 9b 2f fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d260:	e8 ec f7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d265:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d268:	e8 cf 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d26d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d270:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d276:	83 ec 0c             	sub    $0xc,%esp
f011d279:	50                   	push   %eax
f011d27a:	e8 5f a6 fe ff       	call   f01078de <kfree>
f011d27f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d282:	e8 b5 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d287:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d28a:	74 17                	je     f011d2a3 <test_kmalloc_firstfit1+0x11ab>
f011d28c:	83 ec 04             	sub    $0x4,%esp
f011d28f:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d294:	68 6e 03 00 00       	push   $0x36e
f011d299:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d29e:	e8 58 2f fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d2a3:	e8 a9 f7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d2a8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d2ab:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d2b0:	74 17                	je     f011d2c9 <test_kmalloc_firstfit1+0x11d1>
f011d2b2:	83 ec 04             	sub    $0x4,%esp
f011d2b5:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011d2ba:	68 6f 03 00 00       	push   $0x36f
f011d2bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d2c4:	e8 32 2f fe ff       	call   f01001fb <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d2c9:	e8 83 f7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d2ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2d1:	e8 66 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d2d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d2d9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d2df:	83 ec 0c             	sub    $0xc,%esp
f011d2e2:	50                   	push   %eax
f011d2e3:	e8 f6 a5 fe ff       	call   f01078de <kfree>
f011d2e8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2eb:	e8 4c 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d2f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2f3:	74 17                	je     f011d30c <test_kmalloc_firstfit1+0x1214>
f011d2f5:	83 ec 04             	sub    $0x4,%esp
f011d2f8:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d2fd:	68 75 03 00 00       	push   $0x375
f011d302:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d307:	e8 ef 2e fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d30c:	e8 40 f7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d311:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d314:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d319:	74 17                	je     f011d332 <test_kmalloc_firstfit1+0x123a>
f011d31b:	83 ec 04             	sub    $0x4,%esp
f011d31e:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011d323:	68 76 03 00 00       	push   $0x376
f011d328:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d32d:	e8 c9 2e fe ff       	call   f01001fb <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d332:	e8 1a f7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d337:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d33a:	e8 fd 69 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d33f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d342:	83 ec 0c             	sub    $0xc,%esp
f011d345:	68 00 00 10 00       	push   $0x100000
f011d34a:	e8 c4 a4 fe ff       	call   f0107813 <kmalloc>
f011d34f:	83 c4 10             	add    $0x10,%esp
f011d352:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d358:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d35e:	89 c1                	mov    %eax,%ecx
f011d360:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d367:	10 00 00 
f011d36a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d370:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d375:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d37b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d381:	ba 00 00 00 00       	mov    $0x0,%edx
f011d386:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d38c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d392:	29 d0                	sub    %edx,%eax
f011d394:	89 c3                	mov    %eax,%ebx
f011d396:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d39d:	10 00 00 
f011d3a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d3a5:	0f b6 d0             	movzbl %al,%edx
f011d3a8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d3ae:	01 d0                	add    %edx,%eax
f011d3b0:	48                   	dec    %eax
f011d3b1:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d3b7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d3bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3c2:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d3c8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d3ce:	29 d0                	sub    %edx,%eax
f011d3d0:	01 c3                	add    %eax,%ebx
f011d3d2:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d3d9:	10 00 00 
f011d3dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d3e1:	0f b6 c0             	movzbl %al,%eax
f011d3e4:	c1 e0 04             	shl    $0x4,%eax
f011d3e7:	89 c2                	mov    %eax,%edx
f011d3e9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d3ef:	01 d0                	add    %edx,%eax
f011d3f1:	48                   	dec    %eax
f011d3f2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d3f8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d3fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011d403:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d409:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d40f:	29 d0                	sub    %edx,%eax
f011d411:	01 d8                	add    %ebx,%eax
f011d413:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d418:	39 c1                	cmp    %eax,%ecx
f011d41a:	74 17                	je     f011d433 <test_kmalloc_firstfit1+0x133b>
f011d41c:	83 ec 04             	sub    $0x4,%esp
f011d41f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d424:	68 80 03 00 00       	push   $0x380
f011d429:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d42e:	e8 c8 2d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d433:	e8 04 69 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d438:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d43b:	74 17                	je     f011d454 <test_kmalloc_firstfit1+0x135c>
f011d43d:	83 ec 04             	sub    $0x4,%esp
f011d440:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d445:	68 81 03 00 00       	push   $0x381
f011d44a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d44f:	e8 a7 2d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d454:	e8 f8 f5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d459:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d45c:	29 c2                	sub    %eax,%edx
f011d45e:	89 d0                	mov    %edx,%eax
f011d460:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d465:	74 17                	je     f011d47e <test_kmalloc_firstfit1+0x1386>
f011d467:	83 ec 04             	sub    $0x4,%esp
f011d46a:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d46f:	68 82 03 00 00       	push   $0x382
f011d474:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d479:	e8 7d 2d fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d47e:	83 ec 0c             	sub    $0xc,%esp
f011d481:	68 90 b3 13 f0       	push   $0xf013b390
f011d486:	e8 f7 37 fe ff       	call   f0100c82 <cprintf>
f011d48b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d48e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d493:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d496:	5b                   	pop    %ebx
f011d497:	5f                   	pop    %edi
f011d498:	5d                   	pop    %ebp
f011d499:	c3                   	ret    

f011d49a <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d49a:	55                   	push   %ebp
f011d49b:	89 e5                	mov    %esp,%ebp
f011d49d:	57                   	push   %edi
f011d49e:	53                   	push   %ebx
f011d49f:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d4a5:	83 ec 0c             	sub    $0xc,%esp
f011d4a8:	68 dc ac 13 f0       	push   $0xf013acdc
f011d4ad:	e8 d0 37 fe ff       	call   f0100c82 <cprintf>
f011d4b2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d4b5:	83 ec 0c             	sub    $0xc,%esp
f011d4b8:	68 0c ad 13 f0       	push   $0xf013ad0c
f011d4bd:	e8 c0 37 fe ff       	call   f0100c82 <cprintf>
f011d4c2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d4c5:	83 ec 0c             	sub    $0xc,%esp
f011d4c8:	68 dc ac 13 f0       	push   $0xf013acdc
f011d4cd:	e8 b0 37 fe ff       	call   f0100c82 <cprintf>
f011d4d2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d4d5:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d4db:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d4e0:	b8 00 00 00 00       	mov    $0x0,%eax
f011d4e5:	89 d7                	mov    %edx,%edi
f011d4e7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d4e9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d4f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d4f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d4fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d4fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011d503:	f7 75 f4             	divl   -0xc(%ebp)
f011d506:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d509:	29 d0                	sub    %edx,%eax
f011d50b:	89 c1                	mov    %eax,%ecx
f011d50d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d514:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d519:	0f b6 d0             	movzbl %al,%edx
f011d51c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d51f:	01 d0                	add    %edx,%eax
f011d521:	48                   	dec    %eax
f011d522:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d525:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d528:	ba 00 00 00 00       	mov    $0x0,%edx
f011d52d:	f7 75 ec             	divl   -0x14(%ebp)
f011d530:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d533:	29 d0                	sub    %edx,%eax
f011d535:	01 c1                	add    %eax,%ecx
f011d537:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d53e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d543:	0f b6 c0             	movzbl %al,%eax
f011d546:	c1 e0 04             	shl    $0x4,%eax
f011d549:	89 c2                	mov    %eax,%edx
f011d54b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d54e:	01 d0                	add    %edx,%eax
f011d550:	48                   	dec    %eax
f011d551:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d554:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d557:	ba 00 00 00 00       	mov    $0x0,%edx
f011d55c:	f7 75 e4             	divl   -0x1c(%ebp)
f011d55f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d562:	29 d0                	sub    %edx,%eax
f011d564:	01 c8                	add    %ecx,%eax
f011d566:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d56b:	29 c2                	sub    %eax,%edx
f011d56d:	89 d0                	mov    %edx,%eax
f011d56f:	83 ec 0c             	sub    $0xc,%esp
f011d572:	50                   	push   %eax
f011d573:	e8 9b a2 fe ff       	call   f0107813 <kmalloc>
f011d578:	83 c4 10             	add    $0x10,%esp
f011d57b:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d581:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d587:	85 c0                	test   %eax,%eax
f011d589:	74 17                	je     f011d5a2 <test_kmalloc_firstfit2+0x108>
f011d58b:	83 ec 04             	sub    $0x4,%esp
f011d58e:	68 dc b3 13 f0       	push   $0xf013b3dc
f011d593:	68 97 03 00 00       	push   $0x397
f011d598:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d59d:	e8 59 2c fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5a2:	e8 aa f4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d5a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5aa:	e8 8d 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d5af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d5b2:	83 ec 0c             	sub    $0xc,%esp
f011d5b5:	68 00 fc 1f 00       	push   $0x1ffc00
f011d5ba:	e8 54 a2 fe ff       	call   f0107813 <kmalloc>
f011d5bf:	83 c4 10             	add    $0x10,%esp
f011d5c2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d5c8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d5ce:	89 c1                	mov    %eax,%ecx
f011d5d0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d5d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d5da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5df:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d5e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d5e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5ea:	f7 75 d4             	divl   -0x2c(%ebp)
f011d5ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d5f0:	29 d0                	sub    %edx,%eax
f011d5f2:	89 c3                	mov    %eax,%ebx
f011d5f4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d5fb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d600:	0f b6 d0             	movzbl %al,%edx
f011d603:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d606:	01 d0                	add    %edx,%eax
f011d608:	48                   	dec    %eax
f011d609:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d60c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d60f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d614:	f7 75 cc             	divl   -0x34(%ebp)
f011d617:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d61a:	29 d0                	sub    %edx,%eax
f011d61c:	01 c3                	add    %eax,%ebx
f011d61e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d625:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d62a:	0f b6 c0             	movzbl %al,%eax
f011d62d:	c1 e0 04             	shl    $0x4,%eax
f011d630:	89 c2                	mov    %eax,%edx
f011d632:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d635:	01 d0                	add    %edx,%eax
f011d637:	48                   	dec    %eax
f011d638:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d63b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d63e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d643:	f7 75 c4             	divl   -0x3c(%ebp)
f011d646:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d649:	29 d0                	sub    %edx,%eax
f011d64b:	01 d8                	add    %ebx,%eax
f011d64d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d652:	39 c1                	cmp    %eax,%ecx
f011d654:	74 17                	je     f011d66d <test_kmalloc_firstfit2+0x1d3>
f011d656:	83 ec 04             	sub    $0x4,%esp
f011d659:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d65e:	68 a1 03 00 00       	push   $0x3a1
f011d663:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d668:	e8 8e 2b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d66d:	e8 ca 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d672:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d675:	74 17                	je     f011d68e <test_kmalloc_firstfit2+0x1f4>
f011d677:	83 ec 04             	sub    $0x4,%esp
f011d67a:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d67f:	68 a2 03 00 00       	push   $0x3a2
f011d684:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d689:	e8 6d 2b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d68e:	e8 be f3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d693:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d696:	29 c2                	sub    %eax,%edx
f011d698:	89 d0                	mov    %edx,%eax
f011d69a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d69f:	74 17                	je     f011d6b8 <test_kmalloc_firstfit2+0x21e>
f011d6a1:	83 ec 04             	sub    $0x4,%esp
f011d6a4:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d6a9:	68 a3 03 00 00       	push   $0x3a3
f011d6ae:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d6b3:	e8 43 2b fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d6b8:	e8 94 f3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d6bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6c0:	e8 77 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d6c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d6c8:	83 ec 0c             	sub    $0xc,%esp
f011d6cb:	68 00 fc 1f 00       	push   $0x1ffc00
f011d6d0:	e8 3e a1 fe ff       	call   f0107813 <kmalloc>
f011d6d5:	83 c4 10             	add    $0x10,%esp
f011d6d8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d6de:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d6e4:	89 c1                	mov    %eax,%ecx
f011d6e6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d6ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d6f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d6f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d6f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d700:	f7 75 bc             	divl   -0x44(%ebp)
f011d703:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d706:	29 d0                	sub    %edx,%eax
f011d708:	89 c3                	mov    %eax,%ebx
f011d70a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d711:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d716:	0f b6 d0             	movzbl %al,%edx
f011d719:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d71c:	01 d0                	add    %edx,%eax
f011d71e:	48                   	dec    %eax
f011d71f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d722:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d725:	ba 00 00 00 00       	mov    $0x0,%edx
f011d72a:	f7 75 b4             	divl   -0x4c(%ebp)
f011d72d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d730:	29 d0                	sub    %edx,%eax
f011d732:	01 c3                	add    %eax,%ebx
f011d734:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d73b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d740:	0f b6 c0             	movzbl %al,%eax
f011d743:	c1 e0 04             	shl    $0x4,%eax
f011d746:	89 c2                	mov    %eax,%edx
f011d748:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d74b:	01 d0                	add    %edx,%eax
f011d74d:	48                   	dec    %eax
f011d74e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d751:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d754:	ba 00 00 00 00       	mov    $0x0,%edx
f011d759:	f7 75 ac             	divl   -0x54(%ebp)
f011d75c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d75f:	29 d0                	sub    %edx,%eax
f011d761:	01 d8                	add    %ebx,%eax
f011d763:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d768:	39 c1                	cmp    %eax,%ecx
f011d76a:	74 17                	je     f011d783 <test_kmalloc_firstfit2+0x2e9>
f011d76c:	83 ec 04             	sub    $0x4,%esp
f011d76f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d774:	68 a9 03 00 00       	push   $0x3a9
f011d779:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d77e:	e8 78 2a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d783:	e8 b4 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d788:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d78b:	74 17                	je     f011d7a4 <test_kmalloc_firstfit2+0x30a>
f011d78d:	83 ec 04             	sub    $0x4,%esp
f011d790:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d795:	68 aa 03 00 00       	push   $0x3aa
f011d79a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d79f:	e8 57 2a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d7a4:	e8 a8 f2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d7a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d7ac:	29 c2                	sub    %eax,%edx
f011d7ae:	89 d0                	mov    %edx,%eax
f011d7b0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7b5:	74 17                	je     f011d7ce <test_kmalloc_firstfit2+0x334>
f011d7b7:	83 ec 04             	sub    $0x4,%esp
f011d7ba:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d7bf:	68 ab 03 00 00       	push   $0x3ab
f011d7c4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d7c9:	e8 2d 2a fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d7ce:	e8 7e f2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d7d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7d6:	e8 61 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d7db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d7de:	83 ec 0c             	sub    $0xc,%esp
f011d7e1:	68 00 08 00 00       	push   $0x800
f011d7e6:	e8 28 a0 fe ff       	call   f0107813 <kmalloc>
f011d7eb:	83 c4 10             	add    $0x10,%esp
f011d7ee:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d7f4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d7fa:	89 c1                	mov    %eax,%ecx
f011d7fc:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d803:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d806:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d80b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d80e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d811:	ba 00 00 00 00       	mov    $0x0,%edx
f011d816:	f7 75 a4             	divl   -0x5c(%ebp)
f011d819:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d81c:	29 d0                	sub    %edx,%eax
f011d81e:	89 c3                	mov    %eax,%ebx
f011d820:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d827:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d82c:	0f b6 d0             	movzbl %al,%edx
f011d82f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d832:	01 d0                	add    %edx,%eax
f011d834:	48                   	dec    %eax
f011d835:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d838:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d83b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d840:	f7 75 9c             	divl   -0x64(%ebp)
f011d843:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d846:	29 d0                	sub    %edx,%eax
f011d848:	01 c3                	add    %eax,%ebx
f011d84a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d851:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d856:	0f b6 c0             	movzbl %al,%eax
f011d859:	c1 e0 04             	shl    $0x4,%eax
f011d85c:	89 c2                	mov    %eax,%edx
f011d85e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d861:	01 d0                	add    %edx,%eax
f011d863:	48                   	dec    %eax
f011d864:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d867:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d86a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d86f:	f7 75 94             	divl   -0x6c(%ebp)
f011d872:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d875:	29 d0                	sub    %edx,%eax
f011d877:	01 d8                	add    %ebx,%eax
f011d879:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d87e:	39 c1                	cmp    %eax,%ecx
f011d880:	73 17                	jae    f011d899 <test_kmalloc_firstfit2+0x3ff>
f011d882:	83 ec 04             	sub    $0x4,%esp
f011d885:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d88a:	68 b1 03 00 00       	push   $0x3b1
f011d88f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d894:	e8 62 29 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d899:	e8 9e 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d89e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8a1:	74 17                	je     f011d8ba <test_kmalloc_firstfit2+0x420>
f011d8a3:	83 ec 04             	sub    $0x4,%esp
f011d8a6:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d8ab:	68 b2 03 00 00       	push   $0x3b2
f011d8b0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d8b5:	e8 41 29 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d8ba:	e8 92 f1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d8bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d8c2:	29 c2                	sub    %eax,%edx
f011d8c4:	89 d0                	mov    %edx,%eax
f011d8c6:	83 f8 01             	cmp    $0x1,%eax
f011d8c9:	74 17                	je     f011d8e2 <test_kmalloc_firstfit2+0x448>
f011d8cb:	83 ec 04             	sub    $0x4,%esp
f011d8ce:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d8d3:	68 b3 03 00 00       	push   $0x3b3
f011d8d8:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d8dd:	e8 19 29 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d8e2:	e8 6a f1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d8e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8ea:	e8 4d 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d8ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d8f2:	83 ec 0c             	sub    $0xc,%esp
f011d8f5:	68 00 08 00 00       	push   $0x800
f011d8fa:	e8 14 9f fe ff       	call   f0107813 <kmalloc>
f011d8ff:	83 c4 10             	add    $0x10,%esp
f011d902:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d908:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d90e:	89 c1                	mov    %eax,%ecx
f011d910:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d917:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d91a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d91f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d922:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d925:	ba 00 00 00 00       	mov    $0x0,%edx
f011d92a:	f7 75 8c             	divl   -0x74(%ebp)
f011d92d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d930:	29 d0                	sub    %edx,%eax
f011d932:	89 c3                	mov    %eax,%ebx
f011d934:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d93b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d940:	0f b6 d0             	movzbl %al,%edx
f011d943:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d946:	01 d0                	add    %edx,%eax
f011d948:	48                   	dec    %eax
f011d949:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d94c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d94f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d954:	f7 75 84             	divl   -0x7c(%ebp)
f011d957:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d95a:	29 d0                	sub    %edx,%eax
f011d95c:	01 c3                	add    %eax,%ebx
f011d95e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d965:	10 00 00 
f011d968:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d96d:	0f b6 c0             	movzbl %al,%eax
f011d970:	c1 e0 04             	shl    $0x4,%eax
f011d973:	89 c2                	mov    %eax,%edx
f011d975:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d97b:	01 d0                	add    %edx,%eax
f011d97d:	48                   	dec    %eax
f011d97e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d984:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d98a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d98f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d995:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d99b:	29 d0                	sub    %edx,%eax
f011d99d:	01 d8                	add    %ebx,%eax
f011d99f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d9a4:	39 c1                	cmp    %eax,%ecx
f011d9a6:	74 17                	je     f011d9bf <test_kmalloc_firstfit2+0x525>
f011d9a8:	83 ec 04             	sub    $0x4,%esp
f011d9ab:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011d9b0:	68 b9 03 00 00       	push   $0x3b9
f011d9b5:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d9ba:	e8 3c 28 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9bf:	e8 78 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d9c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d9c7:	74 17                	je     f011d9e0 <test_kmalloc_firstfit2+0x546>
f011d9c9:	83 ec 04             	sub    $0x4,%esp
f011d9cc:	68 b4 ad 13 f0       	push   $0xf013adb4
f011d9d1:	68 ba 03 00 00       	push   $0x3ba
f011d9d6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011d9db:	e8 1b 28 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d9e0:	e8 6c f0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011d9e5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d9e8:	29 c2                	sub    %eax,%edx
f011d9ea:	89 d0                	mov    %edx,%eax
f011d9ec:	83 f8 01             	cmp    $0x1,%eax
f011d9ef:	74 17                	je     f011da08 <test_kmalloc_firstfit2+0x56e>
f011d9f1:	83 ec 04             	sub    $0x4,%esp
f011d9f4:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011d9f9:	68 bb 03 00 00       	push   $0x3bb
f011d9fe:	68 9a ad 13 f0       	push   $0xf013ad9a
f011da03:	e8 f3 27 fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011da08:	e8 44 f0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011da0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da10:	e8 27 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011da18:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011da1e:	83 ec 0c             	sub    $0xc,%esp
f011da21:	50                   	push   %eax
f011da22:	e8 b7 9e fe ff       	call   f01078de <kfree>
f011da27:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da2a:	e8 0d 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da2f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da32:	74 17                	je     f011da4b <test_kmalloc_firstfit2+0x5b1>
f011da34:	83 ec 04             	sub    $0x4,%esp
f011da37:	68 b4 ad 13 f0       	push   $0xf013adb4
f011da3c:	68 c1 03 00 00       	push   $0x3c1
f011da41:	68 9a ad 13 f0       	push   $0xf013ad9a
f011da46:	e8 b0 27 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011da4b:	e8 01 f0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011da50:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011da53:	83 f8 01             	cmp    $0x1,%eax
f011da56:	74 17                	je     f011da6f <test_kmalloc_firstfit2+0x5d5>
f011da58:	83 ec 04             	sub    $0x4,%esp
f011da5b:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011da60:	68 c2 03 00 00       	push   $0x3c2
f011da65:	68 9a ad 13 f0       	push   $0xf013ad9a
f011da6a:	e8 8c 27 fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011da6f:	e8 dd ef fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011da74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da77:	e8 c0 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011da7f:	83 ec 0c             	sub    $0xc,%esp
f011da82:	68 00 1c 00 00       	push   $0x1c00
f011da87:	e8 87 9d fe ff       	call   f0107813 <kmalloc>
f011da8c:	83 c4 10             	add    $0x10,%esp
f011da8f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011da95:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011da9b:	89 c1                	mov    %eax,%ecx
f011da9d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011daa4:	10 00 00 
f011daa7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011daad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dab2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011dab8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dabe:	ba 00 00 00 00       	mov    $0x0,%edx
f011dac3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dac9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dacf:	29 d0                	sub    %edx,%eax
f011dad1:	89 c3                	mov    %eax,%ebx
f011dad3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dada:	10 00 00 
f011dadd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dae2:	0f b6 d0             	movzbl %al,%edx
f011dae5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011daeb:	01 d0                	add    %edx,%eax
f011daed:	48                   	dec    %eax
f011daee:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011daf4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dafa:	ba 00 00 00 00       	mov    $0x0,%edx
f011daff:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011db05:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011db0b:	29 d0                	sub    %edx,%eax
f011db0d:	01 c3                	add    %eax,%ebx
f011db0f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011db16:	10 00 00 
f011db19:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db1e:	0f b6 c0             	movzbl %al,%eax
f011db21:	c1 e0 04             	shl    $0x4,%eax
f011db24:	89 c2                	mov    %eax,%edx
f011db26:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011db2c:	01 d0                	add    %edx,%eax
f011db2e:	48                   	dec    %eax
f011db2f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011db35:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011db3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011db40:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011db46:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011db4c:	29 d0                	sub    %edx,%eax
f011db4e:	01 d8                	add    %ebx,%eax
f011db50:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011db55:	39 c1                	cmp    %eax,%ecx
f011db57:	74 17                	je     f011db70 <test_kmalloc_firstfit2+0x6d6>
f011db59:	83 ec 04             	sub    $0x4,%esp
f011db5c:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011db61:	68 c8 03 00 00       	push   $0x3c8
f011db66:	68 9a ad 13 f0       	push   $0xf013ad9a
f011db6b:	e8 8b 26 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db70:	e8 c7 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011db75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db78:	74 17                	je     f011db91 <test_kmalloc_firstfit2+0x6f7>
f011db7a:	83 ec 04             	sub    $0x4,%esp
f011db7d:	68 b4 ad 13 f0       	push   $0xf013adb4
f011db82:	68 c9 03 00 00       	push   $0x3c9
f011db87:	68 9a ad 13 f0       	push   $0xf013ad9a
f011db8c:	e8 6a 26 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011db91:	e8 bb ee fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011db96:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011db99:	29 c2                	sub    %eax,%edx
f011db9b:	89 d0                	mov    %edx,%eax
f011db9d:	83 f8 02             	cmp    $0x2,%eax
f011dba0:	74 17                	je     f011dbb9 <test_kmalloc_firstfit2+0x71f>
f011dba2:	83 ec 04             	sub    $0x4,%esp
f011dba5:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011dbaa:	68 ca 03 00 00       	push   $0x3ca
f011dbaf:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dbb4:	e8 42 26 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dbb9:	e8 93 ee fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011dbbe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbc1:	e8 76 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dbc6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011dbc9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dbcf:	83 ec 0c             	sub    $0xc,%esp
f011dbd2:	50                   	push   %eax
f011dbd3:	e8 06 9d fe ff       	call   f01078de <kfree>
f011dbd8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbdb:	e8 5c 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dbe0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dbe3:	74 17                	je     f011dbfc <test_kmalloc_firstfit2+0x762>
f011dbe5:	83 ec 04             	sub    $0x4,%esp
f011dbe8:	68 b4 ad 13 f0       	push   $0xf013adb4
f011dbed:	68 d0 03 00 00       	push   $0x3d0
f011dbf2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dbf7:	e8 ff 25 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dbfc:	e8 50 ee fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011dc01:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dc04:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc09:	74 17                	je     f011dc22 <test_kmalloc_firstfit2+0x788>
f011dc0b:	83 ec 04             	sub    $0x4,%esp
f011dc0e:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011dc13:	68 d1 03 00 00       	push   $0x3d1
f011dc18:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dc1d:	e8 d9 25 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dc22:	e8 2a ee fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011dc27:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc2a:	e8 0d 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dc2f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dc32:	83 ec 0c             	sub    $0xc,%esp
f011dc35:	68 00 fc 2f 00       	push   $0x2ffc00
f011dc3a:	e8 d4 9b fe ff       	call   f0107813 <kmalloc>
f011dc3f:	83 c4 10             	add    $0x10,%esp
f011dc42:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dc48:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dc4e:	89 c1                	mov    %eax,%ecx
f011dc50:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dc57:	10 00 00 
f011dc5a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dc60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc65:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011dc6b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dc71:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc76:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011dc7c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dc82:	29 d0                	sub    %edx,%eax
f011dc84:	89 c3                	mov    %eax,%ebx
f011dc86:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011dc8d:	10 00 00 
f011dc90:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dc95:	0f b6 d0             	movzbl %al,%edx
f011dc98:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dc9e:	01 d0                	add    %edx,%eax
f011dca0:	48                   	dec    %eax
f011dca1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011dca7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dcad:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011dcb8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dcbe:	29 d0                	sub    %edx,%eax
f011dcc0:	01 c3                	add    %eax,%ebx
f011dcc2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dcc9:	10 00 00 
f011dccc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dcd1:	0f b6 c0             	movzbl %al,%eax
f011dcd4:	c1 e0 04             	shl    $0x4,%eax
f011dcd7:	89 c2                	mov    %eax,%edx
f011dcd9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dcdf:	01 d0                	add    %edx,%eax
f011dce1:	48                   	dec    %eax
f011dce2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011dce8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dcee:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcf3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011dcf9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dcff:	29 d0                	sub    %edx,%eax
f011dd01:	01 d8                	add    %ebx,%eax
f011dd03:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011dd08:	39 c1                	cmp    %eax,%ecx
f011dd0a:	74 17                	je     f011dd23 <test_kmalloc_firstfit2+0x889>
f011dd0c:	83 ec 04             	sub    $0x4,%esp
f011dd0f:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011dd14:	68 d7 03 00 00       	push   $0x3d7
f011dd19:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dd1e:	e8 d8 24 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd23:	e8 14 60 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd28:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd2b:	74 17                	je     f011dd44 <test_kmalloc_firstfit2+0x8aa>
f011dd2d:	83 ec 04             	sub    $0x4,%esp
f011dd30:	68 b4 ad 13 f0       	push   $0xf013adb4
f011dd35:	68 d8 03 00 00       	push   $0x3d8
f011dd3a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dd3f:	e8 b7 24 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dd44:	e8 08 ed fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011dd49:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dd4c:	29 c2                	sub    %eax,%edx
f011dd4e:	89 d0                	mov    %edx,%eax
f011dd50:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dd55:	74 17                	je     f011dd6e <test_kmalloc_firstfit2+0x8d4>
f011dd57:	83 ec 04             	sub    $0x4,%esp
f011dd5a:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011dd5f:	68 d9 03 00 00       	push   $0x3d9
f011dd64:	68 9a ad 13 f0       	push   $0xf013ad9a
f011dd69:	e8 8d 24 fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011dd6e:	e8 de ec fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011dd73:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd76:	e8 c1 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd7b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011dd7e:	83 ec 0c             	sub    $0xc,%esp
f011dd81:	68 00 18 20 00       	push   $0x201800
f011dd86:	e8 88 9a fe ff       	call   f0107813 <kmalloc>
f011dd8b:	83 c4 10             	add    $0x10,%esp
f011dd8e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dd94:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dd9a:	89 c1                	mov    %eax,%ecx
f011dd9c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dda3:	10 00 00 
f011dda6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ddac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddb1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ddb7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ddbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ddc8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ddce:	29 d0                	sub    %edx,%eax
f011ddd0:	89 c3                	mov    %eax,%ebx
f011ddd2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ddd9:	10 00 00 
f011dddc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dde1:	0f b6 d0             	movzbl %al,%edx
f011dde4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ddea:	01 d0                	add    %edx,%eax
f011ddec:	48                   	dec    %eax
f011dded:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ddf3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ddf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddfe:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011de04:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011de0a:	29 d0                	sub    %edx,%eax
f011de0c:	01 c3                	add    %eax,%ebx
f011de0e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011de15:	10 00 00 
f011de18:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011de1d:	0f b6 c0             	movzbl %al,%eax
f011de20:	c1 e0 04             	shl    $0x4,%eax
f011de23:	89 c2                	mov    %eax,%edx
f011de25:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011de2b:	01 d0                	add    %edx,%eax
f011de2d:	48                   	dec    %eax
f011de2e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011de34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011de3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011de3f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011de45:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011de4b:	29 d0                	sub    %edx,%eax
f011de4d:	01 d8                	add    %ebx,%eax
f011de4f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011de54:	39 c1                	cmp    %eax,%ecx
f011de56:	74 17                	je     f011de6f <test_kmalloc_firstfit2+0x9d5>
f011de58:	83 ec 04             	sub    $0x4,%esp
f011de5b:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011de60:	68 df 03 00 00       	push   $0x3df
f011de65:	68 9a ad 13 f0       	push   $0xf013ad9a
f011de6a:	e8 8c 23 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de6f:	e8 c8 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011de74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de77:	74 17                	je     f011de90 <test_kmalloc_firstfit2+0x9f6>
f011de79:	83 ec 04             	sub    $0x4,%esp
f011de7c:	68 b4 ad 13 f0       	push   $0xf013adb4
f011de81:	68 e0 03 00 00       	push   $0x3e0
f011de86:	68 9a ad 13 f0       	push   $0xf013ad9a
f011de8b:	e8 6b 23 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011de90:	e8 bc eb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011de95:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011de98:	29 c2                	sub    %eax,%edx
f011de9a:	89 d0                	mov    %edx,%eax
f011de9c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dea1:	74 17                	je     f011deba <test_kmalloc_firstfit2+0xa20>
f011dea3:	83 ec 04             	sub    $0x4,%esp
f011dea6:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011deab:	68 e1 03 00 00       	push   $0x3e1
f011deb0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011deb5:	e8 41 23 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011deba:	e8 92 eb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011debf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dec2:	e8 75 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dec7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011deca:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ded0:	83 ec 0c             	sub    $0xc,%esp
f011ded3:	50                   	push   %eax
f011ded4:	e8 05 9a fe ff       	call   f01078de <kfree>
f011ded9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dedc:	e8 5b 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dee1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dee4:	74 17                	je     f011defd <test_kmalloc_firstfit2+0xa63>
f011dee6:	83 ec 04             	sub    $0x4,%esp
f011dee9:	68 b4 ad 13 f0       	push   $0xf013adb4
f011deee:	68 e7 03 00 00       	push   $0x3e7
f011def3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011def8:	e8 fe 22 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011defd:	e8 4f eb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011df02:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011df05:	3d 00 03 00 00       	cmp    $0x300,%eax
f011df0a:	74 17                	je     f011df23 <test_kmalloc_firstfit2+0xa89>
f011df0c:	83 ec 04             	sub    $0x4,%esp
f011df0f:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011df14:	68 e8 03 00 00       	push   $0x3e8
f011df19:	68 9a ad 13 f0       	push   $0xf013ad9a
f011df1e:	e8 d8 22 fe ff       	call   f01001fb <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011df23:	e8 29 eb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011df28:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df2b:	e8 0c 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df30:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011df33:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011df39:	83 ec 0c             	sub    $0xc,%esp
f011df3c:	50                   	push   %eax
f011df3d:	e8 9c 99 fe ff       	call   f01078de <kfree>
f011df42:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011df45:	e8 07 eb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011df4a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011df4d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011df52:	74 17                	je     f011df6b <test_kmalloc_firstfit2+0xad1>
f011df54:	83 ec 04             	sub    $0x4,%esp
f011df57:	68 f7 b1 13 f0       	push   $0xf013b1f7
f011df5c:	68 ee 03 00 00       	push   $0x3ee
f011df61:	68 9a ad 13 f0       	push   $0xf013ad9a
f011df66:	e8 90 22 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df6b:	e8 cc 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df70:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df73:	74 17                	je     f011df8c <test_kmalloc_firstfit2+0xaf2>
f011df75:	83 ec 04             	sub    $0x4,%esp
f011df78:	68 b4 ad 13 f0       	push   $0xf013adb4
f011df7d:	68 ef 03 00 00       	push   $0x3ef
f011df82:	68 9a ad 13 f0       	push   $0xf013ad9a
f011df87:	e8 6f 22 fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011df8c:	e8 c0 ea fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011df91:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df94:	e8 a3 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df99:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011df9c:	83 ec 0c             	sub    $0xc,%esp
f011df9f:	68 00 fc 4f 00       	push   $0x4ffc00
f011dfa4:	e8 6a 98 fe ff       	call   f0107813 <kmalloc>
f011dfa9:	83 c4 10             	add    $0x10,%esp
f011dfac:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011dfb2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dfb8:	89 c1                	mov    %eax,%ecx
f011dfba:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011dfc1:	10 00 00 
f011dfc4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011dfca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfcf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011dfd5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dfdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfe0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011dfe6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dfec:	29 d0                	sub    %edx,%eax
f011dfee:	89 c3                	mov    %eax,%ebx
f011dff0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011dff7:	10 00 00 
f011dffa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dfff:	0f b6 d0             	movzbl %al,%edx
f011e002:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e008:	01 d0                	add    %edx,%eax
f011e00a:	48                   	dec    %eax
f011e00b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e011:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e017:	ba 00 00 00 00       	mov    $0x0,%edx
f011e01c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e022:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e028:	29 d0                	sub    %edx,%eax
f011e02a:	01 c3                	add    %eax,%ebx
f011e02c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e033:	10 00 00 
f011e036:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e03b:	0f b6 c0             	movzbl %al,%eax
f011e03e:	c1 e0 04             	shl    $0x4,%eax
f011e041:	89 c2                	mov    %eax,%edx
f011e043:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e049:	01 d0                	add    %edx,%eax
f011e04b:	48                   	dec    %eax
f011e04c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e052:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e058:	ba 00 00 00 00       	mov    $0x0,%edx
f011e05d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e063:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e069:	29 d0                	sub    %edx,%eax
f011e06b:	01 d8                	add    %ebx,%eax
f011e06d:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e072:	39 c1                	cmp    %eax,%ecx
f011e074:	74 17                	je     f011e08d <test_kmalloc_firstfit2+0xbf3>
f011e076:	83 ec 04             	sub    $0x4,%esp
f011e079:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011e07e:	68 f5 03 00 00       	push   $0x3f5
f011e083:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e088:	e8 6e 21 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e08d:	e8 aa 5c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e092:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e095:	74 17                	je     f011e0ae <test_kmalloc_firstfit2+0xc14>
f011e097:	83 ec 04             	sub    $0x4,%esp
f011e09a:	68 b4 ad 13 f0       	push   $0xf013adb4
f011e09f:	68 f6 03 00 00       	push   $0x3f6
f011e0a4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e0a9:	e8 4d 21 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e0ae:	e8 9e e9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e0b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0b6:	29 c2                	sub    %eax,%edx
f011e0b8:	89 d0                	mov    %edx,%eax
f011e0ba:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e0bf:	74 17                	je     f011e0d8 <test_kmalloc_firstfit2+0xc3e>
f011e0c1:	83 ec 04             	sub    $0x4,%esp
f011e0c4:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011e0c9:	68 f7 03 00 00       	push   $0x3f7
f011e0ce:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e0d3:	e8 23 21 fe ff       	call   f01001fb <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e0d8:	e8 74 e9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e0dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e0e0:	e8 57 5c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e0e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e0e8:	83 ec 0c             	sub    $0xc,%esp
f011e0eb:	68 00 fc 2f 00       	push   $0x2ffc00
f011e0f0:	e8 1e 97 fe ff       	call   f0107813 <kmalloc>
f011e0f5:	83 c4 10             	add    $0x10,%esp
f011e0f8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e0fe:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e104:	89 c1                	mov    %eax,%ecx
f011e106:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e10d:	10 00 00 
f011e110:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e116:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e11b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e121:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e127:	ba 00 00 00 00       	mov    $0x0,%edx
f011e12c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e132:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e138:	29 d0                	sub    %edx,%eax
f011e13a:	89 c3                	mov    %eax,%ebx
f011e13c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e143:	10 00 00 
f011e146:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e14b:	0f b6 d0             	movzbl %al,%edx
f011e14e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e154:	01 d0                	add    %edx,%eax
f011e156:	48                   	dec    %eax
f011e157:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e15d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e163:	ba 00 00 00 00       	mov    $0x0,%edx
f011e168:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e16e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e174:	29 d0                	sub    %edx,%eax
f011e176:	01 c3                	add    %eax,%ebx
f011e178:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e17f:	10 00 00 
f011e182:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e187:	0f b6 c0             	movzbl %al,%eax
f011e18a:	c1 e0 04             	shl    $0x4,%eax
f011e18d:	89 c2                	mov    %eax,%edx
f011e18f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e195:	01 d0                	add    %edx,%eax
f011e197:	48                   	dec    %eax
f011e198:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e19e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a9:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e1af:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e1b5:	29 d0                	sub    %edx,%eax
f011e1b7:	01 d8                	add    %ebx,%eax
f011e1b9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e1be:	39 c1                	cmp    %eax,%ecx
f011e1c0:	74 17                	je     f011e1d9 <test_kmalloc_firstfit2+0xd3f>
f011e1c2:	83 ec 04             	sub    $0x4,%esp
f011e1c5:	68 b4 b1 13 f0       	push   $0xf013b1b4
f011e1ca:	68 05 04 00 00       	push   $0x405
f011e1cf:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e1d4:	e8 22 20 fe ff       	call   f01001fb <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1d9:	e8 5e 5b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e1de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1e1:	74 17                	je     f011e1fa <test_kmalloc_firstfit2+0xd60>
f011e1e3:	83 ec 04             	sub    $0x4,%esp
f011e1e6:	68 b4 ad 13 f0       	push   $0xf013adb4
f011e1eb:	68 06 04 00 00       	push   $0x406
f011e1f0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e1f5:	e8 01 20 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e1fa:	e8 52 e8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e1ff:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e202:	29 c2                	sub    %eax,%edx
f011e204:	89 d0                	mov    %edx,%eax
f011e206:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e20b:	74 17                	je     f011e224 <test_kmalloc_firstfit2+0xd8a>
f011e20d:	83 ec 04             	sub    $0x4,%esp
f011e210:	68 e4 b1 13 f0       	push   $0xf013b1e4
f011e215:	68 07 04 00 00       	push   $0x407
f011e21a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e21f:	e8 d7 1f fe ff       	call   f01001fb <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e224:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e22b:	10 00 00 
f011e22e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e234:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e239:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e23f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e245:	ba 00 00 00 00       	mov    $0x0,%edx
f011e24a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e250:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e256:	29 d0                	sub    %edx,%eax
f011e258:	89 c1                	mov    %eax,%ecx
f011e25a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e261:	10 00 00 
f011e264:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e269:	0f b6 d0             	movzbl %al,%edx
f011e26c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e272:	01 d0                	add    %edx,%eax
f011e274:	48                   	dec    %eax
f011e275:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e27b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e281:	ba 00 00 00 00       	mov    $0x0,%edx
f011e286:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e28c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e292:	29 d0                	sub    %edx,%eax
f011e294:	01 c1                	add    %eax,%ecx
f011e296:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e29d:	10 00 00 
f011e2a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e2a5:	0f b6 c0             	movzbl %al,%eax
f011e2a8:	c1 e0 04             	shl    $0x4,%eax
f011e2ab:	89 c2                	mov    %eax,%edx
f011e2ad:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e2b3:	01 d0                	add    %edx,%eax
f011e2b5:	48                   	dec    %eax
f011e2b6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e2bc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e2c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2c7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e2cd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e2d3:	29 d0                	sub    %edx,%eax
f011e2d5:	01 c8                	add    %ecx,%eax
f011e2d7:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e2dc:	29 c2                	sub    %eax,%edx
f011e2de:	89 d0                	mov    %edx,%eax
f011e2e0:	83 ec 0c             	sub    $0xc,%esp
f011e2e3:	50                   	push   %eax
f011e2e4:	e8 2a 95 fe ff       	call   f0107813 <kmalloc>
f011e2e9:	83 c4 10             	add    $0x10,%esp
f011e2ec:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e2f2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e2f8:	85 c0                	test   %eax,%eax
f011e2fa:	74 17                	je     f011e313 <test_kmalloc_firstfit2+0xe79>
f011e2fc:	83 ec 04             	sub    $0x4,%esp
f011e2ff:	68 e4 b2 13 f0       	push   $0xf013b2e4
f011e304:	68 0d 04 00 00       	push   $0x40d
f011e309:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e30e:	e8 e8 1e fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e313:	83 ec 0c             	sub    $0xc,%esp
f011e316:	68 24 b4 13 f0       	push   $0xf013b424
f011e31b:	e8 62 29 fe ff       	call   f0100c82 <cprintf>
f011e320:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e323:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e328:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e32b:	5b                   	pop    %ebx
f011e32c:	5f                   	pop    %edi
f011e32d:	5d                   	pop    %ebp
f011e32e:	c3                   	ret    

f011e32f <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e32f:	55                   	push   %ebp
f011e330:	89 e5                	mov    %esp,%ebp
f011e332:	57                   	push   %edi
f011e333:	53                   	push   %ebx
f011e334:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e33a:	83 ec 0c             	sub    $0xc,%esp
f011e33d:	68 dc ac 13 f0       	push   $0xf013acdc
f011e342:	e8 3b 29 fe ff       	call   f0100c82 <cprintf>
f011e347:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e34a:	83 ec 0c             	sub    $0xc,%esp
f011e34d:	68 0c ad 13 f0       	push   $0xf013ad0c
f011e352:	e8 2b 29 fe ff       	call   f0100c82 <cprintf>
f011e357:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e35a:	83 ec 0c             	sub    $0xc,%esp
f011e35d:	68 dc ac 13 f0       	push   $0xf013acdc
f011e362:	e8 1b 29 fe ff       	call   f0100c82 <cprintf>
f011e367:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e36a:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e370:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e375:	b8 00 00 00 00       	mov    $0x0,%eax
f011e37a:	89 d7                	mov    %edx,%edi
f011e37c:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e37e:	e8 ce e6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e383:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e386:	e8 b1 59 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e38b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e38e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e395:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e39c:	eb 1f                	jmp    f011e3bd <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e39e:	83 ec 0c             	sub    $0xc,%esp
f011e3a1:	68 00 00 20 00       	push   $0x200000
f011e3a6:	e8 68 94 fe ff       	call   f0107813 <kmalloc>
f011e3ab:	83 c4 10             	add    $0x10,%esp
f011e3ae:	89 c2                	mov    %eax,%edx
f011e3b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e3b3:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e3ba:	ff 45 f4             	incl   -0xc(%ebp)
f011e3bd:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e3c1:	7e db                	jle    f011e39e <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e3c3:	83 ec 0c             	sub    $0xc,%esp
f011e3c6:	68 00 b0 1f 00       	push   $0x1fb000
f011e3cb:	e8 43 94 fe ff       	call   f0107813 <kmalloc>
f011e3d0:	83 c4 10             	add    $0x10,%esp
f011e3d3:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e3d9:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e3df:	89 c1                	mov    %eax,%ecx
f011e3e1:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e3e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e3eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e3f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e3f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e3f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3fb:	f7 75 e4             	divl   -0x1c(%ebp)
f011e3fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e401:	29 d0                	sub    %edx,%eax
f011e403:	89 c3                	mov    %eax,%ebx
f011e405:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e40c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e411:	0f b6 d0             	movzbl %al,%edx
f011e414:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e417:	01 d0                	add    %edx,%eax
f011e419:	48                   	dec    %eax
f011e41a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e41d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e420:	ba 00 00 00 00       	mov    $0x0,%edx
f011e425:	f7 75 dc             	divl   -0x24(%ebp)
f011e428:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e42b:	29 d0                	sub    %edx,%eax
f011e42d:	01 c3                	add    %eax,%ebx
f011e42f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e436:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e43b:	0f b6 c0             	movzbl %al,%eax
f011e43e:	c1 e0 04             	shl    $0x4,%eax
f011e441:	89 c2                	mov    %eax,%edx
f011e443:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e446:	01 d0                	add    %edx,%eax
f011e448:	48                   	dec    %eax
f011e449:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e44c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e454:	f7 75 d4             	divl   -0x2c(%ebp)
f011e457:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e45a:	29 d0                	sub    %edx,%eax
f011e45c:	01 d8                	add    %ebx,%eax
f011e45e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e463:	39 c1                	cmp    %eax,%ecx
f011e465:	0f 85 c0 04 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e46b:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e471:	89 c1                	mov    %eax,%ecx
f011e473:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e47a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e47d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e482:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e485:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e488:	ba 00 00 00 00       	mov    $0x0,%edx
f011e48d:	f7 75 cc             	divl   -0x34(%ebp)
f011e490:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e493:	29 d0                	sub    %edx,%eax
f011e495:	89 c3                	mov    %eax,%ebx
f011e497:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e49e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4a3:	0f b6 d0             	movzbl %al,%edx
f011e4a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e4a9:	01 d0                	add    %edx,%eax
f011e4ab:	48                   	dec    %eax
f011e4ac:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e4af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e4b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b7:	f7 75 c4             	divl   -0x3c(%ebp)
f011e4ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e4bd:	29 d0                	sub    %edx,%eax
f011e4bf:	01 c3                	add    %eax,%ebx
f011e4c1:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e4c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4cd:	0f b6 c0             	movzbl %al,%eax
f011e4d0:	c1 e0 04             	shl    $0x4,%eax
f011e4d3:	89 c2                	mov    %eax,%edx
f011e4d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e4d8:	01 d0                	add    %edx,%eax
f011e4da:	48                   	dec    %eax
f011e4db:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e4de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e4e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e6:	f7 75 bc             	divl   -0x44(%ebp)
f011e4e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e4ec:	29 d0                	sub    %edx,%eax
f011e4ee:	01 d8                	add    %ebx,%eax
f011e4f0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e4f5:	39 c1                	cmp    %eax,%ecx
f011e4f7:	0f 85 2e 04 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e4fd:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e503:	89 c1                	mov    %eax,%ecx
f011e505:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e50c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e50f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e514:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e517:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e51a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e51f:	f7 75 b4             	divl   -0x4c(%ebp)
f011e522:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e525:	29 d0                	sub    %edx,%eax
f011e527:	89 c3                	mov    %eax,%ebx
f011e529:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e530:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e535:	0f b6 d0             	movzbl %al,%edx
f011e538:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e53b:	01 d0                	add    %edx,%eax
f011e53d:	48                   	dec    %eax
f011e53e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e541:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e544:	ba 00 00 00 00       	mov    $0x0,%edx
f011e549:	f7 75 ac             	divl   -0x54(%ebp)
f011e54c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e54f:	29 d0                	sub    %edx,%eax
f011e551:	01 c3                	add    %eax,%ebx
f011e553:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e55a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e55f:	0f b6 c0             	movzbl %al,%eax
f011e562:	c1 e0 04             	shl    $0x4,%eax
f011e565:	89 c2                	mov    %eax,%edx
f011e567:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e56a:	01 d0                	add    %edx,%eax
f011e56c:	48                   	dec    %eax
f011e56d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e570:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e573:	ba 00 00 00 00       	mov    $0x0,%edx
f011e578:	f7 75 a4             	divl   -0x5c(%ebp)
f011e57b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e57e:	29 d0                	sub    %edx,%eax
f011e580:	01 d8                	add    %ebx,%eax
f011e582:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e587:	39 c1                	cmp    %eax,%ecx
f011e589:	0f 85 9c 03 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e58f:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e595:	89 c1                	mov    %eax,%ecx
f011e597:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e59e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e5a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5a6:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e5a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e5ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5b1:	f7 75 9c             	divl   -0x64(%ebp)
f011e5b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e5b7:	29 d0                	sub    %edx,%eax
f011e5b9:	89 c3                	mov    %eax,%ebx
f011e5bb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e5c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e5c7:	0f b6 d0             	movzbl %al,%edx
f011e5ca:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e5cd:	01 d0                	add    %edx,%eax
f011e5cf:	48                   	dec    %eax
f011e5d0:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e5d3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e5d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5db:	f7 75 94             	divl   -0x6c(%ebp)
f011e5de:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e5e1:	29 d0                	sub    %edx,%eax
f011e5e3:	01 c3                	add    %eax,%ebx
f011e5e5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e5ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e5f1:	0f b6 c0             	movzbl %al,%eax
f011e5f4:	c1 e0 04             	shl    $0x4,%eax
f011e5f7:	89 c2                	mov    %eax,%edx
f011e5f9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e5fc:	01 d0                	add    %edx,%eax
f011e5fe:	48                   	dec    %eax
f011e5ff:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e602:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e605:	ba 00 00 00 00       	mov    $0x0,%edx
f011e60a:	f7 75 8c             	divl   -0x74(%ebp)
f011e60d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e610:	29 d0                	sub    %edx,%eax
f011e612:	01 d8                	add    %ebx,%eax
f011e614:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e619:	39 c1                	cmp    %eax,%ecx
f011e61b:	0f 85 0a 03 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e621:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e627:	89 c1                	mov    %eax,%ecx
f011e629:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e630:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e633:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e638:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e63b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e63e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e643:	f7 75 84             	divl   -0x7c(%ebp)
f011e646:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e649:	29 d0                	sub    %edx,%eax
f011e64b:	89 c3                	mov    %eax,%ebx
f011e64d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e654:	10 00 00 
f011e657:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e65c:	0f b6 d0             	movzbl %al,%edx
f011e65f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e665:	01 d0                	add    %edx,%eax
f011e667:	48                   	dec    %eax
f011e668:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e66e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e674:	ba 00 00 00 00       	mov    $0x0,%edx
f011e679:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e67f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e685:	29 d0                	sub    %edx,%eax
f011e687:	01 c3                	add    %eax,%ebx
f011e689:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e690:	10 00 00 
f011e693:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e698:	0f b6 c0             	movzbl %al,%eax
f011e69b:	c1 e0 04             	shl    $0x4,%eax
f011e69e:	89 c2                	mov    %eax,%edx
f011e6a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e6a6:	01 d0                	add    %edx,%eax
f011e6a8:	48                   	dec    %eax
f011e6a9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e6af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e6b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6ba:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e6c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e6c6:	29 d0                	sub    %edx,%eax
f011e6c8:	01 d8                	add    %ebx,%eax
f011e6ca:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e6cf:	39 c1                	cmp    %eax,%ecx
f011e6d1:	0f 85 54 02 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e6d7:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e6dd:	89 c1                	mov    %eax,%ecx
f011e6df:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e6e6:	10 00 00 
f011e6e9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e6ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6f4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e6fa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e700:	ba 00 00 00 00       	mov    $0x0,%edx
f011e705:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e70b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e711:	29 d0                	sub    %edx,%eax
f011e713:	89 c3                	mov    %eax,%ebx
f011e715:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e71c:	10 00 00 
f011e71f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e724:	0f b6 d0             	movzbl %al,%edx
f011e727:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e72d:	01 d0                	add    %edx,%eax
f011e72f:	48                   	dec    %eax
f011e730:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e736:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e73c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e741:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e747:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e74d:	29 d0                	sub    %edx,%eax
f011e74f:	01 c3                	add    %eax,%ebx
f011e751:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e758:	10 00 00 
f011e75b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e760:	0f b6 c0             	movzbl %al,%eax
f011e763:	c1 e0 04             	shl    $0x4,%eax
f011e766:	89 c2                	mov    %eax,%edx
f011e768:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e76e:	01 d0                	add    %edx,%eax
f011e770:	48                   	dec    %eax
f011e771:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e777:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e77d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e782:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e788:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e78e:	29 d0                	sub    %edx,%eax
f011e790:	01 d8                	add    %ebx,%eax
f011e792:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e797:	39 c1                	cmp    %eax,%ecx
f011e799:	0f 85 8c 01 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e79f:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e7a5:	89 c1                	mov    %eax,%ecx
f011e7a7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e7ae:	10 00 00 
f011e7b1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e7b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e7bc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e7c2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e7c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7cd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e7d3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e7d9:	29 d0                	sub    %edx,%eax
f011e7db:	89 c3                	mov    %eax,%ebx
f011e7dd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e7e4:	10 00 00 
f011e7e7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e7ec:	0f b6 d0             	movzbl %al,%edx
f011e7ef:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e7f5:	01 d0                	add    %edx,%eax
f011e7f7:	48                   	dec    %eax
f011e7f8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e7fe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e804:	ba 00 00 00 00       	mov    $0x0,%edx
f011e809:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e80f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e815:	29 d0                	sub    %edx,%eax
f011e817:	01 c3                	add    %eax,%ebx
f011e819:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e820:	10 00 00 
f011e823:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e828:	0f b6 c0             	movzbl %al,%eax
f011e82b:	c1 e0 04             	shl    $0x4,%eax
f011e82e:	89 c2                	mov    %eax,%edx
f011e830:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e836:	01 d0                	add    %edx,%eax
f011e838:	48                   	dec    %eax
f011e839:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e83f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e845:	ba 00 00 00 00       	mov    $0x0,%edx
f011e84a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e850:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e856:	29 d0                	sub    %edx,%eax
f011e858:	01 d8                	add    %ebx,%eax
f011e85a:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e85f:	39 c1                	cmp    %eax,%ecx
f011e861:	0f 85 c4 00 00 00    	jne    f011e92b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e867:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e86d:	89 c1                	mov    %eax,%ecx
f011e86f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e876:	10 00 00 
f011e879:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e87f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e884:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e88a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e890:	ba 00 00 00 00       	mov    $0x0,%edx
f011e895:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e89b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e8a1:	29 d0                	sub    %edx,%eax
f011e8a3:	89 c3                	mov    %eax,%ebx
f011e8a5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e8ac:	10 00 00 
f011e8af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e8b4:	0f b6 d0             	movzbl %al,%edx
f011e8b7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e8bd:	01 d0                	add    %edx,%eax
f011e8bf:	48                   	dec    %eax
f011e8c0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e8c6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e8cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8d1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e8d7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e8dd:	29 d0                	sub    %edx,%eax
f011e8df:	01 c3                	add    %eax,%ebx
f011e8e1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e8e8:	10 00 00 
f011e8eb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e8f0:	0f b6 c0             	movzbl %al,%eax
f011e8f3:	c1 e0 04             	shl    $0x4,%eax
f011e8f6:	89 c2                	mov    %eax,%edx
f011e8f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e8fe:	01 d0                	add    %edx,%eax
f011e900:	48                   	dec    %eax
f011e901:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e907:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e90d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e912:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e918:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e91e:	29 d0                	sub    %edx,%eax
f011e920:	01 d8                	add    %ebx,%eax
f011e922:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e927:	39 c1                	cmp    %eax,%ecx
f011e929:	74 17                	je     f011e942 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e92b:	83 ec 04             	sub    $0x4,%esp
f011e92e:	68 70 b4 13 f0       	push   $0xf013b470
f011e933:	68 31 04 00 00       	push   $0x431
f011e938:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e93d:	e8 b9 18 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e942:	e8 f5 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e947:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e94a:	74 17                	je     f011e963 <test_kmalloc_worstfit+0x634>
f011e94c:	83 ec 04             	sub    $0x4,%esp
f011e94f:	68 b4 ad 13 f0       	push   $0xf013adb4
f011e954:	68 33 04 00 00       	push   $0x433
f011e959:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e95e:	e8 98 18 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e963:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e966:	e8 e6 e0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e96b:	29 c3                	sub    %eax,%ebx
f011e96d:	89 d8                	mov    %ebx,%eax
f011e96f:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e974:	74 17                	je     f011e98d <test_kmalloc_worstfit+0x65e>
f011e976:	83 ec 04             	sub    $0x4,%esp
f011e979:	68 57 b0 13 f0       	push   $0xf013b057
f011e97e:	68 34 04 00 00       	push   $0x434
f011e983:	68 9a ad 13 f0       	push   $0xf013ad9a
f011e988:	e8 6e 18 fe ff       	call   f01001fb <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e98d:	e8 bf e0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011e992:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e995:	e8 a2 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e99a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e99d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e9a3:	83 ec 0c             	sub    $0xc,%esp
f011e9a6:	50                   	push   %eax
f011e9a7:	e8 32 8f fe ff       	call   f01078de <kfree>
f011e9ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e9af:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e9b5:	83 ec 0c             	sub    $0xc,%esp
f011e9b8:	50                   	push   %eax
f011e9b9:	e8 20 8f fe ff       	call   f01078de <kfree>
f011e9be:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e9c1:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e9c7:	83 ec 0c             	sub    $0xc,%esp
f011e9ca:	50                   	push   %eax
f011e9cb:	e8 0e 8f fe ff       	call   f01078de <kfree>
f011e9d0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e9d3:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e9d9:	83 ec 0c             	sub    $0xc,%esp
f011e9dc:	50                   	push   %eax
f011e9dd:	e8 fc 8e fe ff       	call   f01078de <kfree>
f011e9e2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e9e5:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e9eb:	83 ec 0c             	sub    $0xc,%esp
f011e9ee:	50                   	push   %eax
f011e9ef:	e8 ea 8e fe ff       	call   f01078de <kfree>
f011e9f4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e9f7:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e9fd:	83 ec 0c             	sub    $0xc,%esp
f011ea00:	50                   	push   %eax
f011ea01:	e8 d8 8e fe ff       	call   f01078de <kfree>
f011ea06:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011ea09:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011ea0f:	83 ec 0c             	sub    $0xc,%esp
f011ea12:	50                   	push   %eax
f011ea13:	e8 c6 8e fe ff       	call   f01078de <kfree>
f011ea18:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011ea1b:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011ea21:	83 ec 0c             	sub    $0xc,%esp
f011ea24:	50                   	push   %eax
f011ea25:	e8 b4 8e fe ff       	call   f01078de <kfree>
f011ea2a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011ea2d:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011ea33:	83 ec 0c             	sub    $0xc,%esp
f011ea36:	50                   	push   %eax
f011ea37:	e8 a2 8e fe ff       	call   f01078de <kfree>
f011ea3c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011ea3f:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011ea45:	83 ec 0c             	sub    $0xc,%esp
f011ea48:	50                   	push   %eax
f011ea49:	e8 90 8e fe ff       	call   f01078de <kfree>
f011ea4e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011ea51:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011ea57:	83 ec 0c             	sub    $0xc,%esp
f011ea5a:	50                   	push   %eax
f011ea5b:	e8 7e 8e fe ff       	call   f01078de <kfree>
f011ea60:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011ea63:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011ea69:	83 ec 0c             	sub    $0xc,%esp
f011ea6c:	50                   	push   %eax
f011ea6d:	e8 6c 8e fe ff       	call   f01078de <kfree>
f011ea72:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011ea75:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011ea7b:	83 ec 0c             	sub    $0xc,%esp
f011ea7e:	50                   	push   %eax
f011ea7f:	e8 5a 8e fe ff       	call   f01078de <kfree>
f011ea84:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011ea87:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011ea8d:	83 ec 0c             	sub    $0xc,%esp
f011ea90:	50                   	push   %eax
f011ea91:	e8 48 8e fe ff       	call   f01078de <kfree>
f011ea96:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ea99:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011ea9f:	83 ec 0c             	sub    $0xc,%esp
f011eaa2:	50                   	push   %eax
f011eaa3:	e8 36 8e fe ff       	call   f01078de <kfree>
f011eaa8:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eaab:	e8 8c 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eab0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eab3:	74 17                	je     f011eacc <test_kmalloc_worstfit+0x79d>
f011eab5:	83 ec 04             	sub    $0x4,%esp
f011eab8:	68 b4 ad 13 f0       	push   $0xf013adb4
f011eabd:	68 4a 04 00 00       	push   $0x44a
f011eac2:	68 9a ad 13 f0       	push   $0xf013ad9a
f011eac7:	e8 2f 17 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011eacc:	e8 80 df fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ead1:	89 c2                	mov    %eax,%edx
f011ead3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ead6:	29 c2                	sub    %eax,%edx
f011ead8:	89 d0                	mov    %edx,%eax
f011eada:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011eadf:	74 17                	je     f011eaf8 <test_kmalloc_worstfit+0x7c9>
f011eae1:	83 ec 04             	sub    $0x4,%esp
f011eae4:	68 68 b0 13 f0       	push   $0xf013b068
f011eae9:	68 4b 04 00 00       	push   $0x44b
f011eaee:	68 9a ad 13 f0       	push   $0xf013ad9a
f011eaf3:	e8 03 17 fe ff       	call   f01001fb <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011eaf8:	e8 54 df fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011eafd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb00:	e8 37 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eb05:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011eb08:	83 ec 0c             	sub    $0xc,%esp
f011eb0b:	68 00 00 10 00       	push   $0x100000
f011eb10:	e8 fe 8c fe ff       	call   f0107813 <kmalloc>
f011eb15:	83 c4 10             	add    $0x10,%esp
f011eb18:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011eb1e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011eb25:	10 00 00 
f011eb28:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eb2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb33:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011eb39:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eb3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb44:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011eb4a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eb50:	29 d0                	sub    %edx,%eax
f011eb52:	89 c1                	mov    %eax,%ecx
f011eb54:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eb5b:	10 00 00 
f011eb5e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb63:	0f b6 d0             	movzbl %al,%edx
f011eb66:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011eb6c:	01 d0                	add    %edx,%eax
f011eb6e:	48                   	dec    %eax
f011eb6f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eb75:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb80:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eb86:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eb8c:	29 d0                	sub    %edx,%eax
f011eb8e:	01 c1                	add    %eax,%ecx
f011eb90:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011eb97:	10 00 00 
f011eb9a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb9f:	0f b6 c0             	movzbl %al,%eax
f011eba2:	c1 e0 04             	shl    $0x4,%eax
f011eba5:	89 c2                	mov    %eax,%edx
f011eba7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ebad:	01 d0                	add    %edx,%eax
f011ebaf:	48                   	dec    %eax
f011ebb0:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ebb6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ebbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebc1:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ebc7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ebcd:	29 d0                	sub    %edx,%eax
f011ebcf:	01 c8                	add    %ecx,%eax
f011ebd1:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ebd7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ebdd:	39 c2                	cmp    %eax,%edx
f011ebdf:	74 17                	je     f011ebf8 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011ebe1:	83 ec 04             	sub    $0x4,%esp
f011ebe4:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011ebe9:	68 52 04 00 00       	push   $0x452
f011ebee:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ebf3:	e8 03 16 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebf8:	e8 3f 51 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ebfd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec00:	74 17                	je     f011ec19 <test_kmalloc_worstfit+0x8ea>
f011ec02:	83 ec 04             	sub    $0x4,%esp
f011ec05:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ec0a:	68 53 04 00 00       	push   $0x453
f011ec0f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ec14:	e8 e2 15 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec19:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec1c:	e8 30 de fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ec21:	29 c3                	sub    %eax,%ebx
f011ec23:	89 d8                	mov    %ebx,%eax
f011ec25:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ec2a:	74 17                	je     f011ec43 <test_kmalloc_worstfit+0x914>
f011ec2c:	83 ec 04             	sub    $0x4,%esp
f011ec2f:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011ec34:	68 54 04 00 00       	push   $0x454
f011ec39:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ec3e:	e8 b8 15 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec43:	ff 45 e8             	incl   -0x18(%ebp)
f011ec46:	83 ec 08             	sub    $0x8,%esp
f011ec49:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec4c:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011ec51:	e8 2c 20 fe ff       	call   f0100c82 <cprintf>
f011ec56:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec59:	e8 f3 dd fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ec5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec61:	e8 d6 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ec66:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011ec69:	83 ec 0c             	sub    $0xc,%esp
f011ec6c:	68 00 00 40 00       	push   $0x400000
f011ec71:	e8 9d 8b fe ff       	call   f0107813 <kmalloc>
f011ec76:	83 c4 10             	add    $0x10,%esp
f011ec79:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011ec7f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011ec86:	10 00 00 
f011ec89:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ec8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec94:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011ec9a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eca0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eca5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011ecab:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ecb1:	29 d0                	sub    %edx,%eax
f011ecb3:	89 c1                	mov    %eax,%ecx
f011ecb5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011ecbc:	10 00 00 
f011ecbf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ecc4:	0f b6 d0             	movzbl %al,%edx
f011ecc7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011eccd:	01 d0                	add    %edx,%eax
f011eccf:	48                   	dec    %eax
f011ecd0:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011ecd6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ecdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece1:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011ece7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eced:	29 d0                	sub    %edx,%eax
f011ecef:	01 c1                	add    %eax,%ecx
f011ecf1:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011ecf8:	10 00 00 
f011ecfb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ed00:	0f b6 c0             	movzbl %al,%eax
f011ed03:	c1 e0 04             	shl    $0x4,%eax
f011ed06:	89 c2                	mov    %eax,%edx
f011ed08:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ed0e:	01 d0                	add    %edx,%eax
f011ed10:	48                   	dec    %eax
f011ed11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ed17:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ed1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed22:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011ed28:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ed2e:	29 d0                	sub    %edx,%eax
f011ed30:	01 c8                	add    %ecx,%eax
f011ed32:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ed38:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed3e:	39 c2                	cmp    %eax,%edx
f011ed40:	74 17                	je     f011ed59 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ed42:	83 ec 04             	sub    $0x4,%esp
f011ed45:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011ed4a:	68 5b 04 00 00       	push   $0x45b
f011ed4f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ed54:	e8 a2 14 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed59:	e8 de 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ed5e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed61:	74 17                	je     f011ed7a <test_kmalloc_worstfit+0xa4b>
f011ed63:	83 ec 04             	sub    $0x4,%esp
f011ed66:	68 b4 ad 13 f0       	push   $0xf013adb4
f011ed6b:	68 5c 04 00 00       	push   $0x45c
f011ed70:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ed75:	e8 81 14 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed7d:	e8 cf dc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ed82:	29 c3                	sub    %eax,%ebx
f011ed84:	89 d8                	mov    %ebx,%eax
f011ed86:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ed8b:	74 17                	je     f011eda4 <test_kmalloc_worstfit+0xa75>
f011ed8d:	83 ec 04             	sub    $0x4,%esp
f011ed90:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011ed95:	68 5d 04 00 00       	push   $0x45d
f011ed9a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ed9f:	e8 57 14 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eda4:	ff 45 e8             	incl   -0x18(%ebp)
f011eda7:	83 ec 08             	sub    $0x8,%esp
f011edaa:	ff 75 e8             	pushl  -0x18(%ebp)
f011edad:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011edb2:	e8 cb 1e fe ff       	call   f0100c82 <cprintf>
f011edb7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011edba:	e8 92 dc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011edbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edc2:	e8 75 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011edc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011edca:	83 ec 0c             	sub    $0xc,%esp
f011edcd:	68 00 00 60 00       	push   $0x600000
f011edd2:	e8 3c 8a fe ff       	call   f0107813 <kmalloc>
f011edd7:	83 c4 10             	add    $0x10,%esp
f011edda:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ede0:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ede7:	10 00 00 
f011edea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011edf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edf5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011edfb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee01:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee06:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ee0c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee12:	29 d0                	sub    %edx,%eax
f011ee14:	89 c1                	mov    %eax,%ecx
f011ee16:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ee1d:	10 00 00 
f011ee20:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ee25:	0f b6 d0             	movzbl %al,%edx
f011ee28:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ee2e:	01 d0                	add    %edx,%eax
f011ee30:	48                   	dec    %eax
f011ee31:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011ee37:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ee3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee42:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ee48:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ee4e:	29 d0                	sub    %edx,%eax
f011ee50:	01 c1                	add    %eax,%ecx
f011ee52:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ee59:	10 00 00 
f011ee5c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ee61:	0f b6 c0             	movzbl %al,%eax
f011ee64:	c1 e0 04             	shl    $0x4,%eax
f011ee67:	89 c2                	mov    %eax,%edx
f011ee69:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ee6f:	01 d0                	add    %edx,%eax
f011ee71:	48                   	dec    %eax
f011ee72:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ee78:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ee7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee83:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ee89:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ee8f:	29 d0                	sub    %edx,%eax
f011ee91:	01 c8                	add    %ecx,%eax
f011ee93:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ee99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee9f:	39 c2                	cmp    %eax,%edx
f011eea1:	74 17                	je     f011eeba <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011eea3:	83 ec 04             	sub    $0x4,%esp
f011eea6:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011eeab:	68 64 04 00 00       	push   $0x464
f011eeb0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011eeb5:	e8 41 13 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eeba:	e8 7d 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eebf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eec2:	74 17                	je     f011eedb <test_kmalloc_worstfit+0xbac>
f011eec4:	83 ec 04             	sub    $0x4,%esp
f011eec7:	68 b4 ad 13 f0       	push   $0xf013adb4
f011eecc:	68 65 04 00 00       	push   $0x465
f011eed1:	68 9a ad 13 f0       	push   $0xf013ad9a
f011eed6:	e8 20 13 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eedb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eede:	e8 6e db fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011eee3:	29 c3                	sub    %eax,%ebx
f011eee5:	89 d8                	mov    %ebx,%eax
f011eee7:	3d 00 06 00 00       	cmp    $0x600,%eax
f011eeec:	74 17                	je     f011ef05 <test_kmalloc_worstfit+0xbd6>
f011eeee:	83 ec 04             	sub    $0x4,%esp
f011eef1:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011eef6:	68 66 04 00 00       	push   $0x466
f011eefb:	68 9a ad 13 f0       	push   $0xf013ad9a
f011ef00:	e8 f6 12 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef05:	ff 45 e8             	incl   -0x18(%ebp)
f011ef08:	83 ec 08             	sub    $0x8,%esp
f011ef0b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef0e:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011ef13:	e8 6a 1d fe ff       	call   f0100c82 <cprintf>
f011ef18:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef1b:	e8 31 db fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ef20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef23:	e8 14 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ef28:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ef2b:	83 ec 0c             	sub    $0xc,%esp
f011ef2e:	68 00 00 50 00       	push   $0x500000
f011ef33:	e8 db 88 fe ff       	call   f0107813 <kmalloc>
f011ef38:	83 c4 10             	add    $0x10,%esp
f011ef3b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ef41:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011ef48:	10 00 00 
f011ef4b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ef51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef56:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011ef5c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ef62:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef67:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011ef6d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ef73:	29 d0                	sub    %edx,%eax
f011ef75:	89 c1                	mov    %eax,%ecx
f011ef77:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011ef7e:	10 00 00 
f011ef81:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ef86:	0f b6 d0             	movzbl %al,%edx
f011ef89:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ef8f:	01 d0                	add    %edx,%eax
f011ef91:	48                   	dec    %eax
f011ef92:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011ef98:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ef9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011efa3:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011efa9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011efaf:	29 d0                	sub    %edx,%eax
f011efb1:	01 c1                	add    %eax,%ecx
f011efb3:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011efba:	10 00 00 
f011efbd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011efc2:	0f b6 c0             	movzbl %al,%eax
f011efc5:	c1 e0 04             	shl    $0x4,%eax
f011efc8:	89 c2                	mov    %eax,%edx
f011efca:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011efd0:	01 d0                	add    %edx,%eax
f011efd2:	48                   	dec    %eax
f011efd3:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011efd9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011efdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011efe4:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011efea:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011eff0:	29 d0                	sub    %edx,%eax
f011eff2:	01 c8                	add    %ecx,%eax
f011eff4:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011effa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f000:	39 c2                	cmp    %eax,%edx
f011f002:	74 17                	je     f011f01b <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f004:	83 ec 04             	sub    $0x4,%esp
f011f007:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f00c:	68 6d 04 00 00       	push   $0x46d
f011f011:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f016:	e8 e0 11 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f01b:	e8 1c 4d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f020:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f023:	74 17                	je     f011f03c <test_kmalloc_worstfit+0xd0d>
f011f025:	83 ec 04             	sub    $0x4,%esp
f011f028:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f02d:	68 6e 04 00 00       	push   $0x46e
f011f032:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f037:	e8 bf 11 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f03c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f03f:	e8 0d da fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f044:	29 c3                	sub    %eax,%ebx
f011f046:	89 d8                	mov    %ebx,%eax
f011f048:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f04d:	74 17                	je     f011f066 <test_kmalloc_worstfit+0xd37>
f011f04f:	83 ec 04             	sub    $0x4,%esp
f011f052:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f057:	68 6f 04 00 00       	push   $0x46f
f011f05c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f061:	e8 95 11 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f066:	ff 45 e8             	incl   -0x18(%ebp)
f011f069:	83 ec 08             	sub    $0x8,%esp
f011f06c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f06f:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f074:	e8 09 1c fe ff       	call   f0100c82 <cprintf>
f011f079:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f07c:	e8 d0 d9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f081:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f084:	e8 b3 4c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f089:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f08c:	83 ec 0c             	sub    $0xc,%esp
f011f08f:	68 00 00 40 00       	push   $0x400000
f011f094:	e8 7a 87 fe ff       	call   f0107813 <kmalloc>
f011f099:	83 c4 10             	add    $0x10,%esp
f011f09c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f0a2:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f0a9:	10 00 00 
f011f0ac:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f0b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0b7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f0bd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f0c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c8:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f0ce:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f0d4:	29 d0                	sub    %edx,%eax
f011f0d6:	89 c1                	mov    %eax,%ecx
f011f0d8:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f0df:	10 00 00 
f011f0e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f0e7:	0f b6 d0             	movzbl %al,%edx
f011f0ea:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f0f0:	01 d0                	add    %edx,%eax
f011f0f2:	48                   	dec    %eax
f011f0f3:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f0f9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f0ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011f104:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f10a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f110:	29 d0                	sub    %edx,%eax
f011f112:	01 c1                	add    %eax,%ecx
f011f114:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f11b:	10 00 00 
f011f11e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f123:	0f b6 c0             	movzbl %al,%eax
f011f126:	c1 e0 04             	shl    $0x4,%eax
f011f129:	89 c2                	mov    %eax,%edx
f011f12b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f131:	01 d0                	add    %edx,%eax
f011f133:	48                   	dec    %eax
f011f134:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f13a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f140:	ba 00 00 00 00       	mov    $0x0,%edx
f011f145:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f14b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f151:	29 d0                	sub    %edx,%eax
f011f153:	01 c8                	add    %ecx,%eax
f011f155:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f15b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f161:	39 c2                	cmp    %eax,%edx
f011f163:	74 17                	je     f011f17c <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f165:	83 ec 04             	sub    $0x4,%esp
f011f168:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f16d:	68 76 04 00 00       	push   $0x476
f011f172:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f177:	e8 7f 10 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f17c:	e8 bb 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f181:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f184:	74 17                	je     f011f19d <test_kmalloc_worstfit+0xe6e>
f011f186:	83 ec 04             	sub    $0x4,%esp
f011f189:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f18e:	68 77 04 00 00       	push   $0x477
f011f193:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f198:	e8 5e 10 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f19d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f1a0:	e8 ac d8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f1a5:	29 c3                	sub    %eax,%ebx
f011f1a7:	89 d8                	mov    %ebx,%eax
f011f1a9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f1ae:	74 17                	je     f011f1c7 <test_kmalloc_worstfit+0xe98>
f011f1b0:	83 ec 04             	sub    $0x4,%esp
f011f1b3:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f1b8:	68 78 04 00 00       	push   $0x478
f011f1bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f1c2:	e8 34 10 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1c7:	ff 45 e8             	incl   -0x18(%ebp)
f011f1ca:	83 ec 08             	sub    $0x8,%esp
f011f1cd:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1d0:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f1d5:	e8 a8 1a fe ff       	call   f0100c82 <cprintf>
f011f1da:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1dd:	e8 6f d8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f1e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1e5:	e8 52 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f1ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f1ed:	83 ec 0c             	sub    $0xc,%esp
f011f1f0:	68 00 00 20 00       	push   $0x200000
f011f1f5:	e8 19 86 fe ff       	call   f0107813 <kmalloc>
f011f1fa:	83 c4 10             	add    $0x10,%esp
f011f1fd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f203:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f20a:	10 00 00 
f011f20d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f213:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f218:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f21e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f224:	ba 00 00 00 00       	mov    $0x0,%edx
f011f229:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f22f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f235:	29 d0                	sub    %edx,%eax
f011f237:	89 c1                	mov    %eax,%ecx
f011f239:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f240:	10 00 00 
f011f243:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f248:	0f b6 d0             	movzbl %al,%edx
f011f24b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f251:	01 d0                	add    %edx,%eax
f011f253:	48                   	dec    %eax
f011f254:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f25a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f260:	ba 00 00 00 00       	mov    $0x0,%edx
f011f265:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f26b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f271:	29 d0                	sub    %edx,%eax
f011f273:	01 c1                	add    %eax,%ecx
f011f275:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f27c:	10 00 00 
f011f27f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f284:	0f b6 c0             	movzbl %al,%eax
f011f287:	c1 e0 04             	shl    $0x4,%eax
f011f28a:	89 c2                	mov    %eax,%edx
f011f28c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f292:	01 d0                	add    %edx,%eax
f011f294:	48                   	dec    %eax
f011f295:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f29b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f2a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2a6:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f2ac:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f2b2:	29 d0                	sub    %edx,%eax
f011f2b4:	01 c8                	add    %ecx,%eax
f011f2b6:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f2bc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f2c2:	39 c2                	cmp    %eax,%edx
f011f2c4:	74 17                	je     f011f2dd <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f2c6:	83 ec 04             	sub    $0x4,%esp
f011f2c9:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f2ce:	68 7f 04 00 00       	push   $0x47f
f011f2d3:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f2d8:	e8 1e 0f fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2dd:	e8 5a 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f2e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2e5:	74 17                	je     f011f2fe <test_kmalloc_worstfit+0xfcf>
f011f2e7:	83 ec 04             	sub    $0x4,%esp
f011f2ea:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f2ef:	68 80 04 00 00       	push   $0x480
f011f2f4:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f2f9:	e8 fd 0e fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f2fe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f301:	e8 4b d7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f306:	29 c3                	sub    %eax,%ebx
f011f308:	89 d8                	mov    %ebx,%eax
f011f30a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f30f:	74 17                	je     f011f328 <test_kmalloc_worstfit+0xff9>
f011f311:	83 ec 04             	sub    $0x4,%esp
f011f314:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f319:	68 81 04 00 00       	push   $0x481
f011f31e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f323:	e8 d3 0e fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f328:	ff 45 e8             	incl   -0x18(%ebp)
f011f32b:	83 ec 08             	sub    $0x8,%esp
f011f32e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f331:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f336:	e8 47 19 fe ff       	call   f0100c82 <cprintf>
f011f33b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f33e:	e8 0e d7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f343:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f346:	e8 f1 49 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f34b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f34e:	83 ec 0c             	sub    $0xc,%esp
f011f351:	68 00 00 18 00       	push   $0x180000
f011f356:	e8 b8 84 fe ff       	call   f0107813 <kmalloc>
f011f35b:	83 c4 10             	add    $0x10,%esp
f011f35e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f364:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f36b:	10 00 00 
f011f36e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f374:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f379:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f37f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f385:	ba 00 00 00 00       	mov    $0x0,%edx
f011f38a:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f390:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f396:	29 d0                	sub    %edx,%eax
f011f398:	89 c1                	mov    %eax,%ecx
f011f39a:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f3a1:	10 00 00 
f011f3a4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f3a9:	0f b6 d0             	movzbl %al,%edx
f011f3ac:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f3b2:	01 d0                	add    %edx,%eax
f011f3b4:	48                   	dec    %eax
f011f3b5:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f3bb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f3c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3c6:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f3cc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f3d2:	29 d0                	sub    %edx,%eax
f011f3d4:	01 c1                	add    %eax,%ecx
f011f3d6:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f3dd:	10 00 00 
f011f3e0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f3e5:	0f b6 c0             	movzbl %al,%eax
f011f3e8:	c1 e0 04             	shl    $0x4,%eax
f011f3eb:	89 c2                	mov    %eax,%edx
f011f3ed:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f3f3:	01 d0                	add    %edx,%eax
f011f3f5:	48                   	dec    %eax
f011f3f6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f3fc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f402:	ba 00 00 00 00       	mov    $0x0,%edx
f011f407:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f40d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f413:	29 d0                	sub    %edx,%eax
f011f415:	01 c8                	add    %ecx,%eax
f011f417:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f41d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f423:	39 c2                	cmp    %eax,%edx
f011f425:	74 17                	je     f011f43e <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f427:	83 ec 04             	sub    $0x4,%esp
f011f42a:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f42f:	68 88 04 00 00       	push   $0x488
f011f434:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f439:	e8 bd 0d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f43e:	e8 f9 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f443:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f446:	74 17                	je     f011f45f <test_kmalloc_worstfit+0x1130>
f011f448:	83 ec 04             	sub    $0x4,%esp
f011f44b:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f450:	68 89 04 00 00       	push   $0x489
f011f455:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f45a:	e8 9c 0d fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f45f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f462:	e8 ea d5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f467:	29 c3                	sub    %eax,%ebx
f011f469:	89 d8                	mov    %ebx,%eax
f011f46b:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f470:	74 17                	je     f011f489 <test_kmalloc_worstfit+0x115a>
f011f472:	83 ec 04             	sub    $0x4,%esp
f011f475:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f47a:	68 8a 04 00 00       	push   $0x48a
f011f47f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f484:	e8 72 0d fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f489:	ff 45 e8             	incl   -0x18(%ebp)
f011f48c:	83 ec 08             	sub    $0x8,%esp
f011f48f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f492:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f497:	e8 e6 17 fe ff       	call   f0100c82 <cprintf>
f011f49c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f49f:	e8 ad d5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f4a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4a7:	e8 90 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f4ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f4af:	83 ec 0c             	sub    $0xc,%esp
f011f4b2:	68 00 00 08 00       	push   $0x80000
f011f4b7:	e8 57 83 fe ff       	call   f0107813 <kmalloc>
f011f4bc:	83 c4 10             	add    $0x10,%esp
f011f4bf:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f4c5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f4cc:	10 00 00 
f011f4cf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f4d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4da:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f4e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f4e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4eb:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f4f1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f4f7:	29 d0                	sub    %edx,%eax
f011f4f9:	89 c1                	mov    %eax,%ecx
f011f4fb:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f502:	10 00 00 
f011f505:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f50a:	0f b6 d0             	movzbl %al,%edx
f011f50d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f513:	01 d0                	add    %edx,%eax
f011f515:	48                   	dec    %eax
f011f516:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f51c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f522:	ba 00 00 00 00       	mov    $0x0,%edx
f011f527:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f52d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f533:	29 d0                	sub    %edx,%eax
f011f535:	01 c1                	add    %eax,%ecx
f011f537:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f53e:	10 00 00 
f011f541:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f546:	0f b6 c0             	movzbl %al,%eax
f011f549:	c1 e0 04             	shl    $0x4,%eax
f011f54c:	89 c2                	mov    %eax,%edx
f011f54e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f554:	01 d0                	add    %edx,%eax
f011f556:	48                   	dec    %eax
f011f557:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f55d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f563:	ba 00 00 00 00       	mov    $0x0,%edx
f011f568:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f56e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f574:	29 d0                	sub    %edx,%eax
f011f576:	01 c8                	add    %ecx,%eax
f011f578:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f57e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f584:	39 c2                	cmp    %eax,%edx
f011f586:	74 17                	je     f011f59f <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f588:	83 ec 04             	sub    $0x4,%esp
f011f58b:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f590:	68 91 04 00 00       	push   $0x491
f011f595:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f59a:	e8 5c 0c fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f59f:	e8 98 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f5a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5a7:	74 17                	je     f011f5c0 <test_kmalloc_worstfit+0x1291>
f011f5a9:	83 ec 04             	sub    $0x4,%esp
f011f5ac:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f5b1:	68 92 04 00 00       	push   $0x492
f011f5b6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f5bb:	e8 3b 0c fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f5c0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5c3:	e8 89 d4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f5c8:	29 c3                	sub    %eax,%ebx
f011f5ca:	89 d8                	mov    %ebx,%eax
f011f5cc:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f5d1:	74 17                	je     f011f5ea <test_kmalloc_worstfit+0x12bb>
f011f5d3:	83 ec 04             	sub    $0x4,%esp
f011f5d6:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f5db:	68 93 04 00 00       	push   $0x493
f011f5e0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f5e5:	e8 11 0c fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5ea:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ed:	83 ec 08             	sub    $0x8,%esp
f011f5f0:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5f3:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f5f8:	e8 85 16 fe ff       	call   f0100c82 <cprintf>
f011f5fd:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f600:	e8 4c d4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f605:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f608:	e8 2f 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f60d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f610:	83 ec 0c             	sub    $0xc,%esp
f011f613:	68 00 04 00 00       	push   $0x400
f011f618:	e8 f6 81 fe ff       	call   f0107813 <kmalloc>
f011f61d:	83 c4 10             	add    $0x10,%esp
f011f620:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f626:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f62d:	10 00 00 
f011f630:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f636:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f63b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f641:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f647:	ba 00 00 00 00       	mov    $0x0,%edx
f011f64c:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f652:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f658:	29 d0                	sub    %edx,%eax
f011f65a:	89 c1                	mov    %eax,%ecx
f011f65c:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f663:	10 00 00 
f011f666:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f66b:	0f b6 d0             	movzbl %al,%edx
f011f66e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f674:	01 d0                	add    %edx,%eax
f011f676:	48                   	dec    %eax
f011f677:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f67d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f683:	ba 00 00 00 00       	mov    $0x0,%edx
f011f688:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f68e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f694:	29 d0                	sub    %edx,%eax
f011f696:	01 c1                	add    %eax,%ecx
f011f698:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f69f:	10 00 00 
f011f6a2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f6a7:	0f b6 c0             	movzbl %al,%eax
f011f6aa:	c1 e0 04             	shl    $0x4,%eax
f011f6ad:	89 c2                	mov    %eax,%edx
f011f6af:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f6b5:	01 d0                	add    %edx,%eax
f011f6b7:	48                   	dec    %eax
f011f6b8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f6be:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f6c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6c9:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f6cf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f6d5:	29 d0                	sub    %edx,%eax
f011f6d7:	01 c8                	add    %ecx,%eax
f011f6d9:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f6df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6e5:	39 c2                	cmp    %eax,%edx
f011f6e7:	74 17                	je     f011f700 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f6e9:	83 ec 04             	sub    $0x4,%esp
f011f6ec:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f6f1:	68 9a 04 00 00       	push   $0x49a
f011f6f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f6fb:	e8 fb 0a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f700:	e8 37 46 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f705:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f708:	74 17                	je     f011f721 <test_kmalloc_worstfit+0x13f2>
f011f70a:	83 ec 04             	sub    $0x4,%esp
f011f70d:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f712:	68 9b 04 00 00       	push   $0x49b
f011f717:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f71c:	e8 da 0a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f721:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f724:	e8 28 d3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f729:	29 c3                	sub    %eax,%ebx
f011f72b:	89 d8                	mov    %ebx,%eax
f011f72d:	83 f8 01             	cmp    $0x1,%eax
f011f730:	74 17                	je     f011f749 <test_kmalloc_worstfit+0x141a>
f011f732:	83 ec 04             	sub    $0x4,%esp
f011f735:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f73a:	68 9c 04 00 00       	push   $0x49c
f011f73f:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f744:	e8 b2 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f749:	ff 45 e8             	incl   -0x18(%ebp)
f011f74c:	83 ec 08             	sub    $0x8,%esp
f011f74f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f752:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f757:	e8 26 15 fe ff       	call   f0100c82 <cprintf>
f011f75c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f75f:	e8 ed d2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f764:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f767:	e8 d0 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f76c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f76f:	83 ec 0c             	sub    $0xc,%esp
f011f772:	68 00 f0 1f 00       	push   $0x1ff000
f011f777:	e8 97 80 fe ff       	call   f0107813 <kmalloc>
f011f77c:	83 c4 10             	add    $0x10,%esp
f011f77f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f785:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f78c:	10 00 00 
f011f78f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f795:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f79a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f7a0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f7a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7ab:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f7b1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f7b7:	29 d0                	sub    %edx,%eax
f011f7b9:	89 c1                	mov    %eax,%ecx
f011f7bb:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f7c2:	10 00 00 
f011f7c5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f7ca:	0f b6 d0             	movzbl %al,%edx
f011f7cd:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f7d3:	01 d0                	add    %edx,%eax
f011f7d5:	48                   	dec    %eax
f011f7d6:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f7dc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f7e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7e7:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f7ed:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f7f3:	29 d0                	sub    %edx,%eax
f011f7f5:	01 c1                	add    %eax,%ecx
f011f7f7:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f7fe:	10 00 00 
f011f801:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f806:	0f b6 c0             	movzbl %al,%eax
f011f809:	c1 e0 04             	shl    $0x4,%eax
f011f80c:	89 c2                	mov    %eax,%edx
f011f80e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f814:	01 d0                	add    %edx,%eax
f011f816:	48                   	dec    %eax
f011f817:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f81d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f823:	ba 00 00 00 00       	mov    $0x0,%edx
f011f828:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f82e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f834:	29 d0                	sub    %edx,%eax
f011f836:	01 c8                	add    %ecx,%eax
f011f838:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f83e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f844:	39 c2                	cmp    %eax,%edx
f011f846:	74 17                	je     f011f85f <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f848:	83 ec 04             	sub    $0x4,%esp
f011f84b:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f850:	68 a3 04 00 00       	push   $0x4a3
f011f855:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f85a:	e8 9c 09 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f85f:	e8 d8 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f864:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f867:	74 17                	je     f011f880 <test_kmalloc_worstfit+0x1551>
f011f869:	83 ec 04             	sub    $0x4,%esp
f011f86c:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f871:	68 a4 04 00 00       	push   $0x4a4
f011f876:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f87b:	e8 7b 09 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f880:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f883:	e8 c9 d1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f888:	29 c3                	sub    %eax,%ebx
f011f88a:	89 d8                	mov    %ebx,%eax
f011f88c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f891:	74 17                	je     f011f8aa <test_kmalloc_worstfit+0x157b>
f011f893:	83 ec 04             	sub    $0x4,%esp
f011f896:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f89b:	68 a5 04 00 00       	push   $0x4a5
f011f8a0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f8a5:	e8 51 09 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8aa:	ff 45 e8             	incl   -0x18(%ebp)
f011f8ad:	83 ec 08             	sub    $0x8,%esp
f011f8b0:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8b3:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f8b8:	e8 c5 13 fe ff       	call   f0100c82 <cprintf>
f011f8bd:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f8c0:	e8 8c d1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f8c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8c8:	e8 6f 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f8cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f8d0:	83 ec 0c             	sub    $0xc,%esp
f011f8d3:	68 00 00 40 00       	push   $0x400000
f011f8d8:	e8 36 7f fe ff       	call   f0107813 <kmalloc>
f011f8dd:	83 c4 10             	add    $0x10,%esp
f011f8e0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f8e6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f8ec:	85 c0                	test   %eax,%eax
f011f8ee:	74 17                	je     f011f907 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f8f0:	83 ec 04             	sub    $0x4,%esp
f011f8f3:	68 b4 b4 13 f0       	push   $0xf013b4b4
f011f8f8:	68 ad 04 00 00       	push   $0x4ad
f011f8fd:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f902:	e8 f4 08 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f907:	e8 30 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f90c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f90f:	74 17                	je     f011f928 <test_kmalloc_worstfit+0x15f9>
f011f911:	83 ec 04             	sub    $0x4,%esp
f011f914:	68 b4 ad 13 f0       	push   $0xf013adb4
f011f919:	68 ae 04 00 00       	push   $0x4ae
f011f91e:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f923:	e8 d3 08 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f928:	e8 24 d1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f92d:	89 c2                	mov    %eax,%edx
f011f92f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f932:	39 c2                	cmp    %eax,%edx
f011f934:	74 17                	je     f011f94d <test_kmalloc_worstfit+0x161e>
f011f936:	83 ec 04             	sub    $0x4,%esp
f011f939:	68 d2 b2 13 f0       	push   $0xf013b2d2
f011f93e:	68 af 04 00 00       	push   $0x4af
f011f943:	68 9a ad 13 f0       	push   $0xf013ad9a
f011f948:	e8 ae 08 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f94d:	ff 45 e8             	incl   -0x18(%ebp)
f011f950:	83 ec 08             	sub    $0x8,%esp
f011f953:	ff 75 e8             	pushl  -0x18(%ebp)
f011f956:	68 d4 b4 13 f0       	push   $0xf013b4d4
f011f95b:	e8 22 13 fe ff       	call   f0100c82 <cprintf>
f011f960:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f963:	83 ec 0c             	sub    $0xc,%esp
f011f966:	68 e8 b4 13 f0       	push   $0xf013b4e8
f011f96b:	e8 12 13 fe ff       	call   f0100c82 <cprintf>
f011f970:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f973:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f978:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f97b:	5b                   	pop    %ebx
f011f97c:	5f                   	pop    %edi
f011f97d:	5d                   	pop    %ebp
f011f97e:	c3                   	ret    

f011f97f <test_kfree>:

int test_kfree()
{
f011f97f:	55                   	push   %ebp
f011f980:	89 e5                	mov    %esp,%ebp
f011f982:	57                   	push   %edi
f011f983:	53                   	push   %ebx
f011f984:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f98a:	83 ec 0c             	sub    $0xc,%esp
f011f98d:	68 dc ac 13 f0       	push   $0xf013acdc
f011f992:	e8 eb 12 fe ff       	call   f0100c82 <cprintf>
f011f997:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f99a:	83 ec 0c             	sub    $0xc,%esp
f011f99d:	68 0c ad 13 f0       	push   $0xf013ad0c
f011f9a2:	e8 db 12 fe ff       	call   f0100c82 <cprintf>
f011f9a7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f9aa:	83 ec 0c             	sub    $0xc,%esp
f011f9ad:	68 dc ac 13 f0       	push   $0xf013acdc
f011f9b2:	e8 cb 12 fe ff       	call   f0100c82 <cprintf>
f011f9b7:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f9ba:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f9be:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f9c2:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f9c8:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f9ce:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f9d5:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f9dc:	e8 70 d0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011f9e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f9e4:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f9ea:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f9ef:	b8 00 00 00 00       	mov    $0x0,%eax
f011f9f4:	89 d7                	mov    %edx,%edi
f011f9f6:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f9f8:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f9fe:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fa03:	b8 00 00 00 00       	mov    $0x0,%eax
f011fa08:	89 d7                	mov    %edx,%edi
f011fa0a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011fa0c:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011fa12:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fa17:	b8 00 00 00 00       	mov    $0x0,%eax
f011fa1c:	89 d7                	mov    %edx,%edi
f011fa1e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fa20:	e8 2c d0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fa25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa28:	e8 0f 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fa2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011fa30:	83 ec 0c             	sub    $0xc,%esp
f011fa33:	68 00 fc 1f 00       	push   $0x1ffc00
f011fa38:	e8 d6 7d fe ff       	call   f0107813 <kmalloc>
f011fa3d:	83 c4 10             	add    $0x10,%esp
f011fa40:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa46:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fa4c:	89 c1                	mov    %eax,%ecx
f011fa4e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011fa55:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011fa58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa5d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011fa60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fa63:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa68:	f7 75 c8             	divl   -0x38(%ebp)
f011fa6b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fa6e:	29 d0                	sub    %edx,%eax
f011fa70:	89 c3                	mov    %eax,%ebx
f011fa72:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011fa79:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fa7e:	0f b6 d0             	movzbl %al,%edx
f011fa81:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011fa84:	01 d0                	add    %edx,%eax
f011fa86:	48                   	dec    %eax
f011fa87:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011fa8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fa8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa92:	f7 75 c0             	divl   -0x40(%ebp)
f011fa95:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fa98:	29 d0                	sub    %edx,%eax
f011fa9a:	01 c3                	add    %eax,%ebx
f011fa9c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011faa3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011faa8:	0f b6 c0             	movzbl %al,%eax
f011faab:	c1 e0 04             	shl    $0x4,%eax
f011faae:	89 c2                	mov    %eax,%edx
f011fab0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fab3:	01 d0                	add    %edx,%eax
f011fab5:	48                   	dec    %eax
f011fab6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011fab9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fabc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fac1:	f7 75 b8             	divl   -0x48(%ebp)
f011fac4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fac7:	29 d0                	sub    %edx,%eax
f011fac9:	01 d8                	add    %ebx,%eax
f011facb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011fad0:	39 c1                	cmp    %eax,%ecx
f011fad2:	74 17                	je     f011faeb <test_kfree+0x16c>
f011fad4:	83 ec 04             	sub    $0x4,%esp
f011fad7:	68 80 ae 13 f0       	push   $0xf013ae80
f011fadc:	68 d7 04 00 00       	push   $0x4d7
f011fae1:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fae6:	e8 10 07 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011faeb:	e8 4c 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011faf0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011faf3:	74 17                	je     f011fb0c <test_kfree+0x18d>
f011faf5:	83 ec 04             	sub    $0x4,%esp
f011faf8:	68 b4 ad 13 f0       	push   $0xf013adb4
f011fafd:	68 d8 04 00 00       	push   $0x4d8
f011fb02:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fb07:	e8 ef 06 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb0f:	e8 3d cf fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fb14:	29 c3                	sub    %eax,%ebx
f011fb16:	89 d8                	mov    %ebx,%eax
f011fb18:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb1d:	74 17                	je     f011fb36 <test_kfree+0x1b7>
f011fb1f:	83 ec 04             	sub    $0x4,%esp
f011fb22:	68 1c ae 13 f0       	push   $0xf013ae1c
f011fb27:	68 d9 04 00 00       	push   $0x4d9
f011fb2c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fb31:	e8 c5 06 fe ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fb36:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011fb3d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fb40:	e8 0c cf fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fb45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb48:	e8 ef 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fb4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011fb50:	83 ec 0c             	sub    $0xc,%esp
f011fb53:	68 00 fc 1f 00       	push   $0x1ffc00
f011fb58:	e8 b6 7c fe ff       	call   f0107813 <kmalloc>
f011fb5d:	83 c4 10             	add    $0x10,%esp
f011fb60:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb66:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fb6c:	89 c1                	mov    %eax,%ecx
f011fb6e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011fb75:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011fb78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb7d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fb80:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fb83:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb88:	f7 75 b0             	divl   -0x50(%ebp)
f011fb8b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fb8e:	29 d0                	sub    %edx,%eax
f011fb90:	89 c3                	mov    %eax,%ebx
f011fb92:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fb99:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fb9e:	0f b6 d0             	movzbl %al,%edx
f011fba1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fba4:	01 d0                	add    %edx,%eax
f011fba6:	48                   	dec    %eax
f011fba7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fbaa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fbad:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbb2:	f7 75 a8             	divl   -0x58(%ebp)
f011fbb5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fbb8:	29 d0                	sub    %edx,%eax
f011fbba:	01 c3                	add    %eax,%ebx
f011fbbc:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fbc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fbc8:	0f b6 c0             	movzbl %al,%eax
f011fbcb:	c1 e0 04             	shl    $0x4,%eax
f011fbce:	89 c2                	mov    %eax,%edx
f011fbd0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fbd3:	01 d0                	add    %edx,%eax
f011fbd5:	48                   	dec    %eax
f011fbd6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fbd9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fbdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbe1:	f7 75 a0             	divl   -0x60(%ebp)
f011fbe4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fbe7:	29 d0                	sub    %edx,%eax
f011fbe9:	01 d8                	add    %ebx,%eax
f011fbeb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fbf0:	39 c1                	cmp    %eax,%ecx
f011fbf2:	74 17                	je     f011fc0b <test_kfree+0x28c>
f011fbf4:	83 ec 04             	sub    $0x4,%esp
f011fbf7:	68 80 ae 13 f0       	push   $0xf013ae80
f011fbfc:	68 e0 04 00 00       	push   $0x4e0
f011fc01:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fc06:	e8 f0 05 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc0b:	e8 2c 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fc10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc13:	74 17                	je     f011fc2c <test_kfree+0x2ad>
f011fc15:	83 ec 04             	sub    $0x4,%esp
f011fc18:	68 b4 ad 13 f0       	push   $0xf013adb4
f011fc1d:	68 e1 04 00 00       	push   $0x4e1
f011fc22:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fc27:	e8 cf 05 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc2c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc2f:	e8 1d ce fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fc34:	29 c3                	sub    %eax,%ebx
f011fc36:	89 d8                	mov    %ebx,%eax
f011fc38:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fc3d:	74 17                	je     f011fc56 <test_kfree+0x2d7>
f011fc3f:	83 ec 04             	sub    $0x4,%esp
f011fc42:	68 1c ae 13 f0       	push   $0xf013ae1c
f011fc47:	68 e2 04 00 00       	push   $0x4e2
f011fc4c:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fc51:	e8 a5 05 fe ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fc56:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011fc5d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc60:	e8 ec cd fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fc65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc68:	e8 cf 40 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fc6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fc70:	83 ec 0c             	sub    $0xc,%esp
f011fc73:	68 00 08 00 00       	push   $0x800
f011fc78:	e8 96 7b fe ff       	call   f0107813 <kmalloc>
f011fc7d:	83 c4 10             	add    $0x10,%esp
f011fc80:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc86:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fc8c:	89 c1                	mov    %eax,%ecx
f011fc8e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011fc95:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fc98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc9d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011fca0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fca3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fca8:	f7 75 98             	divl   -0x68(%ebp)
f011fcab:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fcae:	29 d0                	sub    %edx,%eax
f011fcb0:	89 c3                	mov    %eax,%ebx
f011fcb2:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011fcb9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fcbe:	0f b6 d0             	movzbl %al,%edx
f011fcc1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fcc4:	01 d0                	add    %edx,%eax
f011fcc6:	48                   	dec    %eax
f011fcc7:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011fcca:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fccd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcd2:	f7 75 90             	divl   -0x70(%ebp)
f011fcd5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fcd8:	29 d0                	sub    %edx,%eax
f011fcda:	01 c3                	add    %eax,%ebx
f011fcdc:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011fce3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fce8:	0f b6 c0             	movzbl %al,%eax
f011fceb:	c1 e0 04             	shl    $0x4,%eax
f011fcee:	89 c2                	mov    %eax,%edx
f011fcf0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fcf3:	01 d0                	add    %edx,%eax
f011fcf5:	48                   	dec    %eax
f011fcf6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011fcf9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fcfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd01:	f7 75 88             	divl   -0x78(%ebp)
f011fd04:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fd07:	29 d0                	sub    %edx,%eax
f011fd09:	01 d8                	add    %ebx,%eax
f011fd0b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fd10:	39 c1                	cmp    %eax,%ecx
f011fd12:	74 17                	je     f011fd2b <test_kfree+0x3ac>
f011fd14:	83 ec 04             	sub    $0x4,%esp
f011fd17:	68 80 ae 13 f0       	push   $0xf013ae80
f011fd1c:	68 e9 04 00 00       	push   $0x4e9
f011fd21:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fd26:	e8 d0 04 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd2b:	e8 0c 40 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fd30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd33:	74 17                	je     f011fd4c <test_kfree+0x3cd>
f011fd35:	83 ec 04             	sub    $0x4,%esp
f011fd38:	68 b4 ad 13 f0       	push   $0xf013adb4
f011fd3d:	68 ea 04 00 00       	push   $0x4ea
f011fd42:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fd47:	e8 af 04 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd4c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd4f:	e8 fd cc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fd54:	29 c3                	sub    %eax,%ebx
f011fd56:	89 d8                	mov    %ebx,%eax
f011fd58:	83 f8 01             	cmp    $0x1,%eax
f011fd5b:	74 17                	je     f011fd74 <test_kfree+0x3f5>
f011fd5d:	83 ec 04             	sub    $0x4,%esp
f011fd60:	68 1c ae 13 f0       	push   $0xf013ae1c
f011fd65:	68 eb 04 00 00       	push   $0x4eb
f011fd6a:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fd6f:	e8 87 04 fe ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fd74:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fd7b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fd7e:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fd84:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fd87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd8e:	eb 0e                	jmp    f011fd9e <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fd90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd93:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd96:	01 d0                	add    %edx,%eax
f011fd98:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fd9b:	ff 45 f4             	incl   -0xc(%ebp)
f011fd9e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fda4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fda7:	7f e7                	jg     f011fd90 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fda9:	e8 a3 cc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fdae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdb1:	e8 86 3f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fdb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fdb9:	83 ec 0c             	sub    $0xc,%esp
f011fdbc:	68 00 08 00 00       	push   $0x800
f011fdc1:	e8 4d 7a fe ff       	call   f0107813 <kmalloc>
f011fdc6:	83 c4 10             	add    $0x10,%esp
f011fdc9:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdcf:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fdd5:	89 c1                	mov    %eax,%ecx
f011fdd7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fdde:	10 00 00 
f011fde1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fde7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fdec:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fdf2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fdf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdfd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fe03:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fe09:	29 d0                	sub    %edx,%eax
f011fe0b:	89 c3                	mov    %eax,%ebx
f011fe0d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fe14:	10 00 00 
f011fe17:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe1c:	0f b6 d0             	movzbl %al,%edx
f011fe1f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fe25:	01 d0                	add    %edx,%eax
f011fe27:	48                   	dec    %eax
f011fe28:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fe2e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fe34:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe39:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fe3f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fe45:	29 d0                	sub    %edx,%eax
f011fe47:	01 c3                	add    %eax,%ebx
f011fe49:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fe50:	10 00 00 
f011fe53:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe58:	0f b6 c0             	movzbl %al,%eax
f011fe5b:	c1 e0 04             	shl    $0x4,%eax
f011fe5e:	89 c2                	mov    %eax,%edx
f011fe60:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fe66:	01 d0                	add    %edx,%eax
f011fe68:	48                   	dec    %eax
f011fe69:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fe6f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fe75:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fe80:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fe86:	29 d0                	sub    %edx,%eax
f011fe88:	01 d8                	add    %ebx,%eax
f011fe8a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fe8f:	39 c1                	cmp    %eax,%ecx
f011fe91:	74 17                	je     f011feaa <test_kfree+0x52b>
f011fe93:	83 ec 04             	sub    $0x4,%esp
f011fe96:	68 80 ae 13 f0       	push   $0xf013ae80
f011fe9b:	68 f7 04 00 00       	push   $0x4f7
f011fea0:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fea5:	e8 51 03 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011feaa:	e8 8d 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011feaf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011feb2:	74 17                	je     f011fecb <test_kfree+0x54c>
f011feb4:	83 ec 04             	sub    $0x4,%esp
f011feb7:	68 b4 ad 13 f0       	push   $0xf013adb4
f011febc:	68 f8 04 00 00       	push   $0x4f8
f011fec1:	68 9a ad 13 f0       	push   $0xf013ad9a
f011fec6:	e8 30 03 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fecb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fece:	e8 7e cb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011fed3:	29 c3                	sub    %eax,%ebx
f011fed5:	89 d8                	mov    %ebx,%eax
f011fed7:	83 f8 01             	cmp    $0x1,%eax
f011feda:	74 17                	je     f011fef3 <test_kfree+0x574>
f011fedc:	83 ec 04             	sub    $0x4,%esp
f011fedf:	68 1c ae 13 f0       	push   $0xf013ae1c
f011fee4:	68 f9 04 00 00       	push   $0x4f9
f011fee9:	68 9a ad 13 f0       	push   $0xf013ad9a
f011feee:	e8 08 03 fe ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fef3:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fefa:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fefd:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011ff03:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011ff06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff0d:	eb 0e                	jmp    f011ff1d <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011ff0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff12:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff15:	01 d0                	add    %edx,%eax
f011ff17:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011ff1a:	ff 45 f4             	incl   -0xc(%ebp)
f011ff1d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011ff23:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff26:	7f e7                	jg     f011ff0f <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011ff28:	e8 24 cb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f011ff2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff30:	e8 07 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ff35:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011ff38:	83 ec 0c             	sub    $0xc,%esp
f011ff3b:	68 00 1c 00 00       	push   $0x1c00
f011ff40:	e8 ce 78 fe ff       	call   f0107813 <kmalloc>
f011ff45:	83 c4 10             	add    $0x10,%esp
f011ff48:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff4e:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011ff54:	89 c1                	mov    %eax,%ecx
f011ff56:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ff5d:	10 00 00 
f011ff60:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ff66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff6b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ff71:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ff77:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff7c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ff82:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ff88:	29 d0                	sub    %edx,%eax
f011ff8a:	89 c3                	mov    %eax,%ebx
f011ff8c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ff93:	10 00 00 
f011ff96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ff9b:	0f b6 d0             	movzbl %al,%edx
f011ff9e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ffa4:	01 d0                	add    %edx,%eax
f011ffa6:	48                   	dec    %eax
f011ffa7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ffad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ffb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffb8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ffbe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ffc4:	29 d0                	sub    %edx,%eax
f011ffc6:	01 c3                	add    %eax,%ebx
f011ffc8:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ffcf:	10 00 00 
f011ffd2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ffd7:	0f b6 c0             	movzbl %al,%eax
f011ffda:	c1 e0 04             	shl    $0x4,%eax
f011ffdd:	89 c2                	mov    %eax,%edx
f011ffdf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ffe5:	01 d0                	add    %edx,%eax
f011ffe7:	48                   	dec    %eax
f011ffe8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ffee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fff4:	ba 00 00 00 00       	mov    $0x0,%edx
f011fff9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ffff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120005:	29 d0                	sub    %edx,%eax
f0120007:	01 d8                	add    %ebx,%eax
f0120009:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012000e:	39 c1                	cmp    %eax,%ecx
f0120010:	74 17                	je     f0120029 <test_kfree+0x6aa>
f0120012:	83 ec 04             	sub    $0x4,%esp
f0120015:	68 80 ae 13 f0       	push   $0xf013ae80
f012001a:	68 05 05 00 00       	push   $0x505
f012001f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120024:	e8 d2 01 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120029:	e8 0e 3d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012002e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120031:	74 17                	je     f012004a <test_kfree+0x6cb>
f0120033:	83 ec 04             	sub    $0x4,%esp
f0120036:	68 b4 ad 13 f0       	push   $0xf013adb4
f012003b:	68 06 05 00 00       	push   $0x506
f0120040:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120045:	e8 b1 01 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012004a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012004d:	e8 ff c9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120052:	29 c3                	sub    %eax,%ebx
f0120054:	89 d8                	mov    %ebx,%eax
f0120056:	83 f8 02             	cmp    $0x2,%eax
f0120059:	74 17                	je     f0120072 <test_kfree+0x6f3>
f012005b:	83 ec 04             	sub    $0x4,%esp
f012005e:	68 1c ae 13 f0       	push   $0xf013ae1c
f0120063:	68 07 05 00 00       	push   $0x507
f0120068:	68 9a ad 13 f0       	push   $0xf013ad9a
f012006d:	e8 89 01 fe ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120072:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120079:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012007c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120082:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120085:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012008c:	eb 0e                	jmp    f012009c <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f012008e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120091:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120094:	01 d0                	add    %edx,%eax
f0120096:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120099:	ff 45 f4             	incl   -0xc(%ebp)
f012009c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01200a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200a5:	7f e7                	jg     f012008e <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01200a7:	e8 a5 c9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01200ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200af:	e8 88 3c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01200b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01200b7:	83 ec 0c             	sub    $0xc,%esp
f01200ba:	68 00 fc 2f 00       	push   $0x2ffc00
f01200bf:	e8 4f 77 fe ff       	call   f0107813 <kmalloc>
f01200c4:	83 c4 10             	add    $0x10,%esp
f01200c7:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01200cd:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01200d3:	89 c1                	mov    %eax,%ecx
f01200d5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01200dc:	10 00 00 
f01200df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01200e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200ea:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01200f0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01200f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01200fb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120101:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120107:	29 d0                	sub    %edx,%eax
f0120109:	89 c3                	mov    %eax,%ebx
f012010b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120112:	10 00 00 
f0120115:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012011a:	0f b6 d0             	movzbl %al,%edx
f012011d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120123:	01 d0                	add    %edx,%eax
f0120125:	48                   	dec    %eax
f0120126:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012012c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120132:	ba 00 00 00 00       	mov    $0x0,%edx
f0120137:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012013d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120143:	29 d0                	sub    %edx,%eax
f0120145:	01 c3                	add    %eax,%ebx
f0120147:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012014e:	10 00 00 
f0120151:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120156:	0f b6 c0             	movzbl %al,%eax
f0120159:	c1 e0 04             	shl    $0x4,%eax
f012015c:	89 c2                	mov    %eax,%edx
f012015e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120164:	01 d0                	add    %edx,%eax
f0120166:	48                   	dec    %eax
f0120167:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012016d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120173:	ba 00 00 00 00       	mov    $0x0,%edx
f0120178:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012017e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120184:	29 d0                	sub    %edx,%eax
f0120186:	01 d8                	add    %ebx,%eax
f0120188:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012018d:	39 c1                	cmp    %eax,%ecx
f012018f:	74 17                	je     f01201a8 <test_kfree+0x829>
f0120191:	83 ec 04             	sub    $0x4,%esp
f0120194:	68 80 ae 13 f0       	push   $0xf013ae80
f0120199:	68 13 05 00 00       	push   $0x513
f012019e:	68 9a ad 13 f0       	push   $0xf013ad9a
f01201a3:	e8 53 00 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201a8:	e8 8f 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01201ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201b0:	74 17                	je     f01201c9 <test_kfree+0x84a>
f01201b2:	83 ec 04             	sub    $0x4,%esp
f01201b5:	68 b4 ad 13 f0       	push   $0xf013adb4
f01201ba:	68 14 05 00 00       	push   $0x514
f01201bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f01201c4:	e8 32 00 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201c9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201cc:	e8 80 c8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01201d1:	29 c3                	sub    %eax,%ebx
f01201d3:	89 d8                	mov    %ebx,%eax
f01201d5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01201da:	74 17                	je     f01201f3 <test_kfree+0x874>
f01201dc:	83 ec 04             	sub    $0x4,%esp
f01201df:	68 1c ae 13 f0       	push   $0xf013ae1c
f01201e4:	68 15 05 00 00       	push   $0x515
f01201e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01201ee:	e8 08 00 fe ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01201f3:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f01201fa:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01201fd:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120203:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120206:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012020d:	eb 0e                	jmp    f012021d <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f012020f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120212:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120215:	01 d0                	add    %edx,%eax
f0120217:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012021a:	ff 45 f4             	incl   -0xc(%ebp)
f012021d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120223:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120226:	7f e7                	jg     f012020f <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120228:	e8 24 c8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012022d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120230:	e8 07 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120235:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120238:	83 ec 0c             	sub    $0xc,%esp
f012023b:	68 00 fc 5f 00       	push   $0x5ffc00
f0120240:	e8 ce 75 fe ff       	call   f0107813 <kmalloc>
f0120245:	83 c4 10             	add    $0x10,%esp
f0120248:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012024e:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120254:	89 c1                	mov    %eax,%ecx
f0120256:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012025d:	10 00 00 
f0120260:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120266:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012026b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120271:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120277:	ba 00 00 00 00       	mov    $0x0,%edx
f012027c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120282:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120288:	29 d0                	sub    %edx,%eax
f012028a:	89 c3                	mov    %eax,%ebx
f012028c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120293:	10 00 00 
f0120296:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012029b:	0f b6 d0             	movzbl %al,%edx
f012029e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01202a4:	01 d0                	add    %edx,%eax
f01202a6:	48                   	dec    %eax
f01202a7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01202ad:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01202b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01202b8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01202be:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01202c4:	29 d0                	sub    %edx,%eax
f01202c6:	01 c3                	add    %eax,%ebx
f01202c8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01202cf:	10 00 00 
f01202d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01202d7:	0f b6 c0             	movzbl %al,%eax
f01202da:	c1 e0 04             	shl    $0x4,%eax
f01202dd:	89 c2                	mov    %eax,%edx
f01202df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01202e5:	01 d0                	add    %edx,%eax
f01202e7:	48                   	dec    %eax
f01202e8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01202ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01202f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01202f9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01202ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120305:	29 d0                	sub    %edx,%eax
f0120307:	01 d8                	add    %ebx,%eax
f0120309:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012030e:	39 c1                	cmp    %eax,%ecx
f0120310:	74 17                	je     f0120329 <test_kfree+0x9aa>
f0120312:	83 ec 04             	sub    $0x4,%esp
f0120315:	68 80 ae 13 f0       	push   $0xf013ae80
f012031a:	68 21 05 00 00       	push   $0x521
f012031f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120324:	e8 d2 fe fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120329:	e8 0e 3a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012032e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120331:	74 17                	je     f012034a <test_kfree+0x9cb>
f0120333:	83 ec 04             	sub    $0x4,%esp
f0120336:	68 b4 ad 13 f0       	push   $0xf013adb4
f012033b:	68 22 05 00 00       	push   $0x522
f0120340:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120345:	e8 b1 fe fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012034a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012034d:	e8 ff c6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120352:	29 c3                	sub    %eax,%ebx
f0120354:	89 d8                	mov    %ebx,%eax
f0120356:	3d 00 06 00 00       	cmp    $0x600,%eax
f012035b:	74 17                	je     f0120374 <test_kfree+0x9f5>
f012035d:	83 ec 04             	sub    $0x4,%esp
f0120360:	68 1c ae 13 f0       	push   $0xf013ae1c
f0120365:	68 23 05 00 00       	push   $0x523
f012036a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012036f:	e8 87 fe fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120374:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f012037b:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012037e:	e8 ce c6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120383:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120386:	e8 b1 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012038b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012038e:	83 ec 0c             	sub    $0xc,%esp
f0120391:	68 00 38 00 00       	push   $0x3800
f0120396:	e8 78 74 fe ff       	call   f0107813 <kmalloc>
f012039b:	83 c4 10             	add    $0x10,%esp
f012039e:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01203a4:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01203aa:	89 c1                	mov    %eax,%ecx
f01203ac:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01203b3:	10 00 00 
f01203b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01203bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203c1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01203c7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01203cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01203d2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01203d8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01203de:	29 d0                	sub    %edx,%eax
f01203e0:	89 c3                	mov    %eax,%ebx
f01203e2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01203e9:	10 00 00 
f01203ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01203f1:	0f b6 d0             	movzbl %al,%edx
f01203f4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01203fa:	01 d0                	add    %edx,%eax
f01203fc:	48                   	dec    %eax
f01203fd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120403:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120409:	ba 00 00 00 00       	mov    $0x0,%edx
f012040e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120414:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012041a:	29 d0                	sub    %edx,%eax
f012041c:	01 c3                	add    %eax,%ebx
f012041e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120425:	10 00 00 
f0120428:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012042d:	0f b6 c0             	movzbl %al,%eax
f0120430:	c1 e0 04             	shl    $0x4,%eax
f0120433:	89 c2                	mov    %eax,%edx
f0120435:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012043b:	01 d0                	add    %edx,%eax
f012043d:	48                   	dec    %eax
f012043e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120444:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012044a:	ba 00 00 00 00       	mov    $0x0,%edx
f012044f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120455:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012045b:	29 d0                	sub    %edx,%eax
f012045d:	01 d8                	add    %ebx,%eax
f012045f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120464:	39 c1                	cmp    %eax,%ecx
f0120466:	74 17                	je     f012047f <test_kfree+0xb00>
f0120468:	83 ec 04             	sub    $0x4,%esp
f012046b:	68 80 ae 13 f0       	push   $0xf013ae80
f0120470:	68 2a 05 00 00       	push   $0x52a
f0120475:	68 9a ad 13 f0       	push   $0xf013ad9a
f012047a:	e8 7c fd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012047f:	e8 b8 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120484:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120487:	74 17                	je     f01204a0 <test_kfree+0xb21>
f0120489:	83 ec 04             	sub    $0x4,%esp
f012048c:	68 b4 ad 13 f0       	push   $0xf013adb4
f0120491:	68 2b 05 00 00       	push   $0x52b
f0120496:	68 9a ad 13 f0       	push   $0xf013ad9a
f012049b:	e8 5b fd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01204a3:	e8 a9 c5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01204a8:	29 c3                	sub    %eax,%ebx
f01204aa:	89 d8                	mov    %ebx,%eax
f01204ac:	83 f8 04             	cmp    $0x4,%eax
f01204af:	74 17                	je     f01204c8 <test_kfree+0xb49>
f01204b1:	83 ec 04             	sub    $0x4,%esp
f01204b4:	68 1c ae 13 f0       	push   $0xf013ae1c
f01204b9:	68 2c 05 00 00       	push   $0x52c
f01204be:	68 9a ad 13 f0       	push   $0xf013ad9a
f01204c3:	e8 33 fd fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01204c8:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f01204cf:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01204d2:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01204d8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01204db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204e2:	eb 0e                	jmp    f01204f2 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01204e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01204ea:	01 d0                	add    %edx,%eax
f01204ec:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01204ef:	ff 45 f4             	incl   -0xc(%ebp)
f01204f2:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01204f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204fb:	7f e7                	jg     f01204e4 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01204fd:	e8 4f c5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120502:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120508:	e8 2f 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012050d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120513:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120519:	83 ec 0c             	sub    $0xc,%esp
f012051c:	50                   	push   %eax
f012051d:	e8 bc 73 fe ff       	call   f01078de <kfree>
f0120522:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120525:	e8 12 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012052a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120530:	74 17                	je     f0120549 <test_kfree+0xbca>
f0120532:	83 ec 04             	sub    $0x4,%esp
f0120535:	68 b4 ad 13 f0       	push   $0xf013adb4
f012053a:	68 3b 05 00 00       	push   $0x53b
f012053f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120544:	e8 b2 fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120549:	e8 03 c5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012054e:	89 c2                	mov    %eax,%edx
f0120550:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120556:	29 c2                	sub    %eax,%edx
f0120558:	89 d0                	mov    %edx,%eax
f012055a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012055f:	74 17                	je     f0120578 <test_kfree+0xbf9>
f0120561:	83 ec 04             	sub    $0x4,%esp
f0120564:	68 24 b5 13 f0       	push   $0xf013b524
f0120569:	68 3c 05 00 00       	push   $0x53c
f012056e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120573:	e8 83 fc fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120578:	e8 d4 c4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012057d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120583:	e8 b4 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120588:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f012058e:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120594:	83 ec 0c             	sub    $0xc,%esp
f0120597:	50                   	push   %eax
f0120598:	e8 41 73 fe ff       	call   f01078de <kfree>
f012059d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205a0:	e8 97 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01205a5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01205ab:	74 17                	je     f01205c4 <test_kfree+0xc45>
f01205ad:	83 ec 04             	sub    $0x4,%esp
f01205b0:	68 b4 ad 13 f0       	push   $0xf013adb4
f01205b5:	68 42 05 00 00       	push   $0x542
f01205ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f01205bf:	e8 37 fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01205c4:	e8 88 c4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01205c9:	89 c2                	mov    %eax,%edx
f01205cb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01205d1:	29 c2                	sub    %eax,%edx
f01205d3:	89 d0                	mov    %edx,%eax
f01205d5:	83 f8 01             	cmp    $0x1,%eax
f01205d8:	74 17                	je     f01205f1 <test_kfree+0xc72>
f01205da:	83 ec 04             	sub    $0x4,%esp
f01205dd:	68 24 b5 13 f0       	push   $0xf013b524
f01205e2:	68 43 05 00 00       	push   $0x543
f01205e7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01205ec:	e8 0a fc fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01205f1:	e8 5b c4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01205f6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205fc:	e8 3b 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120601:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120607:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f012060d:	83 ec 0c             	sub    $0xc,%esp
f0120610:	50                   	push   %eax
f0120611:	e8 c8 72 fe ff       	call   f01078de <kfree>
f0120616:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120619:	e8 1e 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012061e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120624:	74 17                	je     f012063d <test_kfree+0xcbe>
f0120626:	83 ec 04             	sub    $0x4,%esp
f0120629:	68 b4 ad 13 f0       	push   $0xf013adb4
f012062e:	68 49 05 00 00       	push   $0x549
f0120633:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120638:	e8 be fb fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012063d:	e8 0f c4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120642:	89 c2                	mov    %eax,%edx
f0120644:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012064a:	29 c2                	sub    %eax,%edx
f012064c:	89 d0                	mov    %edx,%eax
f012064e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120653:	74 17                	je     f012066c <test_kfree+0xced>
f0120655:	83 ec 04             	sub    $0x4,%esp
f0120658:	68 24 b5 13 f0       	push   $0xf013b524
f012065d:	68 4a 05 00 00       	push   $0x54a
f0120662:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120667:	e8 8f fb fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012066c:	e8 e0 c3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120671:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120677:	e8 c0 36 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012067c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120682:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120688:	83 ec 0c             	sub    $0xc,%esp
f012068b:	50                   	push   %eax
f012068c:	e8 4d 72 fe ff       	call   f01078de <kfree>
f0120691:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120694:	e8 a3 36 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120699:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012069f:	74 17                	je     f01206b8 <test_kfree+0xd39>
f01206a1:	83 ec 04             	sub    $0x4,%esp
f01206a4:	68 b4 ad 13 f0       	push   $0xf013adb4
f01206a9:	68 50 05 00 00       	push   $0x550
f01206ae:	68 9a ad 13 f0       	push   $0xf013ad9a
f01206b3:	e8 43 fb fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01206b8:	e8 94 c3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01206bd:	89 c2                	mov    %eax,%edx
f01206bf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206c5:	29 c2                	sub    %eax,%edx
f01206c7:	89 d0                	mov    %edx,%eax
f01206c9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01206ce:	74 17                	je     f01206e7 <test_kfree+0xd68>
f01206d0:	83 ec 04             	sub    $0x4,%esp
f01206d3:	68 24 b5 13 f0       	push   $0xf013b524
f01206d8:	68 51 05 00 00       	push   $0x551
f01206dd:	68 9a ad 13 f0       	push   $0xf013ad9a
f01206e2:	e8 14 fb fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01206e7:	83 ec 0c             	sub    $0xc,%esp
f01206ea:	68 5c b5 13 f0       	push   $0xf013b55c
f01206ef:	e8 8e 05 fe ff       	call   f0100c82 <cprintf>
f01206f4:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01206f7:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01206fd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120700:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120707:	eb 1e                	jmp    f0120727 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120709:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012070f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120712:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120715:	01 c8                	add    %ecx,%eax
f0120717:	8a 00                	mov    (%eax),%al
f0120719:	0f be c0             	movsbl %al,%eax
f012071c:	01 d0                	add    %edx,%eax
f012071e:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120724:	ff 45 f4             	incl   -0xc(%ebp)
f0120727:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012072d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120730:	7f d7                	jg     f0120709 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120732:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120738:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012073e:	89 c1                	mov    %eax,%ecx
f0120740:	01 c9                	add    %ecx,%ecx
f0120742:	01 c8                	add    %ecx,%eax
f0120744:	39 c2                	cmp    %eax,%edx
f0120746:	74 17                	je     f012075f <test_kfree+0xde0>
f0120748:	83 ec 04             	sub    $0x4,%esp
f012074b:	68 80 b5 13 f0       	push   $0xf013b580
f0120750:	68 5e 05 00 00       	push   $0x55e
f0120755:	68 9a ad 13 f0       	push   $0xf013ad9a
f012075a:	e8 9c fa fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012075f:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120765:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120768:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012076f:	eb 1e                	jmp    f012078f <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120771:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120777:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012077a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012077d:	01 c8                	add    %ecx,%eax
f012077f:	8a 00                	mov    (%eax),%al
f0120781:	0f be c0             	movsbl %al,%eax
f0120784:	01 d0                	add    %edx,%eax
f0120786:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012078c:	ff 45 f4             	incl   -0xc(%ebp)
f012078f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120795:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120798:	7f d7                	jg     f0120771 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012079a:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01207a0:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f01207a6:	c1 e2 02             	shl    $0x2,%edx
f01207a9:	39 d0                	cmp    %edx,%eax
f01207ab:	74 17                	je     f01207c4 <test_kfree+0xe45>
f01207ad:	83 ec 04             	sub    $0x4,%esp
f01207b0:	68 80 b5 13 f0       	push   $0xf013b580
f01207b5:	68 66 05 00 00       	push   $0x566
f01207ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f01207bf:	e8 37 fa fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01207c4:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01207ca:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01207cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01207d4:	eb 1e                	jmp    f01207f4 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f01207d6:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01207dc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01207df:	8b 45 80             	mov    -0x80(%ebp),%eax
f01207e2:	01 c8                	add    %ecx,%eax
f01207e4:	8a 00                	mov    (%eax),%al
f01207e6:	0f be c0             	movsbl %al,%eax
f01207e9:	01 d0                	add    %edx,%eax
f01207eb:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01207f1:	ff 45 f4             	incl   -0xc(%ebp)
f01207f4:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01207fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207fd:	7f d7                	jg     f01207d6 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01207ff:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120805:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012080b:	89 d0                	mov    %edx,%eax
f012080d:	c1 e0 02             	shl    $0x2,%eax
f0120810:	01 d0                	add    %edx,%eax
f0120812:	39 c1                	cmp    %eax,%ecx
f0120814:	74 17                	je     f012082d <test_kfree+0xeae>
f0120816:	83 ec 04             	sub    $0x4,%esp
f0120819:	68 80 b5 13 f0       	push   $0xf013b580
f012081e:	68 6e 05 00 00       	push   $0x56e
f0120823:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120828:	e8 ce f9 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012082d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120833:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012083d:	eb 1e                	jmp    f012085d <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f012083f:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120845:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120848:	8b 45 80             	mov    -0x80(%ebp),%eax
f012084b:	01 c8                	add    %ecx,%eax
f012084d:	8a 00                	mov    (%eax),%al
f012084f:	0f be c0             	movsbl %al,%eax
f0120852:	01 d0                	add    %edx,%eax
f0120854:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012085a:	ff 45 f4             	incl   -0xc(%ebp)
f012085d:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120863:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120866:	7f d7                	jg     f012083f <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120868:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012086e:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120874:	89 d0                	mov    %edx,%eax
f0120876:	01 c0                	add    %eax,%eax
f0120878:	01 d0                	add    %edx,%eax
f012087a:	01 c0                	add    %eax,%eax
f012087c:	01 d0                	add    %edx,%eax
f012087e:	39 c1                	cmp    %eax,%ecx
f0120880:	74 17                	je     f0120899 <test_kfree+0xf1a>
f0120882:	83 ec 04             	sub    $0x4,%esp
f0120885:	68 80 b5 13 f0       	push   $0xf013b580
f012088a:	68 76 05 00 00       	push   $0x576
f012088f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120894:	e8 62 f9 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f0120899:	83 ec 0c             	sub    $0xc,%esp
f012089c:	68 b3 b5 13 f0       	push   $0xf013b5b3
f01208a1:	e8 dc 03 fe ff       	call   f0100c82 <cprintf>
f01208a6:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01208a9:	e8 a3 c1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01208ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208b1:	e8 86 34 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01208b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01208b9:	83 ec 0c             	sub    $0xc,%esp
f01208bc:	68 00 50 00 00       	push   $0x5000
f01208c1:	e8 4d 6f fe ff       	call   f0107813 <kmalloc>
f01208c6:	83 c4 10             	add    $0x10,%esp
f01208c9:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208cf:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01208d5:	89 c1                	mov    %eax,%ecx
f01208d7:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01208de:	10 00 00 
f01208e1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01208e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208ec:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01208f2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01208f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01208fd:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120903:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120909:	29 d0                	sub    %edx,%eax
f012090b:	89 c3                	mov    %eax,%ebx
f012090d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120914:	10 00 00 
f0120917:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012091c:	0f b6 d0             	movzbl %al,%edx
f012091f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120925:	01 d0                	add    %edx,%eax
f0120927:	48                   	dec    %eax
f0120928:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012092e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120934:	ba 00 00 00 00       	mov    $0x0,%edx
f0120939:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012093f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120945:	29 d0                	sub    %edx,%eax
f0120947:	01 c3                	add    %eax,%ebx
f0120949:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120950:	10 00 00 
f0120953:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120958:	0f b6 c0             	movzbl %al,%eax
f012095b:	c1 e0 04             	shl    $0x4,%eax
f012095e:	89 c2                	mov    %eax,%edx
f0120960:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120966:	01 d0                	add    %edx,%eax
f0120968:	48                   	dec    %eax
f0120969:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012096f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120975:	ba 00 00 00 00       	mov    $0x0,%edx
f012097a:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120980:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120986:	29 d0                	sub    %edx,%eax
f0120988:	01 d8                	add    %ebx,%eax
f012098a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012098f:	39 c1                	cmp    %eax,%ecx
f0120991:	74 17                	je     f01209aa <test_kfree+0x102b>
f0120993:	83 ec 04             	sub    $0x4,%esp
f0120996:	68 80 ae 13 f0       	push   $0xf013ae80
f012099b:	68 80 05 00 00       	push   $0x580
f01209a0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01209a5:	e8 51 f8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209aa:	e8 8d 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01209af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209b2:	74 17                	je     f01209cb <test_kfree+0x104c>
f01209b4:	83 ec 04             	sub    $0x4,%esp
f01209b7:	68 b4 ad 13 f0       	push   $0xf013adb4
f01209bc:	68 81 05 00 00       	push   $0x581
f01209c1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01209c6:	e8 30 f8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209ce:	e8 7e c0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01209d3:	29 c3                	sub    %eax,%ebx
f01209d5:	89 d8                	mov    %ebx,%eax
f01209d7:	83 f8 05             	cmp    $0x5,%eax
f01209da:	74 17                	je     f01209f3 <test_kfree+0x1074>
f01209dc:	83 ec 04             	sub    $0x4,%esp
f01209df:	68 1c ae 13 f0       	push   $0xf013ae1c
f01209e4:	68 82 05 00 00       	push   $0x582
f01209e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01209ee:	e8 08 f8 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01209f3:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01209fa:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01209fd:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120a03:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a0d:	eb 0e                	jmp    f0120a1d <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120a0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a12:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a15:	01 d0                	add    %edx,%eax
f0120a17:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120a1a:	ff 45 f4             	incl   -0xc(%ebp)
f0120a1d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120a23:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a26:	7f e7                	jg     f0120a0f <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a28:	e8 24 c0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120a2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a30:	e8 07 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120a35:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120a38:	83 ec 0c             	sub    $0xc,%esp
f0120a3b:	68 00 00 10 00       	push   $0x100000
f0120a40:	e8 ce 6d fe ff       	call   f0107813 <kmalloc>
f0120a45:	83 c4 10             	add    $0x10,%esp
f0120a48:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a4e:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120a54:	89 c1                	mov    %eax,%ecx
f0120a56:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120a5d:	10 00 00 
f0120a60:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120a66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a6b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120a71:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120a77:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a7c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120a82:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120a88:	29 d0                	sub    %edx,%eax
f0120a8a:	89 c3                	mov    %eax,%ebx
f0120a8c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120a93:	10 00 00 
f0120a96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120a9b:	0f b6 d0             	movzbl %al,%edx
f0120a9e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120aa4:	01 d0                	add    %edx,%eax
f0120aa6:	48                   	dec    %eax
f0120aa7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120aad:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120ab3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ab8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120abe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120ac4:	29 d0                	sub    %edx,%eax
f0120ac6:	01 c3                	add    %eax,%ebx
f0120ac8:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120acf:	10 00 00 
f0120ad2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120ad7:	0f b6 c0             	movzbl %al,%eax
f0120ada:	c1 e0 04             	shl    $0x4,%eax
f0120add:	89 c2                	mov    %eax,%edx
f0120adf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120ae5:	01 d0                	add    %edx,%eax
f0120ae7:	48                   	dec    %eax
f0120ae8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120aee:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120af4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120af9:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120aff:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120b05:	29 d0                	sub    %edx,%eax
f0120b07:	01 d8                	add    %ebx,%eax
f0120b09:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120b0e:	39 c1                	cmp    %eax,%ecx
f0120b10:	74 17                	je     f0120b29 <test_kfree+0x11aa>
f0120b12:	83 ec 04             	sub    $0x4,%esp
f0120b15:	68 80 ae 13 f0       	push   $0xf013ae80
f0120b1a:	68 8e 05 00 00       	push   $0x58e
f0120b1f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120b24:	e8 d2 f6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b29:	e8 0e 32 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120b2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b31:	74 17                	je     f0120b4a <test_kfree+0x11cb>
f0120b33:	83 ec 04             	sub    $0x4,%esp
f0120b36:	68 b4 ad 13 f0       	push   $0xf013adb4
f0120b3b:	68 8f 05 00 00       	push   $0x58f
f0120b40:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120b45:	e8 b1 f6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b4a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b4d:	e8 ff be fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120b52:	29 c3                	sub    %eax,%ebx
f0120b54:	89 d8                	mov    %ebx,%eax
f0120b56:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120b5b:	74 17                	je     f0120b74 <test_kfree+0x11f5>
f0120b5d:	83 ec 04             	sub    $0x4,%esp
f0120b60:	68 1c ae 13 f0       	push   $0xf013ae1c
f0120b65:	68 90 05 00 00       	push   $0x590
f0120b6a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120b6f:	e8 87 f6 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120b74:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120b7b:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120b7e:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120b84:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120b87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b8e:	eb 0e                	jmp    f0120b9e <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120b90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b96:	01 d0                	add    %edx,%eax
f0120b98:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120b9b:	ff 45 f4             	incl   -0xc(%ebp)
f0120b9e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120ba4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120ba7:	7f e7                	jg     f0120b90 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120ba9:	e8 ac 66 ff ff       	call   f011725a <isKHeapPlacementStrategyNEXTFIT>
f0120bae:	84 c0                	test   %al,%al
f0120bb0:	0f 84 ac 06 00 00    	je     f0121262 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120bb6:	e8 96 be fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120bbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120bbe:	e8 79 31 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120bc3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120bc6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120bcd:	10 00 00 
f0120bd0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120bd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bdb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120be1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bec:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120bf2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120bf8:	29 d0                	sub    %edx,%eax
f0120bfa:	89 c1                	mov    %eax,%ecx
f0120bfc:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120c03:	10 00 00 
f0120c06:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120c0b:	0f b6 d0             	movzbl %al,%edx
f0120c0e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120c14:	01 d0                	add    %edx,%eax
f0120c16:	48                   	dec    %eax
f0120c17:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120c1d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120c23:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c28:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120c2e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120c34:	29 d0                	sub    %edx,%eax
f0120c36:	01 c1                	add    %eax,%ecx
f0120c38:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120c3f:	10 00 00 
f0120c42:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120c47:	0f b6 c0             	movzbl %al,%eax
f0120c4a:	c1 e0 04             	shl    $0x4,%eax
f0120c4d:	89 c2                	mov    %eax,%edx
f0120c4f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120c55:	01 d0                	add    %edx,%eax
f0120c57:	48                   	dec    %eax
f0120c58:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120c5e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c69:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120c6f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120c75:	29 d0                	sub    %edx,%eax
f0120c77:	01 c8                	add    %ecx,%eax
f0120c79:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120c7e:	29 c2                	sub    %eax,%edx
f0120c80:	89 d0                	mov    %edx,%eax
f0120c82:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120c88:	83 ec 0c             	sub    $0xc,%esp
f0120c8b:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120c91:	e8 7d 6b fe ff       	call   f0107813 <kmalloc>
f0120c96:	83 c4 10             	add    $0x10,%esp
f0120c99:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c9f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120ca5:	89 c1                	mov    %eax,%ecx
f0120ca7:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120cae:	10 00 00 
f0120cb1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120cb7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120cbc:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0120cc2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120cc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ccd:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120cd3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120cd9:	29 d0                	sub    %edx,%eax
f0120cdb:	89 c3                	mov    %eax,%ebx
f0120cdd:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120ce4:	10 00 00 
f0120ce7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120cec:	0f b6 d0             	movzbl %al,%edx
f0120cef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120cf5:	01 d0                	add    %edx,%eax
f0120cf7:	48                   	dec    %eax
f0120cf8:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120cfe:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d09:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120d0f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120d15:	29 d0                	sub    %edx,%eax
f0120d17:	01 c3                	add    %eax,%ebx
f0120d19:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120d20:	10 00 00 
f0120d23:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120d28:	0f b6 c0             	movzbl %al,%eax
f0120d2b:	c1 e0 04             	shl    $0x4,%eax
f0120d2e:	89 c2                	mov    %eax,%edx
f0120d30:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120d36:	01 d0                	add    %edx,%eax
f0120d38:	48                   	dec    %eax
f0120d39:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120d3f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d4a:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120d50:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120d56:	29 d0                	sub    %edx,%eax
f0120d58:	01 d8                	add    %ebx,%eax
f0120d5a:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120d5f:	39 c1                	cmp    %eax,%ecx
f0120d61:	74 17                	je     f0120d7a <test_kfree+0x13fb>
f0120d63:	83 ec 04             	sub    $0x4,%esp
f0120d66:	68 80 ae 13 f0       	push   $0xf013ae80
f0120d6b:	68 9f 05 00 00       	push   $0x59f
f0120d70:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120d75:	e8 81 f4 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d7a:	e8 bd 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120d7f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d82:	74 17                	je     f0120d9b <test_kfree+0x141c>
f0120d84:	83 ec 04             	sub    $0x4,%esp
f0120d87:	68 b4 ad 13 f0       	push   $0xf013adb4
f0120d8c:	68 a0 05 00 00       	push   $0x5a0
f0120d91:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120d96:	e8 60 f4 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d9b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d9e:	e8 ae bc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120da3:	29 c3                	sub    %eax,%ebx
f0120da5:	89 da                	mov    %ebx,%edx
f0120da7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120dad:	c1 e8 0c             	shr    $0xc,%eax
f0120db0:	39 c2                	cmp    %eax,%edx
f0120db2:	74 17                	je     f0120dcb <test_kfree+0x144c>
f0120db4:	83 ec 04             	sub    $0x4,%esp
f0120db7:	68 1c ae 13 f0       	push   $0xf013ae1c
f0120dbc:	68 a1 05 00 00       	push   $0x5a1
f0120dc1:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120dc6:	e8 30 f4 fd ff       	call   f01001fb <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120dcb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120dd1:	48                   	dec    %eax
f0120dd2:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120dd8:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120dde:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120de1:	e8 6b bc fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120de6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120de9:	e8 4e 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120dee:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120df1:	83 ec 0c             	sub    $0xc,%esp
f0120df4:	68 00 00 30 00       	push   $0x300000
f0120df9:	e8 15 6a fe ff       	call   f0107813 <kmalloc>
f0120dfe:	83 c4 10             	add    $0x10,%esp
f0120e01:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120e07:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120e0d:	89 c1                	mov    %eax,%ecx
f0120e0f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120e16:	10 00 00 
f0120e19:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120e1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e24:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120e2a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120e30:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e35:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120e3b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120e41:	29 d0                	sub    %edx,%eax
f0120e43:	89 c3                	mov    %eax,%ebx
f0120e45:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120e4c:	10 00 00 
f0120e4f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e54:	0f b6 d0             	movzbl %al,%edx
f0120e57:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120e5d:	01 d0                	add    %edx,%eax
f0120e5f:	48                   	dec    %eax
f0120e60:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120e66:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e71:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120e77:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120e7d:	29 d0                	sub    %edx,%eax
f0120e7f:	01 c3                	add    %eax,%ebx
f0120e81:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120e88:	10 00 00 
f0120e8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e90:	0f b6 c0             	movzbl %al,%eax
f0120e93:	c1 e0 04             	shl    $0x4,%eax
f0120e96:	89 c2                	mov    %eax,%edx
f0120e98:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120e9e:	01 d0                	add    %edx,%eax
f0120ea0:	48                   	dec    %eax
f0120ea1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120ea7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eb2:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120eb8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120ebe:	29 d0                	sub    %edx,%eax
f0120ec0:	01 d8                	add    %ebx,%eax
f0120ec2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120ec7:	39 c1                	cmp    %eax,%ecx
f0120ec9:	74 17                	je     f0120ee2 <test_kfree+0x1563>
f0120ecb:	83 ec 04             	sub    $0x4,%esp
f0120ece:	68 80 ae 13 f0       	push   $0xf013ae80
f0120ed3:	68 ae 05 00 00       	push   $0x5ae
f0120ed8:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120edd:	e8 19 f3 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ee2:	e8 55 2e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120ee7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eea:	74 17                	je     f0120f03 <test_kfree+0x1584>
f0120eec:	83 ec 04             	sub    $0x4,%esp
f0120eef:	68 b4 ad 13 f0       	push   $0xf013adb4
f0120ef4:	68 af 05 00 00       	push   $0x5af
f0120ef9:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120efe:	e8 f8 f2 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120f03:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120f06:	e8 46 bb fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120f0b:	29 c3                	sub    %eax,%ebx
f0120f0d:	89 d8                	mov    %ebx,%eax
f0120f0f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f14:	74 17                	je     f0120f2d <test_kfree+0x15ae>
f0120f16:	83 ec 04             	sub    $0x4,%esp
f0120f19:	68 1c ae 13 f0       	push   $0xf013ae1c
f0120f1e:	68 b0 05 00 00       	push   $0x5b0
f0120f23:	68 9a ad 13 f0       	push   $0xf013ad9a
f0120f28:	e8 ce f2 fd ff       	call   f01001fb <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120f2d:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120f34:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120f37:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120f3d:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120f40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f47:	eb 0e                	jmp    f0120f57 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120f49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f4c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f4f:	01 d0                	add    %edx,%eax
f0120f51:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120f54:	ff 45 f4             	incl   -0xc(%ebp)
f0120f57:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120f5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f60:	7f e7                	jg     f0120f49 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120f62:	e8 ea ba fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0120f67:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f6a:	e8 cd 2d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120f6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120f72:	83 ec 0c             	sub    $0xc,%esp
f0120f75:	68 00 08 00 00       	push   $0x800
f0120f7a:	e8 94 68 fe ff       	call   f0107813 <kmalloc>
f0120f7f:	83 c4 10             	add    $0x10,%esp
f0120f82:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f88:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120f8e:	89 c1                	mov    %eax,%ecx
f0120f90:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120f97:	10 00 00 
f0120f9a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120fa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120fa5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120fab:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120fb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fb6:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120fbc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120fc2:	29 d0                	sub    %edx,%eax
f0120fc4:	89 c3                	mov    %eax,%ebx
f0120fc6:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120fcd:	10 00 00 
f0120fd0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120fd5:	0f b6 d0             	movzbl %al,%edx
f0120fd8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120fde:	01 d0                	add    %edx,%eax
f0120fe0:	48                   	dec    %eax
f0120fe1:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120fe7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120fed:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ff2:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120ff8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120ffe:	29 d0                	sub    %edx,%eax
f0121000:	01 c3                	add    %eax,%ebx
f0121002:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121009:	10 00 00 
f012100c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121011:	0f b6 c0             	movzbl %al,%eax
f0121014:	c1 e0 04             	shl    $0x4,%eax
f0121017:	89 c2                	mov    %eax,%edx
f0121019:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012101f:	01 d0                	add    %edx,%eax
f0121021:	48                   	dec    %eax
f0121022:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121028:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012102e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121033:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121039:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012103f:	29 d0                	sub    %edx,%eax
f0121041:	01 d8                	add    %ebx,%eax
f0121043:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121048:	39 c1                	cmp    %eax,%ecx
f012104a:	74 17                	je     f0121063 <test_kfree+0x16e4>
f012104c:	83 ec 04             	sub    $0x4,%esp
f012104f:	68 80 ae 13 f0       	push   $0xf013ae80
f0121054:	68 bc 05 00 00       	push   $0x5bc
f0121059:	68 9a ad 13 f0       	push   $0xf013ad9a
f012105e:	e8 98 f1 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121063:	e8 d4 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121068:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012106b:	74 17                	je     f0121084 <test_kfree+0x1705>
f012106d:	83 ec 04             	sub    $0x4,%esp
f0121070:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121075:	68 bd 05 00 00       	push   $0x5bd
f012107a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012107f:	e8 77 f1 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121084:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121087:	e8 c5 b9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012108c:	29 c3                	sub    %eax,%ebx
f012108e:	89 d8                	mov    %ebx,%eax
f0121090:	83 f8 01             	cmp    $0x1,%eax
f0121093:	74 17                	je     f01210ac <test_kfree+0x172d>
f0121095:	83 ec 04             	sub    $0x4,%esp
f0121098:	68 1c ae 13 f0       	push   $0xf013ae1c
f012109d:	68 be 05 00 00       	push   $0x5be
f01210a2:	68 9a ad 13 f0       	push   $0xf013ad9a
f01210a7:	e8 4f f1 fd ff       	call   f01001fb <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01210ac:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01210b3:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01210b6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01210bc:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01210bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210c6:	eb 0e                	jmp    f01210d6 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01210c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210cb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210ce:	01 d0                	add    %edx,%eax
f01210d0:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01210d3:	ff 45 f4             	incl   -0xc(%ebp)
f01210d6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01210dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210df:	7f e7                	jg     f01210c8 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01210e1:	e8 6b b9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01210e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210e9:	e8 4e 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01210ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01210f1:	83 ec 0c             	sub    $0xc,%esp
f01210f4:	68 00 00 10 00       	push   $0x100000
f01210f9:	e8 15 67 fe ff       	call   f0107813 <kmalloc>
f01210fe:	83 c4 10             	add    $0x10,%esp
f0121101:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121107:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012110d:	89 c1                	mov    %eax,%ecx
f012110f:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121116:	10 00 00 
f0121119:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012111f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121124:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012112a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121130:	ba 00 00 00 00       	mov    $0x0,%edx
f0121135:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012113b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121141:	29 d0                	sub    %edx,%eax
f0121143:	89 c3                	mov    %eax,%ebx
f0121145:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012114c:	10 00 00 
f012114f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121154:	0f b6 d0             	movzbl %al,%edx
f0121157:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012115d:	01 d0                	add    %edx,%eax
f012115f:	48                   	dec    %eax
f0121160:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121166:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012116c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121171:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121177:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012117d:	29 d0                	sub    %edx,%eax
f012117f:	01 c3                	add    %eax,%ebx
f0121181:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121188:	10 00 00 
f012118b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121190:	0f b6 c0             	movzbl %al,%eax
f0121193:	c1 e0 04             	shl    $0x4,%eax
f0121196:	89 c2                	mov    %eax,%edx
f0121198:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012119e:	01 d0                	add    %edx,%eax
f01211a0:	48                   	dec    %eax
f01211a1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01211a7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01211ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01211b2:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01211b8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01211be:	29 d0                	sub    %edx,%eax
f01211c0:	01 d8                	add    %ebx,%eax
f01211c2:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01211c7:	39 c1                	cmp    %eax,%ecx
f01211c9:	74 17                	je     f01211e2 <test_kfree+0x1863>
f01211cb:	83 ec 04             	sub    $0x4,%esp
f01211ce:	68 80 ae 13 f0       	push   $0xf013ae80
f01211d3:	68 ca 05 00 00       	push   $0x5ca
f01211d8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01211dd:	e8 19 f0 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211e2:	e8 55 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211ea:	74 17                	je     f0121203 <test_kfree+0x1884>
f01211ec:	83 ec 04             	sub    $0x4,%esp
f01211ef:	68 b4 ad 13 f0       	push   $0xf013adb4
f01211f4:	68 cb 05 00 00       	push   $0x5cb
f01211f9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01211fe:	e8 f8 ef fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121203:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121206:	e8 46 b8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012120b:	29 c3                	sub    %eax,%ebx
f012120d:	89 d8                	mov    %ebx,%eax
f012120f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121214:	74 17                	je     f012122d <test_kfree+0x18ae>
f0121216:	83 ec 04             	sub    $0x4,%esp
f0121219:	68 1c ae 13 f0       	push   $0xf013ae1c
f012121e:	68 cc 05 00 00       	push   $0x5cc
f0121223:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121228:	e8 ce ef fd ff       	call   f01001fb <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f012122d:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121234:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121237:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012123d:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121240:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121247:	eb 0e                	jmp    f0121257 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012124c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012124f:	01 d0                	add    %edx,%eax
f0121251:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121254:	ff 45 f4             	incl   -0xc(%ebp)
f0121257:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012125d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121260:	7f e7                	jg     f0121249 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121262:	83 ec 0c             	sub    $0xc,%esp
f0121265:	68 ba b5 13 f0       	push   $0xf013b5ba
f012126a:	e8 13 fa fd ff       	call   f0100c82 <cprintf>
f012126f:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121272:	e8 da b7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121277:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012127a:	e8 bd 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012127f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121282:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121288:	83 ec 0c             	sub    $0xc,%esp
f012128b:	50                   	push   %eax
f012128c:	e8 4d 66 fe ff       	call   f01078de <kfree>
f0121291:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121294:	e8 a3 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121299:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012129c:	74 17                	je     f01212b5 <test_kfree+0x1936>
f012129e:	83 ec 04             	sub    $0x4,%esp
f01212a1:	68 b4 ad 13 f0       	push   $0xf013adb4
f01212a6:	68 dd 05 00 00       	push   $0x5dd
f01212ab:	68 9a ad 13 f0       	push   $0xf013ad9a
f01212b0:	e8 46 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01212b5:	e8 97 b7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01212ba:	89 c2                	mov    %eax,%edx
f01212bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212bf:	29 c2                	sub    %eax,%edx
f01212c1:	89 d0                	mov    %edx,%eax
f01212c3:	83 f8 02             	cmp    $0x2,%eax
f01212c6:	74 17                	je     f01212df <test_kfree+0x1960>
f01212c8:	83 ec 04             	sub    $0x4,%esp
f01212cb:	68 24 b5 13 f0       	push   $0xf013b524
f01212d0:	68 de 05 00 00       	push   $0x5de
f01212d5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01212da:	e8 1c ef fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01212df:	e8 6d b7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01212e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212e7:	e8 50 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01212ef:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01212f5:	83 ec 0c             	sub    $0xc,%esp
f01212f8:	50                   	push   %eax
f01212f9:	e8 e0 65 fe ff       	call   f01078de <kfree>
f01212fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121301:	e8 36 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121306:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121309:	74 17                	je     f0121322 <test_kfree+0x19a3>
f012130b:	83 ec 04             	sub    $0x4,%esp
f012130e:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121313:	68 e4 05 00 00       	push   $0x5e4
f0121318:	68 9a ad 13 f0       	push   $0xf013ad9a
f012131d:	e8 d9 ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121322:	e8 2a b7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121327:	89 c2                	mov    %eax,%edx
f0121329:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012132c:	29 c2                	sub    %eax,%edx
f012132e:	89 d0                	mov    %edx,%eax
f0121330:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121335:	74 17                	je     f012134e <test_kfree+0x19cf>
f0121337:	83 ec 04             	sub    $0x4,%esp
f012133a:	68 24 b5 13 f0       	push   $0xf013b524
f012133f:	68 e5 05 00 00       	push   $0x5e5
f0121344:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121349:	e8 ad ee fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012134e:	e8 fe b6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121353:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121356:	e8 e1 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012135b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f012135e:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121364:	83 ec 0c             	sub    $0xc,%esp
f0121367:	50                   	push   %eax
f0121368:	e8 71 65 fe ff       	call   f01078de <kfree>
f012136d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121370:	e8 c7 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121375:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121378:	74 17                	je     f0121391 <test_kfree+0x1a12>
f012137a:	83 ec 04             	sub    $0x4,%esp
f012137d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121382:	68 eb 05 00 00       	push   $0x5eb
f0121387:	68 9a ad 13 f0       	push   $0xf013ad9a
f012138c:	e8 6a ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121391:	e8 bb b6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121396:	89 c2                	mov    %eax,%edx
f0121398:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012139b:	29 c2                	sub    %eax,%edx
f012139d:	89 d0                	mov    %edx,%eax
f012139f:	83 f8 01             	cmp    $0x1,%eax
f01213a2:	74 17                	je     f01213bb <test_kfree+0x1a3c>
f01213a4:	83 ec 04             	sub    $0x4,%esp
f01213a7:	68 24 b5 13 f0       	push   $0xf013b524
f01213ac:	68 ec 05 00 00       	push   $0x5ec
f01213b1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01213b6:	e8 40 ee fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01213bb:	e8 91 b6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01213c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213c3:	e8 74 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01213c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01213cb:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01213d1:	83 ec 0c             	sub    $0xc,%esp
f01213d4:	50                   	push   %eax
f01213d5:	e8 04 65 fe ff       	call   f01078de <kfree>
f01213da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213dd:	e8 5a 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01213e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213e5:	74 17                	je     f01213fe <test_kfree+0x1a7f>
f01213e7:	83 ec 04             	sub    $0x4,%esp
f01213ea:	68 b4 ad 13 f0       	push   $0xf013adb4
f01213ef:	68 f2 05 00 00       	push   $0x5f2
f01213f4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01213f9:	e8 fd ed fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01213fe:	e8 4e b6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121403:	89 c2                	mov    %eax,%edx
f0121405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121408:	29 c2                	sub    %eax,%edx
f012140a:	89 d0                	mov    %edx,%eax
f012140c:	83 f8 04             	cmp    $0x4,%eax
f012140f:	74 17                	je     f0121428 <test_kfree+0x1aa9>
f0121411:	83 ec 04             	sub    $0x4,%esp
f0121414:	68 24 b5 13 f0       	push   $0xf013b524
f0121419:	68 f3 05 00 00       	push   $0x5f3
f012141e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121423:	e8 d3 ed fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121428:	e8 24 b6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012142d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121430:	e8 07 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121435:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121438:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012143e:	83 ec 0c             	sub    $0xc,%esp
f0121441:	50                   	push   %eax
f0121442:	e8 97 64 fe ff       	call   f01078de <kfree>
f0121447:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012144a:	e8 ed 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012144f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121452:	74 17                	je     f012146b <test_kfree+0x1aec>
f0121454:	83 ec 04             	sub    $0x4,%esp
f0121457:	68 b4 ad 13 f0       	push   $0xf013adb4
f012145c:	68 f9 05 00 00       	push   $0x5f9
f0121461:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121466:	e8 90 ed fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f012146b:	e8 e1 b5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121470:	89 c2                	mov    %eax,%edx
f0121472:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121475:	29 c2                	sub    %eax,%edx
f0121477:	89 d0                	mov    %edx,%eax
f0121479:	83 f8 05             	cmp    $0x5,%eax
f012147c:	74 17                	je     f0121495 <test_kfree+0x1b16>
f012147e:	83 ec 04             	sub    $0x4,%esp
f0121481:	68 24 b5 13 f0       	push   $0xf013b524
f0121486:	68 fa 05 00 00       	push   $0x5fa
f012148b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121490:	e8 66 ed fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121495:	e8 b7 b5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012149a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012149d:	e8 9a 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01214a5:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01214ab:	83 ec 0c             	sub    $0xc,%esp
f01214ae:	50                   	push   %eax
f01214af:	e8 2a 64 fe ff       	call   f01078de <kfree>
f01214b4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214b7:	e8 80 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214bf:	74 17                	je     f01214d8 <test_kfree+0x1b59>
f01214c1:	83 ec 04             	sub    $0x4,%esp
f01214c4:	68 b4 ad 13 f0       	push   $0xf013adb4
f01214c9:	68 00 06 00 00       	push   $0x600
f01214ce:	68 9a ad 13 f0       	push   $0xf013ad9a
f01214d3:	e8 23 ed fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01214d8:	e8 74 b5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01214dd:	89 c2                	mov    %eax,%edx
f01214df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01214e2:	29 c2                	sub    %eax,%edx
f01214e4:	89 d0                	mov    %edx,%eax
f01214e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01214eb:	74 17                	je     f0121504 <test_kfree+0x1b85>
f01214ed:	83 ec 04             	sub    $0x4,%esp
f01214f0:	68 24 b5 13 f0       	push   $0xf013b524
f01214f5:	68 01 06 00 00       	push   $0x601
f01214fa:	68 9a ad 13 f0       	push   $0xf013ad9a
f01214ff:	e8 f7 ec fd ff       	call   f01001fb <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121504:	e8 51 5d ff ff       	call   f011725a <isKHeapPlacementStrategyNEXTFIT>
f0121509:	84 c0                	test   %al,%al
f012150b:	0f 84 80 02 00 00    	je     f0121791 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121511:	e8 3b b5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121516:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121519:	e8 1e 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012151e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121521:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121527:	83 ec 0c             	sub    $0xc,%esp
f012152a:	50                   	push   %eax
f012152b:	e8 ae 63 fe ff       	call   f01078de <kfree>
f0121530:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121533:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f012153a:	10 00 00 
f012153d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121543:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121548:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f012154e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121554:	ba 00 00 00 00       	mov    $0x0,%edx
f0121559:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f012155f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121565:	29 d0                	sub    %edx,%eax
f0121567:	89 c1                	mov    %eax,%ecx
f0121569:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121570:	10 00 00 
f0121573:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121578:	0f b6 d0             	movzbl %al,%edx
f012157b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121581:	01 d0                	add    %edx,%eax
f0121583:	48                   	dec    %eax
f0121584:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f012158a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121590:	ba 00 00 00 00       	mov    $0x0,%edx
f0121595:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f012159b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01215a1:	29 d0                	sub    %edx,%eax
f01215a3:	01 c1                	add    %eax,%ecx
f01215a5:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01215ac:	10 00 00 
f01215af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01215b4:	0f b6 c0             	movzbl %al,%eax
f01215b7:	c1 e0 04             	shl    $0x4,%eax
f01215ba:	89 c2                	mov    %eax,%edx
f01215bc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01215c2:	01 d0                	add    %edx,%eax
f01215c4:	48                   	dec    %eax
f01215c5:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01215cb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01215d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01215d6:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01215dc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01215e2:	29 d0                	sub    %edx,%eax
f01215e4:	01 c8                	add    %ecx,%eax
f01215e6:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01215eb:	29 c2                	sub    %eax,%edx
f01215ed:	89 d0                	mov    %edx,%eax
f01215ef:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215f5:	e8 42 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215fd:	74 17                	je     f0121616 <test_kfree+0x1c97>
f01215ff:	83 ec 04             	sub    $0x4,%esp
f0121602:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121607:	68 0b 06 00 00       	push   $0x60b
f012160c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121611:	e8 e5 eb fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121616:	e8 36 b4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012161b:	89 c2                	mov    %eax,%edx
f012161d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121620:	29 c2                	sub    %eax,%edx
f0121622:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121628:	c1 e8 0c             	shr    $0xc,%eax
f012162b:	39 c2                	cmp    %eax,%edx
f012162d:	74 17                	je     f0121646 <test_kfree+0x1cc7>
f012162f:	83 ec 04             	sub    $0x4,%esp
f0121632:	68 24 b5 13 f0       	push   $0xf013b524
f0121637:	68 0c 06 00 00       	push   $0x60c
f012163c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121641:	e8 b5 eb fd ff       	call   f01001fb <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121646:	e8 06 b4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012164b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012164e:	e8 e9 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121653:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121656:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012165c:	83 ec 0c             	sub    $0xc,%esp
f012165f:	50                   	push   %eax
f0121660:	e8 79 62 fe ff       	call   f01078de <kfree>
f0121665:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121668:	e8 cf 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012166d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121670:	74 17                	je     f0121689 <test_kfree+0x1d0a>
f0121672:	83 ec 04             	sub    $0x4,%esp
f0121675:	68 b4 ad 13 f0       	push   $0xf013adb4
f012167a:	68 12 06 00 00       	push   $0x612
f012167f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121684:	e8 72 eb fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121689:	e8 c3 b3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012168e:	89 c2                	mov    %eax,%edx
f0121690:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121693:	29 c2                	sub    %eax,%edx
f0121695:	89 d0                	mov    %edx,%eax
f0121697:	3d 00 03 00 00       	cmp    $0x300,%eax
f012169c:	74 17                	je     f01216b5 <test_kfree+0x1d36>
f012169e:	83 ec 04             	sub    $0x4,%esp
f01216a1:	68 24 b5 13 f0       	push   $0xf013b524
f01216a6:	68 13 06 00 00       	push   $0x613
f01216ab:	68 9a ad 13 f0       	push   $0xf013ad9a
f01216b0:	e8 46 eb fd ff       	call   f01001fb <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f01216b5:	e8 97 b3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01216ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01216bd:	e8 7a 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01216c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f01216c5:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01216cb:	83 ec 0c             	sub    $0xc,%esp
f01216ce:	50                   	push   %eax
f01216cf:	e8 0a 62 fe ff       	call   f01078de <kfree>
f01216d4:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216d7:	e8 60 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01216dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216df:	74 17                	je     f01216f8 <test_kfree+0x1d79>
f01216e1:	83 ec 04             	sub    $0x4,%esp
f01216e4:	68 b4 ad 13 f0       	push   $0xf013adb4
f01216e9:	68 19 06 00 00       	push   $0x619
f01216ee:	68 9a ad 13 f0       	push   $0xf013ad9a
f01216f3:	e8 03 eb fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01216f8:	e8 54 b3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01216fd:	89 c2                	mov    %eax,%edx
f01216ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121702:	29 c2                	sub    %eax,%edx
f0121704:	89 d0                	mov    %edx,%eax
f0121706:	83 f8 01             	cmp    $0x1,%eax
f0121709:	74 17                	je     f0121722 <test_kfree+0x1da3>
f012170b:	83 ec 04             	sub    $0x4,%esp
f012170e:	68 24 b5 13 f0       	push   $0xf013b524
f0121713:	68 1a 06 00 00       	push   $0x61a
f0121718:	68 9a ad 13 f0       	push   $0xf013ad9a
f012171d:	e8 d9 ea fd ff       	call   f01001fb <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121722:	e8 2a b3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121727:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012172a:	e8 0d 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012172f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121732:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121738:	83 ec 0c             	sub    $0xc,%esp
f012173b:	50                   	push   %eax
f012173c:	e8 9d 61 fe ff       	call   f01078de <kfree>
f0121741:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121744:	e8 f3 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121749:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012174c:	74 17                	je     f0121765 <test_kfree+0x1de6>
f012174e:	83 ec 04             	sub    $0x4,%esp
f0121751:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121756:	68 20 06 00 00       	push   $0x620
f012175b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121760:	e8 96 ea fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121765:	e8 e7 b2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012176a:	89 c2                	mov    %eax,%edx
f012176c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012176f:	29 c2                	sub    %eax,%edx
f0121771:	89 d0                	mov    %edx,%eax
f0121773:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121778:	74 17                	je     f0121791 <test_kfree+0x1e12>
f012177a:	83 ec 04             	sub    $0x4,%esp
f012177d:	68 24 b5 13 f0       	push   $0xf013b524
f0121782:	68 21 06 00 00       	push   $0x621
f0121787:	68 9a ad 13 f0       	push   $0xf013ad9a
f012178c:	e8 6a ea fd ff       	call   f01001fb <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121791:	e8 bb b2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121796:	89 c2                	mov    %eax,%edx
f0121798:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012179b:	39 c2                	cmp    %eax,%edx
f012179d:	74 17                	je     f01217b6 <test_kfree+0x1e37>
f012179f:	83 ec 04             	sub    $0x4,%esp
f01217a2:	68 c4 b5 13 f0       	push   $0xf013b5c4
f01217a7:	68 24 06 00 00       	push   $0x624
f01217ac:	68 9a ad 13 f0       	push   $0xf013ad9a
f01217b1:	e8 45 ea fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f01217b6:	83 ec 0c             	sub    $0xc,%esp
f01217b9:	68 f8 b5 13 f0       	push   $0xf013b5f8
f01217be:	e8 bf f4 fd ff       	call   f0100c82 <cprintf>
f01217c3:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01217c6:	83 ec 0c             	sub    $0xc,%esp
f01217c9:	6a 03                	push   $0x3
f01217cb:	e8 21 b7 fe ff       	call   f010cef1 <sys_bypassPageFault>
f01217d0:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01217d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217da:	e9 82 00 00 00       	jmp    f0121861 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01217df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01217e2:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01217e9:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01217ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217ef:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01217f2:	e8 e8 b6 fe ff       	call   f010cedf <sys_rcr2>
f01217f7:	89 c2                	mov    %eax,%edx
f01217f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217fc:	39 c2                	cmp    %eax,%edx
f01217fe:	74 17                	je     f0121817 <test_kfree+0x1e98>
f0121800:	83 ec 04             	sub    $0x4,%esp
f0121803:	68 00 b6 13 f0       	push   $0xf013b600
f0121808:	68 33 06 00 00       	push   $0x633
f012180d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121812:	e8 e4 e9 fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0121817:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012181a:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121821:	89 c2                	mov    %eax,%edx
f0121823:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121826:	01 d0                	add    %edx,%eax
f0121828:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012182b:	e8 af b6 fe ff       	call   f010cedf <sys_rcr2>
f0121830:	89 c2                	mov    %eax,%edx
f0121832:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121835:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012183c:	89 c1                	mov    %eax,%ecx
f012183e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121841:	01 c8                	add    %ecx,%eax
f0121843:	39 c2                	cmp    %eax,%edx
f0121845:	74 17                	je     f012185e <test_kfree+0x1edf>
f0121847:	83 ec 04             	sub    $0x4,%esp
f012184a:	68 00 b6 13 f0       	push   $0xf013b600
f012184f:	68 35 06 00 00       	push   $0x635
f0121854:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121859:	e8 9d e9 fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012185e:	ff 45 f4             	incl   -0xc(%ebp)
f0121861:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121865:	0f 8e 74 ff ff ff    	jle    f01217df <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012186b:	83 ec 0c             	sub    $0xc,%esp
f012186e:	6a 00                	push   $0x0
f0121870:	e8 7c b6 fe ff       	call   f010cef1 <sys_bypassPageFault>
f0121875:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121878:	83 ec 0c             	sub    $0xc,%esp
f012187b:	68 45 b6 13 f0       	push   $0xf013b645
f0121880:	e8 fd f3 fd ff       	call   f0100c82 <cprintf>
f0121885:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121888:	e8 c4 b1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012188d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121890:	e8 a7 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121895:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121898:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012189e:	83 ec 0c             	sub    $0xc,%esp
f01218a1:	50                   	push   %eax
f01218a2:	e8 37 60 fe ff       	call   f01078de <kfree>
f01218a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218aa:	e8 8d 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01218af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218b2:	74 17                	je     f01218cb <test_kfree+0x1f4c>
f01218b4:	83 ec 04             	sub    $0x4,%esp
f01218b7:	68 b4 ad 13 f0       	push   $0xf013adb4
f01218bc:	68 43 06 00 00       	push   $0x643
f01218c1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01218c6:	e8 30 e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01218cb:	e8 81 b1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01218d0:	89 c2                	mov    %eax,%edx
f01218d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218d5:	39 c2                	cmp    %eax,%edx
f01218d7:	74 17                	je     f01218f0 <test_kfree+0x1f71>
f01218d9:	83 ec 04             	sub    $0x4,%esp
f01218dc:	68 4c b6 13 f0       	push   $0xf013b64c
f01218e1:	68 44 06 00 00       	push   $0x644
f01218e6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01218eb:	e8 0b e9 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01218f0:	e8 5c b1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01218f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218f8:	e8 3f 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01218fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121900:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121906:	83 ec 0c             	sub    $0xc,%esp
f0121909:	50                   	push   %eax
f012190a:	e8 cf 5f fe ff       	call   f01078de <kfree>
f012190f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121912:	e8 25 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121917:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012191a:	74 17                	je     f0121933 <test_kfree+0x1fb4>
f012191c:	83 ec 04             	sub    $0x4,%esp
f012191f:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121924:	68 4a 06 00 00       	push   $0x64a
f0121929:	68 9a ad 13 f0       	push   $0xf013ad9a
f012192e:	e8 c8 e8 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121933:	e8 19 b1 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121938:	89 c2                	mov    %eax,%edx
f012193a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012193d:	39 c2                	cmp    %eax,%edx
f012193f:	74 17                	je     f0121958 <test_kfree+0x1fd9>
f0121941:	83 ec 04             	sub    $0x4,%esp
f0121944:	68 4c b6 13 f0       	push   $0xf013b64c
f0121949:	68 4b 06 00 00       	push   $0x64b
f012194e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121953:	e8 a3 e8 fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121958:	e8 f4 b0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012195d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121960:	e8 d7 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121965:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121968:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012196e:	83 ec 0c             	sub    $0xc,%esp
f0121971:	50                   	push   %eax
f0121972:	e8 67 5f fe ff       	call   f01078de <kfree>
f0121977:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012197a:	e8 bd 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012197f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121982:	74 17                	je     f012199b <test_kfree+0x201c>
f0121984:	83 ec 04             	sub    $0x4,%esp
f0121987:	68 b4 ad 13 f0       	push   $0xf013adb4
f012198c:	68 51 06 00 00       	push   $0x651
f0121991:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121996:	e8 60 e8 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012199b:	e8 b1 b0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01219a0:	89 c2                	mov    %eax,%edx
f01219a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01219a5:	39 c2                	cmp    %eax,%edx
f01219a7:	74 17                	je     f01219c0 <test_kfree+0x2041>
f01219a9:	83 ec 04             	sub    $0x4,%esp
f01219ac:	68 4c b6 13 f0       	push   $0xf013b64c
f01219b1:	68 52 06 00 00       	push   $0x652
f01219b6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01219bb:	e8 3b e8 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01219c0:	e8 8c b0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01219c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219c8:	e8 6f 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01219cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01219d0:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01219d6:	83 ec 0c             	sub    $0xc,%esp
f01219d9:	50                   	push   %eax
f01219da:	e8 ff 5e fe ff       	call   f01078de <kfree>
f01219df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219e2:	e8 55 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01219e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219ea:	74 17                	je     f0121a03 <test_kfree+0x2084>
f01219ec:	83 ec 04             	sub    $0x4,%esp
f01219ef:	68 b4 ad 13 f0       	push   $0xf013adb4
f01219f4:	68 58 06 00 00       	push   $0x658
f01219f9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01219fe:	e8 f8 e7 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121a03:	e8 49 b0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121a08:	89 c2                	mov    %eax,%edx
f0121a0a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a0d:	39 c2                	cmp    %eax,%edx
f0121a0f:	74 17                	je     f0121a28 <test_kfree+0x20a9>
f0121a11:	83 ec 04             	sub    $0x4,%esp
f0121a14:	68 4c b6 13 f0       	push   $0xf013b64c
f0121a19:	68 59 06 00 00       	push   $0x659
f0121a1e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121a23:	e8 d3 e7 fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f0121a28:	83 ec 0c             	sub    $0xc,%esp
f0121a2b:	68 93 b6 13 f0       	push   $0xf013b693
f0121a30:	e8 4d f2 fd ff       	call   f0100c82 <cprintf>
f0121a35:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121a38:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121a3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121a46:	eb 48                	jmp    f0121a90 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121a48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121a4b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0121a50:	83 ec 04             	sub    $0x4,%esp
f0121a53:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121a59:	51                   	push   %ecx
f0121a5a:	52                   	push   %edx
f0121a5b:	50                   	push   %eax
f0121a5c:	e8 79 4f fe ff       	call   f01069da <get_page_table>
f0121a61:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121a64:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121a6a:	85 c0                	test   %eax,%eax
f0121a6c:	75 17                	jne    f0121a85 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121a6e:	83 ec 04             	sub    $0x4,%esp
f0121a71:	68 9c b6 13 f0       	push   $0xf013b69c
f0121a76:	68 67 06 00 00       	push   $0x667
f0121a7b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121a80:	e8 76 e7 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121a85:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121a8c:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121a90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121a94:	78 b2                	js     f0121a48 <test_kfree+0x20c9>
f0121a96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121a9a:	7f 09                	jg     f0121aa5 <test_kfree+0x2126>
f0121a9c:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121aa3:	76 a3                	jbe    f0121a48 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121aa5:	83 ec 0c             	sub    $0xc,%esp
f0121aa8:	68 7e af 13 f0       	push   $0xf013af7e
f0121aad:	e8 d0 f1 fd ff       	call   f0100c82 <cprintf>
f0121ab2:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121ab5:	83 ec 0c             	sub    $0xc,%esp
f0121ab8:	68 04 b7 13 f0       	push   $0xf013b704
f0121abd:	e8 c0 f1 fd ff       	call   f0100c82 <cprintf>
f0121ac2:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121ac5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121aca:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121acd:	5b                   	pop    %ebx
f0121ace:	5f                   	pop    %edi
f0121acf:	5d                   	pop    %ebp
f0121ad0:	c3                   	ret    

f0121ad1 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121ad1:	55                   	push   %ebp
f0121ad2:	89 e5                	mov    %esp,%ebp
f0121ad4:	57                   	push   %edi
f0121ad5:	53                   	push   %ebx
f0121ad6:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121adc:	83 ec 0c             	sub    $0xc,%esp
f0121adf:	68 dc ac 13 f0       	push   $0xf013acdc
f0121ae4:	e8 99 f1 fd ff       	call   f0100c82 <cprintf>
f0121ae9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121aec:	83 ec 0c             	sub    $0xc,%esp
f0121aef:	68 0c ad 13 f0       	push   $0xf013ad0c
f0121af4:	e8 89 f1 fd ff       	call   f0100c82 <cprintf>
f0121af9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121afc:	83 ec 0c             	sub    $0xc,%esp
f0121aff:	68 dc ac 13 f0       	push   $0xf013acdc
f0121b04:	e8 79 f1 fd ff       	call   f0100c82 <cprintf>
f0121b09:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121b0c:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121b10:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121b14:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121b1a:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121b20:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121b27:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121b2e:	e8 1e af fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121b33:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121b36:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121b3c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121b41:	b8 00 00 00 00       	mov    $0x0,%eax
f0121b46:	89 d7                	mov    %edx,%edi
f0121b48:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121b4a:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121b50:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121b55:	b8 00 00 00 00       	mov    $0x0,%eax
f0121b5a:	89 d7                	mov    %edx,%edi
f0121b5c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121b5e:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121b64:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121b69:	b8 00 00 00 00       	mov    $0x0,%eax
f0121b6e:	89 d7                	mov    %edx,%edi
f0121b70:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b72:	e8 da ae fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121b77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b7a:	e8 bd 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121b7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121b82:	83 ec 0c             	sub    $0xc,%esp
f0121b85:	68 00 fc 1f 00       	push   $0x1ffc00
f0121b8a:	e8 84 5c fe ff       	call   f0107813 <kmalloc>
f0121b8f:	83 c4 10             	add    $0x10,%esp
f0121b92:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b98:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121b9e:	89 c1                	mov    %eax,%ecx
f0121ba0:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121ba7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121baa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121baf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121bb2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121bb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121bba:	f7 75 c8             	divl   -0x38(%ebp)
f0121bbd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121bc0:	29 d0                	sub    %edx,%eax
f0121bc2:	89 c3                	mov    %eax,%ebx
f0121bc4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121bcb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121bd0:	0f b6 d0             	movzbl %al,%edx
f0121bd3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121bd6:	01 d0                	add    %edx,%eax
f0121bd8:	48                   	dec    %eax
f0121bd9:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121bdc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121be4:	f7 75 c0             	divl   -0x40(%ebp)
f0121be7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121bea:	29 d0                	sub    %edx,%eax
f0121bec:	01 c3                	add    %eax,%ebx
f0121bee:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121bf5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121bfa:	0f b6 c0             	movzbl %al,%eax
f0121bfd:	c1 e0 04             	shl    $0x4,%eax
f0121c00:	89 c2                	mov    %eax,%edx
f0121c02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121c05:	01 d0                	add    %edx,%eax
f0121c07:	48                   	dec    %eax
f0121c08:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121c0b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121c0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c13:	f7 75 b8             	divl   -0x48(%ebp)
f0121c16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121c19:	29 d0                	sub    %edx,%eax
f0121c1b:	01 d8                	add    %ebx,%eax
f0121c1d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121c22:	39 c1                	cmp    %eax,%ecx
f0121c24:	74 17                	je     f0121c3d <test_kfree_bestfirstfit+0x16c>
f0121c26:	83 ec 04             	sub    $0x4,%esp
f0121c29:	68 80 ae 13 f0       	push   $0xf013ae80
f0121c2e:	68 95 06 00 00       	push   $0x695
f0121c33:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121c38:	e8 be e5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c3d:	e8 fa 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121c42:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c45:	74 17                	je     f0121c5e <test_kfree_bestfirstfit+0x18d>
f0121c47:	83 ec 04             	sub    $0x4,%esp
f0121c4a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121c4f:	68 96 06 00 00       	push   $0x696
f0121c54:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121c59:	e8 9d e5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c5e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c61:	e8 eb ad fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121c66:	29 c3                	sub    %eax,%ebx
f0121c68:	89 d8                	mov    %ebx,%eax
f0121c6a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121c6f:	74 17                	je     f0121c88 <test_kfree_bestfirstfit+0x1b7>
f0121c71:	83 ec 04             	sub    $0x4,%esp
f0121c74:	68 1c ae 13 f0       	push   $0xf013ae1c
f0121c79:	68 97 06 00 00       	push   $0x697
f0121c7e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121c83:	e8 73 e5 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121c88:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121c8f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c92:	e8 ba ad fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121c97:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c9a:	e8 9d 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121c9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121ca2:	83 ec 0c             	sub    $0xc,%esp
f0121ca5:	68 00 fc 1f 00       	push   $0x1ffc00
f0121caa:	e8 64 5b fe ff       	call   f0107813 <kmalloc>
f0121caf:	83 c4 10             	add    $0x10,%esp
f0121cb2:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121cb8:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121cbe:	89 c1                	mov    %eax,%ecx
f0121cc0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121cc7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121cca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121ccf:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121cd2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121cd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cda:	f7 75 b0             	divl   -0x50(%ebp)
f0121cdd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121ce0:	29 d0                	sub    %edx,%eax
f0121ce2:	89 c3                	mov    %eax,%ebx
f0121ce4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121ceb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121cf0:	0f b6 d0             	movzbl %al,%edx
f0121cf3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121cf6:	01 d0                	add    %edx,%eax
f0121cf8:	48                   	dec    %eax
f0121cf9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121cfc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121cff:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d04:	f7 75 a8             	divl   -0x58(%ebp)
f0121d07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121d0a:	29 d0                	sub    %edx,%eax
f0121d0c:	01 c3                	add    %eax,%ebx
f0121d0e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121d15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121d1a:	0f b6 c0             	movzbl %al,%eax
f0121d1d:	c1 e0 04             	shl    $0x4,%eax
f0121d20:	89 c2                	mov    %eax,%edx
f0121d22:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121d25:	01 d0                	add    %edx,%eax
f0121d27:	48                   	dec    %eax
f0121d28:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121d2b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121d2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d33:	f7 75 a0             	divl   -0x60(%ebp)
f0121d36:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121d39:	29 d0                	sub    %edx,%eax
f0121d3b:	01 d8                	add    %ebx,%eax
f0121d3d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121d42:	39 c1                	cmp    %eax,%ecx
f0121d44:	74 17                	je     f0121d5d <test_kfree_bestfirstfit+0x28c>
f0121d46:	83 ec 04             	sub    $0x4,%esp
f0121d49:	68 80 ae 13 f0       	push   $0xf013ae80
f0121d4e:	68 9e 06 00 00       	push   $0x69e
f0121d53:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121d58:	e8 9e e4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d5d:	e8 da 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121d62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d65:	74 17                	je     f0121d7e <test_kfree_bestfirstfit+0x2ad>
f0121d67:	83 ec 04             	sub    $0x4,%esp
f0121d6a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121d6f:	68 9f 06 00 00       	push   $0x69f
f0121d74:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121d79:	e8 7d e4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d81:	e8 cb ac fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121d86:	29 c3                	sub    %eax,%ebx
f0121d88:	89 d8                	mov    %ebx,%eax
f0121d8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121d8f:	74 17                	je     f0121da8 <test_kfree_bestfirstfit+0x2d7>
f0121d91:	83 ec 04             	sub    $0x4,%esp
f0121d94:	68 1c ae 13 f0       	push   $0xf013ae1c
f0121d99:	68 a0 06 00 00       	push   $0x6a0
f0121d9e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121da3:	e8 53 e4 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121da8:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121daf:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121db2:	e8 9a ac fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121db7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121dba:	e8 7d 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121dbf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121dc2:	83 ec 0c             	sub    $0xc,%esp
f0121dc5:	68 00 08 00 00       	push   $0x800
f0121dca:	e8 44 5a fe ff       	call   f0107813 <kmalloc>
f0121dcf:	83 c4 10             	add    $0x10,%esp
f0121dd2:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121dd8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121dde:	89 c1                	mov    %eax,%ecx
f0121de0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121de7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121dea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121def:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121df2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121df5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dfa:	f7 75 98             	divl   -0x68(%ebp)
f0121dfd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121e00:	29 d0                	sub    %edx,%eax
f0121e02:	89 c3                	mov    %eax,%ebx
f0121e04:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121e0b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121e10:	0f b6 d0             	movzbl %al,%edx
f0121e13:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121e16:	01 d0                	add    %edx,%eax
f0121e18:	48                   	dec    %eax
f0121e19:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121e1c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121e1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e24:	f7 75 90             	divl   -0x70(%ebp)
f0121e27:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121e2a:	29 d0                	sub    %edx,%eax
f0121e2c:	01 c3                	add    %eax,%ebx
f0121e2e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121e35:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121e3a:	0f b6 c0             	movzbl %al,%eax
f0121e3d:	c1 e0 04             	shl    $0x4,%eax
f0121e40:	89 c2                	mov    %eax,%edx
f0121e42:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121e45:	01 d0                	add    %edx,%eax
f0121e47:	48                   	dec    %eax
f0121e48:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121e4b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121e4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e53:	f7 75 88             	divl   -0x78(%ebp)
f0121e56:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121e59:	29 d0                	sub    %edx,%eax
f0121e5b:	01 d8                	add    %ebx,%eax
f0121e5d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121e62:	39 c1                	cmp    %eax,%ecx
f0121e64:	74 17                	je     f0121e7d <test_kfree_bestfirstfit+0x3ac>
f0121e66:	83 ec 04             	sub    $0x4,%esp
f0121e69:	68 80 ae 13 f0       	push   $0xf013ae80
f0121e6e:	68 a7 06 00 00       	push   $0x6a7
f0121e73:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121e78:	e8 7e e3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e7d:	e8 ba 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121e82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e85:	74 17                	je     f0121e9e <test_kfree_bestfirstfit+0x3cd>
f0121e87:	83 ec 04             	sub    $0x4,%esp
f0121e8a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0121e8f:	68 a8 06 00 00       	push   $0x6a8
f0121e94:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121e99:	e8 5d e3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e9e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ea1:	e8 ab ab fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121ea6:	29 c3                	sub    %eax,%ebx
f0121ea8:	89 d8                	mov    %ebx,%eax
f0121eaa:	83 f8 01             	cmp    $0x1,%eax
f0121ead:	74 17                	je     f0121ec6 <test_kfree_bestfirstfit+0x3f5>
f0121eaf:	83 ec 04             	sub    $0x4,%esp
f0121eb2:	68 1c ae 13 f0       	push   $0xf013ae1c
f0121eb7:	68 a9 06 00 00       	push   $0x6a9
f0121ebc:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121ec1:	e8 35 e3 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121ec6:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121ecd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121ed0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121ed6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121ed9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ee0:	eb 0e                	jmp    f0121ef0 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121ee2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ee5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ee8:	01 d0                	add    %edx,%eax
f0121eea:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121eed:	ff 45 f4             	incl   -0xc(%ebp)
f0121ef0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121ef6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ef9:	7f e7                	jg     f0121ee2 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121efb:	e8 51 ab fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0121f00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f03:	e8 34 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121f08:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121f0b:	83 ec 0c             	sub    $0xc,%esp
f0121f0e:	68 00 08 00 00       	push   $0x800
f0121f13:	e8 fb 58 fe ff       	call   f0107813 <kmalloc>
f0121f18:	83 c4 10             	add    $0x10,%esp
f0121f1b:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f21:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121f27:	89 c1                	mov    %eax,%ecx
f0121f29:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121f30:	10 00 00 
f0121f33:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121f39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f3e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121f44:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121f4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f4f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121f55:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121f5b:	29 d0                	sub    %edx,%eax
f0121f5d:	89 c3                	mov    %eax,%ebx
f0121f5f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121f66:	10 00 00 
f0121f69:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121f6e:	0f b6 d0             	movzbl %al,%edx
f0121f71:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121f77:	01 d0                	add    %edx,%eax
f0121f79:	48                   	dec    %eax
f0121f7a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121f80:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121f86:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f8b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121f91:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121f97:	29 d0                	sub    %edx,%eax
f0121f99:	01 c3                	add    %eax,%ebx
f0121f9b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121fa2:	10 00 00 
f0121fa5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121faa:	0f b6 c0             	movzbl %al,%eax
f0121fad:	c1 e0 04             	shl    $0x4,%eax
f0121fb0:	89 c2                	mov    %eax,%edx
f0121fb2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121fb8:	01 d0                	add    %edx,%eax
f0121fba:	48                   	dec    %eax
f0121fbb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121fc1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121fc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fcc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121fd2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121fd8:	29 d0                	sub    %edx,%eax
f0121fda:	01 d8                	add    %ebx,%eax
f0121fdc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121fe1:	39 c1                	cmp    %eax,%ecx
f0121fe3:	74 17                	je     f0121ffc <test_kfree_bestfirstfit+0x52b>
f0121fe5:	83 ec 04             	sub    $0x4,%esp
f0121fe8:	68 80 ae 13 f0       	push   $0xf013ae80
f0121fed:	68 b5 06 00 00       	push   $0x6b5
f0121ff2:	68 9a ad 13 f0       	push   $0xf013ad9a
f0121ff7:	e8 ff e1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ffc:	e8 3b 1d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122001:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122004:	74 17                	je     f012201d <test_kfree_bestfirstfit+0x54c>
f0122006:	83 ec 04             	sub    $0x4,%esp
f0122009:	68 b4 ad 13 f0       	push   $0xf013adb4
f012200e:	68 b6 06 00 00       	push   $0x6b6
f0122013:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122018:	e8 de e1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012201d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122020:	e8 2c aa fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122025:	29 c3                	sub    %eax,%ebx
f0122027:	89 d8                	mov    %ebx,%eax
f0122029:	83 f8 01             	cmp    $0x1,%eax
f012202c:	74 17                	je     f0122045 <test_kfree_bestfirstfit+0x574>
f012202e:	83 ec 04             	sub    $0x4,%esp
f0122031:	68 1c ae 13 f0       	push   $0xf013ae1c
f0122036:	68 b7 06 00 00       	push   $0x6b7
f012203b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122040:	e8 b6 e1 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122045:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012204c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012204f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122055:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122058:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012205f:	eb 0e                	jmp    f012206f <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122061:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122064:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122067:	01 d0                	add    %edx,%eax
f0122069:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012206c:	ff 45 f4             	incl   -0xc(%ebp)
f012206f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122075:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122078:	7f e7                	jg     f0122061 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012207a:	e8 d2 a9 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012207f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122082:	e8 b5 1c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122087:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012208a:	83 ec 0c             	sub    $0xc,%esp
f012208d:	68 00 1c 00 00       	push   $0x1c00
f0122092:	e8 7c 57 fe ff       	call   f0107813 <kmalloc>
f0122097:	83 c4 10             	add    $0x10,%esp
f012209a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220a0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01220a6:	89 c1                	mov    %eax,%ecx
f01220a8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01220af:	10 00 00 
f01220b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01220b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220bd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01220c3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01220c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01220ce:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01220d4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01220da:	29 d0                	sub    %edx,%eax
f01220dc:	89 c3                	mov    %eax,%ebx
f01220de:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01220e5:	10 00 00 
f01220e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01220ed:	0f b6 d0             	movzbl %al,%edx
f01220f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01220f6:	01 d0                	add    %edx,%eax
f01220f8:	48                   	dec    %eax
f01220f9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01220ff:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122105:	ba 00 00 00 00       	mov    $0x0,%edx
f012210a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122110:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122116:	29 d0                	sub    %edx,%eax
f0122118:	01 c3                	add    %eax,%ebx
f012211a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122121:	10 00 00 
f0122124:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122129:	0f b6 c0             	movzbl %al,%eax
f012212c:	c1 e0 04             	shl    $0x4,%eax
f012212f:	89 c2                	mov    %eax,%edx
f0122131:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122137:	01 d0                	add    %edx,%eax
f0122139:	48                   	dec    %eax
f012213a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122140:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122146:	ba 00 00 00 00       	mov    $0x0,%edx
f012214b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122151:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122157:	29 d0                	sub    %edx,%eax
f0122159:	01 d8                	add    %ebx,%eax
f012215b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122160:	39 c1                	cmp    %eax,%ecx
f0122162:	74 17                	je     f012217b <test_kfree_bestfirstfit+0x6aa>
f0122164:	83 ec 04             	sub    $0x4,%esp
f0122167:	68 80 ae 13 f0       	push   $0xf013ae80
f012216c:	68 c3 06 00 00       	push   $0x6c3
f0122171:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122176:	e8 80 e0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012217b:	e8 bc 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122180:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122183:	74 17                	je     f012219c <test_kfree_bestfirstfit+0x6cb>
f0122185:	83 ec 04             	sub    $0x4,%esp
f0122188:	68 b4 ad 13 f0       	push   $0xf013adb4
f012218d:	68 c4 06 00 00       	push   $0x6c4
f0122192:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122197:	e8 5f e0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012219c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012219f:	e8 ad a8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01221a4:	29 c3                	sub    %eax,%ebx
f01221a6:	89 d8                	mov    %ebx,%eax
f01221a8:	83 f8 02             	cmp    $0x2,%eax
f01221ab:	74 17                	je     f01221c4 <test_kfree_bestfirstfit+0x6f3>
f01221ad:	83 ec 04             	sub    $0x4,%esp
f01221b0:	68 1c ae 13 f0       	push   $0xf013ae1c
f01221b5:	68 c5 06 00 00       	push   $0x6c5
f01221ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f01221bf:	e8 37 e0 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01221c4:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01221cb:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01221ce:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01221d4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01221d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221de:	eb 0e                	jmp    f01221ee <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f01221e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221e6:	01 d0                	add    %edx,%eax
f01221e8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01221eb:	ff 45 f4             	incl   -0xc(%ebp)
f01221ee:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01221f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221f7:	7f e7                	jg     f01221e0 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01221f9:	e8 53 a8 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01221fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122201:	e8 36 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122206:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122209:	83 ec 0c             	sub    $0xc,%esp
f012220c:	68 00 fc 2f 00       	push   $0x2ffc00
f0122211:	e8 fd 55 fe ff       	call   f0107813 <kmalloc>
f0122216:	83 c4 10             	add    $0x10,%esp
f0122219:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012221f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122225:	89 c1                	mov    %eax,%ecx
f0122227:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012222e:	10 00 00 
f0122231:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122237:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012223c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122242:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122248:	ba 00 00 00 00       	mov    $0x0,%edx
f012224d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122253:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122259:	29 d0                	sub    %edx,%eax
f012225b:	89 c3                	mov    %eax,%ebx
f012225d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122264:	10 00 00 
f0122267:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012226c:	0f b6 d0             	movzbl %al,%edx
f012226f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122275:	01 d0                	add    %edx,%eax
f0122277:	48                   	dec    %eax
f0122278:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012227e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122284:	ba 00 00 00 00       	mov    $0x0,%edx
f0122289:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012228f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122295:	29 d0                	sub    %edx,%eax
f0122297:	01 c3                	add    %eax,%ebx
f0122299:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01222a0:	10 00 00 
f01222a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01222a8:	0f b6 c0             	movzbl %al,%eax
f01222ab:	c1 e0 04             	shl    $0x4,%eax
f01222ae:	89 c2                	mov    %eax,%edx
f01222b0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01222b6:	01 d0                	add    %edx,%eax
f01222b8:	48                   	dec    %eax
f01222b9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01222bf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01222c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01222ca:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01222d0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01222d6:	29 d0                	sub    %edx,%eax
f01222d8:	01 d8                	add    %ebx,%eax
f01222da:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01222df:	39 c1                	cmp    %eax,%ecx
f01222e1:	74 17                	je     f01222fa <test_kfree_bestfirstfit+0x829>
f01222e3:	83 ec 04             	sub    $0x4,%esp
f01222e6:	68 80 ae 13 f0       	push   $0xf013ae80
f01222eb:	68 d1 06 00 00       	push   $0x6d1
f01222f0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01222f5:	e8 01 df fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222fa:	e8 3d 1a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01222ff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122302:	74 17                	je     f012231b <test_kfree_bestfirstfit+0x84a>
f0122304:	83 ec 04             	sub    $0x4,%esp
f0122307:	68 b4 ad 13 f0       	push   $0xf013adb4
f012230c:	68 d2 06 00 00       	push   $0x6d2
f0122311:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122316:	e8 e0 de fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012231b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012231e:	e8 2e a7 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122323:	29 c3                	sub    %eax,%ebx
f0122325:	89 d8                	mov    %ebx,%eax
f0122327:	3d 00 03 00 00       	cmp    $0x300,%eax
f012232c:	74 17                	je     f0122345 <test_kfree_bestfirstfit+0x874>
f012232e:	83 ec 04             	sub    $0x4,%esp
f0122331:	68 1c ae 13 f0       	push   $0xf013ae1c
f0122336:	68 d3 06 00 00       	push   $0x6d3
f012233b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122340:	e8 b6 de fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122345:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012234c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012234f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122355:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122358:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012235f:	eb 0e                	jmp    f012236f <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122361:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122364:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122367:	01 d0                	add    %edx,%eax
f0122369:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012236c:	ff 45 f4             	incl   -0xc(%ebp)
f012236f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122375:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122378:	7f e7                	jg     f0122361 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012237a:	e8 d2 a6 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012237f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122382:	e8 b5 19 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122387:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012238a:	83 ec 0c             	sub    $0xc,%esp
f012238d:	68 00 fc 5f 00       	push   $0x5ffc00
f0122392:	e8 7c 54 fe ff       	call   f0107813 <kmalloc>
f0122397:	83 c4 10             	add    $0x10,%esp
f012239a:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01223a0:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01223a6:	89 c1                	mov    %eax,%ecx
f01223a8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01223af:	10 00 00 
f01223b2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01223b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223bd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01223c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01223c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01223ce:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01223d4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01223da:	29 d0                	sub    %edx,%eax
f01223dc:	89 c3                	mov    %eax,%ebx
f01223de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01223e5:	10 00 00 
f01223e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01223ed:	0f b6 d0             	movzbl %al,%edx
f01223f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01223f6:	01 d0                	add    %edx,%eax
f01223f8:	48                   	dec    %eax
f01223f9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01223ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122405:	ba 00 00 00 00       	mov    $0x0,%edx
f012240a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122410:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122416:	29 d0                	sub    %edx,%eax
f0122418:	01 c3                	add    %eax,%ebx
f012241a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122421:	10 00 00 
f0122424:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122429:	0f b6 c0             	movzbl %al,%eax
f012242c:	c1 e0 04             	shl    $0x4,%eax
f012242f:	89 c2                	mov    %eax,%edx
f0122431:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122437:	01 d0                	add    %edx,%eax
f0122439:	48                   	dec    %eax
f012243a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122440:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122446:	ba 00 00 00 00       	mov    $0x0,%edx
f012244b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122451:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122457:	29 d0                	sub    %edx,%eax
f0122459:	01 d8                	add    %ebx,%eax
f012245b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122460:	39 c1                	cmp    %eax,%ecx
f0122462:	74 17                	je     f012247b <test_kfree_bestfirstfit+0x9aa>
f0122464:	83 ec 04             	sub    $0x4,%esp
f0122467:	68 80 ae 13 f0       	push   $0xf013ae80
f012246c:	68 df 06 00 00       	push   $0x6df
f0122471:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122476:	e8 80 dd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012247b:	e8 bc 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122480:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122483:	74 17                	je     f012249c <test_kfree_bestfirstfit+0x9cb>
f0122485:	83 ec 04             	sub    $0x4,%esp
f0122488:	68 b4 ad 13 f0       	push   $0xf013adb4
f012248d:	68 e0 06 00 00       	push   $0x6e0
f0122492:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122497:	e8 5f dd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012249c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012249f:	e8 ad a5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01224a4:	29 c3                	sub    %eax,%ebx
f01224a6:	89 d8                	mov    %ebx,%eax
f01224a8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01224ad:	74 17                	je     f01224c6 <test_kfree_bestfirstfit+0x9f5>
f01224af:	83 ec 04             	sub    $0x4,%esp
f01224b2:	68 1c ae 13 f0       	push   $0xf013ae1c
f01224b7:	68 e1 06 00 00       	push   $0x6e1
f01224bc:	68 9a ad 13 f0       	push   $0xf013ad9a
f01224c1:	e8 35 dd fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01224c6:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01224cd:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01224d0:	e8 7c a5 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01224d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224d8:	e8 5f 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01224e0:	83 ec 0c             	sub    $0xc,%esp
f01224e3:	68 00 38 00 00       	push   $0x3800
f01224e8:	e8 26 53 fe ff       	call   f0107813 <kmalloc>
f01224ed:	83 c4 10             	add    $0x10,%esp
f01224f0:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224f6:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01224fc:	89 c1                	mov    %eax,%ecx
f01224fe:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122505:	10 00 00 
f0122508:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012250e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122513:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122519:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012251f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122524:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012252a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122530:	29 d0                	sub    %edx,%eax
f0122532:	89 c3                	mov    %eax,%ebx
f0122534:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012253b:	10 00 00 
f012253e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122543:	0f b6 d0             	movzbl %al,%edx
f0122546:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012254c:	01 d0                	add    %edx,%eax
f012254e:	48                   	dec    %eax
f012254f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122555:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012255b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122560:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122566:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012256c:	29 d0                	sub    %edx,%eax
f012256e:	01 c3                	add    %eax,%ebx
f0122570:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122577:	10 00 00 
f012257a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012257f:	0f b6 c0             	movzbl %al,%eax
f0122582:	c1 e0 04             	shl    $0x4,%eax
f0122585:	89 c2                	mov    %eax,%edx
f0122587:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012258d:	01 d0                	add    %edx,%eax
f012258f:	48                   	dec    %eax
f0122590:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122596:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012259c:	ba 00 00 00 00       	mov    $0x0,%edx
f01225a1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01225a7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01225ad:	29 d0                	sub    %edx,%eax
f01225af:	01 d8                	add    %ebx,%eax
f01225b1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01225b6:	39 c1                	cmp    %eax,%ecx
f01225b8:	74 17                	je     f01225d1 <test_kfree_bestfirstfit+0xb00>
f01225ba:	83 ec 04             	sub    $0x4,%esp
f01225bd:	68 80 ae 13 f0       	push   $0xf013ae80
f01225c2:	68 e8 06 00 00       	push   $0x6e8
f01225c7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01225cc:	e8 2a dc fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225d1:	e8 66 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225d9:	74 17                	je     f01225f2 <test_kfree_bestfirstfit+0xb21>
f01225db:	83 ec 04             	sub    $0x4,%esp
f01225de:	68 b4 ad 13 f0       	push   $0xf013adb4
f01225e3:	68 e9 06 00 00       	push   $0x6e9
f01225e8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01225ed:	e8 09 dc fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01225f2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01225f5:	e8 57 a4 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01225fa:	29 c3                	sub    %eax,%ebx
f01225fc:	89 d8                	mov    %ebx,%eax
f01225fe:	83 f8 04             	cmp    $0x4,%eax
f0122601:	74 17                	je     f012261a <test_kfree_bestfirstfit+0xb49>
f0122603:	83 ec 04             	sub    $0x4,%esp
f0122606:	68 1c ae 13 f0       	push   $0xf013ae1c
f012260b:	68 ea 06 00 00       	push   $0x6ea
f0122610:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122615:	e8 e1 db fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012261a:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122621:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122624:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012262a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012262d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122634:	eb 0e                	jmp    f0122644 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122636:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122639:	8b 45 80             	mov    -0x80(%ebp),%eax
f012263c:	01 d0                	add    %edx,%eax
f012263e:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122641:	ff 45 f4             	incl   -0xc(%ebp)
f0122644:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012264a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012264d:	7f e7                	jg     f0122636 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012264f:	e8 fd a3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122654:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012265a:	e8 dd 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012265f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122665:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012266b:	83 ec 0c             	sub    $0xc,%esp
f012266e:	50                   	push   %eax
f012266f:	e8 6a 52 fe ff       	call   f01078de <kfree>
f0122674:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122677:	e8 c0 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012267c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122682:	74 17                	je     f012269b <test_kfree_bestfirstfit+0xbca>
f0122684:	83 ec 04             	sub    $0x4,%esp
f0122687:	68 b4 ad 13 f0       	push   $0xf013adb4
f012268c:	68 f9 06 00 00       	push   $0x6f9
f0122691:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122696:	e8 60 db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012269b:	e8 b1 a3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01226a0:	89 c2                	mov    %eax,%edx
f01226a2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01226a8:	29 c2                	sub    %eax,%edx
f01226aa:	89 d0                	mov    %edx,%eax
f01226ac:	3d 00 02 00 00       	cmp    $0x200,%eax
f01226b1:	74 17                	je     f01226ca <test_kfree_bestfirstfit+0xbf9>
f01226b3:	83 ec 04             	sub    $0x4,%esp
f01226b6:	68 24 b5 13 f0       	push   $0xf013b524
f01226bb:	68 fa 06 00 00       	push   $0x6fa
f01226c0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01226c5:	e8 31 db fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01226ca:	e8 82 a3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01226cf:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226d5:	e8 62 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01226da:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01226e0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01226e6:	83 ec 0c             	sub    $0xc,%esp
f01226e9:	50                   	push   %eax
f01226ea:	e8 ef 51 fe ff       	call   f01078de <kfree>
f01226ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226f2:	e8 45 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01226f7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01226fd:	74 17                	je     f0122716 <test_kfree_bestfirstfit+0xc45>
f01226ff:	83 ec 04             	sub    $0x4,%esp
f0122702:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122707:	68 00 07 00 00       	push   $0x700
f012270c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122711:	e8 e5 da fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122716:	e8 36 a3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012271b:	89 c2                	mov    %eax,%edx
f012271d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122723:	29 c2                	sub    %eax,%edx
f0122725:	89 d0                	mov    %edx,%eax
f0122727:	83 f8 01             	cmp    $0x1,%eax
f012272a:	74 17                	je     f0122743 <test_kfree_bestfirstfit+0xc72>
f012272c:	83 ec 04             	sub    $0x4,%esp
f012272f:	68 24 b5 13 f0       	push   $0xf013b524
f0122734:	68 01 07 00 00       	push   $0x701
f0122739:	68 9a ad 13 f0       	push   $0xf013ad9a
f012273e:	e8 b8 da fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122743:	e8 09 a3 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122748:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012274e:	e8 e9 15 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122753:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122759:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012275f:	83 ec 0c             	sub    $0xc,%esp
f0122762:	50                   	push   %eax
f0122763:	e8 76 51 fe ff       	call   f01078de <kfree>
f0122768:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012276b:	e8 cc 15 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122770:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122776:	74 17                	je     f012278f <test_kfree_bestfirstfit+0xcbe>
f0122778:	83 ec 04             	sub    $0x4,%esp
f012277b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122780:	68 07 07 00 00       	push   $0x707
f0122785:	68 9a ad 13 f0       	push   $0xf013ad9a
f012278a:	e8 6c da fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012278f:	e8 bd a2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122794:	89 c2                	mov    %eax,%edx
f0122796:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012279c:	29 c2                	sub    %eax,%edx
f012279e:	89 d0                	mov    %edx,%eax
f01227a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01227a5:	74 17                	je     f01227be <test_kfree_bestfirstfit+0xced>
f01227a7:	83 ec 04             	sub    $0x4,%esp
f01227aa:	68 24 b5 13 f0       	push   $0xf013b524
f01227af:	68 08 07 00 00       	push   $0x708
f01227b4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01227b9:	e8 3d da fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01227be:	e8 8e a2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01227c3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227c9:	e8 6e 15 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01227ce:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01227d4:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01227da:	83 ec 0c             	sub    $0xc,%esp
f01227dd:	50                   	push   %eax
f01227de:	e8 fb 50 fe ff       	call   f01078de <kfree>
f01227e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227e6:	e8 51 15 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01227eb:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01227f1:	74 17                	je     f012280a <test_kfree_bestfirstfit+0xd39>
f01227f3:	83 ec 04             	sub    $0x4,%esp
f01227f6:	68 b4 ad 13 f0       	push   $0xf013adb4
f01227fb:	68 0e 07 00 00       	push   $0x70e
f0122800:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122805:	e8 f1 d9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012280a:	e8 42 a2 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012280f:	89 c2                	mov    %eax,%edx
f0122811:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122817:	29 c2                	sub    %eax,%edx
f0122819:	89 d0                	mov    %edx,%eax
f012281b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122820:	74 17                	je     f0122839 <test_kfree_bestfirstfit+0xd68>
f0122822:	83 ec 04             	sub    $0x4,%esp
f0122825:	68 24 b5 13 f0       	push   $0xf013b524
f012282a:	68 0f 07 00 00       	push   $0x70f
f012282f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122834:	e8 c2 d9 fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122839:	83 ec 0c             	sub    $0xc,%esp
f012283c:	68 5c b5 13 f0       	push   $0xf013b55c
f0122841:	e8 3c e4 fd ff       	call   f0100c82 <cprintf>
f0122846:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122849:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012284f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122852:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122859:	eb 1e                	jmp    f0122879 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f012285b:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122861:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122864:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122867:	01 c8                	add    %ecx,%eax
f0122869:	8a 00                	mov    (%eax),%al
f012286b:	0f be c0             	movsbl %al,%eax
f012286e:	01 d0                	add    %edx,%eax
f0122870:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122876:	ff 45 f4             	incl   -0xc(%ebp)
f0122879:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012287f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122882:	7f d7                	jg     f012285b <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122884:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012288a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122890:	89 c1                	mov    %eax,%ecx
f0122892:	01 c9                	add    %ecx,%ecx
f0122894:	01 c8                	add    %ecx,%eax
f0122896:	39 c2                	cmp    %eax,%edx
f0122898:	74 17                	je     f01228b1 <test_kfree_bestfirstfit+0xde0>
f012289a:	83 ec 04             	sub    $0x4,%esp
f012289d:	68 80 b5 13 f0       	push   $0xf013b580
f01228a2:	68 1c 07 00 00       	push   $0x71c
f01228a7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01228ac:	e8 4a d9 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01228b1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01228b7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01228ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228c1:	eb 1e                	jmp    f01228e1 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01228c3:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01228c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01228cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01228cf:	01 c8                	add    %ecx,%eax
f01228d1:	8a 00                	mov    (%eax),%al
f01228d3:	0f be c0             	movsbl %al,%eax
f01228d6:	01 d0                	add    %edx,%eax
f01228d8:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01228de:	ff 45 f4             	incl   -0xc(%ebp)
f01228e1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01228e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01228ea:	7f d7                	jg     f01228c3 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01228ec:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01228f2:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01228f8:	c1 e2 02             	shl    $0x2,%edx
f01228fb:	39 d0                	cmp    %edx,%eax
f01228fd:	74 17                	je     f0122916 <test_kfree_bestfirstfit+0xe45>
f01228ff:	83 ec 04             	sub    $0x4,%esp
f0122902:	68 80 b5 13 f0       	push   $0xf013b580
f0122907:	68 24 07 00 00       	push   $0x724
f012290c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122911:	e8 e5 d8 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122916:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012291c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012291f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122926:	eb 1e                	jmp    f0122946 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122928:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012292e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122931:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122934:	01 c8                	add    %ecx,%eax
f0122936:	8a 00                	mov    (%eax),%al
f0122938:	0f be c0             	movsbl %al,%eax
f012293b:	01 d0                	add    %edx,%eax
f012293d:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122943:	ff 45 f4             	incl   -0xc(%ebp)
f0122946:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012294c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012294f:	7f d7                	jg     f0122928 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122951:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122957:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012295d:	89 d0                	mov    %edx,%eax
f012295f:	c1 e0 02             	shl    $0x2,%eax
f0122962:	01 d0                	add    %edx,%eax
f0122964:	39 c1                	cmp    %eax,%ecx
f0122966:	74 17                	je     f012297f <test_kfree_bestfirstfit+0xeae>
f0122968:	83 ec 04             	sub    $0x4,%esp
f012296b:	68 80 b5 13 f0       	push   $0xf013b580
f0122970:	68 2c 07 00 00       	push   $0x72c
f0122975:	68 9a ad 13 f0       	push   $0xf013ad9a
f012297a:	e8 7c d8 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012297f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122985:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122988:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012298f:	eb 1e                	jmp    f01229af <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122991:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122997:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012299a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012299d:	01 c8                	add    %ecx,%eax
f012299f:	8a 00                	mov    (%eax),%al
f01229a1:	0f be c0             	movsbl %al,%eax
f01229a4:	01 d0                	add    %edx,%eax
f01229a6:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01229ac:	ff 45 f4             	incl   -0xc(%ebp)
f01229af:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01229b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229b8:	7f d7                	jg     f0122991 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01229ba:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01229c0:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01229c6:	89 d0                	mov    %edx,%eax
f01229c8:	01 c0                	add    %eax,%eax
f01229ca:	01 d0                	add    %edx,%eax
f01229cc:	01 c0                	add    %eax,%eax
f01229ce:	01 d0                	add    %edx,%eax
f01229d0:	39 c1                	cmp    %eax,%ecx
f01229d2:	74 17                	je     f01229eb <test_kfree_bestfirstfit+0xf1a>
f01229d4:	83 ec 04             	sub    $0x4,%esp
f01229d7:	68 80 b5 13 f0       	push   $0xf013b580
f01229dc:	68 34 07 00 00       	push   $0x734
f01229e1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01229e6:	e8 10 d8 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f01229eb:	83 ec 0c             	sub    $0xc,%esp
f01229ee:	68 b3 b5 13 f0       	push   $0xf013b5b3
f01229f3:	e8 8a e2 fd ff       	call   f0100c82 <cprintf>
f01229f8:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01229fb:	e8 51 a0 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122a00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a03:	e8 34 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122a08:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122a0b:	83 ec 0c             	sub    $0xc,%esp
f0122a0e:	68 00 00 30 00       	push   $0x300000
f0122a13:	e8 fb 4d fe ff       	call   f0107813 <kmalloc>
f0122a18:	83 c4 10             	add    $0x10,%esp
f0122a1b:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a21:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122a27:	89 c1                	mov    %eax,%ecx
f0122a29:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122a30:	10 00 00 
f0122a33:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122a39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a3e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122a44:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a4f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122a55:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122a5b:	29 d0                	sub    %edx,%eax
f0122a5d:	89 c3                	mov    %eax,%ebx
f0122a5f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122a66:	10 00 00 
f0122a69:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122a6e:	0f b6 d0             	movzbl %al,%edx
f0122a71:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122a77:	01 d0                	add    %edx,%eax
f0122a79:	48                   	dec    %eax
f0122a7a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122a80:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a8b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122a91:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122a97:	29 d0                	sub    %edx,%eax
f0122a99:	01 c3                	add    %eax,%ebx
f0122a9b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122aa2:	10 00 00 
f0122aa5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122aaa:	0f b6 c0             	movzbl %al,%eax
f0122aad:	c1 e0 04             	shl    $0x4,%eax
f0122ab0:	89 c2                	mov    %eax,%edx
f0122ab2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122ab8:	01 d0                	add    %edx,%eax
f0122aba:	48                   	dec    %eax
f0122abb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122ac1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122ac7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122acc:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122ad2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122ad8:	29 d0                	sub    %edx,%eax
f0122ada:	01 d8                	add    %ebx,%eax
f0122adc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122ae1:	39 c1                	cmp    %eax,%ecx
f0122ae3:	74 17                	je     f0122afc <test_kfree_bestfirstfit+0x102b>
f0122ae5:	83 ec 04             	sub    $0x4,%esp
f0122ae8:	68 80 ae 13 f0       	push   $0xf013ae80
f0122aed:	68 3f 07 00 00       	push   $0x73f
f0122af2:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122af7:	e8 ff d6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122afc:	e8 3b 12 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122b01:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b04:	74 17                	je     f0122b1d <test_kfree_bestfirstfit+0x104c>
f0122b06:	83 ec 04             	sub    $0x4,%esp
f0122b09:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122b0e:	68 40 07 00 00       	push   $0x740
f0122b13:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122b18:	e8 de d6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b1d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b20:	e8 2c 9f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122b25:	29 c3                	sub    %eax,%ebx
f0122b27:	89 d8                	mov    %ebx,%eax
f0122b29:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122b2e:	74 17                	je     f0122b47 <test_kfree_bestfirstfit+0x1076>
f0122b30:	83 ec 04             	sub    $0x4,%esp
f0122b33:	68 1c ae 13 f0       	push   $0xf013ae1c
f0122b38:	68 41 07 00 00       	push   $0x741
f0122b3d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122b42:	e8 b4 d6 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122b47:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122b4e:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122b51:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122b57:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122b5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b61:	eb 0e                	jmp    f0122b71 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122b63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b66:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b69:	01 d0                	add    %edx,%eax
f0122b6b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122b6e:	ff 45 f4             	incl   -0xc(%ebp)
f0122b71:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122b77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b7a:	7f e7                	jg     f0122b63 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b7c:	e8 d0 9e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122b81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b84:	e8 b3 11 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122b89:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122b8c:	83 ec 0c             	sub    $0xc,%esp
f0122b8f:	68 00 08 00 00       	push   $0x800
f0122b94:	e8 7a 4c fe ff       	call   f0107813 <kmalloc>
f0122b99:	83 c4 10             	add    $0x10,%esp
f0122b9c:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ba2:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122ba8:	89 c1                	mov    %eax,%ecx
f0122baa:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122bb1:	10 00 00 
f0122bb4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122bba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bbf:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122bc5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122bcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bd0:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122bd6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122bdc:	29 d0                	sub    %edx,%eax
f0122bde:	89 c3                	mov    %eax,%ebx
f0122be0:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122be7:	10 00 00 
f0122bea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122bef:	0f b6 d0             	movzbl %al,%edx
f0122bf2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122bf8:	01 d0                	add    %edx,%eax
f0122bfa:	48                   	dec    %eax
f0122bfb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122c01:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122c07:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c0c:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122c12:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122c18:	29 d0                	sub    %edx,%eax
f0122c1a:	01 c3                	add    %eax,%ebx
f0122c1c:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122c23:	10 00 00 
f0122c26:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122c2b:	0f b6 c0             	movzbl %al,%eax
f0122c2e:	c1 e0 04             	shl    $0x4,%eax
f0122c31:	89 c2                	mov    %eax,%edx
f0122c33:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122c39:	01 d0                	add    %edx,%eax
f0122c3b:	48                   	dec    %eax
f0122c3c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122c42:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122c48:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c4d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122c53:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122c59:	29 d0                	sub    %edx,%eax
f0122c5b:	01 d8                	add    %ebx,%eax
f0122c5d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122c62:	39 c1                	cmp    %eax,%ecx
f0122c64:	74 17                	je     f0122c7d <test_kfree_bestfirstfit+0x11ac>
f0122c66:	83 ec 04             	sub    $0x4,%esp
f0122c69:	68 80 ae 13 f0       	push   $0xf013ae80
f0122c6e:	68 4d 07 00 00       	push   $0x74d
f0122c73:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122c78:	e8 7e d5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c7d:	e8 ba 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122c82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c85:	74 17                	je     f0122c9e <test_kfree_bestfirstfit+0x11cd>
f0122c87:	83 ec 04             	sub    $0x4,%esp
f0122c8a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122c8f:	68 4e 07 00 00       	push   $0x74e
f0122c94:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122c99:	e8 5d d5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c9e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122ca1:	e8 ab 9d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122ca6:	29 c3                	sub    %eax,%ebx
f0122ca8:	89 d8                	mov    %ebx,%eax
f0122caa:	83 f8 01             	cmp    $0x1,%eax
f0122cad:	74 17                	je     f0122cc6 <test_kfree_bestfirstfit+0x11f5>
f0122caf:	83 ec 04             	sub    $0x4,%esp
f0122cb2:	68 1c ae 13 f0       	push   $0xf013ae1c
f0122cb7:	68 4f 07 00 00       	push   $0x74f
f0122cbc:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122cc1:	e8 35 d5 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122cc6:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122ccd:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122cd0:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122cd6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122cd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ce0:	eb 0e                	jmp    f0122cf0 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122ce2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ce5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ce8:	01 d0                	add    %edx,%eax
f0122cea:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122ced:	ff 45 f4             	incl   -0xc(%ebp)
f0122cf0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0122cf6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cf9:	7f e7                	jg     f0122ce2 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122cfb:	e8 51 9d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122d00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d03:	e8 34 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d08:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122d0b:	83 ec 0c             	sub    $0xc,%esp
f0122d0e:	68 00 00 10 00       	push   $0x100000
f0122d13:	e8 fb 4a fe ff       	call   f0107813 <kmalloc>
f0122d18:	83 c4 10             	add    $0x10,%esp
f0122d1b:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d21:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122d27:	89 c1                	mov    %eax,%ecx
f0122d29:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122d30:	10 00 00 
f0122d33:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122d39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d3e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122d44:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d4f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122d55:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122d5b:	29 d0                	sub    %edx,%eax
f0122d5d:	89 c3                	mov    %eax,%ebx
f0122d5f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122d66:	10 00 00 
f0122d69:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122d6e:	0f b6 d0             	movzbl %al,%edx
f0122d71:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122d77:	01 d0                	add    %edx,%eax
f0122d79:	48                   	dec    %eax
f0122d7a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122d80:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122d86:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d8b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122d91:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122d97:	29 d0                	sub    %edx,%eax
f0122d99:	01 c3                	add    %eax,%ebx
f0122d9b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122da2:	10 00 00 
f0122da5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122daa:	0f b6 c0             	movzbl %al,%eax
f0122dad:	c1 e0 04             	shl    $0x4,%eax
f0122db0:	89 c2                	mov    %eax,%edx
f0122db2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122db8:	01 d0                	add    %edx,%eax
f0122dba:	48                   	dec    %eax
f0122dbb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122dc1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122dc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dcc:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122dd2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122dd8:	29 d0                	sub    %edx,%eax
f0122dda:	01 d8                	add    %ebx,%eax
f0122ddc:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122de1:	39 c1                	cmp    %eax,%ecx
f0122de3:	74 17                	je     f0122dfc <test_kfree_bestfirstfit+0x132b>
f0122de5:	83 ec 04             	sub    $0x4,%esp
f0122de8:	68 80 ae 13 f0       	push   $0xf013ae80
f0122ded:	68 5b 07 00 00       	push   $0x75b
f0122df2:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122df7:	e8 ff d3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dfc:	e8 3b 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e01:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e04:	74 17                	je     f0122e1d <test_kfree_bestfirstfit+0x134c>
f0122e06:	83 ec 04             	sub    $0x4,%esp
f0122e09:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122e0e:	68 5c 07 00 00       	push   $0x75c
f0122e13:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122e18:	e8 de d3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e1d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e20:	e8 2c 9c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122e25:	29 c3                	sub    %eax,%ebx
f0122e27:	89 d8                	mov    %ebx,%eax
f0122e29:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122e2e:	74 17                	je     f0122e47 <test_kfree_bestfirstfit+0x1376>
f0122e30:	83 ec 04             	sub    $0x4,%esp
f0122e33:	68 1c ae 13 f0       	push   $0xf013ae1c
f0122e38:	68 5d 07 00 00       	push   $0x75d
f0122e3d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122e42:	e8 b4 d3 fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122e47:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122e4e:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122e51:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122e57:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122e5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e61:	eb 0e                	jmp    f0122e71 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122e63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e66:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e69:	01 d0                	add    %edx,%eax
f0122e6b:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122e6e:	ff 45 f4             	incl   -0xc(%ebp)
f0122e71:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122e77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e7a:	7f e7                	jg     f0122e63 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122e7c:	83 ec 0c             	sub    $0xc,%esp
f0122e7f:	68 ba b5 13 f0       	push   $0xf013b5ba
f0122e84:	e8 f9 dd fd ff       	call   f0100c82 <cprintf>
f0122e89:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e8c:	e8 c0 9b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122e91:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e94:	e8 a3 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e99:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122e9c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122ea2:	83 ec 0c             	sub    $0xc,%esp
f0122ea5:	50                   	push   %eax
f0122ea6:	e8 33 4a fe ff       	call   f01078de <kfree>
f0122eab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122eae:	e8 89 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122eb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122eb6:	74 17                	je     f0122ecf <test_kfree_bestfirstfit+0x13fe>
f0122eb8:	83 ec 04             	sub    $0x4,%esp
f0122ebb:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122ec0:	68 6d 07 00 00       	push   $0x76d
f0122ec5:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122eca:	e8 2c d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ecf:	e8 7d 9b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122ed4:	89 c2                	mov    %eax,%edx
f0122ed6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ed9:	29 c2                	sub    %eax,%edx
f0122edb:	89 d0                	mov    %edx,%eax
f0122edd:	83 f8 02             	cmp    $0x2,%eax
f0122ee0:	74 17                	je     f0122ef9 <test_kfree_bestfirstfit+0x1428>
f0122ee2:	83 ec 04             	sub    $0x4,%esp
f0122ee5:	68 24 b5 13 f0       	push   $0xf013b524
f0122eea:	68 6e 07 00 00       	push   $0x76e
f0122eef:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122ef4:	e8 02 d3 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ef9:	e8 53 9b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122efe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f01:	e8 36 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f06:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122f09:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122f0f:	83 ec 0c             	sub    $0xc,%esp
f0122f12:	50                   	push   %eax
f0122f13:	e8 c6 49 fe ff       	call   f01078de <kfree>
f0122f18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f1b:	e8 1c 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f20:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f23:	74 17                	je     f0122f3c <test_kfree_bestfirstfit+0x146b>
f0122f25:	83 ec 04             	sub    $0x4,%esp
f0122f28:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122f2d:	68 74 07 00 00       	push   $0x774
f0122f32:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122f37:	e8 bf d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f3c:	e8 10 9b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122f41:	89 c2                	mov    %eax,%edx
f0122f43:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f46:	29 c2                	sub    %eax,%edx
f0122f48:	89 d0                	mov    %edx,%eax
f0122f4a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122f4f:	74 17                	je     f0122f68 <test_kfree_bestfirstfit+0x1497>
f0122f51:	83 ec 04             	sub    $0x4,%esp
f0122f54:	68 24 b5 13 f0       	push   $0xf013b524
f0122f59:	68 75 07 00 00       	push   $0x775
f0122f5e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122f63:	e8 93 d2 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f68:	e8 e4 9a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122f6d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f70:	e8 c7 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f75:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122f78:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122f7e:	83 ec 0c             	sub    $0xc,%esp
f0122f81:	50                   	push   %eax
f0122f82:	e8 57 49 fe ff       	call   f01078de <kfree>
f0122f87:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f8a:	e8 ad 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f8f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f92:	74 17                	je     f0122fab <test_kfree_bestfirstfit+0x14da>
f0122f94:	83 ec 04             	sub    $0x4,%esp
f0122f97:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122f9c:	68 7b 07 00 00       	push   $0x77b
f0122fa1:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122fa6:	e8 50 d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fab:	e8 a1 9a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122fb0:	89 c2                	mov    %eax,%edx
f0122fb2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122fb5:	29 c2                	sub    %eax,%edx
f0122fb7:	89 d0                	mov    %edx,%eax
f0122fb9:	83 f8 01             	cmp    $0x1,%eax
f0122fbc:	74 17                	je     f0122fd5 <test_kfree_bestfirstfit+0x1504>
f0122fbe:	83 ec 04             	sub    $0x4,%esp
f0122fc1:	68 24 b5 13 f0       	push   $0xf013b524
f0122fc6:	68 7c 07 00 00       	push   $0x77c
f0122fcb:	68 9a ad 13 f0       	push   $0xf013ad9a
f0122fd0:	e8 26 d2 fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fd5:	e8 77 9a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0122fda:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fdd:	e8 5a 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fe2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122fe5:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122feb:	83 ec 0c             	sub    $0xc,%esp
f0122fee:	50                   	push   %eax
f0122fef:	e8 ea 48 fe ff       	call   f01078de <kfree>
f0122ff4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ff7:	e8 40 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ffc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fff:	74 17                	je     f0123018 <test_kfree_bestfirstfit+0x1547>
f0123001:	83 ec 04             	sub    $0x4,%esp
f0123004:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123009:	68 82 07 00 00       	push   $0x782
f012300e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123013:	e8 e3 d1 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123018:	e8 34 9a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012301d:	89 c2                	mov    %eax,%edx
f012301f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123022:	29 c2                	sub    %eax,%edx
f0123024:	89 d0                	mov    %edx,%eax
f0123026:	83 f8 04             	cmp    $0x4,%eax
f0123029:	74 17                	je     f0123042 <test_kfree_bestfirstfit+0x1571>
f012302b:	83 ec 04             	sub    $0x4,%esp
f012302e:	68 24 b5 13 f0       	push   $0xf013b524
f0123033:	68 83 07 00 00       	push   $0x783
f0123038:	68 9a ad 13 f0       	push   $0xf013ad9a
f012303d:	e8 b9 d1 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123042:	e8 0a 9a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123047:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012304a:	e8 ed 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012304f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123052:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123058:	83 ec 0c             	sub    $0xc,%esp
f012305b:	50                   	push   %eax
f012305c:	e8 7d 48 fe ff       	call   f01078de <kfree>
f0123061:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123064:	e8 d3 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123069:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012306c:	74 17                	je     f0123085 <test_kfree_bestfirstfit+0x15b4>
f012306e:	83 ec 04             	sub    $0x4,%esp
f0123071:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123076:	68 89 07 00 00       	push   $0x789
f012307b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123080:	e8 76 d1 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123085:	e8 c7 99 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012308a:	89 c2                	mov    %eax,%edx
f012308c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012308f:	29 c2                	sub    %eax,%edx
f0123091:	89 d0                	mov    %edx,%eax
f0123093:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123098:	74 17                	je     f01230b1 <test_kfree_bestfirstfit+0x15e0>
f012309a:	83 ec 04             	sub    $0x4,%esp
f012309d:	68 24 b5 13 f0       	push   $0xf013b524
f01230a2:	68 8a 07 00 00       	push   $0x78a
f01230a7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01230ac:	e8 4a d1 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01230b1:	e8 9b 99 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01230b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230b9:	e8 7e 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01230be:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01230c1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01230c7:	83 ec 0c             	sub    $0xc,%esp
f01230ca:	50                   	push   %eax
f01230cb:	e8 0e 48 fe ff       	call   f01078de <kfree>
f01230d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230d3:	e8 64 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01230d8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230db:	74 17                	je     f01230f4 <test_kfree_bestfirstfit+0x1623>
f01230dd:	83 ec 04             	sub    $0x4,%esp
f01230e0:	68 b4 ad 13 f0       	push   $0xf013adb4
f01230e5:	68 90 07 00 00       	push   $0x790
f01230ea:	68 9a ad 13 f0       	push   $0xf013ad9a
f01230ef:	e8 07 d1 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01230f4:	e8 58 99 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01230f9:	89 c2                	mov    %eax,%edx
f01230fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01230fe:	29 c2                	sub    %eax,%edx
f0123100:	89 d0                	mov    %edx,%eax
f0123102:	83 f8 01             	cmp    $0x1,%eax
f0123105:	74 17                	je     f012311e <test_kfree_bestfirstfit+0x164d>
f0123107:	83 ec 04             	sub    $0x4,%esp
f012310a:	68 24 b5 13 f0       	push   $0xf013b524
f012310f:	68 91 07 00 00       	push   $0x791
f0123114:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123119:	e8 dd d0 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012311e:	e8 2e 99 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123123:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123126:	e8 11 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012312b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f012312e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123134:	83 ec 0c             	sub    $0xc,%esp
f0123137:	50                   	push   %eax
f0123138:	e8 a1 47 fe ff       	call   f01078de <kfree>
f012313d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123140:	e8 f7 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123145:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123148:	74 17                	je     f0123161 <test_kfree_bestfirstfit+0x1690>
f012314a:	83 ec 04             	sub    $0x4,%esp
f012314d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123152:	68 97 07 00 00       	push   $0x797
f0123157:	68 9a ad 13 f0       	push   $0xf013ad9a
f012315c:	e8 9a d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123161:	e8 eb 98 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123166:	89 c2                	mov    %eax,%edx
f0123168:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012316b:	29 c2                	sub    %eax,%edx
f012316d:	89 d0                	mov    %edx,%eax
f012316f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123174:	74 17                	je     f012318d <test_kfree_bestfirstfit+0x16bc>
f0123176:	83 ec 04             	sub    $0x4,%esp
f0123179:	68 24 b5 13 f0       	push   $0xf013b524
f012317e:	68 98 07 00 00       	push   $0x798
f0123183:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123188:	e8 6e d0 fd ff       	call   f01001fb <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012318d:	e8 bf 98 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123192:	89 c2                	mov    %eax,%edx
f0123194:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123197:	39 c2                	cmp    %eax,%edx
f0123199:	74 17                	je     f01231b2 <test_kfree_bestfirstfit+0x16e1>
f012319b:	83 ec 04             	sub    $0x4,%esp
f012319e:	68 c4 b5 13 f0       	push   $0xf013b5c4
f01231a3:	68 9a 07 00 00       	push   $0x79a
f01231a8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01231ad:	e8 49 d0 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f01231b2:	83 ec 0c             	sub    $0xc,%esp
f01231b5:	68 f8 b5 13 f0       	push   $0xf013b5f8
f01231ba:	e8 c3 da fd ff       	call   f0100c82 <cprintf>
f01231bf:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01231c2:	83 ec 0c             	sub    $0xc,%esp
f01231c5:	6a 03                	push   $0x3
f01231c7:	e8 25 9d fe ff       	call   f010cef1 <sys_bypassPageFault>
f01231cc:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01231cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231d6:	e9 82 00 00 00       	jmp    f012325d <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01231db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01231de:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01231e5:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01231e8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231eb:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01231ee:	e8 ec 9c fe ff       	call   f010cedf <sys_rcr2>
f01231f3:	89 c2                	mov    %eax,%edx
f01231f5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231f8:	39 c2                	cmp    %eax,%edx
f01231fa:	74 17                	je     f0123213 <test_kfree_bestfirstfit+0x1742>
f01231fc:	83 ec 04             	sub    $0x4,%esp
f01231ff:	68 00 b6 13 f0       	push   $0xf013b600
f0123204:	68 a9 07 00 00       	push   $0x7a9
f0123209:	68 9a ad 13 f0       	push   $0xf013ad9a
f012320e:	e8 e8 cf fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0123213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123216:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012321d:	89 c2                	mov    %eax,%edx
f012321f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123222:	01 d0                	add    %edx,%eax
f0123224:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123227:	e8 b3 9c fe ff       	call   f010cedf <sys_rcr2>
f012322c:	89 c2                	mov    %eax,%edx
f012322e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123231:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123238:	89 c1                	mov    %eax,%ecx
f012323a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012323d:	01 c8                	add    %ecx,%eax
f012323f:	39 c2                	cmp    %eax,%edx
f0123241:	74 17                	je     f012325a <test_kfree_bestfirstfit+0x1789>
f0123243:	83 ec 04             	sub    $0x4,%esp
f0123246:	68 00 b6 13 f0       	push   $0xf013b600
f012324b:	68 ab 07 00 00       	push   $0x7ab
f0123250:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123255:	e8 a1 cf fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012325a:	ff 45 f4             	incl   -0xc(%ebp)
f012325d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123261:	0f 8e 74 ff ff ff    	jle    f01231db <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123267:	83 ec 0c             	sub    $0xc,%esp
f012326a:	6a 00                	push   $0x0
f012326c:	e8 80 9c fe ff       	call   f010cef1 <sys_bypassPageFault>
f0123271:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123274:	83 ec 0c             	sub    $0xc,%esp
f0123277:	68 45 b6 13 f0       	push   $0xf013b645
f012327c:	e8 01 da fd ff       	call   f0100c82 <cprintf>
f0123281:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123284:	e8 c8 97 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123289:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012328c:	e8 ab 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123291:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123294:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012329a:	83 ec 0c             	sub    $0xc,%esp
f012329d:	50                   	push   %eax
f012329e:	e8 3b 46 fe ff       	call   f01078de <kfree>
f01232a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232a6:	e8 91 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01232ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01232ae:	74 17                	je     f01232c7 <test_kfree_bestfirstfit+0x17f6>
f01232b0:	83 ec 04             	sub    $0x4,%esp
f01232b3:	68 b4 ad 13 f0       	push   $0xf013adb4
f01232b8:	68 b9 07 00 00       	push   $0x7b9
f01232bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f01232c2:	e8 34 cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01232c7:	e8 85 97 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01232cc:	89 c2                	mov    %eax,%edx
f01232ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01232d1:	39 c2                	cmp    %eax,%edx
f01232d3:	74 17                	je     f01232ec <test_kfree_bestfirstfit+0x181b>
f01232d5:	83 ec 04             	sub    $0x4,%esp
f01232d8:	68 4c b6 13 f0       	push   $0xf013b64c
f01232dd:	68 ba 07 00 00       	push   $0x7ba
f01232e2:	68 9a ad 13 f0       	push   $0xf013ad9a
f01232e7:	e8 0f cf fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01232ec:	e8 60 97 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01232f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232f4:	e8 43 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01232f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01232fc:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123302:	83 ec 0c             	sub    $0xc,%esp
f0123305:	50                   	push   %eax
f0123306:	e8 d3 45 fe ff       	call   f01078de <kfree>
f012330b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012330e:	e8 29 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123313:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123316:	74 17                	je     f012332f <test_kfree_bestfirstfit+0x185e>
f0123318:	83 ec 04             	sub    $0x4,%esp
f012331b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123320:	68 c0 07 00 00       	push   $0x7c0
f0123325:	68 9a ad 13 f0       	push   $0xf013ad9a
f012332a:	e8 cc ce fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012332f:	e8 1d 97 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123334:	89 c2                	mov    %eax,%edx
f0123336:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123339:	39 c2                	cmp    %eax,%edx
f012333b:	74 17                	je     f0123354 <test_kfree_bestfirstfit+0x1883>
f012333d:	83 ec 04             	sub    $0x4,%esp
f0123340:	68 4c b6 13 f0       	push   $0xf013b64c
f0123345:	68 c1 07 00 00       	push   $0x7c1
f012334a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012334f:	e8 a7 ce fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123354:	e8 f8 96 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123359:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012335c:	e8 db 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123361:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123364:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012336a:	83 ec 0c             	sub    $0xc,%esp
f012336d:	50                   	push   %eax
f012336e:	e8 6b 45 fe ff       	call   f01078de <kfree>
f0123373:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123376:	e8 c1 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012337b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012337e:	74 17                	je     f0123397 <test_kfree_bestfirstfit+0x18c6>
f0123380:	83 ec 04             	sub    $0x4,%esp
f0123383:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123388:	68 c7 07 00 00       	push   $0x7c7
f012338d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123392:	e8 64 ce fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123397:	e8 b5 96 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012339c:	89 c2                	mov    %eax,%edx
f012339e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01233a1:	39 c2                	cmp    %eax,%edx
f01233a3:	74 17                	je     f01233bc <test_kfree_bestfirstfit+0x18eb>
f01233a5:	83 ec 04             	sub    $0x4,%esp
f01233a8:	68 4c b6 13 f0       	push   $0xf013b64c
f01233ad:	68 c8 07 00 00       	push   $0x7c8
f01233b2:	68 9a ad 13 f0       	push   $0xf013ad9a
f01233b7:	e8 3f ce fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01233bc:	e8 90 96 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01233c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233c4:	e8 73 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01233c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01233cc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01233d2:	83 ec 0c             	sub    $0xc,%esp
f01233d5:	50                   	push   %eax
f01233d6:	e8 03 45 fe ff       	call   f01078de <kfree>
f01233db:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233de:	e8 59 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01233e3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01233e6:	74 17                	je     f01233ff <test_kfree_bestfirstfit+0x192e>
f01233e8:	83 ec 04             	sub    $0x4,%esp
f01233eb:	68 b4 ad 13 f0       	push   $0xf013adb4
f01233f0:	68 ce 07 00 00       	push   $0x7ce
f01233f5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01233fa:	e8 fc cd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01233ff:	e8 4d 96 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123404:	89 c2                	mov    %eax,%edx
f0123406:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123409:	39 c2                	cmp    %eax,%edx
f012340b:	74 17                	je     f0123424 <test_kfree_bestfirstfit+0x1953>
f012340d:	83 ec 04             	sub    $0x4,%esp
f0123410:	68 4c b6 13 f0       	push   $0xf013b64c
f0123415:	68 cf 07 00 00       	push   $0x7cf
f012341a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012341f:	e8 d7 cd fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f0123424:	83 ec 0c             	sub    $0xc,%esp
f0123427:	68 93 b6 13 f0       	push   $0xf013b693
f012342c:	e8 51 d8 fd ff       	call   f0100c82 <cprintf>
f0123431:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123434:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012343b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123442:	eb 48                	jmp    f012348c <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123444:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123447:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012344c:	83 ec 04             	sub    $0x4,%esp
f012344f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123455:	51                   	push   %ecx
f0123456:	52                   	push   %edx
f0123457:	50                   	push   %eax
f0123458:	e8 7d 35 fe ff       	call   f01069da <get_page_table>
f012345d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123460:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123466:	85 c0                	test   %eax,%eax
f0123468:	75 17                	jne    f0123481 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012346a:	83 ec 04             	sub    $0x4,%esp
f012346d:	68 9c b6 13 f0       	push   $0xf013b69c
f0123472:	68 dd 07 00 00       	push   $0x7dd
f0123477:	68 9a ad 13 f0       	push   $0xf013ad9a
f012347c:	e8 7a cd fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123481:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123488:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012348c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123490:	78 b2                	js     f0123444 <test_kfree_bestfirstfit+0x1973>
f0123492:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123496:	7f 09                	jg     f01234a1 <test_kfree_bestfirstfit+0x19d0>
f0123498:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012349f:	76 a3                	jbe    f0123444 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01234a1:	83 ec 0c             	sub    $0xc,%esp
f01234a4:	68 7e af 13 f0       	push   $0xf013af7e
f01234a9:	e8 d4 d7 fd ff       	call   f0100c82 <cprintf>
f01234ae:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01234b1:	83 ec 0c             	sub    $0xc,%esp
f01234b4:	68 04 b7 13 f0       	push   $0xf013b704
f01234b9:	e8 c4 d7 fd ff       	call   f0100c82 <cprintf>
f01234be:	83 c4 10             	add    $0x10,%esp

	return 1;
f01234c1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01234c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01234c9:	5b                   	pop    %ebx
f01234ca:	5f                   	pop    %edi
f01234cb:	5d                   	pop    %ebp
f01234cc:	c3                   	ret    

f01234cd <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01234cd:	55                   	push   %ebp
f01234ce:	89 e5                	mov    %esp,%ebp
f01234d0:	57                   	push   %edi
f01234d1:	56                   	push   %esi
f01234d2:	53                   	push   %ebx
f01234d3:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01234d9:	83 ec 0c             	sub    $0xc,%esp
f01234dc:	68 dc ac 13 f0       	push   $0xf013acdc
f01234e1:	e8 9c d7 fd ff       	call   f0100c82 <cprintf>
f01234e6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01234e9:	83 ec 0c             	sub    $0xc,%esp
f01234ec:	68 0c ad 13 f0       	push   $0xf013ad0c
f01234f1:	e8 8c d7 fd ff       	call   f0100c82 <cprintf>
f01234f6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01234f9:	83 ec 0c             	sub    $0xc,%esp
f01234fc:	68 dc ac 13 f0       	push   $0xf013acdc
f0123501:	e8 7c d7 fd ff       	call   f0100c82 <cprintf>
f0123506:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123509:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f012350d:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123511:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123517:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012351d:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123524:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012352b:	e8 21 95 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123530:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123533:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123539:	b9 14 00 00 00       	mov    $0x14,%ecx
f012353e:	b8 00 00 00 00       	mov    $0x0,%eax
f0123543:	89 d7                	mov    %edx,%edi
f0123545:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123547:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f012354d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123552:	b8 00 00 00 00       	mov    $0x0,%eax
f0123557:	89 d7                	mov    %edx,%edi
f0123559:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012355b:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123561:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123566:	b8 00 00 00 00       	mov    $0x0,%eax
f012356b:	89 d7                	mov    %edx,%edi
f012356d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012356f:	e8 dd 94 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123574:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123577:	e8 c0 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012357c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012357f:	83 ec 0c             	sub    $0xc,%esp
f0123582:	68 00 fc 1f 00       	push   $0x1ffc00
f0123587:	e8 87 42 fe ff       	call   f0107813 <kmalloc>
f012358c:	83 c4 10             	add    $0x10,%esp
f012358f:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123595:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012359b:	89 c1                	mov    %eax,%ecx
f012359d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01235a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01235a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235ac:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01235af:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01235b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01235b7:	f7 75 a0             	divl   -0x60(%ebp)
f01235ba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01235bd:	29 d0                	sub    %edx,%eax
f01235bf:	89 c3                	mov    %eax,%ebx
f01235c1:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01235c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01235cd:	0f b6 d0             	movzbl %al,%edx
f01235d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01235d3:	01 d0                	add    %edx,%eax
f01235d5:	48                   	dec    %eax
f01235d6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01235d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01235dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01235e1:	f7 75 98             	divl   -0x68(%ebp)
f01235e4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01235e7:	29 d0                	sub    %edx,%eax
f01235e9:	01 c3                	add    %eax,%ebx
f01235eb:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01235f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01235f7:	0f b6 c0             	movzbl %al,%eax
f01235fa:	c1 e0 04             	shl    $0x4,%eax
f01235fd:	89 c2                	mov    %eax,%edx
f01235ff:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123602:	01 d0                	add    %edx,%eax
f0123604:	48                   	dec    %eax
f0123605:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123608:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123610:	f7 75 90             	divl   -0x70(%ebp)
f0123613:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123616:	29 d0                	sub    %edx,%eax
f0123618:	01 d8                	add    %ebx,%eax
f012361a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012361f:	39 c1                	cmp    %eax,%ecx
f0123621:	74 17                	je     f012363a <test_kheap_phys_addr+0x16d>
f0123623:	83 ec 04             	sub    $0x4,%esp
f0123626:	68 80 ae 13 f0       	push   $0xf013ae80
f012362b:	68 0a 08 00 00       	push   $0x80a
f0123630:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123635:	e8 c1 cb fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012363a:	e8 fd 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012363f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123642:	74 17                	je     f012365b <test_kheap_phys_addr+0x18e>
f0123644:	83 ec 04             	sub    $0x4,%esp
f0123647:	68 b4 ad 13 f0       	push   $0xf013adb4
f012364c:	68 0b 08 00 00       	push   $0x80b
f0123651:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123656:	e8 a0 cb fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012365b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012365e:	e8 ee 93 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123663:	29 c3                	sub    %eax,%ebx
f0123665:	89 d8                	mov    %ebx,%eax
f0123667:	3d 00 02 00 00       	cmp    $0x200,%eax
f012366c:	74 17                	je     f0123685 <test_kheap_phys_addr+0x1b8>
f012366e:	83 ec 04             	sub    $0x4,%esp
f0123671:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123676:	68 0c 08 00 00       	push   $0x80c
f012367b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123680:	e8 76 cb fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123685:	e8 c7 93 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012368a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012368d:	e8 aa 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123692:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123695:	83 ec 0c             	sub    $0xc,%esp
f0123698:	68 00 fc 1f 00       	push   $0x1ffc00
f012369d:	e8 71 41 fe ff       	call   f0107813 <kmalloc>
f01236a2:	83 c4 10             	add    $0x10,%esp
f01236a5:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01236ab:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01236b1:	89 c1                	mov    %eax,%ecx
f01236b3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01236ba:	8b 45 88             	mov    -0x78(%ebp),%eax
f01236bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236c2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01236c5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01236c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01236cd:	f7 75 88             	divl   -0x78(%ebp)
f01236d0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01236d3:	29 d0                	sub    %edx,%eax
f01236d5:	89 c3                	mov    %eax,%ebx
f01236d7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01236de:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01236e3:	0f b6 d0             	movzbl %al,%edx
f01236e6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01236e9:	01 d0                	add    %edx,%eax
f01236eb:	48                   	dec    %eax
f01236ec:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01236f2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01236f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01236fd:	f7 75 80             	divl   -0x80(%ebp)
f0123700:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123706:	29 d0                	sub    %edx,%eax
f0123708:	01 c3                	add    %eax,%ebx
f012370a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123711:	10 00 00 
f0123714:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123719:	0f b6 c0             	movzbl %al,%eax
f012371c:	c1 e0 04             	shl    $0x4,%eax
f012371f:	89 c2                	mov    %eax,%edx
f0123721:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123727:	01 d0                	add    %edx,%eax
f0123729:	48                   	dec    %eax
f012372a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123730:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123736:	ba 00 00 00 00       	mov    $0x0,%edx
f012373b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123741:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123747:	29 d0                	sub    %edx,%eax
f0123749:	01 d8                	add    %ebx,%eax
f012374b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123750:	39 c1                	cmp    %eax,%ecx
f0123752:	74 17                	je     f012376b <test_kheap_phys_addr+0x29e>
f0123754:	83 ec 04             	sub    $0x4,%esp
f0123757:	68 80 ae 13 f0       	push   $0xf013ae80
f012375c:	68 12 08 00 00       	push   $0x812
f0123761:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123766:	e8 90 ca fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012376b:	e8 cc 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123770:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123773:	74 17                	je     f012378c <test_kheap_phys_addr+0x2bf>
f0123775:	83 ec 04             	sub    $0x4,%esp
f0123778:	68 b4 ad 13 f0       	push   $0xf013adb4
f012377d:	68 13 08 00 00       	push   $0x813
f0123782:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123787:	e8 6f ca fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012378c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012378f:	e8 bd 92 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123794:	29 c3                	sub    %eax,%ebx
f0123796:	89 d8                	mov    %ebx,%eax
f0123798:	3d 00 02 00 00       	cmp    $0x200,%eax
f012379d:	74 17                	je     f01237b6 <test_kheap_phys_addr+0x2e9>
f012379f:	83 ec 04             	sub    $0x4,%esp
f01237a2:	68 1c ae 13 f0       	push   $0xf013ae1c
f01237a7:	68 14 08 00 00       	push   $0x814
f01237ac:	68 9a ad 13 f0       	push   $0xf013ad9a
f01237b1:	e8 45 ca fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01237b6:	e8 96 92 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01237bb:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237be:	e8 79 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01237c3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01237c6:	83 ec 0c             	sub    $0xc,%esp
f01237c9:	68 00 08 00 00       	push   $0x800
f01237ce:	e8 40 40 fe ff       	call   f0107813 <kmalloc>
f01237d3:	83 c4 10             	add    $0x10,%esp
f01237d6:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01237dc:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01237e2:	89 c1                	mov    %eax,%ecx
f01237e4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01237eb:	10 00 00 
f01237ee:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01237f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01237f9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01237ff:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123805:	ba 00 00 00 00       	mov    $0x0,%edx
f012380a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123810:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123816:	29 d0                	sub    %edx,%eax
f0123818:	89 c3                	mov    %eax,%ebx
f012381a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123821:	10 00 00 
f0123824:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123829:	0f b6 d0             	movzbl %al,%edx
f012382c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123832:	01 d0                	add    %edx,%eax
f0123834:	48                   	dec    %eax
f0123835:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012383b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123841:	ba 00 00 00 00       	mov    $0x0,%edx
f0123846:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012384c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123852:	29 d0                	sub    %edx,%eax
f0123854:	01 c3                	add    %eax,%ebx
f0123856:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012385d:	10 00 00 
f0123860:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123865:	0f b6 c0             	movzbl %al,%eax
f0123868:	c1 e0 04             	shl    $0x4,%eax
f012386b:	89 c2                	mov    %eax,%edx
f012386d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123873:	01 d0                	add    %edx,%eax
f0123875:	48                   	dec    %eax
f0123876:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012387c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123882:	ba 00 00 00 00       	mov    $0x0,%edx
f0123887:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012388d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123893:	29 d0                	sub    %edx,%eax
f0123895:	01 d8                	add    %ebx,%eax
f0123897:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012389c:	39 c1                	cmp    %eax,%ecx
f012389e:	74 17                	je     f01238b7 <test_kheap_phys_addr+0x3ea>
f01238a0:	83 ec 04             	sub    $0x4,%esp
f01238a3:	68 80 ae 13 f0       	push   $0xf013ae80
f01238a8:	68 1a 08 00 00       	push   $0x81a
f01238ad:	68 9a ad 13 f0       	push   $0xf013ad9a
f01238b2:	e8 44 c9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238b7:	e8 80 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01238bc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01238bf:	74 17                	je     f01238d8 <test_kheap_phys_addr+0x40b>
f01238c1:	83 ec 04             	sub    $0x4,%esp
f01238c4:	68 b4 ad 13 f0       	push   $0xf013adb4
f01238c9:	68 1b 08 00 00       	push   $0x81b
f01238ce:	68 9a ad 13 f0       	push   $0xf013ad9a
f01238d3:	e8 23 c9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01238d8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01238db:	e8 71 91 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01238e0:	29 c3                	sub    %eax,%ebx
f01238e2:	89 d8                	mov    %ebx,%eax
f01238e4:	83 f8 01             	cmp    $0x1,%eax
f01238e7:	74 17                	je     f0123900 <test_kheap_phys_addr+0x433>
f01238e9:	83 ec 04             	sub    $0x4,%esp
f01238ec:	68 1c ae 13 f0       	push   $0xf013ae1c
f01238f1:	68 1c 08 00 00       	push   $0x81c
f01238f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01238fb:	e8 fb c8 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123900:	e8 4c 91 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123905:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123908:	e8 2f 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012390d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123910:	83 ec 0c             	sub    $0xc,%esp
f0123913:	68 00 08 00 00       	push   $0x800
f0123918:	e8 f6 3e fe ff       	call   f0107813 <kmalloc>
f012391d:	83 c4 10             	add    $0x10,%esp
f0123920:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123926:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012392c:	89 c1                	mov    %eax,%ecx
f012392e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123935:	10 00 00 
f0123938:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012393e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123943:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123949:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012394f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123954:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012395a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123960:	29 d0                	sub    %edx,%eax
f0123962:	89 c3                	mov    %eax,%ebx
f0123964:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012396b:	10 00 00 
f012396e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123973:	0f b6 d0             	movzbl %al,%edx
f0123976:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012397c:	01 d0                	add    %edx,%eax
f012397e:	48                   	dec    %eax
f012397f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123985:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012398b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123990:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123996:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012399c:	29 d0                	sub    %edx,%eax
f012399e:	01 c3                	add    %eax,%ebx
f01239a0:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01239a7:	10 00 00 
f01239aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01239af:	0f b6 c0             	movzbl %al,%eax
f01239b2:	c1 e0 04             	shl    $0x4,%eax
f01239b5:	89 c2                	mov    %eax,%edx
f01239b7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01239bd:	01 d0                	add    %edx,%eax
f01239bf:	48                   	dec    %eax
f01239c0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01239c6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01239cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01239d1:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01239d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01239dd:	29 d0                	sub    %edx,%eax
f01239df:	01 d8                	add    %ebx,%eax
f01239e1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01239e6:	39 c1                	cmp    %eax,%ecx
f01239e8:	74 17                	je     f0123a01 <test_kheap_phys_addr+0x534>
f01239ea:	83 ec 04             	sub    $0x4,%esp
f01239ed:	68 80 ae 13 f0       	push   $0xf013ae80
f01239f2:	68 22 08 00 00       	push   $0x822
f01239f7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01239fc:	e8 fa c7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a01:	e8 36 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123a06:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123a09:	74 17                	je     f0123a22 <test_kheap_phys_addr+0x555>
f0123a0b:	83 ec 04             	sub    $0x4,%esp
f0123a0e:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123a13:	68 23 08 00 00       	push   $0x823
f0123a18:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123a1d:	e8 d9 c7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a22:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123a25:	e8 27 90 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123a2a:	29 c3                	sub    %eax,%ebx
f0123a2c:	89 d8                	mov    %ebx,%eax
f0123a2e:	83 f8 01             	cmp    $0x1,%eax
f0123a31:	74 17                	je     f0123a4a <test_kheap_phys_addr+0x57d>
f0123a33:	83 ec 04             	sub    $0x4,%esp
f0123a36:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123a3b:	68 24 08 00 00       	push   $0x824
f0123a40:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123a45:	e8 b1 c7 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123a4a:	e8 02 90 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123a4f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a52:	e8 e5 02 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123a57:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123a5a:	83 ec 0c             	sub    $0xc,%esp
f0123a5d:	68 00 1c 00 00       	push   $0x1c00
f0123a62:	e8 ac 3d fe ff       	call   f0107813 <kmalloc>
f0123a67:	83 c4 10             	add    $0x10,%esp
f0123a6a:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a70:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123a76:	89 c1                	mov    %eax,%ecx
f0123a78:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123a7f:	10 00 00 
f0123a82:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123a88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a8d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123a93:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123a99:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a9e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123aa4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123aaa:	29 d0                	sub    %edx,%eax
f0123aac:	89 c3                	mov    %eax,%ebx
f0123aae:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123ab5:	10 00 00 
f0123ab8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123abd:	0f b6 d0             	movzbl %al,%edx
f0123ac0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123ac6:	01 d0                	add    %edx,%eax
f0123ac8:	48                   	dec    %eax
f0123ac9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123acf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123ad5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ada:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123ae0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123ae6:	29 d0                	sub    %edx,%eax
f0123ae8:	01 c3                	add    %eax,%ebx
f0123aea:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123af1:	10 00 00 
f0123af4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123af9:	0f b6 c0             	movzbl %al,%eax
f0123afc:	c1 e0 04             	shl    $0x4,%eax
f0123aff:	89 c2                	mov    %eax,%edx
f0123b01:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123b07:	01 d0                	add    %edx,%eax
f0123b09:	48                   	dec    %eax
f0123b0a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123b10:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123b16:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b1b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123b21:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123b27:	29 d0                	sub    %edx,%eax
f0123b29:	01 d8                	add    %ebx,%eax
f0123b2b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123b30:	39 c1                	cmp    %eax,%ecx
f0123b32:	74 17                	je     f0123b4b <test_kheap_phys_addr+0x67e>
f0123b34:	83 ec 04             	sub    $0x4,%esp
f0123b37:	68 80 ae 13 f0       	push   $0xf013ae80
f0123b3c:	68 2a 08 00 00       	push   $0x82a
f0123b41:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123b46:	e8 b0 c6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b4b:	e8 ec 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123b50:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b53:	74 17                	je     f0123b6c <test_kheap_phys_addr+0x69f>
f0123b55:	83 ec 04             	sub    $0x4,%esp
f0123b58:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123b5d:	68 2b 08 00 00       	push   $0x82b
f0123b62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123b67:	e8 8f c6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b6c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b6f:	e8 dd 8e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123b74:	29 c3                	sub    %eax,%ebx
f0123b76:	89 d8                	mov    %ebx,%eax
f0123b78:	83 f8 02             	cmp    $0x2,%eax
f0123b7b:	74 17                	je     f0123b94 <test_kheap_phys_addr+0x6c7>
f0123b7d:	83 ec 04             	sub    $0x4,%esp
f0123b80:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123b85:	68 2c 08 00 00       	push   $0x82c
f0123b8a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123b8f:	e8 67 c6 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b94:	e8 b8 8e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123b99:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b9c:	e8 9b 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123ba1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123ba4:	83 ec 0c             	sub    $0xc,%esp
f0123ba7:	68 00 fc 2f 00       	push   $0x2ffc00
f0123bac:	e8 62 3c fe ff       	call   f0107813 <kmalloc>
f0123bb1:	83 c4 10             	add    $0x10,%esp
f0123bb4:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123bba:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123bc0:	89 c1                	mov    %eax,%ecx
f0123bc2:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123bc9:	10 00 00 
f0123bcc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123bd2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123bd7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123bdd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123be8:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123bee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123bf4:	29 d0                	sub    %edx,%eax
f0123bf6:	89 c3                	mov    %eax,%ebx
f0123bf8:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123bff:	10 00 00 
f0123c02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123c07:	0f b6 d0             	movzbl %al,%edx
f0123c0a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123c10:	01 d0                	add    %edx,%eax
f0123c12:	48                   	dec    %eax
f0123c13:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123c19:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123c1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c24:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123c2a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123c30:	29 d0                	sub    %edx,%eax
f0123c32:	01 c3                	add    %eax,%ebx
f0123c34:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123c3b:	10 00 00 
f0123c3e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123c43:	0f b6 c0             	movzbl %al,%eax
f0123c46:	c1 e0 04             	shl    $0x4,%eax
f0123c49:	89 c2                	mov    %eax,%edx
f0123c4b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123c51:	01 d0                	add    %edx,%eax
f0123c53:	48                   	dec    %eax
f0123c54:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123c5a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c65:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123c6b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123c71:	29 d0                	sub    %edx,%eax
f0123c73:	01 d8                	add    %ebx,%eax
f0123c75:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123c7a:	39 c1                	cmp    %eax,%ecx
f0123c7c:	74 17                	je     f0123c95 <test_kheap_phys_addr+0x7c8>
f0123c7e:	83 ec 04             	sub    $0x4,%esp
f0123c81:	68 80 ae 13 f0       	push   $0xf013ae80
f0123c86:	68 32 08 00 00       	push   $0x832
f0123c8b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123c90:	e8 66 c5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c95:	e8 a2 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123c9a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c9d:	74 17                	je     f0123cb6 <test_kheap_phys_addr+0x7e9>
f0123c9f:	83 ec 04             	sub    $0x4,%esp
f0123ca2:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123ca7:	68 33 08 00 00       	push   $0x833
f0123cac:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123cb1:	e8 45 c5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123cb6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123cb9:	e8 93 8d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123cbe:	29 c3                	sub    %eax,%ebx
f0123cc0:	89 d8                	mov    %ebx,%eax
f0123cc2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123cc7:	74 17                	je     f0123ce0 <test_kheap_phys_addr+0x813>
f0123cc9:	83 ec 04             	sub    $0x4,%esp
f0123ccc:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123cd1:	68 34 08 00 00       	push   $0x834
f0123cd6:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123cdb:	e8 1b c5 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ce0:	e8 6c 8d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123ce5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ce8:	e8 4f 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123ced:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123cf0:	83 ec 0c             	sub    $0xc,%esp
f0123cf3:	68 00 fc 5f 00       	push   $0x5ffc00
f0123cf8:	e8 16 3b fe ff       	call   f0107813 <kmalloc>
f0123cfd:	83 c4 10             	add    $0x10,%esp
f0123d00:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d06:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123d0c:	89 c1                	mov    %eax,%ecx
f0123d0e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123d15:	10 00 00 
f0123d18:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123d1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d23:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123d29:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123d2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d34:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123d3a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123d40:	29 d0                	sub    %edx,%eax
f0123d42:	89 c3                	mov    %eax,%ebx
f0123d44:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123d4b:	10 00 00 
f0123d4e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d53:	0f b6 d0             	movzbl %al,%edx
f0123d56:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123d5c:	01 d0                	add    %edx,%eax
f0123d5e:	48                   	dec    %eax
f0123d5f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123d65:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d70:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123d76:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123d7c:	29 d0                	sub    %edx,%eax
f0123d7e:	01 c3                	add    %eax,%ebx
f0123d80:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123d87:	10 00 00 
f0123d8a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d8f:	0f b6 c0             	movzbl %al,%eax
f0123d92:	c1 e0 04             	shl    $0x4,%eax
f0123d95:	89 c2                	mov    %eax,%edx
f0123d97:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123d9d:	01 d0                	add    %edx,%eax
f0123d9f:	48                   	dec    %eax
f0123da0:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123da6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123dac:	ba 00 00 00 00       	mov    $0x0,%edx
f0123db1:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123db7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123dbd:	29 d0                	sub    %edx,%eax
f0123dbf:	01 d8                	add    %ebx,%eax
f0123dc1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123dc6:	39 c1                	cmp    %eax,%ecx
f0123dc8:	74 17                	je     f0123de1 <test_kheap_phys_addr+0x914>
f0123dca:	83 ec 04             	sub    $0x4,%esp
f0123dcd:	68 80 ae 13 f0       	push   $0xf013ae80
f0123dd2:	68 3a 08 00 00       	push   $0x83a
f0123dd7:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123ddc:	e8 1a c4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123de1:	e8 56 ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123de6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123de9:	74 17                	je     f0123e02 <test_kheap_phys_addr+0x935>
f0123deb:	83 ec 04             	sub    $0x4,%esp
f0123dee:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123df3:	68 3b 08 00 00       	push   $0x83b
f0123df8:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123dfd:	e8 f9 c3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e02:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e05:	e8 47 8c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123e0a:	29 c3                	sub    %eax,%ebx
f0123e0c:	89 d8                	mov    %ebx,%eax
f0123e0e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123e13:	74 17                	je     f0123e2c <test_kheap_phys_addr+0x95f>
f0123e15:	83 ec 04             	sub    $0x4,%esp
f0123e18:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123e1d:	68 3c 08 00 00       	push   $0x83c
f0123e22:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123e27:	e8 cf c3 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123e2c:	e8 20 8c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123e31:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e34:	e8 03 ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123e39:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123e3c:	83 ec 0c             	sub    $0xc,%esp
f0123e3f:	68 00 38 00 00       	push   $0x3800
f0123e44:	e8 ca 39 fe ff       	call   f0107813 <kmalloc>
f0123e49:	83 c4 10             	add    $0x10,%esp
f0123e4c:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e52:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123e58:	89 c1                	mov    %eax,%ecx
f0123e5a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123e61:	10 00 00 
f0123e64:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123e6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e6f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123e75:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123e7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e80:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123e86:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123e8c:	29 d0                	sub    %edx,%eax
f0123e8e:	89 c3                	mov    %eax,%ebx
f0123e90:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123e97:	10 00 00 
f0123e9a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123e9f:	0f b6 d0             	movzbl %al,%edx
f0123ea2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123ea8:	01 d0                	add    %edx,%eax
f0123eaa:	48                   	dec    %eax
f0123eab:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123eb1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123eb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ebc:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123ec2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123ec8:	29 d0                	sub    %edx,%eax
f0123eca:	01 c3                	add    %eax,%ebx
f0123ecc:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123ed3:	10 00 00 
f0123ed6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123edb:	0f b6 c0             	movzbl %al,%eax
f0123ede:	c1 e0 04             	shl    $0x4,%eax
f0123ee1:	89 c2                	mov    %eax,%edx
f0123ee3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123ee9:	01 d0                	add    %edx,%eax
f0123eeb:	48                   	dec    %eax
f0123eec:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123ef2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123efd:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123f03:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123f09:	29 d0                	sub    %edx,%eax
f0123f0b:	01 d8                	add    %ebx,%eax
f0123f0d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123f12:	39 c1                	cmp    %eax,%ecx
f0123f14:	74 17                	je     f0123f2d <test_kheap_phys_addr+0xa60>
f0123f16:	83 ec 04             	sub    $0x4,%esp
f0123f19:	68 80 ae 13 f0       	push   $0xf013ae80
f0123f1e:	68 42 08 00 00       	push   $0x842
f0123f23:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123f28:	e8 ce c2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f2d:	e8 0a fe fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123f32:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123f35:	74 17                	je     f0123f4e <test_kheap_phys_addr+0xa81>
f0123f37:	83 ec 04             	sub    $0x4,%esp
f0123f3a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0123f3f:	68 43 08 00 00       	push   $0x843
f0123f44:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123f49:	e8 ad c2 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f4e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123f51:	e8 fb 8a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0123f56:	29 c3                	sub    %eax,%ebx
f0123f58:	89 d8                	mov    %ebx,%eax
f0123f5a:	83 f8 04             	cmp    $0x4,%eax
f0123f5d:	74 17                	je     f0123f76 <test_kheap_phys_addr+0xaa9>
f0123f5f:	83 ec 04             	sub    $0x4,%esp
f0123f62:	68 1c ae 13 f0       	push   $0xf013ae1c
f0123f67:	68 44 08 00 00       	push   $0x844
f0123f6c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0123f71:	e8 85 c2 fd ff       	call   f01001fb <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123f76:	89 e0                	mov    %esp,%eax
f0123f78:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123f7a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123f81:	10 00 00 
f0123f84:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123f8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f8f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123f95:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123f9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fa0:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123fa6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123fac:	29 d0                	sub    %edx,%eax
f0123fae:	89 c1                	mov    %eax,%ecx
f0123fb0:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123fb7:	10 00 00 
f0123fba:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123fbf:	0f b6 d0             	movzbl %al,%edx
f0123fc2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123fc8:	01 d0                	add    %edx,%eax
f0123fca:	48                   	dec    %eax
f0123fcb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123fd1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123fd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fdc:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123fe2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123fe8:	29 d0                	sub    %edx,%eax
f0123fea:	01 c1                	add    %eax,%ecx
f0123fec:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123ff3:	10 00 00 
f0123ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123ffb:	0f b6 c0             	movzbl %al,%eax
f0123ffe:	c1 e0 04             	shl    $0x4,%eax
f0124001:	89 c2                	mov    %eax,%edx
f0124003:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124009:	01 d0                	add    %edx,%eax
f012400b:	48                   	dec    %eax
f012400c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124012:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124018:	ba 00 00 00 00       	mov    $0x0,%edx
f012401d:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124023:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124029:	29 d0                	sub    %edx,%eax
f012402b:	01 c8                	add    %ecx,%eax
f012402d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124032:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124038:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012403f:	10 00 00 
f0124042:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124048:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012404d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124053:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124059:	ba 00 00 00 00       	mov    $0x0,%edx
f012405e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124064:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012406a:	29 d0                	sub    %edx,%eax
f012406c:	89 c1                	mov    %eax,%ecx
f012406e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124075:	10 00 00 
f0124078:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012407d:	0f b6 d0             	movzbl %al,%edx
f0124080:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124086:	01 d0                	add    %edx,%eax
f0124088:	48                   	dec    %eax
f0124089:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012408f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124095:	ba 00 00 00 00       	mov    $0x0,%edx
f012409a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01240a0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01240a6:	29 d0                	sub    %edx,%eax
f01240a8:	01 c1                	add    %eax,%ecx
f01240aa:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01240b1:	10 00 00 
f01240b4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01240b9:	0f b6 c0             	movzbl %al,%eax
f01240bc:	c1 e0 04             	shl    $0x4,%eax
f01240bf:	89 c2                	mov    %eax,%edx
f01240c1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01240c7:	01 d0                	add    %edx,%eax
f01240c9:	48                   	dec    %eax
f01240ca:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01240d0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01240d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01240db:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01240e1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01240e7:	29 d0                	sub    %edx,%eax
f01240e9:	01 c8                	add    %ecx,%eax
f01240eb:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01240f0:	c1 e8 0c             	shr    $0xc,%eax
f01240f3:	89 c2                	mov    %eax,%edx
f01240f5:	4a                   	dec    %edx
f01240f6:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f01240fc:	c1 e0 02             	shl    $0x2,%eax
f01240ff:	8d 50 03             	lea    0x3(%eax),%edx
f0124102:	b8 10 00 00 00       	mov    $0x10,%eax
f0124107:	48                   	dec    %eax
f0124108:	01 d0                	add    %edx,%eax
f012410a:	bf 10 00 00 00       	mov    $0x10,%edi
f012410f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124114:	f7 f7                	div    %edi
f0124116:	6b c0 10             	imul   $0x10,%eax,%eax
f0124119:	29 c4                	sub    %eax,%esp
f012411b:	89 e0                	mov    %esp,%eax
f012411d:	83 c0 03             	add    $0x3,%eax
f0124120:	c1 e8 02             	shr    $0x2,%eax
f0124123:	c1 e0 02             	shl    $0x2,%eax
f0124126:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f012412c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124133:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012413a:	10 00 00 
f012413d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124143:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124148:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012414e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124154:	ba 00 00 00 00       	mov    $0x0,%edx
f0124159:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012415f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124165:	29 d0                	sub    %edx,%eax
f0124167:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012416c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012416f:	eb 29                	jmp    f012419a <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124171:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124174:	8d 43 01             	lea    0x1(%ebx),%eax
f0124177:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012417a:	83 ec 0c             	sub    $0xc,%esp
f012417d:	ff 75 e0             	pushl  -0x20(%ebp)
f0124180:	e8 ac 38 fe ff       	call   f0107a31 <kheap_physical_address>
f0124185:	83 c4 10             	add    $0x10,%esp
f0124188:	89 c2                	mov    %eax,%edx
f012418a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124190:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124193:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f012419a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012419d:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01241a3:	72 cc                	jb     f0124171 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01241a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01241a8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01241ae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01241b5:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01241bc:	10 00 00 
f01241bf:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01241c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241ca:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01241d0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01241d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01241db:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01241e1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01241e7:	29 d0                	sub    %edx,%eax
f01241e9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01241ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01241f1:	e9 ab 00 00 00       	jmp    f01242a1 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01241f6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01241fb:	83 ec 04             	sub    $0x4,%esp
f01241fe:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124204:	52                   	push   %edx
f0124205:	ff 75 e0             	pushl  -0x20(%ebp)
f0124208:	50                   	push   %eax
f0124209:	e8 cc 27 fe ff       	call   f01069da <get_page_table>
f012420e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124211:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124217:	85 c0                	test   %eax,%eax
f0124219:	75 17                	jne    f0124232 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012421b:	83 ec 04             	sub    $0x4,%esp
f012421e:	68 3c b7 13 f0       	push   $0xf013b73c
f0124223:	68 59 08 00 00       	push   $0x859
f0124228:	68 9a ad 13 f0       	push   $0xf013ad9a
f012422d:	e8 c9 bf fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124232:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124235:	c1 e8 0c             	shr    $0xc,%eax
f0124238:	25 ff 03 00 00       	and    $0x3ff,%eax
f012423d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124240:	eb 4b                	jmp    f012428d <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124242:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124248:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012424b:	c1 e2 02             	shl    $0x2,%edx
f012424e:	01 d0                	add    %edx,%eax
f0124250:	8b 00                	mov    (%eax),%eax
f0124252:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124257:	89 c1                	mov    %eax,%ecx
f0124259:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012425f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124262:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124265:	39 c1                	cmp    %eax,%ecx
f0124267:	74 17                	je     f0124280 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124269:	83 ec 04             	sub    $0x4,%esp
f012426c:	68 95 b7 13 f0       	push   $0xf013b795
f0124271:	68 60 08 00 00       	push   $0x860
f0124276:	68 9a ad 13 f0       	push   $0xf013ad9a
f012427b:	e8 7b bf fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f0124280:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124287:	ff 45 dc             	incl   -0x24(%ebp)
f012428a:	ff 45 e4             	incl   -0x1c(%ebp)
f012428d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124290:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124296:	7d 09                	jge    f01242a1 <test_kheap_phys_addr+0xdd4>
f0124298:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012429f:	7e a1                	jle    f0124242 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01242a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01242a4:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01242aa:	0f 82 46 ff ff ff    	jb     f01241f6 <test_kheap_phys_addr+0xd29>
f01242b0:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01242b2:	83 ec 0c             	sub    $0xc,%esp
f01242b5:	68 b4 b7 13 f0       	push   $0xf013b7b4
f01242ba:	e8 c3 c9 fd ff       	call   f0100c82 <cprintf>
f01242bf:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01242c2:	e8 8a 87 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01242c7:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01242cd:	e8 6a fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01242d2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f01242d8:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01242de:	83 ec 0c             	sub    $0xc,%esp
f01242e1:	50                   	push   %eax
f01242e2:	e8 f7 35 fe ff       	call   f01078de <kfree>
f01242e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242ea:	e8 4d fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01242ef:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01242f5:	74 17                	je     f012430e <test_kheap_phys_addr+0xe41>
f01242f7:	83 ec 04             	sub    $0x4,%esp
f01242fa:	68 b4 ad 13 f0       	push   $0xf013adb4
f01242ff:	68 6e 08 00 00       	push   $0x86e
f0124304:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124309:	e8 ed be fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012430e:	e8 3e 87 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124313:	89 c2                	mov    %eax,%edx
f0124315:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012431b:	29 c2                	sub    %eax,%edx
f012431d:	89 d0                	mov    %edx,%eax
f012431f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124324:	74 17                	je     f012433d <test_kheap_phys_addr+0xe70>
f0124326:	83 ec 04             	sub    $0x4,%esp
f0124329:	68 24 b5 13 f0       	push   $0xf013b524
f012432e:	68 6f 08 00 00       	push   $0x86f
f0124333:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124338:	e8 be be fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012433d:	e8 0f 87 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124342:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124348:	e8 ef f9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012434d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124353:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124359:	83 ec 0c             	sub    $0xc,%esp
f012435c:	50                   	push   %eax
f012435d:	e8 7c 35 fe ff       	call   f01078de <kfree>
f0124362:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124365:	e8 d2 f9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012436a:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124370:	74 17                	je     f0124389 <test_kheap_phys_addr+0xebc>
f0124372:	83 ec 04             	sub    $0x4,%esp
f0124375:	68 b4 ad 13 f0       	push   $0xf013adb4
f012437a:	68 75 08 00 00       	push   $0x875
f012437f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124384:	e8 72 be fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124389:	e8 c3 86 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012438e:	89 c2                	mov    %eax,%edx
f0124390:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124396:	29 c2                	sub    %eax,%edx
f0124398:	89 d0                	mov    %edx,%eax
f012439a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012439f:	74 17                	je     f01243b8 <test_kheap_phys_addr+0xeeb>
f01243a1:	83 ec 04             	sub    $0x4,%esp
f01243a4:	68 24 b5 13 f0       	push   $0xf013b524
f01243a9:	68 76 08 00 00       	push   $0x876
f01243ae:	68 9a ad 13 f0       	push   $0xf013ad9a
f01243b3:	e8 43 be fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01243b8:	e8 94 86 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01243bd:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243c3:	e8 74 f9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01243c8:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01243ce:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01243d4:	83 ec 0c             	sub    $0xc,%esp
f01243d7:	50                   	push   %eax
f01243d8:	e8 01 35 fe ff       	call   f01078de <kfree>
f01243dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243e0:	e8 57 f9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01243e5:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01243eb:	74 17                	je     f0124404 <test_kheap_phys_addr+0xf37>
f01243ed:	83 ec 04             	sub    $0x4,%esp
f01243f0:	68 b4 ad 13 f0       	push   $0xf013adb4
f01243f5:	68 7c 08 00 00       	push   $0x87c
f01243fa:	68 9a ad 13 f0       	push   $0xf013ad9a
f01243ff:	e8 f7 bd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124404:	e8 48 86 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124409:	89 c2                	mov    %eax,%edx
f012440b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124411:	29 c2                	sub    %eax,%edx
f0124413:	89 d0                	mov    %edx,%eax
f0124415:	3d 00 06 00 00       	cmp    $0x600,%eax
f012441a:	74 17                	je     f0124433 <test_kheap_phys_addr+0xf66>
f012441c:	83 ec 04             	sub    $0x4,%esp
f012441f:	68 24 b5 13 f0       	push   $0xf013b524
f0124424:	68 7d 08 00 00       	push   $0x87d
f0124429:	68 9a ad 13 f0       	push   $0xf013ad9a
f012442e:	e8 c8 bd fd ff       	call   f01001fb <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124433:	89 e0                	mov    %esp,%eax
f0124435:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124437:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012443e:	10 00 00 
f0124441:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124447:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012444c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124452:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124458:	ba 00 00 00 00       	mov    $0x0,%edx
f012445d:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124463:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124469:	29 d0                	sub    %edx,%eax
f012446b:	89 c1                	mov    %eax,%ecx
f012446d:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124474:	10 00 00 
f0124477:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012447c:	0f b6 d0             	movzbl %al,%edx
f012447f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124485:	01 d0                	add    %edx,%eax
f0124487:	48                   	dec    %eax
f0124488:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012448e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124494:	ba 00 00 00 00       	mov    $0x0,%edx
f0124499:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012449f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01244a5:	29 d0                	sub    %edx,%eax
f01244a7:	01 c1                	add    %eax,%ecx
f01244a9:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01244b0:	10 00 00 
f01244b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01244b8:	0f b6 c0             	movzbl %al,%eax
f01244bb:	c1 e0 04             	shl    $0x4,%eax
f01244be:	89 c2                	mov    %eax,%edx
f01244c0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01244c6:	01 d0                	add    %edx,%eax
f01244c8:	48                   	dec    %eax
f01244c9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01244cf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01244d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01244da:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01244e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01244e6:	29 d0                	sub    %edx,%eax
f01244e8:	01 c8                	add    %ecx,%eax
f01244ea:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01244ef:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01244f5:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01244fc:	10 00 00 
f01244ff:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124505:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012450a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124510:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124516:	ba 00 00 00 00       	mov    $0x0,%edx
f012451b:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124521:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124527:	29 d0                	sub    %edx,%eax
f0124529:	89 c1                	mov    %eax,%ecx
f012452b:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124532:	10 00 00 
f0124535:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012453a:	0f b6 d0             	movzbl %al,%edx
f012453d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124543:	01 d0                	add    %edx,%eax
f0124545:	48                   	dec    %eax
f0124546:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f012454c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124552:	ba 00 00 00 00       	mov    $0x0,%edx
f0124557:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f012455d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124563:	29 d0                	sub    %edx,%eax
f0124565:	01 c1                	add    %eax,%ecx
f0124567:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012456e:	10 00 00 
f0124571:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124576:	0f b6 c0             	movzbl %al,%eax
f0124579:	c1 e0 04             	shl    $0x4,%eax
f012457c:	89 c2                	mov    %eax,%edx
f012457e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124584:	01 d0                	add    %edx,%eax
f0124586:	48                   	dec    %eax
f0124587:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012458d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124593:	ba 00 00 00 00       	mov    $0x0,%edx
f0124598:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012459e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01245a4:	29 d0                	sub    %edx,%eax
f01245a6:	01 c8                	add    %ecx,%eax
f01245a8:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01245ad:	c1 e8 0c             	shr    $0xc,%eax
f01245b0:	89 c2                	mov    %eax,%edx
f01245b2:	4a                   	dec    %edx
f01245b3:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f01245b9:	c1 e0 02             	shl    $0x2,%eax
f01245bc:	8d 50 03             	lea    0x3(%eax),%edx
f01245bf:	b8 10 00 00 00       	mov    $0x10,%eax
f01245c4:	48                   	dec    %eax
f01245c5:	01 d0                	add    %edx,%eax
f01245c7:	bf 10 00 00 00       	mov    $0x10,%edi
f01245cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01245d1:	f7 f7                	div    %edi
f01245d3:	6b c0 10             	imul   $0x10,%eax,%eax
f01245d6:	29 c4                	sub    %eax,%esp
f01245d8:	89 e0                	mov    %esp,%eax
f01245da:	83 c0 03             	add    $0x3,%eax
f01245dd:	c1 e8 02             	shr    $0x2,%eax
f01245e0:	c1 e0 02             	shl    $0x2,%eax
f01245e3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f01245e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01245f0:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01245f7:	10 00 00 
f01245fa:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124600:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124605:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012460b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124611:	ba 00 00 00 00       	mov    $0x0,%edx
f0124616:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012461c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124622:	29 d0                	sub    %edx,%eax
f0124624:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124629:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012462c:	eb 29                	jmp    f0124657 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f012462e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124631:	8d 43 01             	lea    0x1(%ebx),%eax
f0124634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124637:	83 ec 0c             	sub    $0xc,%esp
f012463a:	ff 75 d8             	pushl  -0x28(%ebp)
f012463d:	e8 ef 33 fe ff       	call   f0107a31 <kheap_physical_address>
f0124642:	83 c4 10             	add    $0x10,%esp
f0124645:	89 c2                	mov    %eax,%edx
f0124647:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012464d:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124650:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124657:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012465a:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124660:	72 cc                	jb     f012462e <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124662:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124665:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f012466b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124672:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124679:	10 00 00 
f012467c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124682:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124687:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012468d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124693:	ba 00 00 00 00       	mov    $0x0,%edx
f0124698:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012469e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01246a4:	29 d0                	sub    %edx,%eax
f01246a6:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01246ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01246ae:	e9 ab 00 00 00       	jmp    f012475e <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01246b3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01246b8:	83 ec 04             	sub    $0x4,%esp
f01246bb:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f01246c1:	52                   	push   %edx
f01246c2:	ff 75 d8             	pushl  -0x28(%ebp)
f01246c5:	50                   	push   %eax
f01246c6:	e8 0f 23 fe ff       	call   f01069da <get_page_table>
f01246cb:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01246ce:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01246d4:	85 c0                	test   %eax,%eax
f01246d6:	75 17                	jne    f01246ef <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01246d8:	83 ec 04             	sub    $0x4,%esp
f01246db:	68 3c b7 13 f0       	push   $0xf013b73c
f01246e0:	68 93 08 00 00       	push   $0x893
f01246e5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01246ea:	e8 0c bb fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01246ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01246f2:	c1 e8 0c             	shr    $0xc,%eax
f01246f5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01246fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01246fd:	eb 4b                	jmp    f012474a <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01246ff:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124705:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124708:	c1 e2 02             	shl    $0x2,%edx
f012470b:	01 d0                	add    %edx,%eax
f012470d:	8b 00                	mov    (%eax),%eax
f012470f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124714:	89 c1                	mov    %eax,%ecx
f0124716:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012471c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012471f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124722:	39 c1                	cmp    %eax,%ecx
f0124724:	74 17                	je     f012473d <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124726:	83 ec 04             	sub    $0x4,%esp
f0124729:	68 95 b7 13 f0       	push   $0xf013b795
f012472e:	68 9a 08 00 00       	push   $0x89a
f0124733:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124738:	e8 be ba fd ff       	call   f01001fb <_panic>
				}
				va += PAGE_SIZE;
f012473d:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124744:	ff 45 d4             	incl   -0x2c(%ebp)
f0124747:	ff 45 e4             	incl   -0x1c(%ebp)
f012474a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012474d:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124753:	7d 09                	jge    f012475e <test_kheap_phys_addr+0x1291>
f0124755:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f012475c:	7e a1                	jle    f01246ff <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012475e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124761:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124767:	0f 82 46 ff ff ff    	jb     f01246b3 <test_kheap_phys_addr+0x11e6>
f012476d:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f012476f:	83 ec 0c             	sub    $0xc,%esp
f0124772:	68 25 af 13 f0       	push   $0xf013af25
f0124777:	e8 06 c5 fd ff       	call   f0100c82 <cprintf>
f012477c:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f012477f:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124786:	10 00 00 
f0124789:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012478f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124794:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012479a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01247a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01247a5:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01247ab:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01247b1:	29 d0                	sub    %edx,%eax
f01247b3:	89 c1                	mov    %eax,%ecx
f01247b5:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01247bc:	10 00 00 
f01247bf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01247c4:	0f b6 d0             	movzbl %al,%edx
f01247c7:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01247cd:	01 d0                	add    %edx,%eax
f01247cf:	48                   	dec    %eax
f01247d0:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01247d6:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01247dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01247e1:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01247e7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01247ed:	29 d0                	sub    %edx,%eax
f01247ef:	01 c1                	add    %eax,%ecx
f01247f1:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01247f8:	10 00 00 
f01247fb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124800:	0f b6 c0             	movzbl %al,%eax
f0124803:	c1 e0 04             	shl    $0x4,%eax
f0124806:	89 c2                	mov    %eax,%edx
f0124808:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012480e:	01 d0                	add    %edx,%eax
f0124810:	48                   	dec    %eax
f0124811:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124817:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012481d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124822:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124828:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012482e:	29 d0                	sub    %edx,%eax
f0124830:	01 c8                	add    %ecx,%eax
f0124832:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124837:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f012483d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124844:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012484a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012484d:	eb 0a                	jmp    f0124859 <test_kheap_phys_addr+0x138c>
		{
			i++;
f012484f:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124852:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124859:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124860:	76 ed                	jbe    f012484f <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124862:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124865:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f012486b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124872:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124878:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012487b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124882:	e9 cc 00 00 00       	jmp    f0124953 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124887:	8b 55 c0             	mov    -0x40(%ebp),%edx
f012488a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012488f:	83 ec 04             	sub    $0x4,%esp
f0124892:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124898:	51                   	push   %ecx
f0124899:	52                   	push   %edx
f012489a:	50                   	push   %eax
f012489b:	e8 3a 21 fe ff       	call   f01069da <get_page_table>
f01248a0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01248a3:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01248a9:	85 c0                	test   %eax,%eax
f01248ab:	75 17                	jne    f01248c4 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01248ad:	83 ec 04             	sub    $0x4,%esp
f01248b0:	68 3c b7 13 f0       	push   $0xf013b73c
f01248b5:	68 b6 08 00 00       	push   $0x8b6
f01248ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f01248bf:	e8 37 b9 fd ff       	call   f01001fb <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01248c4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01248cb:	eb 67                	jmp    f0124934 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01248cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01248d0:	c1 e0 0c             	shl    $0xc,%eax
f01248d3:	89 c2                	mov    %eax,%edx
f01248d5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01248db:	01 d0                	add    %edx,%eax
f01248dd:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01248e3:	83 ec 0c             	sub    $0xc,%esp
f01248e6:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01248ec:	e8 40 31 fe ff       	call   f0107a31 <kheap_physical_address>
f01248f1:	83 c4 10             	add    $0x10,%esp
f01248f4:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01248fa:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124900:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124903:	c1 e2 02             	shl    $0x2,%edx
f0124906:	01 d0                	add    %edx,%eax
f0124908:	8b 00                	mov    (%eax),%eax
f012490a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012490f:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124915:	74 17                	je     f012492e <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124917:	83 ec 04             	sub    $0x4,%esp
f012491a:	68 95 b7 13 f0       	push   $0xf013b795
f012491f:	68 c0 08 00 00       	push   $0x8c0
f0124924:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124929:	e8 cd b8 fd ff       	call   f01001fb <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012492e:	ff 45 cc             	incl   -0x34(%ebp)
f0124931:	ff 45 e4             	incl   -0x1c(%ebp)
f0124934:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124937:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f012493d:	7d 09                	jge    f0124948 <test_kheap_phys_addr+0x147b>
f012493f:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124946:	7e 85                	jle    f01248cd <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124948:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f012494f:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124953:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124957:	0f 88 2a ff ff ff    	js     f0124887 <test_kheap_phys_addr+0x13ba>
f012495d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124961:	7f 0d                	jg     f0124970 <test_kheap_phys_addr+0x14a3>
f0124963:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f012496a:	0f 86 17 ff ff ff    	jbe    f0124887 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124970:	83 ec 0c             	sub    $0xc,%esp
f0124973:	68 7e af 13 f0       	push   $0xf013af7e
f0124978:	e8 05 c3 fd ff       	call   f0100c82 <cprintf>
f012497d:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124980:	83 ec 0c             	sub    $0xc,%esp
f0124983:	68 e8 b7 13 f0       	push   $0xf013b7e8
f0124988:	e8 f5 c2 fd ff       	call   f0100c82 <cprintf>
f012498d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124990:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124995:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124998:	5b                   	pop    %ebx
f0124999:	5e                   	pop    %esi
f012499a:	5f                   	pop    %edi
f012499b:	5d                   	pop    %ebp
f012499c:	c3                   	ret    

f012499d <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f012499d:	55                   	push   %ebp
f012499e:	89 e5                	mov    %esp,%ebp
f01249a0:	57                   	push   %edi
f01249a1:	56                   	push   %esi
f01249a2:	53                   	push   %ebx
f01249a3:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01249a9:	89 e0                	mov    %esp,%eax
f01249ab:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01249ad:	83 ec 0c             	sub    $0xc,%esp
f01249b0:	68 dc ac 13 f0       	push   $0xf013acdc
f01249b5:	e8 c8 c2 fd ff       	call   f0100c82 <cprintf>
f01249ba:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01249bd:	83 ec 0c             	sub    $0xc,%esp
f01249c0:	68 0c ad 13 f0       	push   $0xf013ad0c
f01249c5:	e8 b8 c2 fd ff       	call   f0100c82 <cprintf>
f01249ca:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01249cd:	83 ec 0c             	sub    $0xc,%esp
f01249d0:	68 dc ac 13 f0       	push   $0xf013acdc
f01249d5:	e8 a8 c2 fd ff       	call   f0100c82 <cprintf>
f01249da:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01249dd:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01249e1:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01249e5:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01249eb:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01249f1:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01249f8:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01249ff:	e8 4d 80 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124a04:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124a07:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124a0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124a12:	b8 00 00 00 00       	mov    $0x0,%eax
f0124a17:	89 d7                	mov    %edx,%edi
f0124a19:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124a1b:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124a21:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124a26:	b8 00 00 00 00       	mov    $0x0,%eax
f0124a2b:	89 d7                	mov    %edx,%edi
f0124a2d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124a2f:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124a35:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124a3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0124a3f:	89 d7                	mov    %edx,%edi
f0124a41:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124a43:	e8 09 80 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124a48:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a4b:	e8 ec f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124a50:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124a53:	83 ec 0c             	sub    $0xc,%esp
f0124a56:	68 00 fc 1f 00       	push   $0x1ffc00
f0124a5b:	e8 b3 2d fe ff       	call   f0107813 <kmalloc>
f0124a60:	83 c4 10             	add    $0x10,%esp
f0124a63:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124a69:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124a6f:	89 c1                	mov    %eax,%ecx
f0124a71:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124a78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124a7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a80:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124a83:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a8b:	f7 75 b4             	divl   -0x4c(%ebp)
f0124a8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124a91:	29 d0                	sub    %edx,%eax
f0124a93:	89 c3                	mov    %eax,%ebx
f0124a95:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124a9c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124aa1:	0f b6 d0             	movzbl %al,%edx
f0124aa4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124aa7:	01 d0                	add    %edx,%eax
f0124aa9:	48                   	dec    %eax
f0124aaa:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124aad:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ab5:	f7 75 ac             	divl   -0x54(%ebp)
f0124ab8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124abb:	29 d0                	sub    %edx,%eax
f0124abd:	01 c3                	add    %eax,%ebx
f0124abf:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124ac6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124acb:	0f b6 c0             	movzbl %al,%eax
f0124ace:	c1 e0 04             	shl    $0x4,%eax
f0124ad1:	89 c2                	mov    %eax,%edx
f0124ad3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124ad6:	01 d0                	add    %edx,%eax
f0124ad8:	48                   	dec    %eax
f0124ad9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124adc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ae4:	f7 75 a4             	divl   -0x5c(%ebp)
f0124ae7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124aea:	29 d0                	sub    %edx,%eax
f0124aec:	01 d8                	add    %ebx,%eax
f0124aee:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124af3:	39 c1                	cmp    %eax,%ecx
f0124af5:	74 17                	je     f0124b0e <test_kheap_virt_addr+0x171>
f0124af7:	83 ec 04             	sub    $0x4,%esp
f0124afa:	68 80 ae 13 f0       	push   $0xf013ae80
f0124aff:	68 ed 08 00 00       	push   $0x8ed
f0124b04:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124b09:	e8 ed b6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b0e:	e8 29 f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124b13:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124b16:	74 17                	je     f0124b2f <test_kheap_virt_addr+0x192>
f0124b18:	83 ec 04             	sub    $0x4,%esp
f0124b1b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0124b20:	68 ee 08 00 00       	push   $0x8ee
f0124b25:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124b2a:	e8 cc b6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b2f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124b32:	e8 1a 7f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124b37:	29 c3                	sub    %eax,%ebx
f0124b39:	89 d8                	mov    %ebx,%eax
f0124b3b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b40:	74 17                	je     f0124b59 <test_kheap_virt_addr+0x1bc>
f0124b42:	83 ec 04             	sub    $0x4,%esp
f0124b45:	68 1c ae 13 f0       	push   $0xf013ae1c
f0124b4a:	68 ef 08 00 00       	push   $0x8ef
f0124b4f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124b54:	e8 a2 b6 fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124b59:	e8 f3 7e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124b5e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b61:	e8 d6 f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124b66:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124b69:	83 ec 0c             	sub    $0xc,%esp
f0124b6c:	68 00 fc 1f 00       	push   $0x1ffc00
f0124b71:	e8 9d 2c fe ff       	call   f0107813 <kmalloc>
f0124b76:	83 c4 10             	add    $0x10,%esp
f0124b79:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b7f:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124b85:	89 c1                	mov    %eax,%ecx
f0124b87:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124b8e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124b91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b96:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124b99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ba1:	f7 75 9c             	divl   -0x64(%ebp)
f0124ba4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124ba7:	29 d0                	sub    %edx,%eax
f0124ba9:	89 c3                	mov    %eax,%ebx
f0124bab:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124bb2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124bb7:	0f b6 d0             	movzbl %al,%edx
f0124bba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124bbd:	01 d0                	add    %edx,%eax
f0124bbf:	48                   	dec    %eax
f0124bc0:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124bc3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124bc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bcb:	f7 75 94             	divl   -0x6c(%ebp)
f0124bce:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124bd1:	29 d0                	sub    %edx,%eax
f0124bd3:	01 c3                	add    %eax,%ebx
f0124bd5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124bdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124be1:	0f b6 c0             	movzbl %al,%eax
f0124be4:	c1 e0 04             	shl    $0x4,%eax
f0124be7:	89 c2                	mov    %eax,%edx
f0124be9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124bec:	01 d0                	add    %edx,%eax
f0124bee:	48                   	dec    %eax
f0124bef:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124bf2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124bf5:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bfa:	f7 75 8c             	divl   -0x74(%ebp)
f0124bfd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124c00:	29 d0                	sub    %edx,%eax
f0124c02:	01 d8                	add    %ebx,%eax
f0124c04:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124c09:	39 c1                	cmp    %eax,%ecx
f0124c0b:	74 17                	je     f0124c24 <test_kheap_virt_addr+0x287>
f0124c0d:	83 ec 04             	sub    $0x4,%esp
f0124c10:	68 80 ae 13 f0       	push   $0xf013ae80
f0124c15:	68 f5 08 00 00       	push   $0x8f5
f0124c1a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124c1f:	e8 d7 b5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c24:	e8 13 f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124c29:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124c2c:	74 17                	je     f0124c45 <test_kheap_virt_addr+0x2a8>
f0124c2e:	83 ec 04             	sub    $0x4,%esp
f0124c31:	68 b4 ad 13 f0       	push   $0xf013adb4
f0124c36:	68 f6 08 00 00       	push   $0x8f6
f0124c3b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124c40:	e8 b6 b5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124c45:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124c48:	e8 04 7e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124c4d:	29 c3                	sub    %eax,%ebx
f0124c4f:	89 d8                	mov    %ebx,%eax
f0124c51:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124c56:	74 17                	je     f0124c6f <test_kheap_virt_addr+0x2d2>
f0124c58:	83 ec 04             	sub    $0x4,%esp
f0124c5b:	68 1c ae 13 f0       	push   $0xf013ae1c
f0124c60:	68 f7 08 00 00       	push   $0x8f7
f0124c65:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124c6a:	e8 8c b5 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124c6f:	e8 dd 7d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124c74:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c77:	e8 c0 f0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124c7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124c7f:	83 ec 0c             	sub    $0xc,%esp
f0124c82:	68 00 08 00 00       	push   $0x800
f0124c87:	e8 87 2b fe ff       	call   f0107813 <kmalloc>
f0124c8c:	83 c4 10             	add    $0x10,%esp
f0124c8f:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c95:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124c9b:	89 c1                	mov    %eax,%ecx
f0124c9d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124ca4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124ca7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cac:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124caf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124cb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cb7:	f7 75 84             	divl   -0x7c(%ebp)
f0124cba:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124cbd:	29 d0                	sub    %edx,%eax
f0124cbf:	89 c3                	mov    %eax,%ebx
f0124cc1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124cc8:	10 00 00 
f0124ccb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124cd0:	0f b6 d0             	movzbl %al,%edx
f0124cd3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124cd9:	01 d0                	add    %edx,%eax
f0124cdb:	48                   	dec    %eax
f0124cdc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124ce2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ced:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124cf3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124cf9:	29 d0                	sub    %edx,%eax
f0124cfb:	01 c3                	add    %eax,%ebx
f0124cfd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124d04:	10 00 00 
f0124d07:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124d0c:	0f b6 c0             	movzbl %al,%eax
f0124d0f:	c1 e0 04             	shl    $0x4,%eax
f0124d12:	89 c2                	mov    %eax,%edx
f0124d14:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124d1a:	01 d0                	add    %edx,%eax
f0124d1c:	48                   	dec    %eax
f0124d1d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124d23:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124d29:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d2e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124d34:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124d3a:	29 d0                	sub    %edx,%eax
f0124d3c:	01 d8                	add    %ebx,%eax
f0124d3e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124d43:	39 c1                	cmp    %eax,%ecx
f0124d45:	74 17                	je     f0124d5e <test_kheap_virt_addr+0x3c1>
f0124d47:	83 ec 04             	sub    $0x4,%esp
f0124d4a:	68 80 ae 13 f0       	push   $0xf013ae80
f0124d4f:	68 fd 08 00 00       	push   $0x8fd
f0124d54:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124d59:	e8 9d b4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d5e:	e8 d9 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124d63:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124d66:	74 17                	je     f0124d7f <test_kheap_virt_addr+0x3e2>
f0124d68:	83 ec 04             	sub    $0x4,%esp
f0124d6b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0124d70:	68 fe 08 00 00       	push   $0x8fe
f0124d75:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124d7a:	e8 7c b4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d7f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d82:	e8 ca 7c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124d87:	29 c3                	sub    %eax,%ebx
f0124d89:	89 d8                	mov    %ebx,%eax
f0124d8b:	83 f8 01             	cmp    $0x1,%eax
f0124d8e:	74 17                	je     f0124da7 <test_kheap_virt_addr+0x40a>
f0124d90:	83 ec 04             	sub    $0x4,%esp
f0124d93:	68 1c ae 13 f0       	push   $0xf013ae1c
f0124d98:	68 ff 08 00 00       	push   $0x8ff
f0124d9d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124da2:	e8 54 b4 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124da7:	e8 a5 7c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124dac:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124daf:	e8 88 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124db4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124db7:	83 ec 0c             	sub    $0xc,%esp
f0124dba:	68 00 08 00 00       	push   $0x800
f0124dbf:	e8 4f 2a fe ff       	call   f0107813 <kmalloc>
f0124dc4:	83 c4 10             	add    $0x10,%esp
f0124dc7:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124dcd:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124dd3:	89 c1                	mov    %eax,%ecx
f0124dd5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124ddc:	10 00 00 
f0124ddf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124de5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124dea:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124df0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124df6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dfb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124e01:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124e07:	29 d0                	sub    %edx,%eax
f0124e09:	89 c3                	mov    %eax,%ebx
f0124e0b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124e12:	10 00 00 
f0124e15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124e1a:	0f b6 d0             	movzbl %al,%edx
f0124e1d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124e23:	01 d0                	add    %edx,%eax
f0124e25:	48                   	dec    %eax
f0124e26:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124e2c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124e32:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e37:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124e3d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124e43:	29 d0                	sub    %edx,%eax
f0124e45:	01 c3                	add    %eax,%ebx
f0124e47:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124e4e:	10 00 00 
f0124e51:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124e56:	0f b6 c0             	movzbl %al,%eax
f0124e59:	c1 e0 04             	shl    $0x4,%eax
f0124e5c:	89 c2                	mov    %eax,%edx
f0124e5e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124e64:	01 d0                	add    %edx,%eax
f0124e66:	48                   	dec    %eax
f0124e67:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124e6d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124e73:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e78:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124e7e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124e84:	29 d0                	sub    %edx,%eax
f0124e86:	01 d8                	add    %ebx,%eax
f0124e88:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124e8d:	39 c1                	cmp    %eax,%ecx
f0124e8f:	74 17                	je     f0124ea8 <test_kheap_virt_addr+0x50b>
f0124e91:	83 ec 04             	sub    $0x4,%esp
f0124e94:	68 80 ae 13 f0       	push   $0xf013ae80
f0124e99:	68 05 09 00 00       	push   $0x905
f0124e9e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124ea3:	e8 53 b3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ea8:	e8 8f ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124ead:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124eb0:	74 17                	je     f0124ec9 <test_kheap_virt_addr+0x52c>
f0124eb2:	83 ec 04             	sub    $0x4,%esp
f0124eb5:	68 b4 ad 13 f0       	push   $0xf013adb4
f0124eba:	68 06 09 00 00       	push   $0x906
f0124ebf:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124ec4:	e8 32 b3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ec9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ecc:	e8 80 7b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124ed1:	29 c3                	sub    %eax,%ebx
f0124ed3:	89 d8                	mov    %ebx,%eax
f0124ed5:	83 f8 01             	cmp    $0x1,%eax
f0124ed8:	74 17                	je     f0124ef1 <test_kheap_virt_addr+0x554>
f0124eda:	83 ec 04             	sub    $0x4,%esp
f0124edd:	68 1c ae 13 f0       	push   $0xf013ae1c
f0124ee2:	68 07 09 00 00       	push   $0x907
f0124ee7:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124eec:	e8 0a b3 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124ef1:	e8 5b 7b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0124ef6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ef9:	e8 3e ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124efe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124f01:	83 ec 0c             	sub    $0xc,%esp
f0124f04:	68 00 1c 00 00       	push   $0x1c00
f0124f09:	e8 05 29 fe ff       	call   f0107813 <kmalloc>
f0124f0e:	83 c4 10             	add    $0x10,%esp
f0124f11:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f17:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124f1d:	89 c1                	mov    %eax,%ecx
f0124f1f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124f26:	10 00 00 
f0124f29:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124f2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f34:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124f3a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124f40:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f45:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124f4b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124f51:	29 d0                	sub    %edx,%eax
f0124f53:	89 c3                	mov    %eax,%ebx
f0124f55:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124f5c:	10 00 00 
f0124f5f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124f64:	0f b6 d0             	movzbl %al,%edx
f0124f67:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124f6d:	01 d0                	add    %edx,%eax
f0124f6f:	48                   	dec    %eax
f0124f70:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124f76:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124f7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f81:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124f87:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124f8d:	29 d0                	sub    %edx,%eax
f0124f8f:	01 c3                	add    %eax,%ebx
f0124f91:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124f98:	10 00 00 
f0124f9b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124fa0:	0f b6 c0             	movzbl %al,%eax
f0124fa3:	c1 e0 04             	shl    $0x4,%eax
f0124fa6:	89 c2                	mov    %eax,%edx
f0124fa8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124fae:	01 d0                	add    %edx,%eax
f0124fb0:	48                   	dec    %eax
f0124fb1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124fb7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124fbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fc2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124fc8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124fce:	29 d0                	sub    %edx,%eax
f0124fd0:	01 d8                	add    %ebx,%eax
f0124fd2:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124fd7:	39 c1                	cmp    %eax,%ecx
f0124fd9:	74 17                	je     f0124ff2 <test_kheap_virt_addr+0x655>
f0124fdb:	83 ec 04             	sub    $0x4,%esp
f0124fde:	68 80 ae 13 f0       	push   $0xf013ae80
f0124fe3:	68 0d 09 00 00       	push   $0x90d
f0124fe8:	68 9a ad 13 f0       	push   $0xf013ad9a
f0124fed:	e8 09 b2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ff2:	e8 45 ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124ff7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124ffa:	74 17                	je     f0125013 <test_kheap_virt_addr+0x676>
f0124ffc:	83 ec 04             	sub    $0x4,%esp
f0124fff:	68 b4 ad 13 f0       	push   $0xf013adb4
f0125004:	68 0e 09 00 00       	push   $0x90e
f0125009:	68 9a ad 13 f0       	push   $0xf013ad9a
f012500e:	e8 e8 b1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125013:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125016:	e8 36 7a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012501b:	29 c3                	sub    %eax,%ebx
f012501d:	89 d8                	mov    %ebx,%eax
f012501f:	83 f8 02             	cmp    $0x2,%eax
f0125022:	74 17                	je     f012503b <test_kheap_virt_addr+0x69e>
f0125024:	83 ec 04             	sub    $0x4,%esp
f0125027:	68 1c ae 13 f0       	push   $0xf013ae1c
f012502c:	68 0f 09 00 00       	push   $0x90f
f0125031:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125036:	e8 c0 b1 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012503b:	e8 11 7a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125040:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125043:	e8 f4 ec fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125048:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012504b:	83 ec 0c             	sub    $0xc,%esp
f012504e:	68 00 fc 2f 00       	push   $0x2ffc00
f0125053:	e8 bb 27 fe ff       	call   f0107813 <kmalloc>
f0125058:	83 c4 10             	add    $0x10,%esp
f012505b:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125061:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125067:	89 c1                	mov    %eax,%ecx
f0125069:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125070:	10 00 00 
f0125073:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125079:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012507e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125084:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012508a:	ba 00 00 00 00       	mov    $0x0,%edx
f012508f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125095:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012509b:	29 d0                	sub    %edx,%eax
f012509d:	89 c3                	mov    %eax,%ebx
f012509f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01250a6:	10 00 00 
f01250a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01250ae:	0f b6 d0             	movzbl %al,%edx
f01250b1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01250b7:	01 d0                	add    %edx,%eax
f01250b9:	48                   	dec    %eax
f01250ba:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01250c0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01250c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01250cb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01250d1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01250d7:	29 d0                	sub    %edx,%eax
f01250d9:	01 c3                	add    %eax,%ebx
f01250db:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01250e2:	10 00 00 
f01250e5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01250ea:	0f b6 c0             	movzbl %al,%eax
f01250ed:	c1 e0 04             	shl    $0x4,%eax
f01250f0:	89 c2                	mov    %eax,%edx
f01250f2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01250f8:	01 d0                	add    %edx,%eax
f01250fa:	48                   	dec    %eax
f01250fb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125101:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125107:	ba 00 00 00 00       	mov    $0x0,%edx
f012510c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125112:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125118:	29 d0                	sub    %edx,%eax
f012511a:	01 d8                	add    %ebx,%eax
f012511c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125121:	39 c1                	cmp    %eax,%ecx
f0125123:	74 17                	je     f012513c <test_kheap_virt_addr+0x79f>
f0125125:	83 ec 04             	sub    $0x4,%esp
f0125128:	68 80 ae 13 f0       	push   $0xf013ae80
f012512d:	68 15 09 00 00       	push   $0x915
f0125132:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125137:	e8 bf b0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012513c:	e8 fb eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125141:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125144:	74 17                	je     f012515d <test_kheap_virt_addr+0x7c0>
f0125146:	83 ec 04             	sub    $0x4,%esp
f0125149:	68 b4 ad 13 f0       	push   $0xf013adb4
f012514e:	68 16 09 00 00       	push   $0x916
f0125153:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125158:	e8 9e b0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012515d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125160:	e8 ec 78 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125165:	29 c3                	sub    %eax,%ebx
f0125167:	89 d8                	mov    %ebx,%eax
f0125169:	3d 00 03 00 00       	cmp    $0x300,%eax
f012516e:	74 17                	je     f0125187 <test_kheap_virt_addr+0x7ea>
f0125170:	83 ec 04             	sub    $0x4,%esp
f0125173:	68 1c ae 13 f0       	push   $0xf013ae1c
f0125178:	68 17 09 00 00       	push   $0x917
f012517d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125182:	e8 74 b0 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125187:	e8 c5 78 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012518c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012518f:	e8 a8 eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125194:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125197:	83 ec 0c             	sub    $0xc,%esp
f012519a:	68 00 fc 5f 00       	push   $0x5ffc00
f012519f:	e8 6f 26 fe ff       	call   f0107813 <kmalloc>
f01251a4:	83 c4 10             	add    $0x10,%esp
f01251a7:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01251ad:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01251b3:	89 c1                	mov    %eax,%ecx
f01251b5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01251bc:	10 00 00 
f01251bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01251c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251ca:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01251d0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01251d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01251db:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01251e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01251e7:	29 d0                	sub    %edx,%eax
f01251e9:	89 c3                	mov    %eax,%ebx
f01251eb:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01251f2:	10 00 00 
f01251f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01251fa:	0f b6 d0             	movzbl %al,%edx
f01251fd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125203:	01 d0                	add    %edx,%eax
f0125205:	48                   	dec    %eax
f0125206:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012520c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125212:	ba 00 00 00 00       	mov    $0x0,%edx
f0125217:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012521d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125223:	29 d0                	sub    %edx,%eax
f0125225:	01 c3                	add    %eax,%ebx
f0125227:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012522e:	10 00 00 
f0125231:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125236:	0f b6 c0             	movzbl %al,%eax
f0125239:	c1 e0 04             	shl    $0x4,%eax
f012523c:	89 c2                	mov    %eax,%edx
f012523e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125244:	01 d0                	add    %edx,%eax
f0125246:	48                   	dec    %eax
f0125247:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012524d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125253:	ba 00 00 00 00       	mov    $0x0,%edx
f0125258:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012525e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125264:	29 d0                	sub    %edx,%eax
f0125266:	01 d8                	add    %ebx,%eax
f0125268:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012526d:	39 c1                	cmp    %eax,%ecx
f012526f:	74 17                	je     f0125288 <test_kheap_virt_addr+0x8eb>
f0125271:	83 ec 04             	sub    $0x4,%esp
f0125274:	68 80 ae 13 f0       	push   $0xf013ae80
f0125279:	68 1d 09 00 00       	push   $0x91d
f012527e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125283:	e8 73 af fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125288:	e8 af ea fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012528d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125290:	74 17                	je     f01252a9 <test_kheap_virt_addr+0x90c>
f0125292:	83 ec 04             	sub    $0x4,%esp
f0125295:	68 b4 ad 13 f0       	push   $0xf013adb4
f012529a:	68 1e 09 00 00       	push   $0x91e
f012529f:	68 9a ad 13 f0       	push   $0xf013ad9a
f01252a4:	e8 52 af fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252a9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01252ac:	e8 a0 77 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01252b1:	29 c3                	sub    %eax,%ebx
f01252b3:	89 d8                	mov    %ebx,%eax
f01252b5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01252ba:	74 17                	je     f01252d3 <test_kheap_virt_addr+0x936>
f01252bc:	83 ec 04             	sub    $0x4,%esp
f01252bf:	68 1c ae 13 f0       	push   $0xf013ae1c
f01252c4:	68 1f 09 00 00       	push   $0x91f
f01252c9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01252ce:	e8 28 af fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01252d3:	e8 79 77 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01252d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252db:	e8 5c ea fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01252e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01252e3:	83 ec 0c             	sub    $0xc,%esp
f01252e6:	68 00 38 00 00       	push   $0x3800
f01252eb:	e8 23 25 fe ff       	call   f0107813 <kmalloc>
f01252f0:	83 c4 10             	add    $0x10,%esp
f01252f3:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252f9:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01252ff:	89 c1                	mov    %eax,%ecx
f0125301:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125308:	10 00 00 
f012530b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125311:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125316:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012531c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125322:	ba 00 00 00 00       	mov    $0x0,%edx
f0125327:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012532d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125333:	29 d0                	sub    %edx,%eax
f0125335:	89 c3                	mov    %eax,%ebx
f0125337:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012533e:	10 00 00 
f0125341:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125346:	0f b6 d0             	movzbl %al,%edx
f0125349:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012534f:	01 d0                	add    %edx,%eax
f0125351:	48                   	dec    %eax
f0125352:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125358:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012535e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125363:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125369:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012536f:	29 d0                	sub    %edx,%eax
f0125371:	01 c3                	add    %eax,%ebx
f0125373:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012537a:	10 00 00 
f012537d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125382:	0f b6 c0             	movzbl %al,%eax
f0125385:	c1 e0 04             	shl    $0x4,%eax
f0125388:	89 c2                	mov    %eax,%edx
f012538a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125390:	01 d0                	add    %edx,%eax
f0125392:	48                   	dec    %eax
f0125393:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125399:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012539f:	ba 00 00 00 00       	mov    $0x0,%edx
f01253a4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01253aa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01253b0:	29 d0                	sub    %edx,%eax
f01253b2:	01 d8                	add    %ebx,%eax
f01253b4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01253b9:	39 c1                	cmp    %eax,%ecx
f01253bb:	74 17                	je     f01253d4 <test_kheap_virt_addr+0xa37>
f01253bd:	83 ec 04             	sub    $0x4,%esp
f01253c0:	68 80 ae 13 f0       	push   $0xf013ae80
f01253c5:	68 25 09 00 00       	push   $0x925
f01253ca:	68 9a ad 13 f0       	push   $0xf013ad9a
f01253cf:	e8 27 ae fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253d4:	e8 63 e9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01253d9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01253dc:	74 17                	je     f01253f5 <test_kheap_virt_addr+0xa58>
f01253de:	83 ec 04             	sub    $0x4,%esp
f01253e1:	68 b4 ad 13 f0       	push   $0xf013adb4
f01253e6:	68 26 09 00 00       	push   $0x926
f01253eb:	68 9a ad 13 f0       	push   $0xf013ad9a
f01253f0:	e8 06 ae fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253f5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01253f8:	e8 54 76 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01253fd:	29 c3                	sub    %eax,%ebx
f01253ff:	89 d8                	mov    %ebx,%eax
f0125401:	83 f8 04             	cmp    $0x4,%eax
f0125404:	74 17                	je     f012541d <test_kheap_virt_addr+0xa80>
f0125406:	83 ec 04             	sub    $0x4,%esp
f0125409:	68 1c ae 13 f0       	push   $0xf013ae1c
f012540e:	68 27 09 00 00       	push   $0x927
f0125413:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125418:	e8 de ad fd ff       	call   f01001fb <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012541d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125424:	10 00 00 
f0125427:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012542d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125432:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125438:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012543e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125443:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125449:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012544f:	29 d0                	sub    %edx,%eax
f0125451:	89 c1                	mov    %eax,%ecx
f0125453:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012545a:	10 00 00 
f012545d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125462:	0f b6 d0             	movzbl %al,%edx
f0125465:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012546b:	01 d0                	add    %edx,%eax
f012546d:	48                   	dec    %eax
f012546e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125474:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012547a:	ba 00 00 00 00       	mov    $0x0,%edx
f012547f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125485:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012548b:	29 d0                	sub    %edx,%eax
f012548d:	01 c1                	add    %eax,%ecx
f012548f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125496:	10 00 00 
f0125499:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012549e:	0f b6 c0             	movzbl %al,%eax
f01254a1:	c1 e0 04             	shl    $0x4,%eax
f01254a4:	89 c2                	mov    %eax,%edx
f01254a6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01254ac:	01 d0                	add    %edx,%eax
f01254ae:	48                   	dec    %eax
f01254af:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01254b5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01254bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01254c0:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01254c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01254cc:	29 d0                	sub    %edx,%eax
f01254ce:	01 c1                	add    %eax,%ecx
f01254d0:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01254d7:	10 00 00 
f01254da:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01254e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254e5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01254eb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01254f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01254f6:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01254fc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125502:	29 d0                	sub    %edx,%eax
f0125504:	29 c1                	sub    %eax,%ecx
f0125506:	89 c8                	mov    %ecx,%eax
f0125508:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012550d:	c1 e8 0c             	shr    $0xc,%eax
f0125510:	89 c2                	mov    %eax,%edx
f0125512:	4a                   	dec    %edx
f0125513:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125519:	c1 e0 02             	shl    $0x2,%eax
f012551c:	8d 50 03             	lea    0x3(%eax),%edx
f012551f:	b8 10 00 00 00       	mov    $0x10,%eax
f0125524:	48                   	dec    %eax
f0125525:	01 d0                	add    %edx,%eax
f0125527:	bf 10 00 00 00       	mov    $0x10,%edi
f012552c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125531:	f7 f7                	div    %edi
f0125533:	6b c0 10             	imul   $0x10,%eax,%eax
f0125536:	29 c4                	sub    %eax,%esp
f0125538:	89 e0                	mov    %esp,%eax
f012553a:	83 c0 03             	add    $0x3,%eax
f012553d:	c1 e8 02             	shr    $0x2,%eax
f0125540:	c1 e0 02             	shl    $0x2,%eax
f0125543:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125549:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125550:	10 00 00 
f0125553:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125559:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012555e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125564:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012556a:	ba 00 00 00 00       	mov    $0x0,%edx
f012556f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125575:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012557b:	29 d0                	sub    %edx,%eax
f012557d:	89 c1                	mov    %eax,%ecx
f012557f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125586:	10 00 00 
f0125589:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012558e:	0f b6 d0             	movzbl %al,%edx
f0125591:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125597:	01 d0                	add    %edx,%eax
f0125599:	48                   	dec    %eax
f012559a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01255a0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01255a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ab:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01255b1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01255b7:	29 d0                	sub    %edx,%eax
f01255b9:	01 c1                	add    %eax,%ecx
f01255bb:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01255c2:	10 00 00 
f01255c5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01255ca:	0f b6 c0             	movzbl %al,%eax
f01255cd:	c1 e0 04             	shl    $0x4,%eax
f01255d0:	89 c2                	mov    %eax,%edx
f01255d2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01255d8:	01 d0                	add    %edx,%eax
f01255da:	48                   	dec    %eax
f01255db:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01255e1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01255e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ec:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01255f2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01255f8:	29 d0                	sub    %edx,%eax
f01255fa:	01 c1                	add    %eax,%ecx
f01255fc:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125603:	10 00 00 
f0125606:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012560c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125611:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125617:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012561d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125622:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125628:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012562e:	29 d0                	sub    %edx,%eax
f0125630:	29 c1                	sub    %eax,%ecx
f0125632:	89 c8                	mov    %ecx,%eax
f0125634:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125639:	c1 e8 0c             	shr    $0xc,%eax
f012563c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125642:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125649:	10 00 00 
f012564c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125652:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125657:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012565d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125663:	ba 00 00 00 00       	mov    $0x0,%edx
f0125668:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012566e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125674:	29 d0                	sub    %edx,%eax
f0125676:	89 c1                	mov    %eax,%ecx
f0125678:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012567f:	10 00 00 
f0125682:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125687:	0f b6 d0             	movzbl %al,%edx
f012568a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125690:	01 d0                	add    %edx,%eax
f0125692:	48                   	dec    %eax
f0125693:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125699:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012569f:	ba 00 00 00 00       	mov    $0x0,%edx
f01256a4:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01256aa:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01256b0:	29 d0                	sub    %edx,%eax
f01256b2:	01 c1                	add    %eax,%ecx
f01256b4:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01256bb:	10 00 00 
f01256be:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01256c3:	0f b6 c0             	movzbl %al,%eax
f01256c6:	c1 e0 04             	shl    $0x4,%eax
f01256c9:	89 c2                	mov    %eax,%edx
f01256cb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01256d1:	01 d0                	add    %edx,%eax
f01256d3:	48                   	dec    %eax
f01256d4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01256da:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01256e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01256e5:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01256eb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01256f1:	29 d0                	sub    %edx,%eax
f01256f3:	01 c8                	add    %ecx,%eax
f01256f5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01256fa:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125700:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125707:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f012570e:	10 00 00 
f0125711:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125717:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012571c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125722:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125728:	ba 00 00 00 00       	mov    $0x0,%edx
f012572d:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125733:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125739:	29 d0                	sub    %edx,%eax
f012573b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125740:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125743:	e9 21 01 00 00       	jmp    f0125869 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125748:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012574d:	83 ec 04             	sub    $0x4,%esp
f0125750:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125756:	52                   	push   %edx
f0125757:	ff 75 e4             	pushl  -0x1c(%ebp)
f012575a:	50                   	push   %eax
f012575b:	e8 7a 12 fe ff       	call   f01069da <get_page_table>
f0125760:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125763:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125769:	85 c0                	test   %eax,%eax
f012576b:	75 17                	jne    f0125784 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012576d:	83 ec 04             	sub    $0x4,%esp
f0125770:	68 3c b7 13 f0       	push   $0xf013b73c
f0125775:	68 38 09 00 00       	push   $0x938
f012577a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012577f:	e8 77 aa fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125784:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125787:	c1 e8 0c             	shr    $0xc,%eax
f012578a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012578f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125792:	e9 ba 00 00 00       	jmp    f0125851 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125797:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012579d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01257a0:	c1 e2 02             	shl    $0x2,%edx
f01257a3:	01 d0                	add    %edx,%eax
f01257a5:	8b 00                	mov    (%eax),%eax
f01257a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01257ac:	89 c1                	mov    %eax,%ecx
f01257ae:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01257b4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01257b7:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01257ba:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01257c0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01257c3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01257c6:	83 ec 0c             	sub    $0xc,%esp
f01257c9:	50                   	push   %eax
f01257ca:	e8 36 22 fe ff       	call   f0107a05 <kheap_virtual_address>
f01257cf:	83 c4 10             	add    $0x10,%esp
f01257d2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01257d8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01257de:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01257e1:	74 61                	je     f0125844 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01257e3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01257e9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01257ec:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01257ef:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01257f5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01257f8:	c1 e1 02             	shl    $0x2,%ecx
f01257fb:	01 ca                	add    %ecx,%edx
f01257fd:	8b 12                	mov    (%edx),%edx
f01257ff:	89 d1                	mov    %edx,%ecx
f0125801:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125807:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012580a:	c1 e2 0c             	shl    $0xc,%edx
f012580d:	89 d3                	mov    %edx,%ebx
f012580f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125812:	01 da                	add    %ebx,%edx
f0125814:	83 ec 0c             	sub    $0xc,%esp
f0125817:	50                   	push   %eax
f0125818:	51                   	push   %ecx
f0125819:	52                   	push   %edx
f012581a:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125820:	68 30 b8 13 f0       	push   $0xf013b830
f0125825:	e8 58 b4 fd ff       	call   f0100c82 <cprintf>
f012582a:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012582d:	83 ec 04             	sub    $0x4,%esp
f0125830:	68 73 b8 13 f0       	push   $0xf013b873
f0125835:	68 42 09 00 00       	push   $0x942
f012583a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012583f:	e8 b7 a9 fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f0125844:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012584b:	ff 45 dc             	incl   -0x24(%ebp)
f012584e:	ff 45 e0             	incl   -0x20(%ebp)
f0125851:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125854:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f012585a:	7d 0d                	jge    f0125869 <test_kheap_virt_addr+0xecc>
f012585c:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125863:	0f 8e 2e ff ff ff    	jle    f0125797 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125869:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012586c:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125872:	0f 82 d0 fe ff ff    	jb     f0125748 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125878:	83 ec 0c             	sub    $0xc,%esp
f012587b:	68 90 b8 13 f0       	push   $0xf013b890
f0125880:	e8 fd b3 fd ff       	call   f0100c82 <cprintf>
f0125885:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125888:	e8 c4 71 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012588d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125893:	e8 a4 e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125898:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f012589e:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01258a4:	83 ec 0c             	sub    $0xc,%esp
f01258a7:	50                   	push   %eax
f01258a8:	e8 31 20 fe ff       	call   f01078de <kfree>
f01258ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258b0:	e8 87 e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01258b5:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01258bb:	74 17                	je     f01258d4 <test_kheap_virt_addr+0xf37>
f01258bd:	83 ec 04             	sub    $0x4,%esp
f01258c0:	68 b4 ad 13 f0       	push   $0xf013adb4
f01258c5:	68 50 09 00 00       	push   $0x950
f01258ca:	68 9a ad 13 f0       	push   $0xf013ad9a
f01258cf:	e8 27 a9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01258d4:	e8 78 71 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01258d9:	89 c2                	mov    %eax,%edx
f01258db:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01258e1:	29 c2                	sub    %eax,%edx
f01258e3:	89 d0                	mov    %edx,%eax
f01258e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01258ea:	74 17                	je     f0125903 <test_kheap_virt_addr+0xf66>
f01258ec:	83 ec 04             	sub    $0x4,%esp
f01258ef:	68 24 b5 13 f0       	push   $0xf013b524
f01258f4:	68 51 09 00 00       	push   $0x951
f01258f9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01258fe:	e8 f8 a8 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125903:	e8 49 71 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125908:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012590e:	e8 29 e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125913:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125919:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012591f:	83 ec 0c             	sub    $0xc,%esp
f0125922:	50                   	push   %eax
f0125923:	e8 b6 1f fe ff       	call   f01078de <kfree>
f0125928:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012592b:	e8 0c e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125930:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125936:	74 17                	je     f012594f <test_kheap_virt_addr+0xfb2>
f0125938:	83 ec 04             	sub    $0x4,%esp
f012593b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0125940:	68 57 09 00 00       	push   $0x957
f0125945:	68 9a ad 13 f0       	push   $0xf013ad9a
f012594a:	e8 ac a8 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012594f:	e8 fd 70 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125954:	89 c2                	mov    %eax,%edx
f0125956:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012595c:	29 c2                	sub    %eax,%edx
f012595e:	89 d0                	mov    %edx,%eax
f0125960:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125965:	74 17                	je     f012597e <test_kheap_virt_addr+0xfe1>
f0125967:	83 ec 04             	sub    $0x4,%esp
f012596a:	68 24 b5 13 f0       	push   $0xf013b524
f012596f:	68 58 09 00 00       	push   $0x958
f0125974:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125979:	e8 7d a8 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012597e:	e8 ce 70 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125983:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125989:	e8 ae e3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012598e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125994:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012599a:	83 ec 0c             	sub    $0xc,%esp
f012599d:	50                   	push   %eax
f012599e:	e8 3b 1f fe ff       	call   f01078de <kfree>
f01259a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259a6:	e8 91 e3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01259ab:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01259b1:	74 17                	je     f01259ca <test_kheap_virt_addr+0x102d>
f01259b3:	83 ec 04             	sub    $0x4,%esp
f01259b6:	68 b4 ad 13 f0       	push   $0xf013adb4
f01259bb:	68 5e 09 00 00       	push   $0x95e
f01259c0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01259c5:	e8 31 a8 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01259ca:	e8 82 70 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01259cf:	89 c2                	mov    %eax,%edx
f01259d1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01259d7:	29 c2                	sub    %eax,%edx
f01259d9:	89 d0                	mov    %edx,%eax
f01259db:	3d 00 06 00 00       	cmp    $0x600,%eax
f01259e0:	74 17                	je     f01259f9 <test_kheap_virt_addr+0x105c>
f01259e2:	83 ec 04             	sub    $0x4,%esp
f01259e5:	68 24 b5 13 f0       	push   $0xf013b524
f01259ea:	68 5f 09 00 00       	push   $0x95f
f01259ef:	68 9a ad 13 f0       	push   $0xf013ad9a
f01259f4:	e8 02 a8 fd ff       	call   f01001fb <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01259f9:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125a00:	10 00 00 
f0125a03:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125a09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a0e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125a14:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a1f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125a25:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125a2b:	29 d0                	sub    %edx,%eax
f0125a2d:	89 c1                	mov    %eax,%ecx
f0125a2f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125a36:	10 00 00 
f0125a39:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125a3e:	0f b6 d0             	movzbl %al,%edx
f0125a41:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125a47:	01 d0                	add    %edx,%eax
f0125a49:	48                   	dec    %eax
f0125a4a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125a50:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125a56:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a5b:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125a61:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125a67:	29 d0                	sub    %edx,%eax
f0125a69:	01 c1                	add    %eax,%ecx
f0125a6b:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125a72:	10 00 00 
f0125a75:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125a7a:	0f b6 c0             	movzbl %al,%eax
f0125a7d:	c1 e0 04             	shl    $0x4,%eax
f0125a80:	89 c2                	mov    %eax,%edx
f0125a82:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125a88:	01 d0                	add    %edx,%eax
f0125a8a:	48                   	dec    %eax
f0125a8b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125a91:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125a97:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a9c:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125aa2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125aa8:	29 d0                	sub    %edx,%eax
f0125aaa:	01 c8                	add    %ecx,%eax
f0125aac:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125ab1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125ab7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125abe:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125ac5:	10 00 00 
f0125ac8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125ace:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ad3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125ad9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae4:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125aea:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125af0:	29 d0                	sub    %edx,%eax
f0125af2:	89 c1                	mov    %eax,%ecx
f0125af4:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125afb:	10 00 00 
f0125afe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125b03:	0f b6 d0             	movzbl %al,%edx
f0125b06:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125b0c:	01 d0                	add    %edx,%eax
f0125b0e:	48                   	dec    %eax
f0125b0f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125b15:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125b1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b20:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125b26:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125b2c:	29 d0                	sub    %edx,%eax
f0125b2e:	01 c1                	add    %eax,%ecx
f0125b30:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125b37:	10 00 00 
f0125b3a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125b3f:	0f b6 c0             	movzbl %al,%eax
f0125b42:	c1 e0 04             	shl    $0x4,%eax
f0125b45:	89 c2                	mov    %eax,%edx
f0125b47:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125b4d:	01 d0                	add    %edx,%eax
f0125b4f:	48                   	dec    %eax
f0125b50:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125b56:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125b5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b61:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125b67:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125b6d:	29 d0                	sub    %edx,%eax
f0125b6f:	01 c1                	add    %eax,%ecx
f0125b71:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125b78:	10 00 00 
f0125b7b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125b81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b86:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125b8c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125b92:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b97:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125b9d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125ba3:	29 d0                	sub    %edx,%eax
f0125ba5:	29 c1                	sub    %eax,%ecx
f0125ba7:	89 c8                	mov    %ecx,%eax
f0125ba9:	05 00 40 00 00       	add    $0x4000,%eax
f0125bae:	c1 e8 0c             	shr    $0xc,%eax
f0125bb1:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125bb7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125bbd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125bc0:	eb 41                	jmp    f0125c03 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125bc2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125bc8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125bcb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125bce:	83 ec 0c             	sub    $0xc,%esp
f0125bd1:	50                   	push   %eax
f0125bd2:	e8 2e 1e fe ff       	call   f0107a05 <kheap_virtual_address>
f0125bd7:	83 c4 10             	add    $0x10,%esp
f0125bda:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125be0:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125be7:	74 17                	je     f0125c00 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125be9:	83 ec 04             	sub    $0x4,%esp
f0125bec:	68 73 b8 13 f0       	push   $0xf013b873
f0125bf1:	68 70 09 00 00       	push   $0x970
f0125bf6:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125bfb:	e8 fb a5 fd ff       	call   f01001fb <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125c00:	ff 45 d8             	incl   -0x28(%ebp)
f0125c03:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c09:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125c0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c12:	39 c2                	cmp    %eax,%edx
f0125c14:	77 ac                	ja     f0125bc2 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125c16:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c1c:	05 00 04 00 00       	add    $0x400,%eax
f0125c21:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125c24:	e9 83 00 00 00       	jmp    f0125cac <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125c29:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c2f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125c32:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125c35:	83 ec 0c             	sub    $0xc,%esp
f0125c38:	50                   	push   %eax
f0125c39:	e8 c7 1d fe ff       	call   f0107a05 <kheap_virtual_address>
f0125c3e:	83 c4 10             	add    $0x10,%esp
f0125c41:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125c47:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125c4e:	10 00 00 
f0125c51:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125c57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c5c:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125c62:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125c68:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c6d:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125c73:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125c79:	29 d0                	sub    %edx,%eax
f0125c7b:	89 c2                	mov    %eax,%edx
f0125c7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c80:	c1 e0 0c             	shl    $0xc,%eax
f0125c83:	01 d0                	add    %edx,%eax
f0125c85:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125c8a:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125c90:	74 17                	je     f0125ca9 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125c92:	83 ec 04             	sub    $0x4,%esp
f0125c95:	68 73 b8 13 f0       	push   $0xf013b873
f0125c9a:	68 7a 09 00 00       	push   $0x97a
f0125c9f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125ca4:	e8 52 a5 fd ff       	call   f01001fb <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125ca9:	ff 45 d8             	incl   -0x28(%ebp)
f0125cac:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125cb2:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125cb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125cbb:	39 c2                	cmp    %eax,%edx
f0125cbd:	0f 87 66 ff ff ff    	ja     f0125c29 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125cc3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125cc9:	05 04 07 00 00       	add    $0x704,%eax
f0125cce:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125cd1:	eb 41                	jmp    f0125d14 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125cd3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125cd9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125cdc:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125cdf:	83 ec 0c             	sub    $0xc,%esp
f0125ce2:	50                   	push   %eax
f0125ce3:	e8 1d 1d fe ff       	call   f0107a05 <kheap_virtual_address>
f0125ce8:	83 c4 10             	add    $0x10,%esp
f0125ceb:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125cf1:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0125cf8:	74 17                	je     f0125d11 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0125cfa:	83 ec 04             	sub    $0x4,%esp
f0125cfd:	68 73 b8 13 f0       	push   $0xf013b873
f0125d02:	68 83 09 00 00       	push   $0x983
f0125d07:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125d0c:	e8 ea a4 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125d11:	ff 45 d8             	incl   -0x28(%ebp)
f0125d14:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125d1a:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125d20:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125d23:	39 c2                	cmp    %eax,%edx
f0125d25:	77 ac                	ja     f0125cd3 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125d27:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125d2d:	05 04 0d 00 00       	add    $0xd04,%eax
f0125d32:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125d35:	e9 83 00 00 00       	jmp    f0125dbd <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125d3a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125d40:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125d43:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125d46:	83 ec 0c             	sub    $0xc,%esp
f0125d49:	50                   	push   %eax
f0125d4a:	e8 b6 1c fe ff       	call   f0107a05 <kheap_virtual_address>
f0125d4f:	83 c4 10             	add    $0x10,%esp
f0125d52:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125d58:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125d5f:	10 00 00 
f0125d62:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125d68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d6d:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125d73:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d7e:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125d84:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125d8a:	29 d0                	sub    %edx,%eax
f0125d8c:	89 c2                	mov    %eax,%edx
f0125d8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125d91:	c1 e0 0c             	shl    $0xc,%eax
f0125d94:	01 d0                	add    %edx,%eax
f0125d96:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125d9b:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125da1:	74 17                	je     f0125dba <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125da3:	83 ec 04             	sub    $0x4,%esp
f0125da6:	68 73 b8 13 f0       	push   $0xf013b873
f0125dab:	68 8c 09 00 00       	push   $0x98c
f0125db0:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125db5:	e8 41 a4 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125dba:	ff 45 d8             	incl   -0x28(%ebp)
f0125dbd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125dc3:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125dc9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125dcc:	39 c2                	cmp    %eax,%edx
f0125dce:	0f 87 66 ff ff ff    	ja     f0125d3a <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125dd4:	83 ec 0c             	sub    $0xc,%esp
f0125dd7:	68 25 af 13 f0       	push   $0xf013af25
f0125ddc:	e8 a1 ae fd ff       	call   f0100c82 <cprintf>
f0125de1:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125de4:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125deb:	eb 54                	jmp    f0125e41 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125ded:	83 ec 0c             	sub    $0xc,%esp
f0125df0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125df3:	e8 0d 1c fe ff       	call   f0107a05 <kheap_virtual_address>
f0125df8:	83 c4 10             	add    $0x10,%esp
f0125dfb:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125e01:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125e08:	74 30                	je     f0125e3a <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125e0a:	83 ec 04             	sub    $0x4,%esp
f0125e0d:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125e13:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125e16:	68 c1 b8 13 f0       	push   $0xf013b8c1
f0125e1b:	e8 62 ae fd ff       	call   f0100c82 <cprintf>
f0125e20:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125e23:	83 ec 04             	sub    $0x4,%esp
f0125e26:	68 73 b8 13 f0       	push   $0xf013b873
f0125e2b:	68 9c 09 00 00       	push   $0x99c
f0125e30:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125e35:	e8 c1 a3 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125e3a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125e41:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0125e46:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125e49:	72 a2                	jb     f0125ded <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125e4b:	83 ec 0c             	sub    $0xc,%esp
f0125e4e:	68 7e af 13 f0       	push   $0xf013af7e
f0125e53:	e8 2a ae fd ff       	call   f0100c82 <cprintf>
f0125e58:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125e5b:	83 ec 0c             	sub    $0xc,%esp
f0125e5e:	68 e0 b8 13 f0       	push   $0xf013b8e0
f0125e63:	e8 1a ae fd ff       	call   f0100c82 <cprintf>
f0125e68:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125e6b:	b8 01 00 00 00       	mov    $0x1,%eax
f0125e70:	89 f4                	mov    %esi,%esp

}
f0125e72:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125e75:	5b                   	pop    %ebx
f0125e76:	5e                   	pop    %esi
f0125e77:	5f                   	pop    %edi
f0125e78:	5d                   	pop    %ebp
f0125e79:	c3                   	ret    

f0125e7a <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125e7a:	55                   	push   %ebp
f0125e7b:	89 e5                	mov    %esp,%ebp
f0125e7d:	57                   	push   %edi
f0125e7e:	56                   	push   %esi
f0125e7f:	53                   	push   %ebx
f0125e80:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125e86:	a0 cf 1c 19 f0       	mov    0xf0191ccf,%al
f0125e8b:	84 c0                	test   %al,%al
f0125e8d:	74 56                	je     f0125ee5 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125e8f:	c6 05 cf 1c 19 f0 00 	movb   $0x0,0xf0191ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125e96:	e8 b6 6b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125e9b:	a3 b8 7c 65 f0       	mov    %eax,0xf0657cb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125ea0:	e8 97 de fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125ea5:	a3 b4 7c 65 f0       	mov    %eax,0xf0657cb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125eaa:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125eb0:	bb 3d ba 13 f0       	mov    $0xf013ba3d,%ebx
f0125eb5:	ba 11 00 00 00       	mov    $0x11,%edx
f0125eba:	89 c7                	mov    %eax,%edi
f0125ebc:	89 de                	mov    %ebx,%esi
f0125ebe:	89 d1                	mov    %edx,%ecx
f0125ec0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125ec2:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125ec8:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125ecd:	b0 00                	mov    $0x0,%al
f0125ecf:	89 d7                	mov    %edx,%edi
f0125ed1:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125ed3:	83 ec 0c             	sub    $0xc,%esp
f0125ed6:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125edc:	50                   	push   %eax
f0125edd:	e8 02 ae fd ff       	call   f0100ce4 <execute_command>
f0125ee2:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125ee5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125eec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125ef3:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0125ef8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125efb:	eb 2d                	jmp    f0125f2a <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125efd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125f00:	05 5c 05 00 00       	add    $0x55c,%eax
f0125f05:	83 ec 08             	sub    $0x8,%esp
f0125f08:	68 27 b9 13 f0       	push   $0xf013b927
f0125f0d:	50                   	push   %eax
f0125f0e:	e8 79 af 00 00       	call   f0130e8c <strcmp>
f0125f13:	83 c4 10             	add    $0x10,%esp
f0125f16:	85 c0                	test   %eax,%eax
f0125f18:	75 08                	jne    f0125f22 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125f1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125f1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125f20:	eb 2f                	jmp    f0125f51 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125f22:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125f27:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125f2a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125f2e:	74 08                	je     f0125f38 <test_three_creation_functions+0xbe>
f0125f30:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125f33:	8b 40 44             	mov    0x44(%eax),%eax
f0125f36:	eb 05                	jmp    f0125f3d <test_three_creation_functions+0xc3>
f0125f38:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f3d:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0125f42:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125f47:	85 c0                	test   %eax,%eax
f0125f49:	75 b2                	jne    f0125efd <test_three_creation_functions+0x83>
f0125f4b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125f4f:	75 ac                	jne    f0125efd <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125f51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125f54:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0125f5a:	85 c0                	test   %eax,%eax
f0125f5c:	74 17                	je     f0125f75 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125f5e:	83 ec 04             	sub    $0x4,%esp
f0125f61:	68 30 b9 13 f0       	push   $0xf013b930
f0125f66:	68 c6 09 00 00       	push   $0x9c6
f0125f6b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125f70:	e8 86 a2 fd ff       	call   f01001fb <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125f75:	83 ec 0c             	sub    $0xc,%esp
f0125f78:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125f7b:	e8 24 1e fe ff       	call   f0107da4 <env_page_ws_get_size>
f0125f80:	83 c4 10             	add    $0x10,%esp
f0125f83:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125f86:	e8 c6 6a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0125f8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125f8e:	e8 a9 dd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125f93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f96:	a1 b4 7c 65 f0       	mov    0xf0657cb4,%eax
f0125f9b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125f9e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125fa1:	74 17                	je     f0125fba <test_three_creation_functions+0x140>
f0125fa3:	83 ec 04             	sub    $0x4,%esp
f0125fa6:	68 b4 ad 13 f0       	push   $0xf013adb4
f0125fab:	68 cc 09 00 00       	push   $0x9cc
f0125fb0:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125fb5:	e8 41 a2 fd ff       	call   f01001fb <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125fba:	a1 b8 7c 65 f0       	mov    0xf0657cb8,%eax
f0125fbf:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125fc2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125fc5:	83 c2 15             	add    $0x15,%edx
f0125fc8:	39 d0                	cmp    %edx,%eax
f0125fca:	74 17                	je     f0125fe3 <test_three_creation_functions+0x169>
f0125fcc:	83 ec 04             	sub    $0x4,%esp
f0125fcf:	68 1c ae 13 f0       	push   $0xf013ae1c
f0125fd4:	68 ce 09 00 00       	push   $0x9ce
f0125fd9:	68 9a ad 13 f0       	push   $0xf013ad9a
f0125fde:	e8 18 a2 fd ff       	call   f01001fb <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125fe3:	83 ec 0c             	sub    $0xc,%esp
f0125fe6:	68 00 10 00 00       	push   $0x1000
f0125feb:	e8 23 18 fe ff       	call   f0107813 <kmalloc>
f0125ff0:	83 c4 10             	add    $0x10,%esp
f0125ff3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125ff6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125ffd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126000:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126005:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126008:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012600b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126010:	f7 75 cc             	divl   -0x34(%ebp)
f0126013:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126016:	29 d0                	sub    %edx,%eax
f0126018:	89 c1                	mov    %eax,%ecx
f012601a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126021:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126026:	0f b6 d0             	movzbl %al,%edx
f0126029:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012602c:	01 d0                	add    %edx,%eax
f012602e:	48                   	dec    %eax
f012602f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126032:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126035:	ba 00 00 00 00       	mov    $0x0,%edx
f012603a:	f7 75 c4             	divl   -0x3c(%ebp)
f012603d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126040:	29 d0                	sub    %edx,%eax
f0126042:	01 c1                	add    %eax,%ecx
f0126044:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012604b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126050:	0f b6 c0             	movzbl %al,%eax
f0126053:	c1 e0 04             	shl    $0x4,%eax
f0126056:	89 c2                	mov    %eax,%edx
f0126058:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012605b:	01 d0                	add    %edx,%eax
f012605d:	48                   	dec    %eax
f012605e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126061:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126064:	ba 00 00 00 00       	mov    $0x0,%edx
f0126069:	f7 75 bc             	divl   -0x44(%ebp)
f012606c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012606f:	29 d0                	sub    %edx,%eax
f0126071:	01 c8                	add    %ecx,%eax
f0126073:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126079:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012607c:	39 c2                	cmp    %eax,%edx
f012607e:	74 17                	je     f0126097 <test_three_creation_functions+0x21d>
f0126080:	83 ec 04             	sub    $0x4,%esp
f0126083:	68 80 b9 13 f0       	push   $0xf013b980
f0126088:	68 d2 09 00 00       	push   $0x9d2
f012608d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126092:	e8 64 a1 fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126097:	83 ec 0c             	sub    $0xc,%esp
f012609a:	68 f0 b9 13 f0       	push   $0xf013b9f0
f012609f:	e8 de ab fd ff       	call   f0100c82 <cprintf>
f01260a4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01260a7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01260ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01260af:	5b                   	pop    %ebx
f01260b0:	5e                   	pop    %esi
f01260b1:	5f                   	pop    %edi
f01260b2:	5d                   	pop    %ebp
f01260b3:	c3                   	ret    

f01260b4 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01260b4:	55                   	push   %ebp
f01260b5:	89 e5                	mov    %esp,%ebp
f01260b7:	57                   	push   %edi
f01260b8:	53                   	push   %ebx
f01260b9:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01260bf:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01260c3:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01260c7:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01260cd:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01260d3:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01260da:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01260e1:	e8 6b 69 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01260e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01260e9:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01260ef:	b9 14 00 00 00       	mov    $0x14,%ecx
f01260f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01260f9:	89 d7                	mov    %edx,%edi
f01260fb:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01260fd:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126103:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126108:	b8 00 00 00 00       	mov    $0x0,%eax
f012610d:	89 d7                	mov    %edx,%edi
f012610f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126111:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126117:	b9 14 00 00 00       	mov    $0x14,%ecx
f012611c:	b8 00 00 00 00       	mov    $0x0,%eax
f0126121:	89 d7                	mov    %edx,%edi
f0126123:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126125:	e8 27 69 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012612a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012612d:	e8 0a dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126132:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126135:	83 ec 0c             	sub    $0xc,%esp
f0126138:	68 00 fc 1f 00       	push   $0x1ffc00
f012613d:	e8 d1 16 fe ff       	call   f0107813 <kmalloc>
f0126142:	83 c4 10             	add    $0x10,%esp
f0126145:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012614b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126151:	89 c1                	mov    %eax,%ecx
f0126153:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012615a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012615d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126162:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126165:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126168:	ba 00 00 00 00       	mov    $0x0,%edx
f012616d:	f7 75 c8             	divl   -0x38(%ebp)
f0126170:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126173:	29 d0                	sub    %edx,%eax
f0126175:	89 c3                	mov    %eax,%ebx
f0126177:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012617e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126183:	0f b6 d0             	movzbl %al,%edx
f0126186:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126189:	01 d0                	add    %edx,%eax
f012618b:	48                   	dec    %eax
f012618c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012618f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126192:	ba 00 00 00 00       	mov    $0x0,%edx
f0126197:	f7 75 c0             	divl   -0x40(%ebp)
f012619a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012619d:	29 d0                	sub    %edx,%eax
f012619f:	01 c3                	add    %eax,%ebx
f01261a1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01261a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01261ad:	0f b6 c0             	movzbl %al,%eax
f01261b0:	c1 e0 04             	shl    $0x4,%eax
f01261b3:	89 c2                	mov    %eax,%edx
f01261b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01261b8:	01 d0                	add    %edx,%eax
f01261ba:	48                   	dec    %eax
f01261bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01261be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01261c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01261c6:	f7 75 b8             	divl   -0x48(%ebp)
f01261c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01261cc:	29 d0                	sub    %edx,%eax
f01261ce:	01 d8                	add    %ebx,%eax
f01261d0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01261d5:	39 c1                	cmp    %eax,%ecx
f01261d7:	74 17                	je     f01261f0 <test_kfreeall+0x13c>
f01261d9:	83 ec 04             	sub    $0x4,%esp
f01261dc:	68 80 ae 13 f0       	push   $0xf013ae80
f01261e1:	68 f9 09 00 00       	push   $0x9f9
f01261e6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01261eb:	e8 0b a0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261f0:	e8 47 db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01261f5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01261f8:	74 17                	je     f0126211 <test_kfreeall+0x15d>
f01261fa:	83 ec 04             	sub    $0x4,%esp
f01261fd:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126202:	68 fa 09 00 00       	push   $0x9fa
f0126207:	68 9a ad 13 f0       	push   $0xf013ad9a
f012620c:	e8 ea 9f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126211:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126214:	e8 38 68 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126219:	29 c3                	sub    %eax,%ebx
f012621b:	89 d8                	mov    %ebx,%eax
f012621d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126222:	74 17                	je     f012623b <test_kfreeall+0x187>
f0126224:	83 ec 04             	sub    $0x4,%esp
f0126227:	68 1c ae 13 f0       	push   $0xf013ae1c
f012622c:	68 fb 09 00 00       	push   $0x9fb
f0126231:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126236:	e8 c0 9f fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012623b:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126242:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126245:	e8 07 68 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012624a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012624d:	e8 ea da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126252:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126255:	83 ec 0c             	sub    $0xc,%esp
f0126258:	68 00 fc 1f 00       	push   $0x1ffc00
f012625d:	e8 b1 15 fe ff       	call   f0107813 <kmalloc>
f0126262:	83 c4 10             	add    $0x10,%esp
f0126265:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012626b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126271:	89 c1                	mov    %eax,%ecx
f0126273:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012627a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012627d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126282:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126285:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126288:	ba 00 00 00 00       	mov    $0x0,%edx
f012628d:	f7 75 b0             	divl   -0x50(%ebp)
f0126290:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126293:	29 d0                	sub    %edx,%eax
f0126295:	89 c3                	mov    %eax,%ebx
f0126297:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012629e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01262a3:	0f b6 d0             	movzbl %al,%edx
f01262a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01262a9:	01 d0                	add    %edx,%eax
f01262ab:	48                   	dec    %eax
f01262ac:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01262af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01262b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01262b7:	f7 75 a8             	divl   -0x58(%ebp)
f01262ba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01262bd:	29 d0                	sub    %edx,%eax
f01262bf:	01 c3                	add    %eax,%ebx
f01262c1:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01262c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01262cd:	0f b6 c0             	movzbl %al,%eax
f01262d0:	c1 e0 04             	shl    $0x4,%eax
f01262d3:	89 c2                	mov    %eax,%edx
f01262d5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01262d8:	01 d0                	add    %edx,%eax
f01262da:	48                   	dec    %eax
f01262db:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01262de:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01262e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01262e6:	f7 75 a0             	divl   -0x60(%ebp)
f01262e9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01262ec:	29 d0                	sub    %edx,%eax
f01262ee:	01 d8                	add    %ebx,%eax
f01262f0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01262f5:	39 c1                	cmp    %eax,%ecx
f01262f7:	74 17                	je     f0126310 <test_kfreeall+0x25c>
f01262f9:	83 ec 04             	sub    $0x4,%esp
f01262fc:	68 80 ae 13 f0       	push   $0xf013ae80
f0126301:	68 02 0a 00 00       	push   $0xa02
f0126306:	68 9a ad 13 f0       	push   $0xf013ad9a
f012630b:	e8 eb 9e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126310:	e8 27 da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126315:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126318:	74 17                	je     f0126331 <test_kfreeall+0x27d>
f012631a:	83 ec 04             	sub    $0x4,%esp
f012631d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126322:	68 03 0a 00 00       	push   $0xa03
f0126327:	68 9a ad 13 f0       	push   $0xf013ad9a
f012632c:	e8 ca 9e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126331:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126334:	e8 18 67 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126339:	29 c3                	sub    %eax,%ebx
f012633b:	89 d8                	mov    %ebx,%eax
f012633d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126342:	74 17                	je     f012635b <test_kfreeall+0x2a7>
f0126344:	83 ec 04             	sub    $0x4,%esp
f0126347:	68 1c ae 13 f0       	push   $0xf013ae1c
f012634c:	68 04 0a 00 00       	push   $0xa04
f0126351:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126356:	e8 a0 9e fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012635b:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126362:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126365:	e8 e7 66 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012636a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012636d:	e8 ca d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126372:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126375:	83 ec 0c             	sub    $0xc,%esp
f0126378:	68 00 08 00 00       	push   $0x800
f012637d:	e8 91 14 fe ff       	call   f0107813 <kmalloc>
f0126382:	83 c4 10             	add    $0x10,%esp
f0126385:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012638b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126391:	89 c1                	mov    %eax,%ecx
f0126393:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012639a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012639d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263a2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01263a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01263a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01263ad:	f7 75 98             	divl   -0x68(%ebp)
f01263b0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01263b3:	29 d0                	sub    %edx,%eax
f01263b5:	89 c3                	mov    %eax,%ebx
f01263b7:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01263be:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01263c3:	0f b6 d0             	movzbl %al,%edx
f01263c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01263c9:	01 d0                	add    %edx,%eax
f01263cb:	48                   	dec    %eax
f01263cc:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01263cf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01263d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01263d7:	f7 75 90             	divl   -0x70(%ebp)
f01263da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01263dd:	29 d0                	sub    %edx,%eax
f01263df:	01 c3                	add    %eax,%ebx
f01263e1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01263e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01263ed:	0f b6 c0             	movzbl %al,%eax
f01263f0:	c1 e0 04             	shl    $0x4,%eax
f01263f3:	89 c2                	mov    %eax,%edx
f01263f5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01263f8:	01 d0                	add    %edx,%eax
f01263fa:	48                   	dec    %eax
f01263fb:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01263fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126401:	ba 00 00 00 00       	mov    $0x0,%edx
f0126406:	f7 75 88             	divl   -0x78(%ebp)
f0126409:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012640c:	29 d0                	sub    %edx,%eax
f012640e:	01 d8                	add    %ebx,%eax
f0126410:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126415:	39 c1                	cmp    %eax,%ecx
f0126417:	74 17                	je     f0126430 <test_kfreeall+0x37c>
f0126419:	83 ec 04             	sub    $0x4,%esp
f012641c:	68 80 ae 13 f0       	push   $0xf013ae80
f0126421:	68 0b 0a 00 00       	push   $0xa0b
f0126426:	68 9a ad 13 f0       	push   $0xf013ad9a
f012642b:	e8 cb 9d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126430:	e8 07 d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126435:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126438:	74 17                	je     f0126451 <test_kfreeall+0x39d>
f012643a:	83 ec 04             	sub    $0x4,%esp
f012643d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126442:	68 0c 0a 00 00       	push   $0xa0c
f0126447:	68 9a ad 13 f0       	push   $0xf013ad9a
f012644c:	e8 aa 9d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126451:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126454:	e8 f8 65 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126459:	29 c3                	sub    %eax,%ebx
f012645b:	89 d8                	mov    %ebx,%eax
f012645d:	83 f8 01             	cmp    $0x1,%eax
f0126460:	74 17                	je     f0126479 <test_kfreeall+0x3c5>
f0126462:	83 ec 04             	sub    $0x4,%esp
f0126465:	68 1c ae 13 f0       	push   $0xf013ae1c
f012646a:	68 0d 0a 00 00       	push   $0xa0d
f012646f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126474:	e8 82 9d fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126479:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126480:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126483:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126489:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012648c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126493:	eb 0e                	jmp    f01264a3 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126495:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126498:	8b 45 80             	mov    -0x80(%ebp),%eax
f012649b:	01 d0                	add    %edx,%eax
f012649d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01264a0:	ff 45 f4             	incl   -0xc(%ebp)
f01264a3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01264a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01264ac:	7f e7                	jg     f0126495 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01264ae:	e8 9e 65 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01264b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264b6:	e8 81 d8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01264bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01264be:	83 ec 0c             	sub    $0xc,%esp
f01264c1:	68 00 08 00 00       	push   $0x800
f01264c6:	e8 48 13 fe ff       	call   f0107813 <kmalloc>
f01264cb:	83 c4 10             	add    $0x10,%esp
f01264ce:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264d4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01264da:	89 c1                	mov    %eax,%ecx
f01264dc:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01264e3:	10 00 00 
f01264e6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01264ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264f1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01264f7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01264fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126502:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126508:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012650e:	29 d0                	sub    %edx,%eax
f0126510:	89 c3                	mov    %eax,%ebx
f0126512:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126519:	10 00 00 
f012651c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126521:	0f b6 d0             	movzbl %al,%edx
f0126524:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012652a:	01 d0                	add    %edx,%eax
f012652c:	48                   	dec    %eax
f012652d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126533:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126539:	ba 00 00 00 00       	mov    $0x0,%edx
f012653e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126544:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012654a:	29 d0                	sub    %edx,%eax
f012654c:	01 c3                	add    %eax,%ebx
f012654e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126555:	10 00 00 
f0126558:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012655d:	0f b6 c0             	movzbl %al,%eax
f0126560:	c1 e0 04             	shl    $0x4,%eax
f0126563:	89 c2                	mov    %eax,%edx
f0126565:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012656b:	01 d0                	add    %edx,%eax
f012656d:	48                   	dec    %eax
f012656e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126574:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012657a:	ba 00 00 00 00       	mov    $0x0,%edx
f012657f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126585:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012658b:	29 d0                	sub    %edx,%eax
f012658d:	01 d8                	add    %ebx,%eax
f012658f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126594:	39 c1                	cmp    %eax,%ecx
f0126596:	74 17                	je     f01265af <test_kfreeall+0x4fb>
f0126598:	83 ec 04             	sub    $0x4,%esp
f012659b:	68 80 ae 13 f0       	push   $0xf013ae80
f01265a0:	68 19 0a 00 00       	push   $0xa19
f01265a5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01265aa:	e8 4c 9c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265af:	e8 88 d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01265b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265b7:	74 17                	je     f01265d0 <test_kfreeall+0x51c>
f01265b9:	83 ec 04             	sub    $0x4,%esp
f01265bc:	68 b4 ad 13 f0       	push   $0xf013adb4
f01265c1:	68 1a 0a 00 00       	push   $0xa1a
f01265c6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01265cb:	e8 2b 9c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265d3:	e8 79 64 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01265d8:	29 c3                	sub    %eax,%ebx
f01265da:	89 d8                	mov    %ebx,%eax
f01265dc:	83 f8 01             	cmp    $0x1,%eax
f01265df:	74 17                	je     f01265f8 <test_kfreeall+0x544>
f01265e1:	83 ec 04             	sub    $0x4,%esp
f01265e4:	68 1c ae 13 f0       	push   $0xf013ae1c
f01265e9:	68 1b 0a 00 00       	push   $0xa1b
f01265ee:	68 9a ad 13 f0       	push   $0xf013ad9a
f01265f3:	e8 03 9c fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01265f8:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01265ff:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126602:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126608:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012660b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126612:	eb 0e                	jmp    f0126622 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126614:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126617:	8b 45 80             	mov    -0x80(%ebp),%eax
f012661a:	01 d0                	add    %edx,%eax
f012661c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012661f:	ff 45 f4             	incl   -0xc(%ebp)
f0126622:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126628:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012662b:	7f e7                	jg     f0126614 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012662d:	e8 1f 64 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126632:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126635:	e8 02 d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012663a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012663d:	83 ec 0c             	sub    $0xc,%esp
f0126640:	68 00 1c 00 00       	push   $0x1c00
f0126645:	e8 c9 11 fe ff       	call   f0107813 <kmalloc>
f012664a:	83 c4 10             	add    $0x10,%esp
f012664d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126653:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126659:	89 c1                	mov    %eax,%ecx
f012665b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126662:	10 00 00 
f0126665:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012666b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126670:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126676:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012667c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126681:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126687:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012668d:	29 d0                	sub    %edx,%eax
f012668f:	89 c3                	mov    %eax,%ebx
f0126691:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126698:	10 00 00 
f012669b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01266a0:	0f b6 d0             	movzbl %al,%edx
f01266a3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01266a9:	01 d0                	add    %edx,%eax
f01266ab:	48                   	dec    %eax
f01266ac:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01266b2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01266b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01266bd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01266c3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01266c9:	29 d0                	sub    %edx,%eax
f01266cb:	01 c3                	add    %eax,%ebx
f01266cd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01266d4:	10 00 00 
f01266d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01266dc:	0f b6 c0             	movzbl %al,%eax
f01266df:	c1 e0 04             	shl    $0x4,%eax
f01266e2:	89 c2                	mov    %eax,%edx
f01266e4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01266ea:	01 d0                	add    %edx,%eax
f01266ec:	48                   	dec    %eax
f01266ed:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01266f3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01266f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01266fe:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126704:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012670a:	29 d0                	sub    %edx,%eax
f012670c:	01 d8                	add    %ebx,%eax
f012670e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126713:	39 c1                	cmp    %eax,%ecx
f0126715:	74 17                	je     f012672e <test_kfreeall+0x67a>
f0126717:	83 ec 04             	sub    $0x4,%esp
f012671a:	68 80 ae 13 f0       	push   $0xf013ae80
f012671f:	68 27 0a 00 00       	push   $0xa27
f0126724:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126729:	e8 cd 9a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012672e:	e8 09 d6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126733:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126736:	74 17                	je     f012674f <test_kfreeall+0x69b>
f0126738:	83 ec 04             	sub    $0x4,%esp
f012673b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126740:	68 28 0a 00 00       	push   $0xa28
f0126745:	68 9a ad 13 f0       	push   $0xf013ad9a
f012674a:	e8 ac 9a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012674f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126752:	e8 fa 62 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126757:	29 c3                	sub    %eax,%ebx
f0126759:	89 d8                	mov    %ebx,%eax
f012675b:	83 f8 02             	cmp    $0x2,%eax
f012675e:	74 17                	je     f0126777 <test_kfreeall+0x6c3>
f0126760:	83 ec 04             	sub    $0x4,%esp
f0126763:	68 1c ae 13 f0       	push   $0xf013ae1c
f0126768:	68 29 0a 00 00       	push   $0xa29
f012676d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126772:	e8 84 9a fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126777:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f012677e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126781:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126787:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012678a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126791:	eb 0e                	jmp    f01267a1 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126793:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126796:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126799:	01 d0                	add    %edx,%eax
f012679b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012679e:	ff 45 f4             	incl   -0xc(%ebp)
f01267a1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01267a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267aa:	7f e7                	jg     f0126793 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01267ac:	e8 a0 62 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01267b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267b4:	e8 83 d5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01267b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01267bc:	83 ec 0c             	sub    $0xc,%esp
f01267bf:	68 00 fc 2f 00       	push   $0x2ffc00
f01267c4:	e8 4a 10 fe ff       	call   f0107813 <kmalloc>
f01267c9:	83 c4 10             	add    $0x10,%esp
f01267cc:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267d2:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01267d8:	89 c1                	mov    %eax,%ecx
f01267da:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01267e1:	10 00 00 
f01267e4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01267ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267ef:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01267f5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01267fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126800:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126806:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012680c:	29 d0                	sub    %edx,%eax
f012680e:	89 c3                	mov    %eax,%ebx
f0126810:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126817:	10 00 00 
f012681a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012681f:	0f b6 d0             	movzbl %al,%edx
f0126822:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126828:	01 d0                	add    %edx,%eax
f012682a:	48                   	dec    %eax
f012682b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126831:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126837:	ba 00 00 00 00       	mov    $0x0,%edx
f012683c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126842:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126848:	29 d0                	sub    %edx,%eax
f012684a:	01 c3                	add    %eax,%ebx
f012684c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126853:	10 00 00 
f0126856:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012685b:	0f b6 c0             	movzbl %al,%eax
f012685e:	c1 e0 04             	shl    $0x4,%eax
f0126861:	89 c2                	mov    %eax,%edx
f0126863:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126869:	01 d0                	add    %edx,%eax
f012686b:	48                   	dec    %eax
f012686c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126872:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126878:	ba 00 00 00 00       	mov    $0x0,%edx
f012687d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126883:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126889:	29 d0                	sub    %edx,%eax
f012688b:	01 d8                	add    %ebx,%eax
f012688d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126892:	39 c1                	cmp    %eax,%ecx
f0126894:	74 17                	je     f01268ad <test_kfreeall+0x7f9>
f0126896:	83 ec 04             	sub    $0x4,%esp
f0126899:	68 80 ae 13 f0       	push   $0xf013ae80
f012689e:	68 35 0a 00 00       	push   $0xa35
f01268a3:	68 9a ad 13 f0       	push   $0xf013ad9a
f01268a8:	e8 4e 99 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268ad:	e8 8a d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01268b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01268b5:	74 17                	je     f01268ce <test_kfreeall+0x81a>
f01268b7:	83 ec 04             	sub    $0x4,%esp
f01268ba:	68 b4 ad 13 f0       	push   $0xf013adb4
f01268bf:	68 36 0a 00 00       	push   $0xa36
f01268c4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01268c9:	e8 2d 99 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268ce:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01268d1:	e8 7b 61 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01268d6:	29 c3                	sub    %eax,%ebx
f01268d8:	89 d8                	mov    %ebx,%eax
f01268da:	3d 00 03 00 00       	cmp    $0x300,%eax
f01268df:	74 17                	je     f01268f8 <test_kfreeall+0x844>
f01268e1:	83 ec 04             	sub    $0x4,%esp
f01268e4:	68 1c ae 13 f0       	push   $0xf013ae1c
f01268e9:	68 37 0a 00 00       	push   $0xa37
f01268ee:	68 9a ad 13 f0       	push   $0xf013ad9a
f01268f3:	e8 03 99 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01268f8:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01268ff:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126902:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126908:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012690b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126912:	eb 0e                	jmp    f0126922 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126914:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126917:	8b 45 80             	mov    -0x80(%ebp),%eax
f012691a:	01 d0                	add    %edx,%eax
f012691c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012691f:	ff 45 f4             	incl   -0xc(%ebp)
f0126922:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126928:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012692b:	7f e7                	jg     f0126914 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012692d:	e8 1f 61 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126932:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126935:	e8 02 d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012693a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012693d:	83 ec 0c             	sub    $0xc,%esp
f0126940:	68 00 fc 5f 00       	push   $0x5ffc00
f0126945:	e8 c9 0e fe ff       	call   f0107813 <kmalloc>
f012694a:	83 c4 10             	add    $0x10,%esp
f012694d:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126953:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126959:	89 c1                	mov    %eax,%ecx
f012695b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126962:	10 00 00 
f0126965:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012696b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126970:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126976:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012697c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126981:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126987:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012698d:	29 d0                	sub    %edx,%eax
f012698f:	89 c3                	mov    %eax,%ebx
f0126991:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126998:	10 00 00 
f012699b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01269a0:	0f b6 d0             	movzbl %al,%edx
f01269a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01269a9:	01 d0                	add    %edx,%eax
f01269ab:	48                   	dec    %eax
f01269ac:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01269b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01269b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01269bd:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01269c3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01269c9:	29 d0                	sub    %edx,%eax
f01269cb:	01 c3                	add    %eax,%ebx
f01269cd:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01269d4:	10 00 00 
f01269d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01269dc:	0f b6 c0             	movzbl %al,%eax
f01269df:	c1 e0 04             	shl    $0x4,%eax
f01269e2:	89 c2                	mov    %eax,%edx
f01269e4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01269ea:	01 d0                	add    %edx,%eax
f01269ec:	48                   	dec    %eax
f01269ed:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01269f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01269f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01269fe:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126a04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126a0a:	29 d0                	sub    %edx,%eax
f0126a0c:	01 d8                	add    %ebx,%eax
f0126a0e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126a13:	39 c1                	cmp    %eax,%ecx
f0126a15:	74 17                	je     f0126a2e <test_kfreeall+0x97a>
f0126a17:	83 ec 04             	sub    $0x4,%esp
f0126a1a:	68 80 ae 13 f0       	push   $0xf013ae80
f0126a1f:	68 43 0a 00 00       	push   $0xa43
f0126a24:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126a29:	e8 cd 97 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a2e:	e8 09 d3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a36:	74 17                	je     f0126a4f <test_kfreeall+0x99b>
f0126a38:	83 ec 04             	sub    $0x4,%esp
f0126a3b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126a40:	68 44 0a 00 00       	push   $0xa44
f0126a45:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126a4a:	e8 ac 97 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a4f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a52:	e8 fa 5f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126a57:	29 c3                	sub    %eax,%ebx
f0126a59:	89 d8                	mov    %ebx,%eax
f0126a5b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126a60:	74 17                	je     f0126a79 <test_kfreeall+0x9c5>
f0126a62:	83 ec 04             	sub    $0x4,%esp
f0126a65:	68 1c ae 13 f0       	push   $0xf013ae1c
f0126a6a:	68 45 0a 00 00       	push   $0xa45
f0126a6f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126a74:	e8 82 97 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126a79:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126a80:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a83:	e8 c9 5f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126a88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a8b:	e8 ac d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a90:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126a93:	83 ec 0c             	sub    $0xc,%esp
f0126a96:	68 00 38 00 00       	push   $0x3800
f0126a9b:	e8 73 0d fe ff       	call   f0107813 <kmalloc>
f0126aa0:	83 c4 10             	add    $0x10,%esp
f0126aa3:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126aa9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126aaf:	89 c1                	mov    %eax,%ecx
f0126ab1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126ab8:	10 00 00 
f0126abb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126ac1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ac6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126acc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126ad2:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ad7:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126add:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126ae3:	29 d0                	sub    %edx,%eax
f0126ae5:	89 c3                	mov    %eax,%ebx
f0126ae7:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126aee:	10 00 00 
f0126af1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126af6:	0f b6 d0             	movzbl %al,%edx
f0126af9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126aff:	01 d0                	add    %edx,%eax
f0126b01:	48                   	dec    %eax
f0126b02:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126b08:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126b0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b13:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126b19:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126b1f:	29 d0                	sub    %edx,%eax
f0126b21:	01 c3                	add    %eax,%ebx
f0126b23:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126b2a:	10 00 00 
f0126b2d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126b32:	0f b6 c0             	movzbl %al,%eax
f0126b35:	c1 e0 04             	shl    $0x4,%eax
f0126b38:	89 c2                	mov    %eax,%edx
f0126b3a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126b40:	01 d0                	add    %edx,%eax
f0126b42:	48                   	dec    %eax
f0126b43:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126b49:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126b4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b54:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126b5a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126b60:	29 d0                	sub    %edx,%eax
f0126b62:	01 d8                	add    %ebx,%eax
f0126b64:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126b69:	39 c1                	cmp    %eax,%ecx
f0126b6b:	74 17                	je     f0126b84 <test_kfreeall+0xad0>
f0126b6d:	83 ec 04             	sub    $0x4,%esp
f0126b70:	68 80 ae 13 f0       	push   $0xf013ae80
f0126b75:	68 4c 0a 00 00       	push   $0xa4c
f0126b7a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126b7f:	e8 77 96 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b84:	e8 b3 d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b8c:	74 17                	je     f0126ba5 <test_kfreeall+0xaf1>
f0126b8e:	83 ec 04             	sub    $0x4,%esp
f0126b91:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126b96:	68 4d 0a 00 00       	push   $0xa4d
f0126b9b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126ba0:	e8 56 96 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ba5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126ba8:	e8 a4 5e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126bad:	29 c3                	sub    %eax,%ebx
f0126baf:	89 d8                	mov    %ebx,%eax
f0126bb1:	83 f8 04             	cmp    $0x4,%eax
f0126bb4:	74 17                	je     f0126bcd <test_kfreeall+0xb19>
f0126bb6:	83 ec 04             	sub    $0x4,%esp
f0126bb9:	68 1c ae 13 f0       	push   $0xf013ae1c
f0126bbe:	68 4e 0a 00 00       	push   $0xa4e
f0126bc3:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126bc8:	e8 2e 96 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126bcd:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126bd4:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126bd7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126bdd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126be7:	eb 0e                	jmp    f0126bf7 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126bec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126bef:	01 d0                	add    %edx,%eax
f0126bf1:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126bf4:	ff 45 f4             	incl   -0xc(%ebp)
f0126bf7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126bfd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c00:	7f e7                	jg     f0126be9 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126c02:	e8 4a 5e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126c07:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126c0d:	e8 2a d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126c12:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126c18:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126c1e:	83 ec 0c             	sub    $0xc,%esp
f0126c21:	50                   	push   %eax
f0126c22:	e8 b7 0c fe ff       	call   f01078de <kfree>
f0126c27:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c2a:	e8 0d d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126c2f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126c35:	74 17                	je     f0126c4e <test_kfreeall+0xb9a>
f0126c37:	83 ec 04             	sub    $0x4,%esp
f0126c3a:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126c3f:	68 5d 0a 00 00       	push   $0xa5d
f0126c44:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126c49:	e8 ad 95 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126c4e:	e8 fe 5d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126c53:	89 c2                	mov    %eax,%edx
f0126c55:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126c5b:	29 c2                	sub    %eax,%edx
f0126c5d:	89 d0                	mov    %edx,%eax
f0126c5f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126c64:	74 17                	je     f0126c7d <test_kfreeall+0xbc9>
f0126c66:	83 ec 04             	sub    $0x4,%esp
f0126c69:	68 24 b5 13 f0       	push   $0xf013b524
f0126c6e:	68 5e 0a 00 00       	push   $0xa5e
f0126c73:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126c78:	e8 7e 95 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c7d:	e8 cf 5d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126c82:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c88:	e8 af d0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126c8d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126c93:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126c99:	83 ec 0c             	sub    $0xc,%esp
f0126c9c:	50                   	push   %eax
f0126c9d:	e8 3c 0c fe ff       	call   f01078de <kfree>
f0126ca2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ca5:	e8 92 d0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126caa:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126cb0:	74 17                	je     f0126cc9 <test_kfreeall+0xc15>
f0126cb2:	83 ec 04             	sub    $0x4,%esp
f0126cb5:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126cba:	68 64 0a 00 00       	push   $0xa64
f0126cbf:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126cc4:	e8 32 95 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126cc9:	e8 83 5d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126cce:	89 c2                	mov    %eax,%edx
f0126cd0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126cd6:	29 c2                	sub    %eax,%edx
f0126cd8:	89 d0                	mov    %edx,%eax
f0126cda:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126cdf:	74 17                	je     f0126cf8 <test_kfreeall+0xc44>
f0126ce1:	83 ec 04             	sub    $0x4,%esp
f0126ce4:	68 24 b5 13 f0       	push   $0xf013b524
f0126ce9:	68 65 0a 00 00       	push   $0xa65
f0126cee:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126cf3:	e8 03 95 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cf8:	e8 54 5d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126cfd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d03:	e8 34 d0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126d08:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126d0e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126d14:	83 ec 0c             	sub    $0xc,%esp
f0126d17:	50                   	push   %eax
f0126d18:	e8 c1 0b fe ff       	call   f01078de <kfree>
f0126d1d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d20:	e8 17 d0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126d25:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126d2b:	74 17                	je     f0126d44 <test_kfreeall+0xc90>
f0126d2d:	83 ec 04             	sub    $0x4,%esp
f0126d30:	68 b4 ad 13 f0       	push   $0xf013adb4
f0126d35:	68 6b 0a 00 00       	push   $0xa6b
f0126d3a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126d3f:	e8 b7 94 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126d44:	e8 08 5d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126d49:	89 c2                	mov    %eax,%edx
f0126d4b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126d51:	29 c2                	sub    %eax,%edx
f0126d53:	89 d0                	mov    %edx,%eax
f0126d55:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126d5a:	74 17                	je     f0126d73 <test_kfreeall+0xcbf>
f0126d5c:	83 ec 04             	sub    $0x4,%esp
f0126d5f:	68 24 b5 13 f0       	push   $0xf013b524
f0126d64:	68 6c 0a 00 00       	push   $0xa6c
f0126d69:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126d6e:	e8 88 94 fd ff       	call   f01001fb <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126d73:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126d79:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126d7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d83:	eb 1e                	jmp    f0126da3 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126d85:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126d8b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126d8e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d91:	01 c8                	add    %ecx,%eax
f0126d93:	8a 00                	mov    (%eax),%al
f0126d95:	0f be c0             	movsbl %al,%eax
f0126d98:	01 d0                	add    %edx,%eax
f0126d9a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126da0:	ff 45 f4             	incl   -0xc(%ebp)
f0126da3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126da9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126dac:	7f d7                	jg     f0126d85 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126dae:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126db4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126dba:	01 c0                	add    %eax,%eax
f0126dbc:	39 c2                	cmp    %eax,%edx
f0126dbe:	74 17                	je     f0126dd7 <test_kfreeall+0xd23>
f0126dc0:	83 ec 04             	sub    $0x4,%esp
f0126dc3:	68 80 b5 13 f0       	push   $0xf013b580
f0126dc8:	68 78 0a 00 00       	push   $0xa78
f0126dcd:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126dd2:	e8 24 94 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126dd7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126ddd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126de0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126de7:	eb 1e                	jmp    f0126e07 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126de9:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126def:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126df2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126df5:	01 c8                	add    %ecx,%eax
f0126df7:	8a 00                	mov    (%eax),%al
f0126df9:	0f be c0             	movsbl %al,%eax
f0126dfc:	01 d0                	add    %edx,%eax
f0126dfe:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126e04:	ff 45 f4             	incl   -0xc(%ebp)
f0126e07:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126e0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e10:	7f d7                	jg     f0126de9 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126e12:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126e18:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126e1e:	89 c1                	mov    %eax,%ecx
f0126e20:	01 c9                	add    %ecx,%ecx
f0126e22:	01 c8                	add    %ecx,%eax
f0126e24:	39 c2                	cmp    %eax,%edx
f0126e26:	74 17                	je     f0126e3f <test_kfreeall+0xd8b>
f0126e28:	83 ec 04             	sub    $0x4,%esp
f0126e2b:	68 80 b5 13 f0       	push   $0xf013b580
f0126e30:	68 80 0a 00 00       	push   $0xa80
f0126e35:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126e3a:	e8 bc 93 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126e3f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126e45:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126e48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e4f:	eb 1e                	jmp    f0126e6f <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126e51:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126e57:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126e5a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e5d:	01 c8                	add    %ecx,%eax
f0126e5f:	8a 00                	mov    (%eax),%al
f0126e61:	0f be c0             	movsbl %al,%eax
f0126e64:	01 d0                	add    %edx,%eax
f0126e66:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126e6c:	ff 45 f4             	incl   -0xc(%ebp)
f0126e6f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126e75:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e78:	7f d7                	jg     f0126e51 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126e7a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126e80:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126e86:	c1 e2 02             	shl    $0x2,%edx
f0126e89:	39 d0                	cmp    %edx,%eax
f0126e8b:	74 17                	je     f0126ea4 <test_kfreeall+0xdf0>
f0126e8d:	83 ec 04             	sub    $0x4,%esp
f0126e90:	68 80 b5 13 f0       	push   $0xf013b580
f0126e95:	68 88 0a 00 00       	push   $0xa88
f0126e9a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126e9f:	e8 57 93 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126ea4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126eaa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126ead:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126eb4:	eb 1e                	jmp    f0126ed4 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126eb6:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126ebc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126ebf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ec2:	01 c8                	add    %ecx,%eax
f0126ec4:	8a 00                	mov    (%eax),%al
f0126ec6:	0f be c0             	movsbl %al,%eax
f0126ec9:	01 d0                	add    %edx,%eax
f0126ecb:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126ed1:	ff 45 f4             	incl   -0xc(%ebp)
f0126ed4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126eda:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126edd:	7f d7                	jg     f0126eb6 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126edf:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126ee5:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126eeb:	89 d0                	mov    %edx,%eax
f0126eed:	c1 e0 02             	shl    $0x2,%eax
f0126ef0:	01 d0                	add    %edx,%eax
f0126ef2:	39 c1                	cmp    %eax,%ecx
f0126ef4:	74 17                	je     f0126f0d <test_kfreeall+0xe59>
f0126ef6:	83 ec 04             	sub    $0x4,%esp
f0126ef9:	68 80 b5 13 f0       	push   $0xf013b580
f0126efe:	68 90 0a 00 00       	push   $0xa90
f0126f03:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126f08:	e8 ee 92 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126f0d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126f13:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126f16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f1d:	eb 1e                	jmp    f0126f3d <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126f1f:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126f25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126f28:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f2b:	01 c8                	add    %ecx,%eax
f0126f2d:	8a 00                	mov    (%eax),%al
f0126f2f:	0f be c0             	movsbl %al,%eax
f0126f32:	01 d0                	add    %edx,%eax
f0126f34:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126f3a:	ff 45 f4             	incl   -0xc(%ebp)
f0126f3d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126f43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f46:	7f d7                	jg     f0126f1f <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126f48:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126f4e:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126f54:	89 d0                	mov    %edx,%eax
f0126f56:	01 c0                	add    %eax,%eax
f0126f58:	01 d0                	add    %edx,%eax
f0126f5a:	01 c0                	add    %eax,%eax
f0126f5c:	01 d0                	add    %edx,%eax
f0126f5e:	39 c1                	cmp    %eax,%ecx
f0126f60:	74 17                	je     f0126f79 <test_kfreeall+0xec5>
f0126f62:	83 ec 04             	sub    $0x4,%esp
f0126f65:	68 80 b5 13 f0       	push   $0xf013b580
f0126f6a:	68 98 0a 00 00       	push   $0xa98
f0126f6f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0126f74:	e8 82 92 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f79:	e8 d3 5a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0126f7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f81:	e8 b6 cd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126f86:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126f89:	83 ec 0c             	sub    $0xc,%esp
f0126f8c:	68 00 50 00 00       	push   $0x5000
f0126f91:	e8 7d 08 fe ff       	call   f0107813 <kmalloc>
f0126f96:	83 c4 10             	add    $0x10,%esp
f0126f99:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f9f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126fa5:	89 c1                	mov    %eax,%ecx
f0126fa7:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126fae:	10 00 00 
f0126fb1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126fb7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fbc:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126fc2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126fc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fcd:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126fd3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126fd9:	29 d0                	sub    %edx,%eax
f0126fdb:	89 c3                	mov    %eax,%ebx
f0126fdd:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126fe4:	10 00 00 
f0126fe7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126fec:	0f b6 d0             	movzbl %al,%edx
f0126fef:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126ff5:	01 d0                	add    %edx,%eax
f0126ff7:	48                   	dec    %eax
f0126ff8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126ffe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127004:	ba 00 00 00 00       	mov    $0x0,%edx
f0127009:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012700f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127015:	29 d0                	sub    %edx,%eax
f0127017:	01 c3                	add    %eax,%ebx
f0127019:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127020:	10 00 00 
f0127023:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127028:	0f b6 c0             	movzbl %al,%eax
f012702b:	c1 e0 04             	shl    $0x4,%eax
f012702e:	89 c2                	mov    %eax,%edx
f0127030:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127036:	01 d0                	add    %edx,%eax
f0127038:	48                   	dec    %eax
f0127039:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012703f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127045:	ba 00 00 00 00       	mov    $0x0,%edx
f012704a:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127050:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127056:	29 d0                	sub    %edx,%eax
f0127058:	01 d8                	add    %ebx,%eax
f012705a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012705f:	39 c1                	cmp    %eax,%ecx
f0127061:	74 17                	je     f012707a <test_kfreeall+0xfc6>
f0127063:	83 ec 04             	sub    $0x4,%esp
f0127066:	68 80 ae 13 f0       	push   $0xf013ae80
f012706b:	68 a1 0a 00 00       	push   $0xaa1
f0127070:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127075:	e8 81 91 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012707a:	e8 bd cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012707f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127082:	74 17                	je     f012709b <test_kfreeall+0xfe7>
f0127084:	83 ec 04             	sub    $0x4,%esp
f0127087:	68 b4 ad 13 f0       	push   $0xf013adb4
f012708c:	68 a2 0a 00 00       	push   $0xaa2
f0127091:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127096:	e8 60 91 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012709b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012709e:	e8 ae 59 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01270a3:	29 c3                	sub    %eax,%ebx
f01270a5:	89 d8                	mov    %ebx,%eax
f01270a7:	83 f8 05             	cmp    $0x5,%eax
f01270aa:	74 17                	je     f01270c3 <test_kfreeall+0x100f>
f01270ac:	83 ec 04             	sub    $0x4,%esp
f01270af:	68 1c ae 13 f0       	push   $0xf013ae1c
f01270b4:	68 a3 0a 00 00       	push   $0xaa3
f01270b9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01270be:	e8 38 91 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01270c3:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01270ca:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01270cd:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01270d3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01270d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270dd:	eb 0e                	jmp    f01270ed <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f01270df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270e5:	01 d0                	add    %edx,%eax
f01270e7:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01270ea:	ff 45 f4             	incl   -0xc(%ebp)
f01270ed:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01270f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270f6:	7f e7                	jg     f01270df <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01270f8:	e8 54 59 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01270fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127100:	e8 37 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127105:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127108:	83 ec 0c             	sub    $0xc,%esp
f012710b:	68 00 00 10 00       	push   $0x100000
f0127110:	e8 fe 06 fe ff       	call   f0107813 <kmalloc>
f0127115:	83 c4 10             	add    $0x10,%esp
f0127118:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012711e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127124:	89 c1                	mov    %eax,%ecx
f0127126:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012712d:	10 00 00 
f0127130:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127136:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012713b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127141:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127147:	ba 00 00 00 00       	mov    $0x0,%edx
f012714c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127152:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127158:	29 d0                	sub    %edx,%eax
f012715a:	89 c3                	mov    %eax,%ebx
f012715c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127163:	10 00 00 
f0127166:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012716b:	0f b6 d0             	movzbl %al,%edx
f012716e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127174:	01 d0                	add    %edx,%eax
f0127176:	48                   	dec    %eax
f0127177:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012717d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127183:	ba 00 00 00 00       	mov    $0x0,%edx
f0127188:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012718e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127194:	29 d0                	sub    %edx,%eax
f0127196:	01 c3                	add    %eax,%ebx
f0127198:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012719f:	10 00 00 
f01271a2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01271a7:	0f b6 c0             	movzbl %al,%eax
f01271aa:	c1 e0 04             	shl    $0x4,%eax
f01271ad:	89 c2                	mov    %eax,%edx
f01271af:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01271b5:	01 d0                	add    %edx,%eax
f01271b7:	48                   	dec    %eax
f01271b8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01271be:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01271c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01271c9:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01271cf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01271d5:	29 d0                	sub    %edx,%eax
f01271d7:	01 d8                	add    %ebx,%eax
f01271d9:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01271de:	39 c1                	cmp    %eax,%ecx
f01271e0:	74 17                	je     f01271f9 <test_kfreeall+0x1145>
f01271e2:	83 ec 04             	sub    $0x4,%esp
f01271e5:	68 80 ae 13 f0       	push   $0xf013ae80
f01271ea:	68 af 0a 00 00       	push   $0xaaf
f01271ef:	68 9a ad 13 f0       	push   $0xf013ad9a
f01271f4:	e8 02 90 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271f9:	e8 3e cb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01271fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127201:	74 17                	je     f012721a <test_kfreeall+0x1166>
f0127203:	83 ec 04             	sub    $0x4,%esp
f0127206:	68 b4 ad 13 f0       	push   $0xf013adb4
f012720b:	68 b0 0a 00 00       	push   $0xab0
f0127210:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127215:	e8 e1 8f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012721a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012721d:	e8 2f 58 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127222:	29 c3                	sub    %eax,%ebx
f0127224:	89 d8                	mov    %ebx,%eax
f0127226:	3d 00 01 00 00       	cmp    $0x100,%eax
f012722b:	74 17                	je     f0127244 <test_kfreeall+0x1190>
f012722d:	83 ec 04             	sub    $0x4,%esp
f0127230:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127235:	68 b1 0a 00 00       	push   $0xab1
f012723a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012723f:	e8 b7 8f fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127244:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f012724b:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012724e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127254:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127257:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012725e:	eb 0e                	jmp    f012726e <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127260:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127263:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127266:	01 d0                	add    %edx,%eax
f0127268:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012726b:	ff 45 f4             	incl   -0xc(%ebp)
f012726e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127274:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127277:	7f e7                	jg     f0127260 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127279:	e8 d3 57 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012727e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127281:	e8 b6 ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127286:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127289:	e8 ee 07 fe ff       	call   f0107a7c <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012728e:	e8 a9 ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127293:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127296:	74 17                	je     f01272af <test_kfreeall+0x11fb>
f0127298:	83 ec 04             	sub    $0x4,%esp
f012729b:	68 b4 ad 13 f0       	push   $0xf013adb4
f01272a0:	68 c1 0a 00 00       	push   $0xac1
f01272a5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01272aa:	e8 4c 8f fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01272af:	e8 9d 57 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01272b4:	89 c2                	mov    %eax,%edx
f01272b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01272b9:	89 d1                	mov    %edx,%ecx
f01272bb:	29 c1                	sub    %eax,%ecx
f01272bd:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01272c4:	10 00 00 
f01272c7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01272cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272d2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01272d8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01272de:	ba 00 00 00 00       	mov    $0x0,%edx
f01272e3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01272e9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01272ef:	29 d0                	sub    %edx,%eax
f01272f1:	89 c3                	mov    %eax,%ebx
f01272f3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01272fa:	10 00 00 
f01272fd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127302:	0f b6 d0             	movzbl %al,%edx
f0127305:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012730b:	01 d0                	add    %edx,%eax
f012730d:	48                   	dec    %eax
f012730e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127314:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012731a:	ba 00 00 00 00       	mov    $0x0,%edx
f012731f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127325:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012732b:	29 d0                	sub    %edx,%eax
f012732d:	01 c3                	add    %eax,%ebx
f012732f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127336:	10 00 00 
f0127339:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012733e:	0f b6 c0             	movzbl %al,%eax
f0127341:	c1 e0 04             	shl    $0x4,%eax
f0127344:	89 c2                	mov    %eax,%edx
f0127346:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012734c:	01 d0                	add    %edx,%eax
f012734e:	48                   	dec    %eax
f012734f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127355:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012735b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127360:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127366:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012736c:	29 d0                	sub    %edx,%eax
f012736e:	01 d8                	add    %ebx,%eax
f0127370:	05 00 40 00 00       	add    $0x4000,%eax
f0127375:	c1 e8 0c             	shr    $0xc,%eax
f0127378:	05 0d 04 00 00       	add    $0x40d,%eax
f012737d:	39 c1                	cmp    %eax,%ecx
f012737f:	74 17                	je     f0127398 <test_kfreeall+0x12e4>
f0127381:	83 ec 04             	sub    $0x4,%esp
f0127384:	68 24 b5 13 f0       	push   $0xf013b524
f0127389:	68 c2 0a 00 00       	push   $0xac2
f012738e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127393:	e8 63 8e fd ff       	call   f01001fb <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127398:	83 ec 0c             	sub    $0xc,%esp
f012739b:	6a 03                	push   $0x3
f012739d:	e8 4f 5b fe ff       	call   f010cef1 <sys_bypassPageFault>
f01273a2:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01273a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273ac:	e9 82 00 00 00       	jmp    f0127433 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01273b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273b4:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01273bb:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01273be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273c1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01273c4:	e8 16 5b fe ff       	call   f010cedf <sys_rcr2>
f01273c9:	89 c2                	mov    %eax,%edx
f01273cb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273ce:	39 c2                	cmp    %eax,%edx
f01273d0:	74 17                	je     f01273e9 <test_kfreeall+0x1335>
f01273d2:	83 ec 04             	sub    $0x4,%esp
f01273d5:	68 00 b6 13 f0       	push   $0xf013b600
f01273da:	68 d0 0a 00 00       	push   $0xad0
f01273df:	68 9a ad 13 f0       	push   $0xf013ad9a
f01273e4:	e8 12 8e fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f01273e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273ec:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01273f3:	89 c2                	mov    %eax,%edx
f01273f5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273f8:	01 d0                	add    %edx,%eax
f01273fa:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01273fd:	e8 dd 5a fe ff       	call   f010cedf <sys_rcr2>
f0127402:	89 c2                	mov    %eax,%edx
f0127404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127407:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012740e:	89 c1                	mov    %eax,%ecx
f0127410:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127413:	01 c8                	add    %ecx,%eax
f0127415:	39 c2                	cmp    %eax,%edx
f0127417:	74 17                	je     f0127430 <test_kfreeall+0x137c>
f0127419:	83 ec 04             	sub    $0x4,%esp
f012741c:	68 00 b6 13 f0       	push   $0xf013b600
f0127421:	68 d2 0a 00 00       	push   $0xad2
f0127426:	68 9a ad 13 f0       	push   $0xf013ad9a
f012742b:	e8 cb 8d fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127430:	ff 45 f4             	incl   -0xc(%ebp)
f0127433:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127437:	0f 8e 74 ff ff ff    	jle    f01273b1 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012743d:	83 ec 0c             	sub    $0xc,%esp
f0127440:	6a 00                	push   $0x0
f0127442:	e8 aa 5a fe ff       	call   f010cef1 <sys_bypassPageFault>
f0127447:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012744a:	e8 02 56 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012744f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127452:	e8 e5 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127457:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012745a:	83 ec 0c             	sub    $0xc,%esp
f012745d:	68 00 00 40 00       	push   $0x400000
f0127462:	e8 ac 03 fe ff       	call   f0107813 <kmalloc>
f0127467:	83 c4 10             	add    $0x10,%esp
f012746a:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127470:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127476:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f012747b:	74 17                	je     f0127494 <test_kfreeall+0x13e0>
f012747d:	83 ec 04             	sub    $0x4,%esp
f0127480:	68 a4 ba 13 f0       	push   $0xf013baa4
f0127485:	68 de 0a 00 00       	push   $0xade
f012748a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012748f:	e8 67 8d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127494:	e8 a3 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127499:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012749c:	74 17                	je     f01274b5 <test_kfreeall+0x1401>
f012749e:	83 ec 04             	sub    $0x4,%esp
f01274a1:	68 b4 ad 13 f0       	push   $0xf013adb4
f01274a6:	68 df 0a 00 00       	push   $0xadf
f01274ab:	68 9a ad 13 f0       	push   $0xf013ad9a
f01274b0:	e8 46 8d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01274b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01274b8:	e8 94 55 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01274bd:	29 c3                	sub    %eax,%ebx
f01274bf:	89 d8                	mov    %ebx,%eax
f01274c1:	3d 00 04 00 00       	cmp    $0x400,%eax
f01274c6:	74 17                	je     f01274df <test_kfreeall+0x142b>
f01274c8:	83 ec 04             	sub    $0x4,%esp
f01274cb:	68 1c ae 13 f0       	push   $0xf013ae1c
f01274d0:	68 e0 0a 00 00       	push   $0xae0
f01274d5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01274da:	e8 1c 8d fd ff       	call   f01001fb <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01274df:	e8 6d 55 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01274e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274e7:	e8 50 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01274ef:	83 ec 0c             	sub    $0xc,%esp
f01274f2:	68 00 30 00 00       	push   $0x3000
f01274f7:	e8 17 03 fe ff       	call   f0107813 <kmalloc>
f01274fc:	83 c4 10             	add    $0x10,%esp
f01274ff:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127505:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012750b:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127510:	74 17                	je     f0127529 <test_kfreeall+0x1475>
f0127512:	83 ec 04             	sub    $0x4,%esp
f0127515:	68 a4 ba 13 f0       	push   $0xf013baa4
f012751a:	68 e6 0a 00 00       	push   $0xae6
f012751f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127524:	e8 d2 8c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127529:	e8 0e c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012752e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127531:	74 17                	je     f012754a <test_kfreeall+0x1496>
f0127533:	83 ec 04             	sub    $0x4,%esp
f0127536:	68 b4 ad 13 f0       	push   $0xf013adb4
f012753b:	68 e7 0a 00 00       	push   $0xae7
f0127540:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127545:	e8 b1 8c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012754a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012754d:	e8 ff 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127552:	29 c3                	sub    %eax,%ebx
f0127554:	89 d8                	mov    %ebx,%eax
f0127556:	83 f8 03             	cmp    $0x3,%eax
f0127559:	74 17                	je     f0127572 <test_kfreeall+0x14be>
f012755b:	83 ec 04             	sub    $0x4,%esp
f012755e:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127563:	68 e8 0a 00 00       	push   $0xae8
f0127568:	68 9a ad 13 f0       	push   $0xf013ad9a
f012756d:	e8 89 8c fd ff       	call   f01001fb <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127572:	e8 da 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127577:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012757a:	e8 bd c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012757f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127582:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127588:	83 ec 0c             	sub    $0xc,%esp
f012758b:	50                   	push   %eax
f012758c:	e8 4d 03 fe ff       	call   f01078de <kfree>
f0127591:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127594:	e8 a3 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127599:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012759c:	74 17                	je     f01275b5 <test_kfreeall+0x1501>
f012759e:	83 ec 04             	sub    $0x4,%esp
f01275a1:	68 b4 ad 13 f0       	push   $0xf013adb4
f01275a6:	68 f2 0a 00 00       	push   $0xaf2
f01275ab:	68 9a ad 13 f0       	push   $0xf013ad9a
f01275b0:	e8 46 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01275b5:	e8 97 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01275ba:	89 c2                	mov    %eax,%edx
f01275bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01275bf:	29 c2                	sub    %eax,%edx
f01275c1:	89 d0                	mov    %edx,%eax
f01275c3:	83 f8 03             	cmp    $0x3,%eax
f01275c6:	74 17                	je     f01275df <test_kfreeall+0x152b>
f01275c8:	83 ec 04             	sub    $0x4,%esp
f01275cb:	68 4c b6 13 f0       	push   $0xf013b64c
f01275d0:	68 f3 0a 00 00       	push   $0xaf3
f01275d5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01275da:	e8 1c 8c fd ff       	call   f01001fb <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01275df:	e8 6d 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01275e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275e7:	e8 50 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01275ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01275ef:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01275f5:	83 ec 0c             	sub    $0xc,%esp
f01275f8:	50                   	push   %eax
f01275f9:	e8 e0 02 fe ff       	call   f01078de <kfree>
f01275fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127601:	e8 36 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127606:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127609:	74 17                	je     f0127622 <test_kfreeall+0x156e>
f012760b:	83 ec 04             	sub    $0x4,%esp
f012760e:	68 b4 ad 13 f0       	push   $0xf013adb4
f0127613:	68 fc 0a 00 00       	push   $0xafc
f0127618:	68 9a ad 13 f0       	push   $0xf013ad9a
f012761d:	e8 d9 8b fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127622:	e8 2a 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127627:	89 c2                	mov    %eax,%edx
f0127629:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012762c:	39 c2                	cmp    %eax,%edx
f012762e:	74 17                	je     f0127647 <test_kfreeall+0x1593>
f0127630:	83 ec 04             	sub    $0x4,%esp
f0127633:	68 4c b6 13 f0       	push   $0xf013b64c
f0127638:	68 fd 0a 00 00       	push   $0xafd
f012763d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127642:	e8 b4 8b fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127647:	e8 05 54 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012764c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012764f:	e8 e8 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127654:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127657:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012765d:	83 ec 0c             	sub    $0xc,%esp
f0127660:	50                   	push   %eax
f0127661:	e8 78 02 fe ff       	call   f01078de <kfree>
f0127666:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127669:	e8 ce c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012766e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127671:	74 17                	je     f012768a <test_kfreeall+0x15d6>
f0127673:	83 ec 04             	sub    $0x4,%esp
f0127676:	68 b4 ad 13 f0       	push   $0xf013adb4
f012767b:	68 03 0b 00 00       	push   $0xb03
f0127680:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127685:	e8 71 8b fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012768a:	e8 c2 53 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012768f:	89 c2                	mov    %eax,%edx
f0127691:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127694:	39 c2                	cmp    %eax,%edx
f0127696:	74 17                	je     f01276af <test_kfreeall+0x15fb>
f0127698:	83 ec 04             	sub    $0x4,%esp
f012769b:	68 4c b6 13 f0       	push   $0xf013b64c
f01276a0:	68 04 0b 00 00       	push   $0xb04
f01276a5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01276aa:	e8 4c 8b fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01276af:	e8 9d 53 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01276b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276b7:	e8 80 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01276bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01276bf:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01276c5:	83 ec 0c             	sub    $0xc,%esp
f01276c8:	50                   	push   %eax
f01276c9:	e8 10 02 fe ff       	call   f01078de <kfree>
f01276ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276d1:	e8 66 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01276d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01276d9:	74 17                	je     f01276f2 <test_kfreeall+0x163e>
f01276db:	83 ec 04             	sub    $0x4,%esp
f01276de:	68 b4 ad 13 f0       	push   $0xf013adb4
f01276e3:	68 0a 0b 00 00       	push   $0xb0a
f01276e8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01276ed:	e8 09 8b fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01276f2:	e8 5a 53 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01276f7:	89 c2                	mov    %eax,%edx
f01276f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01276fc:	39 c2                	cmp    %eax,%edx
f01276fe:	74 17                	je     f0127717 <test_kfreeall+0x1663>
f0127700:	83 ec 04             	sub    $0x4,%esp
f0127703:	68 4c b6 13 f0       	push   $0xf013b64c
f0127708:	68 0b 0b 00 00       	push   $0xb0b
f012770d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127712:	e8 e4 8a fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127717:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012771e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127725:	eb 48                	jmp    f012776f <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127727:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012772a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012772f:	83 ec 04             	sub    $0x4,%esp
f0127732:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127738:	51                   	push   %ecx
f0127739:	52                   	push   %edx
f012773a:	50                   	push   %eax
f012773b:	e8 9a f2 fd ff       	call   f01069da <get_page_table>
f0127740:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127743:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127749:	85 c0                	test   %eax,%eax
f012774b:	75 17                	jne    f0127764 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012774d:	83 ec 04             	sub    $0x4,%esp
f0127750:	68 9c b6 13 f0       	push   $0xf013b69c
f0127755:	68 18 0b 00 00       	push   $0xb18
f012775a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012775f:	e8 97 8a fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127764:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012776b:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012776f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127773:	78 b2                	js     f0127727 <test_kfreeall+0x1673>
f0127775:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127779:	7f 09                	jg     f0127784 <test_kfreeall+0x16d0>
f012777b:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127782:	76 a3                	jbe    f0127727 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127784:	83 ec 0c             	sub    $0xc,%esp
f0127787:	68 f8 ba 13 f0       	push   $0xf013baf8
f012778c:	e8 f1 94 fd ff       	call   f0100c82 <cprintf>
f0127791:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127794:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127799:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012779c:	5b                   	pop    %ebx
f012779d:	5f                   	pop    %edi
f012779e:	5d                   	pop    %ebp
f012779f:	c3                   	ret    

f01277a0 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01277a0:	55                   	push   %ebp
f01277a1:	89 e5                	mov    %esp,%ebp
f01277a3:	57                   	push   %edi
f01277a4:	53                   	push   %ebx
f01277a5:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f01277ab:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01277af:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01277b3:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01277b9:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01277bf:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01277c6:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01277cd:	e8 7f 52 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01277d2:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01277d5:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01277db:	b9 14 00 00 00       	mov    $0x14,%ecx
f01277e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01277e5:	89 d7                	mov    %edx,%edi
f01277e7:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01277e9:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01277ef:	b9 14 00 00 00       	mov    $0x14,%ecx
f01277f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01277f9:	89 d7                	mov    %edx,%edi
f01277fb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01277fd:	e8 4f 52 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127802:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127805:	e8 32 c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012780a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012780d:	83 ec 0c             	sub    $0xc,%esp
f0127810:	68 00 fc 1f 00       	push   $0x1ffc00
f0127815:	e8 f9 ff fd ff       	call   f0107813 <kmalloc>
f012781a:	83 c4 10             	add    $0x10,%esp
f012781d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127823:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127829:	89 c1                	mov    %eax,%ecx
f012782b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127832:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127835:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012783a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012783d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127840:	ba 00 00 00 00       	mov    $0x0,%edx
f0127845:	f7 75 d4             	divl   -0x2c(%ebp)
f0127848:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012784b:	29 d0                	sub    %edx,%eax
f012784d:	89 c3                	mov    %eax,%ebx
f012784f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127856:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012785b:	0f b6 d0             	movzbl %al,%edx
f012785e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127861:	01 d0                	add    %edx,%eax
f0127863:	48                   	dec    %eax
f0127864:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127867:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012786a:	ba 00 00 00 00       	mov    $0x0,%edx
f012786f:	f7 75 cc             	divl   -0x34(%ebp)
f0127872:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127875:	29 d0                	sub    %edx,%eax
f0127877:	01 c3                	add    %eax,%ebx
f0127879:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127880:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127885:	0f b6 c0             	movzbl %al,%eax
f0127888:	c1 e0 04             	shl    $0x4,%eax
f012788b:	89 c2                	mov    %eax,%edx
f012788d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127890:	01 d0                	add    %edx,%eax
f0127892:	48                   	dec    %eax
f0127893:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127896:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127899:	ba 00 00 00 00       	mov    $0x0,%edx
f012789e:	f7 75 c4             	divl   -0x3c(%ebp)
f01278a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01278a4:	29 d0                	sub    %edx,%eax
f01278a6:	01 d8                	add    %ebx,%eax
f01278a8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01278ad:	39 c1                	cmp    %eax,%ecx
f01278af:	74 17                	je     f01278c8 <test_kexpand+0x128>
f01278b1:	83 ec 04             	sub    $0x4,%esp
f01278b4:	68 80 ae 13 f0       	push   $0xf013ae80
f01278b9:	68 43 0b 00 00       	push   $0xb43
f01278be:	68 9a ad 13 f0       	push   $0xf013ad9a
f01278c3:	e8 33 89 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278c8:	e8 6f c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01278cd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278d0:	74 17                	je     f01278e9 <test_kexpand+0x149>
f01278d2:	83 ec 04             	sub    $0x4,%esp
f01278d5:	68 b4 ad 13 f0       	push   $0xf013adb4
f01278da:	68 44 0b 00 00       	push   $0xb44
f01278df:	68 9a ad 13 f0       	push   $0xf013ad9a
f01278e4:	e8 12 89 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278e9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01278ec:	e8 60 51 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01278f1:	29 c3                	sub    %eax,%ebx
f01278f3:	89 d8                	mov    %ebx,%eax
f01278f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278fa:	74 17                	je     f0127913 <test_kexpand+0x173>
f01278fc:	83 ec 04             	sub    $0x4,%esp
f01278ff:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127904:	68 45 0b 00 00       	push   $0xb45
f0127909:	68 9a ad 13 f0       	push   $0xf013ad9a
f012790e:	e8 e8 88 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127913:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012791a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012791d:	e8 2f 51 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127922:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127925:	e8 12 c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012792a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012792d:	83 ec 0c             	sub    $0xc,%esp
f0127930:	68 00 fc 1f 00       	push   $0x1ffc00
f0127935:	e8 d9 fe fd ff       	call   f0107813 <kmalloc>
f012793a:	83 c4 10             	add    $0x10,%esp
f012793d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127943:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127949:	89 c1                	mov    %eax,%ecx
f012794b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127952:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127955:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012795a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012795d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127960:	ba 00 00 00 00       	mov    $0x0,%edx
f0127965:	f7 75 bc             	divl   -0x44(%ebp)
f0127968:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012796b:	29 d0                	sub    %edx,%eax
f012796d:	89 c3                	mov    %eax,%ebx
f012796f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127976:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012797b:	0f b6 d0             	movzbl %al,%edx
f012797e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127981:	01 d0                	add    %edx,%eax
f0127983:	48                   	dec    %eax
f0127984:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127987:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012798a:	ba 00 00 00 00       	mov    $0x0,%edx
f012798f:	f7 75 b4             	divl   -0x4c(%ebp)
f0127992:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127995:	29 d0                	sub    %edx,%eax
f0127997:	01 c3                	add    %eax,%ebx
f0127999:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01279a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01279a5:	0f b6 c0             	movzbl %al,%eax
f01279a8:	c1 e0 04             	shl    $0x4,%eax
f01279ab:	89 c2                	mov    %eax,%edx
f01279ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01279b0:	01 d0                	add    %edx,%eax
f01279b2:	48                   	dec    %eax
f01279b3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01279b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01279b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01279be:	f7 75 ac             	divl   -0x54(%ebp)
f01279c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01279c4:	29 d0                	sub    %edx,%eax
f01279c6:	01 d8                	add    %ebx,%eax
f01279c8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01279cd:	39 c1                	cmp    %eax,%ecx
f01279cf:	74 17                	je     f01279e8 <test_kexpand+0x248>
f01279d1:	83 ec 04             	sub    $0x4,%esp
f01279d4:	68 80 ae 13 f0       	push   $0xf013ae80
f01279d9:	68 4c 0b 00 00       	push   $0xb4c
f01279de:	68 9a ad 13 f0       	push   $0xf013ad9a
f01279e3:	e8 13 88 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279e8:	e8 4f c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01279ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279f0:	74 17                	je     f0127a09 <test_kexpand+0x269>
f01279f2:	83 ec 04             	sub    $0x4,%esp
f01279f5:	68 b4 ad 13 f0       	push   $0xf013adb4
f01279fa:	68 4d 0b 00 00       	push   $0xb4d
f01279ff:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127a04:	e8 f2 87 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a09:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a0c:	e8 40 50 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127a11:	29 c3                	sub    %eax,%ebx
f0127a13:	89 d8                	mov    %ebx,%eax
f0127a15:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127a1a:	74 17                	je     f0127a33 <test_kexpand+0x293>
f0127a1c:	83 ec 04             	sub    $0x4,%esp
f0127a1f:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127a24:	68 4e 0b 00 00       	push   $0xb4e
f0127a29:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127a2e:	e8 c8 87 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127a33:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127a3a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127a3d:	e8 0f 50 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127a42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a45:	e8 f2 c2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127a4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127a4d:	83 ec 0c             	sub    $0xc,%esp
f0127a50:	68 00 08 00 00       	push   $0x800
f0127a55:	e8 b9 fd fd ff       	call   f0107813 <kmalloc>
f0127a5a:	83 c4 10             	add    $0x10,%esp
f0127a5d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a63:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a69:	89 c1                	mov    %eax,%ecx
f0127a6b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127a72:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127a75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a7a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127a7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a85:	f7 75 a4             	divl   -0x5c(%ebp)
f0127a88:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127a8b:	29 d0                	sub    %edx,%eax
f0127a8d:	89 c3                	mov    %eax,%ebx
f0127a8f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127a96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127a9b:	0f b6 d0             	movzbl %al,%edx
f0127a9e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127aa1:	01 d0                	add    %edx,%eax
f0127aa3:	48                   	dec    %eax
f0127aa4:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127aa7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127aaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0127aaf:	f7 75 9c             	divl   -0x64(%ebp)
f0127ab2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127ab5:	29 d0                	sub    %edx,%eax
f0127ab7:	01 c3                	add    %eax,%ebx
f0127ab9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127ac0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127ac5:	0f b6 c0             	movzbl %al,%eax
f0127ac8:	c1 e0 04             	shl    $0x4,%eax
f0127acb:	89 c2                	mov    %eax,%edx
f0127acd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127ad0:	01 d0                	add    %edx,%eax
f0127ad2:	48                   	dec    %eax
f0127ad3:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127ad6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127ad9:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ade:	f7 75 94             	divl   -0x6c(%ebp)
f0127ae1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127ae4:	29 d0                	sub    %edx,%eax
f0127ae6:	01 d8                	add    %ebx,%eax
f0127ae8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127aed:	39 c1                	cmp    %eax,%ecx
f0127aef:	74 17                	je     f0127b08 <test_kexpand+0x368>
f0127af1:	83 ec 04             	sub    $0x4,%esp
f0127af4:	68 80 ae 13 f0       	push   $0xf013ae80
f0127af9:	68 55 0b 00 00       	push   $0xb55
f0127afe:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127b03:	e8 f3 86 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b08:	e8 2f c2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127b0d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b10:	74 17                	je     f0127b29 <test_kexpand+0x389>
f0127b12:	83 ec 04             	sub    $0x4,%esp
f0127b15:	68 b4 ad 13 f0       	push   $0xf013adb4
f0127b1a:	68 56 0b 00 00       	push   $0xb56
f0127b1f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127b24:	e8 d2 86 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b29:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b2c:	e8 20 4f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127b31:	29 c3                	sub    %eax,%ebx
f0127b33:	89 d8                	mov    %ebx,%eax
f0127b35:	83 f8 01             	cmp    $0x1,%eax
f0127b38:	74 17                	je     f0127b51 <test_kexpand+0x3b1>
f0127b3a:	83 ec 04             	sub    $0x4,%esp
f0127b3d:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127b42:	68 57 0b 00 00       	push   $0xb57
f0127b47:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127b4c:	e8 aa 86 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127b51:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127b58:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127b5b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127b61:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127b64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b6b:	eb 0e                	jmp    f0127b7b <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127b6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b70:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b73:	01 d0                	add    %edx,%eax
f0127b75:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127b78:	ff 45 f4             	incl   -0xc(%ebp)
f0127b7b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127b81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b84:	7f e7                	jg     f0127b6d <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b86:	e8 c6 4e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127b8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b8e:	e8 a9 c1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127b93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127b96:	83 ec 0c             	sub    $0xc,%esp
f0127b99:	68 00 08 00 00       	push   $0x800
f0127b9e:	e8 70 fc fd ff       	call   f0107813 <kmalloc>
f0127ba3:	83 c4 10             	add    $0x10,%esp
f0127ba6:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bac:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127bb2:	89 c1                	mov    %eax,%ecx
f0127bb4:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127bbb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127bbe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bc3:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127bc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127bc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bce:	f7 75 88             	divl   -0x78(%ebp)
f0127bd1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127bd4:	29 d0                	sub    %edx,%eax
f0127bd6:	89 c3                	mov    %eax,%ebx
f0127bd8:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127bdf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127be4:	0f b6 d0             	movzbl %al,%edx
f0127be7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127bea:	01 d0                	add    %edx,%eax
f0127bec:	48                   	dec    %eax
f0127bed:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127bf3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127bf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bfe:	f7 75 80             	divl   -0x80(%ebp)
f0127c01:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127c07:	29 d0                	sub    %edx,%eax
f0127c09:	01 c3                	add    %eax,%ebx
f0127c0b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127c12:	10 00 00 
f0127c15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127c1a:	0f b6 c0             	movzbl %al,%eax
f0127c1d:	c1 e0 04             	shl    $0x4,%eax
f0127c20:	89 c2                	mov    %eax,%edx
f0127c22:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127c28:	01 d0                	add    %edx,%eax
f0127c2a:	48                   	dec    %eax
f0127c2b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127c31:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127c37:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c3c:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127c42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127c48:	29 d0                	sub    %edx,%eax
f0127c4a:	01 d8                	add    %ebx,%eax
f0127c4c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127c51:	39 c1                	cmp    %eax,%ecx
f0127c53:	74 17                	je     f0127c6c <test_kexpand+0x4cc>
f0127c55:	83 ec 04             	sub    $0x4,%esp
f0127c58:	68 80 ae 13 f0       	push   $0xf013ae80
f0127c5d:	68 63 0b 00 00       	push   $0xb63
f0127c62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127c67:	e8 8f 85 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c6c:	e8 cb c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127c71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c74:	74 17                	je     f0127c8d <test_kexpand+0x4ed>
f0127c76:	83 ec 04             	sub    $0x4,%esp
f0127c79:	68 b4 ad 13 f0       	push   $0xf013adb4
f0127c7e:	68 64 0b 00 00       	push   $0xb64
f0127c83:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127c88:	e8 6e 85 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c8d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c90:	e8 bc 4d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127c95:	29 c3                	sub    %eax,%ebx
f0127c97:	89 d8                	mov    %ebx,%eax
f0127c99:	83 f8 01             	cmp    $0x1,%eax
f0127c9c:	74 17                	je     f0127cb5 <test_kexpand+0x515>
f0127c9e:	83 ec 04             	sub    $0x4,%esp
f0127ca1:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127ca6:	68 65 0b 00 00       	push   $0xb65
f0127cab:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127cb0:	e8 46 85 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127cb5:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127cbc:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127cbf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127cc5:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127cc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ccf:	eb 0e                	jmp    f0127cdf <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127cd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127cd4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127cd7:	01 d0                	add    %edx,%eax
f0127cd9:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127cdc:	ff 45 f4             	incl   -0xc(%ebp)
f0127cdf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127ce5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ce8:	7f e7                	jg     f0127cd1 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cea:	e8 62 4d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127cef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cf2:	e8 45 c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127cf7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127cfa:	83 ec 0c             	sub    $0xc,%esp
f0127cfd:	68 00 1c 00 00       	push   $0x1c00
f0127d02:	e8 0c fb fd ff       	call   f0107813 <kmalloc>
f0127d07:	83 c4 10             	add    $0x10,%esp
f0127d0a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d10:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127d16:	89 c1                	mov    %eax,%ecx
f0127d18:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127d1f:	10 00 00 
f0127d22:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d2d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127d33:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d3e:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127d44:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127d4a:	29 d0                	sub    %edx,%eax
f0127d4c:	89 c3                	mov    %eax,%ebx
f0127d4e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127d55:	10 00 00 
f0127d58:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d5d:	0f b6 d0             	movzbl %al,%edx
f0127d60:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127d66:	01 d0                	add    %edx,%eax
f0127d68:	48                   	dec    %eax
f0127d69:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127d6f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d7a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127d80:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127d86:	29 d0                	sub    %edx,%eax
f0127d88:	01 c3                	add    %eax,%ebx
f0127d8a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127d91:	10 00 00 
f0127d94:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d99:	0f b6 c0             	movzbl %al,%eax
f0127d9c:	c1 e0 04             	shl    $0x4,%eax
f0127d9f:	89 c2                	mov    %eax,%edx
f0127da1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127da7:	01 d0                	add    %edx,%eax
f0127da9:	48                   	dec    %eax
f0127daa:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127db0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dbb:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127dc1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127dc7:	29 d0                	sub    %edx,%eax
f0127dc9:	01 d8                	add    %ebx,%eax
f0127dcb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127dd0:	39 c1                	cmp    %eax,%ecx
f0127dd2:	74 17                	je     f0127deb <test_kexpand+0x64b>
f0127dd4:	83 ec 04             	sub    $0x4,%esp
f0127dd7:	68 80 ae 13 f0       	push   $0xf013ae80
f0127ddc:	68 71 0b 00 00       	push   $0xb71
f0127de1:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127de6:	e8 10 84 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127deb:	e8 4c bf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127df0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127df3:	74 17                	je     f0127e0c <test_kexpand+0x66c>
f0127df5:	83 ec 04             	sub    $0x4,%esp
f0127df8:	68 b4 ad 13 f0       	push   $0xf013adb4
f0127dfd:	68 72 0b 00 00       	push   $0xb72
f0127e02:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127e07:	e8 ef 83 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e0c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e0f:	e8 3d 4c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127e14:	29 c3                	sub    %eax,%ebx
f0127e16:	89 d8                	mov    %ebx,%eax
f0127e18:	83 f8 02             	cmp    $0x2,%eax
f0127e1b:	74 17                	je     f0127e34 <test_kexpand+0x694>
f0127e1d:	83 ec 04             	sub    $0x4,%esp
f0127e20:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127e25:	68 73 0b 00 00       	push   $0xb73
f0127e2a:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127e2f:	e8 c7 83 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127e34:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127e3b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127e3e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127e44:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127e47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e4e:	eb 0e                	jmp    f0127e5e <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127e50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e53:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127e56:	01 d0                	add    %edx,%eax
f0127e58:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127e5b:	ff 45 f4             	incl   -0xc(%ebp)
f0127e5e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127e64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e67:	7f e7                	jg     f0127e50 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e69:	e8 e3 4b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127e6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e71:	e8 c6 be fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127e76:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127e79:	83 ec 0c             	sub    $0xc,%esp
f0127e7c:	68 00 fc 2f 00       	push   $0x2ffc00
f0127e81:	e8 8d f9 fd ff       	call   f0107813 <kmalloc>
f0127e86:	83 c4 10             	add    $0x10,%esp
f0127e89:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e8f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127e95:	89 c1                	mov    %eax,%ecx
f0127e97:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127e9e:	10 00 00 
f0127ea1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127ea7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127eac:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127eb2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127eb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ebd:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127ec3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127ec9:	29 d0                	sub    %edx,%eax
f0127ecb:	89 c3                	mov    %eax,%ebx
f0127ecd:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127ed4:	10 00 00 
f0127ed7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127edc:	0f b6 d0             	movzbl %al,%edx
f0127edf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127ee5:	01 d0                	add    %edx,%eax
f0127ee7:	48                   	dec    %eax
f0127ee8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127eee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127eff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127f05:	29 d0                	sub    %edx,%eax
f0127f07:	01 c3                	add    %eax,%ebx
f0127f09:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127f10:	10 00 00 
f0127f13:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127f18:	0f b6 c0             	movzbl %al,%eax
f0127f1b:	c1 e0 04             	shl    $0x4,%eax
f0127f1e:	89 c2                	mov    %eax,%edx
f0127f20:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127f26:	01 d0                	add    %edx,%eax
f0127f28:	48                   	dec    %eax
f0127f29:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127f2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127f35:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f3a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127f40:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127f46:	29 d0                	sub    %edx,%eax
f0127f48:	01 d8                	add    %ebx,%eax
f0127f4a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127f4f:	39 c1                	cmp    %eax,%ecx
f0127f51:	74 17                	je     f0127f6a <test_kexpand+0x7ca>
f0127f53:	83 ec 04             	sub    $0x4,%esp
f0127f56:	68 80 ae 13 f0       	push   $0xf013ae80
f0127f5b:	68 7f 0b 00 00       	push   $0xb7f
f0127f60:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127f65:	e8 91 82 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f6a:	e8 cd bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127f6f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f72:	74 17                	je     f0127f8b <test_kexpand+0x7eb>
f0127f74:	83 ec 04             	sub    $0x4,%esp
f0127f77:	68 b4 ad 13 f0       	push   $0xf013adb4
f0127f7c:	68 80 0b 00 00       	push   $0xb80
f0127f81:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127f86:	e8 70 82 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f8b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f8e:	e8 be 4a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127f93:	29 c3                	sub    %eax,%ebx
f0127f95:	89 d8                	mov    %ebx,%eax
f0127f97:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127f9c:	74 17                	je     f0127fb5 <test_kexpand+0x815>
f0127f9e:	83 ec 04             	sub    $0x4,%esp
f0127fa1:	68 1c ae 13 f0       	push   $0xf013ae1c
f0127fa6:	68 81 0b 00 00       	push   $0xb81
f0127fab:	68 9a ad 13 f0       	push   $0xf013ad9a
f0127fb0:	e8 46 82 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127fb5:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127fbc:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127fbf:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127fc5:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127fc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127fcf:	eb 0e                	jmp    f0127fdf <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127fd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127fd4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127fd7:	01 d0                	add    %edx,%eax
f0127fd9:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127fdc:	ff 45 f4             	incl   -0xc(%ebp)
f0127fdf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127fe5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127fe8:	7f e7                	jg     f0127fd1 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127fea:	e8 62 4a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0127fef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ff2:	e8 45 bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127ff7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127ffa:	83 ec 0c             	sub    $0xc,%esp
f0127ffd:	68 00 00 60 00       	push   $0x600000
f0128002:	e8 0c f8 fd ff       	call   f0107813 <kmalloc>
f0128007:	83 c4 10             	add    $0x10,%esp
f012800a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128010:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128016:	89 c1                	mov    %eax,%ecx
f0128018:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012801f:	10 00 00 
f0128022:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128028:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012802d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128033:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128039:	ba 00 00 00 00       	mov    $0x0,%edx
f012803e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128044:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012804a:	29 d0                	sub    %edx,%eax
f012804c:	89 c3                	mov    %eax,%ebx
f012804e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128055:	10 00 00 
f0128058:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012805d:	0f b6 d0             	movzbl %al,%edx
f0128060:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128066:	01 d0                	add    %edx,%eax
f0128068:	48                   	dec    %eax
f0128069:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012806f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128075:	ba 00 00 00 00       	mov    $0x0,%edx
f012807a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128080:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128086:	29 d0                	sub    %edx,%eax
f0128088:	01 c3                	add    %eax,%ebx
f012808a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128091:	10 00 00 
f0128094:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128099:	0f b6 c0             	movzbl %al,%eax
f012809c:	c1 e0 04             	shl    $0x4,%eax
f012809f:	89 c2                	mov    %eax,%edx
f01280a1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01280a7:	01 d0                	add    %edx,%eax
f01280a9:	48                   	dec    %eax
f01280aa:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01280b0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01280b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01280bb:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01280c1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01280c7:	29 d0                	sub    %edx,%eax
f01280c9:	01 d8                	add    %ebx,%eax
f01280cb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01280d0:	39 c1                	cmp    %eax,%ecx
f01280d2:	74 17                	je     f01280eb <test_kexpand+0x94b>
f01280d4:	83 ec 04             	sub    $0x4,%esp
f01280d7:	68 80 ae 13 f0       	push   $0xf013ae80
f01280dc:	68 8d 0b 00 00       	push   $0xb8d
f01280e1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01280e6:	e8 10 81 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280eb:	e8 4c bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01280f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280f3:	74 17                	je     f012810c <test_kexpand+0x96c>
f01280f5:	83 ec 04             	sub    $0x4,%esp
f01280f8:	68 b4 ad 13 f0       	push   $0xf013adb4
f01280fd:	68 8e 0b 00 00       	push   $0xb8e
f0128102:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128107:	e8 ef 80 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012810c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012810f:	e8 3d 49 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128114:	29 c3                	sub    %eax,%ebx
f0128116:	89 d8                	mov    %ebx,%eax
f0128118:	3d 00 06 00 00       	cmp    $0x600,%eax
f012811d:	74 17                	je     f0128136 <test_kexpand+0x996>
f012811f:	83 ec 04             	sub    $0x4,%esp
f0128122:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128127:	68 8f 0b 00 00       	push   $0xb8f
f012812c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128131:	e8 c5 80 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128136:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f012813d:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128140:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128146:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012814c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128153:	eb 1a                	jmp    f012816f <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128155:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128158:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012815f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128165:	01 c2                	add    %eax,%edx
f0128167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012816a:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012816c:	ff 45 f4             	incl   -0xc(%ebp)
f012816f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128175:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128178:	7d db                	jge    f0128155 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f012817a:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128181:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128184:	e8 c8 48 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128189:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012818c:	e8 ab bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128191:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128194:	83 ec 0c             	sub    $0xc,%esp
f0128197:	68 00 00 70 00       	push   $0x700000
f012819c:	e8 15 f9 fd ff       	call   f0107ab6 <kexpand>
f01281a1:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01281a4:	e8 93 bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01281a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281ac:	74 19                	je     f01281c7 <test_kexpand+0xa27>
f01281ae:	68 34 bb 13 f0       	push   $0xf013bb34
f01281b3:	68 65 bb 13 f0       	push   $0xf013bb65
f01281b8:	68 a0 0b 00 00       	push   $0xba0
f01281bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f01281c2:	e8 34 80 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01281c7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01281ca:	e8 82 48 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01281cf:	29 c3                	sub    %eax,%ebx
f01281d1:	89 d8                	mov    %ebx,%eax
f01281d3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01281d8:	74 19                	je     f01281f3 <test_kexpand+0xa53>
f01281da:	68 7c bb 13 f0       	push   $0xf013bb7c
f01281df:	68 65 bb 13 f0       	push   $0xf013bb65
f01281e4:	68 a1 0b 00 00       	push   $0xba1
f01281e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01281ee:	e8 08 80 fd ff       	call   f01001fb <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01281f3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01281f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01281fc:	eb 1a                	jmp    f0128218 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f01281fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128201:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128208:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012820e:	01 c2                	add    %eax,%edx
f0128210:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128213:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128215:	ff 45 f4             	incl   -0xc(%ebp)
f0128218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012821b:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128221:	7c db                	jl     f01281fe <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128223:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012822a:	eb 37                	jmp    f0128263 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f012822c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012822f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128236:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012823c:	01 d0                	add    %edx,%eax
f012823e:	8b 10                	mov    (%eax),%edx
f0128240:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128243:	39 c2                	cmp    %eax,%edx
f0128245:	74 19                	je     f0128260 <test_kexpand+0xac0>
f0128247:	68 ac bb 13 f0       	push   $0xf013bbac
f012824c:	68 65 bb 13 f0       	push   $0xf013bb65
f0128251:	68 ad 0b 00 00       	push   $0xbad
f0128256:	68 9a ad 13 f0       	push   $0xf013ad9a
f012825b:	e8 9b 7f fd ff       	call   f01001fb <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128260:	ff 45 f4             	incl   -0xc(%ebp)
f0128263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128266:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012826c:	7c be                	jl     f012822c <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012826e:	e8 de 47 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128273:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128276:	e8 c1 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012827b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f012827e:	83 ec 0c             	sub    $0xc,%esp
f0128281:	68 00 00 a0 00       	push   $0xa00000
f0128286:	e8 2b f8 fd ff       	call   f0107ab6 <kexpand>
f012828b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012828e:	e8 a9 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128293:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128296:	74 19                	je     f01282b1 <test_kexpand+0xb11>
f0128298:	68 34 bb 13 f0       	push   $0xf013bb34
f012829d:	68 65 bb 13 f0       	push   $0xf013bb65
f01282a2:	68 b8 0b 00 00       	push   $0xbb8
f01282a7:	68 9a ad 13 f0       	push   $0xf013ad9a
f01282ac:	e8 4a 7f fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01282b1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01282b4:	e8 98 47 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01282b9:	29 c3                	sub    %eax,%ebx
f01282bb:	89 d8                	mov    %ebx,%eax
f01282bd:	3d 00 03 00 00       	cmp    $0x300,%eax
f01282c2:	74 19                	je     f01282dd <test_kexpand+0xb3d>
f01282c4:	68 b8 bb 13 f0       	push   $0xf013bbb8
f01282c9:	68 65 bb 13 f0       	push   $0xf013bb65
f01282ce:	68 b9 0b 00 00       	push   $0xbb9
f01282d3:	68 9a ad 13 f0       	push   $0xf013ad9a
f01282d8:	e8 1e 7f fd ff       	call   f01001fb <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01282dd:	e8 6f 47 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01282e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282e5:	e8 52 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01282ed:	83 ec 0c             	sub    $0xc,%esp
f01282f0:	68 00 00 40 00       	push   $0x400000
f01282f5:	e8 19 f5 fd ff       	call   f0107813 <kmalloc>
f01282fa:	83 c4 10             	add    $0x10,%esp
f01282fd:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128303:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128309:	89 c1                	mov    %eax,%ecx
f012830b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128312:	10 00 00 
f0128315:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012831b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128320:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128326:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012832c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128331:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128337:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012833d:	29 d0                	sub    %edx,%eax
f012833f:	89 c3                	mov    %eax,%ebx
f0128341:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128348:	10 00 00 
f012834b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128350:	0f b6 d0             	movzbl %al,%edx
f0128353:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128359:	01 d0                	add    %edx,%eax
f012835b:	48                   	dec    %eax
f012835c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128362:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128368:	ba 00 00 00 00       	mov    $0x0,%edx
f012836d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128373:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128379:	29 d0                	sub    %edx,%eax
f012837b:	01 c3                	add    %eax,%ebx
f012837d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128384:	10 00 00 
f0128387:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012838c:	0f b6 c0             	movzbl %al,%eax
f012838f:	c1 e0 04             	shl    $0x4,%eax
f0128392:	89 c2                	mov    %eax,%edx
f0128394:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012839a:	01 d0                	add    %edx,%eax
f012839c:	48                   	dec    %eax
f012839d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01283a3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01283a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01283ae:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01283b4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01283ba:	29 d0                	sub    %edx,%eax
f01283bc:	01 d8                	add    %ebx,%eax
f01283be:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01283c3:	39 c1                	cmp    %eax,%ecx
f01283c5:	74 17                	je     f01283de <test_kexpand+0xc3e>
f01283c7:	83 ec 04             	sub    $0x4,%esp
f01283ca:	68 e8 bb 13 f0       	push   $0xf013bbe8
f01283cf:	68 c4 0b 00 00       	push   $0xbc4
f01283d4:	68 9a ad 13 f0       	push   $0xf013ad9a
f01283d9:	e8 1d 7e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283de:	e8 59 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01283e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01283e6:	74 17                	je     f01283ff <test_kexpand+0xc5f>
f01283e8:	83 ec 04             	sub    $0x4,%esp
f01283eb:	68 b4 ad 13 f0       	push   $0xf013adb4
f01283f0:	68 c5 0b 00 00       	push   $0xbc5
f01283f5:	68 9a ad 13 f0       	push   $0xf013ad9a
f01283fa:	e8 fc 7d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283ff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128402:	e8 4a 46 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128407:	29 c3                	sub    %eax,%ebx
f0128409:	89 d8                	mov    %ebx,%eax
f012840b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128410:	74 17                	je     f0128429 <test_kexpand+0xc89>
f0128412:	83 ec 04             	sub    $0x4,%esp
f0128415:	68 1c ae 13 f0       	push   $0xf013ae1c
f012841a:	68 c6 0b 00 00       	push   $0xbc6
f012841f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128424:	e8 d2 7d fd ff       	call   f01001fb <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128429:	e8 23 46 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012842e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128431:	e8 06 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128436:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128439:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012843f:	83 ec 0c             	sub    $0xc,%esp
f0128442:	50                   	push   %eax
f0128443:	e8 96 f4 fd ff       	call   f01078de <kfree>
f0128448:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012844b:	e8 ec b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128450:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128453:	74 17                	je     f012846c <test_kexpand+0xccc>
f0128455:	83 ec 04             	sub    $0x4,%esp
f0128458:	68 b4 ad 13 f0       	push   $0xf013adb4
f012845d:	68 cf 0b 00 00       	push   $0xbcf
f0128462:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128467:	e8 8f 7d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012846c:	e8 e0 45 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128471:	89 c2                	mov    %eax,%edx
f0128473:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128476:	29 c2                	sub    %eax,%edx
f0128478:	89 d0                	mov    %edx,%eax
f012847a:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012847f:	74 17                	je     f0128498 <test_kexpand+0xcf8>
f0128481:	83 ec 04             	sub    $0x4,%esp
f0128484:	68 4c b6 13 f0       	push   $0xf013b64c
f0128489:	68 d0 0b 00 00       	push   $0xbd0
f012848e:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128493:	e8 63 7d fd ff       	call   f01001fb <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128498:	e8 b4 45 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012849d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284a0:	e8 97 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01284a5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01284a8:	83 ec 0c             	sub    $0xc,%esp
f01284ab:	68 00 50 40 00       	push   $0x405000
f01284b0:	e8 01 f6 fd ff       	call   f0107ab6 <kexpand>
f01284b5:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01284b8:	e8 7f b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01284bd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01284c0:	74 19                	je     f01284db <test_kexpand+0xd3b>
f01284c2:	68 34 bb 13 f0       	push   $0xf013bb34
f01284c7:	68 65 bb 13 f0       	push   $0xf013bb65
f01284cc:	68 da 0b 00 00       	push   $0xbda
f01284d1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01284d6:	e8 20 7d fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01284db:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284de:	e8 6e 45 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01284e3:	29 c3                	sub    %eax,%ebx
f01284e5:	89 d8                	mov    %ebx,%eax
f01284e7:	83 f8 05             	cmp    $0x5,%eax
f01284ea:	74 19                	je     f0128505 <test_kexpand+0xd65>
f01284ec:	68 10 bc 13 f0       	push   $0xf013bc10
f01284f1:	68 65 bb 13 f0       	push   $0xf013bb65
f01284f6:	68 db 0b 00 00       	push   $0xbdb
f01284fb:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128500:	e8 f6 7c fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128505:	83 ec 0c             	sub    $0xc,%esp
f0128508:	68 f8 ba 13 f0       	push   $0xf013baf8
f012850d:	e8 70 87 fd ff       	call   f0100c82 <cprintf>
f0128512:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128515:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012851a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012851d:	5b                   	pop    %ebx
f012851e:	5f                   	pop    %edi
f012851f:	5d                   	pop    %ebp
f0128520:	c3                   	ret    

f0128521 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128521:	55                   	push   %ebp
f0128522:	89 e5                	mov    %esp,%ebp
f0128524:	57                   	push   %edi
f0128525:	53                   	push   %ebx
f0128526:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012852c:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128530:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128534:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012853a:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128540:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128547:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012854e:	e8 fe 44 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128553:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128556:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f012855c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128561:	b8 00 00 00 00       	mov    $0x0,%eax
f0128566:	89 d7                	mov    %edx,%edi
f0128568:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012856a:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128570:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128575:	b8 00 00 00 00       	mov    $0x0,%eax
f012857a:	89 d7                	mov    %edx,%edi
f012857c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012857e:	e8 ce 44 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128583:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128586:	e8 b1 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012858b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012858e:	83 ec 0c             	sub    $0xc,%esp
f0128591:	68 00 fc 1f 00       	push   $0x1ffc00
f0128596:	e8 78 f2 fd ff       	call   f0107813 <kmalloc>
f012859b:	83 c4 10             	add    $0x10,%esp
f012859e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285a4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01285aa:	89 c1                	mov    %eax,%ecx
f01285ac:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01285b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01285b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01285be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01285c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01285c6:	f7 75 d4             	divl   -0x2c(%ebp)
f01285c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01285cc:	29 d0                	sub    %edx,%eax
f01285ce:	89 c3                	mov    %eax,%ebx
f01285d0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01285d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01285dc:	0f b6 d0             	movzbl %al,%edx
f01285df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01285e2:	01 d0                	add    %edx,%eax
f01285e4:	48                   	dec    %eax
f01285e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01285e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01285eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01285f0:	f7 75 cc             	divl   -0x34(%ebp)
f01285f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01285f6:	29 d0                	sub    %edx,%eax
f01285f8:	01 c3                	add    %eax,%ebx
f01285fa:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128601:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128606:	0f b6 c0             	movzbl %al,%eax
f0128609:	c1 e0 04             	shl    $0x4,%eax
f012860c:	89 c2                	mov    %eax,%edx
f012860e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128611:	01 d0                	add    %edx,%eax
f0128613:	48                   	dec    %eax
f0128614:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128617:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012861a:	ba 00 00 00 00       	mov    $0x0,%edx
f012861f:	f7 75 c4             	divl   -0x3c(%ebp)
f0128622:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128625:	29 d0                	sub    %edx,%eax
f0128627:	01 d8                	add    %ebx,%eax
f0128629:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012862e:	39 c1                	cmp    %eax,%ecx
f0128630:	74 17                	je     f0128649 <test_kshrink+0x128>
f0128632:	83 ec 04             	sub    $0x4,%esp
f0128635:	68 80 ae 13 f0       	push   $0xf013ae80
f012863a:	68 01 0c 00 00       	push   $0xc01
f012863f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128644:	e8 b2 7b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128649:	e8 ee b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012864e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128651:	74 17                	je     f012866a <test_kshrink+0x149>
f0128653:	83 ec 04             	sub    $0x4,%esp
f0128656:	68 b4 ad 13 f0       	push   $0xf013adb4
f012865b:	68 02 0c 00 00       	push   $0xc02
f0128660:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128665:	e8 91 7b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012866a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012866d:	e8 df 43 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128672:	29 c3                	sub    %eax,%ebx
f0128674:	89 d8                	mov    %ebx,%eax
f0128676:	3d 00 02 00 00       	cmp    $0x200,%eax
f012867b:	74 17                	je     f0128694 <test_kshrink+0x173>
f012867d:	83 ec 04             	sub    $0x4,%esp
f0128680:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128685:	68 03 0c 00 00       	push   $0xc03
f012868a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012868f:	e8 67 7b fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128694:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f012869b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012869e:	e8 ae 43 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01286a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286a6:	e8 91 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01286ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01286ae:	83 ec 0c             	sub    $0xc,%esp
f01286b1:	68 00 fc 1f 00       	push   $0x1ffc00
f01286b6:	e8 58 f1 fd ff       	call   f0107813 <kmalloc>
f01286bb:	83 c4 10             	add    $0x10,%esp
f01286be:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286c4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01286ca:	89 c1                	mov    %eax,%ecx
f01286cc:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01286d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01286d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286db:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01286de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01286e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01286e6:	f7 75 bc             	divl   -0x44(%ebp)
f01286e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01286ec:	29 d0                	sub    %edx,%eax
f01286ee:	89 c3                	mov    %eax,%ebx
f01286f0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01286f7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01286fc:	0f b6 d0             	movzbl %al,%edx
f01286ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128702:	01 d0                	add    %edx,%eax
f0128704:	48                   	dec    %eax
f0128705:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128708:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012870b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128710:	f7 75 b4             	divl   -0x4c(%ebp)
f0128713:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128716:	29 d0                	sub    %edx,%eax
f0128718:	01 c3                	add    %eax,%ebx
f012871a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128721:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128726:	0f b6 c0             	movzbl %al,%eax
f0128729:	c1 e0 04             	shl    $0x4,%eax
f012872c:	89 c2                	mov    %eax,%edx
f012872e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128731:	01 d0                	add    %edx,%eax
f0128733:	48                   	dec    %eax
f0128734:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128737:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012873a:	ba 00 00 00 00       	mov    $0x0,%edx
f012873f:	f7 75 ac             	divl   -0x54(%ebp)
f0128742:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128745:	29 d0                	sub    %edx,%eax
f0128747:	01 d8                	add    %ebx,%eax
f0128749:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012874e:	39 c1                	cmp    %eax,%ecx
f0128750:	74 17                	je     f0128769 <test_kshrink+0x248>
f0128752:	83 ec 04             	sub    $0x4,%esp
f0128755:	68 80 ae 13 f0       	push   $0xf013ae80
f012875a:	68 0a 0c 00 00       	push   $0xc0a
f012875f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128764:	e8 92 7a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128769:	e8 ce b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012876e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128771:	74 17                	je     f012878a <test_kshrink+0x269>
f0128773:	83 ec 04             	sub    $0x4,%esp
f0128776:	68 b4 ad 13 f0       	push   $0xf013adb4
f012877b:	68 0b 0c 00 00       	push   $0xc0b
f0128780:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128785:	e8 71 7a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012878a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012878d:	e8 bf 42 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128792:	29 c3                	sub    %eax,%ebx
f0128794:	89 d8                	mov    %ebx,%eax
f0128796:	3d 00 02 00 00       	cmp    $0x200,%eax
f012879b:	74 17                	je     f01287b4 <test_kshrink+0x293>
f012879d:	83 ec 04             	sub    $0x4,%esp
f01287a0:	68 1c ae 13 f0       	push   $0xf013ae1c
f01287a5:	68 0c 0c 00 00       	push   $0xc0c
f01287aa:	68 9a ad 13 f0       	push   $0xf013ad9a
f01287af:	e8 47 7a fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01287b4:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01287bb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01287be:	e8 8e 42 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01287c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287c6:	e8 71 b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01287cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01287ce:	83 ec 0c             	sub    $0xc,%esp
f01287d1:	68 00 08 00 00       	push   $0x800
f01287d6:	e8 38 f0 fd ff       	call   f0107813 <kmalloc>
f01287db:	83 c4 10             	add    $0x10,%esp
f01287de:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01287e4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01287ea:	89 c1                	mov    %eax,%ecx
f01287ec:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01287f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01287f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287fb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01287fe:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128801:	ba 00 00 00 00       	mov    $0x0,%edx
f0128806:	f7 75 a4             	divl   -0x5c(%ebp)
f0128809:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012880c:	29 d0                	sub    %edx,%eax
f012880e:	89 c3                	mov    %eax,%ebx
f0128810:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128817:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012881c:	0f b6 d0             	movzbl %al,%edx
f012881f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128822:	01 d0                	add    %edx,%eax
f0128824:	48                   	dec    %eax
f0128825:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128828:	8b 45 98             	mov    -0x68(%ebp),%eax
f012882b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128830:	f7 75 9c             	divl   -0x64(%ebp)
f0128833:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128836:	29 d0                	sub    %edx,%eax
f0128838:	01 c3                	add    %eax,%ebx
f012883a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128841:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128846:	0f b6 c0             	movzbl %al,%eax
f0128849:	c1 e0 04             	shl    $0x4,%eax
f012884c:	89 c2                	mov    %eax,%edx
f012884e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128851:	01 d0                	add    %edx,%eax
f0128853:	48                   	dec    %eax
f0128854:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128857:	8b 45 90             	mov    -0x70(%ebp),%eax
f012885a:	ba 00 00 00 00       	mov    $0x0,%edx
f012885f:	f7 75 94             	divl   -0x6c(%ebp)
f0128862:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128865:	29 d0                	sub    %edx,%eax
f0128867:	01 d8                	add    %ebx,%eax
f0128869:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012886e:	39 c1                	cmp    %eax,%ecx
f0128870:	74 17                	je     f0128889 <test_kshrink+0x368>
f0128872:	83 ec 04             	sub    $0x4,%esp
f0128875:	68 80 ae 13 f0       	push   $0xf013ae80
f012887a:	68 13 0c 00 00       	push   $0xc13
f012887f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128884:	e8 72 79 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128889:	e8 ae b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012888e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128891:	74 17                	je     f01288aa <test_kshrink+0x389>
f0128893:	83 ec 04             	sub    $0x4,%esp
f0128896:	68 b4 ad 13 f0       	push   $0xf013adb4
f012889b:	68 14 0c 00 00       	push   $0xc14
f01288a0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01288a5:	e8 51 79 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288aa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288ad:	e8 9f 41 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01288b2:	29 c3                	sub    %eax,%ebx
f01288b4:	89 d8                	mov    %ebx,%eax
f01288b6:	83 f8 01             	cmp    $0x1,%eax
f01288b9:	74 17                	je     f01288d2 <test_kshrink+0x3b1>
f01288bb:	83 ec 04             	sub    $0x4,%esp
f01288be:	68 1c ae 13 f0       	push   $0xf013ae1c
f01288c3:	68 15 0c 00 00       	push   $0xc15
f01288c8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01288cd:	e8 29 79 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01288d2:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01288d9:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01288dc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01288e2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01288e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288ec:	eb 0e                	jmp    f01288fc <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01288ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01288f1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288f4:	01 d0                	add    %edx,%eax
f01288f6:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01288f9:	ff 45 f4             	incl   -0xc(%ebp)
f01288fc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128902:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128905:	7f e7                	jg     f01288ee <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128907:	e8 45 41 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012890c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012890f:	e8 28 b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128914:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128917:	83 ec 0c             	sub    $0xc,%esp
f012891a:	68 00 08 00 00       	push   $0x800
f012891f:	e8 ef ee fd ff       	call   f0107813 <kmalloc>
f0128924:	83 c4 10             	add    $0x10,%esp
f0128927:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012892d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128933:	89 c1                	mov    %eax,%ecx
f0128935:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012893c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012893f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128944:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128947:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012894a:	ba 00 00 00 00       	mov    $0x0,%edx
f012894f:	f7 75 88             	divl   -0x78(%ebp)
f0128952:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128955:	29 d0                	sub    %edx,%eax
f0128957:	89 c3                	mov    %eax,%ebx
f0128959:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128960:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128965:	0f b6 d0             	movzbl %al,%edx
f0128968:	8b 45 80             	mov    -0x80(%ebp),%eax
f012896b:	01 d0                	add    %edx,%eax
f012896d:	48                   	dec    %eax
f012896e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128974:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012897a:	ba 00 00 00 00       	mov    $0x0,%edx
f012897f:	f7 75 80             	divl   -0x80(%ebp)
f0128982:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128988:	29 d0                	sub    %edx,%eax
f012898a:	01 c3                	add    %eax,%ebx
f012898c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128993:	10 00 00 
f0128996:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012899b:	0f b6 c0             	movzbl %al,%eax
f012899e:	c1 e0 04             	shl    $0x4,%eax
f01289a1:	89 c2                	mov    %eax,%edx
f01289a3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01289a9:	01 d0                	add    %edx,%eax
f01289ab:	48                   	dec    %eax
f01289ac:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01289b2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01289b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01289bd:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01289c3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01289c9:	29 d0                	sub    %edx,%eax
f01289cb:	01 d8                	add    %ebx,%eax
f01289cd:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01289d2:	39 c1                	cmp    %eax,%ecx
f01289d4:	74 17                	je     f01289ed <test_kshrink+0x4cc>
f01289d6:	83 ec 04             	sub    $0x4,%esp
f01289d9:	68 80 ae 13 f0       	push   $0xf013ae80
f01289de:	68 21 0c 00 00       	push   $0xc21
f01289e3:	68 9a ad 13 f0       	push   $0xf013ad9a
f01289e8:	e8 0e 78 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289ed:	e8 4a b3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01289f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289f5:	74 17                	je     f0128a0e <test_kshrink+0x4ed>
f01289f7:	83 ec 04             	sub    $0x4,%esp
f01289fa:	68 b4 ad 13 f0       	push   $0xf013adb4
f01289ff:	68 22 0c 00 00       	push   $0xc22
f0128a04:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128a09:	e8 ed 77 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a0e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a11:	e8 3b 40 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128a16:	29 c3                	sub    %eax,%ebx
f0128a18:	89 d8                	mov    %ebx,%eax
f0128a1a:	83 f8 01             	cmp    $0x1,%eax
f0128a1d:	74 17                	je     f0128a36 <test_kshrink+0x515>
f0128a1f:	83 ec 04             	sub    $0x4,%esp
f0128a22:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128a27:	68 23 0c 00 00       	push   $0xc23
f0128a2c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128a31:	e8 c5 77 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128a36:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128a3d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128a40:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128a46:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128a49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a50:	eb 0e                	jmp    f0128a60 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128a52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a55:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128a58:	01 d0                	add    %edx,%eax
f0128a5a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128a5d:	ff 45 f4             	incl   -0xc(%ebp)
f0128a60:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128a66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a69:	7f e7                	jg     f0128a52 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128a6b:	e8 e1 3f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128a70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a73:	e8 c4 b2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128a78:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128a7b:	83 ec 0c             	sub    $0xc,%esp
f0128a7e:	68 00 1c 00 00       	push   $0x1c00
f0128a83:	e8 8b ed fd ff       	call   f0107813 <kmalloc>
f0128a88:	83 c4 10             	add    $0x10,%esp
f0128a8b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a91:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128a97:	89 c1                	mov    %eax,%ecx
f0128a99:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128aa0:	10 00 00 
f0128aa3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128aa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128aae:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128ab4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128aba:	ba 00 00 00 00       	mov    $0x0,%edx
f0128abf:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128ac5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128acb:	29 d0                	sub    %edx,%eax
f0128acd:	89 c3                	mov    %eax,%ebx
f0128acf:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128ad6:	10 00 00 
f0128ad9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128ade:	0f b6 d0             	movzbl %al,%edx
f0128ae1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128ae7:	01 d0                	add    %edx,%eax
f0128ae9:	48                   	dec    %eax
f0128aea:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128af0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128af6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128afb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128b01:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128b07:	29 d0                	sub    %edx,%eax
f0128b09:	01 c3                	add    %eax,%ebx
f0128b0b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128b12:	10 00 00 
f0128b15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128b1a:	0f b6 c0             	movzbl %al,%eax
f0128b1d:	c1 e0 04             	shl    $0x4,%eax
f0128b20:	89 c2                	mov    %eax,%edx
f0128b22:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128b28:	01 d0                	add    %edx,%eax
f0128b2a:	48                   	dec    %eax
f0128b2b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128b31:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128b37:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b3c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128b42:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128b48:	29 d0                	sub    %edx,%eax
f0128b4a:	01 d8                	add    %ebx,%eax
f0128b4c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128b51:	39 c1                	cmp    %eax,%ecx
f0128b53:	74 17                	je     f0128b6c <test_kshrink+0x64b>
f0128b55:	83 ec 04             	sub    $0x4,%esp
f0128b58:	68 80 ae 13 f0       	push   $0xf013ae80
f0128b5d:	68 2f 0c 00 00       	push   $0xc2f
f0128b62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128b67:	e8 8f 76 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b6c:	e8 cb b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128b71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b74:	74 17                	je     f0128b8d <test_kshrink+0x66c>
f0128b76:	83 ec 04             	sub    $0x4,%esp
f0128b79:	68 b4 ad 13 f0       	push   $0xf013adb4
f0128b7e:	68 30 0c 00 00       	push   $0xc30
f0128b83:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128b88:	e8 6e 76 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b8d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b90:	e8 bc 3e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128b95:	29 c3                	sub    %eax,%ebx
f0128b97:	89 d8                	mov    %ebx,%eax
f0128b99:	83 f8 02             	cmp    $0x2,%eax
f0128b9c:	74 17                	je     f0128bb5 <test_kshrink+0x694>
f0128b9e:	83 ec 04             	sub    $0x4,%esp
f0128ba1:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128ba6:	68 31 0c 00 00       	push   $0xc31
f0128bab:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128bb0:	e8 46 76 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128bb5:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128bbc:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128bbf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128bc5:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bcf:	eb 0e                	jmp    f0128bdf <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128bd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128bd4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128bd7:	01 d0                	add    %edx,%eax
f0128bd9:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128bdc:	ff 45 f4             	incl   -0xc(%ebp)
f0128bdf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128be5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128be8:	7f e7                	jg     f0128bd1 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128bea:	e8 62 3e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128bef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bf2:	e8 45 b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128bf7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128bfa:	83 ec 0c             	sub    $0xc,%esp
f0128bfd:	68 00 fc 2f 00       	push   $0x2ffc00
f0128c02:	e8 0c ec fd ff       	call   f0107813 <kmalloc>
f0128c07:	83 c4 10             	add    $0x10,%esp
f0128c0a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c10:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128c16:	89 c1                	mov    %eax,%ecx
f0128c18:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128c1f:	10 00 00 
f0128c22:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128c28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c2d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128c33:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128c39:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c3e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128c44:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128c4a:	29 d0                	sub    %edx,%eax
f0128c4c:	89 c3                	mov    %eax,%ebx
f0128c4e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128c55:	10 00 00 
f0128c58:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c5d:	0f b6 d0             	movzbl %al,%edx
f0128c60:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128c66:	01 d0                	add    %edx,%eax
f0128c68:	48                   	dec    %eax
f0128c69:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128c6f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c7a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128c80:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128c86:	29 d0                	sub    %edx,%eax
f0128c88:	01 c3                	add    %eax,%ebx
f0128c8a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128c91:	10 00 00 
f0128c94:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c99:	0f b6 c0             	movzbl %al,%eax
f0128c9c:	c1 e0 04             	shl    $0x4,%eax
f0128c9f:	89 c2                	mov    %eax,%edx
f0128ca1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128ca7:	01 d0                	add    %edx,%eax
f0128ca9:	48                   	dec    %eax
f0128caa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128cb0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128cb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cbb:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128cc1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128cc7:	29 d0                	sub    %edx,%eax
f0128cc9:	01 d8                	add    %ebx,%eax
f0128ccb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128cd0:	39 c1                	cmp    %eax,%ecx
f0128cd2:	74 17                	je     f0128ceb <test_kshrink+0x7ca>
f0128cd4:	83 ec 04             	sub    $0x4,%esp
f0128cd7:	68 80 ae 13 f0       	push   $0xf013ae80
f0128cdc:	68 3d 0c 00 00       	push   $0xc3d
f0128ce1:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128ce6:	e8 10 75 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ceb:	e8 4c b0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128cf0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128cf3:	74 17                	je     f0128d0c <test_kshrink+0x7eb>
f0128cf5:	83 ec 04             	sub    $0x4,%esp
f0128cf8:	68 b4 ad 13 f0       	push   $0xf013adb4
f0128cfd:	68 3e 0c 00 00       	push   $0xc3e
f0128d02:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128d07:	e8 ef 74 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d0c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d0f:	e8 3d 3d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128d14:	29 c3                	sub    %eax,%ebx
f0128d16:	89 d8                	mov    %ebx,%eax
f0128d18:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128d1d:	74 17                	je     f0128d36 <test_kshrink+0x815>
f0128d1f:	83 ec 04             	sub    $0x4,%esp
f0128d22:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128d27:	68 3f 0c 00 00       	push   $0xc3f
f0128d2c:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128d31:	e8 c5 74 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128d36:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128d3d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128d40:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128d46:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128d49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d50:	eb 0e                	jmp    f0128d60 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128d52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d55:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128d58:	01 d0                	add    %edx,%eax
f0128d5a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128d5d:	ff 45 f4             	incl   -0xc(%ebp)
f0128d60:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128d66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d69:	7f e7                	jg     f0128d52 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d6b:	e8 e1 3c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128d70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d73:	e8 c4 af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d78:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128d7b:	83 ec 0c             	sub    $0xc,%esp
f0128d7e:	68 00 00 60 00       	push   $0x600000
f0128d83:	e8 8b ea fd ff       	call   f0107813 <kmalloc>
f0128d88:	83 c4 10             	add    $0x10,%esp
f0128d8b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d91:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128d97:	89 c1                	mov    %eax,%ecx
f0128d99:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128da0:	10 00 00 
f0128da3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128da9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128dae:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128db4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128dba:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dbf:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128dc5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128dcb:	29 d0                	sub    %edx,%eax
f0128dcd:	89 c3                	mov    %eax,%ebx
f0128dcf:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128dd6:	10 00 00 
f0128dd9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128dde:	0f b6 d0             	movzbl %al,%edx
f0128de1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128de7:	01 d0                	add    %edx,%eax
f0128de9:	48                   	dec    %eax
f0128dea:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128df0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128df6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dfb:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128e01:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128e07:	29 d0                	sub    %edx,%eax
f0128e09:	01 c3                	add    %eax,%ebx
f0128e0b:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128e12:	10 00 00 
f0128e15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128e1a:	0f b6 c0             	movzbl %al,%eax
f0128e1d:	c1 e0 04             	shl    $0x4,%eax
f0128e20:	89 c2                	mov    %eax,%edx
f0128e22:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128e28:	01 d0                	add    %edx,%eax
f0128e2a:	48                   	dec    %eax
f0128e2b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128e31:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128e37:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e3c:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128e42:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128e48:	29 d0                	sub    %edx,%eax
f0128e4a:	01 d8                	add    %ebx,%eax
f0128e4c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128e51:	39 c1                	cmp    %eax,%ecx
f0128e53:	74 17                	je     f0128e6c <test_kshrink+0x94b>
f0128e55:	83 ec 04             	sub    $0x4,%esp
f0128e58:	68 80 ae 13 f0       	push   $0xf013ae80
f0128e5d:	68 4b 0c 00 00       	push   $0xc4b
f0128e62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128e67:	e8 8f 73 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e6c:	e8 cb ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128e71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e74:	74 17                	je     f0128e8d <test_kshrink+0x96c>
f0128e76:	83 ec 04             	sub    $0x4,%esp
f0128e79:	68 b4 ad 13 f0       	push   $0xf013adb4
f0128e7e:	68 4c 0c 00 00       	push   $0xc4c
f0128e83:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128e88:	e8 6e 73 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e8d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e90:	e8 bc 3b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128e95:	29 c3                	sub    %eax,%ebx
f0128e97:	89 d8                	mov    %ebx,%eax
f0128e99:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128e9e:	74 17                	je     f0128eb7 <test_kshrink+0x996>
f0128ea0:	83 ec 04             	sub    $0x4,%esp
f0128ea3:	68 1c ae 13 f0       	push   $0xf013ae1c
f0128ea8:	68 4d 0c 00 00       	push   $0xc4d
f0128ead:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128eb2:	e8 44 73 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128eb7:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128ebe:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128ec1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128ec7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128ecd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ed4:	eb 1a                	jmp    f0128ef0 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ed9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128ee0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128ee6:	01 c2                	add    %eax,%edx
f0128ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128eeb:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128eed:	ff 45 f4             	incl   -0xc(%ebp)
f0128ef0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128ef6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ef9:	7d db                	jge    f0128ed6 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128efb:	e8 51 3b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128f00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f03:	e8 34 ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f08:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128f0b:	83 ec 0c             	sub    $0xc,%esp
f0128f0e:	68 00 00 50 00       	push   $0x500000
f0128f13:	e8 81 eb fd ff       	call   f0107a99 <kshrink>
f0128f18:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f1b:	e8 1c ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f20:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f23:	74 19                	je     f0128f3e <test_kshrink+0xa1d>
f0128f25:	68 34 bb 13 f0       	push   $0xf013bb34
f0128f2a:	68 65 bb 13 f0       	push   $0xf013bb65
f0128f2f:	68 5d 0c 00 00       	push   $0xc5d
f0128f34:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128f39:	e8 bd 72 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128f3e:	e8 0e 3b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0128f43:	89 c2                	mov    %eax,%edx
f0128f45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128f48:	29 c2                	sub    %eax,%edx
f0128f4a:	89 d0                	mov    %edx,%eax
f0128f4c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128f51:	74 19                	je     f0128f6c <test_kshrink+0xa4b>
f0128f53:	68 40 bc 13 f0       	push   $0xf013bc40
f0128f58:	68 65 bb 13 f0       	push   $0xf013bb65
f0128f5d:	68 5e 0c 00 00       	push   $0xc5e
f0128f62:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128f67:	e8 8f 72 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128f6c:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128f73:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128f76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f7d:	eb 37                	jmp    f0128fb6 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128f89:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128f8f:	01 d0                	add    %edx,%eax
f0128f91:	8b 10                	mov    (%eax),%edx
f0128f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f96:	39 c2                	cmp    %eax,%edx
f0128f98:	74 19                	je     f0128fb3 <test_kshrink+0xa92>
f0128f9a:	68 70 bc 13 f0       	push   $0xf013bc70
f0128f9f:	68 65 bb 13 f0       	push   $0xf013bb65
f0128fa4:	68 66 0c 00 00       	push   $0xc66
f0128fa9:	68 9a ad 13 f0       	push   $0xf013ad9a
f0128fae:	e8 48 72 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128fb3:	ff 45 f4             	incl   -0xc(%ebp)
f0128fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128fb9:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128fbf:	7e be                	jle    f0128f7f <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128fc1:	83 ec 0c             	sub    $0xc,%esp
f0128fc4:	6a 03                	push   $0x3
f0128fc6:	e8 26 3f fe ff       	call   f010cef1 <sys_bypassPageFault>
f0128fcb:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128fce:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128fd4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128fd7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128fda:	05 00 00 50 00       	add    $0x500000,%eax
f0128fdf:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128fe2:	e8 f8 3e fe ff       	call   f010cedf <sys_rcr2>
f0128fe7:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128fea:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128ff0:	39 d0                	cmp    %edx,%eax
f0128ff2:	74 19                	je     f012900d <test_kshrink+0xaec>
f0128ff4:	68 7c bc 13 f0       	push   $0xf013bc7c
f0128ff9:	68 65 bb 13 f0       	push   $0xf013bb65
f0128ffe:	68 6f 0c 00 00       	push   $0xc6f
f0129003:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129008:	e8 ee 71 fd ff       	call   f01001fb <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012900d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129010:	05 00 10 50 00       	add    $0x501000,%eax
f0129015:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129018:	e8 c2 3e fe ff       	call   f010cedf <sys_rcr2>
f012901d:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129020:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129026:	39 d0                	cmp    %edx,%eax
f0129028:	74 19                	je     f0129043 <test_kshrink+0xb22>
f012902a:	68 a4 bc 13 f0       	push   $0xf013bca4
f012902f:	68 65 bb 13 f0       	push   $0xf013bb65
f0129034:	68 72 0c 00 00       	push   $0xc72
f0129039:	68 9a ad 13 f0       	push   $0xf013ad9a
f012903e:	e8 b8 71 fd ff       	call   f01001fb <_panic>

		ptr[6*Mega - kilo] = 10;
f0129043:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129046:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f012904b:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012904e:	e8 8c 3e fe ff       	call   f010cedf <sys_rcr2>
f0129053:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129056:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f012905c:	39 d0                	cmp    %edx,%eax
f012905e:	74 19                	je     f0129079 <test_kshrink+0xb58>
f0129060:	68 d0 bc 13 f0       	push   $0xf013bcd0
f0129065:	68 65 bb 13 f0       	push   $0xf013bb65
f012906a:	68 75 0c 00 00       	push   $0xc75
f012906f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129074:	e8 82 71 fd ff       	call   f01001fb <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129079:	83 ec 0c             	sub    $0xc,%esp
f012907c:	6a 00                	push   $0x0
f012907e:	e8 6e 3e fe ff       	call   f010cef1 <sys_bypassPageFault>
f0129083:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129086:	e8 c6 39 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012908b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012908e:	e8 a9 ac fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129093:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129096:	83 ec 0c             	sub    $0xc,%esp
f0129099:	68 00 00 20 00       	push   $0x200000
f012909e:	e8 f6 e9 fd ff       	call   f0107a99 <kshrink>
f01290a3:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01290a6:	e8 91 ac fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01290ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290ae:	74 19                	je     f01290c9 <test_kshrink+0xba8>
f01290b0:	68 34 bb 13 f0       	push   $0xf013bb34
f01290b5:	68 65 bb 13 f0       	push   $0xf013bb65
f01290ba:	68 82 0c 00 00       	push   $0xc82
f01290bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f01290c4:	e8 32 71 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01290c9:	e8 83 39 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01290ce:	89 c2                	mov    %eax,%edx
f01290d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01290d3:	29 c2                	sub    %eax,%edx
f01290d5:	89 d0                	mov    %edx,%eax
f01290d7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01290dc:	74 19                	je     f01290f7 <test_kshrink+0xbd6>
f01290de:	68 fc bc 13 f0       	push   $0xf013bcfc
f01290e3:	68 65 bb 13 f0       	push   $0xf013bb65
f01290e8:	68 83 0c 00 00       	push   $0xc83
f01290ed:	68 9a ad 13 f0       	push   $0xf013ad9a
f01290f2:	e8 04 71 fd ff       	call   f01001fb <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01290f7:	e8 55 39 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01290fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290ff:	e8 38 ac fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129104:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129107:	83 ec 0c             	sub    $0xc,%esp
f012910a:	68 00 00 40 00       	push   $0x400000
f012910f:	e8 ff e6 fd ff       	call   f0107813 <kmalloc>
f0129114:	83 c4 10             	add    $0x10,%esp
f0129117:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f012911d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129124:	10 00 00 
f0129127:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012912d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129132:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129138:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012913e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129143:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129149:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012914f:	29 d0                	sub    %edx,%eax
f0129151:	89 c1                	mov    %eax,%ecx
f0129153:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012915a:	10 00 00 
f012915d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129162:	0f b6 d0             	movzbl %al,%edx
f0129165:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012916b:	01 d0                	add    %edx,%eax
f012916d:	48                   	dec    %eax
f012916e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129174:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012917a:	ba 00 00 00 00       	mov    $0x0,%edx
f012917f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129185:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012918b:	29 d0                	sub    %edx,%eax
f012918d:	01 c1                	add    %eax,%ecx
f012918f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129196:	10 00 00 
f0129199:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012919e:	0f b6 c0             	movzbl %al,%eax
f01291a1:	c1 e0 04             	shl    $0x4,%eax
f01291a4:	89 c2                	mov    %eax,%edx
f01291a6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01291ac:	01 d0                	add    %edx,%eax
f01291ae:	48                   	dec    %eax
f01291af:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01291b5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01291bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01291c0:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01291c6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01291cc:	29 d0                	sub    %edx,%eax
f01291ce:	01 c8                	add    %ecx,%eax
f01291d0:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01291d6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01291dc:	83 ec 04             	sub    $0x4,%esp
f01291df:	52                   	push   %edx
f01291e0:	50                   	push   %eax
f01291e1:	68 2c bd 13 f0       	push   $0xf013bd2c
f01291e6:	e8 97 7a fd ff       	call   f0100c82 <cprintf>
f01291eb:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f01291ee:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01291f4:	89 c1                	mov    %eax,%ecx
f01291f6:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01291fd:	10 00 00 
f0129200:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129206:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012920b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129211:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129217:	ba 00 00 00 00       	mov    $0x0,%edx
f012921c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129222:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129228:	29 d0                	sub    %edx,%eax
f012922a:	89 c3                	mov    %eax,%ebx
f012922c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129233:	10 00 00 
f0129236:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012923b:	0f b6 d0             	movzbl %al,%edx
f012923e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129244:	01 d0                	add    %edx,%eax
f0129246:	48                   	dec    %eax
f0129247:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012924d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129253:	ba 00 00 00 00       	mov    $0x0,%edx
f0129258:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012925e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129264:	29 d0                	sub    %edx,%eax
f0129266:	01 c3                	add    %eax,%ebx
f0129268:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012926f:	10 00 00 
f0129272:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129277:	0f b6 c0             	movzbl %al,%eax
f012927a:	c1 e0 04             	shl    $0x4,%eax
f012927d:	89 c2                	mov    %eax,%edx
f012927f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129285:	01 d0                	add    %edx,%eax
f0129287:	48                   	dec    %eax
f0129288:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012928e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129294:	ba 00 00 00 00       	mov    $0x0,%edx
f0129299:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012929f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01292a5:	29 d0                	sub    %edx,%eax
f01292a7:	01 d8                	add    %ebx,%eax
f01292a9:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01292ae:	39 c1                	cmp    %eax,%ecx
f01292b0:	74 17                	je     f01292c9 <test_kshrink+0xda8>
f01292b2:	83 ec 04             	sub    $0x4,%esp
f01292b5:	68 48 bd 13 f0       	push   $0xf013bd48
f01292ba:	68 8e 0c 00 00       	push   $0xc8e
f01292bf:	68 9a ad 13 f0       	push   $0xf013ad9a
f01292c4:	e8 32 6f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292c9:	e8 6e aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01292ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292d1:	74 17                	je     f01292ea <test_kshrink+0xdc9>
f01292d3:	83 ec 04             	sub    $0x4,%esp
f01292d6:	68 b4 ad 13 f0       	push   $0xf013adb4
f01292db:	68 8f 0c 00 00       	push   $0xc8f
f01292e0:	68 9a ad 13 f0       	push   $0xf013ad9a
f01292e5:	e8 11 6f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292ea:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01292ed:	e8 5f 37 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01292f2:	29 c3                	sub    %eax,%ebx
f01292f4:	89 d8                	mov    %ebx,%eax
f01292f6:	3d 00 04 00 00       	cmp    $0x400,%eax
f01292fb:	74 17                	je     f0129314 <test_kshrink+0xdf3>
f01292fd:	83 ec 04             	sub    $0x4,%esp
f0129300:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129305:	68 90 0c 00 00       	push   $0xc90
f012930a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012930f:	e8 e7 6e fd ff       	call   f01001fb <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129314:	e8 38 37 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129319:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012931c:	e8 1b aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129321:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129324:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012932a:	83 ec 0c             	sub    $0xc,%esp
f012932d:	50                   	push   %eax
f012932e:	e8 ab e5 fd ff       	call   f01078de <kfree>
f0129333:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129336:	e8 01 aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012933b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012933e:	74 17                	je     f0129357 <test_kshrink+0xe36>
f0129340:	83 ec 04             	sub    $0x4,%esp
f0129343:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129348:	68 9a 0c 00 00       	push   $0xc9a
f012934d:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129352:	e8 a4 6e fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129357:	e8 f5 36 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012935c:	89 c2                	mov    %eax,%edx
f012935e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129361:	29 c2                	sub    %eax,%edx
f0129363:	89 d0                	mov    %edx,%eax
f0129365:	3d 00 02 00 00       	cmp    $0x200,%eax
f012936a:	74 17                	je     f0129383 <test_kshrink+0xe62>
f012936c:	83 ec 04             	sub    $0x4,%esp
f012936f:	68 4c b6 13 f0       	push   $0xf013b64c
f0129374:	68 9b 0c 00 00       	push   $0xc9b
f0129379:	68 9a ad 13 f0       	push   $0xf013ad9a
f012937e:	e8 78 6e fd ff       	call   f01001fb <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129383:	e8 c9 36 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129388:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012938b:	e8 ac a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129390:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129393:	83 ec 0c             	sub    $0xc,%esp
f0129396:	68 00 b0 3f 00       	push   $0x3fb000
f012939b:	e8 f9 e6 fd ff       	call   f0107a99 <kshrink>
f01293a0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01293a3:	e8 94 a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01293a8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293ab:	74 19                	je     f01293c6 <test_kshrink+0xea5>
f01293ad:	68 34 bb 13 f0       	push   $0xf013bb34
f01293b2:	68 65 bb 13 f0       	push   $0xf013bb65
f01293b7:	68 a5 0c 00 00       	push   $0xca5
f01293bc:	68 9a ad 13 f0       	push   $0xf013ad9a
f01293c1:	e8 35 6e fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01293c6:	e8 86 36 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01293cb:	89 c2                	mov    %eax,%edx
f01293cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01293d0:	29 c2                	sub    %eax,%edx
f01293d2:	89 d0                	mov    %edx,%eax
f01293d4:	83 f8 05             	cmp    $0x5,%eax
f01293d7:	74 19                	je     f01293f2 <test_kshrink+0xed1>
f01293d9:	68 9c bd 13 f0       	push   $0xf013bd9c
f01293de:	68 65 bb 13 f0       	push   $0xf013bb65
f01293e3:	68 a6 0c 00 00       	push   $0xca6
f01293e8:	68 9a ad 13 f0       	push   $0xf013ad9a
f01293ed:	e8 09 6e fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01293f2:	83 ec 0c             	sub    $0xc,%esp
f01293f5:	68 f8 ba 13 f0       	push   $0xf013baf8
f01293fa:	e8 83 78 fd ff       	call   f0100c82 <cprintf>
f01293ff:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129402:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129407:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012940a:	5b                   	pop    %ebx
f012940b:	5f                   	pop    %edi
f012940c:	5d                   	pop    %ebp
f012940d:	c3                   	ret    

f012940e <test_kfreelast>:


int test_kfreelast()
{
f012940e:	55                   	push   %ebp
f012940f:	89 e5                	mov    %esp,%ebp
f0129411:	57                   	push   %edi
f0129412:	53                   	push   %ebx
f0129413:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129419:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012941d:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129421:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129427:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012942d:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129434:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012943b:	e8 11 36 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129440:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129443:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129449:	b9 14 00 00 00       	mov    $0x14,%ecx
f012944e:	b8 00 00 00 00       	mov    $0x0,%eax
f0129453:	89 d7                	mov    %edx,%edi
f0129455:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129457:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012945d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129462:	b8 00 00 00 00       	mov    $0x0,%eax
f0129467:	89 d7                	mov    %edx,%edi
f0129469:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012946b:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129471:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129476:	b8 00 00 00 00       	mov    $0x0,%eax
f012947b:	89 d7                	mov    %edx,%edi
f012947d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012947f:	e8 cd 35 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129484:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129487:	e8 b0 a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012948c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012948f:	83 ec 0c             	sub    $0xc,%esp
f0129492:	68 00 fc 1f 00       	push   $0x1ffc00
f0129497:	e8 77 e3 fd ff       	call   f0107813 <kmalloc>
f012949c:	83 c4 10             	add    $0x10,%esp
f012949f:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01294a5:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01294ab:	89 c1                	mov    %eax,%ecx
f01294ad:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01294b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01294b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01294bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01294c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01294c7:	f7 75 cc             	divl   -0x34(%ebp)
f01294ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01294cd:	29 d0                	sub    %edx,%eax
f01294cf:	89 c3                	mov    %eax,%ebx
f01294d1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01294d8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01294dd:	0f b6 d0             	movzbl %al,%edx
f01294e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01294e3:	01 d0                	add    %edx,%eax
f01294e5:	48                   	dec    %eax
f01294e6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01294e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01294ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01294f1:	f7 75 c4             	divl   -0x3c(%ebp)
f01294f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01294f7:	29 d0                	sub    %edx,%eax
f01294f9:	01 c3                	add    %eax,%ebx
f01294fb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129502:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129507:	0f b6 c0             	movzbl %al,%eax
f012950a:	c1 e0 04             	shl    $0x4,%eax
f012950d:	89 c2                	mov    %eax,%edx
f012950f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129512:	01 d0                	add    %edx,%eax
f0129514:	48                   	dec    %eax
f0129515:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129518:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012951b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129520:	f7 75 bc             	divl   -0x44(%ebp)
f0129523:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129526:	29 d0                	sub    %edx,%eax
f0129528:	01 d8                	add    %ebx,%eax
f012952a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012952f:	39 c1                	cmp    %eax,%ecx
f0129531:	74 17                	je     f012954a <test_kfreelast+0x13c>
f0129533:	83 ec 04             	sub    $0x4,%esp
f0129536:	68 80 ae 13 f0       	push   $0xf013ae80
f012953b:	68 ca 0c 00 00       	push   $0xcca
f0129540:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129545:	e8 b1 6c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012954a:	e8 ed a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012954f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129552:	74 17                	je     f012956b <test_kfreelast+0x15d>
f0129554:	83 ec 04             	sub    $0x4,%esp
f0129557:	68 b4 ad 13 f0       	push   $0xf013adb4
f012955c:	68 cb 0c 00 00       	push   $0xccb
f0129561:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129566:	e8 90 6c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012956b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012956e:	e8 de 34 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129573:	29 c3                	sub    %eax,%ebx
f0129575:	89 d8                	mov    %ebx,%eax
f0129577:	3d 00 02 00 00       	cmp    $0x200,%eax
f012957c:	74 17                	je     f0129595 <test_kfreelast+0x187>
f012957e:	83 ec 04             	sub    $0x4,%esp
f0129581:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129586:	68 cc 0c 00 00       	push   $0xccc
f012958b:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129590:	e8 66 6c fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129595:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012959c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012959f:	e8 ad 34 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01295a4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295a7:	e8 90 a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01295ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01295af:	83 ec 0c             	sub    $0xc,%esp
f01295b2:	68 00 fc 1f 00       	push   $0x1ffc00
f01295b7:	e8 57 e2 fd ff       	call   f0107813 <kmalloc>
f01295bc:	83 c4 10             	add    $0x10,%esp
f01295bf:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295c5:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01295cb:	89 c1                	mov    %eax,%ecx
f01295cd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01295d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01295d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01295df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01295e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01295e7:	f7 75 b4             	divl   -0x4c(%ebp)
f01295ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01295ed:	29 d0                	sub    %edx,%eax
f01295ef:	89 c3                	mov    %eax,%ebx
f01295f1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01295f8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01295fd:	0f b6 d0             	movzbl %al,%edx
f0129600:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129603:	01 d0                	add    %edx,%eax
f0129605:	48                   	dec    %eax
f0129606:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129609:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012960c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129611:	f7 75 ac             	divl   -0x54(%ebp)
f0129614:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129617:	29 d0                	sub    %edx,%eax
f0129619:	01 c3                	add    %eax,%ebx
f012961b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129622:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129627:	0f b6 c0             	movzbl %al,%eax
f012962a:	c1 e0 04             	shl    $0x4,%eax
f012962d:	89 c2                	mov    %eax,%edx
f012962f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129632:	01 d0                	add    %edx,%eax
f0129634:	48                   	dec    %eax
f0129635:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129638:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012963b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129640:	f7 75 a4             	divl   -0x5c(%ebp)
f0129643:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129646:	29 d0                	sub    %edx,%eax
f0129648:	01 d8                	add    %ebx,%eax
f012964a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012964f:	39 c1                	cmp    %eax,%ecx
f0129651:	74 17                	je     f012966a <test_kfreelast+0x25c>
f0129653:	83 ec 04             	sub    $0x4,%esp
f0129656:	68 80 ae 13 f0       	push   $0xf013ae80
f012965b:	68 d3 0c 00 00       	push   $0xcd3
f0129660:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129665:	e8 91 6b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012966a:	e8 cd a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012966f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129672:	74 17                	je     f012968b <test_kfreelast+0x27d>
f0129674:	83 ec 04             	sub    $0x4,%esp
f0129677:	68 b4 ad 13 f0       	push   $0xf013adb4
f012967c:	68 d4 0c 00 00       	push   $0xcd4
f0129681:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129686:	e8 70 6b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012968b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012968e:	e8 be 33 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129693:	29 c3                	sub    %eax,%ebx
f0129695:	89 d8                	mov    %ebx,%eax
f0129697:	3d 00 02 00 00       	cmp    $0x200,%eax
f012969c:	74 17                	je     f01296b5 <test_kfreelast+0x2a7>
f012969e:	83 ec 04             	sub    $0x4,%esp
f01296a1:	68 1c ae 13 f0       	push   $0xf013ae1c
f01296a6:	68 d5 0c 00 00       	push   $0xcd5
f01296ab:	68 9a ad 13 f0       	push   $0xf013ad9a
f01296b0:	e8 46 6b fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01296b5:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f01296bc:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01296bf:	e8 8d 33 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01296c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296c7:	e8 70 a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01296cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01296cf:	83 ec 0c             	sub    $0xc,%esp
f01296d2:	68 00 08 00 00       	push   $0x800
f01296d7:	e8 37 e1 fd ff       	call   f0107813 <kmalloc>
f01296dc:	83 c4 10             	add    $0x10,%esp
f01296df:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296e5:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01296eb:	89 c1                	mov    %eax,%ecx
f01296ed:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01296f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01296f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296fc:	89 45 98             	mov    %eax,-0x68(%ebp)
f01296ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129702:	ba 00 00 00 00       	mov    $0x0,%edx
f0129707:	f7 75 9c             	divl   -0x64(%ebp)
f012970a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012970d:	29 d0                	sub    %edx,%eax
f012970f:	89 c3                	mov    %eax,%ebx
f0129711:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129718:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012971d:	0f b6 d0             	movzbl %al,%edx
f0129720:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129723:	01 d0                	add    %edx,%eax
f0129725:	48                   	dec    %eax
f0129726:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129729:	8b 45 90             	mov    -0x70(%ebp),%eax
f012972c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129731:	f7 75 94             	divl   -0x6c(%ebp)
f0129734:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129737:	29 d0                	sub    %edx,%eax
f0129739:	01 c3                	add    %eax,%ebx
f012973b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129742:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129747:	0f b6 c0             	movzbl %al,%eax
f012974a:	c1 e0 04             	shl    $0x4,%eax
f012974d:	89 c2                	mov    %eax,%edx
f012974f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129752:	01 d0                	add    %edx,%eax
f0129754:	48                   	dec    %eax
f0129755:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129758:	8b 45 88             	mov    -0x78(%ebp),%eax
f012975b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129760:	f7 75 8c             	divl   -0x74(%ebp)
f0129763:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129766:	29 d0                	sub    %edx,%eax
f0129768:	01 d8                	add    %ebx,%eax
f012976a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012976f:	39 c1                	cmp    %eax,%ecx
f0129771:	74 17                	je     f012978a <test_kfreelast+0x37c>
f0129773:	83 ec 04             	sub    $0x4,%esp
f0129776:	68 80 ae 13 f0       	push   $0xf013ae80
f012977b:	68 dc 0c 00 00       	push   $0xcdc
f0129780:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129785:	e8 71 6a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012978a:	e8 ad a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012978f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129792:	74 17                	je     f01297ab <test_kfreelast+0x39d>
f0129794:	83 ec 04             	sub    $0x4,%esp
f0129797:	68 b4 ad 13 f0       	push   $0xf013adb4
f012979c:	68 dd 0c 00 00       	push   $0xcdd
f01297a1:	68 9a ad 13 f0       	push   $0xf013ad9a
f01297a6:	e8 50 6a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297ab:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297ae:	e8 9e 32 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f01297b3:	29 c3                	sub    %eax,%ebx
f01297b5:	89 d8                	mov    %ebx,%eax
f01297b7:	83 f8 01             	cmp    $0x1,%eax
f01297ba:	74 17                	je     f01297d3 <test_kfreelast+0x3c5>
f01297bc:	83 ec 04             	sub    $0x4,%esp
f01297bf:	68 1c ae 13 f0       	push   $0xf013ae1c
f01297c4:	68 de 0c 00 00       	push   $0xcde
f01297c9:	68 9a ad 13 f0       	push   $0xf013ad9a
f01297ce:	e8 28 6a fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01297d3:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01297da:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01297dd:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01297e3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01297e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297ed:	eb 0e                	jmp    f01297fd <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01297ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297f2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297f5:	01 d0                	add    %edx,%eax
f01297f7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01297fa:	ff 45 f4             	incl   -0xc(%ebp)
f01297fd:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129803:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129806:	7f e7                	jg     f01297ef <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129808:	e8 44 32 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012980d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129810:	e8 27 a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129815:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129818:	83 ec 0c             	sub    $0xc,%esp
f012981b:	68 00 08 00 00       	push   $0x800
f0129820:	e8 ee df fd ff       	call   f0107813 <kmalloc>
f0129825:	83 c4 10             	add    $0x10,%esp
f0129828:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012982e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129834:	89 c1                	mov    %eax,%ecx
f0129836:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012983d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129840:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129845:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012984b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129851:	ba 00 00 00 00       	mov    $0x0,%edx
f0129856:	f7 75 80             	divl   -0x80(%ebp)
f0129859:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012985f:	29 d0                	sub    %edx,%eax
f0129861:	89 c3                	mov    %eax,%ebx
f0129863:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012986a:	10 00 00 
f012986d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129872:	0f b6 d0             	movzbl %al,%edx
f0129875:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012987b:	01 d0                	add    %edx,%eax
f012987d:	48                   	dec    %eax
f012987e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129884:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012988a:	ba 00 00 00 00       	mov    $0x0,%edx
f012988f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129895:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012989b:	29 d0                	sub    %edx,%eax
f012989d:	01 c3                	add    %eax,%ebx
f012989f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01298a6:	10 00 00 
f01298a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01298ae:	0f b6 c0             	movzbl %al,%eax
f01298b1:	c1 e0 04             	shl    $0x4,%eax
f01298b4:	89 c2                	mov    %eax,%edx
f01298b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01298bc:	01 d0                	add    %edx,%eax
f01298be:	48                   	dec    %eax
f01298bf:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01298c5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01298cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01298d0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01298d6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01298dc:	29 d0                	sub    %edx,%eax
f01298de:	01 d8                	add    %ebx,%eax
f01298e0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01298e5:	39 c1                	cmp    %eax,%ecx
f01298e7:	74 17                	je     f0129900 <test_kfreelast+0x4f2>
f01298e9:	83 ec 04             	sub    $0x4,%esp
f01298ec:	68 80 ae 13 f0       	push   $0xf013ae80
f01298f1:	68 ea 0c 00 00       	push   $0xcea
f01298f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f01298fb:	e8 fb 68 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129900:	e8 37 a4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129905:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129908:	74 17                	je     f0129921 <test_kfreelast+0x513>
f012990a:	83 ec 04             	sub    $0x4,%esp
f012990d:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129912:	68 eb 0c 00 00       	push   $0xceb
f0129917:	68 9a ad 13 f0       	push   $0xf013ad9a
f012991c:	e8 da 68 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129921:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129924:	e8 28 31 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129929:	29 c3                	sub    %eax,%ebx
f012992b:	89 d8                	mov    %ebx,%eax
f012992d:	83 f8 01             	cmp    $0x1,%eax
f0129930:	74 17                	je     f0129949 <test_kfreelast+0x53b>
f0129932:	83 ec 04             	sub    $0x4,%esp
f0129935:	68 1c ae 13 f0       	push   $0xf013ae1c
f012993a:	68 ec 0c 00 00       	push   $0xcec
f012993f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129944:	e8 b2 68 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129949:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129950:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129953:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129959:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012995c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129963:	eb 0e                	jmp    f0129973 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129965:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129968:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012996b:	01 d0                	add    %edx,%eax
f012996d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129970:	ff 45 f4             	incl   -0xc(%ebp)
f0129973:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129979:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012997c:	7f e7                	jg     f0129965 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012997e:	e8 ce 30 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129983:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129986:	e8 b1 a3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012998b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012998e:	83 ec 0c             	sub    $0xc,%esp
f0129991:	68 00 1c 00 00       	push   $0x1c00
f0129996:	e8 78 de fd ff       	call   f0107813 <kmalloc>
f012999b:	83 c4 10             	add    $0x10,%esp
f012999e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01299a4:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01299aa:	89 c1                	mov    %eax,%ecx
f01299ac:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01299b3:	10 00 00 
f01299b6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01299bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299c1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01299c7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01299cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01299d2:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01299d8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01299de:	29 d0                	sub    %edx,%eax
f01299e0:	89 c3                	mov    %eax,%ebx
f01299e2:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01299e9:	10 00 00 
f01299ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01299f1:	0f b6 d0             	movzbl %al,%edx
f01299f4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01299fa:	01 d0                	add    %edx,%eax
f01299fc:	48                   	dec    %eax
f01299fd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129a03:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129a09:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a0e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129a14:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129a1a:	29 d0                	sub    %edx,%eax
f0129a1c:	01 c3                	add    %eax,%ebx
f0129a1e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129a25:	10 00 00 
f0129a28:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129a2d:	0f b6 c0             	movzbl %al,%eax
f0129a30:	c1 e0 04             	shl    $0x4,%eax
f0129a33:	89 c2                	mov    %eax,%edx
f0129a35:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129a3b:	01 d0                	add    %edx,%eax
f0129a3d:	48                   	dec    %eax
f0129a3e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129a44:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a4f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129a55:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129a5b:	29 d0                	sub    %edx,%eax
f0129a5d:	01 d8                	add    %ebx,%eax
f0129a5f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129a64:	39 c1                	cmp    %eax,%ecx
f0129a66:	74 17                	je     f0129a7f <test_kfreelast+0x671>
f0129a68:	83 ec 04             	sub    $0x4,%esp
f0129a6b:	68 80 ae 13 f0       	push   $0xf013ae80
f0129a70:	68 f8 0c 00 00       	push   $0xcf8
f0129a75:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129a7a:	e8 7c 67 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a7f:	e8 b8 a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129a84:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a87:	74 17                	je     f0129aa0 <test_kfreelast+0x692>
f0129a89:	83 ec 04             	sub    $0x4,%esp
f0129a8c:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129a91:	68 f9 0c 00 00       	push   $0xcf9
f0129a96:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129a9b:	e8 5b 67 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129aa0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129aa3:	e8 a9 2f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129aa8:	29 c3                	sub    %eax,%ebx
f0129aaa:	89 d8                	mov    %ebx,%eax
f0129aac:	83 f8 02             	cmp    $0x2,%eax
f0129aaf:	74 17                	je     f0129ac8 <test_kfreelast+0x6ba>
f0129ab1:	83 ec 04             	sub    $0x4,%esp
f0129ab4:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129ab9:	68 fa 0c 00 00       	push   $0xcfa
f0129abe:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129ac3:	e8 33 67 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129ac8:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129acf:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129ad2:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129ad8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129adb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ae2:	eb 0e                	jmp    f0129af2 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129ae4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ae7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129aea:	01 d0                	add    %edx,%eax
f0129aec:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129aef:	ff 45 f4             	incl   -0xc(%ebp)
f0129af2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129af8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129afb:	7f e7                	jg     f0129ae4 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129afd:	e8 4f 2f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129b02:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b05:	e8 32 a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129b0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129b0d:	83 ec 0c             	sub    $0xc,%esp
f0129b10:	68 00 fc 2f 00       	push   $0x2ffc00
f0129b15:	e8 f9 dc fd ff       	call   f0107813 <kmalloc>
f0129b1a:	83 c4 10             	add    $0x10,%esp
f0129b1d:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b23:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129b29:	89 c1                	mov    %eax,%ecx
f0129b2b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129b32:	10 00 00 
f0129b35:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129b3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b40:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129b46:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129b4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b51:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129b57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129b5d:	29 d0                	sub    %edx,%eax
f0129b5f:	89 c3                	mov    %eax,%ebx
f0129b61:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129b68:	10 00 00 
f0129b6b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129b70:	0f b6 d0             	movzbl %al,%edx
f0129b73:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129b79:	01 d0                	add    %edx,%eax
f0129b7b:	48                   	dec    %eax
f0129b7c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129b82:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b8d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129b93:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129b99:	29 d0                	sub    %edx,%eax
f0129b9b:	01 c3                	add    %eax,%ebx
f0129b9d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129ba4:	10 00 00 
f0129ba7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129bac:	0f b6 c0             	movzbl %al,%eax
f0129baf:	c1 e0 04             	shl    $0x4,%eax
f0129bb2:	89 c2                	mov    %eax,%edx
f0129bb4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129bba:	01 d0                	add    %edx,%eax
f0129bbc:	48                   	dec    %eax
f0129bbd:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129bc3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129bc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bce:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129bd4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129bda:	29 d0                	sub    %edx,%eax
f0129bdc:	01 d8                	add    %ebx,%eax
f0129bde:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129be3:	39 c1                	cmp    %eax,%ecx
f0129be5:	74 17                	je     f0129bfe <test_kfreelast+0x7f0>
f0129be7:	83 ec 04             	sub    $0x4,%esp
f0129bea:	68 80 ae 13 f0       	push   $0xf013ae80
f0129bef:	68 06 0d 00 00       	push   $0xd06
f0129bf4:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129bf9:	e8 fd 65 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bfe:	e8 39 a1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129c03:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c06:	74 17                	je     f0129c1f <test_kfreelast+0x811>
f0129c08:	83 ec 04             	sub    $0x4,%esp
f0129c0b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129c10:	68 07 0d 00 00       	push   $0xd07
f0129c15:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129c1a:	e8 dc 65 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c1f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c22:	e8 2a 2e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129c27:	29 c3                	sub    %eax,%ebx
f0129c29:	89 d8                	mov    %ebx,%eax
f0129c2b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129c30:	74 17                	je     f0129c49 <test_kfreelast+0x83b>
f0129c32:	83 ec 04             	sub    $0x4,%esp
f0129c35:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129c3a:	68 08 0d 00 00       	push   $0xd08
f0129c3f:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129c44:	e8 b2 65 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129c49:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129c50:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129c53:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129c59:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129c5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c63:	eb 0e                	jmp    f0129c73 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129c65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129c68:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129c6b:	01 d0                	add    %edx,%eax
f0129c6d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129c70:	ff 45 f4             	incl   -0xc(%ebp)
f0129c73:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129c79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c7c:	7f e7                	jg     f0129c65 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c7e:	e8 ce 2d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129c83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c86:	e8 b1 a0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129c8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129c8e:	83 ec 0c             	sub    $0xc,%esp
f0129c91:	68 00 fc 5f 00       	push   $0x5ffc00
f0129c96:	e8 78 db fd ff       	call   f0107813 <kmalloc>
f0129c9b:	83 c4 10             	add    $0x10,%esp
f0129c9e:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ca4:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129caa:	89 c1                	mov    %eax,%ecx
f0129cac:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129cb3:	10 00 00 
f0129cb6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129cbc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129cc1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129cc7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129ccd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cd2:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129cd8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129cde:	29 d0                	sub    %edx,%eax
f0129ce0:	89 c3                	mov    %eax,%ebx
f0129ce2:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129ce9:	10 00 00 
f0129cec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129cf1:	0f b6 d0             	movzbl %al,%edx
f0129cf4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129cfa:	01 d0                	add    %edx,%eax
f0129cfc:	48                   	dec    %eax
f0129cfd:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129d03:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129d09:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d0e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129d14:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129d1a:	29 d0                	sub    %edx,%eax
f0129d1c:	01 c3                	add    %eax,%ebx
f0129d1e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129d25:	10 00 00 
f0129d28:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129d2d:	0f b6 c0             	movzbl %al,%eax
f0129d30:	c1 e0 04             	shl    $0x4,%eax
f0129d33:	89 c2                	mov    %eax,%edx
f0129d35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129d3b:	01 d0                	add    %edx,%eax
f0129d3d:	48                   	dec    %eax
f0129d3e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129d44:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d4f:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129d55:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129d5b:	29 d0                	sub    %edx,%eax
f0129d5d:	01 d8                	add    %ebx,%eax
f0129d5f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129d64:	39 c1                	cmp    %eax,%ecx
f0129d66:	74 17                	je     f0129d7f <test_kfreelast+0x971>
f0129d68:	83 ec 04             	sub    $0x4,%esp
f0129d6b:	68 80 ae 13 f0       	push   $0xf013ae80
f0129d70:	68 14 0d 00 00       	push   $0xd14
f0129d75:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129d7a:	e8 7c 64 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d7f:	e8 b8 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129d84:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d87:	74 17                	je     f0129da0 <test_kfreelast+0x992>
f0129d89:	83 ec 04             	sub    $0x4,%esp
f0129d8c:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129d91:	68 15 0d 00 00       	push   $0xd15
f0129d96:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129d9b:	e8 5b 64 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129da0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129da3:	e8 a9 2c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129da8:	29 c3                	sub    %eax,%ebx
f0129daa:	89 d8                	mov    %ebx,%eax
f0129dac:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129db1:	74 17                	je     f0129dca <test_kfreelast+0x9bc>
f0129db3:	83 ec 04             	sub    $0x4,%esp
f0129db6:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129dbb:	68 16 0d 00 00       	push   $0xd16
f0129dc0:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129dc5:	e8 31 64 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129dca:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129dd1:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129dd4:	e8 78 2c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129dd9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ddc:	e8 5b 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129de1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129de4:	83 ec 0c             	sub    $0xc,%esp
f0129de7:	68 00 38 00 00       	push   $0x3800
f0129dec:	e8 22 da fd ff       	call   f0107813 <kmalloc>
f0129df1:	83 c4 10             	add    $0x10,%esp
f0129df4:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129dfa:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129e00:	89 c1                	mov    %eax,%ecx
f0129e02:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129e09:	10 00 00 
f0129e0c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129e12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e17:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129e1d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129e23:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e28:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129e2e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129e34:	29 d0                	sub    %edx,%eax
f0129e36:	89 c3                	mov    %eax,%ebx
f0129e38:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129e3f:	10 00 00 
f0129e42:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129e47:	0f b6 d0             	movzbl %al,%edx
f0129e4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129e50:	01 d0                	add    %edx,%eax
f0129e52:	48                   	dec    %eax
f0129e53:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129e59:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129e5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e64:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129e6a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129e70:	29 d0                	sub    %edx,%eax
f0129e72:	01 c3                	add    %eax,%ebx
f0129e74:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129e7b:	10 00 00 
f0129e7e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129e83:	0f b6 c0             	movzbl %al,%eax
f0129e86:	c1 e0 04             	shl    $0x4,%eax
f0129e89:	89 c2                	mov    %eax,%edx
f0129e8b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129e91:	01 d0                	add    %edx,%eax
f0129e93:	48                   	dec    %eax
f0129e94:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129e9a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129ea0:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ea5:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129eab:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129eb1:	29 d0                	sub    %edx,%eax
f0129eb3:	01 d8                	add    %ebx,%eax
f0129eb5:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129eba:	39 c1                	cmp    %eax,%ecx
f0129ebc:	74 17                	je     f0129ed5 <test_kfreelast+0xac7>
f0129ebe:	83 ec 04             	sub    $0x4,%esp
f0129ec1:	68 80 ae 13 f0       	push   $0xf013ae80
f0129ec6:	68 1d 0d 00 00       	push   $0xd1d
f0129ecb:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129ed0:	e8 26 63 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ed5:	e8 62 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129eda:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129edd:	74 17                	je     f0129ef6 <test_kfreelast+0xae8>
f0129edf:	83 ec 04             	sub    $0x4,%esp
f0129ee2:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129ee7:	68 1e 0d 00 00       	push   $0xd1e
f0129eec:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129ef1:	e8 05 63 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129ef6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129ef9:	e8 53 2b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129efe:	29 c3                	sub    %eax,%ebx
f0129f00:	89 d8                	mov    %ebx,%eax
f0129f02:	83 f8 04             	cmp    $0x4,%eax
f0129f05:	74 17                	je     f0129f1e <test_kfreelast+0xb10>
f0129f07:	83 ec 04             	sub    $0x4,%esp
f0129f0a:	68 1c ae 13 f0       	push   $0xf013ae1c
f0129f0f:	68 1f 0d 00 00       	push   $0xd1f
f0129f14:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129f19:	e8 dd 62 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129f1e:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129f25:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129f28:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129f2e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129f31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f38:	eb 0e                	jmp    f0129f48 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129f3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129f3d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f40:	01 d0                	add    %edx,%eax
f0129f42:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129f45:	ff 45 f4             	incl   -0xc(%ebp)
f0129f48:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129f4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f51:	7f e7                	jg     f0129f3a <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129f53:	e8 f9 2a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129f58:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129f5e:	e8 d9 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129f63:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129f69:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129f6f:	83 ec 0c             	sub    $0xc,%esp
f0129f72:	50                   	push   %eax
f0129f73:	e8 66 d9 fd ff       	call   f01078de <kfree>
f0129f78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f7b:	e8 bc 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129f80:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129f86:	74 17                	je     f0129f9f <test_kfreelast+0xb91>
f0129f88:	83 ec 04             	sub    $0x4,%esp
f0129f8b:	68 b4 ad 13 f0       	push   $0xf013adb4
f0129f90:	68 2e 0d 00 00       	push   $0xd2e
f0129f95:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129f9a:	e8 5c 62 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129f9f:	e8 ad 2a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129fa4:	89 c2                	mov    %eax,%edx
f0129fa6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129fac:	29 c2                	sub    %eax,%edx
f0129fae:	89 d0                	mov    %edx,%eax
f0129fb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129fb5:	74 17                	je     f0129fce <test_kfreelast+0xbc0>
f0129fb7:	83 ec 04             	sub    $0x4,%esp
f0129fba:	68 24 b5 13 f0       	push   $0xf013b524
f0129fbf:	68 2f 0d 00 00       	push   $0xd2f
f0129fc4:	68 9a ad 13 f0       	push   $0xf013ad9a
f0129fc9:	e8 2d 62 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129fce:	e8 7e 2a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f0129fd3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fd9:	e8 5e 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129fde:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129fe4:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129fea:	83 ec 0c             	sub    $0xc,%esp
f0129fed:	50                   	push   %eax
f0129fee:	e8 eb d8 fd ff       	call   f01078de <kfree>
f0129ff3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ff6:	e8 41 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ffb:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a001:	74 17                	je     f012a01a <test_kfreelast+0xc0c>
f012a003:	83 ec 04             	sub    $0x4,%esp
f012a006:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a00b:	68 35 0d 00 00       	push   $0xd35
f012a010:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a015:	e8 e1 61 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a01a:	e8 32 2a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a01f:	89 c2                	mov    %eax,%edx
f012a021:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a027:	29 c2                	sub    %eax,%edx
f012a029:	89 d0                	mov    %edx,%eax
f012a02b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a030:	74 17                	je     f012a049 <test_kfreelast+0xc3b>
f012a032:	83 ec 04             	sub    $0x4,%esp
f012a035:	68 24 b5 13 f0       	push   $0xf013b524
f012a03a:	68 36 0d 00 00       	push   $0xd36
f012a03f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a044:	e8 b2 61 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a049:	e8 03 2a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a04e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a054:	e8 e3 9c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a059:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a05f:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a065:	83 ec 0c             	sub    $0xc,%esp
f012a068:	50                   	push   %eax
f012a069:	e8 70 d8 fd ff       	call   f01078de <kfree>
f012a06e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a071:	e8 c6 9c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a076:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a07c:	74 17                	je     f012a095 <test_kfreelast+0xc87>
f012a07e:	83 ec 04             	sub    $0x4,%esp
f012a081:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a086:	68 3c 0d 00 00       	push   $0xd3c
f012a08b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a090:	e8 66 61 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a095:	e8 b7 29 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a09a:	89 c2                	mov    %eax,%edx
f012a09c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a0a2:	29 c2                	sub    %eax,%edx
f012a0a4:	89 d0                	mov    %edx,%eax
f012a0a6:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a0ab:	74 17                	je     f012a0c4 <test_kfreelast+0xcb6>
f012a0ad:	83 ec 04             	sub    $0x4,%esp
f012a0b0:	68 24 b5 13 f0       	push   $0xf013b524
f012a0b5:	68 3d 0d 00 00       	push   $0xd3d
f012a0ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a0bf:	e8 37 61 fd ff       	call   f01001fb <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a0c4:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a0ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a0cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0d4:	eb 1e                	jmp    f012a0f4 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a0d6:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a0dc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a0df:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0e2:	01 c8                	add    %ecx,%eax
f012a0e4:	8a 00                	mov    (%eax),%al
f012a0e6:	0f be c0             	movsbl %al,%eax
f012a0e9:	01 d0                	add    %edx,%eax
f012a0eb:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a0f1:	ff 45 f4             	incl   -0xc(%ebp)
f012a0f4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a0fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a0fd:	7f d7                	jg     f012a0d6 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a0ff:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a105:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a10b:	01 c0                	add    %eax,%eax
f012a10d:	39 c2                	cmp    %eax,%edx
f012a10f:	74 17                	je     f012a128 <test_kfreelast+0xd1a>
f012a111:	83 ec 04             	sub    $0x4,%esp
f012a114:	68 80 b5 13 f0       	push   $0xf013b580
f012a119:	68 48 0d 00 00       	push   $0xd48
f012a11e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a123:	e8 d3 60 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a128:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a12e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a138:	eb 1e                	jmp    f012a158 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a13a:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a140:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a143:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a146:	01 c8                	add    %ecx,%eax
f012a148:	8a 00                	mov    (%eax),%al
f012a14a:	0f be c0             	movsbl %al,%eax
f012a14d:	01 d0                	add    %edx,%eax
f012a14f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a155:	ff 45 f4             	incl   -0xc(%ebp)
f012a158:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a15e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a161:	7f d7                	jg     f012a13a <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a163:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a169:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a16f:	89 c1                	mov    %eax,%ecx
f012a171:	01 c9                	add    %ecx,%ecx
f012a173:	01 c8                	add    %ecx,%eax
f012a175:	39 c2                	cmp    %eax,%edx
f012a177:	74 17                	je     f012a190 <test_kfreelast+0xd82>
f012a179:	83 ec 04             	sub    $0x4,%esp
f012a17c:	68 80 b5 13 f0       	push   $0xf013b580
f012a181:	68 50 0d 00 00       	push   $0xd50
f012a186:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a18b:	e8 6b 60 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a190:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a196:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a199:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1a0:	eb 1e                	jmp    f012a1c0 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a1a2:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a1a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a1ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1ae:	01 c8                	add    %ecx,%eax
f012a1b0:	8a 00                	mov    (%eax),%al
f012a1b2:	0f be c0             	movsbl %al,%eax
f012a1b5:	01 d0                	add    %edx,%eax
f012a1b7:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a1bd:	ff 45 f4             	incl   -0xc(%ebp)
f012a1c0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a1c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a1c9:	7f d7                	jg     f012a1a2 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a1cb:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a1d1:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a1d7:	c1 e2 02             	shl    $0x2,%edx
f012a1da:	39 d0                	cmp    %edx,%eax
f012a1dc:	74 17                	je     f012a1f5 <test_kfreelast+0xde7>
f012a1de:	83 ec 04             	sub    $0x4,%esp
f012a1e1:	68 80 b5 13 f0       	push   $0xf013b580
f012a1e6:	68 58 0d 00 00       	push   $0xd58
f012a1eb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a1f0:	e8 06 60 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a1f5:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a1fb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a1fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a205:	eb 1e                	jmp    f012a225 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a207:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a20d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a210:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a213:	01 c8                	add    %ecx,%eax
f012a215:	8a 00                	mov    (%eax),%al
f012a217:	0f be c0             	movsbl %al,%eax
f012a21a:	01 d0                	add    %edx,%eax
f012a21c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a222:	ff 45 f4             	incl   -0xc(%ebp)
f012a225:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a22b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a22e:	7f d7                	jg     f012a207 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a230:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a236:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a23c:	89 d0                	mov    %edx,%eax
f012a23e:	c1 e0 02             	shl    $0x2,%eax
f012a241:	01 d0                	add    %edx,%eax
f012a243:	39 c1                	cmp    %eax,%ecx
f012a245:	74 17                	je     f012a25e <test_kfreelast+0xe50>
f012a247:	83 ec 04             	sub    $0x4,%esp
f012a24a:	68 80 b5 13 f0       	push   $0xf013b580
f012a24f:	68 60 0d 00 00       	push   $0xd60
f012a254:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a259:	e8 9d 5f fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a25e:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a264:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a267:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a26e:	eb 1e                	jmp    f012a28e <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a270:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a276:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a279:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a27c:	01 c8                	add    %ecx,%eax
f012a27e:	8a 00                	mov    (%eax),%al
f012a280:	0f be c0             	movsbl %al,%eax
f012a283:	01 d0                	add    %edx,%eax
f012a285:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a28b:	ff 45 f4             	incl   -0xc(%ebp)
f012a28e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a294:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a297:	7f d7                	jg     f012a270 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a299:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a29f:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a2a5:	89 d0                	mov    %edx,%eax
f012a2a7:	01 c0                	add    %eax,%eax
f012a2a9:	01 d0                	add    %edx,%eax
f012a2ab:	01 c0                	add    %eax,%eax
f012a2ad:	01 d0                	add    %edx,%eax
f012a2af:	39 c1                	cmp    %eax,%ecx
f012a2b1:	74 17                	je     f012a2ca <test_kfreelast+0xebc>
f012a2b3:	83 ec 04             	sub    $0x4,%esp
f012a2b6:	68 80 b5 13 f0       	push   $0xf013b580
f012a2bb:	68 68 0d 00 00       	push   $0xd68
f012a2c0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a2c5:	e8 31 5f fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a2ca:	e8 82 27 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a2cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2d2:	e8 65 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a2d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a2da:	83 ec 0c             	sub    $0xc,%esp
f012a2dd:	68 00 50 00 00       	push   $0x5000
f012a2e2:	e8 2c d5 fd ff       	call   f0107813 <kmalloc>
f012a2e7:	83 c4 10             	add    $0x10,%esp
f012a2ea:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a2f0:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a2f6:	89 c1                	mov    %eax,%ecx
f012a2f8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a2ff:	10 00 00 
f012a302:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a308:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a30d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a313:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a319:	ba 00 00 00 00       	mov    $0x0,%edx
f012a31e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a324:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a32a:	29 d0                	sub    %edx,%eax
f012a32c:	89 c3                	mov    %eax,%ebx
f012a32e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a335:	10 00 00 
f012a338:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a33d:	0f b6 d0             	movzbl %al,%edx
f012a340:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a346:	01 d0                	add    %edx,%eax
f012a348:	48                   	dec    %eax
f012a349:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a34f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a355:	ba 00 00 00 00       	mov    $0x0,%edx
f012a35a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a360:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a366:	29 d0                	sub    %edx,%eax
f012a368:	01 c3                	add    %eax,%ebx
f012a36a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a371:	10 00 00 
f012a374:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a379:	0f b6 c0             	movzbl %al,%eax
f012a37c:	c1 e0 04             	shl    $0x4,%eax
f012a37f:	89 c2                	mov    %eax,%edx
f012a381:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a387:	01 d0                	add    %edx,%eax
f012a389:	48                   	dec    %eax
f012a38a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a390:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a396:	ba 00 00 00 00       	mov    $0x0,%edx
f012a39b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a3a1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a3a7:	29 d0                	sub    %edx,%eax
f012a3a9:	01 d8                	add    %ebx,%eax
f012a3ab:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a3b0:	39 c1                	cmp    %eax,%ecx
f012a3b2:	74 17                	je     f012a3cb <test_kfreelast+0xfbd>
f012a3b4:	83 ec 04             	sub    $0x4,%esp
f012a3b7:	68 80 ae 13 f0       	push   $0xf013ae80
f012a3bc:	68 71 0d 00 00       	push   $0xd71
f012a3c1:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a3c6:	e8 30 5e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3cb:	e8 6c 99 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a3d0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3d3:	74 17                	je     f012a3ec <test_kfreelast+0xfde>
f012a3d5:	83 ec 04             	sub    $0x4,%esp
f012a3d8:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a3dd:	68 72 0d 00 00       	push   $0xd72
f012a3e2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a3e7:	e8 0f 5e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a3ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a3ef:	e8 5d 26 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a3f4:	29 c3                	sub    %eax,%ebx
f012a3f6:	89 d8                	mov    %ebx,%eax
f012a3f8:	83 f8 05             	cmp    $0x5,%eax
f012a3fb:	74 17                	je     f012a414 <test_kfreelast+0x1006>
f012a3fd:	83 ec 04             	sub    $0x4,%esp
f012a400:	68 1c ae 13 f0       	push   $0xf013ae1c
f012a405:	68 73 0d 00 00       	push   $0xd73
f012a40a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a40f:	e8 e7 5d fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a414:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a41b:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a41e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a424:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a42e:	eb 0e                	jmp    f012a43e <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a430:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a433:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a436:	01 d0                	add    %edx,%eax
f012a438:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a43b:	ff 45 f4             	incl   -0xc(%ebp)
f012a43e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a444:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a447:	7f e7                	jg     f012a430 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a449:	e8 03 26 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a44e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a451:	e8 e6 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a456:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a459:	83 ec 0c             	sub    $0xc,%esp
f012a45c:	68 00 00 10 00       	push   $0x100000
f012a461:	e8 ad d3 fd ff       	call   f0107813 <kmalloc>
f012a466:	83 c4 10             	add    $0x10,%esp
f012a469:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a46f:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a475:	89 c1                	mov    %eax,%ecx
f012a477:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a47e:	10 00 00 
f012a481:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a487:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a48c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a492:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a498:	ba 00 00 00 00       	mov    $0x0,%edx
f012a49d:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a4a3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a4a9:	29 d0                	sub    %edx,%eax
f012a4ab:	89 c3                	mov    %eax,%ebx
f012a4ad:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a4b4:	10 00 00 
f012a4b7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a4bc:	0f b6 d0             	movzbl %al,%edx
f012a4bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a4c5:	01 d0                	add    %edx,%eax
f012a4c7:	48                   	dec    %eax
f012a4c8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a4ce:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a4d4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4d9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a4df:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a4e5:	29 d0                	sub    %edx,%eax
f012a4e7:	01 c3                	add    %eax,%ebx
f012a4e9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a4f0:	10 00 00 
f012a4f3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a4f8:	0f b6 c0             	movzbl %al,%eax
f012a4fb:	c1 e0 04             	shl    $0x4,%eax
f012a4fe:	89 c2                	mov    %eax,%edx
f012a500:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a506:	01 d0                	add    %edx,%eax
f012a508:	48                   	dec    %eax
f012a509:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a50f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a515:	ba 00 00 00 00       	mov    $0x0,%edx
f012a51a:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a520:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a526:	29 d0                	sub    %edx,%eax
f012a528:	01 d8                	add    %ebx,%eax
f012a52a:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a52f:	39 c1                	cmp    %eax,%ecx
f012a531:	74 17                	je     f012a54a <test_kfreelast+0x113c>
f012a533:	83 ec 04             	sub    $0x4,%esp
f012a536:	68 80 ae 13 f0       	push   $0xf013ae80
f012a53b:	68 7f 0d 00 00       	push   $0xd7f
f012a540:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a545:	e8 b1 5c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a54a:	e8 ed 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a54f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a552:	74 17                	je     f012a56b <test_kfreelast+0x115d>
f012a554:	83 ec 04             	sub    $0x4,%esp
f012a557:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a55c:	68 80 0d 00 00       	push   $0xd80
f012a561:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a566:	e8 90 5c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a56b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a56e:	e8 de 24 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a573:	29 c3                	sub    %eax,%ebx
f012a575:	89 d8                	mov    %ebx,%eax
f012a577:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a57c:	74 17                	je     f012a595 <test_kfreelast+0x1187>
f012a57e:	83 ec 04             	sub    $0x4,%esp
f012a581:	68 1c ae 13 f0       	push   $0xf013ae1c
f012a586:	68 81 0d 00 00       	push   $0xd81
f012a58b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a590:	e8 66 5c fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a595:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a59c:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a59f:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a5a5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a5a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5af:	eb 0e                	jmp    f012a5bf <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a5b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a5b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5b7:	01 d0                	add    %edx,%eax
f012a5b9:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a5bc:	ff 45 f4             	incl   -0xc(%ebp)
f012a5bf:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a5c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5c8:	7f e7                	jg     f012a5b1 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a5ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a5d1:	e8 7b 24 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a5d6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5d9:	e8 5e 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a5de:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a5e1:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a5e7:	83 ec 0c             	sub    $0xc,%esp
f012a5ea:	50                   	push   %eax
f012a5eb:	e8 ee d2 fd ff       	call   f01078de <kfree>
f012a5f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5f3:	e8 44 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a5f8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5fb:	74 17                	je     f012a614 <test_kfreelast+0x1206>
f012a5fd:	83 ec 04             	sub    $0x4,%esp
f012a600:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a605:	68 91 0d 00 00       	push   $0xd91
f012a60a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a60f:	e8 e7 5b fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a614:	e8 38 24 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a619:	89 c2                	mov    %eax,%edx
f012a61b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a61e:	29 c2                	sub    %eax,%edx
f012a620:	89 d0                	mov    %edx,%eax
f012a622:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a627:	74 17                	je     f012a640 <test_kfreelast+0x1232>
f012a629:	83 ec 04             	sub    $0x4,%esp
f012a62c:	68 24 b5 13 f0       	push   $0xf013b524
f012a631:	68 92 0d 00 00       	push   $0xd92
f012a636:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a63b:	e8 bb 5b fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a640:	e8 0c 24 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a645:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a648:	e8 ef 96 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a64d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a650:	83 ec 0c             	sub    $0xc,%esp
f012a653:	68 00 78 00 00       	push   $0x7800
f012a658:	e8 b6 d1 fd ff       	call   f0107813 <kmalloc>
f012a65d:	83 c4 10             	add    $0x10,%esp
f012a660:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a666:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a66c:	89 c1                	mov    %eax,%ecx
f012a66e:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a675:	10 00 00 
f012a678:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a67e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a683:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a689:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a68f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a694:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a69a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a6a0:	29 d0                	sub    %edx,%eax
f012a6a2:	89 c3                	mov    %eax,%ebx
f012a6a4:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a6ab:	10 00 00 
f012a6ae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6b3:	0f b6 d0             	movzbl %al,%edx
f012a6b6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a6bc:	01 d0                	add    %edx,%eax
f012a6be:	48                   	dec    %eax
f012a6bf:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a6c5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a6cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6d0:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a6d6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a6dc:	29 d0                	sub    %edx,%eax
f012a6de:	01 c3                	add    %eax,%ebx
f012a6e0:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a6e7:	10 00 00 
f012a6ea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6ef:	0f b6 c0             	movzbl %al,%eax
f012a6f2:	c1 e0 04             	shl    $0x4,%eax
f012a6f5:	89 c2                	mov    %eax,%edx
f012a6f7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a6fd:	01 d0                	add    %edx,%eax
f012a6ff:	48                   	dec    %eax
f012a700:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a706:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a70c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a711:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a717:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a71d:	29 d0                	sub    %edx,%eax
f012a71f:	01 d8                	add    %ebx,%eax
f012a721:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a726:	39 c1                	cmp    %eax,%ecx
f012a728:	74 17                	je     f012a741 <test_kfreelast+0x1333>
f012a72a:	83 ec 04             	sub    $0x4,%esp
f012a72d:	68 80 ae 13 f0       	push   $0xf013ae80
f012a732:	68 9b 0d 00 00       	push   $0xd9b
f012a737:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a73c:	e8 ba 5a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a741:	e8 f6 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a746:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a749:	74 17                	je     f012a762 <test_kfreelast+0x1354>
f012a74b:	83 ec 04             	sub    $0x4,%esp
f012a74e:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a753:	68 9c 0d 00 00       	push   $0xd9c
f012a758:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a75d:	e8 99 5a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a762:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a765:	e8 e7 22 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a76a:	29 c3                	sub    %eax,%ebx
f012a76c:	89 d8                	mov    %ebx,%eax
f012a76e:	83 f8 08             	cmp    $0x8,%eax
f012a771:	74 17                	je     f012a78a <test_kfreelast+0x137c>
f012a773:	83 ec 04             	sub    $0x4,%esp
f012a776:	68 1c ae 13 f0       	push   $0xf013ae1c
f012a77b:	68 9d 0d 00 00       	push   $0xd9d
f012a780:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a785:	e8 71 5a fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a78a:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a791:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a794:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a79a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a79d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7a4:	eb 0e                	jmp    f012a7b4 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a7a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7a9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7ac:	01 d0                	add    %edx,%eax
f012a7ae:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a7b1:	ff 45 f4             	incl   -0xc(%ebp)
f012a7b4:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a7ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7bd:	7f e7                	jg     f012a7a6 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7bf:	e8 8d 22 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a7c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7c7:	e8 70 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a7cf:	83 ec 0c             	sub    $0xc,%esp
f012a7d2:	68 00 00 10 00       	push   $0x100000
f012a7d7:	e8 37 d0 fd ff       	call   f0107813 <kmalloc>
f012a7dc:	83 c4 10             	add    $0x10,%esp
f012a7df:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a7e5:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a7eb:	89 c1                	mov    %eax,%ecx
f012a7ed:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a7f4:	10 00 00 
f012a7f7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a7fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a802:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a808:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a80e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a813:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a819:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a81f:	29 d0                	sub    %edx,%eax
f012a821:	89 c3                	mov    %eax,%ebx
f012a823:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a82a:	10 00 00 
f012a82d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a832:	0f b6 d0             	movzbl %al,%edx
f012a835:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a83b:	01 d0                	add    %edx,%eax
f012a83d:	48                   	dec    %eax
f012a83e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a844:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a84a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a84f:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a855:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a85b:	29 d0                	sub    %edx,%eax
f012a85d:	01 c3                	add    %eax,%ebx
f012a85f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a866:	10 00 00 
f012a869:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a86e:	0f b6 c0             	movzbl %al,%eax
f012a871:	c1 e0 04             	shl    $0x4,%eax
f012a874:	89 c2                	mov    %eax,%edx
f012a876:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a87c:	01 d0                	add    %edx,%eax
f012a87e:	48                   	dec    %eax
f012a87f:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a885:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a88b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a890:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a896:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a89c:	29 d0                	sub    %edx,%eax
f012a89e:	01 d8                	add    %ebx,%eax
f012a8a0:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a8a5:	39 c1                	cmp    %eax,%ecx
f012a8a7:	74 17                	je     f012a8c0 <test_kfreelast+0x14b2>
f012a8a9:	83 ec 04             	sub    $0x4,%esp
f012a8ac:	68 80 ae 13 f0       	push   $0xf013ae80
f012a8b1:	68 a9 0d 00 00       	push   $0xda9
f012a8b6:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a8bb:	e8 3b 59 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8c0:	e8 77 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a8c5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8c8:	74 17                	je     f012a8e1 <test_kfreelast+0x14d3>
f012a8ca:	83 ec 04             	sub    $0x4,%esp
f012a8cd:	68 b4 ad 13 f0       	push   $0xf013adb4
f012a8d2:	68 aa 0d 00 00       	push   $0xdaa
f012a8d7:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a8dc:	e8 1a 59 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a8e1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a8e4:	e8 68 21 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a8e9:	29 c3                	sub    %eax,%ebx
f012a8eb:	89 d8                	mov    %ebx,%eax
f012a8ed:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a8f2:	74 17                	je     f012a90b <test_kfreelast+0x14fd>
f012a8f4:	83 ec 04             	sub    $0x4,%esp
f012a8f7:	68 1c ae 13 f0       	push   $0xf013ae1c
f012a8fc:	68 ab 0d 00 00       	push   $0xdab
f012a901:	68 9a ad 13 f0       	push   $0xf013ad9a
f012a906:	e8 f0 58 fd ff       	call   f01001fb <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a90b:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a912:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a915:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a91b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a91e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a925:	eb 0e                	jmp    f012a935 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a92a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a92d:	01 d0                	add    %edx,%eax
f012a92f:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a932:	ff 45 f4             	incl   -0xc(%ebp)
f012a935:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a93b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a93e:	7f e7                	jg     f012a927 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a940:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a944:	83 ec 08             	sub    $0x8,%esp
f012a947:	ff 75 f0             	pushl  -0x10(%ebp)
f012a94a:	68 cc bd 13 f0       	push   $0xf013bdcc
f012a94f:	e8 2e 63 fd ff       	call   f0100c82 <cprintf>
f012a954:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a957:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a95e:	e8 ee 20 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a963:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a966:	e8 d1 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a96b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a96e:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a974:	83 ec 0c             	sub    $0xc,%esp
f012a977:	50                   	push   %eax
f012a978:	e8 61 cf fd ff       	call   f01078de <kfree>
f012a97d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a980:	e8 b7 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a985:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a988:	74 1d                	je     f012a9a7 <test_kfreelast+0x1599>
f012a98a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a98e:	75 17                	jne    f012a9a7 <test_kfreelast+0x1599>
f012a990:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a997:	83 ec 0c             	sub    $0xc,%esp
f012a99a:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012a99f:	e8 de 62 fd ff       	call   f0100c82 <cprintf>
f012a9a4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a9a7:	e8 a5 20 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a9ac:	89 c2                	mov    %eax,%edx
f012a9ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a9b1:	29 c2                	sub    %eax,%edx
f012a9b3:	89 d0                	mov    %edx,%eax
f012a9b5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a9ba:	74 1d                	je     f012a9d9 <test_kfreelast+0x15cb>
f012a9bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9c0:	75 17                	jne    f012a9d9 <test_kfreelast+0x15cb>
f012a9c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9c9:	83 ec 0c             	sub    $0xc,%esp
f012a9cc:	68 60 be 13 f0       	push   $0xf013be60
f012a9d1:	e8 ac 62 fd ff       	call   f0100c82 <cprintf>
f012a9d6:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9d9:	e8 73 20 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012a9de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9e1:	e8 56 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a9e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a9e9:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a9ef:	83 ec 0c             	sub    $0xc,%esp
f012a9f2:	50                   	push   %eax
f012a9f3:	e8 e6 ce fd ff       	call   f01078de <kfree>
f012a9f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9fb:	e8 3c 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aa00:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa03:	74 1d                	je     f012aa22 <test_kfreelast+0x1614>
f012aa05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa09:	75 17                	jne    f012aa22 <test_kfreelast+0x1614>
f012aa0b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa12:	83 ec 0c             	sub    $0xc,%esp
f012aa15:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012aa1a:	e8 63 62 fd ff       	call   f0100c82 <cprintf>
f012aa1f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa22:	e8 2a 20 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012aa27:	89 c2                	mov    %eax,%edx
f012aa29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa2c:	29 c2                	sub    %eax,%edx
f012aa2e:	89 d0                	mov    %edx,%eax
f012aa30:	83 f8 08             	cmp    $0x8,%eax
f012aa33:	74 1d                	je     f012aa52 <test_kfreelast+0x1644>
f012aa35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa39:	75 17                	jne    f012aa52 <test_kfreelast+0x1644>
f012aa3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa42:	83 ec 0c             	sub    $0xc,%esp
f012aa45:	68 60 be 13 f0       	push   $0xf013be60
f012aa4a:	e8 33 62 fd ff       	call   f0100c82 <cprintf>
f012aa4f:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa52:	e8 fa 1f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012aa57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa5a:	e8 dd 92 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aa5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012aa62:	83 ec 0c             	sub    $0xc,%esp
f012aa65:	68 00 28 00 00       	push   $0x2800
f012aa6a:	e8 a4 cd fd ff       	call   f0107813 <kmalloc>
f012aa6f:	83 c4 10             	add    $0x10,%esp
f012aa72:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aa78:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa7e:	89 c1                	mov    %eax,%ecx
f012aa80:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012aa87:	10 00 00 
f012aa8a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012aa90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa95:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012aa9b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012aaa1:	ba 00 00 00 00       	mov    $0x0,%edx
f012aaa6:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012aaac:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012aab2:	29 d0                	sub    %edx,%eax
f012aab4:	89 c3                	mov    %eax,%ebx
f012aab6:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012aabd:	10 00 00 
f012aac0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012aac5:	0f b6 d0             	movzbl %al,%edx
f012aac8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012aace:	01 d0                	add    %edx,%eax
f012aad0:	48                   	dec    %eax
f012aad1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012aad7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012aadd:	ba 00 00 00 00       	mov    $0x0,%edx
f012aae2:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012aae8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012aaee:	29 d0                	sub    %edx,%eax
f012aaf0:	01 c3                	add    %eax,%ebx
f012aaf2:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012aaf9:	10 00 00 
f012aafc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ab01:	0f b6 c0             	movzbl %al,%eax
f012ab04:	c1 e0 04             	shl    $0x4,%eax
f012ab07:	89 c2                	mov    %eax,%edx
f012ab09:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ab0f:	01 d0                	add    %edx,%eax
f012ab11:	48                   	dec    %eax
f012ab12:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012ab18:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012ab1e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab23:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012ab29:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012ab2f:	29 d0                	sub    %edx,%eax
f012ab31:	01 d8                	add    %ebx,%eax
f012ab33:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ab38:	39 c1                	cmp    %eax,%ecx
f012ab3a:	74 1d                	je     f012ab59 <test_kfreelast+0x174b>
f012ab3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab40:	75 17                	jne    f012ab59 <test_kfreelast+0x174b>
f012ab42:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab49:	83 ec 0c             	sub    $0xc,%esp
f012ab4c:	68 98 be 13 f0       	push   $0xf013be98
f012ab51:	e8 2c 61 fd ff       	call   f0100c82 <cprintf>
f012ab56:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ab59:	e8 de 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ab5e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab61:	74 1d                	je     f012ab80 <test_kfreelast+0x1772>
f012ab63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab67:	75 17                	jne    f012ab80 <test_kfreelast+0x1772>
f012ab69:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab70:	83 ec 0c             	sub    $0xc,%esp
f012ab73:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012ab78:	e8 05 61 fd ff       	call   f0100c82 <cprintf>
f012ab7d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ab80:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ab83:	e8 c9 1e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ab88:	29 c3                	sub    %eax,%ebx
f012ab8a:	89 d8                	mov    %ebx,%eax
f012ab8c:	83 f8 03             	cmp    $0x3,%eax
f012ab8f:	74 1d                	je     f012abae <test_kfreelast+0x17a0>
f012ab91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab95:	75 17                	jne    f012abae <test_kfreelast+0x17a0>
f012ab97:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab9e:	83 ec 0c             	sub    $0xc,%esp
f012aba1:	68 00 bf 13 f0       	push   $0xf013bf00
f012aba6:	e8 d7 60 fd ff       	call   f0100c82 <cprintf>
f012abab:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012abae:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012abb5:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012abb8:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012abbe:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012abc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012abc8:	eb 0e                	jmp    f012abd8 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012abca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012abcd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012abd0:	01 d0                	add    %edx,%eax
f012abd2:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012abd5:	ff 45 f4             	incl   -0xc(%ebp)
f012abd8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012abde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abe1:	7f e7                	jg     f012abca <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012abe3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abe7:	75 17                	jne    f012ac00 <test_kfreelast+0x17f2>
f012abe9:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012abed:	83 ec 08             	sub    $0x8,%esp
f012abf0:	ff 75 f0             	pushl  -0x10(%ebp)
f012abf3:	68 cc bd 13 f0       	push   $0xf013bdcc
f012abf8:	e8 85 60 fd ff       	call   f0100c82 <cprintf>
f012abfd:	83 c4 10             	add    $0x10,%esp
f012ac00:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012ac07:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ac0d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012ac10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac17:	eb 1e                	jmp    f012ac37 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012ac19:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012ac1f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ac22:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac25:	01 c8                	add    %ecx,%eax
f012ac27:	8a 00                	mov    (%eax),%al
f012ac29:	0f be c0             	movsbl %al,%eax
f012ac2c:	01 d0                	add    %edx,%eax
f012ac2e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012ac34:	ff 45 f4             	incl   -0xc(%ebp)
f012ac37:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012ac3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac40:	7f d7                	jg     f012ac19 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012ac42:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012ac48:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012ac4e:	89 d0                	mov    %edx,%eax
f012ac50:	01 c0                	add    %eax,%eax
f012ac52:	01 d0                	add    %edx,%eax
f012ac54:	c1 e0 02             	shl    $0x2,%eax
f012ac57:	39 c1                	cmp    %eax,%ecx
f012ac59:	74 1d                	je     f012ac78 <test_kfreelast+0x186a>
f012ac5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac5f:	75 17                	jne    f012ac78 <test_kfreelast+0x186a>
f012ac61:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac68:	83 ec 0c             	sub    $0xc,%esp
f012ac6b:	68 44 bf 13 f0       	push   $0xf013bf44
f012ac70:	e8 0d 60 fd ff       	call   f0100c82 <cprintf>
f012ac75:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ac78:	83 ec 0c             	sub    $0xc,%esp
f012ac7b:	6a 03                	push   $0x3
f012ac7d:	e8 6f 22 fe ff       	call   f010cef1 <sys_bypassPageFault>
f012ac82:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012ac85:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ac8b:	05 00 30 00 00       	add    $0x3000,%eax
f012ac90:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012ac93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac9a:	eb 3c                	jmp    f012acd8 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012ac9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ac9f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aca2:	01 d0                	add    %edx,%eax
f012aca4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012aca7:	e8 33 22 fe ff       	call   f010cedf <sys_rcr2>
f012acac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012acaf:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012acb2:	01 ca                	add    %ecx,%edx
f012acb4:	39 d0                	cmp    %edx,%eax
f012acb6:	74 1d                	je     f012acd5 <test_kfreelast+0x18c7>
f012acb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acbc:	75 17                	jne    f012acd5 <test_kfreelast+0x18c7>
f012acbe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acc5:	83 ec 0c             	sub    $0xc,%esp
f012acc8:	68 78 bf 13 f0       	push   $0xf013bf78
f012accd:	e8 b0 5f fd ff       	call   f0100c82 <cprintf>
f012acd2:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012acd5:	ff 45 f4             	incl   -0xc(%ebp)
f012acd8:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012acdf:	7e bb                	jle    f012ac9c <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ace1:	83 ec 0c             	sub    $0xc,%esp
f012ace4:	6a 00                	push   $0x0
f012ace6:	e8 06 22 fe ff       	call   f010cef1 <sys_bypassPageFault>
f012aceb:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012acee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acf2:	75 17                	jne    f012ad0b <test_kfreelast+0x18fd>
f012acf4:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012acf8:	83 ec 08             	sub    $0x8,%esp
f012acfb:	ff 75 f0             	pushl  -0x10(%ebp)
f012acfe:	68 cc bd 13 f0       	push   $0xf013bdcc
f012ad03:	e8 7a 5f fd ff       	call   f0100c82 <cprintf>
f012ad08:	83 c4 10             	add    $0x10,%esp
f012ad0b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad12:	e8 3a 1d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ad17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad1a:	e8 1d 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ad22:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ad28:	83 ec 0c             	sub    $0xc,%esp
f012ad2b:	50                   	push   %eax
f012ad2c:	e8 ad cb fd ff       	call   f01078de <kfree>
f012ad31:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad34:	e8 03 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad39:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad3c:	74 1d                	je     f012ad5b <test_kfreelast+0x194d>
f012ad3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad42:	75 17                	jne    f012ad5b <test_kfreelast+0x194d>
f012ad44:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad4b:	83 ec 0c             	sub    $0xc,%esp
f012ad4e:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012ad53:	e8 2a 5f fd ff       	call   f0100c82 <cprintf>
f012ad58:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ad5b:	e8 f1 1c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ad60:	89 c2                	mov    %eax,%edx
f012ad62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad65:	29 c2                	sub    %eax,%edx
f012ad67:	89 d0                	mov    %edx,%eax
f012ad69:	83 f8 03             	cmp    $0x3,%eax
f012ad6c:	74 1d                	je     f012ad8b <test_kfreelast+0x197d>
f012ad6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad72:	75 17                	jne    f012ad8b <test_kfreelast+0x197d>
f012ad74:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad7b:	83 ec 0c             	sub    $0xc,%esp
f012ad7e:	68 60 be 13 f0       	push   $0xf013be60
f012ad83:	e8 fa 5e fd ff       	call   f0100c82 <cprintf>
f012ad88:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad8b:	e8 c1 1c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ad90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad93:	e8 a4 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad98:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ad9b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ada1:	83 ec 0c             	sub    $0xc,%esp
f012ada4:	50                   	push   %eax
f012ada5:	e8 34 cb fd ff       	call   f01078de <kfree>
f012adaa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adad:	e8 8a 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012adb2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adb5:	74 1d                	je     f012add4 <test_kfreelast+0x19c6>
f012adb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adbb:	75 17                	jne    f012add4 <test_kfreelast+0x19c6>
f012adbd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adc4:	83 ec 0c             	sub    $0xc,%esp
f012adc7:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012adcc:	e8 b1 5e fd ff       	call   f0100c82 <cprintf>
f012add1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012add4:	e8 78 1c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012add9:	89 c2                	mov    %eax,%edx
f012addb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012adde:	29 c2                	sub    %eax,%edx
f012ade0:	89 d0                	mov    %edx,%eax
f012ade2:	83 f8 04             	cmp    $0x4,%eax
f012ade5:	74 1d                	je     f012ae04 <test_kfreelast+0x19f6>
f012ade7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adeb:	75 17                	jne    f012ae04 <test_kfreelast+0x19f6>
f012aded:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adf4:	83 ec 0c             	sub    $0xc,%esp
f012adf7:	68 60 be 13 f0       	push   $0xf013be60
f012adfc:	e8 81 5e fd ff       	call   f0100c82 <cprintf>
f012ae01:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae04:	e8 48 1c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ae09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae0c:	e8 2b 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ae14:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ae1a:	83 ec 0c             	sub    $0xc,%esp
f012ae1d:	50                   	push   %eax
f012ae1e:	e8 bb ca fd ff       	call   f01078de <kfree>
f012ae23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae26:	e8 11 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae2b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae2e:	74 1d                	je     f012ae4d <test_kfreelast+0x1a3f>
f012ae30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae34:	75 17                	jne    f012ae4d <test_kfreelast+0x1a3f>
f012ae36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae3d:	83 ec 0c             	sub    $0xc,%esp
f012ae40:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012ae45:	e8 38 5e fd ff       	call   f0100c82 <cprintf>
f012ae4a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ae4d:	e8 ff 1b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ae52:	89 c2                	mov    %eax,%edx
f012ae54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae57:	29 c2                	sub    %eax,%edx
f012ae59:	89 d0                	mov    %edx,%eax
f012ae5b:	83 f8 05             	cmp    $0x5,%eax
f012ae5e:	74 1d                	je     f012ae7d <test_kfreelast+0x1a6f>
f012ae60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae64:	75 17                	jne    f012ae7d <test_kfreelast+0x1a6f>
f012ae66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae6d:	83 ec 0c             	sub    $0xc,%esp
f012ae70:	68 60 be 13 f0       	push   $0xf013be60
f012ae75:	e8 08 5e fd ff       	call   f0100c82 <cprintf>
f012ae7a:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae7d:	e8 cf 1b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ae82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae85:	e8 b2 8e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012ae8d:	83 ec 0c             	sub    $0xc,%esp
f012ae90:	68 00 c8 00 00       	push   $0xc800
f012ae95:	e8 79 c9 fd ff       	call   f0107813 <kmalloc>
f012ae9a:	83 c4 10             	add    $0x10,%esp
f012ae9d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aea3:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aea9:	89 c1                	mov    %eax,%ecx
f012aeab:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012aeb2:	10 00 00 
f012aeb5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012aebb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aec0:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012aec6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012aecc:	ba 00 00 00 00       	mov    $0x0,%edx
f012aed1:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012aed7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012aedd:	29 d0                	sub    %edx,%eax
f012aedf:	89 c3                	mov    %eax,%ebx
f012aee1:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012aee8:	10 00 00 
f012aeeb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012aef0:	0f b6 d0             	movzbl %al,%edx
f012aef3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012aef9:	01 d0                	add    %edx,%eax
f012aefb:	48                   	dec    %eax
f012aefc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012af02:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012af08:	ba 00 00 00 00       	mov    $0x0,%edx
f012af0d:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012af13:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012af19:	29 d0                	sub    %edx,%eax
f012af1b:	01 c3                	add    %eax,%ebx
f012af1d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012af24:	10 00 00 
f012af27:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012af2c:	0f b6 c0             	movzbl %al,%eax
f012af2f:	c1 e0 04             	shl    $0x4,%eax
f012af32:	89 c2                	mov    %eax,%edx
f012af34:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012af3a:	01 d0                	add    %edx,%eax
f012af3c:	48                   	dec    %eax
f012af3d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012af43:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012af49:	ba 00 00 00 00       	mov    $0x0,%edx
f012af4e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012af54:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012af5a:	29 d0                	sub    %edx,%eax
f012af5c:	01 d8                	add    %ebx,%eax
f012af5e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012af63:	39 c1                	cmp    %eax,%ecx
f012af65:	74 1d                	je     f012af84 <test_kfreelast+0x1b76>
f012af67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af6b:	75 17                	jne    f012af84 <test_kfreelast+0x1b76>
f012af6d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af74:	83 ec 0c             	sub    $0xc,%esp
f012af77:	68 98 be 13 f0       	push   $0xf013be98
f012af7c:	e8 01 5d fd ff       	call   f0100c82 <cprintf>
f012af81:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af84:	e8 b3 8d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012af89:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af8c:	74 1d                	je     f012afab <test_kfreelast+0x1b9d>
f012af8e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af92:	75 17                	jne    f012afab <test_kfreelast+0x1b9d>
f012af94:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af9b:	83 ec 0c             	sub    $0xc,%esp
f012af9e:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012afa3:	e8 da 5c fd ff       	call   f0100c82 <cprintf>
f012afa8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012afab:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012afae:	e8 9e 1a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012afb3:	29 c3                	sub    %eax,%ebx
f012afb5:	89 d8                	mov    %ebx,%eax
f012afb7:	83 f8 0d             	cmp    $0xd,%eax
f012afba:	74 1d                	je     f012afd9 <test_kfreelast+0x1bcb>
f012afbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afc0:	75 17                	jne    f012afd9 <test_kfreelast+0x1bcb>
f012afc2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afc9:	83 ec 0c             	sub    $0xc,%esp
f012afcc:	68 00 bf 13 f0       	push   $0xf013bf00
f012afd1:	e8 ac 5c fd ff       	call   f0100c82 <cprintf>
f012afd6:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012afd9:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012afe0:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012afe3:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012afe9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012afec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aff3:	eb 0e                	jmp    f012b003 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012aff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aff8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012affb:	01 d0                	add    %edx,%eax
f012affd:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b000:	ff 45 f4             	incl   -0xc(%ebp)
f012b003:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b009:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b00c:	7f e7                	jg     f012aff5 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b00e:	e8 3e 1a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b013:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b016:	e8 21 8d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b01b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b01e:	83 ec 0c             	sub    $0xc,%esp
f012b021:	68 00 fc 2f 00       	push   $0x2ffc00
f012b026:	e8 e8 c7 fd ff       	call   f0107813 <kmalloc>
f012b02b:	83 c4 10             	add    $0x10,%esp
f012b02e:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b034:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b03a:	89 c1                	mov    %eax,%ecx
f012b03c:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b043:	10 00 00 
f012b046:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b04c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b051:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b057:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b05d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b062:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b068:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b06e:	29 d0                	sub    %edx,%eax
f012b070:	89 c3                	mov    %eax,%ebx
f012b072:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b079:	10 00 00 
f012b07c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b081:	0f b6 d0             	movzbl %al,%edx
f012b084:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b08a:	01 d0                	add    %edx,%eax
f012b08c:	48                   	dec    %eax
f012b08d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b093:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b099:	ba 00 00 00 00       	mov    $0x0,%edx
f012b09e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b0a4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b0aa:	29 d0                	sub    %edx,%eax
f012b0ac:	01 c3                	add    %eax,%ebx
f012b0ae:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b0b5:	10 00 00 
f012b0b8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b0bd:	0f b6 c0             	movzbl %al,%eax
f012b0c0:	c1 e0 04             	shl    $0x4,%eax
f012b0c3:	89 c2                	mov    %eax,%edx
f012b0c5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b0cb:	01 d0                	add    %edx,%eax
f012b0cd:	48                   	dec    %eax
f012b0ce:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b0d4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b0da:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0df:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b0e5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b0eb:	29 d0                	sub    %edx,%eax
f012b0ed:	01 d8                	add    %ebx,%eax
f012b0ef:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b0f4:	39 c1                	cmp    %eax,%ecx
f012b0f6:	74 1d                	je     f012b115 <test_kfreelast+0x1d07>
f012b0f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0fc:	75 17                	jne    f012b115 <test_kfreelast+0x1d07>
f012b0fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b105:	83 ec 0c             	sub    $0xc,%esp
f012b108:	68 98 be 13 f0       	push   $0xf013be98
f012b10d:	e8 70 5b fd ff       	call   f0100c82 <cprintf>
f012b112:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b115:	e8 22 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b11a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b11d:	74 1d                	je     f012b13c <test_kfreelast+0x1d2e>
f012b11f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b123:	75 17                	jne    f012b13c <test_kfreelast+0x1d2e>
f012b125:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b12c:	83 ec 0c             	sub    $0xc,%esp
f012b12f:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b134:	e8 49 5b fd ff       	call   f0100c82 <cprintf>
f012b139:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b13c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b13f:	e8 0d 19 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b144:	29 c3                	sub    %eax,%ebx
f012b146:	89 d8                	mov    %ebx,%eax
f012b148:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b14d:	74 1d                	je     f012b16c <test_kfreelast+0x1d5e>
f012b14f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b153:	75 17                	jne    f012b16c <test_kfreelast+0x1d5e>
f012b155:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b15c:	83 ec 0c             	sub    $0xc,%esp
f012b15f:	68 00 bf 13 f0       	push   $0xf013bf00
f012b164:	e8 19 5b fd ff       	call   f0100c82 <cprintf>
f012b169:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b16c:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b173:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b176:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b17c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b17f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b186:	eb 0e                	jmp    f012b196 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b188:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b18b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b18e:	01 d0                	add    %edx,%eax
f012b190:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b193:	ff 45 f4             	incl   -0xc(%ebp)
f012b196:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b19c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b19f:	7f e7                	jg     f012b188 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b1a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1a5:	75 17                	jne    f012b1be <test_kfreelast+0x1db0>
f012b1a7:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b1ab:	83 ec 08             	sub    $0x8,%esp
f012b1ae:	ff 75 f0             	pushl  -0x10(%ebp)
f012b1b1:	68 cc bd 13 f0       	push   $0xf013bdcc
f012b1b6:	e8 c7 5a fd ff       	call   f0100c82 <cprintf>
f012b1bb:	83 c4 10             	add    $0x10,%esp
f012b1be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1c5:	e8 87 18 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b1ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1cd:	e8 6a 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b1d5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b1db:	83 ec 0c             	sub    $0xc,%esp
f012b1de:	50                   	push   %eax
f012b1df:	e8 fa c6 fd ff       	call   f01078de <kfree>
f012b1e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1e7:	e8 50 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1ec:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1ef:	74 1d                	je     f012b20e <test_kfreelast+0x1e00>
f012b1f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1f5:	75 17                	jne    f012b20e <test_kfreelast+0x1e00>
f012b1f7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1fe:	83 ec 0c             	sub    $0xc,%esp
f012b201:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b206:	e8 77 5a fd ff       	call   f0100c82 <cprintf>
f012b20b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b20e:	e8 3e 18 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b213:	89 c2                	mov    %eax,%edx
f012b215:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b218:	29 c2                	sub    %eax,%edx
f012b21a:	89 d0                	mov    %edx,%eax
f012b21c:	83 f8 0d             	cmp    $0xd,%eax
f012b21f:	74 1d                	je     f012b23e <test_kfreelast+0x1e30>
f012b221:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b225:	75 17                	jne    f012b23e <test_kfreelast+0x1e30>
f012b227:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b22e:	83 ec 0c             	sub    $0xc,%esp
f012b231:	68 60 be 13 f0       	push   $0xf013be60
f012b236:	e8 47 5a fd ff       	call   f0100c82 <cprintf>
f012b23b:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b23e:	83 ec 0c             	sub    $0xc,%esp
f012b241:	6a 03                	push   $0x3
f012b243:	e8 a9 1c fe ff       	call   f010cef1 <sys_bypassPageFault>
f012b248:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b24b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b251:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b254:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b25b:	eb 3c                	jmp    f012b299 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b25d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b260:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b263:	01 d0                	add    %edx,%eax
f012b265:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b268:	e8 72 1c fe ff       	call   f010cedf <sys_rcr2>
f012b26d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b270:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b273:	01 ca                	add    %ecx,%edx
f012b275:	39 d0                	cmp    %edx,%eax
f012b277:	74 1d                	je     f012b296 <test_kfreelast+0x1e88>
f012b279:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b27d:	75 17                	jne    f012b296 <test_kfreelast+0x1e88>
f012b27f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b286:	83 ec 0c             	sub    $0xc,%esp
f012b289:	68 78 bf 13 f0       	push   $0xf013bf78
f012b28e:	e8 ef 59 fd ff       	call   f0100c82 <cprintf>
f012b293:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b296:	ff 45 f4             	incl   -0xc(%ebp)
f012b299:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b2a0:	7e bb                	jle    f012b25d <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b2a2:	83 ec 0c             	sub    $0xc,%esp
f012b2a5:	6a 00                	push   $0x0
f012b2a7:	e8 45 1c fe ff       	call   f010cef1 <sys_bypassPageFault>
f012b2ac:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b2af:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b2b5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b2b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b2bf:	eb 1e                	jmp    f012b2df <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b2c1:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b2c7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b2ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b2cd:	01 c8                	add    %ecx,%eax
f012b2cf:	8a 00                	mov    (%eax),%al
f012b2d1:	0f be c0             	movsbl %al,%eax
f012b2d4:	01 d0                	add    %edx,%eax
f012b2d6:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b2dc:	ff 45 f4             	incl   -0xc(%ebp)
f012b2df:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b2e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b2e8:	7f d7                	jg     f012b2c1 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b2ea:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b2f0:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b2f6:	89 d0                	mov    %edx,%eax
f012b2f8:	01 c0                	add    %eax,%eax
f012b2fa:	01 d0                	add    %edx,%eax
f012b2fc:	01 c0                	add    %eax,%eax
f012b2fe:	01 d0                	add    %edx,%eax
f012b300:	01 c0                	add    %eax,%eax
f012b302:	39 c1                	cmp    %eax,%ecx
f012b304:	74 1d                	je     f012b323 <test_kfreelast+0x1f15>
f012b306:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b30a:	75 17                	jne    f012b323 <test_kfreelast+0x1f15>
f012b30c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b313:	83 ec 0c             	sub    $0xc,%esp
f012b316:	68 44 bf 13 f0       	push   $0xf013bf44
f012b31b:	e8 62 59 fd ff       	call   f0100c82 <cprintf>
f012b320:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b323:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b327:	75 17                	jne    f012b340 <test_kfreelast+0x1f32>
f012b329:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b32d:	83 ec 08             	sub    $0x8,%esp
f012b330:	ff 75 f0             	pushl  -0x10(%ebp)
f012b333:	68 cc bd 13 f0       	push   $0xf013bdcc
f012b338:	e8 45 59 fd ff       	call   f0100c82 <cprintf>
f012b33d:	83 c4 10             	add    $0x10,%esp
f012b340:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b347:	e8 05 17 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b34c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b34f:	e8 e8 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b354:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b357:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b35d:	83 ec 0c             	sub    $0xc,%esp
f012b360:	50                   	push   %eax
f012b361:	e8 78 c5 fd ff       	call   f01078de <kfree>
f012b366:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b369:	e8 ce 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b36e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b371:	74 1d                	je     f012b390 <test_kfreelast+0x1f82>
f012b373:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b377:	75 17                	jne    f012b390 <test_kfreelast+0x1f82>
f012b379:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b380:	83 ec 0c             	sub    $0xc,%esp
f012b383:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b388:	e8 f5 58 fd ff       	call   f0100c82 <cprintf>
f012b38d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b390:	e8 bc 16 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b395:	89 c2                	mov    %eax,%edx
f012b397:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b39a:	29 c2                	sub    %eax,%edx
f012b39c:	89 d0                	mov    %edx,%eax
f012b39e:	83 f8 02             	cmp    $0x2,%eax
f012b3a1:	74 1d                	je     f012b3c0 <test_kfreelast+0x1fb2>
f012b3a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3a7:	75 17                	jne    f012b3c0 <test_kfreelast+0x1fb2>
f012b3a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3b0:	83 ec 0c             	sub    $0xc,%esp
f012b3b3:	68 60 be 13 f0       	push   $0xf013be60
f012b3b8:	e8 c5 58 fd ff       	call   f0100c82 <cprintf>
f012b3bd:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b3c0:	e8 8c 16 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b3c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3c8:	e8 6f 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b3d0:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b3d6:	83 ec 0c             	sub    $0xc,%esp
f012b3d9:	50                   	push   %eax
f012b3da:	e8 ff c4 fd ff       	call   f01078de <kfree>
f012b3df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3e2:	e8 55 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3ea:	74 1d                	je     f012b409 <test_kfreelast+0x1ffb>
f012b3ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3f0:	75 17                	jne    f012b409 <test_kfreelast+0x1ffb>
f012b3f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3f9:	83 ec 0c             	sub    $0xc,%esp
f012b3fc:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b401:	e8 7c 58 fd ff       	call   f0100c82 <cprintf>
f012b406:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b409:	e8 43 16 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b40e:	89 c2                	mov    %eax,%edx
f012b410:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b413:	29 c2                	sub    %eax,%edx
f012b415:	89 d0                	mov    %edx,%eax
f012b417:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b41c:	74 1d                	je     f012b43b <test_kfreelast+0x202d>
f012b41e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b422:	75 17                	jne    f012b43b <test_kfreelast+0x202d>
f012b424:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b42b:	83 ec 0c             	sub    $0xc,%esp
f012b42e:	68 60 be 13 f0       	push   $0xf013be60
f012b433:	e8 4a 58 fd ff       	call   f0100c82 <cprintf>
f012b438:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b43b:	e8 11 16 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b440:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b443:	e8 f4 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b448:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b44b:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b451:	83 ec 0c             	sub    $0xc,%esp
f012b454:	50                   	push   %eax
f012b455:	e8 84 c4 fd ff       	call   f01078de <kfree>
f012b45a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b45d:	e8 da 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b462:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b465:	74 1d                	je     f012b484 <test_kfreelast+0x2076>
f012b467:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b46b:	75 17                	jne    f012b484 <test_kfreelast+0x2076>
f012b46d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b474:	83 ec 0c             	sub    $0xc,%esp
f012b477:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b47c:	e8 01 58 fd ff       	call   f0100c82 <cprintf>
f012b481:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b484:	e8 c8 15 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b489:	89 c2                	mov    %eax,%edx
f012b48b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b48e:	29 c2                	sub    %eax,%edx
f012b490:	89 d0                	mov    %edx,%eax
f012b492:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b497:	74 1d                	je     f012b4b6 <test_kfreelast+0x20a8>
f012b499:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b49d:	75 17                	jne    f012b4b6 <test_kfreelast+0x20a8>
f012b49f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4a6:	83 ec 0c             	sub    $0xc,%esp
f012b4a9:	68 60 be 13 f0       	push   $0xf013be60
f012b4ae:	e8 cf 57 fd ff       	call   f0100c82 <cprintf>
f012b4b3:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b4b6:	e8 96 15 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b4bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b4be:	e8 79 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b4c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b4c6:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b4cc:	83 ec 0c             	sub    $0xc,%esp
f012b4cf:	50                   	push   %eax
f012b4d0:	e8 09 c4 fd ff       	call   f01078de <kfree>
f012b4d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b4d8:	e8 5f 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b4dd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4e0:	74 1d                	je     f012b4ff <test_kfreelast+0x20f1>
f012b4e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4e6:	75 17                	jne    f012b4ff <test_kfreelast+0x20f1>
f012b4e8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4ef:	83 ec 0c             	sub    $0xc,%esp
f012b4f2:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b4f7:	e8 86 57 fd ff       	call   f0100c82 <cprintf>
f012b4fc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b4ff:	e8 4d 15 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b504:	89 c2                	mov    %eax,%edx
f012b506:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b509:	29 c2                	sub    %eax,%edx
f012b50b:	89 d0                	mov    %edx,%eax
f012b50d:	83 f8 01             	cmp    $0x1,%eax
f012b510:	74 1d                	je     f012b52f <test_kfreelast+0x2121>
f012b512:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b516:	75 17                	jne    f012b52f <test_kfreelast+0x2121>
f012b518:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b51f:	83 ec 0c             	sub    $0xc,%esp
f012b522:	68 60 be 13 f0       	push   $0xf013be60
f012b527:	e8 56 57 fd ff       	call   f0100c82 <cprintf>
f012b52c:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b52f:	e8 1d 15 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b534:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b537:	e8 00 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b53c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b53f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b545:	83 ec 0c             	sub    $0xc,%esp
f012b548:	50                   	push   %eax
f012b549:	e8 90 c3 fd ff       	call   f01078de <kfree>
f012b54e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b551:	e8 e6 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b556:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b559:	74 1d                	je     f012b578 <test_kfreelast+0x216a>
f012b55b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b55f:	75 17                	jne    f012b578 <test_kfreelast+0x216a>
f012b561:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b568:	83 ec 0c             	sub    $0xc,%esp
f012b56b:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b570:	e8 0d 57 fd ff       	call   f0100c82 <cprintf>
f012b575:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b578:	e8 d4 14 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b57d:	89 c2                	mov    %eax,%edx
f012b57f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b582:	29 c2                	sub    %eax,%edx
f012b584:	89 d0                	mov    %edx,%eax
f012b586:	83 f8 01             	cmp    $0x1,%eax
f012b589:	74 1d                	je     f012b5a8 <test_kfreelast+0x219a>
f012b58b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b58f:	75 17                	jne    f012b5a8 <test_kfreelast+0x219a>
f012b591:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b598:	83 ec 0c             	sub    $0xc,%esp
f012b59b:	68 60 be 13 f0       	push   $0xf013be60
f012b5a0:	e8 dd 56 fd ff       	call   f0100c82 <cprintf>
f012b5a5:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b5a8:	e8 a4 14 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b5ad:	89 c2                	mov    %eax,%edx
f012b5af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b5b2:	39 c2                	cmp    %eax,%edx
f012b5b4:	74 1d                	je     f012b5d3 <test_kfreelast+0x21c5>
f012b5b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5ba:	75 17                	jne    f012b5d3 <test_kfreelast+0x21c5>
f012b5bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5c3:	83 ec 0c             	sub    $0xc,%esp
f012b5c6:	68 c0 bf 13 f0       	push   $0xf013bfc0
f012b5cb:	e8 b2 56 fd ff       	call   f0100c82 <cprintf>
f012b5d0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b5d3:	83 ec 0c             	sub    $0xc,%esp
f012b5d6:	6a 03                	push   $0x3
f012b5d8:	e8 14 19 fe ff       	call   f010cef1 <sys_bypassPageFault>
f012b5dd:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b5e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b5e7:	e9 8e 00 00 00       	jmp    f012b67a <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b5ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b5ef:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b5f6:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b5f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b5fc:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b5ff:	e8 db 18 fe ff       	call   f010cedf <sys_rcr2>
f012b604:	89 c2                	mov    %eax,%edx
f012b606:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b609:	39 c2                	cmp    %eax,%edx
f012b60b:	74 1d                	je     f012b62a <test_kfreelast+0x221c>
f012b60d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b611:	75 17                	jne    f012b62a <test_kfreelast+0x221c>
f012b613:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b61a:	83 ec 0c             	sub    $0xc,%esp
f012b61d:	68 78 bf 13 f0       	push   $0xf013bf78
f012b622:	e8 5b 56 fd ff       	call   f0100c82 <cprintf>
f012b627:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b62a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b62d:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b634:	89 c2                	mov    %eax,%edx
f012b636:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b639:	01 d0                	add    %edx,%eax
f012b63b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b63e:	e8 9c 18 fe ff       	call   f010cedf <sys_rcr2>
f012b643:	89 c2                	mov    %eax,%edx
f012b645:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b648:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b64f:	89 c1                	mov    %eax,%ecx
f012b651:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b654:	01 c8                	add    %ecx,%eax
f012b656:	39 c2                	cmp    %eax,%edx
f012b658:	74 1d                	je     f012b677 <test_kfreelast+0x2269>
f012b65a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b65e:	75 17                	jne    f012b677 <test_kfreelast+0x2269>
f012b660:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b667:	83 ec 0c             	sub    $0xc,%esp
f012b66a:	68 78 bf 13 f0       	push   $0xf013bf78
f012b66f:	e8 0e 56 fd ff       	call   f0100c82 <cprintf>
f012b674:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b677:	ff 45 f4             	incl   -0xc(%ebp)
f012b67a:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b67e:	0f 8e 68 ff ff ff    	jle    f012b5ec <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b684:	83 ec 0c             	sub    $0xc,%esp
f012b687:	6a 00                	push   $0x0
f012b689:	e8 63 18 fe ff       	call   f010cef1 <sys_bypassPageFault>
f012b68e:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b691:	e8 bb 13 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b696:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b699:	e8 9e 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b69e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b6a1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b6a7:	83 ec 0c             	sub    $0xc,%esp
f012b6aa:	50                   	push   %eax
f012b6ab:	e8 2e c2 fd ff       	call   f01078de <kfree>
f012b6b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6b3:	e8 84 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b6b8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6bb:	74 1d                	je     f012b6da <test_kfreelast+0x22cc>
f012b6bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6c1:	75 17                	jne    f012b6da <test_kfreelast+0x22cc>
f012b6c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6ca:	83 ec 0c             	sub    $0xc,%esp
f012b6cd:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b6d2:	e8 ab 55 fd ff       	call   f0100c82 <cprintf>
f012b6d7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b6da:	e8 72 13 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b6df:	89 c2                	mov    %eax,%edx
f012b6e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6e4:	39 c2                	cmp    %eax,%edx
f012b6e6:	74 1d                	je     f012b705 <test_kfreelast+0x22f7>
f012b6e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6ec:	75 17                	jne    f012b705 <test_kfreelast+0x22f7>
f012b6ee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6f5:	83 ec 0c             	sub    $0xc,%esp
f012b6f8:	68 f8 bf 13 f0       	push   $0xf013bff8
f012b6fd:	e8 80 55 fd ff       	call   f0100c82 <cprintf>
f012b702:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b705:	e8 47 13 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b70a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b70d:	e8 2a 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b712:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b715:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b71b:	83 ec 0c             	sub    $0xc,%esp
f012b71e:	50                   	push   %eax
f012b71f:	e8 ba c1 fd ff       	call   f01078de <kfree>
f012b724:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b727:	e8 10 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b72c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b72f:	74 1d                	je     f012b74e <test_kfreelast+0x2340>
f012b731:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b735:	75 17                	jne    f012b74e <test_kfreelast+0x2340>
f012b737:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b73e:	83 ec 0c             	sub    $0xc,%esp
f012b741:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b746:	e8 37 55 fd ff       	call   f0100c82 <cprintf>
f012b74b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b74e:	e8 fe 12 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b753:	89 c2                	mov    %eax,%edx
f012b755:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b758:	39 c2                	cmp    %eax,%edx
f012b75a:	74 1d                	je     f012b779 <test_kfreelast+0x236b>
f012b75c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b760:	75 17                	jne    f012b779 <test_kfreelast+0x236b>
f012b762:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b769:	83 ec 0c             	sub    $0xc,%esp
f012b76c:	68 f8 bf 13 f0       	push   $0xf013bff8
f012b771:	e8 0c 55 fd ff       	call   f0100c82 <cprintf>
f012b776:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b779:	e8 d3 12 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b77e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b781:	e8 b6 85 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b786:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b789:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b78f:	83 ec 0c             	sub    $0xc,%esp
f012b792:	50                   	push   %eax
f012b793:	e8 46 c1 fd ff       	call   f01078de <kfree>
f012b798:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b79b:	e8 9c 85 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b7a0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7a3:	74 1d                	je     f012b7c2 <test_kfreelast+0x23b4>
f012b7a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7a9:	75 17                	jne    f012b7c2 <test_kfreelast+0x23b4>
f012b7ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7b2:	83 ec 0c             	sub    $0xc,%esp
f012b7b5:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b7ba:	e8 c3 54 fd ff       	call   f0100c82 <cprintf>
f012b7bf:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b7c2:	e8 8a 12 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b7c7:	89 c2                	mov    %eax,%edx
f012b7c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b7cc:	39 c2                	cmp    %eax,%edx
f012b7ce:	74 1d                	je     f012b7ed <test_kfreelast+0x23df>
f012b7d0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7d4:	75 17                	jne    f012b7ed <test_kfreelast+0x23df>
f012b7d6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7dd:	83 ec 0c             	sub    $0xc,%esp
f012b7e0:	68 f8 bf 13 f0       	push   $0xf013bff8
f012b7e5:	e8 98 54 fd ff       	call   f0100c82 <cprintf>
f012b7ea:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b7ed:	e8 5f 12 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b7f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b7f5:	e8 42 85 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b7fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b7fd:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b803:	83 ec 0c             	sub    $0xc,%esp
f012b806:	50                   	push   %eax
f012b807:	e8 d2 c0 fd ff       	call   f01078de <kfree>
f012b80c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b80f:	e8 28 85 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b814:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b817:	74 1d                	je     f012b836 <test_kfreelast+0x2428>
f012b819:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b81d:	75 17                	jne    f012b836 <test_kfreelast+0x2428>
f012b81f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b826:	83 ec 0c             	sub    $0xc,%esp
f012b829:	68 f4 bd 13 f0       	push   $0xf013bdf4
f012b82e:	e8 4f 54 fd ff       	call   f0100c82 <cprintf>
f012b833:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b836:	e8 16 12 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b83b:	89 c2                	mov    %eax,%edx
f012b83d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b840:	39 c2                	cmp    %eax,%edx
f012b842:	74 1d                	je     f012b861 <test_kfreelast+0x2453>
f012b844:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b848:	75 17                	jne    f012b861 <test_kfreelast+0x2453>
f012b84a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b851:	83 ec 0c             	sub    $0xc,%esp
f012b854:	68 f8 bf 13 f0       	push   $0xf013bff8
f012b859:	e8 24 54 fd ff       	call   f0100c82 <cprintf>
f012b85e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b861:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b865:	75 17                	jne    f012b87e <test_kfreelast+0x2470>
f012b867:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b86b:	83 ec 08             	sub    $0x8,%esp
f012b86e:	ff 75 f0             	pushl  -0x10(%ebp)
f012b871:	68 cc bd 13 f0       	push   $0xf013bdcc
f012b876:	e8 07 54 fd ff       	call   f0100c82 <cprintf>
f012b87b:	83 c4 10             	add    $0x10,%esp
f012b87e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b885:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b88a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b88d:	5b                   	pop    %ebx
f012b88e:	5f                   	pop    %edi
f012b88f:	5d                   	pop    %ebp
f012b890:	c3                   	ret    

f012b891 <test_krealloc>:

int test_krealloc() {
f012b891:	55                   	push   %ebp
f012b892:	89 e5                	mov    %esp,%ebp
f012b894:	57                   	push   %edi
f012b895:	53                   	push   %ebx
f012b896:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b89c:	83 ec 0c             	sub    $0xc,%esp
f012b89f:	68 dc ac 13 f0       	push   $0xf013acdc
f012b8a4:	e8 d9 53 fd ff       	call   f0100c82 <cprintf>
f012b8a9:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b8ac:	83 ec 0c             	sub    $0xc,%esp
f012b8af:	68 0c ad 13 f0       	push   $0xf013ad0c
f012b8b4:	e8 c9 53 fd ff       	call   f0100c82 <cprintf>
f012b8b9:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b8bc:	83 ec 0c             	sub    $0xc,%esp
f012b8bf:	68 dc ac 13 f0       	push   $0xf013acdc
f012b8c4:	e8 b9 53 fd ff       	call   f0100c82 <cprintf>
f012b8c9:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b8cc:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b8d0:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b8d4:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b8da:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b8e0:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b8e7:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b8ee:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b8f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b8f9:	b8 00 00 00 00       	mov    $0x0,%eax
f012b8fe:	89 d7                	mov    %edx,%edi
f012b900:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b902:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b909:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b90f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b914:	b8 00 00 00 00       	mov    $0x0,%eax
f012b919:	89 d7                	mov    %edx,%edi
f012b91b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b91d:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b923:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b928:	b8 00 00 00 00       	mov    $0x0,%eax
f012b92d:	89 d7                	mov    %edx,%edi
f012b92f:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b931:	e8 1b 11 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012b936:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b939:	83 ec 08             	sub    $0x8,%esp
f012b93c:	68 00 fc 0f 00       	push   $0xffc00
f012b941:	6a 00                	push   $0x0
f012b943:	e8 8b c1 fd ff       	call   f0107ad3 <krealloc>
f012b948:	83 c4 10             	add    $0x10,%esp
f012b94b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b951:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b957:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b95c:	77 17                	ja     f012b975 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b95e:	83 ec 04             	sub    $0x4,%esp
f012b961:	68 40 c0 13 f0       	push   $0xf013c040
f012b966:	68 e2 0e 00 00       	push   $0xee2
f012b96b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012b970:	e8 86 48 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b975:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b97b:	89 c1                	mov    %eax,%ecx
f012b97d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b984:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b987:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b98c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b98f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b992:	ba 00 00 00 00       	mov    $0x0,%edx
f012b997:	f7 75 b4             	divl   -0x4c(%ebp)
f012b99a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b99d:	29 d0                	sub    %edx,%eax
f012b99f:	89 c3                	mov    %eax,%ebx
f012b9a1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b9a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b9ad:	0f b6 d0             	movzbl %al,%edx
f012b9b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b9b3:	01 d0                	add    %edx,%eax
f012b9b5:	48                   	dec    %eax
f012b9b6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b9b9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b9bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9c1:	f7 75 ac             	divl   -0x54(%ebp)
f012b9c4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b9c7:	29 d0                	sub    %edx,%eax
f012b9c9:	01 c3                	add    %eax,%ebx
f012b9cb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b9d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b9d7:	0f b6 c0             	movzbl %al,%eax
f012b9da:	c1 e0 04             	shl    $0x4,%eax
f012b9dd:	89 c2                	mov    %eax,%edx
f012b9df:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b9e2:	01 d0                	add    %edx,%eax
f012b9e4:	48                   	dec    %eax
f012b9e5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b9e8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9f0:	f7 75 a4             	divl   -0x5c(%ebp)
f012b9f3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b9f6:	29 d0                	sub    %edx,%eax
f012b9f8:	01 d8                	add    %ebx,%eax
f012b9fa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b9ff:	39 c1                	cmp    %eax,%ecx
f012ba01:	74 17                	je     f012ba1a <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012ba03:	83 ec 04             	sub    $0x4,%esp
f012ba06:	68 7c c0 13 f0       	push   $0xf013c07c
f012ba0b:	68 e4 0e 00 00       	push   $0xee4
f012ba10:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ba15:	e8 e1 47 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ba1a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ba1d:	e8 2f 10 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ba22:	29 c3                	sub    %eax,%ebx
f012ba24:	89 d8                	mov    %ebx,%eax
f012ba26:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ba2b:	74 17                	je     f012ba44 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012ba2d:	83 ec 04             	sub    $0x4,%esp
f012ba30:	68 ae c0 13 f0       	push   $0xf013c0ae
f012ba35:	68 e7 0e 00 00       	push   $0xee7
f012ba3a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ba3f:	e8 b7 47 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012ba44:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012ba4b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ba4e:	e8 fe 0f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ba53:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012ba56:	83 ec 08             	sub    $0x8,%esp
f012ba59:	68 00 fc 0f 00       	push   $0xffc00
f012ba5e:	6a 00                	push   $0x0
f012ba60:	e8 6e c0 fd ff       	call   f0107ad3 <krealloc>
f012ba65:	83 c4 10             	add    $0x10,%esp
f012ba68:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012ba6e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ba74:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012ba79:	77 17                	ja     f012ba92 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba7b:	83 ec 04             	sub    $0x4,%esp
f012ba7e:	68 40 c0 13 f0       	push   $0xf013c040
f012ba83:	68 ef 0e 00 00       	push   $0xeef
f012ba88:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ba8d:	e8 69 47 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012ba92:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ba98:	89 c1                	mov    %eax,%ecx
f012ba9a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012baa1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012baa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012baa9:	89 45 98             	mov    %eax,-0x68(%ebp)
f012baac:	8b 45 98             	mov    -0x68(%ebp),%eax
f012baaf:	ba 00 00 00 00       	mov    $0x0,%edx
f012bab4:	f7 75 9c             	divl   -0x64(%ebp)
f012bab7:	8b 45 98             	mov    -0x68(%ebp),%eax
f012baba:	29 d0                	sub    %edx,%eax
f012babc:	89 c3                	mov    %eax,%ebx
f012babe:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bac5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012baca:	0f b6 d0             	movzbl %al,%edx
f012bacd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bad0:	01 d0                	add    %edx,%eax
f012bad2:	48                   	dec    %eax
f012bad3:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bad6:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bad9:	ba 00 00 00 00       	mov    $0x0,%edx
f012bade:	f7 75 94             	divl   -0x6c(%ebp)
f012bae1:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bae4:	29 d0                	sub    %edx,%eax
f012bae6:	01 c3                	add    %eax,%ebx
f012bae8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012baef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012baf4:	0f b6 c0             	movzbl %al,%eax
f012baf7:	c1 e0 04             	shl    $0x4,%eax
f012bafa:	89 c2                	mov    %eax,%edx
f012bafc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012baff:	01 d0                	add    %edx,%eax
f012bb01:	48                   	dec    %eax
f012bb02:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bb05:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bb08:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb0d:	f7 75 8c             	divl   -0x74(%ebp)
f012bb10:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bb13:	29 d0                	sub    %edx,%eax
f012bb15:	01 d8                	add    %ebx,%eax
f012bb17:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012bb1c:	39 c1                	cmp    %eax,%ecx
f012bb1e:	74 17                	je     f012bb37 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012bb20:	83 ec 04             	sub    $0x4,%esp
f012bb23:	68 7c c0 13 f0       	push   $0xf013c07c
f012bb28:	68 f1 0e 00 00       	push   $0xef1
f012bb2d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bb32:	e8 c4 46 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bb37:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bb3a:	e8 12 0f fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bb3f:	29 c3                	sub    %eax,%ebx
f012bb41:	89 d8                	mov    %ebx,%eax
f012bb43:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bb48:	74 17                	je     f012bb61 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012bb4a:	83 ec 04             	sub    $0x4,%esp
f012bb4d:	68 ae c0 13 f0       	push   $0xf013c0ae
f012bb52:	68 f3 0e 00 00       	push   $0xef3
f012bb57:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bb5c:	e8 9a 46 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bb61:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012bb68:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bb6b:	e8 e1 0e fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bb70:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bb73:	83 ec 08             	sub    $0x8,%esp
f012bb76:	68 00 fc 0f 00       	push   $0xffc00
f012bb7b:	6a 00                	push   $0x0
f012bb7d:	e8 51 bf fd ff       	call   f0107ad3 <krealloc>
f012bb82:	83 c4 10             	add    $0x10,%esp
f012bb85:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bb8b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bb91:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bb96:	77 17                	ja     f012bbaf <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb98:	83 ec 04             	sub    $0x4,%esp
f012bb9b:	68 40 c0 13 f0       	push   $0xf013c040
f012bba0:	68 fb 0e 00 00       	push   $0xefb
f012bba5:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bbaa:	e8 4c 46 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bbaf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bbb5:	89 c1                	mov    %eax,%ecx
f012bbb7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bbbe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bbc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bbc6:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bbc9:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bbcc:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbd1:	f7 75 84             	divl   -0x7c(%ebp)
f012bbd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bbd7:	29 d0                	sub    %edx,%eax
f012bbd9:	89 c3                	mov    %eax,%ebx
f012bbdb:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bbe2:	10 00 00 
f012bbe5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bbea:	0f b6 d0             	movzbl %al,%edx
f012bbed:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bbf3:	01 d0                	add    %edx,%eax
f012bbf5:	48                   	dec    %eax
f012bbf6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bbfc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bc02:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc07:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bc0d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bc13:	29 d0                	sub    %edx,%eax
f012bc15:	01 c3                	add    %eax,%ebx
f012bc17:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bc1e:	10 00 00 
f012bc21:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bc26:	0f b6 c0             	movzbl %al,%eax
f012bc29:	c1 e0 04             	shl    $0x4,%eax
f012bc2c:	89 c2                	mov    %eax,%edx
f012bc2e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bc34:	01 d0                	add    %edx,%eax
f012bc36:	48                   	dec    %eax
f012bc37:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bc3d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bc43:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc48:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bc4e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bc54:	29 d0                	sub    %edx,%eax
f012bc56:	01 d8                	add    %ebx,%eax
f012bc58:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bc5d:	39 c1                	cmp    %eax,%ecx
f012bc5f:	74 17                	je     f012bc78 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bc61:	83 ec 04             	sub    $0x4,%esp
f012bc64:	68 7c c0 13 f0       	push   $0xf013c07c
f012bc69:	68 fd 0e 00 00       	push   $0xefd
f012bc6e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bc73:	e8 83 45 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bc78:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc7b:	e8 d1 0d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bc80:	29 c3                	sub    %eax,%ebx
f012bc82:	89 d8                	mov    %ebx,%eax
f012bc84:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bc89:	74 17                	je     f012bca2 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012bc8b:	83 ec 04             	sub    $0x4,%esp
f012bc8e:	68 ae c0 13 f0       	push   $0xf013c0ae
f012bc93:	68 ff 0e 00 00       	push   $0xeff
f012bc98:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bc9d:	e8 59 45 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bca2:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012bca9:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bcac:	e8 a0 0d fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bcb1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bcb4:	83 ec 08             	sub    $0x8,%esp
f012bcb7:	68 00 fc 0f 00       	push   $0xffc00
f012bcbc:	6a 00                	push   $0x0
f012bcbe:	e8 10 be fd ff       	call   f0107ad3 <krealloc>
f012bcc3:	83 c4 10             	add    $0x10,%esp
f012bcc6:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bccc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bcd2:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bcd7:	77 17                	ja     f012bcf0 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bcd9:	83 ec 04             	sub    $0x4,%esp
f012bcdc:	68 40 c0 13 f0       	push   $0xf013c040
f012bce1:	68 06 0f 00 00       	push   $0xf06
f012bce6:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bceb:	e8 0b 45 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bcf0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bcf6:	89 c1                	mov    %eax,%ecx
f012bcf8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bcff:	10 00 00 
f012bd02:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bd08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bd0d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bd13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bd19:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd1e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bd24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bd2a:	29 d0                	sub    %edx,%eax
f012bd2c:	89 c3                	mov    %eax,%ebx
f012bd2e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012bd35:	10 00 00 
f012bd38:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd3d:	0f b6 d0             	movzbl %al,%edx
f012bd40:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012bd46:	01 d0                	add    %edx,%eax
f012bd48:	48                   	dec    %eax
f012bd49:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012bd4f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bd55:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd5a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012bd60:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bd66:	29 d0                	sub    %edx,%eax
f012bd68:	01 c3                	add    %eax,%ebx
f012bd6a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012bd71:	10 00 00 
f012bd74:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd79:	0f b6 c0             	movzbl %al,%eax
f012bd7c:	c1 e0 04             	shl    $0x4,%eax
f012bd7f:	89 c2                	mov    %eax,%edx
f012bd81:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bd87:	01 d0                	add    %edx,%eax
f012bd89:	48                   	dec    %eax
f012bd8a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012bd90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bd96:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd9b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012bda1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bda7:	29 d0                	sub    %edx,%eax
f012bda9:	01 d8                	add    %ebx,%eax
f012bdab:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bdb0:	39 c1                	cmp    %eax,%ecx
f012bdb2:	74 17                	je     f012bdcb <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012bdb4:	83 ec 04             	sub    $0x4,%esp
f012bdb7:	68 7c c0 13 f0       	push   $0xf013c07c
f012bdbc:	68 08 0f 00 00       	push   $0xf08
f012bdc1:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bdc6:	e8 30 44 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bdcb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bdce:	e8 7e 0c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bdd3:	29 c3                	sub    %eax,%ebx
f012bdd5:	89 d8                	mov    %ebx,%eax
f012bdd7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bddc:	74 17                	je     f012bdf5 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bdde:	83 ec 04             	sub    $0x4,%esp
f012bde1:	68 ae c0 13 f0       	push   $0xf013c0ae
f012bde6:	68 0a 0f 00 00       	push   $0xf0a
f012bdeb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bdf0:	e8 06 44 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bdf5:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012bdfc:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bdff:	e8 4d 0c fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012be04:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012be07:	83 ec 08             	sub    $0x8,%esp
f012be0a:	68 00 fc 1f 00       	push   $0x1ffc00
f012be0f:	6a 00                	push   $0x0
f012be11:	e8 bd bc fd ff       	call   f0107ad3 <krealloc>
f012be16:	83 c4 10             	add    $0x10,%esp
f012be19:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012be1f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012be25:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012be2a:	77 17                	ja     f012be43 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be2c:	83 ec 04             	sub    $0x4,%esp
f012be2f:	68 40 c0 13 f0       	push   $0xf013c040
f012be34:	68 11 0f 00 00       	push   $0xf11
f012be39:	68 9a ad 13 f0       	push   $0xf013ad9a
f012be3e:	e8 b8 43 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012be43:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012be49:	89 c1                	mov    %eax,%ecx
f012be4b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012be52:	10 00 00 
f012be55:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012be5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be60:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012be66:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012be6c:	ba 00 00 00 00       	mov    $0x0,%edx
f012be71:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012be77:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012be7d:	29 d0                	sub    %edx,%eax
f012be7f:	89 c3                	mov    %eax,%ebx
f012be81:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012be88:	10 00 00 
f012be8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012be90:	0f b6 d0             	movzbl %al,%edx
f012be93:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012be99:	01 d0                	add    %edx,%eax
f012be9b:	48                   	dec    %eax
f012be9c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bea2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bea8:	ba 00 00 00 00       	mov    $0x0,%edx
f012bead:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012beb3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012beb9:	29 d0                	sub    %edx,%eax
f012bebb:	01 c3                	add    %eax,%ebx
f012bebd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012bec4:	10 00 00 
f012bec7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012becc:	0f b6 c0             	movzbl %al,%eax
f012becf:	c1 e0 04             	shl    $0x4,%eax
f012bed2:	89 c2                	mov    %eax,%edx
f012bed4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012beda:	01 d0                	add    %edx,%eax
f012bedc:	48                   	dec    %eax
f012bedd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012bee3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bee9:	ba 00 00 00 00       	mov    $0x0,%edx
f012beee:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012bef4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012befa:	29 d0                	sub    %edx,%eax
f012befc:	01 d8                	add    %ebx,%eax
f012befe:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bf03:	39 c1                	cmp    %eax,%ecx
f012bf05:	74 17                	je     f012bf1e <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012bf07:	83 ec 04             	sub    $0x4,%esp
f012bf0a:	68 7c c0 13 f0       	push   $0xf013c07c
f012bf0f:	68 13 0f 00 00       	push   $0xf13
f012bf14:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bf19:	e8 dd 42 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bf1e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf21:	e8 2b 0b fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bf26:	29 c3                	sub    %eax,%ebx
f012bf28:	89 d8                	mov    %ebx,%eax
f012bf2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bf2f:	74 17                	je     f012bf48 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012bf31:	83 ec 04             	sub    $0x4,%esp
f012bf34:	68 ae c0 13 f0       	push   $0xf013c0ae
f012bf39:	68 15 0f 00 00       	push   $0xf15
f012bf3e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bf43:	e8 b3 42 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bf48:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012bf4f:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bf52:	e8 fa 0a fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012bf57:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bf5a:	83 ec 08             	sub    $0x8,%esp
f012bf5d:	68 00 fc 1f 00       	push   $0x1ffc00
f012bf62:	6a 00                	push   $0x0
f012bf64:	e8 6a bb fd ff       	call   f0107ad3 <krealloc>
f012bf69:	83 c4 10             	add    $0x10,%esp
f012bf6c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012bf72:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bf78:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012bf7d:	77 17                	ja     f012bf96 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf7f:	83 ec 04             	sub    $0x4,%esp
f012bf82:	68 40 c0 13 f0       	push   $0xf013c040
f012bf87:	68 1c 0f 00 00       	push   $0xf1c
f012bf8c:	68 9a ad 13 f0       	push   $0xf013ad9a
f012bf91:	e8 65 42 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012bf96:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bf9c:	89 c1                	mov    %eax,%ecx
f012bf9e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012bfa5:	10 00 00 
f012bfa8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012bfae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bfb3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012bfb9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bfbf:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfc4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012bfca:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bfd0:	29 d0                	sub    %edx,%eax
f012bfd2:	89 c3                	mov    %eax,%ebx
f012bfd4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012bfdb:	10 00 00 
f012bfde:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bfe3:	0f b6 d0             	movzbl %al,%edx
f012bfe6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012bfec:	01 d0                	add    %edx,%eax
f012bfee:	48                   	dec    %eax
f012bfef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012bff5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bffb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c000:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c006:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c00c:	29 d0                	sub    %edx,%eax
f012c00e:	01 c3                	add    %eax,%ebx
f012c010:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c017:	10 00 00 
f012c01a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c01f:	0f b6 c0             	movzbl %al,%eax
f012c022:	c1 e0 04             	shl    $0x4,%eax
f012c025:	89 c2                	mov    %eax,%edx
f012c027:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c02d:	01 d0                	add    %edx,%eax
f012c02f:	48                   	dec    %eax
f012c030:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c036:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c03c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c041:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c047:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c04d:	29 d0                	sub    %edx,%eax
f012c04f:	01 d8                	add    %ebx,%eax
f012c051:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c056:	39 c1                	cmp    %eax,%ecx
f012c058:	74 17                	je     f012c071 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c05a:	83 ec 04             	sub    $0x4,%esp
f012c05d:	68 7c c0 13 f0       	push   $0xf013c07c
f012c062:	68 1e 0f 00 00       	push   $0xf1e
f012c067:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c06c:	e8 8a 41 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c071:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c074:	e8 d8 09 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c079:	29 c3                	sub    %eax,%ebx
f012c07b:	89 d8                	mov    %ebx,%eax
f012c07d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c082:	74 17                	je     f012c09b <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c084:	83 ec 04             	sub    $0x4,%esp
f012c087:	68 ae c0 13 f0       	push   $0xf013c0ae
f012c08c:	68 20 0f 00 00       	push   $0xf20
f012c091:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c096:	e8 60 41 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c09b:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c0a2:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c0a5:	e8 a7 09 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c0aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c0ad:	83 ec 08             	sub    $0x8,%esp
f012c0b0:	68 00 fc 2f 00       	push   $0x2ffc00
f012c0b5:	6a 00                	push   $0x0
f012c0b7:	e8 17 ba fd ff       	call   f0107ad3 <krealloc>
f012c0bc:	83 c4 10             	add    $0x10,%esp
f012c0bf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c0c5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c0cb:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c0d0:	77 17                	ja     f012c0e9 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0d2:	83 ec 04             	sub    $0x4,%esp
f012c0d5:	68 40 c0 13 f0       	push   $0xf013c040
f012c0da:	68 27 0f 00 00       	push   $0xf27
f012c0df:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c0e4:	e8 12 41 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c0e9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c0ef:	89 c1                	mov    %eax,%ecx
f012c0f1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c0f8:	10 00 00 
f012c0fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c101:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c106:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c10c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c112:	ba 00 00 00 00       	mov    $0x0,%edx
f012c117:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c11d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c123:	29 d0                	sub    %edx,%eax
f012c125:	89 c3                	mov    %eax,%ebx
f012c127:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c12e:	10 00 00 
f012c131:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c136:	0f b6 d0             	movzbl %al,%edx
f012c139:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c13f:	01 d0                	add    %edx,%eax
f012c141:	48                   	dec    %eax
f012c142:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c148:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c14e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c153:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c159:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c15f:	29 d0                	sub    %edx,%eax
f012c161:	01 c3                	add    %eax,%ebx
f012c163:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c16a:	10 00 00 
f012c16d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c172:	0f b6 c0             	movzbl %al,%eax
f012c175:	c1 e0 04             	shl    $0x4,%eax
f012c178:	89 c2                	mov    %eax,%edx
f012c17a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c180:	01 d0                	add    %edx,%eax
f012c182:	48                   	dec    %eax
f012c183:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c189:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c18f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c194:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c19a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c1a0:	29 d0                	sub    %edx,%eax
f012c1a2:	01 d8                	add    %ebx,%eax
f012c1a4:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c1a9:	39 c1                	cmp    %eax,%ecx
f012c1ab:	74 17                	je     f012c1c4 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c1ad:	83 ec 04             	sub    $0x4,%esp
f012c1b0:	68 7c c0 13 f0       	push   $0xf013c07c
f012c1b5:	68 29 0f 00 00       	push   $0xf29
f012c1ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c1bf:	e8 37 40 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c1c4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c1c7:	e8 85 08 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c1cc:	29 c3                	sub    %eax,%ebx
f012c1ce:	89 d8                	mov    %ebx,%eax
f012c1d0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c1d5:	74 17                	je     f012c1ee <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c1d7:	83 ec 04             	sub    $0x4,%esp
f012c1da:	68 e4 b1 13 f0       	push   $0xf013b1e4
f012c1df:	68 2b 0f 00 00       	push   $0xf2b
f012c1e4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c1e9:	e8 0d 40 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c1ee:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c1f5:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c1f8:	e8 54 08 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c1fd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c200:	83 ec 08             	sub    $0x8,%esp
f012c203:	68 00 fc 2f 00       	push   $0x2ffc00
f012c208:	6a 00                	push   $0x0
f012c20a:	e8 c4 b8 fd ff       	call   f0107ad3 <krealloc>
f012c20f:	83 c4 10             	add    $0x10,%esp
f012c212:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c218:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c21e:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c223:	77 17                	ja     f012c23c <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c225:	83 ec 04             	sub    $0x4,%esp
f012c228:	68 40 c0 13 f0       	push   $0xf013c040
f012c22d:	68 32 0f 00 00       	push   $0xf32
f012c232:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c237:	e8 bf 3f fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c23c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c242:	89 c1                	mov    %eax,%ecx
f012c244:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c24b:	10 00 00 
f012c24e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c254:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c259:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c25f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c265:	ba 00 00 00 00       	mov    $0x0,%edx
f012c26a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c270:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c276:	29 d0                	sub    %edx,%eax
f012c278:	89 c3                	mov    %eax,%ebx
f012c27a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c281:	10 00 00 
f012c284:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c289:	0f b6 d0             	movzbl %al,%edx
f012c28c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c292:	01 d0                	add    %edx,%eax
f012c294:	48                   	dec    %eax
f012c295:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c29b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c2a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2a6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c2ac:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c2b2:	29 d0                	sub    %edx,%eax
f012c2b4:	01 c3                	add    %eax,%ebx
f012c2b6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c2bd:	10 00 00 
f012c2c0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c2c5:	0f b6 c0             	movzbl %al,%eax
f012c2c8:	c1 e0 04             	shl    $0x4,%eax
f012c2cb:	89 c2                	mov    %eax,%edx
f012c2cd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c2d3:	01 d0                	add    %edx,%eax
f012c2d5:	48                   	dec    %eax
f012c2d6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c2dc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c2e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2e7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c2ed:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c2f3:	29 d0                	sub    %edx,%eax
f012c2f5:	01 d8                	add    %ebx,%eax
f012c2f7:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c2fc:	39 c1                	cmp    %eax,%ecx
f012c2fe:	74 17                	je     f012c317 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c300:	83 ec 04             	sub    $0x4,%esp
f012c303:	68 7c c0 13 f0       	push   $0xf013c07c
f012c308:	68 34 0f 00 00       	push   $0xf34
f012c30d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c312:	e8 e4 3e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c317:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c31a:	e8 32 07 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c31f:	29 c3                	sub    %eax,%ebx
f012c321:	89 d8                	mov    %ebx,%eax
f012c323:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c328:	74 17                	je     f012c341 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c32a:	83 ec 04             	sub    $0x4,%esp
f012c32d:	68 ae c0 13 f0       	push   $0xf013c0ae
f012c332:	68 36 0f 00 00       	push   $0xf36
f012c337:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c33c:	e8 ba 3e fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c341:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c348:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c34b:	e8 01 07 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c350:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c353:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c35a:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c35d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c363:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c369:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c36f:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c372:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c374:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c37a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c380:	01 c2                	add    %eax,%edx
f012c382:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c385:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c387:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c38d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c39a:	eb 11                	jmp    f012c3ad <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c39c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c39f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c3a5:	01 d0                	add    %edx,%eax
f012c3a7:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c3aa:	ff 45 f4             	incl   -0xc(%ebp)
f012c3ad:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c3b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c3b6:	7d e4                	jge    f012c39c <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c3b8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c3be:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c3c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c3ca:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c3d0:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c3d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c3dd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c3e3:	01 d0                	add    %edx,%eax
f012c3e5:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c3eb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c3f1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c3f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c3fe:	eb 1b                	jmp    f012c41b <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c400:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c403:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c40a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c410:	01 d0                	add    %edx,%eax
f012c412:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c418:	ff 45 f0             	incl   -0x10(%ebp)
f012c41b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c421:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c424:	7d da                	jge    f012c400 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c426:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c42c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c432:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c439:	eb 17                	jmp    f012c452 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c43b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c43e:	01 c0                	add    %eax,%eax
f012c440:	89 c2                	mov    %eax,%edx
f012c442:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c448:	01 d0                	add    %edx,%eax
f012c44a:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c44f:	ff 45 ec             	incl   -0x14(%ebp)
f012c452:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c458:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c45b:	7d de                	jge    f012c43b <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c45d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c463:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c469:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c46f:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c474:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c47a:	01 c0                	add    %eax,%eax
f012c47c:	89 c2                	mov    %eax,%edx
f012c47e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c484:	01 d0                	add    %edx,%eax
f012c486:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c48b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c491:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c497:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c49e:	eb 49                	jmp    f012c4e9 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c4a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c4a3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c4aa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c4b0:	01 d0                	add    %edx,%eax
f012c4b2:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c4b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c4b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c4bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c4c5:	01 d0                	add    %edx,%eax
f012c4c7:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c4cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c4d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c4d7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c4dd:	01 d0                	add    %edx,%eax
f012c4df:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c4e6:	ff 45 e8             	incl   -0x18(%ebp)
f012c4e9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c4ef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c4f2:	7d ac                	jge    f012c4a0 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c4f4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c4fa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c500:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c506:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c509:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c50f:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c515:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c51b:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c522:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c528:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c52f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c535:	01 d0                	add    %edx,%eax
f012c537:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c53a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c540:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c547:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c54d:	01 d0                	add    %edx,%eax
f012c54f:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c555:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c55b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c562:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c568:	01 d0                	add    %edx,%eax
f012c56a:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c571:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c577:	8a 00                	mov    (%eax),%al
f012c579:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c57c:	75 17                	jne    f012c595 <test_krealloc+0xd04>
f012c57e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c584:	89 c2                	mov    %eax,%edx
f012c586:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c58c:	01 d0                	add    %edx,%eax
f012c58e:	8a 00                	mov    (%eax),%al
f012c590:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c593:	74 17                	je     f012c5ac <test_krealloc+0xd1b>
			panic(
f012c595:	83 ec 04             	sub    $0x4,%esp
f012c598:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c59d:	68 79 0f 00 00       	push   $0xf79
f012c5a2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c5a7:	e8 4f 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c5ac:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c5b2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c5b8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c5be:	8a 00                	mov    (%eax),%al
f012c5c0:	3c 02                	cmp    $0x2,%al
f012c5c2:	75 16                	jne    f012c5da <test_krealloc+0xd49>
f012c5c4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c5ca:	89 c2                	mov    %eax,%edx
f012c5cc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c5d2:	01 d0                	add    %edx,%eax
f012c5d4:	8a 00                	mov    (%eax),%al
f012c5d6:	3c 02                	cmp    $0x2,%al
f012c5d8:	74 20                	je     f012c5fa <test_krealloc+0xd69>
			panic(
f012c5da:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c5e0:	8a 00                	mov    (%eax),%al
f012c5e2:	0f be c0             	movsbl %al,%eax
f012c5e5:	50                   	push   %eax
f012c5e6:	68 0c c1 13 f0       	push   $0xf013c10c
f012c5eb:	68 7f 0f 00 00       	push   $0xf7f
f012c5f0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c5f5:	e8 01 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c5fa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c600:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c606:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c60c:	8b 00                	mov    (%eax),%eax
f012c60e:	83 f8 03             	cmp    $0x3,%eax
f012c611:	75 1c                	jne    f012c62f <test_krealloc+0xd9e>
f012c613:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c619:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c620:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c626:	01 d0                	add    %edx,%eax
f012c628:	8b 00                	mov    (%eax),%eax
f012c62a:	83 f8 03             	cmp    $0x3,%eax
f012c62d:	74 17                	je     f012c646 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c62f:	83 ec 04             	sub    $0x4,%esp
f012c632:	68 58 c1 13 f0       	push   $0xf013c158
f012c637:	68 83 0f 00 00       	push   $0xf83
f012c63c:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c641:	e8 b5 3b fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012c646:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c64c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c652:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c658:	8b 00                	mov    (%eax),%eax
f012c65a:	83 f8 04             	cmp    $0x4,%eax
f012c65d:	75 1c                	jne    f012c67b <test_krealloc+0xdea>
f012c65f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c665:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c66c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c672:	01 d0                	add    %edx,%eax
f012c674:	8b 00                	mov    (%eax),%eax
f012c676:	83 f8 04             	cmp    $0x4,%eax
f012c679:	74 17                	je     f012c692 <test_krealloc+0xe01>
			panic(
f012c67b:	83 ec 04             	sub    $0x4,%esp
f012c67e:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c683:	68 88 0f 00 00       	push   $0xf88
f012c688:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c68d:	e8 69 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c692:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c698:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c69e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c6a4:	66 8b 00             	mov    (%eax),%ax
f012c6a7:	66 83 f8 05          	cmp    $0x5,%ax
f012c6ab:	75 1b                	jne    f012c6c8 <test_krealloc+0xe37>
f012c6ad:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c6b3:	01 c0                	add    %eax,%eax
f012c6b5:	89 c2                	mov    %eax,%edx
f012c6b7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c6bd:	01 d0                	add    %edx,%eax
f012c6bf:	66 8b 00             	mov    (%eax),%ax
f012c6c2:	66 83 f8 05          	cmp    $0x5,%ax
f012c6c6:	74 17                	je     f012c6df <test_krealloc+0xe4e>
			panic(
f012c6c8:	83 ec 04             	sub    $0x4,%esp
f012c6cb:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c6d0:	68 8d 0f 00 00       	push   $0xf8d
f012c6d5:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c6da:	e8 1c 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c6df:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c6e5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c6eb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c6f1:	66 8b 00             	mov    (%eax),%ax
f012c6f4:	66 83 f8 06          	cmp    $0x6,%ax
f012c6f8:	75 1b                	jne    f012c715 <test_krealloc+0xe84>
f012c6fa:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c700:	01 c0                	add    %eax,%eax
f012c702:	89 c2                	mov    %eax,%edx
f012c704:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c70a:	01 d0                	add    %edx,%eax
f012c70c:	66 8b 00             	mov    (%eax),%ax
f012c70f:	66 83 f8 06          	cmp    $0x6,%ax
f012c713:	74 17                	je     f012c72c <test_krealloc+0xe9b>
			panic(
f012c715:	83 ec 04             	sub    $0x4,%esp
f012c718:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c71d:	68 92 0f 00 00       	push   $0xf92
f012c722:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c727:	e8 cf 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c72c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c732:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c738:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c73e:	8a 00                	mov    (%eax),%al
f012c740:	3c 07                	cmp    $0x7,%al
f012c742:	75 1b                	jne    f012c75f <test_krealloc+0xece>
f012c744:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c74a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c751:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c757:	01 d0                	add    %edx,%eax
f012c759:	8a 00                	mov    (%eax),%al
f012c75b:	3c 07                	cmp    $0x7,%al
f012c75d:	74 17                	je     f012c776 <test_krealloc+0xee5>
			panic(
f012c75f:	83 ec 04             	sub    $0x4,%esp
f012c762:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c767:	68 97 0f 00 00       	push   $0xf97
f012c76c:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c771:	e8 85 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c776:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c77c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c780:	66 83 f8 07          	cmp    $0x7,%ax
f012c784:	75 1f                	jne    f012c7a5 <test_krealloc+0xf14>
f012c786:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c78c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c793:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c799:	01 d0                	add    %edx,%eax
f012c79b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c79f:	66 83 f8 07          	cmp    $0x7,%ax
f012c7a3:	74 17                	je     f012c7bc <test_krealloc+0xf2b>
			panic(
f012c7a5:	83 ec 04             	sub    $0x4,%esp
f012c7a8:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c7ad:	68 9a 0f 00 00       	push   $0xf9a
f012c7b2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c7b7:	e8 3f 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c7bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c7c2:	8b 40 04             	mov    0x4(%eax),%eax
f012c7c5:	83 f8 07             	cmp    $0x7,%eax
f012c7c8:	75 1d                	jne    f012c7e7 <test_krealloc+0xf56>
f012c7ca:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c7d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c7d7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c7dd:	01 d0                	add    %edx,%eax
f012c7df:	8b 40 04             	mov    0x4(%eax),%eax
f012c7e2:	83 f8 07             	cmp    $0x7,%eax
f012c7e5:	74 17                	je     f012c7fe <test_krealloc+0xf6d>
			panic(
f012c7e7:	83 ec 04             	sub    $0x4,%esp
f012c7ea:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c7ef:	68 9d 0f 00 00       	push   $0xf9d
f012c7f4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c7f9:	e8 fd 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c7fe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c804:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c80a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c810:	8a 00                	mov    (%eax),%al
f012c812:	3c 08                	cmp    $0x8,%al
f012c814:	75 1b                	jne    f012c831 <test_krealloc+0xfa0>
f012c816:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c81c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c823:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c829:	01 d0                	add    %edx,%eax
f012c82b:	8a 00                	mov    (%eax),%al
f012c82d:	3c 08                	cmp    $0x8,%al
f012c82f:	74 17                	je     f012c848 <test_krealloc+0xfb7>
			panic(
f012c831:	83 ec 04             	sub    $0x4,%esp
f012c834:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c839:	68 a2 0f 00 00       	push   $0xfa2
f012c83e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c843:	e8 b3 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c848:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c84e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c852:	66 83 f8 08          	cmp    $0x8,%ax
f012c856:	75 1f                	jne    f012c877 <test_krealloc+0xfe6>
f012c858:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c85e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c865:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c86b:	01 d0                	add    %edx,%eax
f012c86d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c871:	66 83 f8 08          	cmp    $0x8,%ax
f012c875:	74 17                	je     f012c88e <test_krealloc+0xffd>
			panic(
f012c877:	83 ec 04             	sub    $0x4,%esp
f012c87a:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c87f:	68 a5 0f 00 00       	push   $0xfa5
f012c884:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c889:	e8 6d 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c88e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c894:	8b 40 04             	mov    0x4(%eax),%eax
f012c897:	83 f8 08             	cmp    $0x8,%eax
f012c89a:	75 1d                	jne    f012c8b9 <test_krealloc+0x1028>
f012c89c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c8a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8a9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8af:	01 d0                	add    %edx,%eax
f012c8b1:	8b 40 04             	mov    0x4(%eax),%eax
f012c8b4:	83 f8 08             	cmp    $0x8,%eax
f012c8b7:	74 17                	je     f012c8d0 <test_krealloc+0x103f>
			panic(
f012c8b9:	83 ec 04             	sub    $0x4,%esp
f012c8bc:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c8c1:	68 a8 0f 00 00       	push   $0xfa8
f012c8c6:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c8cb:	e8 2b 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c8d0:	e8 7c 01 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c8d5:	89 c2                	mov    %eax,%edx
f012c8d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8da:	39 c2                	cmp    %eax,%edx
f012c8dc:	74 17                	je     f012c8f5 <test_krealloc+0x1064>
			panic(
f012c8de:	83 ec 04             	sub    $0x4,%esp
f012c8e1:	68 8c c1 13 f0       	push   $0xf013c18c
f012c8e6:	68 ac 0f 00 00       	push   $0xfac
f012c8eb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c8f0:	e8 06 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c8f5:	83 ec 0c             	sub    $0xc,%esp
f012c8f8:	68 d8 c1 13 f0       	push   $0xf013c1d8
f012c8fd:	e8 80 43 fd ff       	call   f0100c82 <cprintf>
f012c902:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c905:	e8 47 01 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c90a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c90d:	e8 2a 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c912:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c918:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c91e:	83 ec 08             	sub    $0x8,%esp
f012c921:	6a 00                	push   $0x0
f012c923:	50                   	push   %eax
f012c924:	e8 aa b1 fd ff       	call   f0107ad3 <krealloc>
f012c929:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c92c:	e8 0b 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c931:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c937:	74 17                	je     f012c950 <test_krealloc+0x10bf>
			panic(
f012c939:	83 ec 04             	sub    $0x4,%esp
f012c93c:	68 fc c1 13 f0       	push   $0xf013c1fc
f012c941:	68 b9 0f 00 00       	push   $0xfb9
f012c946:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c94b:	e8 ab 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c950:	e8 fc 00 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c955:	89 c2                	mov    %eax,%edx
f012c957:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c95a:	29 c2                	sub    %eax,%edx
f012c95c:	89 d0                	mov    %edx,%eax
f012c95e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c963:	74 17                	je     f012c97c <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c965:	83 ec 04             	sub    $0x4,%esp
f012c968:	68 70 c2 13 f0       	push   $0xf013c270
f012c96d:	68 bb 0f 00 00       	push   $0xfbb
f012c972:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c977:	e8 7f 38 fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c97c:	e8 d0 00 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c981:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c984:	e8 b3 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c989:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c98f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c995:	83 ec 08             	sub    $0x8,%esp
f012c998:	6a 00                	push   $0x0
f012c99a:	50                   	push   %eax
f012c99b:	e8 33 b1 fd ff       	call   f0107ad3 <krealloc>
f012c9a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c9a3:	e8 94 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c9a8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c9ae:	74 17                	je     f012c9c7 <test_krealloc+0x1136>
			panic(
f012c9b0:	83 ec 04             	sub    $0x4,%esp
f012c9b3:	68 fc c1 13 f0       	push   $0xf013c1fc
f012c9b8:	68 c4 0f 00 00       	push   $0xfc4
f012c9bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c9c2:	e8 34 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c9c7:	e8 85 00 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c9cc:	89 c2                	mov    %eax,%edx
f012c9ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c9d1:	29 c2                	sub    %eax,%edx
f012c9d3:	89 d0                	mov    %edx,%eax
f012c9d5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c9da:	74 17                	je     f012c9f3 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c9dc:	83 ec 04             	sub    $0x4,%esp
f012c9df:	68 70 c2 13 f0       	push   $0xf013c270
f012c9e4:	68 c6 0f 00 00       	push   $0xfc6
f012c9e9:	68 9a ad 13 f0       	push   $0xf013ad9a
f012c9ee:	e8 08 38 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c9f3:	e8 59 00 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012c9f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c9fb:	e8 3c 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ca00:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ca06:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ca0c:	83 ec 08             	sub    $0x8,%esp
f012ca0f:	6a 00                	push   $0x0
f012ca11:	50                   	push   %eax
f012ca12:	e8 bc b0 fd ff       	call   f0107ad3 <krealloc>
f012ca17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ca1a:	e8 1d 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ca1f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ca25:	74 17                	je     f012ca3e <test_krealloc+0x11ad>
			panic(
f012ca27:	83 ec 04             	sub    $0x4,%esp
f012ca2a:	68 b4 ad 13 f0       	push   $0xf013adb4
f012ca2f:	68 ce 0f 00 00       	push   $0xfce
f012ca34:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ca39:	e8 bd 37 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ca3e:	e8 0e 00 fe ff       	call   f010ca51 <sys_calculate_free_frames>
f012ca43:	89 c2                	mov    %eax,%edx
f012ca45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ca48:	29 c2                	sub    %eax,%edx
f012ca4a:	89 d0                	mov    %edx,%eax
f012ca4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ca51:	74 17                	je     f012ca6a <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012ca53:	83 ec 04             	sub    $0x4,%esp
f012ca56:	68 70 c2 13 f0       	push   $0xf013c270
f012ca5b:	68 d0 0f 00 00       	push   $0xfd0
f012ca60:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ca65:	e8 91 37 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ca6a:	e8 e2 ff fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ca6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ca72:	e8 c5 72 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ca77:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ca7d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ca83:	83 ec 08             	sub    $0x8,%esp
f012ca86:	6a 00                	push   $0x0
f012ca88:	50                   	push   %eax
f012ca89:	e8 45 b0 fd ff       	call   f0107ad3 <krealloc>
f012ca8e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ca91:	e8 a6 72 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ca96:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ca9c:	74 17                	je     f012cab5 <test_krealloc+0x1224>
			panic(
f012ca9e:	83 ec 04             	sub    $0x4,%esp
f012caa1:	68 fc c1 13 f0       	push   $0xf013c1fc
f012caa6:	68 d8 0f 00 00       	push   $0xfd8
f012caab:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cab0:	e8 46 37 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cab5:	e8 97 ff fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012caba:	89 c2                	mov    %eax,%edx
f012cabc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cabf:	29 c2                	sub    %eax,%edx
f012cac1:	89 d0                	mov    %edx,%eax
f012cac3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cac8:	74 17                	je     f012cae1 <test_krealloc+0x1250>
			panic(
f012caca:	83 ec 04             	sub    $0x4,%esp
f012cacd:	68 a4 c2 13 f0       	push   $0xf013c2a4
f012cad2:	68 db 0f 00 00       	push   $0xfdb
f012cad7:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cadc:	e8 1a 37 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cae1:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cae8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012caef:	eb 48                	jmp    f012cb39 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012caf1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012caf4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012caf9:	83 ec 04             	sub    $0x4,%esp
f012cafc:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012cb02:	51                   	push   %ecx
f012cb03:	52                   	push   %edx
f012cb04:	50                   	push   %eax
f012cb05:	e8 d0 9e fd ff       	call   f01069da <get_page_table>
f012cb0a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cb0d:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012cb13:	85 c0                	test   %eax,%eax
f012cb15:	75 17                	jne    f012cb2e <test_krealloc+0x129d>
					panic(
f012cb17:	83 ec 04             	sub    $0x4,%esp
f012cb1a:	68 9c b6 13 f0       	push   $0xf013b69c
f012cb1f:	68 e7 0f 00 00       	push   $0xfe7
f012cb24:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cb29:	e8 cd 36 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cb2e:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cb35:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cb39:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cb3d:	78 b2                	js     f012caf1 <test_krealloc+0x1260>
f012cb3f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cb43:	7f 09                	jg     f012cb4e <test_krealloc+0x12bd>
f012cb45:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cb4c:	76 a3                	jbe    f012caf1 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cb4e:	83 ec 0c             	sub    $0xc,%esp
f012cb51:	68 e3 c2 13 f0       	push   $0xf013c2e3
f012cb56:	e8 27 41 fd ff       	call   f0100c82 <cprintf>
f012cb5b:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cb5e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cb64:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cb6a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cb71:	eb 21                	jmp    f012cb94 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012cb73:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cb79:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cb7c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cb82:	01 c8                	add    %ecx,%eax
f012cb84:	8a 00                	mov    (%eax),%al
f012cb86:	0f be c0             	movsbl %al,%eax
f012cb89:	01 d0                	add    %edx,%eax
f012cb8b:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cb91:	ff 45 dc             	incl   -0x24(%ebp)
f012cb94:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cb9a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cb9d:	7d d4                	jge    f012cb73 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cb9f:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012cba5:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cbab:	42                   	inc    %edx
f012cbac:	01 d2                	add    %edx,%edx
f012cbae:	39 d0                	cmp    %edx,%eax
f012cbb0:	74 17                	je     f012cbc9 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012cbb2:	83 ec 04             	sub    $0x4,%esp
f012cbb5:	68 ec c2 13 f0       	push   $0xf013c2ec
f012cbba:	68 f9 0f 00 00       	push   $0xff9
f012cbbf:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cbc4:	e8 32 36 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cbc9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cbcf:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cbd5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cbdc:	eb 25                	jmp    f012cc03 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012cbde:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012cbe4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cbe7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cbee:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cbf4:	01 c8                	add    %ecx,%eax
f012cbf6:	8b 00                	mov    (%eax),%eax
f012cbf8:	01 d0                	add    %edx,%eax
f012cbfa:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cc00:	ff 45 dc             	incl   -0x24(%ebp)
f012cc03:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cc09:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cc0c:	7d d0                	jge    f012cbde <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cc0e:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012cc14:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012cc1a:	42                   	inc    %edx
f012cc1b:	c1 e2 02             	shl    $0x2,%edx
f012cc1e:	39 d0                	cmp    %edx,%eax
f012cc20:	74 17                	je     f012cc39 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012cc22:	83 ec 04             	sub    $0x4,%esp
f012cc25:	68 ec c2 13 f0       	push   $0xf013c2ec
f012cc2a:	68 03 10 00 00       	push   $0x1003
f012cc2f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cc34:	e8 c2 35 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cc39:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc3f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cc45:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cc4c:	eb 24                	jmp    f012cc72 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cc4e:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cc54:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cc57:	01 c0                	add    %eax,%eax
f012cc59:	89 c1                	mov    %eax,%ecx
f012cc5b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cc61:	01 c8                	add    %ecx,%eax
f012cc63:	66 8b 00             	mov    (%eax),%ax
f012cc66:	98                   	cwtl   
f012cc67:	01 d0                	add    %edx,%eax
f012cc69:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cc6f:	ff 45 dc             	incl   -0x24(%ebp)
f012cc72:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cc78:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cc7b:	7d d1                	jge    f012cc4e <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012cc7d:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cc83:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cc89:	8d 48 01             	lea    0x1(%eax),%ecx
f012cc8c:	89 c8                	mov    %ecx,%eax
f012cc8e:	c1 e0 02             	shl    $0x2,%eax
f012cc91:	01 c8                	add    %ecx,%eax
f012cc93:	39 c2                	cmp    %eax,%edx
f012cc95:	74 17                	je     f012ccae <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012cc97:	83 ec 04             	sub    $0x4,%esp
f012cc9a:	68 ec c2 13 f0       	push   $0xf013c2ec
f012cc9f:	68 0d 10 00 00       	push   $0x100d
f012cca4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cca9:	e8 4d 35 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ccae:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ccb4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ccba:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ccc1:	eb 70                	jmp    f012cd33 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012ccc3:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ccc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cccc:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ccd3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccd9:	01 c8                	add    %ecx,%eax
f012ccdb:	8a 00                	mov    (%eax),%al
f012ccdd:	0f be c0             	movsbl %al,%eax
f012cce0:	01 d0                	add    %edx,%eax
f012cce2:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012cce8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012ccee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ccf1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ccf8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccfe:	01 c8                	add    %ecx,%eax
f012cd00:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cd04:	98                   	cwtl   
f012cd05:	01 d0                	add    %edx,%eax
f012cd07:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012cd0d:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012cd13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cd16:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cd1d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd23:	01 c8                	add    %ecx,%eax
f012cd25:	8b 40 04             	mov    0x4(%eax),%eax
f012cd28:	01 d0                	add    %edx,%eax
f012cd2a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cd30:	ff 45 dc             	incl   -0x24(%ebp)
f012cd33:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd39:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd3c:	7d 85                	jge    f012ccc3 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cd3e:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012cd44:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd4a:	8d 50 01             	lea    0x1(%eax),%edx
f012cd4d:	89 d0                	mov    %edx,%eax
f012cd4f:	01 c0                	add    %eax,%eax
f012cd51:	01 d0                	add    %edx,%eax
f012cd53:	01 c0                	add    %eax,%eax
f012cd55:	01 d0                	add    %edx,%eax
f012cd57:	39 c1                	cmp    %eax,%ecx
f012cd59:	75 3a                	jne    f012cd95 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cd5b:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012cd61:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd67:	8d 50 01             	lea    0x1(%eax),%edx
f012cd6a:	89 d0                	mov    %edx,%eax
f012cd6c:	01 c0                	add    %eax,%eax
f012cd6e:	01 d0                	add    %edx,%eax
f012cd70:	01 c0                	add    %eax,%eax
f012cd72:	01 d0                	add    %edx,%eax
f012cd74:	39 c1                	cmp    %eax,%ecx
f012cd76:	75 1d                	jne    f012cd95 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cd78:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012cd7e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd84:	8d 50 01             	lea    0x1(%eax),%edx
f012cd87:	89 d0                	mov    %edx,%eax
f012cd89:	01 c0                	add    %eax,%eax
f012cd8b:	01 d0                	add    %edx,%eax
f012cd8d:	01 c0                	add    %eax,%eax
f012cd8f:	01 d0                	add    %edx,%eax
f012cd91:	39 c1                	cmp    %eax,%ecx
f012cd93:	74 17                	je     f012cdac <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012cd95:	83 ec 04             	sub    $0x4,%esp
f012cd98:	68 ec c2 13 f0       	push   $0xf013c2ec
f012cd9d:	68 1b 10 00 00       	push   $0x101b
f012cda2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cda7:	e8 4f 34 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cdac:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012cdb3:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cdb6:	e8 96 fc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cdbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cdbe:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cdc4:	83 ec 08             	sub    $0x8,%esp
f012cdc7:	68 00 3c 00 00       	push   $0x3c00
f012cdcc:	50                   	push   %eax
f012cdcd:	e8 01 ad fd ff       	call   f0107ad3 <krealloc>
f012cdd2:	83 c4 10             	add    $0x10,%esp
f012cdd5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cddb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cde1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cde6:	77 17                	ja     f012cdff <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cde8:	83 ec 04             	sub    $0x4,%esp
f012cdeb:	68 40 c0 13 f0       	push   $0xf013c040
f012cdf0:	68 27 10 00 00       	push   $0x1027
f012cdf5:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cdfa:	e8 fc 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cdff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ce05:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ce0b:	74 17                	je     f012ce24 <test_krealloc+0x1593>
			panic(
f012ce0d:	83 ec 04             	sub    $0x4,%esp
f012ce10:	68 24 c3 13 f0       	push   $0xf013c324
f012ce15:	68 2a 10 00 00       	push   $0x102a
f012ce1a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ce1f:	e8 d7 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ce24:	e8 28 fc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ce29:	89 c2                	mov    %eax,%edx
f012ce2b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce2e:	39 c2                	cmp    %eax,%edx
f012ce30:	74 17                	je     f012ce49 <test_krealloc+0x15b8>
			panic(
f012ce32:	83 ec 04             	sub    $0x4,%esp
f012ce35:	68 90 c3 13 f0       	push   $0xf013c390
f012ce3a:	68 2d 10 00 00       	push   $0x102d
f012ce3f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ce44:	e8 b2 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ce49:	e8 03 fc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ce4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ce51:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ce57:	83 ec 08             	sub    $0x8,%esp
f012ce5a:	68 00 fc 0f 00       	push   $0xffc00
f012ce5f:	50                   	push   %eax
f012ce60:	e8 6e ac fd ff       	call   f0107ad3 <krealloc>
f012ce65:	83 c4 10             	add    $0x10,%esp
f012ce68:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce6e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ce74:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce79:	77 17                	ja     f012ce92 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce7b:	83 ec 04             	sub    $0x4,%esp
f012ce7e:	68 40 c0 13 f0       	push   $0xf013c040
f012ce83:	68 33 10 00 00       	push   $0x1033
f012ce88:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ce8d:	e8 69 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ce92:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ce98:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ce9e:	74 17                	je     f012ceb7 <test_krealloc+0x1626>
			panic(
f012cea0:	83 ec 04             	sub    $0x4,%esp
f012cea3:	68 24 c3 13 f0       	push   $0xf013c324
f012cea8:	68 36 10 00 00       	push   $0x1036
f012cead:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ceb2:	e8 44 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ceb7:	e8 95 fb fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cebc:	89 c2                	mov    %eax,%edx
f012cebe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cec1:	39 c2                	cmp    %eax,%edx
f012cec3:	74 17                	je     f012cedc <test_krealloc+0x164b>
			panic(
f012cec5:	83 ec 04             	sub    $0x4,%esp
f012cec8:	68 90 c3 13 f0       	push   $0xf013c390
f012cecd:	68 39 10 00 00       	push   $0x1039
f012ced2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ced7:	e8 1f 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cedc:	e8 70 fb fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cee1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cee4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ceea:	83 ec 08             	sub    $0x8,%esp
f012ceed:	68 00 fc 0f 00       	push   $0xffc00
f012cef2:	50                   	push   %eax
f012cef3:	e8 db ab fd ff       	call   f0107ad3 <krealloc>
f012cef8:	83 c4 10             	add    $0x10,%esp
f012cefb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf01:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cf07:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf0c:	77 17                	ja     f012cf25 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf0e:	83 ec 04             	sub    $0x4,%esp
f012cf11:	68 40 c0 13 f0       	push   $0xf013c040
f012cf16:	68 3f 10 00 00       	push   $0x103f
f012cf1b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cf20:	e8 d6 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cf25:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf2b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cf31:	74 17                	je     f012cf4a <test_krealloc+0x16b9>
			panic(
f012cf33:	83 ec 04             	sub    $0x4,%esp
f012cf36:	68 24 c3 13 f0       	push   $0xf013c324
f012cf3b:	68 42 10 00 00       	push   $0x1042
f012cf40:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cf45:	e8 b1 32 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cf4a:	e8 02 fb fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cf4f:	89 c2                	mov    %eax,%edx
f012cf51:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf54:	39 c2                	cmp    %eax,%edx
f012cf56:	74 17                	je     f012cf6f <test_krealloc+0x16de>
			panic(
f012cf58:	83 ec 04             	sub    $0x4,%esp
f012cf5b:	68 90 c3 13 f0       	push   $0xf013c390
f012cf60:	68 45 10 00 00       	push   $0x1045
f012cf65:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cf6a:	e8 8c 32 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cf6f:	e8 dd fa fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cf74:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cf77:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cf7d:	83 ec 08             	sub    $0x8,%esp
f012cf80:	68 00 fc 0f 00       	push   $0xffc00
f012cf85:	50                   	push   %eax
f012cf86:	e8 48 ab fd ff       	call   f0107ad3 <krealloc>
f012cf8b:	83 c4 10             	add    $0x10,%esp
f012cf8e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf94:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cf9a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf9f:	77 17                	ja     f012cfb8 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfa1:	83 ec 04             	sub    $0x4,%esp
f012cfa4:	68 40 c0 13 f0       	push   $0xf013c040
f012cfa9:	68 4d 10 00 00       	push   $0x104d
f012cfae:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cfb3:	e8 43 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012cfb8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cfbe:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cfc4:	74 17                	je     f012cfdd <test_krealloc+0x174c>
			panic(
f012cfc6:	83 ec 04             	sub    $0x4,%esp
f012cfc9:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012cfce:	68 50 10 00 00       	push   $0x1050
f012cfd3:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cfd8:	e8 1e 32 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cfdd:	e8 6f fa fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012cfe2:	89 c2                	mov    %eax,%edx
f012cfe4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfe7:	39 c2                	cmp    %eax,%edx
f012cfe9:	74 17                	je     f012d002 <test_krealloc+0x1771>
			panic(
f012cfeb:	83 ec 04             	sub    $0x4,%esp
f012cfee:	68 90 c3 13 f0       	push   $0xf013c390
f012cff3:	68 53 10 00 00       	push   $0x1053
f012cff8:	68 9a ad 13 f0       	push   $0xf013ad9a
f012cffd:	e8 f9 31 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d002:	83 ec 0c             	sub    $0xc,%esp
f012d005:	68 b3 b5 13 f0       	push   $0xf013b5b3
f012d00a:	e8 73 3c fd ff       	call   f0100c82 <cprintf>
f012d00f:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d012:	e8 3a fa fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d017:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d01a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d020:	83 ec 08             	sub    $0x8,%esp
f012d023:	68 00 18 10 00       	push   $0x101800
f012d028:	50                   	push   %eax
f012d029:	e8 a5 aa fd ff       	call   f0107ad3 <krealloc>
f012d02e:	83 c4 10             	add    $0x10,%esp
f012d031:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d034:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d037:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d03c:	77 17                	ja     f012d055 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d03e:	83 ec 04             	sub    $0x4,%esp
f012d041:	68 40 c0 13 f0       	push   $0xf013c040
f012d046:	68 5c 10 00 00       	push   $0x105c
f012d04b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d050:	e8 a6 31 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012d055:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d05b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d05e:	74 17                	je     f012d077 <test_krealloc+0x17e6>
			panic(
f012d060:	83 ec 04             	sub    $0x4,%esp
f012d063:	68 34 c4 13 f0       	push   $0xf013c434
f012d068:	68 5f 10 00 00       	push   $0x105f
f012d06d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d072:	e8 84 31 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d077:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d07a:	e8 d2 f9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d07f:	29 c3                	sub    %eax,%ebx
f012d081:	89 d8                	mov    %ebx,%eax
f012d083:	83 f8 02             	cmp    $0x2,%eax
f012d086:	74 17                	je     f012d09f <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d088:	83 ec 04             	sub    $0x4,%esp
f012d08b:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012d090:	68 61 10 00 00       	push   $0x1061
f012d095:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d09a:	e8 5c 31 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d09f:	e8 ad f9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d0a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d0a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0ad:	83 ec 08             	sub    $0x8,%esp
f012d0b0:	68 00 fc 3f 00       	push   $0x3ffc00
f012d0b5:	50                   	push   %eax
f012d0b6:	e8 18 aa fd ff       	call   f0107ad3 <krealloc>
f012d0bb:	83 c4 10             	add    $0x10,%esp
f012d0be:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0c4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d0c9:	77 17                	ja     f012d0e2 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0cb:	83 ec 04             	sub    $0x4,%esp
f012d0ce:	68 40 c0 13 f0       	push   $0xf013c040
f012d0d3:	68 67 10 00 00       	push   $0x1067
f012d0d8:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d0dd:	e8 19 31 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012d0e2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0e8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d0eb:	74 17                	je     f012d104 <test_krealloc+0x1873>
			panic(
f012d0ed:	83 ec 04             	sub    $0x4,%esp
f012d0f0:	68 34 c4 13 f0       	push   $0xf013c434
f012d0f5:	68 6a 10 00 00       	push   $0x106a
f012d0fa:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d0ff:	e8 f7 30 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d104:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d107:	e8 45 f9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d10c:	29 c3                	sub    %eax,%ebx
f012d10e:	89 d8                	mov    %ebx,%eax
f012d110:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d115:	74 17                	je     f012d12e <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d117:	83 ec 04             	sub    $0x4,%esp
f012d11a:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012d11f:	68 6d 10 00 00       	push   $0x106d
f012d124:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d129:	e8 cd 30 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012d12e:	83 ec 0c             	sub    $0xc,%esp
f012d131:	68 f8 b5 13 f0       	push   $0xf013b5f8
f012d136:	e8 47 3b fd ff       	call   f0100c82 <cprintf>
f012d13b:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d13e:	e8 0e f9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d143:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d146:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d14c:	83 ec 08             	sub    $0x8,%esp
f012d14f:	68 00 fc 9f 00       	push   $0x9ffc00
f012d154:	50                   	push   %eax
f012d155:	e8 79 a9 fd ff       	call   f0107ad3 <krealloc>
f012d15a:	83 c4 10             	add    $0x10,%esp
f012d15d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d160:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d163:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d168:	77 17                	ja     f012d181 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d16a:	83 ec 04             	sub    $0x4,%esp
f012d16d:	68 40 c0 13 f0       	push   $0xf013c040
f012d172:	68 78 10 00 00       	push   $0x1078
f012d177:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d17c:	e8 7a 30 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d181:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d188:	10 00 00 
f012d18b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d191:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d196:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d19c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d1a2:	ba 00 00 00 00       	mov    $0x0,%edx
f012d1a7:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d1ad:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d1b3:	29 d0                	sub    %edx,%eax
f012d1b5:	89 c1                	mov    %eax,%ecx
f012d1b7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d1be:	10 00 00 
f012d1c1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d1c6:	0f b6 d0             	movzbl %al,%edx
f012d1c9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d1cf:	01 d0                	add    %edx,%eax
f012d1d1:	48                   	dec    %eax
f012d1d2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d1d8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d1de:	ba 00 00 00 00       	mov    $0x0,%edx
f012d1e3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d1e9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d1ef:	29 d0                	sub    %edx,%eax
f012d1f1:	01 c1                	add    %eax,%ecx
f012d1f3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d1fa:	10 00 00 
f012d1fd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d202:	0f b6 c0             	movzbl %al,%eax
f012d205:	c1 e0 04             	shl    $0x4,%eax
f012d208:	89 c2                	mov    %eax,%edx
f012d20a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d210:	01 d0                	add    %edx,%eax
f012d212:	48                   	dec    %eax
f012d213:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d219:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d21f:	ba 00 00 00 00       	mov    $0x0,%edx
f012d224:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d22a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d230:	29 d0                	sub    %edx,%eax
f012d232:	01 c8                	add    %ecx,%eax
f012d234:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d23a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d23d:	39 c2                	cmp    %eax,%edx
f012d23f:	74 18                	je     f012d259 <test_krealloc+0x19c8>
			panic(
f012d241:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d244:	50                   	push   %eax
f012d245:	68 e4 c4 13 f0       	push   $0xf013c4e4
f012d24a:	68 7c 10 00 00       	push   $0x107c
f012d24f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d254:	e8 a2 2f fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d259:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d25f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d262:	75 17                	jne    f012d27b <test_krealloc+0x19ea>
			panic(
f012d264:	83 ec 04             	sub    $0x4,%esp
f012d267:	68 28 c5 13 f0       	push   $0xf013c528
f012d26c:	68 7f 10 00 00       	push   $0x107f
f012d271:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d276:	e8 80 2f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d27b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d27e:	e8 ce f7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d283:	29 c3                	sub    %eax,%ebx
f012d285:	89 d8                	mov    %ebx,%eax
f012d287:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d28c:	74 17                	je     f012d2a5 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d28e:	83 ec 04             	sub    $0x4,%esp
f012d291:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012d296:	68 82 10 00 00       	push   $0x1082
f012d29b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d2a0:	e8 56 2f fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012d2a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2a8:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d2ae:	e8 9e f7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d2b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d2b6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d2bc:	83 ec 08             	sub    $0x8,%esp
f012d2bf:	68 00 fc 5f 00       	push   $0x5ffc00
f012d2c4:	50                   	push   %eax
f012d2c5:	e8 09 a8 fd ff       	call   f0107ad3 <krealloc>
f012d2ca:	83 c4 10             	add    $0x10,%esp
f012d2cd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2d3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2d8:	77 17                	ja     f012d2f1 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2da:	83 ec 04             	sub    $0x4,%esp
f012d2dd:	68 40 c0 13 f0       	push   $0xf013c040
f012d2e2:	68 8b 10 00 00       	push   $0x108b
f012d2e7:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d2ec:	e8 0a 2f fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[6])
f012d2f1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d2f7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d2fa:	74 17                	je     f012d313 <test_krealloc+0x1a82>
			panic(
f012d2fc:	83 ec 04             	sub    $0x4,%esp
f012d2ff:	68 34 c4 13 f0       	push   $0xf013c434
f012d304:	68 8e 10 00 00       	push   $0x108e
f012d309:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d30e:	e8 e8 2e fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d313:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d316:	e8 36 f7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d31b:	29 c3                	sub    %eax,%ebx
f012d31d:	89 d8                	mov    %ebx,%eax
f012d31f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d324:	74 17                	je     f012d33d <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d326:	83 ec 04             	sub    $0x4,%esp
f012d329:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012d32e:	68 91 10 00 00       	push   $0x1091
f012d333:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d338:	e8 be 2e fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d33d:	e8 0f f7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d342:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d345:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d34b:	83 ec 08             	sub    $0x8,%esp
f012d34e:	68 00 fc 3f 01       	push   $0x13ffc00
f012d353:	50                   	push   %eax
f012d354:	e8 7a a7 fd ff       	call   f0107ad3 <krealloc>
f012d359:	83 c4 10             	add    $0x10,%esp
f012d35c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d35f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d362:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d367:	77 17                	ja     f012d380 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d369:	83 ec 04             	sub    $0x4,%esp
f012d36c:	68 40 c0 13 f0       	push   $0xf013c040
f012d371:	68 98 10 00 00       	push   $0x1098
f012d376:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d37b:	e8 7b 2e fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012d380:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d386:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d389:	75 17                	jne    f012d3a2 <test_krealloc+0x1b11>
			panic(
f012d38b:	83 ec 04             	sub    $0x4,%esp
f012d38e:	68 28 c5 13 f0       	push   $0xf013c528
f012d393:	68 9b 10 00 00       	push   $0x109b
f012d398:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d39d:	e8 59 2e fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d3a2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d3a9:	10 00 00 
f012d3ac:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d3b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d3b7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d3bd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d3c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3c8:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d3ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d3d4:	29 d0                	sub    %edx,%eax
f012d3d6:	89 c1                	mov    %eax,%ecx
f012d3d8:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d3df:	10 00 00 
f012d3e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d3e7:	0f b6 d0             	movzbl %al,%edx
f012d3ea:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d3f0:	01 d0                	add    %edx,%eax
f012d3f2:	48                   	dec    %eax
f012d3f3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d3f9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d3ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012d404:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d40a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d410:	29 d0                	sub    %edx,%eax
f012d412:	01 c1                	add    %eax,%ecx
f012d414:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d41b:	10 00 00 
f012d41e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d423:	0f b6 c0             	movzbl %al,%eax
f012d426:	c1 e0 04             	shl    $0x4,%eax
f012d429:	89 c2                	mov    %eax,%edx
f012d42b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d431:	01 d0                	add    %edx,%eax
f012d433:	48                   	dec    %eax
f012d434:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d43a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d440:	ba 00 00 00 00       	mov    $0x0,%edx
f012d445:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d44b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d451:	29 d0                	sub    %edx,%eax
f012d453:	01 c8                	add    %ecx,%eax
f012d455:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d45b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d45e:	39 c2                	cmp    %eax,%edx
f012d460:	74 17                	je     f012d479 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d462:	83 ec 04             	sub    $0x4,%esp
f012d465:	68 ac c5 13 f0       	push   $0xf013c5ac
f012d46a:	68 9d 10 00 00       	push   $0x109d
f012d46f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d474:	e8 82 2d fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d479:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d47c:	e8 d0 f5 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d481:	29 c3                	sub    %eax,%ebx
f012d483:	89 d8                	mov    %ebx,%eax
f012d485:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d48a:	74 17                	je     f012d4a3 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d48c:	83 ec 04             	sub    $0x4,%esp
f012d48f:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012d494:	68 a0 10 00 00       	push   $0x10a0
f012d499:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d49e:	e8 58 2d fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012d4a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d4a6:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d4ac:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d4b2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d4b8:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d4bf:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d4c2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d4c9:	eb 21                	jmp    f012d4ec <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d4cb:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d4d1:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d4d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d4da:	01 c8                	add    %ecx,%eax
f012d4dc:	8a 00                	mov    (%eax),%al
f012d4de:	0f be c0             	movsbl %al,%eax
f012d4e1:	01 d0                	add    %edx,%eax
f012d4e3:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d4e9:	ff 45 d8             	incl   -0x28(%ebp)
f012d4ec:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d4f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d4f5:	7d d4                	jge    f012d4cb <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d4f7:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d4fd:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d503:	42                   	inc    %edx
f012d504:	01 d2                	add    %edx,%edx
f012d506:	39 d0                	cmp    %edx,%eax
f012d508:	74 17                	je     f012d521 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d50a:	83 ec 04             	sub    $0x4,%esp
f012d50d:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012d512:	68 ae 10 00 00       	push   $0x10ae
f012d517:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d51c:	e8 da 2c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d521:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d527:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d52d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d534:	00 00 00 
		sums[1] = 0;
f012d537:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d53e:	00 00 00 
		sums[2] = 0;
f012d541:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d548:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d54b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d552:	eb 70                	jmp    f012d5c4 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d554:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d55a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d55d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d564:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d56a:	01 c8                	add    %ecx,%eax
f012d56c:	8a 00                	mov    (%eax),%al
f012d56e:	0f be c0             	movsbl %al,%eax
f012d571:	01 d0                	add    %edx,%eax
f012d573:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d579:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d57f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d582:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d589:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d58f:	01 c8                	add    %ecx,%eax
f012d591:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d595:	98                   	cwtl   
f012d596:	01 d0                	add    %edx,%eax
f012d598:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d59e:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d5a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d5a7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d5ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d5b4:	01 c8                	add    %ecx,%eax
f012d5b6:	8b 40 04             	mov    0x4(%eax),%eax
f012d5b9:	01 d0                	add    %edx,%eax
f012d5bb:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d5c1:	ff 45 d8             	incl   -0x28(%ebp)
f012d5c4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d5cd:	7d 85                	jge    f012d554 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d5cf:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d5d5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5db:	8d 50 01             	lea    0x1(%eax),%edx
f012d5de:	89 d0                	mov    %edx,%eax
f012d5e0:	01 c0                	add    %eax,%eax
f012d5e2:	01 d0                	add    %edx,%eax
f012d5e4:	01 c0                	add    %eax,%eax
f012d5e6:	01 d0                	add    %edx,%eax
f012d5e8:	39 c1                	cmp    %eax,%ecx
f012d5ea:	75 3a                	jne    f012d626 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d5ec:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d5f2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5f8:	8d 50 01             	lea    0x1(%eax),%edx
f012d5fb:	89 d0                	mov    %edx,%eax
f012d5fd:	01 c0                	add    %eax,%eax
f012d5ff:	01 d0                	add    %edx,%eax
f012d601:	01 c0                	add    %eax,%eax
f012d603:	01 d0                	add    %edx,%eax
f012d605:	39 c1                	cmp    %eax,%ecx
f012d607:	75 1d                	jne    f012d626 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d609:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d60f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d615:	8d 50 01             	lea    0x1(%eax),%edx
f012d618:	89 d0                	mov    %edx,%eax
f012d61a:	01 c0                	add    %eax,%eax
f012d61c:	01 d0                	add    %edx,%eax
f012d61e:	01 c0                	add    %eax,%eax
f012d620:	01 d0                	add    %edx,%eax
f012d622:	39 c1                	cmp    %eax,%ecx
f012d624:	74 17                	je     f012d63d <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d626:	83 ec 04             	sub    $0x4,%esp
f012d629:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012d62e:	68 c0 10 00 00       	push   $0x10c0
f012d633:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d638:	e8 be 2b fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d63d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d643:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d649:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d650:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d653:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d65a:	eb 24                	jmp    f012d680 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d65c:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d662:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d665:	01 c0                	add    %eax,%eax
f012d667:	89 c1                	mov    %eax,%ecx
f012d669:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d66f:	01 c8                	add    %ecx,%eax
f012d671:	66 8b 00             	mov    (%eax),%ax
f012d674:	98                   	cwtl   
f012d675:	01 d0                	add    %edx,%eax
f012d677:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d67d:	ff 45 d8             	incl   -0x28(%ebp)
f012d680:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d686:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d689:	7d d1                	jge    f012d65c <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d68b:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d691:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d697:	8d 48 01             	lea    0x1(%eax),%ecx
f012d69a:	89 c8                	mov    %ecx,%eax
f012d69c:	c1 e0 02             	shl    $0x2,%eax
f012d69f:	01 c8                	add    %ecx,%eax
f012d6a1:	39 c2                	cmp    %eax,%edx
f012d6a3:	74 17                	je     f012d6bc <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d6a5:	83 ec 04             	sub    $0x4,%esp
f012d6a8:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012d6ad:	68 ca 10 00 00       	push   $0x10ca
f012d6b2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d6b7:	e8 3f 2b fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d6bc:	e8 90 f3 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d6c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d6c4:	e8 73 66 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d6c9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d6cf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d6d5:	83 ec 08             	sub    $0x8,%esp
f012d6d8:	6a 00                	push   $0x0
f012d6da:	50                   	push   %eax
f012d6db:	e8 f3 a3 fd ff       	call   f0107ad3 <krealloc>
f012d6e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d6e3:	e8 54 66 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d6e8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d6ee:	74 17                	je     f012d707 <test_krealloc+0x1e76>
			panic(
f012d6f0:	83 ec 04             	sub    $0x4,%esp
f012d6f3:	68 b4 ad 13 f0       	push   $0xf013adb4
f012d6f8:	68 d2 10 00 00       	push   $0x10d2
f012d6fd:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d702:	e8 f4 2a fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d707:	e8 45 f3 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d70c:	89 c2                	mov    %eax,%edx
f012d70e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d711:	29 c2                	sub    %eax,%edx
f012d713:	89 d0                	mov    %edx,%eax
f012d715:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d71a:	74 17                	je     f012d733 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d71c:	83 ec 04             	sub    $0x4,%esp
f012d71f:	68 70 c2 13 f0       	push   $0xf013c270
f012d724:	68 d4 10 00 00       	push   $0x10d4
f012d729:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d72e:	e8 c8 2a fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d733:	e8 19 f3 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d738:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d73b:	e8 fc 65 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d740:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d746:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d74c:	83 ec 0c             	sub    $0xc,%esp
f012d74f:	50                   	push   %eax
f012d750:	e8 89 a1 fd ff       	call   f01078de <kfree>
f012d755:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d758:	e8 df 65 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d75d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d763:	74 17                	je     f012d77c <test_krealloc+0x1eeb>
			panic(
f012d765:	83 ec 04             	sub    $0x4,%esp
f012d768:	68 b4 ad 13 f0       	push   $0xf013adb4
f012d76d:	68 dc 10 00 00       	push   $0x10dc
f012d772:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d777:	e8 7f 2a fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d77c:	e8 d0 f2 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d781:	89 c2                	mov    %eax,%edx
f012d783:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d786:	29 c2                	sub    %eax,%edx
f012d788:	89 d0                	mov    %edx,%eax
f012d78a:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d78f:	74 17                	je     f012d7a8 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d791:	83 ec 04             	sub    $0x4,%esp
f012d794:	68 70 c2 13 f0       	push   $0xf013c270
f012d799:	68 de 10 00 00       	push   $0x10de
f012d79e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d7a3:	e8 53 2a fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d7a8:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d7af:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d7b6:	eb 48                	jmp    f012d800 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d7b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d7bb:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012d7c0:	83 ec 04             	sub    $0x4,%esp
f012d7c3:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d7c9:	51                   	push   %ecx
f012d7ca:	52                   	push   %edx
f012d7cb:	50                   	push   %eax
f012d7cc:	e8 09 92 fd ff       	call   f01069da <get_page_table>
f012d7d1:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d7d4:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d7da:	85 c0                	test   %eax,%eax
f012d7dc:	75 17                	jne    f012d7f5 <test_krealloc+0x1f64>
					panic(
f012d7de:	83 ec 04             	sub    $0x4,%esp
f012d7e1:	68 9c b6 13 f0       	push   $0xf013b69c
f012d7e6:	68 eb 10 00 00       	push   $0x10eb
f012d7eb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d7f0:	e8 06 2a fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d7f5:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d7fc:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d800:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d804:	78 b2                	js     f012d7b8 <test_krealloc+0x1f27>
f012d806:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d80a:	7f 09                	jg     f012d815 <test_krealloc+0x1f84>
f012d80c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d813:	76 a3                	jbe    f012d7b8 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d815:	83 ec 0c             	sub    $0xc,%esp
f012d818:	68 7e af 13 f0       	push   $0xf013af7e
f012d81d:	e8 60 34 fd ff       	call   f0100c82 <cprintf>
f012d822:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d825:	83 ec 0c             	sub    $0xc,%esp
f012d828:	68 0c c6 13 f0       	push   $0xf013c60c
f012d82d:	e8 50 34 fd ff       	call   f0100c82 <cprintf>
f012d832:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d835:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d83a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d83d:	5b                   	pop    %ebx
f012d83e:	5f                   	pop    %edi
f012d83f:	5d                   	pop    %ebp
f012d840:	c3                   	ret    

f012d841 <test_krealloc_BF>:


int test_krealloc_BF() {
f012d841:	55                   	push   %ebp
f012d842:	89 e5                	mov    %esp,%ebp
f012d844:	57                   	push   %edi
f012d845:	53                   	push   %ebx
f012d846:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d84c:	83 ec 0c             	sub    $0xc,%esp
f012d84f:	68 dc ac 13 f0       	push   $0xf013acdc
f012d854:	e8 29 34 fd ff       	call   f0100c82 <cprintf>
f012d859:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d85c:	83 ec 0c             	sub    $0xc,%esp
f012d85f:	68 0c ad 13 f0       	push   $0xf013ad0c
f012d864:	e8 19 34 fd ff       	call   f0100c82 <cprintf>
f012d869:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d86c:	83 ec 0c             	sub    $0xc,%esp
f012d86f:	68 dc ac 13 f0       	push   $0xf013acdc
f012d874:	e8 09 34 fd ff       	call   f0100c82 <cprintf>
f012d879:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d87c:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d880:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d884:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d88a:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d890:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d897:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d89e:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d8a4:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d8a9:	b8 00 00 00 00       	mov    $0x0,%eax
f012d8ae:	89 d7                	mov    %edx,%edi
f012d8b0:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d8b2:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d8b9:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d8bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d8c4:	b8 00 00 00 00       	mov    $0x0,%eax
f012d8c9:	89 d7                	mov    %edx,%edi
f012d8cb:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d8cd:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d8d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d8d8:	b8 00 00 00 00       	mov    $0x0,%eax
f012d8dd:	89 d7                	mov    %edx,%edi
f012d8df:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d8e1:	e8 6b f1 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d8e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d8e9:	83 ec 08             	sub    $0x8,%esp
f012d8ec:	68 00 fc 0f 00       	push   $0xffc00
f012d8f1:	6a 00                	push   $0x0
f012d8f3:	e8 db a1 fd ff       	call   f0107ad3 <krealloc>
f012d8f8:	83 c4 10             	add    $0x10,%esp
f012d8fb:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d901:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d907:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d90c:	77 17                	ja     f012d925 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d90e:	83 ec 04             	sub    $0x4,%esp
f012d911:	68 40 c0 13 f0       	push   $0xf013c040
f012d916:	68 1a 11 00 00       	push   $0x111a
f012d91b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d920:	e8 d6 28 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d925:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d92b:	89 c1                	mov    %eax,%ecx
f012d92d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d934:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d937:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d93c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d93f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d942:	ba 00 00 00 00       	mov    $0x0,%edx
f012d947:	f7 75 b4             	divl   -0x4c(%ebp)
f012d94a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d94d:	29 d0                	sub    %edx,%eax
f012d94f:	89 c3                	mov    %eax,%ebx
f012d951:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d958:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d95d:	0f b6 d0             	movzbl %al,%edx
f012d960:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d963:	01 d0                	add    %edx,%eax
f012d965:	48                   	dec    %eax
f012d966:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d969:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d96c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d971:	f7 75 ac             	divl   -0x54(%ebp)
f012d974:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d977:	29 d0                	sub    %edx,%eax
f012d979:	01 c3                	add    %eax,%ebx
f012d97b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d982:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d987:	0f b6 c0             	movzbl %al,%eax
f012d98a:	c1 e0 04             	shl    $0x4,%eax
f012d98d:	89 c2                	mov    %eax,%edx
f012d98f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d992:	01 d0                	add    %edx,%eax
f012d994:	48                   	dec    %eax
f012d995:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d998:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d99b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9a0:	f7 75 a4             	divl   -0x5c(%ebp)
f012d9a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d9a6:	29 d0                	sub    %edx,%eax
f012d9a8:	01 d8                	add    %ebx,%eax
f012d9aa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d9af:	39 c1                	cmp    %eax,%ecx
f012d9b1:	74 17                	je     f012d9ca <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d9b3:	83 ec 04             	sub    $0x4,%esp
f012d9b6:	68 7c c0 13 f0       	push   $0xf013c07c
f012d9bb:	68 1c 11 00 00       	push   $0x111c
f012d9c0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d9c5:	e8 31 28 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d9ca:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d9cd:	e8 7f f0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012d9d2:	29 c3                	sub    %eax,%ebx
f012d9d4:	89 d8                	mov    %ebx,%eax
f012d9d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d9db:	74 17                	je     f012d9f4 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d9dd:	83 ec 04             	sub    $0x4,%esp
f012d9e0:	68 ae c0 13 f0       	push   $0xf013c0ae
f012d9e5:	68 1f 11 00 00       	push   $0x111f
f012d9ea:	68 9a ad 13 f0       	push   $0xf013ad9a
f012d9ef:	e8 07 28 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d9f4:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d9fb:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d9fe:	e8 4e f0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012da03:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012da06:	83 ec 08             	sub    $0x8,%esp
f012da09:	68 00 fc 0f 00       	push   $0xffc00
f012da0e:	6a 00                	push   $0x0
f012da10:	e8 be a0 fd ff       	call   f0107ad3 <krealloc>
f012da15:	83 c4 10             	add    $0x10,%esp
f012da18:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012da1e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012da24:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012da29:	77 17                	ja     f012da42 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da2b:	83 ec 04             	sub    $0x4,%esp
f012da2e:	68 40 c0 13 f0       	push   $0xf013c040
f012da33:	68 27 11 00 00       	push   $0x1127
f012da38:	68 9a ad 13 f0       	push   $0xf013ad9a
f012da3d:	e8 b9 27 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012da42:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012da48:	89 c1                	mov    %eax,%ecx
f012da4a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012da51:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012da54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012da59:	89 45 98             	mov    %eax,-0x68(%ebp)
f012da5c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012da5f:	ba 00 00 00 00       	mov    $0x0,%edx
f012da64:	f7 75 9c             	divl   -0x64(%ebp)
f012da67:	8b 45 98             	mov    -0x68(%ebp),%eax
f012da6a:	29 d0                	sub    %edx,%eax
f012da6c:	89 c3                	mov    %eax,%ebx
f012da6e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012da75:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012da7a:	0f b6 d0             	movzbl %al,%edx
f012da7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012da80:	01 d0                	add    %edx,%eax
f012da82:	48                   	dec    %eax
f012da83:	89 45 90             	mov    %eax,-0x70(%ebp)
f012da86:	8b 45 90             	mov    -0x70(%ebp),%eax
f012da89:	ba 00 00 00 00       	mov    $0x0,%edx
f012da8e:	f7 75 94             	divl   -0x6c(%ebp)
f012da91:	8b 45 90             	mov    -0x70(%ebp),%eax
f012da94:	29 d0                	sub    %edx,%eax
f012da96:	01 c3                	add    %eax,%ebx
f012da98:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012da9f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012daa4:	0f b6 c0             	movzbl %al,%eax
f012daa7:	c1 e0 04             	shl    $0x4,%eax
f012daaa:	89 c2                	mov    %eax,%edx
f012daac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012daaf:	01 d0                	add    %edx,%eax
f012dab1:	48                   	dec    %eax
f012dab2:	89 45 88             	mov    %eax,-0x78(%ebp)
f012dab5:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dab8:	ba 00 00 00 00       	mov    $0x0,%edx
f012dabd:	f7 75 8c             	divl   -0x74(%ebp)
f012dac0:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dac3:	29 d0                	sub    %edx,%eax
f012dac5:	01 d8                	add    %ebx,%eax
f012dac7:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012dacc:	39 c1                	cmp    %eax,%ecx
f012dace:	74 17                	je     f012dae7 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012dad0:	83 ec 04             	sub    $0x4,%esp
f012dad3:	68 7c c0 13 f0       	push   $0xf013c07c
f012dad8:	68 29 11 00 00       	push   $0x1129
f012dadd:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dae2:	e8 14 27 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dae7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012daea:	e8 62 ef fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012daef:	29 c3                	sub    %eax,%ebx
f012daf1:	89 d8                	mov    %ebx,%eax
f012daf3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012daf8:	74 17                	je     f012db11 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012dafa:	83 ec 04             	sub    $0x4,%esp
f012dafd:	68 ae c0 13 f0       	push   $0xf013c0ae
f012db02:	68 2b 11 00 00       	push   $0x112b
f012db07:	68 9a ad 13 f0       	push   $0xf013ad9a
f012db0c:	e8 ea 26 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012db11:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012db18:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012db1b:	e8 31 ef fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012db20:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012db23:	83 ec 08             	sub    $0x8,%esp
f012db26:	68 00 fc 0f 00       	push   $0xffc00
f012db2b:	6a 00                	push   $0x0
f012db2d:	e8 a1 9f fd ff       	call   f0107ad3 <krealloc>
f012db32:	83 c4 10             	add    $0x10,%esp
f012db35:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012db3b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012db41:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012db46:	77 17                	ja     f012db5f <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db48:	83 ec 04             	sub    $0x4,%esp
f012db4b:	68 40 c0 13 f0       	push   $0xf013c040
f012db50:	68 33 11 00 00       	push   $0x1133
f012db55:	68 9a ad 13 f0       	push   $0xf013ad9a
f012db5a:	e8 9c 26 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012db5f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012db65:	89 c1                	mov    %eax,%ecx
f012db67:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012db6e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012db71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012db76:	89 45 80             	mov    %eax,-0x80(%ebp)
f012db79:	8b 45 80             	mov    -0x80(%ebp),%eax
f012db7c:	ba 00 00 00 00       	mov    $0x0,%edx
f012db81:	f7 75 84             	divl   -0x7c(%ebp)
f012db84:	8b 45 80             	mov    -0x80(%ebp),%eax
f012db87:	29 d0                	sub    %edx,%eax
f012db89:	89 c3                	mov    %eax,%ebx
f012db8b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012db92:	10 00 00 
f012db95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012db9a:	0f b6 d0             	movzbl %al,%edx
f012db9d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012dba3:	01 d0                	add    %edx,%eax
f012dba5:	48                   	dec    %eax
f012dba6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012dbac:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dbb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbb7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012dbbd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dbc3:	29 d0                	sub    %edx,%eax
f012dbc5:	01 c3                	add    %eax,%ebx
f012dbc7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012dbce:	10 00 00 
f012dbd1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dbd6:	0f b6 c0             	movzbl %al,%eax
f012dbd9:	c1 e0 04             	shl    $0x4,%eax
f012dbdc:	89 c2                	mov    %eax,%edx
f012dbde:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012dbe4:	01 d0                	add    %edx,%eax
f012dbe6:	48                   	dec    %eax
f012dbe7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012dbed:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012dbf3:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbf8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012dbfe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012dc04:	29 d0                	sub    %edx,%eax
f012dc06:	01 d8                	add    %ebx,%eax
f012dc08:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012dc0d:	39 c1                	cmp    %eax,%ecx
f012dc0f:	74 17                	je     f012dc28 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012dc11:	83 ec 04             	sub    $0x4,%esp
f012dc14:	68 7c c0 13 f0       	push   $0xf013c07c
f012dc19:	68 35 11 00 00       	push   $0x1135
f012dc1e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dc23:	e8 d3 25 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dc28:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc2b:	e8 21 ee fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012dc30:	29 c3                	sub    %eax,%ebx
f012dc32:	89 d8                	mov    %ebx,%eax
f012dc34:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dc39:	74 17                	je     f012dc52 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012dc3b:	83 ec 04             	sub    $0x4,%esp
f012dc3e:	68 ae c0 13 f0       	push   $0xf013c0ae
f012dc43:	68 37 11 00 00       	push   $0x1137
f012dc48:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dc4d:	e8 a9 25 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dc52:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012dc59:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dc5c:	e8 f0 ed fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012dc61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012dc64:	83 ec 08             	sub    $0x8,%esp
f012dc67:	68 00 fc 0f 00       	push   $0xffc00
f012dc6c:	6a 00                	push   $0x0
f012dc6e:	e8 60 9e fd ff       	call   f0107ad3 <krealloc>
f012dc73:	83 c4 10             	add    $0x10,%esp
f012dc76:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012dc7c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dc82:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012dc87:	77 17                	ja     f012dca0 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc89:	83 ec 04             	sub    $0x4,%esp
f012dc8c:	68 40 c0 13 f0       	push   $0xf013c040
f012dc91:	68 3e 11 00 00       	push   $0x113e
f012dc96:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dc9b:	e8 5b 25 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012dca0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dca6:	89 c1                	mov    %eax,%ecx
f012dca8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012dcaf:	10 00 00 
f012dcb2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012dcb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dcbd:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012dcc3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012dcc9:	ba 00 00 00 00       	mov    $0x0,%edx
f012dcce:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012dcd4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012dcda:	29 d0                	sub    %edx,%eax
f012dcdc:	89 c3                	mov    %eax,%ebx
f012dcde:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012dce5:	10 00 00 
f012dce8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dced:	0f b6 d0             	movzbl %al,%edx
f012dcf0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012dcf6:	01 d0                	add    %edx,%eax
f012dcf8:	48                   	dec    %eax
f012dcf9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012dcff:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012dd05:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd0a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012dd10:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012dd16:	29 d0                	sub    %edx,%eax
f012dd18:	01 c3                	add    %eax,%ebx
f012dd1a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012dd21:	10 00 00 
f012dd24:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dd29:	0f b6 c0             	movzbl %al,%eax
f012dd2c:	c1 e0 04             	shl    $0x4,%eax
f012dd2f:	89 c2                	mov    %eax,%edx
f012dd31:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012dd37:	01 d0                	add    %edx,%eax
f012dd39:	48                   	dec    %eax
f012dd3a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012dd40:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dd46:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd4b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012dd51:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dd57:	29 d0                	sub    %edx,%eax
f012dd59:	01 d8                	add    %ebx,%eax
f012dd5b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012dd60:	39 c1                	cmp    %eax,%ecx
f012dd62:	74 17                	je     f012dd7b <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012dd64:	83 ec 04             	sub    $0x4,%esp
f012dd67:	68 7c c0 13 f0       	push   $0xf013c07c
f012dd6c:	68 40 11 00 00       	push   $0x1140
f012dd71:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dd76:	e8 80 24 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dd7b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd7e:	e8 ce ec fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012dd83:	29 c3                	sub    %eax,%ebx
f012dd85:	89 d8                	mov    %ebx,%eax
f012dd87:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dd8c:	74 17                	je     f012dda5 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012dd8e:	83 ec 04             	sub    $0x4,%esp
f012dd91:	68 ae c0 13 f0       	push   $0xf013c0ae
f012dd96:	68 42 11 00 00       	push   $0x1142
f012dd9b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dda0:	e8 56 24 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dda5:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012ddac:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ddaf:	e8 9d ec fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ddb4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ddb7:	83 ec 08             	sub    $0x8,%esp
f012ddba:	68 00 fc 1f 00       	push   $0x1ffc00
f012ddbf:	6a 00                	push   $0x0
f012ddc1:	e8 0d 9d fd ff       	call   f0107ad3 <krealloc>
f012ddc6:	83 c4 10             	add    $0x10,%esp
f012ddc9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ddcf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ddd5:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ddda:	77 17                	ja     f012ddf3 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dddc:	83 ec 04             	sub    $0x4,%esp
f012dddf:	68 40 c0 13 f0       	push   $0xf013c040
f012dde4:	68 49 11 00 00       	push   $0x1149
f012dde9:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ddee:	e8 08 24 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ddf3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ddf9:	89 c1                	mov    %eax,%ecx
f012ddfb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012de02:	10 00 00 
f012de05:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012de0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de10:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012de16:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012de1c:	ba 00 00 00 00       	mov    $0x0,%edx
f012de21:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012de27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012de2d:	29 d0                	sub    %edx,%eax
f012de2f:	89 c3                	mov    %eax,%ebx
f012de31:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012de38:	10 00 00 
f012de3b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de40:	0f b6 d0             	movzbl %al,%edx
f012de43:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012de49:	01 d0                	add    %edx,%eax
f012de4b:	48                   	dec    %eax
f012de4c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012de52:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012de58:	ba 00 00 00 00       	mov    $0x0,%edx
f012de5d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012de63:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012de69:	29 d0                	sub    %edx,%eax
f012de6b:	01 c3                	add    %eax,%ebx
f012de6d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012de74:	10 00 00 
f012de77:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de7c:	0f b6 c0             	movzbl %al,%eax
f012de7f:	c1 e0 04             	shl    $0x4,%eax
f012de82:	89 c2                	mov    %eax,%edx
f012de84:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012de8a:	01 d0                	add    %edx,%eax
f012de8c:	48                   	dec    %eax
f012de8d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012de93:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012de99:	ba 00 00 00 00       	mov    $0x0,%edx
f012de9e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012dea4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012deaa:	29 d0                	sub    %edx,%eax
f012deac:	01 d8                	add    %ebx,%eax
f012deae:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012deb3:	39 c1                	cmp    %eax,%ecx
f012deb5:	74 17                	je     f012dece <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012deb7:	83 ec 04             	sub    $0x4,%esp
f012deba:	68 7c c0 13 f0       	push   $0xf013c07c
f012debf:	68 4b 11 00 00       	push   $0x114b
f012dec4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012dec9:	e8 2d 23 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dece:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ded1:	e8 7b eb fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ded6:	29 c3                	sub    %eax,%ebx
f012ded8:	89 d8                	mov    %ebx,%eax
f012deda:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dedf:	74 17                	je     f012def8 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012dee1:	83 ec 04             	sub    $0x4,%esp
f012dee4:	68 ae c0 13 f0       	push   $0xf013c0ae
f012dee9:	68 4d 11 00 00       	push   $0x114d
f012deee:	68 9a ad 13 f0       	push   $0xf013ad9a
f012def3:	e8 03 23 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012def8:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012deff:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012df02:	e8 4a eb fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012df07:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012df0a:	83 ec 08             	sub    $0x8,%esp
f012df0d:	68 00 fc 1f 00       	push   $0x1ffc00
f012df12:	6a 00                	push   $0x0
f012df14:	e8 ba 9b fd ff       	call   f0107ad3 <krealloc>
f012df19:	83 c4 10             	add    $0x10,%esp
f012df1c:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012df22:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012df28:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012df2d:	77 17                	ja     f012df46 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df2f:	83 ec 04             	sub    $0x4,%esp
f012df32:	68 40 c0 13 f0       	push   $0xf013c040
f012df37:	68 54 11 00 00       	push   $0x1154
f012df3c:	68 9a ad 13 f0       	push   $0xf013ad9a
f012df41:	e8 b5 22 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012df46:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012df4c:	89 c1                	mov    %eax,%ecx
f012df4e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012df55:	10 00 00 
f012df58:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012df5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df63:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012df69:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012df6f:	ba 00 00 00 00       	mov    $0x0,%edx
f012df74:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012df7a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012df80:	29 d0                	sub    %edx,%eax
f012df82:	89 c3                	mov    %eax,%ebx
f012df84:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012df8b:	10 00 00 
f012df8e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012df93:	0f b6 d0             	movzbl %al,%edx
f012df96:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012df9c:	01 d0                	add    %edx,%eax
f012df9e:	48                   	dec    %eax
f012df9f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012dfa5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012dfab:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfb0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012dfb6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012dfbc:	29 d0                	sub    %edx,%eax
f012dfbe:	01 c3                	add    %eax,%ebx
f012dfc0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012dfc7:	10 00 00 
f012dfca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dfcf:	0f b6 c0             	movzbl %al,%eax
f012dfd2:	c1 e0 04             	shl    $0x4,%eax
f012dfd5:	89 c2                	mov    %eax,%edx
f012dfd7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012dfdd:	01 d0                	add    %edx,%eax
f012dfdf:	48                   	dec    %eax
f012dfe0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012dfe6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dfec:	ba 00 00 00 00       	mov    $0x0,%edx
f012dff1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012dff7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dffd:	29 d0                	sub    %edx,%eax
f012dfff:	01 d8                	add    %ebx,%eax
f012e001:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e006:	39 c1                	cmp    %eax,%ecx
f012e008:	74 17                	je     f012e021 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e00a:	83 ec 04             	sub    $0x4,%esp
f012e00d:	68 7c c0 13 f0       	push   $0xf013c07c
f012e012:	68 56 11 00 00       	push   $0x1156
f012e017:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e01c:	e8 da 21 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e021:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e024:	e8 28 ea fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e029:	29 c3                	sub    %eax,%ebx
f012e02b:	89 d8                	mov    %ebx,%eax
f012e02d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e032:	74 17                	je     f012e04b <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e034:	83 ec 04             	sub    $0x4,%esp
f012e037:	68 ae c0 13 f0       	push   $0xf013c0ae
f012e03c:	68 58 11 00 00       	push   $0x1158
f012e041:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e046:	e8 b0 21 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e04b:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e052:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e055:	e8 f7 e9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e05a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e05d:	83 ec 08             	sub    $0x8,%esp
f012e060:	68 00 fc 2f 00       	push   $0x2ffc00
f012e065:	6a 00                	push   $0x0
f012e067:	e8 67 9a fd ff       	call   f0107ad3 <krealloc>
f012e06c:	83 c4 10             	add    $0x10,%esp
f012e06f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e075:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e07b:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e080:	77 17                	ja     f012e099 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e082:	83 ec 04             	sub    $0x4,%esp
f012e085:	68 40 c0 13 f0       	push   $0xf013c040
f012e08a:	68 5f 11 00 00       	push   $0x115f
f012e08f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e094:	e8 62 21 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e099:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e09f:	89 c1                	mov    %eax,%ecx
f012e0a1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e0a8:	10 00 00 
f012e0ab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e0b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e0b6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e0bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e0c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0c7:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e0cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e0d3:	29 d0                	sub    %edx,%eax
f012e0d5:	89 c3                	mov    %eax,%ebx
f012e0d7:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e0de:	10 00 00 
f012e0e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e0e6:	0f b6 d0             	movzbl %al,%edx
f012e0e9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e0ef:	01 d0                	add    %edx,%eax
f012e0f1:	48                   	dec    %eax
f012e0f2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e0f8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e0fe:	ba 00 00 00 00       	mov    $0x0,%edx
f012e103:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e109:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e10f:	29 d0                	sub    %edx,%eax
f012e111:	01 c3                	add    %eax,%ebx
f012e113:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e11a:	10 00 00 
f012e11d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e122:	0f b6 c0             	movzbl %al,%eax
f012e125:	c1 e0 04             	shl    $0x4,%eax
f012e128:	89 c2                	mov    %eax,%edx
f012e12a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e130:	01 d0                	add    %edx,%eax
f012e132:	48                   	dec    %eax
f012e133:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e139:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e13f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e144:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e14a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e150:	29 d0                	sub    %edx,%eax
f012e152:	01 d8                	add    %ebx,%eax
f012e154:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e159:	39 c1                	cmp    %eax,%ecx
f012e15b:	74 17                	je     f012e174 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e15d:	83 ec 04             	sub    $0x4,%esp
f012e160:	68 7c c0 13 f0       	push   $0xf013c07c
f012e165:	68 61 11 00 00       	push   $0x1161
f012e16a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e16f:	e8 87 20 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e174:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e177:	e8 d5 e8 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e17c:	29 c3                	sub    %eax,%ebx
f012e17e:	89 d8                	mov    %ebx,%eax
f012e180:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e185:	74 17                	je     f012e19e <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e187:	83 ec 04             	sub    $0x4,%esp
f012e18a:	68 e4 b1 13 f0       	push   $0xf013b1e4
f012e18f:	68 63 11 00 00       	push   $0x1163
f012e194:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e199:	e8 5d 20 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e19e:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e1a5:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e1a8:	e8 a4 e8 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e1ad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e1b0:	83 ec 08             	sub    $0x8,%esp
f012e1b3:	68 00 fc 2f 00       	push   $0x2ffc00
f012e1b8:	6a 00                	push   $0x0
f012e1ba:	e8 14 99 fd ff       	call   f0107ad3 <krealloc>
f012e1bf:	83 c4 10             	add    $0x10,%esp
f012e1c2:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e1c8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e1ce:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e1d3:	77 17                	ja     f012e1ec <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e1d5:	83 ec 04             	sub    $0x4,%esp
f012e1d8:	68 40 c0 13 f0       	push   $0xf013c040
f012e1dd:	68 6a 11 00 00       	push   $0x116a
f012e1e2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e1e7:	e8 0f 20 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e1ec:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e1f2:	89 c1                	mov    %eax,%ecx
f012e1f4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e1fb:	10 00 00 
f012e1fe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e204:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e209:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e20f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e215:	ba 00 00 00 00       	mov    $0x0,%edx
f012e21a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e220:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e226:	29 d0                	sub    %edx,%eax
f012e228:	89 c3                	mov    %eax,%ebx
f012e22a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e231:	10 00 00 
f012e234:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e239:	0f b6 d0             	movzbl %al,%edx
f012e23c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e242:	01 d0                	add    %edx,%eax
f012e244:	48                   	dec    %eax
f012e245:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e24b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e251:	ba 00 00 00 00       	mov    $0x0,%edx
f012e256:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e25c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e262:	29 d0                	sub    %edx,%eax
f012e264:	01 c3                	add    %eax,%ebx
f012e266:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e26d:	10 00 00 
f012e270:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e275:	0f b6 c0             	movzbl %al,%eax
f012e278:	c1 e0 04             	shl    $0x4,%eax
f012e27b:	89 c2                	mov    %eax,%edx
f012e27d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e283:	01 d0                	add    %edx,%eax
f012e285:	48                   	dec    %eax
f012e286:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e28c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e292:	ba 00 00 00 00       	mov    $0x0,%edx
f012e297:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e29d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e2a3:	29 d0                	sub    %edx,%eax
f012e2a5:	01 d8                	add    %ebx,%eax
f012e2a7:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e2ac:	39 c1                	cmp    %eax,%ecx
f012e2ae:	74 17                	je     f012e2c7 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e2b0:	83 ec 04             	sub    $0x4,%esp
f012e2b3:	68 7c c0 13 f0       	push   $0xf013c07c
f012e2b8:	68 6c 11 00 00       	push   $0x116c
f012e2bd:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e2c2:	e8 34 1f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e2c7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e2ca:	e8 82 e7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e2cf:	29 c3                	sub    %eax,%ebx
f012e2d1:	89 d8                	mov    %ebx,%eax
f012e2d3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e2d8:	74 17                	je     f012e2f1 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e2da:	83 ec 04             	sub    $0x4,%esp
f012e2dd:	68 ae c0 13 f0       	push   $0xf013c0ae
f012e2e2:	68 6e 11 00 00       	push   $0x116e
f012e2e7:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e2ec:	e8 0a 1f fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e2f1:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e2f8:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e2fb:	e8 51 e7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e300:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e303:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e30a:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e30d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e313:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e319:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e31f:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e322:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e324:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e32a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e330:	01 c2                	add    %eax,%edx
f012e332:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e335:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e337:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e33d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e343:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e34a:	eb 11                	jmp    f012e35d <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e34c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e34f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e355:	01 d0                	add    %edx,%eax
f012e357:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e35a:	ff 45 f4             	incl   -0xc(%ebp)
f012e35d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e363:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e366:	7d e4                	jge    f012e34c <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e368:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e36e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e374:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e37a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e380:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e386:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e38d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e393:	01 d0                	add    %edx,%eax
f012e395:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e39b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e3a1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e3a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e3ae:	eb 1b                	jmp    f012e3cb <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e3b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e3b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e3ba:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e3c0:	01 d0                	add    %edx,%eax
f012e3c2:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e3c8:	ff 45 f0             	incl   -0x10(%ebp)
f012e3cb:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e3d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e3d4:	7d da                	jge    f012e3b0 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e3d6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e3dc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e3e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e3e9:	eb 17                	jmp    f012e402 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e3eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e3ee:	01 c0                	add    %eax,%eax
f012e3f0:	89 c2                	mov    %eax,%edx
f012e3f2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e3f8:	01 d0                	add    %edx,%eax
f012e3fa:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e3ff:	ff 45 ec             	incl   -0x14(%ebp)
f012e402:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e408:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e40b:	7d de                	jge    f012e3eb <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e40d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e413:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e419:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e41f:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e424:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e42a:	01 c0                	add    %eax,%eax
f012e42c:	89 c2                	mov    %eax,%edx
f012e42e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e434:	01 d0                	add    %edx,%eax
f012e436:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e43b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e441:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e447:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e44e:	eb 49                	jmp    f012e499 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e450:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e453:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e45a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e460:	01 d0                	add    %edx,%eax
f012e462:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e465:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e468:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e46f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e475:	01 d0                	add    %edx,%eax
f012e477:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e47d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e480:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e487:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e48d:	01 d0                	add    %edx,%eax
f012e48f:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e496:	ff 45 e8             	incl   -0x18(%ebp)
f012e499:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e49f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e4a2:	7d ac                	jge    f012e450 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e4a4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e4aa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e4b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4b6:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e4b9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4bf:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e4c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4cb:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e4d2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e4d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e4df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4e5:	01 d0                	add    %edx,%eax
f012e4e7:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e4ea:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e4f0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e4f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e4fd:	01 d0                	add    %edx,%eax
f012e4ff:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e505:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e50b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e512:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e518:	01 d0                	add    %edx,%eax
f012e51a:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e521:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e527:	8a 00                	mov    (%eax),%al
f012e529:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e52c:	75 17                	jne    f012e545 <test_krealloc_BF+0xd04>
f012e52e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e534:	89 c2                	mov    %eax,%edx
f012e536:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e53c:	01 d0                	add    %edx,%eax
f012e53e:	8a 00                	mov    (%eax),%al
f012e540:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e543:	74 17                	je     f012e55c <test_krealloc_BF+0xd1b>
			panic(
f012e545:	83 ec 04             	sub    $0x4,%esp
f012e548:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e54d:	68 b1 11 00 00       	push   $0x11b1
f012e552:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e557:	e8 9f 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e55c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e562:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e568:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e56e:	8a 00                	mov    (%eax),%al
f012e570:	3c 02                	cmp    $0x2,%al
f012e572:	75 16                	jne    f012e58a <test_krealloc_BF+0xd49>
f012e574:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e57a:	89 c2                	mov    %eax,%edx
f012e57c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e582:	01 d0                	add    %edx,%eax
f012e584:	8a 00                	mov    (%eax),%al
f012e586:	3c 02                	cmp    $0x2,%al
f012e588:	74 20                	je     f012e5aa <test_krealloc_BF+0xd69>
			panic(
f012e58a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e590:	8a 00                	mov    (%eax),%al
f012e592:	0f be c0             	movsbl %al,%eax
f012e595:	50                   	push   %eax
f012e596:	68 0c c1 13 f0       	push   $0xf013c10c
f012e59b:	68 b7 11 00 00       	push   $0x11b7
f012e5a0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e5a5:	e8 51 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e5aa:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e5b0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e5b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e5bc:	8b 00                	mov    (%eax),%eax
f012e5be:	83 f8 03             	cmp    $0x3,%eax
f012e5c1:	75 1c                	jne    f012e5df <test_krealloc_BF+0xd9e>
f012e5c3:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e5c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5d0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e5d6:	01 d0                	add    %edx,%eax
f012e5d8:	8b 00                	mov    (%eax),%eax
f012e5da:	83 f8 03             	cmp    $0x3,%eax
f012e5dd:	74 17                	je     f012e5f6 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e5df:	83 ec 04             	sub    $0x4,%esp
f012e5e2:	68 58 c1 13 f0       	push   $0xf013c158
f012e5e7:	68 bb 11 00 00       	push   $0x11bb
f012e5ec:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e5f1:	e8 05 1c fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012e5f6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e5fc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e602:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e608:	8b 00                	mov    (%eax),%eax
f012e60a:	83 f8 04             	cmp    $0x4,%eax
f012e60d:	75 1c                	jne    f012e62b <test_krealloc_BF+0xdea>
f012e60f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e615:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e61c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e622:	01 d0                	add    %edx,%eax
f012e624:	8b 00                	mov    (%eax),%eax
f012e626:	83 f8 04             	cmp    $0x4,%eax
f012e629:	74 17                	je     f012e642 <test_krealloc_BF+0xe01>
			panic(
f012e62b:	83 ec 04             	sub    $0x4,%esp
f012e62e:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e633:	68 c0 11 00 00       	push   $0x11c0
f012e638:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e63d:	e8 b9 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e642:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e648:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e64e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e654:	66 8b 00             	mov    (%eax),%ax
f012e657:	66 83 f8 05          	cmp    $0x5,%ax
f012e65b:	75 1b                	jne    f012e678 <test_krealloc_BF+0xe37>
f012e65d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e663:	01 c0                	add    %eax,%eax
f012e665:	89 c2                	mov    %eax,%edx
f012e667:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e66d:	01 d0                	add    %edx,%eax
f012e66f:	66 8b 00             	mov    (%eax),%ax
f012e672:	66 83 f8 05          	cmp    $0x5,%ax
f012e676:	74 17                	je     f012e68f <test_krealloc_BF+0xe4e>
			panic(
f012e678:	83 ec 04             	sub    $0x4,%esp
f012e67b:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e680:	68 c5 11 00 00       	push   $0x11c5
f012e685:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e68a:	e8 6c 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e68f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e695:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e69b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e6a1:	66 8b 00             	mov    (%eax),%ax
f012e6a4:	66 83 f8 06          	cmp    $0x6,%ax
f012e6a8:	75 1b                	jne    f012e6c5 <test_krealloc_BF+0xe84>
f012e6aa:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e6b0:	01 c0                	add    %eax,%eax
f012e6b2:	89 c2                	mov    %eax,%edx
f012e6b4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e6ba:	01 d0                	add    %edx,%eax
f012e6bc:	66 8b 00             	mov    (%eax),%ax
f012e6bf:	66 83 f8 06          	cmp    $0x6,%ax
f012e6c3:	74 17                	je     f012e6dc <test_krealloc_BF+0xe9b>
			panic(
f012e6c5:	83 ec 04             	sub    $0x4,%esp
f012e6c8:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e6cd:	68 ca 11 00 00       	push   $0x11ca
f012e6d2:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e6d7:	e8 1f 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e6dc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e6e2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e6e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6ee:	8a 00                	mov    (%eax),%al
f012e6f0:	3c 07                	cmp    $0x7,%al
f012e6f2:	75 1b                	jne    f012e70f <test_krealloc_BF+0xece>
f012e6f4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e6fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e701:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e707:	01 d0                	add    %edx,%eax
f012e709:	8a 00                	mov    (%eax),%al
f012e70b:	3c 07                	cmp    $0x7,%al
f012e70d:	74 17                	je     f012e726 <test_krealloc_BF+0xee5>
			panic(
f012e70f:	83 ec 04             	sub    $0x4,%esp
f012e712:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e717:	68 cf 11 00 00       	push   $0x11cf
f012e71c:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e721:	e8 d5 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e726:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e72c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e730:	66 83 f8 07          	cmp    $0x7,%ax
f012e734:	75 1f                	jne    f012e755 <test_krealloc_BF+0xf14>
f012e736:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e73c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e743:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e749:	01 d0                	add    %edx,%eax
f012e74b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e74f:	66 83 f8 07          	cmp    $0x7,%ax
f012e753:	74 17                	je     f012e76c <test_krealloc_BF+0xf2b>
			panic(
f012e755:	83 ec 04             	sub    $0x4,%esp
f012e758:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e75d:	68 d2 11 00 00       	push   $0x11d2
f012e762:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e767:	e8 8f 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e76c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e772:	8b 40 04             	mov    0x4(%eax),%eax
f012e775:	83 f8 07             	cmp    $0x7,%eax
f012e778:	75 1d                	jne    f012e797 <test_krealloc_BF+0xf56>
f012e77a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e780:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e787:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e78d:	01 d0                	add    %edx,%eax
f012e78f:	8b 40 04             	mov    0x4(%eax),%eax
f012e792:	83 f8 07             	cmp    $0x7,%eax
f012e795:	74 17                	je     f012e7ae <test_krealloc_BF+0xf6d>
			panic(
f012e797:	83 ec 04             	sub    $0x4,%esp
f012e79a:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e79f:	68 d5 11 00 00       	push   $0x11d5
f012e7a4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e7a9:	e8 4d 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e7ae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e7b4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e7ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e7c0:	8a 00                	mov    (%eax),%al
f012e7c2:	3c 08                	cmp    $0x8,%al
f012e7c4:	75 1b                	jne    f012e7e1 <test_krealloc_BF+0xfa0>
f012e7c6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e7cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e7d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e7d9:	01 d0                	add    %edx,%eax
f012e7db:	8a 00                	mov    (%eax),%al
f012e7dd:	3c 08                	cmp    $0x8,%al
f012e7df:	74 17                	je     f012e7f8 <test_krealloc_BF+0xfb7>
			panic(
f012e7e1:	83 ec 04             	sub    $0x4,%esp
f012e7e4:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e7e9:	68 da 11 00 00       	push   $0x11da
f012e7ee:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e7f3:	e8 03 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e7f8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e7fe:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e802:	66 83 f8 08          	cmp    $0x8,%ax
f012e806:	75 1f                	jne    f012e827 <test_krealloc_BF+0xfe6>
f012e808:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e80e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e815:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e81b:	01 d0                	add    %edx,%eax
f012e81d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e821:	66 83 f8 08          	cmp    $0x8,%ax
f012e825:	74 17                	je     f012e83e <test_krealloc_BF+0xffd>
			panic(
f012e827:	83 ec 04             	sub    $0x4,%esp
f012e82a:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e82f:	68 dd 11 00 00       	push   $0x11dd
f012e834:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e839:	e8 bd 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e83e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e844:	8b 40 04             	mov    0x4(%eax),%eax
f012e847:	83 f8 08             	cmp    $0x8,%eax
f012e84a:	75 1d                	jne    f012e869 <test_krealloc_BF+0x1028>
f012e84c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e852:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e859:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e85f:	01 d0                	add    %edx,%eax
f012e861:	8b 40 04             	mov    0x4(%eax),%eax
f012e864:	83 f8 08             	cmp    $0x8,%eax
f012e867:	74 17                	je     f012e880 <test_krealloc_BF+0x103f>
			panic(
f012e869:	83 ec 04             	sub    $0x4,%esp
f012e86c:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e871:	68 e0 11 00 00       	push   $0x11e0
f012e876:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e87b:	e8 7b 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e880:	e8 cc e1 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e885:	89 c2                	mov    %eax,%edx
f012e887:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e88a:	39 c2                	cmp    %eax,%edx
f012e88c:	74 17                	je     f012e8a5 <test_krealloc_BF+0x1064>
			panic(
f012e88e:	83 ec 04             	sub    $0x4,%esp
f012e891:	68 8c c1 13 f0       	push   $0xf013c18c
f012e896:	68 e4 11 00 00       	push   $0x11e4
f012e89b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e8a0:	e8 56 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e8a5:	83 ec 0c             	sub    $0xc,%esp
f012e8a8:	68 d8 c1 13 f0       	push   $0xf013c1d8
f012e8ad:	e8 d0 23 fd ff       	call   f0100c82 <cprintf>
f012e8b2:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e8b5:	e8 97 e1 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e8ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e8bd:	e8 7a 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8c2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e8c8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e8ce:	83 ec 08             	sub    $0x8,%esp
f012e8d1:	6a 00                	push   $0x0
f012e8d3:	50                   	push   %eax
f012e8d4:	e8 fa 91 fd ff       	call   f0107ad3 <krealloc>
f012e8d9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e8dc:	e8 5b 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8e1:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e8e7:	74 17                	je     f012e900 <test_krealloc_BF+0x10bf>
			panic(
f012e8e9:	83 ec 04             	sub    $0x4,%esp
f012e8ec:	68 fc c1 13 f0       	push   $0xf013c1fc
f012e8f1:	68 f1 11 00 00       	push   $0x11f1
f012e8f6:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e8fb:	e8 fb 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e900:	e8 4c e1 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e905:	89 c2                	mov    %eax,%edx
f012e907:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e90a:	29 c2                	sub    %eax,%edx
f012e90c:	89 d0                	mov    %edx,%eax
f012e90e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e913:	74 17                	je     f012e92c <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e915:	83 ec 04             	sub    $0x4,%esp
f012e918:	68 70 c2 13 f0       	push   $0xf013c270
f012e91d:	68 f3 11 00 00       	push   $0x11f3
f012e922:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e927:	e8 cf 18 fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e92c:	e8 20 e1 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e931:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e934:	e8 03 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e939:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e93f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e945:	83 ec 08             	sub    $0x8,%esp
f012e948:	6a 00                	push   $0x0
f012e94a:	50                   	push   %eax
f012e94b:	e8 83 91 fd ff       	call   f0107ad3 <krealloc>
f012e950:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e953:	e8 e4 53 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e958:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e95e:	74 17                	je     f012e977 <test_krealloc_BF+0x1136>
			panic(
f012e960:	83 ec 04             	sub    $0x4,%esp
f012e963:	68 fc c1 13 f0       	push   $0xf013c1fc
f012e968:	68 fc 11 00 00       	push   $0x11fc
f012e96d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e972:	e8 84 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e977:	e8 d5 e0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e97c:	89 c2                	mov    %eax,%edx
f012e97e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e981:	29 c2                	sub    %eax,%edx
f012e983:	89 d0                	mov    %edx,%eax
f012e985:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e98a:	74 17                	je     f012e9a3 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e98c:	83 ec 04             	sub    $0x4,%esp
f012e98f:	68 70 c2 13 f0       	push   $0xf013c270
f012e994:	68 fe 11 00 00       	push   $0x11fe
f012e999:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e99e:	e8 58 18 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e9a3:	e8 a9 e0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e9a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e9ab:	e8 8c 53 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e9b0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e9b6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e9bc:	83 ec 08             	sub    $0x8,%esp
f012e9bf:	6a 00                	push   $0x0
f012e9c1:	50                   	push   %eax
f012e9c2:	e8 0c 91 fd ff       	call   f0107ad3 <krealloc>
f012e9c7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e9ca:	e8 6d 53 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e9cf:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e9d5:	74 17                	je     f012e9ee <test_krealloc_BF+0x11ad>
			panic(
f012e9d7:	83 ec 04             	sub    $0x4,%esp
f012e9da:	68 b4 ad 13 f0       	push   $0xf013adb4
f012e9df:	68 06 12 00 00       	push   $0x1206
f012e9e4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012e9e9:	e8 0d 18 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e9ee:	e8 5e e0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012e9f3:	89 c2                	mov    %eax,%edx
f012e9f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e9f8:	29 c2                	sub    %eax,%edx
f012e9fa:	89 d0                	mov    %edx,%eax
f012e9fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ea01:	74 17                	je     f012ea1a <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012ea03:	83 ec 04             	sub    $0x4,%esp
f012ea06:	68 70 c2 13 f0       	push   $0xf013c270
f012ea0b:	68 08 12 00 00       	push   $0x1208
f012ea10:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ea15:	e8 e1 17 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ea1a:	e8 32 e0 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ea1f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ea22:	e8 15 53 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ea27:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ea2d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ea33:	83 ec 08             	sub    $0x8,%esp
f012ea36:	6a 00                	push   $0x0
f012ea38:	50                   	push   %eax
f012ea39:	e8 95 90 fd ff       	call   f0107ad3 <krealloc>
f012ea3e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ea41:	e8 f6 52 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ea46:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ea4c:	74 17                	je     f012ea65 <test_krealloc_BF+0x1224>
			panic(
f012ea4e:	83 ec 04             	sub    $0x4,%esp
f012ea51:	68 fc c1 13 f0       	push   $0xf013c1fc
f012ea56:	68 10 12 00 00       	push   $0x1210
f012ea5b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ea60:	e8 96 17 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ea65:	e8 e7 df fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ea6a:	89 c2                	mov    %eax,%edx
f012ea6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ea6f:	29 c2                	sub    %eax,%edx
f012ea71:	89 d0                	mov    %edx,%eax
f012ea73:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ea78:	74 17                	je     f012ea91 <test_krealloc_BF+0x1250>
			panic(
f012ea7a:	83 ec 04             	sub    $0x4,%esp
f012ea7d:	68 a4 c2 13 f0       	push   $0xf013c2a4
f012ea82:	68 13 12 00 00       	push   $0x1213
f012ea87:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ea8c:	e8 6a 17 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ea91:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ea98:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ea9f:	eb 48                	jmp    f012eae9 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012eaa1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012eaa4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012eaa9:	83 ec 04             	sub    $0x4,%esp
f012eaac:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012eab2:	51                   	push   %ecx
f012eab3:	52                   	push   %edx
f012eab4:	50                   	push   %eax
f012eab5:	e8 20 7f fd ff       	call   f01069da <get_page_table>
f012eaba:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012eabd:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012eac3:	85 c0                	test   %eax,%eax
f012eac5:	75 17                	jne    f012eade <test_krealloc_BF+0x129d>
					panic(
f012eac7:	83 ec 04             	sub    $0x4,%esp
f012eaca:	68 9c b6 13 f0       	push   $0xf013b69c
f012eacf:	68 1f 12 00 00       	push   $0x121f
f012ead4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ead9:	e8 1d 17 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012eade:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012eae5:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012eae9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eaed:	78 b2                	js     f012eaa1 <test_krealloc_BF+0x1260>
f012eaef:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eaf3:	7f 09                	jg     f012eafe <test_krealloc_BF+0x12bd>
f012eaf5:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012eafc:	76 a3                	jbe    f012eaa1 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012eafe:	83 ec 0c             	sub    $0xc,%esp
f012eb01:	68 e3 c2 13 f0       	push   $0xf013c2e3
f012eb06:	e8 77 21 fd ff       	call   f0100c82 <cprintf>
f012eb0b:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012eb0e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eb14:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012eb1a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eb21:	eb 21                	jmp    f012eb44 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012eb23:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eb29:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012eb2c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eb32:	01 c8                	add    %ecx,%eax
f012eb34:	8a 00                	mov    (%eax),%al
f012eb36:	0f be c0             	movsbl %al,%eax
f012eb39:	01 d0                	add    %edx,%eax
f012eb3b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012eb41:	ff 45 dc             	incl   -0x24(%ebp)
f012eb44:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eb4a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eb4d:	7d d4                	jge    f012eb23 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012eb4f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012eb55:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012eb5b:	42                   	inc    %edx
f012eb5c:	01 d2                	add    %edx,%edx
f012eb5e:	39 d0                	cmp    %edx,%eax
f012eb60:	74 17                	je     f012eb79 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012eb62:	83 ec 04             	sub    $0x4,%esp
f012eb65:	68 ec c2 13 f0       	push   $0xf013c2ec
f012eb6a:	68 31 12 00 00       	push   $0x1231
f012eb6f:	68 9a ad 13 f0       	push   $0xf013ad9a
f012eb74:	e8 82 16 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012eb79:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eb7f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012eb85:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eb8c:	eb 25                	jmp    f012ebb3 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012eb8e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012eb94:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb97:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012eb9e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eba4:	01 c8                	add    %ecx,%eax
f012eba6:	8b 00                	mov    (%eax),%eax
f012eba8:	01 d0                	add    %edx,%eax
f012ebaa:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ebb0:	ff 45 dc             	incl   -0x24(%ebp)
f012ebb3:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ebb9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ebbc:	7d d0                	jge    f012eb8e <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ebbe:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ebc4:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ebca:	42                   	inc    %edx
f012ebcb:	c1 e2 02             	shl    $0x2,%edx
f012ebce:	39 d0                	cmp    %edx,%eax
f012ebd0:	74 17                	je     f012ebe9 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ebd2:	83 ec 04             	sub    $0x4,%esp
f012ebd5:	68 ec c2 13 f0       	push   $0xf013c2ec
f012ebda:	68 3b 12 00 00       	push   $0x123b
f012ebdf:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ebe4:	e8 12 16 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ebe9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ebef:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ebf5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ebfc:	eb 24                	jmp    f012ec22 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012ebfe:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ec04:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ec07:	01 c0                	add    %eax,%eax
f012ec09:	89 c1                	mov    %eax,%ecx
f012ec0b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec11:	01 c8                	add    %ecx,%eax
f012ec13:	66 8b 00             	mov    (%eax),%ax
f012ec16:	98                   	cwtl   
f012ec17:	01 d0                	add    %edx,%eax
f012ec19:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ec1f:	ff 45 dc             	incl   -0x24(%ebp)
f012ec22:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec28:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ec2b:	7d d1                	jge    f012ebfe <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ec2d:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ec33:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec39:	8d 48 01             	lea    0x1(%eax),%ecx
f012ec3c:	89 c8                	mov    %ecx,%eax
f012ec3e:	c1 e0 02             	shl    $0x2,%eax
f012ec41:	01 c8                	add    %ecx,%eax
f012ec43:	39 c2                	cmp    %eax,%edx
f012ec45:	74 17                	je     f012ec5e <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012ec47:	83 ec 04             	sub    $0x4,%esp
f012ec4a:	68 ec c2 13 f0       	push   $0xf013c2ec
f012ec4f:	68 45 12 00 00       	push   $0x1245
f012ec54:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ec59:	e8 9d 15 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ec5e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec64:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ec6a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ec71:	eb 70                	jmp    f012ece3 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012ec73:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012ec79:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ec7c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ec83:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec89:	01 c8                	add    %ecx,%eax
f012ec8b:	8a 00                	mov    (%eax),%al
f012ec8d:	0f be c0             	movsbl %al,%eax
f012ec90:	01 d0                	add    %edx,%eax
f012ec92:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012ec98:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012ec9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eca1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eca8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecae:	01 c8                	add    %ecx,%eax
f012ecb0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ecb4:	98                   	cwtl   
f012ecb5:	01 d0                	add    %edx,%eax
f012ecb7:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012ecbd:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012ecc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ecc6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eccd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecd3:	01 c8                	add    %ecx,%eax
f012ecd5:	8b 40 04             	mov    0x4(%eax),%eax
f012ecd8:	01 d0                	add    %edx,%eax
f012ecda:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ece0:	ff 45 dc             	incl   -0x24(%ebp)
f012ece3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ece9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ecec:	7d 85                	jge    f012ec73 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ecee:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012ecf4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ecfa:	8d 50 01             	lea    0x1(%eax),%edx
f012ecfd:	89 d0                	mov    %edx,%eax
f012ecff:	01 c0                	add    %eax,%eax
f012ed01:	01 d0                	add    %edx,%eax
f012ed03:	01 c0                	add    %eax,%eax
f012ed05:	01 d0                	add    %edx,%eax
f012ed07:	39 c1                	cmp    %eax,%ecx
f012ed09:	75 3a                	jne    f012ed45 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012ed0b:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012ed11:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ed17:	8d 50 01             	lea    0x1(%eax),%edx
f012ed1a:	89 d0                	mov    %edx,%eax
f012ed1c:	01 c0                	add    %eax,%eax
f012ed1e:	01 d0                	add    %edx,%eax
f012ed20:	01 c0                	add    %eax,%eax
f012ed22:	01 d0                	add    %edx,%eax
f012ed24:	39 c1                	cmp    %eax,%ecx
f012ed26:	75 1d                	jne    f012ed45 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ed28:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012ed2e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ed34:	8d 50 01             	lea    0x1(%eax),%edx
f012ed37:	89 d0                	mov    %edx,%eax
f012ed39:	01 c0                	add    %eax,%eax
f012ed3b:	01 d0                	add    %edx,%eax
f012ed3d:	01 c0                	add    %eax,%eax
f012ed3f:	01 d0                	add    %edx,%eax
f012ed41:	39 c1                	cmp    %eax,%ecx
f012ed43:	74 17                	je     f012ed5c <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ed45:	83 ec 04             	sub    $0x4,%esp
f012ed48:	68 ec c2 13 f0       	push   $0xf013c2ec
f012ed4d:	68 53 12 00 00       	push   $0x1253
f012ed52:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ed57:	e8 9f 14 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ed5c:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ed63:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ed66:	e8 e6 dc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ed6b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ed6e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed74:	83 ec 08             	sub    $0x8,%esp
f012ed77:	68 00 3c 00 00       	push   $0x3c00
f012ed7c:	50                   	push   %eax
f012ed7d:	e8 51 8d fd ff       	call   f0107ad3 <krealloc>
f012ed82:	83 c4 10             	add    $0x10,%esp
f012ed85:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ed8b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ed91:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ed96:	77 17                	ja     f012edaf <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed98:	83 ec 04             	sub    $0x4,%esp
f012ed9b:	68 40 c0 13 f0       	push   $0xf013c040
f012eda0:	68 5f 12 00 00       	push   $0x125f
f012eda5:	68 9a ad 13 f0       	push   $0xf013ad9a
f012edaa:	e8 4c 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012edaf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012edb5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012edbb:	74 17                	je     f012edd4 <test_krealloc_BF+0x1593>
			panic(
f012edbd:	83 ec 04             	sub    $0x4,%esp
f012edc0:	68 24 c3 13 f0       	push   $0xf013c324
f012edc5:	68 62 12 00 00       	push   $0x1262
f012edca:	68 9a ad 13 f0       	push   $0xf013ad9a
f012edcf:	e8 27 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012edd4:	e8 78 dc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012edd9:	89 c2                	mov    %eax,%edx
f012eddb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012edde:	39 c2                	cmp    %eax,%edx
f012ede0:	74 17                	je     f012edf9 <test_krealloc_BF+0x15b8>
			panic(
f012ede2:	83 ec 04             	sub    $0x4,%esp
f012ede5:	68 90 c3 13 f0       	push   $0xf013c390
f012edea:	68 65 12 00 00       	push   $0x1265
f012edef:	68 9a ad 13 f0       	push   $0xf013ad9a
f012edf4:	e8 02 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012edf9:	e8 53 dc fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012edfe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ee01:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ee07:	83 ec 08             	sub    $0x8,%esp
f012ee0a:	68 00 fc 0f 00       	push   $0xffc00
f012ee0f:	50                   	push   %eax
f012ee10:	e8 be 8c fd ff       	call   f0107ad3 <krealloc>
f012ee15:	83 c4 10             	add    $0x10,%esp
f012ee18:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee1e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ee24:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee29:	77 17                	ja     f012ee42 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee2b:	83 ec 04             	sub    $0x4,%esp
f012ee2e:	68 40 c0 13 f0       	push   $0xf013c040
f012ee33:	68 6b 12 00 00       	push   $0x126b
f012ee38:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ee3d:	e8 b9 13 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ee42:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ee48:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ee4e:	74 17                	je     f012ee67 <test_krealloc_BF+0x1626>
			panic(
f012ee50:	83 ec 04             	sub    $0x4,%esp
f012ee53:	68 24 c3 13 f0       	push   $0xf013c324
f012ee58:	68 6e 12 00 00       	push   $0x126e
f012ee5d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ee62:	e8 94 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ee67:	e8 e5 db fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ee6c:	89 c2                	mov    %eax,%edx
f012ee6e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee71:	39 c2                	cmp    %eax,%edx
f012ee73:	74 17                	je     f012ee8c <test_krealloc_BF+0x164b>
			panic(
f012ee75:	83 ec 04             	sub    $0x4,%esp
f012ee78:	68 90 c3 13 f0       	push   $0xf013c390
f012ee7d:	68 71 12 00 00       	push   $0x1271
f012ee82:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ee87:	e8 6f 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ee8c:	e8 c0 db fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ee91:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012ee94:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee9a:	83 ec 08             	sub    $0x8,%esp
f012ee9d:	68 00 fc 0f 00       	push   $0xffc00
f012eea2:	50                   	push   %eax
f012eea3:	e8 2b 8c fd ff       	call   f0107ad3 <krealloc>
f012eea8:	83 c4 10             	add    $0x10,%esp
f012eeab:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eeb1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012eeb7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eebc:	77 17                	ja     f012eed5 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eebe:	83 ec 04             	sub    $0x4,%esp
f012eec1:	68 40 c0 13 f0       	push   $0xf013c040
f012eec6:	68 77 12 00 00       	push   $0x1277
f012eecb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012eed0:	e8 26 13 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012eed5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eedb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012eee1:	74 17                	je     f012eefa <test_krealloc_BF+0x16b9>
			panic(
f012eee3:	83 ec 04             	sub    $0x4,%esp
f012eee6:	68 24 c3 13 f0       	push   $0xf013c324
f012eeeb:	68 7a 12 00 00       	push   $0x127a
f012eef0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012eef5:	e8 01 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012eefa:	e8 52 db fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012eeff:	89 c2                	mov    %eax,%edx
f012ef01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef04:	39 c2                	cmp    %eax,%edx
f012ef06:	74 17                	je     f012ef1f <test_krealloc_BF+0x16de>
			panic(
f012ef08:	83 ec 04             	sub    $0x4,%esp
f012ef0b:	68 90 c3 13 f0       	push   $0xf013c390
f012ef10:	68 7d 12 00 00       	push   $0x127d
f012ef15:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ef1a:	e8 dc 12 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ef1f:	e8 2d db fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ef24:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ef27:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ef2d:	83 ec 08             	sub    $0x8,%esp
f012ef30:	68 00 fc 0f 00       	push   $0xffc00
f012ef35:	50                   	push   %eax
f012ef36:	e8 98 8b fd ff       	call   f0107ad3 <krealloc>
f012ef3b:	83 c4 10             	add    $0x10,%esp
f012ef3e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef44:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ef4a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef4f:	77 17                	ja     f012ef68 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef51:	83 ec 04             	sub    $0x4,%esp
f012ef54:	68 40 c0 13 f0       	push   $0xf013c040
f012ef59:	68 85 12 00 00       	push   $0x1285
f012ef5e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ef63:	e8 93 12 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012ef68:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ef6e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ef74:	74 17                	je     f012ef8d <test_krealloc_BF+0x174c>
			panic(
f012ef76:	83 ec 04             	sub    $0x4,%esp
f012ef79:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012ef7e:	68 88 12 00 00       	push   $0x1288
f012ef83:	68 9a ad 13 f0       	push   $0xf013ad9a
f012ef88:	e8 6e 12 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ef8d:	e8 bf da fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012ef92:	89 c2                	mov    %eax,%edx
f012ef94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef97:	39 c2                	cmp    %eax,%edx
f012ef99:	74 17                	je     f012efb2 <test_krealloc_BF+0x1771>
			panic(
f012ef9b:	83 ec 04             	sub    $0x4,%esp
f012ef9e:	68 90 c3 13 f0       	push   $0xf013c390
f012efa3:	68 8b 12 00 00       	push   $0x128b
f012efa8:	68 9a ad 13 f0       	push   $0xf013ad9a
f012efad:	e8 49 12 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012efb2:	83 ec 0c             	sub    $0xc,%esp
f012efb5:	68 b3 b5 13 f0       	push   $0xf013b5b3
f012efba:	e8 c3 1c fd ff       	call   f0100c82 <cprintf>
f012efbf:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012efc2:	e8 8a da fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012efc7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012efca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012efd0:	83 ec 08             	sub    $0x8,%esp
f012efd3:	68 00 18 10 00       	push   $0x101800
f012efd8:	50                   	push   %eax
f012efd9:	e8 f5 8a fd ff       	call   f0107ad3 <krealloc>
f012efde:	83 c4 10             	add    $0x10,%esp
f012efe1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012efe4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012efe7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012efec:	77 17                	ja     f012f005 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012efee:	83 ec 04             	sub    $0x4,%esp
f012eff1:	68 40 c0 13 f0       	push   $0xf013c040
f012eff6:	68 93 12 00 00       	push   $0x1293
f012effb:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f000:	e8 f6 11 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012f005:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f00b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f00e:	74 17                	je     f012f027 <test_krealloc_BF+0x17e6>
			panic(
f012f010:	83 ec 04             	sub    $0x4,%esp
f012f013:	68 34 c4 13 f0       	push   $0xf013c434
f012f018:	68 96 12 00 00       	push   $0x1296
f012f01d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f022:	e8 d4 11 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f027:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f02a:	e8 22 da fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f02f:	29 c3                	sub    %eax,%ebx
f012f031:	89 d8                	mov    %ebx,%eax
f012f033:	83 f8 02             	cmp    $0x2,%eax
f012f036:	74 17                	je     f012f04f <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f038:	83 ec 04             	sub    $0x4,%esp
f012f03b:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012f040:	68 98 12 00 00       	push   $0x1298
f012f045:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f04a:	e8 ac 11 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f04f:	e8 fd d9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f054:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f057:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f05d:	83 ec 08             	sub    $0x8,%esp
f012f060:	68 00 fc 3f 00       	push   $0x3ffc00
f012f065:	50                   	push   %eax
f012f066:	e8 68 8a fd ff       	call   f0107ad3 <krealloc>
f012f06b:	83 c4 10             	add    $0x10,%esp
f012f06e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f071:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f074:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f079:	77 17                	ja     f012f092 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f07b:	83 ec 04             	sub    $0x4,%esp
f012f07e:	68 40 c0 13 f0       	push   $0xf013c040
f012f083:	68 9e 12 00 00       	push   $0x129e
f012f088:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f08d:	e8 69 11 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012f092:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f098:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f09b:	74 17                	je     f012f0b4 <test_krealloc_BF+0x1873>
			panic(
f012f09d:	83 ec 04             	sub    $0x4,%esp
f012f0a0:	68 34 c4 13 f0       	push   $0xf013c434
f012f0a5:	68 a1 12 00 00       	push   $0x12a1
f012f0aa:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f0af:	e8 47 11 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f0b4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f0b7:	e8 95 d9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f0bc:	29 c3                	sub    %eax,%ebx
f012f0be:	89 d8                	mov    %ebx,%eax
f012f0c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f0c5:	74 17                	je     f012f0de <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f0c7:	83 ec 04             	sub    $0x4,%esp
f012f0ca:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012f0cf:	68 a4 12 00 00       	push   $0x12a4
f012f0d4:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f0d9:	e8 1d 11 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012f0de:	83 ec 0c             	sub    $0xc,%esp
f012f0e1:	68 f8 b5 13 f0       	push   $0xf013b5f8
f012f0e6:	e8 97 1b fd ff       	call   f0100c82 <cprintf>
f012f0eb:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f0ee:	e8 5e d9 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f0f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f0f6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f0fc:	83 ec 08             	sub    $0x8,%esp
f012f0ff:	68 00 fc 9f 00       	push   $0x9ffc00
f012f104:	50                   	push   %eax
f012f105:	e8 c9 89 fd ff       	call   f0107ad3 <krealloc>
f012f10a:	83 c4 10             	add    $0x10,%esp
f012f10d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f110:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f113:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f118:	77 17                	ja     f012f131 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f11a:	83 ec 04             	sub    $0x4,%esp
f012f11d:	68 40 c0 13 f0       	push   $0xf013c040
f012f122:	68 af 12 00 00       	push   $0x12af
f012f127:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f12c:	e8 ca 10 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f131:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f138:	10 00 00 
f012f13b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f146:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f14c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f152:	ba 00 00 00 00       	mov    $0x0,%edx
f012f157:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f15d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f163:	29 d0                	sub    %edx,%eax
f012f165:	89 c1                	mov    %eax,%ecx
f012f167:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f16e:	10 00 00 
f012f171:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f176:	0f b6 d0             	movzbl %al,%edx
f012f179:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f17f:	01 d0                	add    %edx,%eax
f012f181:	48                   	dec    %eax
f012f182:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f188:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f18e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f193:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f199:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f19f:	29 d0                	sub    %edx,%eax
f012f1a1:	01 c1                	add    %eax,%ecx
f012f1a3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f1aa:	10 00 00 
f012f1ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f1b2:	0f b6 c0             	movzbl %al,%eax
f012f1b5:	c1 e0 04             	shl    $0x4,%eax
f012f1b8:	89 c2                	mov    %eax,%edx
f012f1ba:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f1c0:	01 d0                	add    %edx,%eax
f012f1c2:	48                   	dec    %eax
f012f1c3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f1c9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f1cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012f1d4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f1da:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f1e0:	29 d0                	sub    %edx,%eax
f012f1e2:	01 c8                	add    %ecx,%eax
f012f1e4:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f1ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1ed:	39 c2                	cmp    %eax,%edx
f012f1ef:	74 18                	je     f012f209 <test_krealloc_BF+0x19c8>
			panic(
f012f1f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1f4:	50                   	push   %eax
f012f1f5:	68 e4 c4 13 f0       	push   $0xf013c4e4
f012f1fa:	68 b3 12 00 00       	push   $0x12b3
f012f1ff:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f204:	e8 f2 0f fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f209:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f20f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f212:	75 17                	jne    f012f22b <test_krealloc_BF+0x19ea>
			panic(
f012f214:	83 ec 04             	sub    $0x4,%esp
f012f217:	68 28 c5 13 f0       	push   $0xf013c528
f012f21c:	68 b6 12 00 00       	push   $0x12b6
f012f221:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f226:	e8 d0 0f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f22b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f22e:	e8 1e d8 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f233:	29 c3                	sub    %eax,%ebx
f012f235:	89 d8                	mov    %ebx,%eax
f012f237:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f23c:	74 17                	je     f012f255 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f23e:	83 ec 04             	sub    $0x4,%esp
f012f241:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012f246:	68 b9 12 00 00       	push   $0x12b9
f012f24b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f250:	e8 a6 0f fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012f255:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f258:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f25e:	e8 ee d7 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f263:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f266:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f26c:	83 ec 08             	sub    $0x8,%esp
f012f26f:	68 00 fc 3f 00       	push   $0x3ffc00
f012f274:	50                   	push   %eax
f012f275:	e8 59 88 fd ff       	call   f0107ad3 <krealloc>
f012f27a:	83 c4 10             	add    $0x10,%esp
f012f27d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f280:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f283:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f288:	77 17                	ja     f012f2a1 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f28a:	83 ec 04             	sub    $0x4,%esp
f012f28d:	68 40 c0 13 f0       	push   $0xf013c040
f012f292:	68 c2 12 00 00       	push   $0x12c2
f012f297:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f29c:	e8 5a 0f fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f2a1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f2a7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f2aa:	75 17                	jne    f012f2c3 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f2ac:	83 ec 04             	sub    $0x4,%esp
f012f2af:	68 28 c5 13 f0       	push   $0xf013c528
f012f2b4:	68 c4 12 00 00       	push   $0x12c4
f012f2b9:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f2be:	e8 38 0f fd ff       	call   f01001fb <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f2c3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f2ca:	10 00 00 
f012f2cd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f2d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f2d8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f2de:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f2e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012f2e9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f2ef:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f2f5:	29 d0                	sub    %edx,%eax
f012f2f7:	89 c1                	mov    %eax,%ecx
f012f2f9:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f300:	10 00 00 
f012f303:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f308:	0f b6 d0             	movzbl %al,%edx
f012f30b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f311:	01 d0                	add    %edx,%eax
f012f313:	48                   	dec    %eax
f012f314:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f31a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f320:	ba 00 00 00 00       	mov    $0x0,%edx
f012f325:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f32b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f331:	29 d0                	sub    %edx,%eax
f012f333:	01 c1                	add    %eax,%ecx
f012f335:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f33c:	10 00 00 
f012f33f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f344:	0f b6 c0             	movzbl %al,%eax
f012f347:	c1 e0 04             	shl    $0x4,%eax
f012f34a:	89 c2                	mov    %eax,%edx
f012f34c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f352:	01 d0                	add    %edx,%eax
f012f354:	48                   	dec    %eax
f012f355:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f35b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f361:	ba 00 00 00 00       	mov    $0x0,%edx
f012f366:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f36c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f372:	29 d0                	sub    %edx,%eax
f012f374:	01 c8                	add    %ecx,%eax
f012f376:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f37c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f37f:	39 c2                	cmp    %eax,%edx
f012f381:	74 17                	je     f012f39a <test_krealloc_BF+0x1b59>
f012f383:	83 ec 04             	sub    $0x4,%esp
f012f386:	68 7c c0 13 f0       	push   $0xf013c07c
f012f38b:	68 c5 12 00 00       	push   $0x12c5
f012f390:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f395:	e8 61 0e fd ff       	call   f01001fb <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f39a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f39d:	e8 af d6 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f3a2:	29 c3                	sub    %eax,%ebx
f012f3a4:	89 d8                	mov    %ebx,%eax
f012f3a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f3ab:	74 17                	je     f012f3c4 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f3ad:	83 ec 04             	sub    $0x4,%esp
f012f3b0:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012f3b5:	68 c9 12 00 00       	push   $0x12c9
f012f3ba:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f3bf:	e8 37 0e fd ff       	call   f01001fb <_panic>
		ptr_allocations[6] = newAddress;
f012f3c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3c7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f3cd:	e8 7f d6 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f3d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f3d5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f3db:	83 ec 08             	sub    $0x8,%esp
f012f3de:	68 00 fc 3f 01       	push   $0x13ffc00
f012f3e3:	50                   	push   %eax
f012f3e4:	e8 ea 86 fd ff       	call   f0107ad3 <krealloc>
f012f3e9:	83 c4 10             	add    $0x10,%esp
f012f3ec:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f3ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3f2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f3f7:	77 17                	ja     f012f410 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f3f9:	83 ec 04             	sub    $0x4,%esp
f012f3fc:	68 40 c0 13 f0       	push   $0xf013c040
f012f401:	68 cf 12 00 00       	push   $0x12cf
f012f406:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f40b:	e8 eb 0d fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f410:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f416:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f419:	75 17                	jne    f012f432 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f41b:	83 ec 04             	sub    $0x4,%esp
f012f41e:	68 28 c5 13 f0       	push   $0xf013c528
f012f423:	68 d1 12 00 00       	push   $0x12d1
f012f428:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f42d:	e8 c9 0d fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f432:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f439:	10 00 00 
f012f43c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f442:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f447:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f44d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f453:	ba 00 00 00 00       	mov    $0x0,%edx
f012f458:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f45e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f464:	29 d0                	sub    %edx,%eax
f012f466:	89 c1                	mov    %eax,%ecx
f012f468:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f46f:	10 00 00 
f012f472:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f477:	0f b6 d0             	movzbl %al,%edx
f012f47a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f480:	01 d0                	add    %edx,%eax
f012f482:	48                   	dec    %eax
f012f483:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f489:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f48f:	ba 00 00 00 00       	mov    $0x0,%edx
f012f494:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f49a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f4a0:	29 d0                	sub    %edx,%eax
f012f4a2:	01 c1                	add    %eax,%ecx
f012f4a4:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f4ab:	10 00 00 
f012f4ae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f4b3:	0f b6 c0             	movzbl %al,%eax
f012f4b6:	c1 e0 04             	shl    $0x4,%eax
f012f4b9:	89 c2                	mov    %eax,%edx
f012f4bb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f4c1:	01 d0                	add    %edx,%eax
f012f4c3:	48                   	dec    %eax
f012f4c4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f4ca:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f012f4d5:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f4db:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f4e1:	29 d0                	sub    %edx,%eax
f012f4e3:	01 c8                	add    %ecx,%eax
f012f4e5:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f4eb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f4ee:	39 c2                	cmp    %eax,%edx
f012f4f0:	74 17                	je     f012f509 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f4f2:	83 ec 04             	sub    $0x4,%esp
f012f4f5:	68 48 c6 13 f0       	push   $0xf013c648
f012f4fa:	68 d3 12 00 00       	push   $0x12d3
f012f4ff:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f504:	e8 f2 0c fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f509:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f50c:	e8 40 d5 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f511:	29 c3                	sub    %eax,%ebx
f012f513:	89 d8                	mov    %ebx,%eax
f012f515:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f51a:	74 17                	je     f012f533 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f51c:	83 ec 04             	sub    $0x4,%esp
f012f51f:	68 b0 c4 13 f0       	push   $0xf013c4b0
f012f524:	68 d6 12 00 00       	push   $0x12d6
f012f529:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f52e:	e8 c8 0c fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012f533:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f536:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f53c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f542:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f548:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f54f:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f552:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f559:	eb 21                	jmp    f012f57c <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f55b:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f561:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f564:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f56a:	01 c8                	add    %ecx,%eax
f012f56c:	8a 00                	mov    (%eax),%al
f012f56e:	0f be c0             	movsbl %al,%eax
f012f571:	01 d0                	add    %edx,%eax
f012f573:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f579:	ff 45 d8             	incl   -0x28(%ebp)
f012f57c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f582:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f585:	7d d4                	jge    f012f55b <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f587:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f58d:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f593:	42                   	inc    %edx
f012f594:	01 d2                	add    %edx,%edx
f012f596:	39 d0                	cmp    %edx,%eax
f012f598:	74 17                	je     f012f5b1 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f59a:	83 ec 04             	sub    $0x4,%esp
f012f59d:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012f5a2:	68 e4 12 00 00       	push   $0x12e4
f012f5a7:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f5ac:	e8 4a 0c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f5b1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f5b7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f5bd:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f5c4:	00 00 00 
		sums[1] = 0;
f012f5c7:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f5ce:	00 00 00 
		sums[2] = 0;
f012f5d1:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f5d8:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f5db:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f5e2:	eb 70                	jmp    f012f654 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f5e4:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f5ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f5ed:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f5f4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f5fa:	01 c8                	add    %ecx,%eax
f012f5fc:	8a 00                	mov    (%eax),%al
f012f5fe:	0f be c0             	movsbl %al,%eax
f012f601:	01 d0                	add    %edx,%eax
f012f603:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f609:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f60f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f612:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f619:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f61f:	01 c8                	add    %ecx,%eax
f012f621:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f625:	98                   	cwtl   
f012f626:	01 d0                	add    %edx,%eax
f012f628:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f62e:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f634:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f637:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f63e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f644:	01 c8                	add    %ecx,%eax
f012f646:	8b 40 04             	mov    0x4(%eax),%eax
f012f649:	01 d0                	add    %edx,%eax
f012f64b:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f651:	ff 45 d8             	incl   -0x28(%ebp)
f012f654:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f65a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f65d:	7d 85                	jge    f012f5e4 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f65f:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f665:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f66b:	8d 50 01             	lea    0x1(%eax),%edx
f012f66e:	89 d0                	mov    %edx,%eax
f012f670:	01 c0                	add    %eax,%eax
f012f672:	01 d0                	add    %edx,%eax
f012f674:	01 c0                	add    %eax,%eax
f012f676:	01 d0                	add    %edx,%eax
f012f678:	39 c1                	cmp    %eax,%ecx
f012f67a:	75 3a                	jne    f012f6b6 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f67c:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f682:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f688:	8d 50 01             	lea    0x1(%eax),%edx
f012f68b:	89 d0                	mov    %edx,%eax
f012f68d:	01 c0                	add    %eax,%eax
f012f68f:	01 d0                	add    %edx,%eax
f012f691:	01 c0                	add    %eax,%eax
f012f693:	01 d0                	add    %edx,%eax
f012f695:	39 c1                	cmp    %eax,%ecx
f012f697:	75 1d                	jne    f012f6b6 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f699:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f69f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f6a5:	8d 50 01             	lea    0x1(%eax),%edx
f012f6a8:	89 d0                	mov    %edx,%eax
f012f6aa:	01 c0                	add    %eax,%eax
f012f6ac:	01 d0                	add    %edx,%eax
f012f6ae:	01 c0                	add    %eax,%eax
f012f6b0:	01 d0                	add    %edx,%eax
f012f6b2:	39 c1                	cmp    %eax,%ecx
f012f6b4:	74 17                	je     f012f6cd <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f6b6:	83 ec 04             	sub    $0x4,%esp
f012f6b9:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012f6be:	68 f6 12 00 00       	push   $0x12f6
f012f6c3:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f6c8:	e8 2e 0b fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f6cd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f6d3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f6d9:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f6e0:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f6e3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f6ea:	eb 24                	jmp    f012f710 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f6ec:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f6f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f6f5:	01 c0                	add    %eax,%eax
f012f6f7:	89 c1                	mov    %eax,%ecx
f012f6f9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f6ff:	01 c8                	add    %ecx,%eax
f012f701:	66 8b 00             	mov    (%eax),%ax
f012f704:	98                   	cwtl   
f012f705:	01 d0                	add    %edx,%eax
f012f707:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f70d:	ff 45 d8             	incl   -0x28(%ebp)
f012f710:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f719:	7d d1                	jge    f012f6ec <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f71b:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f721:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f727:	8d 48 01             	lea    0x1(%eax),%ecx
f012f72a:	89 c8                	mov    %ecx,%eax
f012f72c:	c1 e0 02             	shl    $0x2,%eax
f012f72f:	01 c8                	add    %ecx,%eax
f012f731:	39 c2                	cmp    %eax,%edx
f012f733:	74 17                	je     f012f74c <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f735:	83 ec 04             	sub    $0x4,%esp
f012f738:	68 e0 c5 13 f0       	push   $0xf013c5e0
f012f73d:	68 00 13 00 00       	push   $0x1300
f012f742:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f747:	e8 af 0a fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f74c:	e8 00 d3 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f751:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f754:	e8 e3 45 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f759:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f75f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f765:	83 ec 08             	sub    $0x8,%esp
f012f768:	6a 00                	push   $0x0
f012f76a:	50                   	push   %eax
f012f76b:	e8 63 83 fd ff       	call   f0107ad3 <krealloc>
f012f770:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f773:	e8 c4 45 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f778:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f77e:	74 17                	je     f012f797 <test_krealloc_BF+0x1f56>
			panic(
f012f780:	83 ec 04             	sub    $0x4,%esp
f012f783:	68 b4 ad 13 f0       	push   $0xf013adb4
f012f788:	68 08 13 00 00       	push   $0x1308
f012f78d:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f792:	e8 64 0a fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f797:	e8 b5 d2 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f79c:	89 c2                	mov    %eax,%edx
f012f79e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f7a1:	29 c2                	sub    %eax,%edx
f012f7a3:	89 d0                	mov    %edx,%eax
f012f7a5:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f7aa:	74 17                	je     f012f7c3 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f7ac:	83 ec 04             	sub    $0x4,%esp
f012f7af:	68 70 c2 13 f0       	push   $0xf013c270
f012f7b4:	68 0a 13 00 00       	push   $0x130a
f012f7b9:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f7be:	e8 38 0a fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f7c3:	e8 89 d2 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f7c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f7cb:	e8 6c 45 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f7d0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f7d6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f7dc:	83 ec 0c             	sub    $0xc,%esp
f012f7df:	50                   	push   %eax
f012f7e0:	e8 f9 80 fd ff       	call   f01078de <kfree>
f012f7e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f7e8:	e8 4f 45 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f7ed:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f7f3:	74 17                	je     f012f80c <test_krealloc_BF+0x1fcb>
			panic(
f012f7f5:	83 ec 04             	sub    $0x4,%esp
f012f7f8:	68 b4 ad 13 f0       	push   $0xf013adb4
f012f7fd:	68 12 13 00 00       	push   $0x1312
f012f802:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f807:	e8 ef 09 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f80c:	e8 40 d2 fd ff       	call   f010ca51 <sys_calculate_free_frames>
f012f811:	89 c2                	mov    %eax,%edx
f012f813:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f816:	29 c2                	sub    %eax,%edx
f012f818:	89 d0                	mov    %edx,%eax
f012f81a:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f81f:	74 17                	je     f012f838 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f821:	83 ec 04             	sub    $0x4,%esp
f012f824:	68 70 c2 13 f0       	push   $0xf013c270
f012f829:	68 14 13 00 00       	push   $0x1314
f012f82e:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f833:	e8 c3 09 fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f838:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f83f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f846:	eb 48                	jmp    f012f890 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f848:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f84b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f850:	83 ec 04             	sub    $0x4,%esp
f012f853:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f859:	51                   	push   %ecx
f012f85a:	52                   	push   %edx
f012f85b:	50                   	push   %eax
f012f85c:	e8 79 71 fd ff       	call   f01069da <get_page_table>
f012f861:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f864:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f86a:	85 c0                	test   %eax,%eax
f012f86c:	75 17                	jne    f012f885 <test_krealloc_BF+0x2044>
					panic(
f012f86e:	83 ec 04             	sub    $0x4,%esp
f012f871:	68 9c b6 13 f0       	push   $0xf013b69c
f012f876:	68 21 13 00 00       	push   $0x1321
f012f87b:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f880:	e8 76 09 fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f885:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f88c:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f890:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f894:	78 b2                	js     f012f848 <test_krealloc_BF+0x2007>
f012f896:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f89a:	7f 09                	jg     f012f8a5 <test_krealloc_BF+0x2064>
f012f89c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f8a3:	76 a3                	jbe    f012f848 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f8a5:	83 ec 0c             	sub    $0xc,%esp
f012f8a8:	68 7e af 13 f0       	push   $0xf013af7e
f012f8ad:	e8 d0 13 fd ff       	call   f0100c82 <cprintf>
f012f8b2:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f8b5:	83 ec 0c             	sub    $0xc,%esp
f012f8b8:	68 80 c6 13 f0       	push   $0xf013c680
f012f8bd:	e8 c0 13 fd ff       	call   f0100c82 <cprintf>
f012f8c2:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f8c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f8ca:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f8cd:	5b                   	pop    %ebx
f012f8ce:	5f                   	pop    %edi
f012f8cf:	5d                   	pop    %ebp
f012f8d0:	c3                   	ret    

f012f8d1 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f8d1:	55                   	push   %ebp
f012f8d2:	89 e5                	mov    %esp,%ebp
f012f8d4:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012f8d7:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f012f8dc:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012f8e1:	74 17                	je     f012f8fa <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012f8e3:	83 ec 04             	sub    $0x4,%esp
f012f8e6:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012f8eb:	68 39 13 00 00       	push   $0x1339
f012f8f0:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f8f5:	e8 01 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012f8fa:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f012f8ff:	8b 15 04 7b 65 f0    	mov    0xf0657b04,%edx
f012f905:	4a                   	dec    %edx
f012f906:	39 d0                	cmp    %edx,%eax
f012f908:	74 17                	je     f012f921 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012f90a:	83 ec 04             	sub    $0x4,%esp
f012f90d:	68 14 c7 13 f0       	push   $0xf013c714
f012f912:	68 3f 13 00 00       	push   $0x133f
f012f917:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f91c:	e8 da 08 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012f921:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f012f926:	85 c0                	test   %eax,%eax
f012f928:	74 17                	je     f012f941 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012f92a:	83 ec 04             	sub    $0x4,%esp
f012f92d:	68 50 c7 13 f0       	push   $0xf013c750
f012f932:	68 45 13 00 00       	push   $0x1345
f012f937:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f93c:	e8 ba 08 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012f941:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f012f946:	83 f8 01             	cmp    $0x1,%eax
f012f949:	74 17                	je     f012f962 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012f94b:	83 ec 04             	sub    $0x4,%esp
f012f94e:	68 88 c7 13 f0       	push   $0xf013c788
f012f953:	68 4b 13 00 00       	push   $0x134b
f012f958:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f95d:	e8 99 08 fd ff       	call   f01001fb <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012f962:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f012f967:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012f96a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f96e:	74 66                	je     f012f9d6 <test_initialize_dyn_block_system+0x105>
f012f970:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f973:	8b 48 0c             	mov    0xc(%eax),%ecx
f012f976:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012f97d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f980:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f985:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012f988:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f98b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f990:	f7 75 ec             	divl   -0x14(%ebp)
f012f993:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f996:	29 d0                	sub    %edx,%eax
f012f998:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012f99d:	29 c2                	sub    %eax,%edx
f012f99f:	89 d0                	mov    %edx,%eax
f012f9a1:	39 c1                	cmp    %eax,%ecx
f012f9a3:	75 31                	jne    f012f9d6 <test_initialize_dyn_block_system+0x105>
f012f9a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9a8:	8b 48 08             	mov    0x8(%eax),%ecx
f012f9ab:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012f9b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f9b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f9ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012f9bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f9c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9c5:	f7 75 e4             	divl   -0x1c(%ebp)
f012f9c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f9cb:	29 d0                	sub    %edx,%eax
f012f9cd:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f9d2:	39 c1                	cmp    %eax,%ecx
f012f9d4:	74 17                	je     f012f9ed <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012f9d6:	83 ec 04             	sub    $0x4,%esp
f012f9d9:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012f9de:	68 52 13 00 00       	push   $0x1352
f012f9e3:	68 9a ad 13 f0       	push   $0xf013ad9a
f012f9e8:	e8 0e 08 fd ff       	call   f01001fb <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012f9ed:	8b 45 14             	mov    0x14(%ebp),%eax
f012f9f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012f9f3:	74 17                	je     f012fa0c <test_initialize_dyn_block_system+0x13b>
f012f9f5:	83 ec 04             	sub    $0x4,%esp
f012f9f8:	68 b4 ad 13 f0       	push   $0xf013adb4
f012f9fd:	68 56 13 00 00       	push   $0x1356
f012fa02:	68 9a ad 13 f0       	push   $0xf013ad9a
f012fa07:	e8 ef 07 fd ff       	call   f01001fb <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012fa0c:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa0f:	2b 45 10             	sub    0x10(%ebp),%eax
f012fa12:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012fa17:	74 1b                	je     f012fa34 <test_initialize_dyn_block_system+0x163>
f012fa19:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa1c:	2b 45 10             	sub    0x10(%ebp),%eax
f012fa1f:	50                   	push   %eax
f012fa20:	68 fc c7 13 f0       	push   $0xf013c7fc
f012fa25:	68 57 13 00 00       	push   $0x1357
f012fa2a:	68 9a ad 13 f0       	push   $0xf013ad9a
f012fa2f:	e8 c7 07 fd ff       	call   f01001fb <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012fa34:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012fa3b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012fa40:	83 ec 04             	sub    $0x4,%esp
f012fa43:	6a 00                	push   $0x0
f012fa45:	ff 75 f4             	pushl  -0xc(%ebp)
f012fa48:	50                   	push   %eax
f012fa49:	e8 e9 5f fe ff       	call   f0115a37 <CB>
f012fa4e:	83 c4 10             	add    $0x10,%esp
f012fa51:	83 f8 01             	cmp    $0x1,%eax
f012fa54:	75 35                	jne    f012fa8b <test_initialize_dyn_block_system+0x1ba>
f012fa56:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012fa5b:	83 ec 04             	sub    $0x4,%esp
f012fa5e:	6a 01                	push   $0x1
f012fa60:	ff 75 f4             	pushl  -0xc(%ebp)
f012fa63:	50                   	push   %eax
f012fa64:	e8 ce 5f fe ff       	call   f0115a37 <CB>
f012fa69:	83 c4 10             	add    $0x10,%esp
f012fa6c:	83 f8 01             	cmp    $0x1,%eax
f012fa6f:	75 1a                	jne    f012fa8b <test_initialize_dyn_block_system+0x1ba>
f012fa71:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012fa76:	83 ec 04             	sub    $0x4,%esp
f012fa79:	6a 02                	push   $0x2
f012fa7b:	ff 75 f4             	pushl  -0xc(%ebp)
f012fa7e:	50                   	push   %eax
f012fa7f:	e8 b3 5f fe ff       	call   f0115a37 <CB>
f012fa84:	83 c4 10             	add    $0x10,%esp
f012fa87:	85 c0                	test   %eax,%eax
f012fa89:	74 17                	je     f012faa2 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012fa8b:	83 ec 04             	sub    $0x4,%esp
f012fa8e:	68 40 c8 13 f0       	push   $0xf013c840
f012fa93:	68 5f 13 00 00       	push   $0x135f
f012fa98:	68 9a ad 13 f0       	push   $0xf013ad9a
f012fa9d:	e8 59 07 fd ff       	call   f01001fb <_panic>

			a+=4096;
f012faa2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012faa9:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012fab0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fab3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fab8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012fabb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fabe:	ba 00 00 00 00       	mov    $0x0,%edx
f012fac3:	f7 75 dc             	divl   -0x24(%ebp)
f012fac6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fac9:	29 d0                	sub    %edx,%eax
f012facb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fad0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fad3:	74 05                	je     f012fada <test_initialize_dyn_block_system+0x209>
				break;
		}
f012fad5:	e9 61 ff ff ff       	jmp    f012fa3b <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012fada:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012fadb:	83 ec 0c             	sub    $0xc,%esp
f012fade:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fae3:	e8 9a 11 fd ff       	call   f0100c82 <cprintf>
f012fae8:	83 c4 10             	add    $0x10,%esp
	return 0;
f012faeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012faf0:	c9                   	leave  
f012faf1:	c3                   	ret    

f012faf2 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012faf2:	55                   	push   %ebp
f012faf3:	89 e5                	mov    %esp,%ebp
f012faf5:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012faf8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fafc:	77 07                	ja     f012fb05 <nearest_pow2_ceil+0x13>
f012fafe:	b8 01 00 00 00       	mov    $0x1,%eax
f012fb03:	eb 20                	jmp    f012fb25 <nearest_pow2_ceil+0x33>
    int power = 2;
f012fb05:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fb0c:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fb0f:	eb 08                	jmp    f012fb19 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012fb11:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb14:	01 c0                	add    %eax,%eax
f012fb16:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012fb19:	d1 6d 08             	shrl   0x8(%ebp)
f012fb1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fb20:	75 ef                	jne    f012fb11 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012fb22:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fb25:	c9                   	leave  
f012fb26:	c3                   	ret    

f012fb27 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012fb27:	55                   	push   %ebp
f012fb28:	89 e5                	mov    %esp,%ebp
f012fb2a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fb2d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fb31:	77 07                	ja     f012fb3a <log2_ceil+0x13>
f012fb33:	b8 01 00 00 00       	mov    $0x1,%eax
f012fb38:	eb 1b                	jmp    f012fb55 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012fb3a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fb41:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fb44:	eb 03                	jmp    f012fb49 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012fb46:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012fb49:	d1 6d 08             	shrl   0x8(%ebp)
f012fb4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fb50:	75 f4                	jne    f012fb46 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012fb52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fb55:	c9                   	leave  
f012fb56:	c3                   	ret    

f012fb57 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012fb57:	55                   	push   %ebp
f012fb58:	89 e5                	mov    %esp,%ebp
f012fb5a:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012fb5d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb60:	8b 00                	mov    (%eax),%eax
f012fb62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012fb65:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb68:	8b 00                	mov    (%eax),%eax
f012fb6a:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012fb6d:	eb 52                	jmp    f012fbc1 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012fb6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb72:	8b 00                	mov    (%eax),%eax
f012fb74:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012fb77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb7a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fb7d:	75 12                	jne    f012fb91 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012fb7f:	83 ec 0c             	sub    $0xc,%esp
f012fb82:	68 f8 c8 13 f0       	push   $0xf013c8f8
f012fb87:	e8 f6 10 fd ff       	call   f0100c82 <cprintf>
f012fb8c:	83 c4 10             	add    $0x10,%esp
			break;
f012fb8f:	eb 3f                	jmp    f012fbd0 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012fb91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fb95:	74 38                	je     f012fbcf <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012fb97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb9a:	8b 00                	mov    (%eax),%eax
f012fb9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012fb9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fba2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fba5:	75 12                	jne    f012fbb9 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012fba7:	83 ec 0c             	sub    $0xc,%esp
f012fbaa:	68 14 c9 13 f0       	push   $0xf013c914
f012fbaf:	e8 ce 10 fd ff       	call   f0100c82 <cprintf>
f012fbb4:	83 c4 10             	add    $0x10,%esp
			break;
f012fbb7:	eb 17                	jmp    f012fbd0 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012fbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbbc:	8b 00                	mov    (%eax),%eax
f012fbbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012fbc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fbc5:	74 09                	je     f012fbd0 <detect_loop_in_FrameInfo_list+0x79>
f012fbc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fbcb:	75 a2                	jne    f012fb6f <detect_loop_in_FrameInfo_list+0x18>
f012fbcd:	eb 01                	jmp    f012fbd0 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012fbcf:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012fbd0:	83 ec 0c             	sub    $0xc,%esp
f012fbd3:	68 2b c9 13 f0       	push   $0xf013c92b
f012fbd8:	e8 a5 10 fd ff       	call   f0100c82 <cprintf>
f012fbdd:	83 c4 10             	add    $0x10,%esp
}
f012fbe0:	90                   	nop
f012fbe1:	c9                   	leave  
f012fbe2:	c3                   	ret    

f012fbe3 <scarce_memory>:

void scarce_memory()
{
f012fbe3:	55                   	push   %ebp
f012fbe4:	89 e5                	mov    %esp,%ebp
f012fbe6:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012fbe9:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fbee:	ba 64 00 00 00       	mov    $0x64,%edx
f012fbf3:	29 c2                	sub    %eax,%edx
f012fbf5:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fbfa:	0f af c2             	imul   %edx,%eax
f012fbfd:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fc02:	f7 e2                	mul    %edx
f012fc04:	89 d0                	mov    %edx,%eax
f012fc06:	c1 e8 05             	shr    $0x5,%eax
f012fc09:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012fc0c:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fc11:	ba 64 00 00 00       	mov    $0x64,%edx
f012fc16:	29 c2                	sub    %eax,%edx
f012fc18:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fc1d:	89 d1                	mov    %edx,%ecx
f012fc1f:	0f af c8             	imul   %eax,%ecx
f012fc22:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fc27:	f7 e1                	mul    %ecx
f012fc29:	c1 ea 05             	shr    $0x5,%edx
f012fc2c:	89 d0                	mov    %edx,%eax
f012fc2e:	c1 e0 02             	shl    $0x2,%eax
f012fc31:	01 d0                	add    %edx,%eax
f012fc33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fc3a:	01 d0                	add    %edx,%eax
f012fc3c:	c1 e0 02             	shl    $0x2,%eax
f012fc3f:	29 c1                	sub    %eax,%ecx
f012fc41:	89 ca                	mov    %ecx,%edx
f012fc43:	85 d2                	test   %edx,%edx
f012fc45:	74 03                	je     f012fc4a <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012fc47:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012fc4a:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f012fc50:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f012fc55:	29 c2                	sub    %eax,%edx
f012fc57:	89 d0                	mov    %edx,%eax
f012fc59:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012fc5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc5f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fc62:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012fc65:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fc6c:	eb 12                	jmp    f012fc80 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012fc6e:	83 ec 0c             	sub    $0xc,%esp
f012fc71:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012fc74:	50                   	push   %eax
f012fc75:	e8 a1 6b fd ff       	call   f010681b <allocate_frame>
f012fc7a:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fc7d:	ff 45 f0             	incl   -0x10(%ebp)
f012fc80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc83:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fc86:	76 e6                	jbe    f012fc6e <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012fc88:	90                   	nop
f012fc89:	c9                   	leave  
f012fc8a:	c3                   	ret    

f012fc8b <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012fc8b:	55                   	push   %ebp
f012fc8c:	89 e5                	mov    %esp,%ebp
f012fc8e:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012fc91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012fc98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012fc9f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012fca6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fcaa:	0f 85 d0 01 00 00    	jne    f012fe80 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fcb0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012fcb7:	e9 de 00 00 00       	jmp    f012fd9a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f012fcbc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fcc3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fcc8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fccb:	c1 e2 04             	shl    $0x4,%edx
f012fcce:	01 d0                	add    %edx,%eax
f012fcd0:	8b 00                	mov    (%eax),%eax
f012fcd2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fcd5:	e9 85 00 00 00       	jmp    f012fd5f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012fcda:	83 ec 0c             	sub    $0xc,%esp
f012fcdd:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fce0:	e8 bf 80 fd ff       	call   f0107da4 <env_page_ws_get_size>
f012fce5:	83 c4 10             	add    $0x10,%esp
f012fce8:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fceb:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fcf0:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fcf6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fcf9:	0f af c2             	imul   %edx,%eax
f012fcfc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fd01:	f7 e2                	mul    %edx
f012fd03:	89 d0                	mov    %edx,%eax
f012fd05:	c1 e8 05             	shr    $0x5,%eax
f012fd08:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fd0b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd10:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fd19:	89 d1                	mov    %edx,%ecx
f012fd1b:	0f af c8             	imul   %eax,%ecx
f012fd1e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fd23:	f7 e1                	mul    %ecx
f012fd25:	c1 ea 05             	shr    $0x5,%edx
f012fd28:	89 d0                	mov    %edx,%eax
f012fd2a:	c1 e0 02             	shl    $0x2,%eax
f012fd2d:	01 d0                	add    %edx,%eax
f012fd2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fd36:	01 d0                	add    %edx,%eax
f012fd38:	c1 e0 02             	shl    $0x2,%eax
f012fd3b:	29 c1                	sub    %eax,%ecx
f012fd3d:	89 ca                	mov    %ecx,%edx
f012fd3f:	85 d2                	test   %edx,%edx
f012fd41:	74 03                	je     f012fd46 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f012fd43:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012fd46:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd49:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fd4c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fd51:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fd54:	c1 e2 04             	shl    $0x4,%edx
f012fd57:	01 d0                	add    %edx,%eax
f012fd59:	8b 40 08             	mov    0x8(%eax),%eax
f012fd5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fd5f:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fd64:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fd67:	c1 e2 04             	shl    $0x4,%edx
f012fd6a:	01 d0                	add    %edx,%eax
f012fd6c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fd70:	74 08                	je     f012fd7a <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f012fd72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fd75:	8b 52 44             	mov    0x44(%edx),%edx
f012fd78:	eb 05                	jmp    f012fd7f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f012fd7a:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd7f:	89 50 08             	mov    %edx,0x8(%eax)
f012fd82:	8b 40 08             	mov    0x8(%eax),%eax
f012fd85:	85 c0                	test   %eax,%eax
f012fd87:	0f 85 4d ff ff ff    	jne    f012fcda <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f012fd8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fd91:	0f 85 43 ff ff ff    	jne    f012fcda <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fd97:	ff 45 e8             	incl   -0x18(%ebp)
f012fd9a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fd9f:	0f b6 c0             	movzbl %al,%eax
f012fda2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fda5:	0f 8f 11 ff ff ff    	jg     f012fcbc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012fdab:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fdb2:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f012fdb7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fdba:	eb 19                	jmp    f012fdd5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012fdbc:	83 ec 0c             	sub    $0xc,%esp
f012fdbf:	ff 75 dc             	pushl  -0x24(%ebp)
f012fdc2:	e8 dd 7f fd ff       	call   f0107da4 <env_page_ws_get_size>
f012fdc7:	83 c4 10             	add    $0x10,%esp
f012fdca:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fdcd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fdd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fdd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fdd9:	74 08                	je     f012fde3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f012fddb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fdde:	8b 40 44             	mov    0x44(%eax),%eax
f012fde1:	eb 05                	jmp    f012fde8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f012fde3:	b8 00 00 00 00       	mov    $0x0,%eax
f012fde8:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f012fded:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fdf2:	85 c0                	test   %eax,%eax
f012fdf4:	75 c6                	jne    f012fdbc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f012fdf6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fdfa:	75 c0                	jne    f012fdbc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012fdfc:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe01:	85 c0                	test   %eax,%eax
f012fe03:	0f 84 ec 00 00 00    	je     f012fef5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fe09:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe0e:	83 ec 0c             	sub    $0xc,%esp
f012fe11:	50                   	push   %eax
f012fe12:	e8 8d 7f fd ff       	call   f0107da4 <env_page_ws_get_size>
f012fe17:	83 c4 10             	add    $0x10,%esp
f012fe1a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fe1d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe22:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fe28:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fe2b:	0f af c2             	imul   %edx,%eax
f012fe2e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fe33:	f7 e2                	mul    %edx
f012fe35:	89 d0                	mov    %edx,%eax
f012fe37:	c1 e8 05             	shr    $0x5,%eax
f012fe3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fe3d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe42:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fe48:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fe4b:	89 d1                	mov    %edx,%ecx
f012fe4d:	0f af c8             	imul   %eax,%ecx
f012fe50:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fe55:	f7 e1                	mul    %ecx
f012fe57:	c1 ea 05             	shr    $0x5,%edx
f012fe5a:	89 d0                	mov    %edx,%eax
f012fe5c:	c1 e0 02             	shl    $0x2,%eax
f012fe5f:	01 d0                	add    %edx,%eax
f012fe61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fe68:	01 d0                	add    %edx,%eax
f012fe6a:	c1 e0 02             	shl    $0x2,%eax
f012fe6d:	29 c1                	sub    %eax,%ecx
f012fe6f:	89 ca                	mov    %ecx,%edx
f012fe71:	85 d2                	test   %edx,%edx
f012fe73:	74 03                	je     f012fe78 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f012fe75:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fe78:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fe7e:	eb 75                	jmp    f012fef5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fe80:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe85:	83 ec 0c             	sub    $0xc,%esp
f012fe88:	50                   	push   %eax
f012fe89:	e8 16 7f fd ff       	call   f0107da4 <env_page_ws_get_size>
f012fe8e:	83 c4 10             	add    $0x10,%esp
f012fe91:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fe94:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe99:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fe9f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fea2:	0f af c2             	imul   %edx,%eax
f012fea5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012feaa:	f7 e2                	mul    %edx
f012feac:	89 d0                	mov    %edx,%eax
f012feae:	c1 e8 05             	shr    $0x5,%eax
f012feb1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012feb4:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012feb9:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012febf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fec2:	89 d1                	mov    %edx,%ecx
f012fec4:	0f af c8             	imul   %eax,%ecx
f012fec7:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fecc:	f7 e1                	mul    %ecx
f012fece:	c1 ea 05             	shr    $0x5,%edx
f012fed1:	89 d0                	mov    %edx,%eax
f012fed3:	c1 e0 02             	shl    $0x2,%eax
f012fed6:	01 d0                	add    %edx,%eax
f012fed8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fedf:	01 d0                	add    %edx,%eax
f012fee1:	c1 e0 02             	shl    $0x2,%eax
f012fee4:	29 c1                	sub    %eax,%ecx
f012fee6:	89 ca                	mov    %ecx,%edx
f012fee8:	85 d2                	test   %edx,%edx
f012feea:	74 03                	je     f012feef <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f012feec:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012feef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012fef2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012fef5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fefb:	01 c2                	add    %eax,%edx
f012fefd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff00:	01 d0                	add    %edx,%eax
}
f012ff02:	c9                   	leave  
f012ff03:	c3                   	ret    

f012ff04 <schenv>:


void schenv()
{
f012ff04:	55                   	push   %ebp
f012ff05:	89 e5                	mov    %esp,%ebp
f012ff07:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012ff0a:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__ne = NULL;
f012ff11:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012ff18:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012ff1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ff22:	eb 3f                	jmp    f012ff63 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f012ff24:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012ff29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff2c:	c1 e2 04             	shl    $0x4,%edx
f012ff2f:	01 d0                	add    %edx,%eax
f012ff31:	83 ec 0c             	sub    $0xc,%esp
f012ff34:	50                   	push   %eax
f012ff35:	e8 bf 44 fd ff       	call   f01043f9 <queue_size>
f012ff3a:	83 c4 10             	add    $0x10,%esp
f012ff3d:	85 c0                	test   %eax,%eax
f012ff3f:	74 1f                	je     f012ff60 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012ff41:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012ff46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff49:	c1 e2 04             	shl    $0x4,%edx
f012ff4c:	01 d0                	add    %edx,%eax
f012ff4e:	8b 40 04             	mov    0x4(%eax),%eax
f012ff51:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = i;
f012ff56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff59:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
			break;
f012ff5e:	eb 10                	jmp    f012ff70 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012ff60:	ff 45 f4             	incl   -0xc(%ebp)
f012ff63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ff68:	0f b6 c0             	movzbl %al,%eax
f012ff6b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ff6e:	7f b4                	jg     f012ff24 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012ff70:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012ff75:	85 c0                	test   %eax,%eax
f012ff77:	0f 84 86 00 00 00    	je     f0130003 <schenv+0xff>
	{
		if (__ne != NULL)
f012ff7d:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff82:	85 c0                	test   %eax,%eax
f012ff84:	74 4b                	je     f012ffd1 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f012ff86:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ff8b:	0f b6 c0             	movzbl %al,%eax
f012ff8e:	8d 50 01             	lea    0x1(%eax),%edx
f012ff91:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff96:	0f b6 c0             	movzbl %al,%eax
f012ff99:	39 c2                	cmp    %eax,%edx
f012ff9b:	7d 66                	jge    f0130003 <schenv+0xff>
			{
				__ne = curenv;
f012ff9d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012ffa2:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012ffa7:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ffac:	0f b6 c0             	movzbl %al,%eax
f012ffaf:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012ffb5:	0f b6 d2             	movzbl %dl,%edx
f012ffb8:	4a                   	dec    %edx
f012ffb9:	39 d0                	cmp    %edx,%eax
f012ffbb:	7d 08                	jge    f012ffc5 <schenv+0xc1>
f012ffbd:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ffc2:	40                   	inc    %eax
f012ffc3:	eb 05                	jmp    f012ffca <schenv+0xc6>
f012ffc5:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ffca:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012ffcf:	eb 32                	jmp    f0130003 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012ffd1:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012ffd6:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012ffdb:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ffe0:	0f b6 c0             	movzbl %al,%eax
f012ffe3:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012ffe9:	0f b6 d2             	movzbl %dl,%edx
f012ffec:	4a                   	dec    %edx
f012ffed:	39 d0                	cmp    %edx,%eax
f012ffef:	7d 08                	jge    f012fff9 <schenv+0xf5>
f012fff1:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fff6:	40                   	inc    %eax
f012fff7:	eb 05                	jmp    f012fffe <schenv+0xfa>
f012fff9:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fffe:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		}
	}
}
f0130003:	90                   	nop
f0130004:	c9                   	leave  
f0130005:	c3                   	ret    

f0130006 <chksch>:

void chksch(uint8 onoff)
{
f0130006:	55                   	push   %ebp
f0130007:	89 e5                	mov    %esp,%ebp
f0130009:	83 ec 04             	sub    $0x4,%esp
f013000c:	8b 45 08             	mov    0x8(%ebp),%eax
f013000f:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130012:	c7 05 94 7b 65 f0 00 	movl   $0x0,0xf0657b94
f0130019:	00 00 00 
	__ne = NULL;
f013001c:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f0130023:	00 00 00 
	__pl = 0 ;
f0130026:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	__nl = 0 ;
f013002d:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__chkstatus = onoff;
f0130034:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130037:	a2 34 7b 65 f0       	mov    %al,0xf0657b34
}
f013003c:	90                   	nop
f013003d:	c9                   	leave  
f013003e:	c3                   	ret    

f013003f <chk1>:
void chk1()
{
f013003f:	55                   	push   %ebp
f0130040:	89 e5                	mov    %esp,%ebp
f0130042:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130045:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f013004a:	84 c0                	test   %al,%al
f013004c:	74 2b                	je     f0130079 <chk1+0x3a>
		return ;
	__pe = curenv;
f013004e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0130053:	a3 94 7b 65 f0       	mov    %eax,0xf0657b94
	__pl = __nl ;
f0130058:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f013005d:	a2 e0 7a 65 f0       	mov    %al,0xf0657ae0
	if (__pe == NULL)
f0130062:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f0130067:	85 c0                	test   %eax,%eax
f0130069:	75 07                	jne    f0130072 <chk1+0x33>
	{
		__pl = 0;
f013006b:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130072:	e8 8d fe ff ff       	call   f012ff04 <schenv>
f0130077:	eb 01                	jmp    f013007a <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130079:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f013007a:	c9                   	leave  
f013007b:	c3                   	ret    

f013007c <chk2>:
void chk2(struct Env* __se)
{
f013007c:	55                   	push   %ebp
f013007d:	89 e5                	mov    %esp,%ebp
f013007f:	53                   	push   %ebx
f0130080:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130083:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f0130088:	84 c0                	test   %al,%al
f013008a:	0f 84 43 02 00 00    	je     f01302d3 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130090:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130095:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130098:	74 19                	je     f01300b3 <chk2+0x37>
f013009a:	68 45 c9 13 f0       	push   $0xf013c945
f013009f:	68 52 c9 13 f0       	push   $0xf013c952
f01300a4:	68 c0 00 00 00       	push   $0xc0
f01300a9:	68 67 c9 13 f0       	push   $0xf013c967
f01300ae:	e8 b7 01 fd ff       	call   f010026a <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01300b3:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f01300b8:	85 c0                	test   %eax,%eax
f01300ba:	0f 84 25 01 00 00    	je     f01301e5 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01300c0:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f01300c6:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f01300cb:	0f b6 c0             	movzbl %al,%eax
f01300ce:	01 d0                	add    %edx,%eax
f01300d0:	8a 00                	mov    (%eax),%al
f01300d2:	0f b6 d8             	movzbl %al,%ebx
f01300d5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01300da:	99                   	cltd   
f01300db:	f7 fb                	idiv   %ebx
f01300dd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01300e3:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f01300e9:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f01300ee:	0f b6 c0             	movzbl %al,%eax
f01300f1:	01 d0                	add    %edx,%eax
f01300f3:	8a 00                	mov    (%eax),%al
f01300f5:	0f b6 d8             	movzbl %al,%ebx
f01300f8:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01300fd:	99                   	cltd   
f01300fe:	f7 fb                	idiv   %ebx
f0130100:	89 c3                	mov    %eax,%ebx
f0130102:	89 c8                	mov    %ecx,%eax
f0130104:	99                   	cltd   
f0130105:	f7 fb                	idiv   %ebx
f0130107:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f013010b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013010f:	83 e0 01             	and    $0x1,%eax
f0130112:	66 85 c0             	test   %ax,%ax
f0130115:	74 07                	je     f013011e <chk2+0xa2>
f0130117:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013011b:	40                   	inc    %eax
f013011c:	eb 04                	jmp    f0130122 <chk2+0xa6>
f013011e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130122:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130126:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f013012a:	89 d0                	mov    %edx,%eax
f013012c:	c1 e0 02             	shl    $0x2,%eax
f013012f:	01 d0                	add    %edx,%eax
f0130131:	01 c0                	add    %eax,%eax
f0130133:	01 d0                	add    %edx,%eax
f0130135:	c1 e0 02             	shl    $0x2,%eax
f0130138:	01 d0                	add    %edx,%eax
f013013a:	01 c0                	add    %eax,%eax
f013013c:	89 c1                	mov    %eax,%ecx
f013013e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130143:	f7 e9                	imul   %ecx
f0130145:	c1 fa 05             	sar    $0x5,%edx
f0130148:	89 c8                	mov    %ecx,%eax
f013014a:	c1 f8 1f             	sar    $0x1f,%eax
f013014d:	29 c2                	sub    %eax,%edx
f013014f:	89 d0                	mov    %edx,%eax
f0130151:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130155:	e8 70 41 fd ff       	call   f01042ca <kclock_read_cnt0>
f013015a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f013015e:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130162:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130166:	76 0a                	jbe    f0130172 <chk2+0xf6>
f0130168:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013016c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130170:	76 19                	jbe    f013018b <chk2+0x10f>
f0130172:	68 80 c9 13 f0       	push   $0xf013c980
f0130177:	68 52 c9 13 f0       	push   $0xf013c952
f013017c:	68 ca 00 00 00       	push   $0xca
f0130181:	68 67 c9 13 f0       	push   $0xf013c967
f0130186:	e8 df 00 fd ff       	call   f010026a <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f013018b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130192:	eb 44                	jmp    f01301d8 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130194:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130199:	8b 40 4c             	mov    0x4c(%eax),%eax
f013019c:	89 c2                	mov    %eax,%edx
f013019e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01301a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01301a6:	c1 e1 04             	shl    $0x4,%ecx
f01301a9:	01 c8                	add    %ecx,%eax
f01301ab:	83 ec 08             	sub    $0x8,%esp
f01301ae:	52                   	push   %edx
f01301af:	50                   	push   %eax
f01301b0:	e8 16 44 fd ff       	call   f01045cb <find_env_in_queue>
f01301b5:	83 c4 10             	add    $0x10,%esp
f01301b8:	85 c0                	test   %eax,%eax
f01301ba:	74 19                	je     f01301d5 <chk2+0x159>
f01301bc:	68 a4 c9 13 f0       	push   $0xf013c9a4
f01301c1:	68 52 c9 13 f0       	push   $0xf013c952
f01301c6:	68 ce 00 00 00       	push   $0xce
f01301cb:	68 67 c9 13 f0       	push   $0xf013c967
f01301d0:	e8 95 00 fd ff       	call   f010026a <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01301d5:	ff 45 f4             	incl   -0xc(%ebp)
f01301d8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01301dd:	0f b6 c0             	movzbl %al,%eax
f01301e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01301e3:	7f af                	jg     f0130194 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01301e5:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f01301ea:	85 c0                	test   %eax,%eax
f01301ec:	0f 84 e2 00 00 00    	je     f01302d4 <chk2+0x258>
f01301f2:	8b 15 94 7b 65 f0    	mov    0xf0657b94,%edx
f01301f8:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f01301fd:	39 c2                	cmp    %eax,%edx
f01301ff:	0f 84 cf 00 00 00    	je     f01302d4 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130205:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f013020a:	0f b6 c0             	movzbl %al,%eax
f013020d:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f0130213:	0f b6 d2             	movzbl %dl,%edx
f0130216:	4a                   	dec    %edx
f0130217:	39 d0                	cmp    %edx,%eax
f0130219:	74 08                	je     f0130223 <chk2+0x1a7>
f013021b:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130220:	40                   	inc    %eax
f0130221:	eb 05                	jmp    f0130228 <chk2+0x1ac>
f0130223:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130228:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f013022b:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f0130230:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130233:	89 c2                	mov    %eax,%edx
f0130235:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f013023a:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f013023e:	c1 e1 04             	shl    $0x4,%ecx
f0130241:	01 c8                	add    %ecx,%eax
f0130243:	83 ec 08             	sub    $0x8,%esp
f0130246:	52                   	push   %edx
f0130247:	50                   	push   %eax
f0130248:	e8 7e 43 fd ff       	call   f01045cb <find_env_in_queue>
f013024d:	83 c4 10             	add    $0x10,%esp
f0130250:	85 c0                	test   %eax,%eax
f0130252:	75 19                	jne    f013026d <chk2+0x1f1>
f0130254:	68 e4 c9 13 f0       	push   $0xf013c9e4
f0130259:	68 52 c9 13 f0       	push   $0xf013c952
f013025e:	68 d4 00 00 00       	push   $0xd4
f0130263:	68 67 c9 13 f0       	push   $0xf013c967
f0130268:	e8 fd ff fc ff       	call   f010026a <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f013026d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130274:	eb 4e                	jmp    f01302c4 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130276:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f013027a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013027d:	74 41                	je     f01302c0 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f013027f:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f0130284:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130287:	89 c2                	mov    %eax,%edx
f0130289:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f013028e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130291:	c1 e1 04             	shl    $0x4,%ecx
f0130294:	01 c8                	add    %ecx,%eax
f0130296:	83 ec 08             	sub    $0x8,%esp
f0130299:	52                   	push   %edx
f013029a:	50                   	push   %eax
f013029b:	e8 2b 43 fd ff       	call   f01045cb <find_env_in_queue>
f01302a0:	83 c4 10             	add    $0x10,%esp
f01302a3:	85 c0                	test   %eax,%eax
f01302a5:	74 1a                	je     f01302c1 <chk2+0x245>
f01302a7:	68 28 ca 13 f0       	push   $0xf013ca28
f01302ac:	68 52 c9 13 f0       	push   $0xf013c952
f01302b1:	68 d8 00 00 00       	push   $0xd8
f01302b6:	68 67 c9 13 f0       	push   $0xf013c967
f01302bb:	e8 aa ff fc ff       	call   f010026a <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f01302c0:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f01302c1:	ff 45 f0             	incl   -0x10(%ebp)
f01302c4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01302c9:	0f b6 c0             	movzbl %al,%eax
f01302cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01302cf:	7f a5                	jg     f0130276 <chk2+0x1fa>
f01302d1:	eb 01                	jmp    f01302d4 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01302d3:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01302d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01302d7:	c9                   	leave  
f01302d8:	c3                   	ret    

f01302d9 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f01302d9:	55                   	push   %ebp
f01302da:	89 e5                	mov    %esp,%ebp
f01302dc:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f01302df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01302e6:	eb 40                	jmp    f0130328 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f01302e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302eb:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01302f1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01302f6:	83 ec 08             	sub    $0x8,%esp
f01302f9:	52                   	push   %edx
f01302fa:	50                   	push   %eax
f01302fb:	e8 9b 01 00 00       	call   f013049b <check_va2pa>
f0130300:	83 c4 10             	add    $0x10,%esp
f0130303:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130306:	74 19                	je     f0130321 <check_boot_pgdir+0x48>
f0130308:	68 68 ca 13 f0       	push   $0xf013ca68
f013030d:	68 52 c9 13 f0       	push   $0xf013c952
f0130312:	68 fa 00 00 00       	push   $0xfa
f0130317:	68 67 c9 13 f0       	push   $0xf013c967
f013031c:	e8 da fe fc ff       	call   f01001fb <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130321:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130328:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013032b:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130331:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0130336:	39 c2                	cmp    %eax,%edx
f0130338:	72 ae                	jb     f01302e8 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f013033a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130341:	eb 74                	jmp    f01303b7 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130343:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130346:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f013034c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130351:	83 ec 08             	sub    $0x8,%esp
f0130354:	52                   	push   %edx
f0130355:	50                   	push   %eax
f0130356:	e8 40 01 00 00       	call   f013049b <check_va2pa>
f013035b:	83 c4 10             	add    $0x10,%esp
f013035e:	c7 45 f0 00 90 18 f0 	movl   $0xf0189000,-0x10(%ebp)
f0130365:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f013036c:	77 17                	ja     f0130385 <check_boot_pgdir+0xac>
f013036e:	ff 75 f0             	pushl  -0x10(%ebp)
f0130371:	68 a0 ca 13 f0       	push   $0xf013caa0
f0130376:	68 04 01 00 00       	push   $0x104
f013037b:	68 67 c9 13 f0       	push   $0xf013c967
f0130380:	e8 76 fe fc ff       	call   f01001fb <_panic>
f0130385:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130388:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f013038e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130391:	01 ca                	add    %ecx,%edx
f0130393:	39 d0                	cmp    %edx,%eax
f0130395:	74 19                	je     f01303b0 <check_boot_pgdir+0xd7>
f0130397:	68 d4 ca 13 f0       	push   $0xf013cad4
f013039c:	68 52 c9 13 f0       	push   $0xf013c952
f01303a1:	68 04 01 00 00       	push   $0x104
f01303a6:	68 67 c9 13 f0       	push   $0xf013c967
f01303ab:	e8 4b fe fc ff       	call   f01001fb <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01303b0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01303b7:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01303be:	76 83                	jbe    f0130343 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01303c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01303c7:	e9 af 00 00 00       	jmp    f013047b <check_boot_pgdir+0x1a2>
		switch (i) {
f01303cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303cf:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01303d4:	74 11                	je     f01303e7 <check_boot_pgdir+0x10e>
f01303d6:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01303db:	72 36                	jb     f0130413 <check_boot_pgdir+0x13a>
f01303dd:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01303e2:	83 f8 02             	cmp    $0x2,%eax
f01303e5:	77 2c                	ja     f0130413 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f01303e7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01303ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01303ef:	c1 e2 02             	shl    $0x2,%edx
f01303f2:	01 d0                	add    %edx,%eax
f01303f4:	8b 00                	mov    (%eax),%eax
f01303f6:	85 c0                	test   %eax,%eax
f01303f8:	75 7a                	jne    f0130474 <check_boot_pgdir+0x19b>
f01303fa:	68 56 cb 13 f0       	push   $0xf013cb56
f01303ff:	68 52 c9 13 f0       	push   $0xf013c952
f0130404:	68 0f 01 00 00       	push   $0x10f
f0130409:	68 67 c9 13 f0       	push   $0xf013c967
f013040e:	e8 e8 fd fc ff       	call   f01001fb <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130413:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f013041a:	76 2c                	jbe    f0130448 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f013041c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130421:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130424:	c1 e2 02             	shl    $0x2,%edx
f0130427:	01 d0                	add    %edx,%eax
f0130429:	8b 00                	mov    (%eax),%eax
f013042b:	85 c0                	test   %eax,%eax
f013042d:	75 48                	jne    f0130477 <check_boot_pgdir+0x19e>
f013042f:	68 56 cb 13 f0       	push   $0xf013cb56
f0130434:	68 52 c9 13 f0       	push   $0xf013c952
f0130439:	68 13 01 00 00       	push   $0x113
f013043e:	68 67 c9 13 f0       	push   $0xf013c967
f0130443:	e8 b3 fd fc ff       	call   f01001fb <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130448:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013044d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130450:	c1 e2 02             	shl    $0x2,%edx
f0130453:	01 d0                	add    %edx,%eax
f0130455:	8b 00                	mov    (%eax),%eax
f0130457:	85 c0                	test   %eax,%eax
f0130459:	74 1c                	je     f0130477 <check_boot_pgdir+0x19e>
f013045b:	68 6c cb 13 f0       	push   $0xf013cb6c
f0130460:	68 52 c9 13 f0       	push   $0xf013c952
f0130465:	68 15 01 00 00       	push   $0x115
f013046a:	68 67 c9 13 f0       	push   $0xf013c967
f013046f:	e8 87 fd fc ff       	call   f01001fb <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130474:	90                   	nop
f0130475:	eb 01                	jmp    f0130478 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130477:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130478:	ff 45 f4             	incl   -0xc(%ebp)
f013047b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130482:	0f 86 44 ff ff ff    	jbe    f01303cc <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130488:	83 ec 0c             	sub    $0xc,%esp
f013048b:	68 88 cb 13 f0       	push   $0xf013cb88
f0130490:	e8 ed 07 fd ff       	call   f0100c82 <cprintf>
f0130495:	83 c4 10             	add    $0x10,%esp
}
f0130498:	90                   	nop
f0130499:	c9                   	leave  
f013049a:	c3                   	ret    

f013049b <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f013049b:	55                   	push   %ebp
f013049c:	89 e5                	mov    %esp,%ebp
f013049e:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01304a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01304a4:	c1 e8 16             	shr    $0x16,%eax
f01304a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01304ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b1:	01 d0                	add    %edx,%eax
f01304b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01304b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304b9:	8b 00                	mov    (%eax),%eax
f01304bb:	83 e0 01             	and    $0x1,%eax
f01304be:	85 c0                	test   %eax,%eax
f01304c0:	75 0a                	jne    f01304cc <check_va2pa+0x31>
		return ~0;
f01304c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01304c7:	e9 87 00 00 00       	jmp    f0130553 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01304cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304cf:	8b 00                	mov    (%eax),%eax
f01304d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01304d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01304d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304dc:	c1 e8 0c             	shr    $0xc,%eax
f01304df:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01304e2:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01304e7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01304ea:	72 17                	jb     f0130503 <check_va2pa+0x68>
f01304ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01304ef:	68 a8 cb 13 f0       	push   $0xf013cba8
f01304f4:	68 2b 01 00 00       	push   $0x12b
f01304f9:	68 67 c9 13 f0       	push   $0xf013c967
f01304fe:	e8 f8 fc fc ff       	call   f01001fb <_panic>
f0130503:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130506:	2d 00 00 00 10       	sub    $0x10000000,%eax
f013050b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f013050e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130511:	c1 e8 0c             	shr    $0xc,%eax
f0130514:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130519:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130523:	01 d0                	add    %edx,%eax
f0130525:	8b 00                	mov    (%eax),%eax
f0130527:	83 e0 01             	and    $0x1,%eax
f013052a:	85 c0                	test   %eax,%eax
f013052c:	75 07                	jne    f0130535 <check_va2pa+0x9a>
		return ~0;
f013052e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130533:	eb 1e                	jmp    f0130553 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130538:	c1 e8 0c             	shr    $0xc,%eax
f013053b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130540:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130547:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013054a:	01 d0                	add    %edx,%eax
f013054c:	8b 00                	mov    (%eax),%eax
f013054e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130553:	c9                   	leave  
f0130554:	c3                   	ret    

f0130555 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130555:	55                   	push   %ebp
f0130556:	89 e5                	mov    %esp,%ebp
f0130558:	53                   	push   %ebx
f0130559:	83 ec 14             	sub    $0x14,%esp
f013055c:	8b 45 10             	mov    0x10(%ebp),%eax
f013055f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130562:	8b 45 14             	mov    0x14(%ebp),%eax
f0130565:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130568:	8b 45 18             	mov    0x18(%ebp),%eax
f013056b:	ba 00 00 00 00       	mov    $0x0,%edx
f0130570:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130573:	77 55                	ja     f01305ca <printnum+0x75>
f0130575:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130578:	72 05                	jb     f013057f <printnum+0x2a>
f013057a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013057d:	77 4b                	ja     f01305ca <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f013057f:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130582:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130585:	8b 45 18             	mov    0x18(%ebp),%eax
f0130588:	ba 00 00 00 00       	mov    $0x0,%edx
f013058d:	52                   	push   %edx
f013058e:	50                   	push   %eax
f013058f:	ff 75 f4             	pushl  -0xc(%ebp)
f0130592:	ff 75 f0             	pushl  -0x10(%ebp)
f0130595:	e8 0a 28 00 00       	call   f0132da4 <__udivdi3>
f013059a:	83 c4 10             	add    $0x10,%esp
f013059d:	83 ec 04             	sub    $0x4,%esp
f01305a0:	ff 75 20             	pushl  0x20(%ebp)
f01305a3:	53                   	push   %ebx
f01305a4:	ff 75 18             	pushl  0x18(%ebp)
f01305a7:	52                   	push   %edx
f01305a8:	50                   	push   %eax
f01305a9:	ff 75 0c             	pushl  0xc(%ebp)
f01305ac:	ff 75 08             	pushl  0x8(%ebp)
f01305af:	e8 a1 ff ff ff       	call   f0130555 <printnum>
f01305b4:	83 c4 20             	add    $0x20,%esp
f01305b7:	eb 1a                	jmp    f01305d3 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f01305b9:	83 ec 08             	sub    $0x8,%esp
f01305bc:	ff 75 0c             	pushl  0xc(%ebp)
f01305bf:	ff 75 20             	pushl  0x20(%ebp)
f01305c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01305c5:	ff d0                	call   *%eax
f01305c7:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f01305ca:	ff 4d 1c             	decl   0x1c(%ebp)
f01305cd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01305d1:	7f e6                	jg     f01305b9 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01305d3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01305d6:	bb 00 00 00 00       	mov    $0x0,%ebx
f01305db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01305e1:	53                   	push   %ebx
f01305e2:	51                   	push   %ecx
f01305e3:	52                   	push   %edx
f01305e4:	50                   	push   %eax
f01305e5:	e8 ca 28 00 00       	call   f0132eb4 <__umoddi3>
f01305ea:	83 c4 10             	add    $0x10,%esp
f01305ed:	05 f4 cd 13 f0       	add    $0xf013cdf4,%eax
f01305f2:	8a 00                	mov    (%eax),%al
f01305f4:	0f be c0             	movsbl %al,%eax
f01305f7:	83 ec 08             	sub    $0x8,%esp
f01305fa:	ff 75 0c             	pushl  0xc(%ebp)
f01305fd:	50                   	push   %eax
f01305fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130601:	ff d0                	call   *%eax
f0130603:	83 c4 10             	add    $0x10,%esp
}
f0130606:	90                   	nop
f0130607:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013060a:	c9                   	leave  
f013060b:	c3                   	ret    

f013060c <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f013060c:	55                   	push   %ebp
f013060d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013060f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130613:	7e 1c                	jle    f0130631 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130615:	8b 45 08             	mov    0x8(%ebp),%eax
f0130618:	8b 00                	mov    (%eax),%eax
f013061a:	8d 50 08             	lea    0x8(%eax),%edx
f013061d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130620:	89 10                	mov    %edx,(%eax)
f0130622:	8b 45 08             	mov    0x8(%ebp),%eax
f0130625:	8b 00                	mov    (%eax),%eax
f0130627:	83 e8 08             	sub    $0x8,%eax
f013062a:	8b 50 04             	mov    0x4(%eax),%edx
f013062d:	8b 00                	mov    (%eax),%eax
f013062f:	eb 40                	jmp    f0130671 <getuint+0x65>
	else if (lflag)
f0130631:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130635:	74 1e                	je     f0130655 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130637:	8b 45 08             	mov    0x8(%ebp),%eax
f013063a:	8b 00                	mov    (%eax),%eax
f013063c:	8d 50 04             	lea    0x4(%eax),%edx
f013063f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130642:	89 10                	mov    %edx,(%eax)
f0130644:	8b 45 08             	mov    0x8(%ebp),%eax
f0130647:	8b 00                	mov    (%eax),%eax
f0130649:	83 e8 04             	sub    $0x4,%eax
f013064c:	8b 00                	mov    (%eax),%eax
f013064e:	ba 00 00 00 00       	mov    $0x0,%edx
f0130653:	eb 1c                	jmp    f0130671 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130655:	8b 45 08             	mov    0x8(%ebp),%eax
f0130658:	8b 00                	mov    (%eax),%eax
f013065a:	8d 50 04             	lea    0x4(%eax),%edx
f013065d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130660:	89 10                	mov    %edx,(%eax)
f0130662:	8b 45 08             	mov    0x8(%ebp),%eax
f0130665:	8b 00                	mov    (%eax),%eax
f0130667:	83 e8 04             	sub    $0x4,%eax
f013066a:	8b 00                	mov    (%eax),%eax
f013066c:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130671:	5d                   	pop    %ebp
f0130672:	c3                   	ret    

f0130673 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130673:	55                   	push   %ebp
f0130674:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130676:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f013067a:	7e 1c                	jle    f0130698 <getint+0x25>
		return va_arg(*ap, long long);
f013067c:	8b 45 08             	mov    0x8(%ebp),%eax
f013067f:	8b 00                	mov    (%eax),%eax
f0130681:	8d 50 08             	lea    0x8(%eax),%edx
f0130684:	8b 45 08             	mov    0x8(%ebp),%eax
f0130687:	89 10                	mov    %edx,(%eax)
f0130689:	8b 45 08             	mov    0x8(%ebp),%eax
f013068c:	8b 00                	mov    (%eax),%eax
f013068e:	83 e8 08             	sub    $0x8,%eax
f0130691:	8b 50 04             	mov    0x4(%eax),%edx
f0130694:	8b 00                	mov    (%eax),%eax
f0130696:	eb 38                	jmp    f01306d0 <getint+0x5d>
	else if (lflag)
f0130698:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013069c:	74 1a                	je     f01306b8 <getint+0x45>
		return va_arg(*ap, long);
f013069e:	8b 45 08             	mov    0x8(%ebp),%eax
f01306a1:	8b 00                	mov    (%eax),%eax
f01306a3:	8d 50 04             	lea    0x4(%eax),%edx
f01306a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01306a9:	89 10                	mov    %edx,(%eax)
f01306ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01306ae:	8b 00                	mov    (%eax),%eax
f01306b0:	83 e8 04             	sub    $0x4,%eax
f01306b3:	8b 00                	mov    (%eax),%eax
f01306b5:	99                   	cltd   
f01306b6:	eb 18                	jmp    f01306d0 <getint+0x5d>
	else
		return va_arg(*ap, int);
f01306b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01306bb:	8b 00                	mov    (%eax),%eax
f01306bd:	8d 50 04             	lea    0x4(%eax),%edx
f01306c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01306c3:	89 10                	mov    %edx,(%eax)
f01306c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01306c8:	8b 00                	mov    (%eax),%eax
f01306ca:	83 e8 04             	sub    $0x4,%eax
f01306cd:	8b 00                	mov    (%eax),%eax
f01306cf:	99                   	cltd   
}
f01306d0:	5d                   	pop    %ebp
f01306d1:	c3                   	ret    

f01306d2 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01306d2:	55                   	push   %ebp
f01306d3:	89 e5                	mov    %esp,%ebp
f01306d5:	56                   	push   %esi
f01306d6:	53                   	push   %ebx
f01306d7:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01306da:	eb 17                	jmp    f01306f3 <vprintfmt+0x21>
			if (ch == '\0')
f01306dc:	85 db                	test   %ebx,%ebx
f01306de:	0f 84 af 03 00 00    	je     f0130a93 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f01306e4:	83 ec 08             	sub    $0x8,%esp
f01306e7:	ff 75 0c             	pushl  0xc(%ebp)
f01306ea:	53                   	push   %ebx
f01306eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01306ee:	ff d0                	call   *%eax
f01306f0:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01306f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01306f6:	8d 50 01             	lea    0x1(%eax),%edx
f01306f9:	89 55 10             	mov    %edx,0x10(%ebp)
f01306fc:	8a 00                	mov    (%eax),%al
f01306fe:	0f b6 d8             	movzbl %al,%ebx
f0130701:	83 fb 25             	cmp    $0x25,%ebx
f0130704:	75 d6                	jne    f01306dc <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130706:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f013070a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130711:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130718:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f013071f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130726:	8b 45 10             	mov    0x10(%ebp),%eax
f0130729:	8d 50 01             	lea    0x1(%eax),%edx
f013072c:	89 55 10             	mov    %edx,0x10(%ebp)
f013072f:	8a 00                	mov    (%eax),%al
f0130731:	0f b6 d8             	movzbl %al,%ebx
f0130734:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130737:	83 f8 55             	cmp    $0x55,%eax
f013073a:	0f 87 2b 03 00 00    	ja     f0130a6b <vprintfmt+0x399>
f0130740:	8b 04 85 18 ce 13 f0 	mov    -0xfec31e8(,%eax,4),%eax
f0130747:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130749:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f013074d:	eb d7                	jmp    f0130726 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f013074f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130753:	eb d1                	jmp    f0130726 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130755:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f013075c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013075f:	89 d0                	mov    %edx,%eax
f0130761:	c1 e0 02             	shl    $0x2,%eax
f0130764:	01 d0                	add    %edx,%eax
f0130766:	01 c0                	add    %eax,%eax
f0130768:	01 d8                	add    %ebx,%eax
f013076a:	83 e8 30             	sub    $0x30,%eax
f013076d:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130770:	8b 45 10             	mov    0x10(%ebp),%eax
f0130773:	8a 00                	mov    (%eax),%al
f0130775:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130778:	83 fb 2f             	cmp    $0x2f,%ebx
f013077b:	7e 3e                	jle    f01307bb <vprintfmt+0xe9>
f013077d:	83 fb 39             	cmp    $0x39,%ebx
f0130780:	7f 39                	jg     f01307bb <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130782:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130785:	eb d5                	jmp    f013075c <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130787:	8b 45 14             	mov    0x14(%ebp),%eax
f013078a:	83 c0 04             	add    $0x4,%eax
f013078d:	89 45 14             	mov    %eax,0x14(%ebp)
f0130790:	8b 45 14             	mov    0x14(%ebp),%eax
f0130793:	83 e8 04             	sub    $0x4,%eax
f0130796:	8b 00                	mov    (%eax),%eax
f0130798:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f013079b:	eb 1f                	jmp    f01307bc <vprintfmt+0xea>

		case '.':
			if (width < 0)
f013079d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01307a1:	79 83                	jns    f0130726 <vprintfmt+0x54>
				width = 0;
f01307a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01307aa:	e9 77 ff ff ff       	jmp    f0130726 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01307af:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01307b6:	e9 6b ff ff ff       	jmp    f0130726 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01307bb:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01307bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01307c0:	0f 89 60 ff ff ff    	jns    f0130726 <vprintfmt+0x54>
				width = precision, precision = -1;
f01307c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01307c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01307cc:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01307d3:	e9 4e ff ff ff       	jmp    f0130726 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01307d8:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01307db:	e9 46 ff ff ff       	jmp    f0130726 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01307e0:	8b 45 14             	mov    0x14(%ebp),%eax
f01307e3:	83 c0 04             	add    $0x4,%eax
f01307e6:	89 45 14             	mov    %eax,0x14(%ebp)
f01307e9:	8b 45 14             	mov    0x14(%ebp),%eax
f01307ec:	83 e8 04             	sub    $0x4,%eax
f01307ef:	8b 00                	mov    (%eax),%eax
f01307f1:	83 ec 08             	sub    $0x8,%esp
f01307f4:	ff 75 0c             	pushl  0xc(%ebp)
f01307f7:	50                   	push   %eax
f01307f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01307fb:	ff d0                	call   *%eax
f01307fd:	83 c4 10             	add    $0x10,%esp
			break;
f0130800:	e9 89 02 00 00       	jmp    f0130a8e <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130805:	8b 45 14             	mov    0x14(%ebp),%eax
f0130808:	83 c0 04             	add    $0x4,%eax
f013080b:	89 45 14             	mov    %eax,0x14(%ebp)
f013080e:	8b 45 14             	mov    0x14(%ebp),%eax
f0130811:	83 e8 04             	sub    $0x4,%eax
f0130814:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130816:	85 db                	test   %ebx,%ebx
f0130818:	79 02                	jns    f013081c <vprintfmt+0x14a>
				err = -err;
f013081a:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013081c:	83 fb 64             	cmp    $0x64,%ebx
f013081f:	7f 0b                	jg     f013082c <vprintfmt+0x15a>
f0130821:	8b 34 9d 60 cc 13 f0 	mov    -0xfec33a0(,%ebx,4),%esi
f0130828:	85 f6                	test   %esi,%esi
f013082a:	75 19                	jne    f0130845 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013082c:	53                   	push   %ebx
f013082d:	68 05 ce 13 f0       	push   $0xf013ce05
f0130832:	ff 75 0c             	pushl  0xc(%ebp)
f0130835:	ff 75 08             	pushl  0x8(%ebp)
f0130838:	e8 5e 02 00 00       	call   f0130a9b <printfmt>
f013083d:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130840:	e9 49 02 00 00       	jmp    f0130a8e <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130845:	56                   	push   %esi
f0130846:	68 0e ce 13 f0       	push   $0xf013ce0e
f013084b:	ff 75 0c             	pushl  0xc(%ebp)
f013084e:	ff 75 08             	pushl  0x8(%ebp)
f0130851:	e8 45 02 00 00       	call   f0130a9b <printfmt>
f0130856:	83 c4 10             	add    $0x10,%esp
			break;
f0130859:	e9 30 02 00 00       	jmp    f0130a8e <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f013085e:	8b 45 14             	mov    0x14(%ebp),%eax
f0130861:	83 c0 04             	add    $0x4,%eax
f0130864:	89 45 14             	mov    %eax,0x14(%ebp)
f0130867:	8b 45 14             	mov    0x14(%ebp),%eax
f013086a:	83 e8 04             	sub    $0x4,%eax
f013086d:	8b 30                	mov    (%eax),%esi
f013086f:	85 f6                	test   %esi,%esi
f0130871:	75 05                	jne    f0130878 <vprintfmt+0x1a6>
				p = "(null)";
f0130873:	be 11 ce 13 f0       	mov    $0xf013ce11,%esi
			if (width > 0 && padc != '-')
f0130878:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013087c:	7e 6d                	jle    f01308eb <vprintfmt+0x219>
f013087e:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130882:	74 67                	je     f01308eb <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130884:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130887:	83 ec 08             	sub    $0x8,%esp
f013088a:	50                   	push   %eax
f013088b:	56                   	push   %esi
f013088c:	e8 12 05 00 00       	call   f0130da3 <strnlen>
f0130891:	83 c4 10             	add    $0x10,%esp
f0130894:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130897:	eb 16                	jmp    f01308af <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130899:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f013089d:	83 ec 08             	sub    $0x8,%esp
f01308a0:	ff 75 0c             	pushl  0xc(%ebp)
f01308a3:	50                   	push   %eax
f01308a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01308a7:	ff d0                	call   *%eax
f01308a9:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01308ac:	ff 4d e4             	decl   -0x1c(%ebp)
f01308af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01308b3:	7f e4                	jg     f0130899 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01308b5:	eb 34                	jmp    f01308eb <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01308b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01308bb:	74 1c                	je     f01308d9 <vprintfmt+0x207>
f01308bd:	83 fb 1f             	cmp    $0x1f,%ebx
f01308c0:	7e 05                	jle    f01308c7 <vprintfmt+0x1f5>
f01308c2:	83 fb 7e             	cmp    $0x7e,%ebx
f01308c5:	7e 12                	jle    f01308d9 <vprintfmt+0x207>
					putch('?', putdat);
f01308c7:	83 ec 08             	sub    $0x8,%esp
f01308ca:	ff 75 0c             	pushl  0xc(%ebp)
f01308cd:	6a 3f                	push   $0x3f
f01308cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01308d2:	ff d0                	call   *%eax
f01308d4:	83 c4 10             	add    $0x10,%esp
f01308d7:	eb 0f                	jmp    f01308e8 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01308d9:	83 ec 08             	sub    $0x8,%esp
f01308dc:	ff 75 0c             	pushl  0xc(%ebp)
f01308df:	53                   	push   %ebx
f01308e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01308e3:	ff d0                	call   *%eax
f01308e5:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01308e8:	ff 4d e4             	decl   -0x1c(%ebp)
f01308eb:	89 f0                	mov    %esi,%eax
f01308ed:	8d 70 01             	lea    0x1(%eax),%esi
f01308f0:	8a 00                	mov    (%eax),%al
f01308f2:	0f be d8             	movsbl %al,%ebx
f01308f5:	85 db                	test   %ebx,%ebx
f01308f7:	74 24                	je     f013091d <vprintfmt+0x24b>
f01308f9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01308fd:	78 b8                	js     f01308b7 <vprintfmt+0x1e5>
f01308ff:	ff 4d e0             	decl   -0x20(%ebp)
f0130902:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130906:	79 af                	jns    f01308b7 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130908:	eb 13                	jmp    f013091d <vprintfmt+0x24b>
				putch(' ', putdat);
f013090a:	83 ec 08             	sub    $0x8,%esp
f013090d:	ff 75 0c             	pushl  0xc(%ebp)
f0130910:	6a 20                	push   $0x20
f0130912:	8b 45 08             	mov    0x8(%ebp),%eax
f0130915:	ff d0                	call   *%eax
f0130917:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013091a:	ff 4d e4             	decl   -0x1c(%ebp)
f013091d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130921:	7f e7                	jg     f013090a <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130923:	e9 66 01 00 00       	jmp    f0130a8e <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130928:	83 ec 08             	sub    $0x8,%esp
f013092b:	ff 75 e8             	pushl  -0x18(%ebp)
f013092e:	8d 45 14             	lea    0x14(%ebp),%eax
f0130931:	50                   	push   %eax
f0130932:	e8 3c fd ff ff       	call   f0130673 <getint>
f0130937:	83 c4 10             	add    $0x10,%esp
f013093a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013093d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130940:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130943:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130946:	85 d2                	test   %edx,%edx
f0130948:	79 23                	jns    f013096d <vprintfmt+0x29b>
				putch('-', putdat);
f013094a:	83 ec 08             	sub    $0x8,%esp
f013094d:	ff 75 0c             	pushl  0xc(%ebp)
f0130950:	6a 2d                	push   $0x2d
f0130952:	8b 45 08             	mov    0x8(%ebp),%eax
f0130955:	ff d0                	call   *%eax
f0130957:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f013095a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013095d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130960:	f7 d8                	neg    %eax
f0130962:	83 d2 00             	adc    $0x0,%edx
f0130965:	f7 da                	neg    %edx
f0130967:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013096a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013096d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130974:	e9 bc 00 00 00       	jmp    f0130a35 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130979:	83 ec 08             	sub    $0x8,%esp
f013097c:	ff 75 e8             	pushl  -0x18(%ebp)
f013097f:	8d 45 14             	lea    0x14(%ebp),%eax
f0130982:	50                   	push   %eax
f0130983:	e8 84 fc ff ff       	call   f013060c <getuint>
f0130988:	83 c4 10             	add    $0x10,%esp
f013098b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013098e:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130991:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130998:	e9 98 00 00 00       	jmp    f0130a35 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f013099d:	83 ec 08             	sub    $0x8,%esp
f01309a0:	ff 75 0c             	pushl  0xc(%ebp)
f01309a3:	6a 58                	push   $0x58
f01309a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01309a8:	ff d0                	call   *%eax
f01309aa:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01309ad:	83 ec 08             	sub    $0x8,%esp
f01309b0:	ff 75 0c             	pushl  0xc(%ebp)
f01309b3:	6a 58                	push   $0x58
f01309b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01309b8:	ff d0                	call   *%eax
f01309ba:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01309bd:	83 ec 08             	sub    $0x8,%esp
f01309c0:	ff 75 0c             	pushl  0xc(%ebp)
f01309c3:	6a 58                	push   $0x58
f01309c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01309c8:	ff d0                	call   *%eax
f01309ca:	83 c4 10             	add    $0x10,%esp
			break;
f01309cd:	e9 bc 00 00 00       	jmp    f0130a8e <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01309d2:	83 ec 08             	sub    $0x8,%esp
f01309d5:	ff 75 0c             	pushl  0xc(%ebp)
f01309d8:	6a 30                	push   $0x30
f01309da:	8b 45 08             	mov    0x8(%ebp),%eax
f01309dd:	ff d0                	call   *%eax
f01309df:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01309e2:	83 ec 08             	sub    $0x8,%esp
f01309e5:	ff 75 0c             	pushl  0xc(%ebp)
f01309e8:	6a 78                	push   $0x78
f01309ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01309ed:	ff d0                	call   *%eax
f01309ef:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01309f2:	8b 45 14             	mov    0x14(%ebp),%eax
f01309f5:	83 c0 04             	add    $0x4,%eax
f01309f8:	89 45 14             	mov    %eax,0x14(%ebp)
f01309fb:	8b 45 14             	mov    0x14(%ebp),%eax
f01309fe:	83 e8 04             	sub    $0x4,%eax
f0130a01:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130a0d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130a14:	eb 1f                	jmp    f0130a35 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130a16:	83 ec 08             	sub    $0x8,%esp
f0130a19:	ff 75 e8             	pushl  -0x18(%ebp)
f0130a1c:	8d 45 14             	lea    0x14(%ebp),%eax
f0130a1f:	50                   	push   %eax
f0130a20:	e8 e7 fb ff ff       	call   f013060c <getuint>
f0130a25:	83 c4 10             	add    $0x10,%esp
f0130a28:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130a2b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130a2e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0130a35:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130a39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130a3c:	83 ec 04             	sub    $0x4,%esp
f0130a3f:	52                   	push   %edx
f0130a40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130a43:	50                   	push   %eax
f0130a44:	ff 75 f4             	pushl  -0xc(%ebp)
f0130a47:	ff 75 f0             	pushl  -0x10(%ebp)
f0130a4a:	ff 75 0c             	pushl  0xc(%ebp)
f0130a4d:	ff 75 08             	pushl  0x8(%ebp)
f0130a50:	e8 00 fb ff ff       	call   f0130555 <printnum>
f0130a55:	83 c4 20             	add    $0x20,%esp
			break;
f0130a58:	eb 34                	jmp    f0130a8e <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130a5a:	83 ec 08             	sub    $0x8,%esp
f0130a5d:	ff 75 0c             	pushl  0xc(%ebp)
f0130a60:	53                   	push   %ebx
f0130a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a64:	ff d0                	call   *%eax
f0130a66:	83 c4 10             	add    $0x10,%esp
			break;
f0130a69:	eb 23                	jmp    f0130a8e <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130a6b:	83 ec 08             	sub    $0x8,%esp
f0130a6e:	ff 75 0c             	pushl  0xc(%ebp)
f0130a71:	6a 25                	push   $0x25
f0130a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a76:	ff d0                	call   *%eax
f0130a78:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130a7b:	ff 4d 10             	decl   0x10(%ebp)
f0130a7e:	eb 03                	jmp    f0130a83 <vprintfmt+0x3b1>
f0130a80:	ff 4d 10             	decl   0x10(%ebp)
f0130a83:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a86:	48                   	dec    %eax
f0130a87:	8a 00                	mov    (%eax),%al
f0130a89:	3c 25                	cmp    $0x25,%al
f0130a8b:	75 f3                	jne    f0130a80 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130a8d:	90                   	nop
		}
	}
f0130a8e:	e9 47 fc ff ff       	jmp    f01306da <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130a93:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130a94:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130a97:	5b                   	pop    %ebx
f0130a98:	5e                   	pop    %esi
f0130a99:	5d                   	pop    %ebp
f0130a9a:	c3                   	ret    

f0130a9b <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130a9b:	55                   	push   %ebp
f0130a9c:	89 e5                	mov    %esp,%ebp
f0130a9e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130aa1:	8d 45 10             	lea    0x10(%ebp),%eax
f0130aa4:	83 c0 04             	add    $0x4,%eax
f0130aa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130aaa:	8b 45 10             	mov    0x10(%ebp),%eax
f0130aad:	ff 75 f4             	pushl  -0xc(%ebp)
f0130ab0:	50                   	push   %eax
f0130ab1:	ff 75 0c             	pushl  0xc(%ebp)
f0130ab4:	ff 75 08             	pushl  0x8(%ebp)
f0130ab7:	e8 16 fc ff ff       	call   f01306d2 <vprintfmt>
f0130abc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130abf:	90                   	nop
f0130ac0:	c9                   	leave  
f0130ac1:	c3                   	ret    

f0130ac2 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130ac2:	55                   	push   %ebp
f0130ac3:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ac8:	8b 40 08             	mov    0x8(%eax),%eax
f0130acb:	8d 50 01             	lea    0x1(%eax),%edx
f0130ace:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ad1:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ad7:	8b 10                	mov    (%eax),%edx
f0130ad9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130adc:	8b 40 04             	mov    0x4(%eax),%eax
f0130adf:	39 c2                	cmp    %eax,%edx
f0130ae1:	73 12                	jae    f0130af5 <sprintputch+0x33>
		*b->buf++ = ch;
f0130ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ae6:	8b 00                	mov    (%eax),%eax
f0130ae8:	8d 48 01             	lea    0x1(%eax),%ecx
f0130aeb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130aee:	89 0a                	mov    %ecx,(%edx)
f0130af0:	8b 55 08             	mov    0x8(%ebp),%edx
f0130af3:	88 10                	mov    %dl,(%eax)
}
f0130af5:	90                   	nop
f0130af6:	5d                   	pop    %ebp
f0130af7:	c3                   	ret    

f0130af8 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130af8:	55                   	push   %ebp
f0130af9:	89 e5                	mov    %esp,%ebp
f0130afb:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130afe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b01:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130b04:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b07:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130b0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b0d:	01 d0                	add    %edx,%eax
f0130b0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130b12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130b19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130b1d:	74 06                	je     f0130b25 <vsnprintf+0x2d>
f0130b1f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130b23:	7f 07                	jg     f0130b2c <vsnprintf+0x34>
		return -E_INVAL;
f0130b25:	b8 03 00 00 00       	mov    $0x3,%eax
f0130b2a:	eb 20                	jmp    f0130b4c <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130b2c:	ff 75 14             	pushl  0x14(%ebp)
f0130b2f:	ff 75 10             	pushl  0x10(%ebp)
f0130b32:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0130b35:	50                   	push   %eax
f0130b36:	68 c2 0a 13 f0       	push   $0xf0130ac2
f0130b3b:	e8 92 fb ff ff       	call   f01306d2 <vprintfmt>
f0130b40:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130b43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130b46:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130b4c:	c9                   	leave  
f0130b4d:	c3                   	ret    

f0130b4e <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130b4e:	55                   	push   %ebp
f0130b4f:	89 e5                	mov    %esp,%ebp
f0130b51:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130b54:	8d 45 10             	lea    0x10(%ebp),%eax
f0130b57:	83 c0 04             	add    $0x4,%eax
f0130b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130b5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b60:	ff 75 f4             	pushl  -0xc(%ebp)
f0130b63:	50                   	push   %eax
f0130b64:	ff 75 0c             	pushl  0xc(%ebp)
f0130b67:	ff 75 08             	pushl  0x8(%ebp)
f0130b6a:	e8 89 ff ff ff       	call   f0130af8 <vsnprintf>
f0130b6f:	83 c4 10             	add    $0x10,%esp
f0130b72:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130b75:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130b78:	c9                   	leave  
f0130b79:	c3                   	ret    

f0130b7a <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130b7a:	55                   	push   %ebp
f0130b7b:	89 e5                	mov    %esp,%ebp
f0130b7d:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130b80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130b84:	74 13                	je     f0130b99 <readline+0x1f>
		cprintf("%s", prompt);
f0130b86:	83 ec 08             	sub    $0x8,%esp
f0130b89:	ff 75 08             	pushl  0x8(%ebp)
f0130b8c:	68 70 cf 13 f0       	push   $0xf013cf70
f0130b91:	e8 ec 00 fd ff       	call   f0100c82 <cprintf>
f0130b96:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130b99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130ba0:	83 ec 0c             	sub    $0xc,%esp
f0130ba3:	6a 00                	push   $0x0
f0130ba5:	e8 85 00 fd ff       	call   f0100c2f <iscons>
f0130baa:	83 c4 10             	add    $0x10,%esp
f0130bad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130bb0:	e8 61 00 fd ff       	call   f0100c16 <getchar>
f0130bb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130bb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130bbc:	79 22                	jns    f0130be0 <readline+0x66>
			if (c != -E_EOF)
f0130bbe:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130bc2:	0f 84 ad 00 00 00    	je     f0130c75 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130bc8:	83 ec 08             	sub    $0x8,%esp
f0130bcb:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bce:	68 73 cf 13 f0       	push   $0xf013cf73
f0130bd3:	e8 aa 00 fd ff       	call   f0100c82 <cprintf>
f0130bd8:	83 c4 10             	add    $0x10,%esp
			return;
f0130bdb:	e9 95 00 00 00       	jmp    f0130c75 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130be0:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130be4:	7e 34                	jle    f0130c1a <readline+0xa0>
f0130be6:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130bed:	7f 2b                	jg     f0130c1a <readline+0xa0>
			if (echoing)
f0130bef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130bf3:	74 0e                	je     f0130c03 <readline+0x89>
				cputchar(c);
f0130bf5:	83 ec 0c             	sub    $0xc,%esp
f0130bf8:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bfb:	e8 ff ff fc ff       	call   f0100bff <cputchar>
f0130c00:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c06:	8d 50 01             	lea    0x1(%eax),%edx
f0130c09:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130c0c:	89 c2                	mov    %eax,%edx
f0130c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c11:	01 d0                	add    %edx,%eax
f0130c13:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130c16:	88 10                	mov    %dl,(%eax)
f0130c18:	eb 56                	jmp    f0130c70 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130c1a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130c1e:	75 1f                	jne    f0130c3f <readline+0xc5>
f0130c20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130c24:	7e 19                	jle    f0130c3f <readline+0xc5>
			if (echoing)
f0130c26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130c2a:	74 0e                	je     f0130c3a <readline+0xc0>
				cputchar(c);
f0130c2c:	83 ec 0c             	sub    $0xc,%esp
f0130c2f:	ff 75 ec             	pushl  -0x14(%ebp)
f0130c32:	e8 c8 ff fc ff       	call   f0100bff <cputchar>
f0130c37:	83 c4 10             	add    $0x10,%esp

			i--;
f0130c3a:	ff 4d f4             	decl   -0xc(%ebp)
f0130c3d:	eb 31                	jmp    f0130c70 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130c3f:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130c43:	74 0a                	je     f0130c4f <readline+0xd5>
f0130c45:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130c49:	0f 85 61 ff ff ff    	jne    f0130bb0 <readline+0x36>
			if (echoing)
f0130c4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130c53:	74 0e                	je     f0130c63 <readline+0xe9>
				cputchar(c);
f0130c55:	83 ec 0c             	sub    $0xc,%esp
f0130c58:	ff 75 ec             	pushl  -0x14(%ebp)
f0130c5b:	e8 9f ff fc ff       	call   f0100bff <cputchar>
f0130c60:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130c63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c69:	01 d0                	add    %edx,%eax
f0130c6b:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130c6e:	eb 06                	jmp    f0130c76 <readline+0xfc>
		}
	}
f0130c70:	e9 3b ff ff ff       	jmp    f0130bb0 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130c75:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130c76:	c9                   	leave  
f0130c77:	c3                   	ret    

f0130c78 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130c78:	55                   	push   %ebp
f0130c79:	89 e5                	mov    %esp,%ebp
f0130c7b:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130c7e:	e8 4f bf fd ff       	call   f010cbd2 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130c83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130c87:	74 13                	je     f0130c9c <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130c89:	83 ec 08             	sub    $0x8,%esp
f0130c8c:	ff 75 08             	pushl  0x8(%ebp)
f0130c8f:	68 70 cf 13 f0       	push   $0xf013cf70
f0130c94:	e8 e9 ff fc ff       	call   f0100c82 <cprintf>
f0130c99:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130c9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130ca3:	83 ec 0c             	sub    $0xc,%esp
f0130ca6:	6a 00                	push   $0x0
f0130ca8:	e8 82 ff fc ff       	call   f0100c2f <iscons>
f0130cad:	83 c4 10             	add    $0x10,%esp
f0130cb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130cb3:	e8 5e ff fc ff       	call   f0100c16 <getchar>
f0130cb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130cbb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130cbf:	79 23                	jns    f0130ce4 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130cc1:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130cc5:	74 13                	je     f0130cda <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130cc7:	83 ec 08             	sub    $0x8,%esp
f0130cca:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ccd:	68 73 cf 13 f0       	push   $0xf013cf73
f0130cd2:	e8 ab ff fc ff       	call   f0100c82 <cprintf>
f0130cd7:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130cda:	e8 0d bf fd ff       	call   f010cbec <sys_enable_interrupt>
			return;
f0130cdf:	e9 9a 00 00 00       	jmp    f0130d7e <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130ce4:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130ce8:	7e 34                	jle    f0130d1e <atomic_readline+0xa6>
f0130cea:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130cf1:	7f 2b                	jg     f0130d1e <atomic_readline+0xa6>
			if (echoing)
f0130cf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130cf7:	74 0e                	je     f0130d07 <atomic_readline+0x8f>
				cputchar(c);
f0130cf9:	83 ec 0c             	sub    $0xc,%esp
f0130cfc:	ff 75 ec             	pushl  -0x14(%ebp)
f0130cff:	e8 fb fe fc ff       	call   f0100bff <cputchar>
f0130d04:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130d0a:	8d 50 01             	lea    0x1(%eax),%edx
f0130d0d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130d10:	89 c2                	mov    %eax,%edx
f0130d12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d15:	01 d0                	add    %edx,%eax
f0130d17:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130d1a:	88 10                	mov    %dl,(%eax)
f0130d1c:	eb 5b                	jmp    f0130d79 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130d1e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130d22:	75 1f                	jne    f0130d43 <atomic_readline+0xcb>
f0130d24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130d28:	7e 19                	jle    f0130d43 <atomic_readline+0xcb>
			if (echoing)
f0130d2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d2e:	74 0e                	je     f0130d3e <atomic_readline+0xc6>
				cputchar(c);
f0130d30:	83 ec 0c             	sub    $0xc,%esp
f0130d33:	ff 75 ec             	pushl  -0x14(%ebp)
f0130d36:	e8 c4 fe fc ff       	call   f0100bff <cputchar>
f0130d3b:	83 c4 10             	add    $0x10,%esp
			i--;
f0130d3e:	ff 4d f4             	decl   -0xc(%ebp)
f0130d41:	eb 36                	jmp    f0130d79 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130d43:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130d47:	74 0a                	je     f0130d53 <atomic_readline+0xdb>
f0130d49:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130d4d:	0f 85 60 ff ff ff    	jne    f0130cb3 <atomic_readline+0x3b>
			if (echoing)
f0130d53:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d57:	74 0e                	je     f0130d67 <atomic_readline+0xef>
				cputchar(c);
f0130d59:	83 ec 0c             	sub    $0xc,%esp
f0130d5c:	ff 75 ec             	pushl  -0x14(%ebp)
f0130d5f:	e8 9b fe fc ff       	call   f0100bff <cputchar>
f0130d64:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130d67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130d6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d6d:	01 d0                	add    %edx,%eax
f0130d6f:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130d72:	e8 75 be fd ff       	call   f010cbec <sys_enable_interrupt>
			return;
f0130d77:	eb 05                	jmp    f0130d7e <atomic_readline+0x106>
		}
	}
f0130d79:	e9 35 ff ff ff       	jmp    f0130cb3 <atomic_readline+0x3b>
}
f0130d7e:	c9                   	leave  
f0130d7f:	c3                   	ret    

f0130d80 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130d80:	55                   	push   %ebp
f0130d81:	89 e5                	mov    %esp,%ebp
f0130d83:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130d86:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130d8d:	eb 06                	jmp    f0130d95 <strlen+0x15>
		n++;
f0130d8f:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130d92:	ff 45 08             	incl   0x8(%ebp)
f0130d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d98:	8a 00                	mov    (%eax),%al
f0130d9a:	84 c0                	test   %al,%al
f0130d9c:	75 f1                	jne    f0130d8f <strlen+0xf>
		n++;
	return n;
f0130d9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130da1:	c9                   	leave  
f0130da2:	c3                   	ret    

f0130da3 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130da3:	55                   	push   %ebp
f0130da4:	89 e5                	mov    %esp,%ebp
f0130da6:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130da9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130db0:	eb 09                	jmp    f0130dbb <strnlen+0x18>
		n++;
f0130db2:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130db5:	ff 45 08             	incl   0x8(%ebp)
f0130db8:	ff 4d 0c             	decl   0xc(%ebp)
f0130dbb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130dbf:	74 09                	je     f0130dca <strnlen+0x27>
f0130dc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc4:	8a 00                	mov    (%eax),%al
f0130dc6:	84 c0                	test   %al,%al
f0130dc8:	75 e8                	jne    f0130db2 <strnlen+0xf>
		n++;
	return n;
f0130dca:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130dcd:	c9                   	leave  
f0130dce:	c3                   	ret    

f0130dcf <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0130dcf:	55                   	push   %ebp
f0130dd0:	89 e5                	mov    %esp,%ebp
f0130dd2:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dd8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130ddb:	90                   	nop
f0130ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ddf:	8d 50 01             	lea    0x1(%eax),%edx
f0130de2:	89 55 08             	mov    %edx,0x8(%ebp)
f0130de5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130de8:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130deb:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130dee:	8a 12                	mov    (%edx),%dl
f0130df0:	88 10                	mov    %dl,(%eax)
f0130df2:	8a 00                	mov    (%eax),%al
f0130df4:	84 c0                	test   %al,%al
f0130df6:	75 e4                	jne    f0130ddc <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130df8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130dfb:	c9                   	leave  
f0130dfc:	c3                   	ret    

f0130dfd <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130dfd:	55                   	push   %ebp
f0130dfe:	89 e5                	mov    %esp,%ebp
f0130e00:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0130e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e06:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130e09:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130e10:	eb 1f                	jmp    f0130e31 <strncpy+0x34>
		*dst++ = *src;
f0130e12:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e15:	8d 50 01             	lea    0x1(%eax),%edx
f0130e18:	89 55 08             	mov    %edx,0x8(%ebp)
f0130e1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130e1e:	8a 12                	mov    (%edx),%dl
f0130e20:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e25:	8a 00                	mov    (%eax),%al
f0130e27:	84 c0                	test   %al,%al
f0130e29:	74 03                	je     f0130e2e <strncpy+0x31>
			src++;
f0130e2b:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130e2e:	ff 45 fc             	incl   -0x4(%ebp)
f0130e31:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e34:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130e37:	72 d9                	jb     f0130e12 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130e39:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130e3c:	c9                   	leave  
f0130e3d:	c3                   	ret    

f0130e3e <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130e3e:	55                   	push   %ebp
f0130e3f:	89 e5                	mov    %esp,%ebp
f0130e41:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e47:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130e4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130e4e:	74 30                	je     f0130e80 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130e50:	eb 16                	jmp    f0130e68 <strlcpy+0x2a>
			*dst++ = *src++;
f0130e52:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e55:	8d 50 01             	lea    0x1(%eax),%edx
f0130e58:	89 55 08             	mov    %edx,0x8(%ebp)
f0130e5b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130e5e:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130e61:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130e64:	8a 12                	mov    (%edx),%dl
f0130e66:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130e68:	ff 4d 10             	decl   0x10(%ebp)
f0130e6b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130e6f:	74 09                	je     f0130e7a <strlcpy+0x3c>
f0130e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e74:	8a 00                	mov    (%eax),%al
f0130e76:	84 c0                	test   %al,%al
f0130e78:	75 d8                	jne    f0130e52 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130e7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e7d:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130e80:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e83:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e86:	29 c2                	sub    %eax,%edx
f0130e88:	89 d0                	mov    %edx,%eax
}
f0130e8a:	c9                   	leave  
f0130e8b:	c3                   	ret    

f0130e8c <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130e8c:	55                   	push   %ebp
f0130e8d:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130e8f:	eb 06                	jmp    f0130e97 <strcmp+0xb>
		p++, q++;
f0130e91:	ff 45 08             	incl   0x8(%ebp)
f0130e94:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130e97:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e9a:	8a 00                	mov    (%eax),%al
f0130e9c:	84 c0                	test   %al,%al
f0130e9e:	74 0e                	je     f0130eae <strcmp+0x22>
f0130ea0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea3:	8a 10                	mov    (%eax),%dl
f0130ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ea8:	8a 00                	mov    (%eax),%al
f0130eaa:	38 c2                	cmp    %al,%dl
f0130eac:	74 e3                	je     f0130e91 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130eae:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eb1:	8a 00                	mov    (%eax),%al
f0130eb3:	0f b6 d0             	movzbl %al,%edx
f0130eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130eb9:	8a 00                	mov    (%eax),%al
f0130ebb:	0f b6 c0             	movzbl %al,%eax
f0130ebe:	29 c2                	sub    %eax,%edx
f0130ec0:	89 d0                	mov    %edx,%eax
}
f0130ec2:	5d                   	pop    %ebp
f0130ec3:	c3                   	ret    

f0130ec4 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130ec4:	55                   	push   %ebp
f0130ec5:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130ec7:	eb 09                	jmp    f0130ed2 <strncmp+0xe>
		n--, p++, q++;
f0130ec9:	ff 4d 10             	decl   0x10(%ebp)
f0130ecc:	ff 45 08             	incl   0x8(%ebp)
f0130ecf:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0130ed2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130ed6:	74 17                	je     f0130eef <strncmp+0x2b>
f0130ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130edb:	8a 00                	mov    (%eax),%al
f0130edd:	84 c0                	test   %al,%al
f0130edf:	74 0e                	je     f0130eef <strncmp+0x2b>
f0130ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee4:	8a 10                	mov    (%eax),%dl
f0130ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ee9:	8a 00                	mov    (%eax),%al
f0130eeb:	38 c2                	cmp    %al,%dl
f0130eed:	74 da                	je     f0130ec9 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0130eef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130ef3:	75 07                	jne    f0130efc <strncmp+0x38>
		return 0;
f0130ef5:	b8 00 00 00 00       	mov    $0x0,%eax
f0130efa:	eb 14                	jmp    f0130f10 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0130efc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eff:	8a 00                	mov    (%eax),%al
f0130f01:	0f b6 d0             	movzbl %al,%edx
f0130f04:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f07:	8a 00                	mov    (%eax),%al
f0130f09:	0f b6 c0             	movzbl %al,%eax
f0130f0c:	29 c2                	sub    %eax,%edx
f0130f0e:	89 d0                	mov    %edx,%eax
}
f0130f10:	5d                   	pop    %ebp
f0130f11:	c3                   	ret    

f0130f12 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0130f12:	55                   	push   %ebp
f0130f13:	89 e5                	mov    %esp,%ebp
f0130f15:	83 ec 04             	sub    $0x4,%esp
f0130f18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f1b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130f1e:	eb 12                	jmp    f0130f32 <strchr+0x20>
		if (*s == c)
f0130f20:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f23:	8a 00                	mov    (%eax),%al
f0130f25:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130f28:	75 05                	jne    f0130f2f <strchr+0x1d>
			return (char *) s;
f0130f2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f2d:	eb 11                	jmp    f0130f40 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130f2f:	ff 45 08             	incl   0x8(%ebp)
f0130f32:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f35:	8a 00                	mov    (%eax),%al
f0130f37:	84 c0                	test   %al,%al
f0130f39:	75 e5                	jne    f0130f20 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130f3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130f40:	c9                   	leave  
f0130f41:	c3                   	ret    

f0130f42 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130f42:	55                   	push   %ebp
f0130f43:	89 e5                	mov    %esp,%ebp
f0130f45:	83 ec 04             	sub    $0x4,%esp
f0130f48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f4b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130f4e:	eb 0d                	jmp    f0130f5d <strfind+0x1b>
		if (*s == c)
f0130f50:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f53:	8a 00                	mov    (%eax),%al
f0130f55:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130f58:	74 0e                	je     f0130f68 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130f5a:	ff 45 08             	incl   0x8(%ebp)
f0130f5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f60:	8a 00                	mov    (%eax),%al
f0130f62:	84 c0                	test   %al,%al
f0130f64:	75 ea                	jne    f0130f50 <strfind+0xe>
f0130f66:	eb 01                	jmp    f0130f69 <strfind+0x27>
		if (*s == c)
			break;
f0130f68:	90                   	nop
	return (char *) s;
f0130f69:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130f6c:	c9                   	leave  
f0130f6d:	c3                   	ret    

f0130f6e <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130f6e:	55                   	push   %ebp
f0130f6f:	89 e5                	mov    %esp,%ebp
f0130f71:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f77:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130f7a:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f7d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130f80:	eb 0e                	jmp    f0130f90 <memset+0x22>
		*p++ = c;
f0130f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f85:	8d 50 01             	lea    0x1(%eax),%edx
f0130f88:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130f8e:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130f90:	ff 4d f8             	decl   -0x8(%ebp)
f0130f93:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130f97:	79 e9                	jns    f0130f82 <memset+0x14>
		*p++ = c;

	return v;
f0130f99:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130f9c:	c9                   	leave  
f0130f9d:	c3                   	ret    

f0130f9e <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130f9e:	55                   	push   %ebp
f0130f9f:	89 e5                	mov    %esp,%ebp
f0130fa1:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130faa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fad:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130fb0:	eb 16                	jmp    f0130fc8 <memcpy+0x2a>
		*d++ = *s++;
f0130fb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130fb5:	8d 50 01             	lea    0x1(%eax),%edx
f0130fb8:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130fbe:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130fc1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130fc4:	8a 12                	mov    (%edx),%dl
f0130fc6:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130fc8:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fcb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130fce:	89 55 10             	mov    %edx,0x10(%ebp)
f0130fd1:	85 c0                	test   %eax,%eax
f0130fd3:	75 dd                	jne    f0130fb2 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130fd5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130fd8:	c9                   	leave  
f0130fd9:	c3                   	ret    

f0130fda <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130fda:	55                   	push   %ebp
f0130fdb:	89 e5                	mov    %esp,%ebp
f0130fdd:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fe3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130fe6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fe9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130fef:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130ff2:	73 50                	jae    f0131044 <memmove+0x6a>
f0130ff4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130ff7:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ffa:	01 d0                	add    %edx,%eax
f0130ffc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130fff:	76 43                	jbe    f0131044 <memmove+0x6a>
		s += n;
f0131001:	8b 45 10             	mov    0x10(%ebp),%eax
f0131004:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131007:	8b 45 10             	mov    0x10(%ebp),%eax
f013100a:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f013100d:	eb 10                	jmp    f013101f <memmove+0x45>
			*--d = *--s;
f013100f:	ff 4d f8             	decl   -0x8(%ebp)
f0131012:	ff 4d fc             	decl   -0x4(%ebp)
f0131015:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131018:	8a 10                	mov    (%eax),%dl
f013101a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013101d:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f013101f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131022:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131025:	89 55 10             	mov    %edx,0x10(%ebp)
f0131028:	85 c0                	test   %eax,%eax
f013102a:	75 e3                	jne    f013100f <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f013102c:	eb 23                	jmp    f0131051 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f013102e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131031:	8d 50 01             	lea    0x1(%eax),%edx
f0131034:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131037:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013103a:	8d 4a 01             	lea    0x1(%edx),%ecx
f013103d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131040:	8a 12                	mov    (%edx),%dl
f0131042:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131044:	8b 45 10             	mov    0x10(%ebp),%eax
f0131047:	8d 50 ff             	lea    -0x1(%eax),%edx
f013104a:	89 55 10             	mov    %edx,0x10(%ebp)
f013104d:	85 c0                	test   %eax,%eax
f013104f:	75 dd                	jne    f013102e <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131051:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131054:	c9                   	leave  
f0131055:	c3                   	ret    

f0131056 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131056:	55                   	push   %ebp
f0131057:	89 e5                	mov    %esp,%ebp
f0131059:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f013105c:	8b 45 08             	mov    0x8(%ebp),%eax
f013105f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131062:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131065:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131068:	eb 2a                	jmp    f0131094 <memcmp+0x3e>
		if (*s1 != *s2)
f013106a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013106d:	8a 10                	mov    (%eax),%dl
f013106f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131072:	8a 00                	mov    (%eax),%al
f0131074:	38 c2                	cmp    %al,%dl
f0131076:	74 16                	je     f013108e <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131078:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013107b:	8a 00                	mov    (%eax),%al
f013107d:	0f b6 d0             	movzbl %al,%edx
f0131080:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131083:	8a 00                	mov    (%eax),%al
f0131085:	0f b6 c0             	movzbl %al,%eax
f0131088:	29 c2                	sub    %eax,%edx
f013108a:	89 d0                	mov    %edx,%eax
f013108c:	eb 18                	jmp    f01310a6 <memcmp+0x50>
		s1++, s2++;
f013108e:	ff 45 fc             	incl   -0x4(%ebp)
f0131091:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131094:	8b 45 10             	mov    0x10(%ebp),%eax
f0131097:	8d 50 ff             	lea    -0x1(%eax),%edx
f013109a:	89 55 10             	mov    %edx,0x10(%ebp)
f013109d:	85 c0                	test   %eax,%eax
f013109f:	75 c9                	jne    f013106a <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01310a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01310a6:	c9                   	leave  
f01310a7:	c3                   	ret    

f01310a8 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01310a8:	55                   	push   %ebp
f01310a9:	89 e5                	mov    %esp,%ebp
f01310ab:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01310ae:	8b 55 08             	mov    0x8(%ebp),%edx
f01310b1:	8b 45 10             	mov    0x10(%ebp),%eax
f01310b4:	01 d0                	add    %edx,%eax
f01310b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01310b9:	eb 15                	jmp    f01310d0 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01310bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01310be:	8a 00                	mov    (%eax),%al
f01310c0:	0f b6 d0             	movzbl %al,%edx
f01310c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310c6:	0f b6 c0             	movzbl %al,%eax
f01310c9:	39 c2                	cmp    %eax,%edx
f01310cb:	74 0d                	je     f01310da <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01310cd:	ff 45 08             	incl   0x8(%ebp)
f01310d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01310d3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01310d6:	72 e3                	jb     f01310bb <memfind+0x13>
f01310d8:	eb 01                	jmp    f01310db <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01310da:	90                   	nop
	return (void *) s;
f01310db:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01310de:	c9                   	leave  
f01310df:	c3                   	ret    

f01310e0 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01310e0:	55                   	push   %ebp
f01310e1:	89 e5                	mov    %esp,%ebp
f01310e3:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01310e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01310ed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01310f4:	eb 03                	jmp    f01310f9 <strtol+0x19>
		s++;
f01310f6:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01310f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01310fc:	8a 00                	mov    (%eax),%al
f01310fe:	3c 20                	cmp    $0x20,%al
f0131100:	74 f4                	je     f01310f6 <strtol+0x16>
f0131102:	8b 45 08             	mov    0x8(%ebp),%eax
f0131105:	8a 00                	mov    (%eax),%al
f0131107:	3c 09                	cmp    $0x9,%al
f0131109:	74 eb                	je     f01310f6 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f013110b:	8b 45 08             	mov    0x8(%ebp),%eax
f013110e:	8a 00                	mov    (%eax),%al
f0131110:	3c 2b                	cmp    $0x2b,%al
f0131112:	75 05                	jne    f0131119 <strtol+0x39>
		s++;
f0131114:	ff 45 08             	incl   0x8(%ebp)
f0131117:	eb 13                	jmp    f013112c <strtol+0x4c>
	else if (*s == '-')
f0131119:	8b 45 08             	mov    0x8(%ebp),%eax
f013111c:	8a 00                	mov    (%eax),%al
f013111e:	3c 2d                	cmp    $0x2d,%al
f0131120:	75 0a                	jne    f013112c <strtol+0x4c>
		s++, neg = 1;
f0131122:	ff 45 08             	incl   0x8(%ebp)
f0131125:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f013112c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131130:	74 06                	je     f0131138 <strtol+0x58>
f0131132:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131136:	75 20                	jne    f0131158 <strtol+0x78>
f0131138:	8b 45 08             	mov    0x8(%ebp),%eax
f013113b:	8a 00                	mov    (%eax),%al
f013113d:	3c 30                	cmp    $0x30,%al
f013113f:	75 17                	jne    f0131158 <strtol+0x78>
f0131141:	8b 45 08             	mov    0x8(%ebp),%eax
f0131144:	40                   	inc    %eax
f0131145:	8a 00                	mov    (%eax),%al
f0131147:	3c 78                	cmp    $0x78,%al
f0131149:	75 0d                	jne    f0131158 <strtol+0x78>
		s += 2, base = 16;
f013114b:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f013114f:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131156:	eb 28                	jmp    f0131180 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131158:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013115c:	75 15                	jne    f0131173 <strtol+0x93>
f013115e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131161:	8a 00                	mov    (%eax),%al
f0131163:	3c 30                	cmp    $0x30,%al
f0131165:	75 0c                	jne    f0131173 <strtol+0x93>
		s++, base = 8;
f0131167:	ff 45 08             	incl   0x8(%ebp)
f013116a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131171:	eb 0d                	jmp    f0131180 <strtol+0xa0>
	else if (base == 0)
f0131173:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131177:	75 07                	jne    f0131180 <strtol+0xa0>
		base = 10;
f0131179:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131180:	8b 45 08             	mov    0x8(%ebp),%eax
f0131183:	8a 00                	mov    (%eax),%al
f0131185:	3c 2f                	cmp    $0x2f,%al
f0131187:	7e 19                	jle    f01311a2 <strtol+0xc2>
f0131189:	8b 45 08             	mov    0x8(%ebp),%eax
f013118c:	8a 00                	mov    (%eax),%al
f013118e:	3c 39                	cmp    $0x39,%al
f0131190:	7f 10                	jg     f01311a2 <strtol+0xc2>
			dig = *s - '0';
f0131192:	8b 45 08             	mov    0x8(%ebp),%eax
f0131195:	8a 00                	mov    (%eax),%al
f0131197:	0f be c0             	movsbl %al,%eax
f013119a:	83 e8 30             	sub    $0x30,%eax
f013119d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01311a0:	eb 42                	jmp    f01311e4 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01311a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01311a5:	8a 00                	mov    (%eax),%al
f01311a7:	3c 60                	cmp    $0x60,%al
f01311a9:	7e 19                	jle    f01311c4 <strtol+0xe4>
f01311ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ae:	8a 00                	mov    (%eax),%al
f01311b0:	3c 7a                	cmp    $0x7a,%al
f01311b2:	7f 10                	jg     f01311c4 <strtol+0xe4>
			dig = *s - 'a' + 10;
f01311b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311b7:	8a 00                	mov    (%eax),%al
f01311b9:	0f be c0             	movsbl %al,%eax
f01311bc:	83 e8 57             	sub    $0x57,%eax
f01311bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01311c2:	eb 20                	jmp    f01311e4 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01311c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311c7:	8a 00                	mov    (%eax),%al
f01311c9:	3c 40                	cmp    $0x40,%al
f01311cb:	7e 39                	jle    f0131206 <strtol+0x126>
f01311cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d0:	8a 00                	mov    (%eax),%al
f01311d2:	3c 5a                	cmp    $0x5a,%al
f01311d4:	7f 30                	jg     f0131206 <strtol+0x126>
			dig = *s - 'A' + 10;
f01311d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d9:	8a 00                	mov    (%eax),%al
f01311db:	0f be c0             	movsbl %al,%eax
f01311de:	83 e8 37             	sub    $0x37,%eax
f01311e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01311e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311e7:	3b 45 10             	cmp    0x10(%ebp),%eax
f01311ea:	7d 19                	jge    f0131205 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01311ec:	ff 45 08             	incl   0x8(%ebp)
f01311ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01311f2:	0f af 45 10          	imul   0x10(%ebp),%eax
f01311f6:	89 c2                	mov    %eax,%edx
f01311f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311fb:	01 d0                	add    %edx,%eax
f01311fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131200:	e9 7b ff ff ff       	jmp    f0131180 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131205:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131206:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013120a:	74 08                	je     f0131214 <strtol+0x134>
		*endptr = (char *) s;
f013120c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013120f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131212:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131214:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131218:	74 07                	je     f0131221 <strtol+0x141>
f013121a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013121d:	f7 d8                	neg    %eax
f013121f:	eb 03                	jmp    f0131224 <strtol+0x144>
f0131221:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131224:	c9                   	leave  
f0131225:	c3                   	ret    

f0131226 <ltostr>:

void
ltostr(long value, char *str)
{
f0131226:	55                   	push   %ebp
f0131227:	89 e5                	mov    %esp,%ebp
f0131229:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f013122c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131233:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f013123a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013123e:	79 13                	jns    f0131253 <ltostr+0x2d>
	{
		neg = 1;
f0131240:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131247:	8b 45 0c             	mov    0xc(%ebp),%eax
f013124a:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f013124d:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131250:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131253:	8b 45 08             	mov    0x8(%ebp),%eax
f0131256:	b9 0a 00 00 00       	mov    $0xa,%ecx
f013125b:	99                   	cltd   
f013125c:	f7 f9                	idiv   %ecx
f013125e:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131261:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131264:	8d 50 01             	lea    0x1(%eax),%edx
f0131267:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013126a:	89 c2                	mov    %eax,%edx
f013126c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013126f:	01 d0                	add    %edx,%eax
f0131271:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131274:	83 c2 30             	add    $0x30,%edx
f0131277:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131279:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013127c:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131281:	f7 e9                	imul   %ecx
f0131283:	c1 fa 02             	sar    $0x2,%edx
f0131286:	89 c8                	mov    %ecx,%eax
f0131288:	c1 f8 1f             	sar    $0x1f,%eax
f013128b:	29 c2                	sub    %eax,%edx
f013128d:	89 d0                	mov    %edx,%eax
f013128f:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131292:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131295:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013129a:	f7 e9                	imul   %ecx
f013129c:	c1 fa 02             	sar    $0x2,%edx
f013129f:	89 c8                	mov    %ecx,%eax
f01312a1:	c1 f8 1f             	sar    $0x1f,%eax
f01312a4:	29 c2                	sub    %eax,%edx
f01312a6:	89 d0                	mov    %edx,%eax
f01312a8:	c1 e0 02             	shl    $0x2,%eax
f01312ab:	01 d0                	add    %edx,%eax
f01312ad:	01 c0                	add    %eax,%eax
f01312af:	29 c1                	sub    %eax,%ecx
f01312b1:	89 ca                	mov    %ecx,%edx
f01312b3:	85 d2                	test   %edx,%edx
f01312b5:	75 9c                	jne    f0131253 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01312b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01312be:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01312c1:	48                   	dec    %eax
f01312c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01312c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01312c9:	74 3d                	je     f0131308 <ltostr+0xe2>
		start = 1 ;
f01312cb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01312d2:	eb 34                	jmp    f0131308 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01312d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312da:	01 d0                	add    %edx,%eax
f01312dc:	8a 00                	mov    (%eax),%al
f01312de:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01312e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312e7:	01 c2                	add    %eax,%edx
f01312e9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01312ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312ef:	01 c8                	add    %ecx,%eax
f01312f1:	8a 00                	mov    (%eax),%al
f01312f3:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f01312f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01312f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312fb:	01 c2                	add    %eax,%edx
f01312fd:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131300:	88 02                	mov    %al,(%edx)
		start++ ;
f0131302:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131305:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013130b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013130e:	7c c4                	jl     f01312d4 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131310:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131313:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131316:	01 d0                	add    %edx,%eax
f0131318:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f013131b:	90                   	nop
f013131c:	c9                   	leave  
f013131d:	c3                   	ret    

f013131e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f013131e:	55                   	push   %ebp
f013131f:	89 e5                	mov    %esp,%ebp
f0131321:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131324:	ff 75 08             	pushl  0x8(%ebp)
f0131327:	e8 54 fa ff ff       	call   f0130d80 <strlen>
f013132c:	83 c4 04             	add    $0x4,%esp
f013132f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131332:	ff 75 0c             	pushl  0xc(%ebp)
f0131335:	e8 46 fa ff ff       	call   f0130d80 <strlen>
f013133a:	83 c4 04             	add    $0x4,%esp
f013133d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131340:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131347:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013134e:	eb 17                	jmp    f0131367 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131350:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131353:	8b 45 10             	mov    0x10(%ebp),%eax
f0131356:	01 c2                	add    %eax,%edx
f0131358:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f013135b:	8b 45 08             	mov    0x8(%ebp),%eax
f013135e:	01 c8                	add    %ecx,%eax
f0131360:	8a 00                	mov    (%eax),%al
f0131362:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131364:	ff 45 fc             	incl   -0x4(%ebp)
f0131367:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013136a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013136d:	7c e1                	jl     f0131350 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f013136f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131376:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f013137d:	eb 1f                	jmp    f013139e <strcconcat+0x80>
		final[s++] = str2[i] ;
f013137f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131382:	8d 50 01             	lea    0x1(%eax),%edx
f0131385:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131388:	89 c2                	mov    %eax,%edx
f013138a:	8b 45 10             	mov    0x10(%ebp),%eax
f013138d:	01 c2                	add    %eax,%edx
f013138f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131392:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131395:	01 c8                	add    %ecx,%eax
f0131397:	8a 00                	mov    (%eax),%al
f0131399:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f013139b:	ff 45 f8             	incl   -0x8(%ebp)
f013139e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01313a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01313a4:	7c d9                	jl     f013137f <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01313a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01313a9:	8b 45 10             	mov    0x10(%ebp),%eax
f01313ac:	01 d0                	add    %edx,%eax
f01313ae:	c6 00 00             	movb   $0x0,(%eax)
}
f01313b1:	90                   	nop
f01313b2:	c9                   	leave  
f01313b3:	c3                   	ret    

f01313b4 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f01313b4:	55                   	push   %ebp
f01313b5:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f01313b7:	8b 45 14             	mov    0x14(%ebp),%eax
f01313ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01313c0:	8b 45 14             	mov    0x14(%ebp),%eax
f01313c3:	8b 00                	mov    (%eax),%eax
f01313c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01313cc:	8b 45 10             	mov    0x10(%ebp),%eax
f01313cf:	01 d0                	add    %edx,%eax
f01313d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01313d7:	eb 0c                	jmp    f01313e5 <strsplit+0x31>
			*string++ = 0;
f01313d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01313dc:	8d 50 01             	lea    0x1(%eax),%edx
f01313df:	89 55 08             	mov    %edx,0x8(%ebp)
f01313e2:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01313e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01313e8:	8a 00                	mov    (%eax),%al
f01313ea:	84 c0                	test   %al,%al
f01313ec:	74 18                	je     f0131406 <strsplit+0x52>
f01313ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01313f1:	8a 00                	mov    (%eax),%al
f01313f3:	0f be c0             	movsbl %al,%eax
f01313f6:	50                   	push   %eax
f01313f7:	ff 75 0c             	pushl  0xc(%ebp)
f01313fa:	e8 13 fb ff ff       	call   f0130f12 <strchr>
f01313ff:	83 c4 08             	add    $0x8,%esp
f0131402:	85 c0                	test   %eax,%eax
f0131404:	75 d3                	jne    f01313d9 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131406:	8b 45 08             	mov    0x8(%ebp),%eax
f0131409:	8a 00                	mov    (%eax),%al
f013140b:	84 c0                	test   %al,%al
f013140d:	74 5a                	je     f0131469 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f013140f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131412:	8b 00                	mov    (%eax),%eax
f0131414:	83 f8 0f             	cmp    $0xf,%eax
f0131417:	75 07                	jne    f0131420 <strsplit+0x6c>
		{
			return 0;
f0131419:	b8 00 00 00 00       	mov    $0x0,%eax
f013141e:	eb 66                	jmp    f0131486 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131420:	8b 45 14             	mov    0x14(%ebp),%eax
f0131423:	8b 00                	mov    (%eax),%eax
f0131425:	8d 48 01             	lea    0x1(%eax),%ecx
f0131428:	8b 55 14             	mov    0x14(%ebp),%edx
f013142b:	89 0a                	mov    %ecx,(%edx)
f013142d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131434:	8b 45 10             	mov    0x10(%ebp),%eax
f0131437:	01 c2                	add    %eax,%edx
f0131439:	8b 45 08             	mov    0x8(%ebp),%eax
f013143c:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f013143e:	eb 03                	jmp    f0131443 <strsplit+0x8f>
			string++;
f0131440:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131443:	8b 45 08             	mov    0x8(%ebp),%eax
f0131446:	8a 00                	mov    (%eax),%al
f0131448:	84 c0                	test   %al,%al
f013144a:	74 8b                	je     f01313d7 <strsplit+0x23>
f013144c:	8b 45 08             	mov    0x8(%ebp),%eax
f013144f:	8a 00                	mov    (%eax),%al
f0131451:	0f be c0             	movsbl %al,%eax
f0131454:	50                   	push   %eax
f0131455:	ff 75 0c             	pushl  0xc(%ebp)
f0131458:	e8 b5 fa ff ff       	call   f0130f12 <strchr>
f013145d:	83 c4 08             	add    $0x8,%esp
f0131460:	85 c0                	test   %eax,%eax
f0131462:	74 dc                	je     f0131440 <strsplit+0x8c>
			string++;
	}
f0131464:	e9 6e ff ff ff       	jmp    f01313d7 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131469:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f013146a:	8b 45 14             	mov    0x14(%ebp),%eax
f013146d:	8b 00                	mov    (%eax),%eax
f013146f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131476:	8b 45 10             	mov    0x10(%ebp),%eax
f0131479:	01 d0                	add    %edx,%eax
f013147b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131481:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131486:	c9                   	leave  
f0131487:	c3                   	ret    

f0131488 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131488:	55                   	push   %ebp
f0131489:	89 e5                	mov    %esp,%ebp
f013148b:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f013148e:	90                   	nop
f013148f:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131496:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131499:	89 c2                	mov    %eax,%edx
f013149b:	ec                   	in     (%dx),%al
f013149c:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f013149f:	8a 45 f7             	mov    -0x9(%ebp),%al
f01314a2:	0f b6 c0             	movzbl %al,%eax
f01314a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01314a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314ab:	25 c0 00 00 00       	and    $0xc0,%eax
f01314b0:	83 f8 40             	cmp    $0x40,%eax
f01314b3:	75 da                	jne    f013148f <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f01314b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01314b9:	74 11                	je     f01314cc <ide_wait_ready+0x44>
f01314bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314be:	83 e0 21             	and    $0x21,%eax
f01314c1:	85 c0                	test   %eax,%eax
f01314c3:	74 07                	je     f01314cc <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01314c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01314ca:	eb 05                	jmp    f01314d1 <ide_wait_ready+0x49>
	}
	return 0;
f01314cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01314d1:	c9                   	leave  
f01314d2:	c3                   	ret    

f01314d3 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01314d3:	55                   	push   %ebp
f01314d4:	89 e5                	mov    %esp,%ebp
f01314d6:	57                   	push   %edi
f01314d7:	53                   	push   %ebx
f01314d8:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01314db:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01314e2:	76 16                	jbe    f01314fa <ide_read+0x27>
f01314e4:	68 83 cf 13 f0       	push   $0xf013cf83
f01314e9:	68 90 cf 13 f0       	push   $0xf013cf90
f01314ee:	6a 25                	push   $0x25
f01314f0:	68 a5 cf 13 f0       	push   $0xf013cfa5
f01314f5:	e8 01 ed fc ff       	call   f01001fb <_panic>

	ide_wait_ready(0);
f01314fa:	83 ec 0c             	sub    $0xc,%esp
f01314fd:	6a 00                	push   $0x0
f01314ff:	e8 84 ff ff ff       	call   f0131488 <ide_wait_ready>
f0131504:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131507:	8b 45 10             	mov    0x10(%ebp),%eax
f013150a:	0f b6 c0             	movzbl %al,%eax
f013150d:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131514:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131517:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013151a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013151d:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f013151e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131521:	0f b6 c0             	movzbl %al,%eax
f0131524:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f013152b:	88 45 d3             	mov    %al,-0x2d(%ebp)
f013152e:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131531:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131534:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131535:	8b 45 08             	mov    0x8(%ebp),%eax
f0131538:	c1 e8 08             	shr    $0x8,%eax
f013153b:	0f b6 c0             	movzbl %al,%eax
f013153e:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131545:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131548:	8a 45 d4             	mov    -0x2c(%ebp),%al
f013154b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013154e:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f013154f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131552:	c1 e8 10             	shr    $0x10,%eax
f0131555:	0f b6 c0             	movzbl %al,%eax
f0131558:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f013155f:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131562:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131565:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131568:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131569:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f013156e:	83 e0 01             	and    $0x1,%eax
f0131571:	c1 e0 04             	shl    $0x4,%eax
f0131574:	88 c2                	mov    %al,%dl
f0131576:	8b 45 08             	mov    0x8(%ebp),%eax
f0131579:	c1 e8 18             	shr    $0x18,%eax
f013157c:	83 e0 0f             	and    $0xf,%eax
f013157f:	09 d0                	or     %edx,%eax
f0131581:	83 c8 e0             	or     $0xffffffe0,%eax
f0131584:	0f b6 c0             	movzbl %al,%eax
f0131587:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f013158e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131591:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131594:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131597:	ee                   	out    %al,(%dx)
f0131598:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013159f:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01315a3:	8a 45 d7             	mov    -0x29(%ebp),%al
f01315a6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01315a9:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01315aa:	eb 55                	jmp    f0131601 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01315ac:	83 ec 0c             	sub    $0xc,%esp
f01315af:	6a 01                	push   $0x1
f01315b1:	e8 d2 fe ff ff       	call   f0131488 <ide_wait_ready>
f01315b6:	83 c4 10             	add    $0x10,%esp
f01315b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01315bc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01315c0:	79 05                	jns    f01315c7 <ide_read+0xf4>
			return r;
f01315c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01315c5:	eb 45                	jmp    f013160c <ide_read+0x139>
f01315c7:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01315ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01315d4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01315db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315de:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01315e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01315e4:	89 cb                	mov    %ecx,%ebx
f01315e6:	89 df                	mov    %ebx,%edi
f01315e8:	89 c1                	mov    %eax,%ecx
f01315ea:	fc                   	cld    
f01315eb:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01315ed:	89 c8                	mov    %ecx,%eax
f01315ef:	89 fb                	mov    %edi,%ebx
f01315f1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01315f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01315f7:	ff 4d 10             	decl   0x10(%ebp)
f01315fa:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131601:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131605:	75 a5                	jne    f01315ac <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131607:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013160c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013160f:	5b                   	pop    %ebx
f0131610:	5f                   	pop    %edi
f0131611:	5d                   	pop    %ebp
f0131612:	c3                   	ret    

f0131613 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131613:	55                   	push   %ebp
f0131614:	89 e5                	mov    %esp,%ebp
f0131616:	56                   	push   %esi
f0131617:	53                   	push   %ebx
f0131618:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f013161b:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131622:	76 16                	jbe    f013163a <ide_write+0x27>
f0131624:	68 83 cf 13 f0       	push   $0xf013cf83
f0131629:	68 90 cf 13 f0       	push   $0xf013cf90
f013162e:	6a 3e                	push   $0x3e
f0131630:	68 a5 cf 13 f0       	push   $0xf013cfa5
f0131635:	e8 c1 eb fc ff       	call   f01001fb <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f013163a:	83 ec 0c             	sub    $0xc,%esp
f013163d:	6a 00                	push   $0x0
f013163f:	e8 44 fe ff ff       	call   f0131488 <ide_wait_ready>
f0131644:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131647:	8b 45 10             	mov    0x10(%ebp),%eax
f013164a:	0f b6 c0             	movzbl %al,%eax
f013164d:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131654:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131657:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013165a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013165d:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f013165e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131661:	0f b6 c0             	movzbl %al,%eax
f0131664:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f013166b:	88 45 d3             	mov    %al,-0x2d(%ebp)
f013166e:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131671:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131674:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131675:	8b 45 08             	mov    0x8(%ebp),%eax
f0131678:	c1 e8 08             	shr    $0x8,%eax
f013167b:	0f b6 c0             	movzbl %al,%eax
f013167e:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131685:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131688:	8a 45 d4             	mov    -0x2c(%ebp),%al
f013168b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013168e:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f013168f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131692:	c1 e8 10             	shr    $0x10,%eax
f0131695:	0f b6 c0             	movzbl %al,%eax
f0131698:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f013169f:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01316a2:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01316a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01316a8:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01316a9:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f01316ae:	83 e0 01             	and    $0x1,%eax
f01316b1:	c1 e0 04             	shl    $0x4,%eax
f01316b4:	88 c2                	mov    %al,%dl
f01316b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01316b9:	c1 e8 18             	shr    $0x18,%eax
f01316bc:	83 e0 0f             	and    $0xf,%eax
f01316bf:	09 d0                	or     %edx,%eax
f01316c1:	83 c8 e0             	or     $0xffffffe0,%eax
f01316c4:	0f b6 c0             	movzbl %al,%eax
f01316c7:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01316ce:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01316d1:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01316d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01316d7:	ee                   	out    %al,(%dx)
f01316d8:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01316df:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01316e3:	8a 45 d7             	mov    -0x29(%ebp),%al
f01316e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01316e9:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01316ea:	eb 55                	jmp    f0131741 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01316ec:	83 ec 0c             	sub    $0xc,%esp
f01316ef:	6a 01                	push   $0x1
f01316f1:	e8 92 fd ff ff       	call   f0131488 <ide_wait_ready>
f01316f6:	83 c4 10             	add    $0x10,%esp
f01316f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01316fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131700:	79 05                	jns    f0131707 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131702:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131705:	eb 45                	jmp    f013174c <ide_write+0x139>
f0131707:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013170e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131711:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131714:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f013171b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013171e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131721:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131724:	89 cb                	mov    %ecx,%ebx
f0131726:	89 de                	mov    %ebx,%esi
f0131728:	89 c1                	mov    %eax,%ecx
f013172a:	fc                   	cld    
f013172b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f013172d:	89 c8                	mov    %ecx,%eax
f013172f:	89 f3                	mov    %esi,%ebx
f0131731:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131734:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131737:	ff 4d 10             	decl   0x10(%ebp)
f013173a:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131741:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131745:	75 a5                	jne    f01316ec <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131747:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013174c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013174f:	5b                   	pop    %ebx
f0131750:	5e                   	pop    %esi
f0131751:	5d                   	pop    %ebp
f0131752:	c3                   	ret    

f0131753 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131753:	55                   	push   %ebp
f0131754:	89 e5                	mov    %esp,%ebp
f0131756:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131759:	83 ec 0c             	sub    $0xc,%esp
f013175c:	68 b0 cf 13 f0       	push   $0xf013cfb0
f0131761:	e8 1c f5 fc ff       	call   f0100c82 <cprintf>
f0131766:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131769:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131770:	83 ec 0c             	sub    $0xc,%esp
f0131773:	68 dc cf 13 f0       	push   $0xf013cfdc
f0131778:	e8 05 f5 fc ff       	call   f0100c82 <cprintf>
f013177d:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131780:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131784:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131789:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013178c:	eb 56                	jmp    f01317e4 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f013178e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131792:	74 1c                	je     f01317b0 <print_mem_block_lists+0x5d>
f0131794:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131797:	8b 50 08             	mov    0x8(%eax),%edx
f013179a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013179d:	8b 48 08             	mov    0x8(%eax),%ecx
f01317a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01317a6:	01 c8                	add    %ecx,%eax
f01317a8:	39 c2                	cmp    %eax,%edx
f01317aa:	73 04                	jae    f01317b0 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f01317ac:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01317b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317b3:	8b 50 08             	mov    0x8(%eax),%edx
f01317b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317b9:	8b 40 0c             	mov    0xc(%eax),%eax
f01317bc:	01 c2                	add    %eax,%edx
f01317be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317c1:	8b 40 08             	mov    0x8(%eax),%eax
f01317c4:	83 ec 04             	sub    $0x4,%esp
f01317c7:	52                   	push   %edx
f01317c8:	50                   	push   %eax
f01317c9:	68 f1 cf 13 f0       	push   $0xf013cff1
f01317ce:	e8 af f4 fc ff       	call   f0100c82 <cprintf>
f01317d3:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01317d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01317dc:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01317e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01317e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01317e8:	74 07                	je     f01317f1 <print_mem_block_lists+0x9e>
f01317ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317ed:	8b 00                	mov    (%eax),%eax
f01317ef:	eb 05                	jmp    f01317f6 <print_mem_block_lists+0xa3>
f01317f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01317f6:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01317fb:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131800:	85 c0                	test   %eax,%eax
f0131802:	75 8a                	jne    f013178e <print_mem_block_lists+0x3b>
f0131804:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131808:	75 84                	jne    f013178e <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013180a:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013180e:	75 10                	jne    f0131820 <print_mem_block_lists+0xcd>
f0131810:	83 ec 0c             	sub    $0xc,%esp
f0131813:	68 00 d0 13 f0       	push   $0xf013d000
f0131818:	e8 65 f4 fc ff       	call   f0100c82 <cprintf>
f013181d:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131820:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131827:	83 ec 0c             	sub    $0xc,%esp
f013182a:	68 24 d0 13 f0       	push   $0xf013d024
f013182f:	e8 4e f4 fc ff       	call   f0100c82 <cprintf>
f0131834:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131837:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013183b:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131840:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131843:	eb 56                	jmp    f013189b <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131845:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131849:	74 1c                	je     f0131867 <print_mem_block_lists+0x114>
f013184b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013184e:	8b 50 08             	mov    0x8(%eax),%edx
f0131851:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131854:	8b 48 08             	mov    0x8(%eax),%ecx
f0131857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013185a:	8b 40 0c             	mov    0xc(%eax),%eax
f013185d:	01 c8                	add    %ecx,%eax
f013185f:	39 c2                	cmp    %eax,%edx
f0131861:	73 04                	jae    f0131867 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131863:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131867:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013186a:	8b 50 08             	mov    0x8(%eax),%edx
f013186d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131870:	8b 40 0c             	mov    0xc(%eax),%eax
f0131873:	01 c2                	add    %eax,%edx
f0131875:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131878:	8b 40 08             	mov    0x8(%eax),%eax
f013187b:	83 ec 04             	sub    $0x4,%esp
f013187e:	52                   	push   %edx
f013187f:	50                   	push   %eax
f0131880:	68 f1 cf 13 f0       	push   $0xf013cff1
f0131885:	e8 f8 f3 fc ff       	call   f0100c82 <cprintf>
f013188a:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f013188d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131890:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131893:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131898:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013189b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013189f:	74 07                	je     f01318a8 <print_mem_block_lists+0x155>
f01318a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318a4:	8b 00                	mov    (%eax),%eax
f01318a6:	eb 05                	jmp    f01318ad <print_mem_block_lists+0x15a>
f01318a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01318ad:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f01318b2:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f01318b7:	85 c0                	test   %eax,%eax
f01318b9:	75 8a                	jne    f0131845 <print_mem_block_lists+0xf2>
f01318bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318bf:	75 84                	jne    f0131845 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01318c1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01318c5:	75 10                	jne    f01318d7 <print_mem_block_lists+0x184>
f01318c7:	83 ec 0c             	sub    $0xc,%esp
f01318ca:	68 3c d0 13 f0       	push   $0xf013d03c
f01318cf:	e8 ae f3 fc ff       	call   f0100c82 <cprintf>
f01318d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f01318d7:	83 ec 0c             	sub    $0xc,%esp
f01318da:	68 b0 cf 13 f0       	push   $0xf013cfb0
f01318df:	e8 9e f3 fc ff       	call   f0100c82 <cprintf>
f01318e4:	83 c4 10             	add    $0x10,%esp

}
f01318e7:	90                   	nop
f01318e8:	c9                   	leave  
f01318e9:	c3                   	ret    

f01318ea <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f01318ea:	55                   	push   %ebp
f01318eb:	89 e5                	mov    %esp,%ebp
f01318ed:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f01318f0:	c7 05 98 7b 65 f0 00 	movl   $0x0,0xf0657b98
f01318f7:	00 00 00 
f01318fa:	c7 05 9c 7b 65 f0 00 	movl   $0x0,0xf0657b9c
f0131901:	00 00 00 
f0131904:	c7 05 a4 7b 65 f0 00 	movl   $0x0,0xf0657ba4
f013190b:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f013190e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131915:	e9 9e 00 00 00       	jmp    f01319b8 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f013191a:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f013191f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131922:	c1 e2 04             	shl    $0x4,%edx
f0131925:	01 d0                	add    %edx,%eax
f0131927:	85 c0                	test   %eax,%eax
f0131929:	75 14                	jne    f013193f <initialize_MemBlocksList+0x55>
f013192b:	83 ec 04             	sub    $0x4,%esp
f013192e:	68 64 d0 13 f0       	push   $0xf013d064
f0131933:	6a 46                	push   $0x46
f0131935:	68 87 d0 13 f0       	push   $0xf013d087
f013193a:	e8 bc e8 fc ff       	call   f01001fb <_panic>
f013193f:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131944:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131947:	c1 e2 04             	shl    $0x4,%edx
f013194a:	01 d0                	add    %edx,%eax
f013194c:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0131952:	89 10                	mov    %edx,(%eax)
f0131954:	8b 00                	mov    (%eax),%eax
f0131956:	85 c0                	test   %eax,%eax
f0131958:	74 18                	je     f0131972 <initialize_MemBlocksList+0x88>
f013195a:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013195f:	8b 15 d8 7a 65 f0    	mov    0xf0657ad8,%edx
f0131965:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131968:	c1 e1 04             	shl    $0x4,%ecx
f013196b:	01 ca                	add    %ecx,%edx
f013196d:	89 50 04             	mov    %edx,0x4(%eax)
f0131970:	eb 12                	jmp    f0131984 <initialize_MemBlocksList+0x9a>
f0131972:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131977:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013197a:	c1 e2 04             	shl    $0x4,%edx
f013197d:	01 d0                	add    %edx,%eax
f013197f:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131984:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131989:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013198c:	c1 e2 04             	shl    $0x4,%edx
f013198f:	01 d0                	add    %edx,%eax
f0131991:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131996:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f013199b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013199e:	c1 e2 04             	shl    $0x4,%edx
f01319a1:	01 d0                	add    %edx,%eax
f01319a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319aa:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01319af:	40                   	inc    %eax
f01319b0:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01319b5:	ff 45 f4             	incl   -0xc(%ebp)
f01319b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319bb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01319be:	0f 82 56 ff ff ff    	jb     f013191a <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01319c4:	90                   	nop
f01319c5:	c9                   	leave  
f01319c6:	c3                   	ret    

f01319c7 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01319c7:	55                   	push   %ebp
f01319c8:	89 e5                	mov    %esp,%ebp
f01319ca:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01319cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01319d0:	8b 00                	mov    (%eax),%eax
f01319d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01319d5:	eb 19                	jmp    f01319f0 <find_block+0x29>
	{
		if(va==point->sva)
f01319d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319da:	8b 40 08             	mov    0x8(%eax),%eax
f01319dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01319e0:	75 05                	jne    f01319e7 <find_block+0x20>
		   return point;
f01319e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319e5:	eb 36                	jmp    f0131a1d <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01319e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ea:	8b 40 08             	mov    0x8(%eax),%eax
f01319ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01319f0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01319f4:	74 07                	je     f01319fd <find_block+0x36>
f01319f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319f9:	8b 00                	mov    (%eax),%eax
f01319fb:	eb 05                	jmp    f0131a02 <find_block+0x3b>
f01319fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0131a02:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a05:	89 42 08             	mov    %eax,0x8(%edx)
f0131a08:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a0b:	8b 40 08             	mov    0x8(%eax),%eax
f0131a0e:	85 c0                	test   %eax,%eax
f0131a10:	75 c5                	jne    f01319d7 <find_block+0x10>
f0131a12:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131a16:	75 bf                	jne    f01319d7 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131a18:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131a1d:	c9                   	leave  
f0131a1e:	c3                   	ret    

f0131a1f <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131a1f:	55                   	push   %ebp
f0131a20:	89 e5                	mov    %esp,%ebp
f0131a22:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131a25:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131a2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131a2d:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f0131a32:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0131a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a38:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131a3b:	74 24                	je     f0131a61 <insert_sorted_allocList+0x42>
f0131a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a40:	8b 50 08             	mov    0x8(%eax),%edx
f0131a43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a46:	8b 40 08             	mov    0x8(%eax),%eax
f0131a49:	39 c2                	cmp    %eax,%edx
f0131a4b:	76 14                	jbe    f0131a61 <insert_sorted_allocList+0x42>
f0131a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a50:	8b 50 08             	mov    0x8(%eax),%edx
f0131a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131a56:	8b 40 08             	mov    0x8(%eax),%eax
f0131a59:	39 c2                	cmp    %eax,%edx
f0131a5b:	0f 82 60 01 00 00    	jb     f0131bc1 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131a61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131a65:	75 65                	jne    f0131acc <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131a67:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a6b:	75 14                	jne    f0131a81 <insert_sorted_allocList+0x62>
f0131a6d:	83 ec 04             	sub    $0x4,%esp
f0131a70:	68 64 d0 13 f0       	push   $0xf013d064
f0131a75:	6a 6b                	push   $0x6b
f0131a77:	68 87 d0 13 f0       	push   $0xf013d087
f0131a7c:	e8 7a e7 fc ff       	call   f01001fb <_panic>
f0131a81:	8b 15 c8 7a 65 f0    	mov    0xf0657ac8,%edx
f0131a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a8a:	89 10                	mov    %edx,(%eax)
f0131a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a8f:	8b 00                	mov    (%eax),%eax
f0131a91:	85 c0                	test   %eax,%eax
f0131a93:	74 0d                	je     f0131aa2 <insert_sorted_allocList+0x83>
f0131a95:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131a9a:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a9d:	89 50 04             	mov    %edx,0x4(%eax)
f0131aa0:	eb 08                	jmp    f0131aaa <insert_sorted_allocList+0x8b>
f0131aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aa5:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131aaa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aad:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131ab2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131abc:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131ac1:	40                   	inc    %eax
f0131ac2:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131ac7:	e9 dc 01 00 00       	jmp    f0131ca8 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131acf:	8b 50 08             	mov    0x8(%eax),%edx
f0131ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ad5:	8b 40 08             	mov    0x8(%eax),%eax
f0131ad8:	39 c2                	cmp    %eax,%edx
f0131ada:	77 6c                	ja     f0131b48 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131adc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ae0:	74 06                	je     f0131ae8 <insert_sorted_allocList+0xc9>
f0131ae2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ae6:	75 14                	jne    f0131afc <insert_sorted_allocList+0xdd>
f0131ae8:	83 ec 04             	sub    $0x4,%esp
f0131aeb:	68 a0 d0 13 f0       	push   $0xf013d0a0
f0131af0:	6a 6f                	push   $0x6f
f0131af2:	68 87 d0 13 f0       	push   $0xf013d087
f0131af7:	e8 ff e6 fc ff       	call   f01001fb <_panic>
f0131afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131aff:	8b 50 04             	mov    0x4(%eax),%edx
f0131b02:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b05:	89 50 04             	mov    %edx,0x4(%eax)
f0131b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b0b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b0e:	89 10                	mov    %edx,(%eax)
f0131b10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b13:	8b 40 04             	mov    0x4(%eax),%eax
f0131b16:	85 c0                	test   %eax,%eax
f0131b18:	74 0d                	je     f0131b27 <insert_sorted_allocList+0x108>
f0131b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b1d:	8b 40 04             	mov    0x4(%eax),%eax
f0131b20:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b23:	89 10                	mov    %edx,(%eax)
f0131b25:	eb 08                	jmp    f0131b2f <insert_sorted_allocList+0x110>
f0131b27:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b2a:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131b2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b32:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b35:	89 50 04             	mov    %edx,0x4(%eax)
f0131b38:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131b3d:	40                   	inc    %eax
f0131b3e:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131b43:	e9 60 01 00 00       	jmp    f0131ca8 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0131b48:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b4b:	8b 50 08             	mov    0x8(%eax),%edx
f0131b4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b51:	8b 40 08             	mov    0x8(%eax),%eax
f0131b54:	39 c2                	cmp    %eax,%edx
f0131b56:	0f 82 4c 01 00 00    	jb     f0131ca8 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131b5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131b60:	75 14                	jne    f0131b76 <insert_sorted_allocList+0x157>
f0131b62:	83 ec 04             	sub    $0x4,%esp
f0131b65:	68 d8 d0 13 f0       	push   $0xf013d0d8
f0131b6a:	6a 73                	push   $0x73
f0131b6c:	68 87 d0 13 f0       	push   $0xf013d087
f0131b71:	e8 85 e6 fc ff       	call   f01001fb <_panic>
f0131b76:	8b 15 cc 7a 65 f0    	mov    0xf0657acc,%edx
f0131b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b7f:	89 50 04             	mov    %edx,0x4(%eax)
f0131b82:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b85:	8b 40 04             	mov    0x4(%eax),%eax
f0131b88:	85 c0                	test   %eax,%eax
f0131b8a:	74 0c                	je     f0131b98 <insert_sorted_allocList+0x179>
f0131b8c:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f0131b91:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b94:	89 10                	mov    %edx,(%eax)
f0131b96:	eb 08                	jmp    f0131ba0 <insert_sorted_allocList+0x181>
f0131b98:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b9b:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ba3:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131bb1:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131bb6:	40                   	inc    %eax
f0131bb7:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131bbc:	e9 e7 00 00 00       	jmp    f0131ca8 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131bc7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131bce:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131bd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bd6:	e9 9d 00 00 00       	jmp    f0131c78 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bde:	8b 00                	mov    (%eax),%eax
f0131be0:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131be3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be6:	8b 50 08             	mov    0x8(%eax),%edx
f0131be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bec:	8b 40 08             	mov    0x8(%eax),%eax
f0131bef:	39 c2                	cmp    %eax,%edx
f0131bf1:	76 7d                	jbe    f0131c70 <insert_sorted_allocList+0x251>
f0131bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bf6:	8b 50 08             	mov    0x8(%eax),%edx
f0131bf9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131bfc:	8b 40 08             	mov    0x8(%eax),%eax
f0131bff:	39 c2                	cmp    %eax,%edx
f0131c01:	73 6d                	jae    f0131c70 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131c03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c07:	74 06                	je     f0131c0f <insert_sorted_allocList+0x1f0>
f0131c09:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131c0d:	75 14                	jne    f0131c23 <insert_sorted_allocList+0x204>
f0131c0f:	83 ec 04             	sub    $0x4,%esp
f0131c12:	68 fc d0 13 f0       	push   $0xf013d0fc
f0131c17:	6a 7f                	push   $0x7f
f0131c19:	68 87 d0 13 f0       	push   $0xf013d087
f0131c1e:	e8 d8 e5 fc ff       	call   f01001fb <_panic>
f0131c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c26:	8b 10                	mov    (%eax),%edx
f0131c28:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c2b:	89 10                	mov    %edx,(%eax)
f0131c2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c30:	8b 00                	mov    (%eax),%eax
f0131c32:	85 c0                	test   %eax,%eax
f0131c34:	74 0b                	je     f0131c41 <insert_sorted_allocList+0x222>
f0131c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c39:	8b 00                	mov    (%eax),%eax
f0131c3b:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c3e:	89 50 04             	mov    %edx,0x4(%eax)
f0131c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c44:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c47:	89 10                	mov    %edx,(%eax)
f0131c49:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c4f:	89 50 04             	mov    %edx,0x4(%eax)
f0131c52:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c55:	8b 00                	mov    (%eax),%eax
f0131c57:	85 c0                	test   %eax,%eax
f0131c59:	75 08                	jne    f0131c63 <insert_sorted_allocList+0x244>
f0131c5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c5e:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131c63:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131c68:	40                   	inc    %eax
f0131c69:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
				break;
f0131c6e:	eb 39                	jmp    f0131ca9 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131c70:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c7c:	74 07                	je     f0131c85 <insert_sorted_allocList+0x266>
f0131c7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c81:	8b 00                	mov    (%eax),%eax
f0131c83:	eb 05                	jmp    f0131c8a <insert_sorted_allocList+0x26b>
f0131c85:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c8a:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f0131c8f:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131c94:	85 c0                	test   %eax,%eax
f0131c96:	0f 85 3f ff ff ff    	jne    f0131bdb <insert_sorted_allocList+0x1bc>
f0131c9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ca0:	0f 85 35 ff ff ff    	jne    f0131bdb <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131ca6:	eb 01                	jmp    f0131ca9 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131ca8:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131ca9:	90                   	nop
f0131caa:	c9                   	leave  
f0131cab:	c3                   	ret    

f0131cac <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131cac:	55                   	push   %ebp
f0131cad:	89 e5                	mov    %esp,%ebp
f0131caf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131cb2:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cba:	e9 85 01 00 00       	jmp    f0131e44 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cc2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cc5:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131cc8:	0f 82 6e 01 00 00    	jb     f0131e3c <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cd1:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cd4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131cd7:	0f 85 8a 00 00 00    	jne    f0131d67 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131cdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ce1:	75 17                	jne    f0131cfa <alloc_block_FF+0x4e>
f0131ce3:	83 ec 04             	sub    $0x4,%esp
f0131ce6:	68 30 d1 13 f0       	push   $0xf013d130
f0131ceb:	68 93 00 00 00       	push   $0x93
f0131cf0:	68 87 d0 13 f0       	push   $0xf013d087
f0131cf5:	e8 01 e5 fc ff       	call   f01001fb <_panic>
f0131cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cfd:	8b 00                	mov    (%eax),%eax
f0131cff:	85 c0                	test   %eax,%eax
f0131d01:	74 10                	je     f0131d13 <alloc_block_FF+0x67>
f0131d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d06:	8b 00                	mov    (%eax),%eax
f0131d08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d0b:	8b 52 04             	mov    0x4(%edx),%edx
f0131d0e:	89 50 04             	mov    %edx,0x4(%eax)
f0131d11:	eb 0b                	jmp    f0131d1e <alloc_block_FF+0x72>
f0131d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d16:	8b 40 04             	mov    0x4(%eax),%eax
f0131d19:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d21:	8b 40 04             	mov    0x4(%eax),%eax
f0131d24:	85 c0                	test   %eax,%eax
f0131d26:	74 0f                	je     f0131d37 <alloc_block_FF+0x8b>
f0131d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d2b:	8b 40 04             	mov    0x4(%eax),%eax
f0131d2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d31:	8b 12                	mov    (%edx),%edx
f0131d33:	89 10                	mov    %edx,(%eax)
f0131d35:	eb 0a                	jmp    f0131d41 <alloc_block_FF+0x95>
f0131d37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d3a:	8b 00                	mov    (%eax),%eax
f0131d3c:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d54:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131d59:	48                   	dec    %eax
f0131d5a:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return  point;
f0131d5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d62:	e9 10 01 00 00       	jmp    f0131e77 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d6a:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d6d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d70:	0f 86 c6 00 00 00    	jbe    f0131e3c <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131d76:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131d7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d81:	8b 50 08             	mov    0x8(%eax),%edx
f0131d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d87:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131d8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d8d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d90:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131d93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131d97:	75 17                	jne    f0131db0 <alloc_block_FF+0x104>
f0131d99:	83 ec 04             	sub    $0x4,%esp
f0131d9c:	68 30 d1 13 f0       	push   $0xf013d130
f0131da1:	68 9b 00 00 00       	push   $0x9b
f0131da6:	68 87 d0 13 f0       	push   $0xf013d087
f0131dab:	e8 4b e4 fc ff       	call   f01001fb <_panic>
f0131db0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131db3:	8b 00                	mov    (%eax),%eax
f0131db5:	85 c0                	test   %eax,%eax
f0131db7:	74 10                	je     f0131dc9 <alloc_block_FF+0x11d>
f0131db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dbc:	8b 00                	mov    (%eax),%eax
f0131dbe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131dc1:	8b 52 04             	mov    0x4(%edx),%edx
f0131dc4:	89 50 04             	mov    %edx,0x4(%eax)
f0131dc7:	eb 0b                	jmp    f0131dd4 <alloc_block_FF+0x128>
f0131dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dcc:	8b 40 04             	mov    0x4(%eax),%eax
f0131dcf:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dd7:	8b 40 04             	mov    0x4(%eax),%eax
f0131dda:	85 c0                	test   %eax,%eax
f0131ddc:	74 0f                	je     f0131ded <alloc_block_FF+0x141>
f0131dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131de1:	8b 40 04             	mov    0x4(%eax),%eax
f0131de4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131de7:	8b 12                	mov    (%edx),%edx
f0131de9:	89 10                	mov    %edx,(%eax)
f0131deb:	eb 0a                	jmp    f0131df7 <alloc_block_FF+0x14b>
f0131ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131df0:	8b 00                	mov    (%eax),%eax
f0131df2:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131e00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e03:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e0a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131e0f:	48                   	dec    %eax
f0131e10:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			   point->sva += size;
f0131e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e18:	8b 50 08             	mov    0x8(%eax),%edx
f0131e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e1e:	01 c2                	add    %eax,%edx
f0131e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e23:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131e26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e29:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e2c:	2b 45 08             	sub    0x8(%ebp),%eax
f0131e2f:	89 c2                	mov    %eax,%edx
f0131e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e34:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131e37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e3a:	eb 3b                	jmp    f0131e77 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131e3c:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131e41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e48:	74 07                	je     f0131e51 <alloc_block_FF+0x1a5>
f0131e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e4d:	8b 00                	mov    (%eax),%eax
f0131e4f:	eb 05                	jmp    f0131e56 <alloc_block_FF+0x1aa>
f0131e51:	b8 00 00 00 00       	mov    $0x0,%eax
f0131e56:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131e5b:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131e60:	85 c0                	test   %eax,%eax
f0131e62:	0f 85 57 fe ff ff    	jne    f0131cbf <alloc_block_FF+0x13>
f0131e68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e6c:	0f 85 4d fe ff ff    	jne    f0131cbf <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131e72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e77:	c9                   	leave  
f0131e78:	c3                   	ret    

f0131e79 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131e79:	55                   	push   %ebp
f0131e7a:	89 e5                	mov    %esp,%ebp
f0131e7c:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131e7f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131e86:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131e8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e8e:	e9 df 00 00 00       	jmp    f0131f72 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e96:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e99:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e9c:	0f 82 c8 00 00 00    	jb     f0131f6a <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ea5:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ea8:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131eab:	0f 85 8a 00 00 00    	jne    f0131f3b <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131eb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131eb5:	75 17                	jne    f0131ece <alloc_block_BF+0x55>
f0131eb7:	83 ec 04             	sub    $0x4,%esp
f0131eba:	68 30 d1 13 f0       	push   $0xf013d130
f0131ebf:	68 b7 00 00 00       	push   $0xb7
f0131ec4:	68 87 d0 13 f0       	push   $0xf013d087
f0131ec9:	e8 2d e3 fc ff       	call   f01001fb <_panic>
f0131ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ed1:	8b 00                	mov    (%eax),%eax
f0131ed3:	85 c0                	test   %eax,%eax
f0131ed5:	74 10                	je     f0131ee7 <alloc_block_BF+0x6e>
f0131ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eda:	8b 00                	mov    (%eax),%eax
f0131edc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131edf:	8b 52 04             	mov    0x4(%edx),%edx
f0131ee2:	89 50 04             	mov    %edx,0x4(%eax)
f0131ee5:	eb 0b                	jmp    f0131ef2 <alloc_block_BF+0x79>
f0131ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eea:	8b 40 04             	mov    0x4(%eax),%eax
f0131eed:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131ef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ef5:	8b 40 04             	mov    0x4(%eax),%eax
f0131ef8:	85 c0                	test   %eax,%eax
f0131efa:	74 0f                	je     f0131f0b <alloc_block_BF+0x92>
f0131efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eff:	8b 40 04             	mov    0x4(%eax),%eax
f0131f02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f05:	8b 12                	mov    (%edx),%edx
f0131f07:	89 10                	mov    %edx,(%eax)
f0131f09:	eb 0a                	jmp    f0131f15 <alloc_block_BF+0x9c>
f0131f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f0e:	8b 00                	mov    (%eax),%eax
f0131f10:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f21:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f28:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131f2d:	48                   	dec    %eax
f0131f2e:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return currentMemBlock;
f0131f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f36:	e9 4d 01 00 00       	jmp    f0132088 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0131f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f3e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f41:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f44:	76 24                	jbe    f0131f6a <alloc_block_BF+0xf1>
f0131f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f49:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131f4f:	73 19                	jae    f0131f6a <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131f51:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f5b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f64:	8b 40 08             	mov    0x8(%eax),%eax
f0131f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131f6a:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131f6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f76:	74 07                	je     f0131f7f <alloc_block_BF+0x106>
f0131f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f7b:	8b 00                	mov    (%eax),%eax
f0131f7d:	eb 05                	jmp    f0131f84 <alloc_block_BF+0x10b>
f0131f7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0131f84:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131f89:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131f8e:	85 c0                	test   %eax,%eax
f0131f90:	0f 85 fd fe ff ff    	jne    f0131e93 <alloc_block_BF+0x1a>
f0131f96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f9a:	0f 85 f3 fe ff ff    	jne    f0131e93 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131fa0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131fa4:	0f 84 d9 00 00 00    	je     f0132083 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131faa:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131fb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131fb5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131fb8:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131fbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131fbe:	8b 55 08             	mov    0x8(%ebp),%edx
f0131fc1:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131fc4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131fc8:	75 17                	jne    f0131fe1 <alloc_block_BF+0x168>
f0131fca:	83 ec 04             	sub    $0x4,%esp
f0131fcd:	68 30 d1 13 f0       	push   $0xf013d130
f0131fd2:	68 c7 00 00 00       	push   $0xc7
f0131fd7:	68 87 d0 13 f0       	push   $0xf013d087
f0131fdc:	e8 1a e2 fc ff       	call   f01001fb <_panic>
f0131fe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131fe4:	8b 00                	mov    (%eax),%eax
f0131fe6:	85 c0                	test   %eax,%eax
f0131fe8:	74 10                	je     f0131ffa <alloc_block_BF+0x181>
f0131fea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131fed:	8b 00                	mov    (%eax),%eax
f0131fef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131ff2:	8b 52 04             	mov    0x4(%edx),%edx
f0131ff5:	89 50 04             	mov    %edx,0x4(%eax)
f0131ff8:	eb 0b                	jmp    f0132005 <alloc_block_BF+0x18c>
f0131ffa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ffd:	8b 40 04             	mov    0x4(%eax),%eax
f0132000:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132008:	8b 40 04             	mov    0x4(%eax),%eax
f013200b:	85 c0                	test   %eax,%eax
f013200d:	74 0f                	je     f013201e <alloc_block_BF+0x1a5>
f013200f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132012:	8b 40 04             	mov    0x4(%eax),%eax
f0132015:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132018:	8b 12                	mov    (%edx),%edx
f013201a:	89 10                	mov    %edx,(%eax)
f013201c:	eb 0a                	jmp    f0132028 <alloc_block_BF+0x1af>
f013201e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132021:	8b 00                	mov    (%eax),%eax
f0132023:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132028:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013202b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132031:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132034:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013203b:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132040:	48                   	dec    %eax
f0132041:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132046:	83 ec 08             	sub    $0x8,%esp
f0132049:	ff 75 ec             	pushl  -0x14(%ebp)
f013204c:	68 64 7b 65 f0       	push   $0xf0657b64
f0132051:	e8 71 f9 ff ff       	call   f01319c7 <find_block>
f0132056:	83 c4 10             	add    $0x10,%esp
f0132059:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f013205c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013205f:	8b 50 08             	mov    0x8(%eax),%edx
f0132062:	8b 45 08             	mov    0x8(%ebp),%eax
f0132065:	01 c2                	add    %eax,%edx
f0132067:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013206a:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013206d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132070:	8b 40 0c             	mov    0xc(%eax),%eax
f0132073:	2b 45 08             	sub    0x8(%ebp),%eax
f0132076:	89 c2                	mov    %eax,%edx
f0132078:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013207b:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f013207e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132081:	eb 05                	jmp    f0132088 <alloc_block_BF+0x20f>
	}
	return NULL;
f0132083:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132088:	c9                   	leave  
f0132089:	c3                   	ret    

f013208a <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f013208a:	55                   	push   %ebp
f013208b:	89 e5                	mov    %esp,%ebp
f013208d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0132090:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0132095:	85 c0                	test   %eax,%eax
f0132097:	0f 85 de 01 00 00    	jne    f013227b <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013209d:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01320a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320a5:	e9 9e 01 00 00       	jmp    f0132248 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01320aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320ad:	8b 40 0c             	mov    0xc(%eax),%eax
f01320b0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01320b3:	0f 82 87 01 00 00    	jb     f0132240 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01320b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01320bf:	3b 45 08             	cmp    0x8(%ebp),%eax
f01320c2:	0f 85 95 00 00 00    	jne    f013215d <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01320c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320cc:	75 17                	jne    f01320e5 <alloc_block_NF+0x5b>
f01320ce:	83 ec 04             	sub    $0x4,%esp
f01320d1:	68 30 d1 13 f0       	push   $0xf013d130
f01320d6:	68 e0 00 00 00       	push   $0xe0
f01320db:	68 87 d0 13 f0       	push   $0xf013d087
f01320e0:	e8 16 e1 fc ff       	call   f01001fb <_panic>
f01320e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320e8:	8b 00                	mov    (%eax),%eax
f01320ea:	85 c0                	test   %eax,%eax
f01320ec:	74 10                	je     f01320fe <alloc_block_NF+0x74>
f01320ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f1:	8b 00                	mov    (%eax),%eax
f01320f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320f6:	8b 52 04             	mov    0x4(%edx),%edx
f01320f9:	89 50 04             	mov    %edx,0x4(%eax)
f01320fc:	eb 0b                	jmp    f0132109 <alloc_block_NF+0x7f>
f01320fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132101:	8b 40 04             	mov    0x4(%eax),%eax
f0132104:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132109:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013210c:	8b 40 04             	mov    0x4(%eax),%eax
f013210f:	85 c0                	test   %eax,%eax
f0132111:	74 0f                	je     f0132122 <alloc_block_NF+0x98>
f0132113:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132116:	8b 40 04             	mov    0x4(%eax),%eax
f0132119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013211c:	8b 12                	mov    (%edx),%edx
f013211e:	89 10                	mov    %edx,(%eax)
f0132120:	eb 0a                	jmp    f013212c <alloc_block_NF+0xa2>
f0132122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132125:	8b 00                	mov    (%eax),%eax
f0132127:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013212c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013212f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132135:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132138:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013213f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132144:	48                   	dec    %eax
f0132145:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
				   svaOfNF = point->sva;
f013214a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013214d:	8b 40 08             	mov    0x8(%eax),%eax
f0132150:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   return  point;
f0132155:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132158:	e9 f8 04 00 00       	jmp    f0132655 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f013215d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132160:	8b 40 0c             	mov    0xc(%eax),%eax
f0132163:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132166:	0f 86 d4 00 00 00    	jbe    f0132240 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013216c:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132171:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0132174:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132177:	8b 50 08             	mov    0x8(%eax),%edx
f013217a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013217d:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0132180:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132183:	8b 55 08             	mov    0x8(%ebp),%edx
f0132186:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132189:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013218d:	75 17                	jne    f01321a6 <alloc_block_NF+0x11c>
f013218f:	83 ec 04             	sub    $0x4,%esp
f0132192:	68 30 d1 13 f0       	push   $0xf013d130
f0132197:	68 e9 00 00 00       	push   $0xe9
f013219c:	68 87 d0 13 f0       	push   $0xf013d087
f01321a1:	e8 55 e0 fc ff       	call   f01001fb <_panic>
f01321a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321a9:	8b 00                	mov    (%eax),%eax
f01321ab:	85 c0                	test   %eax,%eax
f01321ad:	74 10                	je     f01321bf <alloc_block_NF+0x135>
f01321af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321b2:	8b 00                	mov    (%eax),%eax
f01321b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01321b7:	8b 52 04             	mov    0x4(%edx),%edx
f01321ba:	89 50 04             	mov    %edx,0x4(%eax)
f01321bd:	eb 0b                	jmp    f01321ca <alloc_block_NF+0x140>
f01321bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321c2:	8b 40 04             	mov    0x4(%eax),%eax
f01321c5:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01321ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321cd:	8b 40 04             	mov    0x4(%eax),%eax
f01321d0:	85 c0                	test   %eax,%eax
f01321d2:	74 0f                	je     f01321e3 <alloc_block_NF+0x159>
f01321d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321d7:	8b 40 04             	mov    0x4(%eax),%eax
f01321da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01321dd:	8b 12                	mov    (%edx),%edx
f01321df:	89 10                	mov    %edx,(%eax)
f01321e1:	eb 0a                	jmp    f01321ed <alloc_block_NF+0x163>
f01321e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321e6:	8b 00                	mov    (%eax),%eax
f01321e8:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01321ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01321f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132200:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132205:	48                   	dec    %eax
f0132206:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
				   svaOfNF = ReturnedBlock->sva;
f013220b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013220e:	8b 40 08             	mov    0x8(%eax),%eax
f0132211:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   point->sva += size;
f0132216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132219:	8b 50 08             	mov    0x8(%eax),%edx
f013221c:	8b 45 08             	mov    0x8(%ebp),%eax
f013221f:	01 c2                	add    %eax,%edx
f0132221:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132224:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132227:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013222a:	8b 40 0c             	mov    0xc(%eax),%eax
f013222d:	2b 45 08             	sub    0x8(%ebp),%eax
f0132230:	89 c2                	mov    %eax,%edx
f0132232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132235:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132238:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013223b:	e9 15 04 00 00       	jmp    f0132655 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132240:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132245:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132248:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013224c:	74 07                	je     f0132255 <alloc_block_NF+0x1cb>
f013224e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132251:	8b 00                	mov    (%eax),%eax
f0132253:	eb 05                	jmp    f013225a <alloc_block_NF+0x1d0>
f0132255:	b8 00 00 00 00       	mov    $0x0,%eax
f013225a:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f013225f:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132264:	85 c0                	test   %eax,%eax
f0132266:	0f 85 3e fe ff ff    	jne    f01320aa <alloc_block_NF+0x20>
f013226c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132270:	0f 85 34 fe ff ff    	jne    f01320aa <alloc_block_NF+0x20>
f0132276:	e9 d5 03 00 00       	jmp    f0132650 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013227b:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132280:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132283:	e9 b1 01 00 00       	jmp    f0132439 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013228b:	8b 50 08             	mov    0x8(%eax),%edx
f013228e:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0132293:	39 c2                	cmp    %eax,%edx
f0132295:	0f 82 96 01 00 00    	jb     f0132431 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f013229b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013229e:	8b 40 0c             	mov    0xc(%eax),%eax
f01322a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322a4:	0f 82 87 01 00 00    	jb     f0132431 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f01322aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322ad:	8b 40 0c             	mov    0xc(%eax),%eax
f01322b0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322b3:	0f 85 95 00 00 00    	jne    f013234e <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01322b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322bd:	75 17                	jne    f01322d6 <alloc_block_NF+0x24c>
f01322bf:	83 ec 04             	sub    $0x4,%esp
f01322c2:	68 30 d1 13 f0       	push   $0xf013d130
f01322c7:	68 fc 00 00 00       	push   $0xfc
f01322cc:	68 87 d0 13 f0       	push   $0xf013d087
f01322d1:	e8 25 df fc ff       	call   f01001fb <_panic>
f01322d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322d9:	8b 00                	mov    (%eax),%eax
f01322db:	85 c0                	test   %eax,%eax
f01322dd:	74 10                	je     f01322ef <alloc_block_NF+0x265>
f01322df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322e2:	8b 00                	mov    (%eax),%eax
f01322e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01322e7:	8b 52 04             	mov    0x4(%edx),%edx
f01322ea:	89 50 04             	mov    %edx,0x4(%eax)
f01322ed:	eb 0b                	jmp    f01322fa <alloc_block_NF+0x270>
f01322ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322f2:	8b 40 04             	mov    0x4(%eax),%eax
f01322f5:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01322fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322fd:	8b 40 04             	mov    0x4(%eax),%eax
f0132300:	85 c0                	test   %eax,%eax
f0132302:	74 0f                	je     f0132313 <alloc_block_NF+0x289>
f0132304:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132307:	8b 40 04             	mov    0x4(%eax),%eax
f013230a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013230d:	8b 12                	mov    (%edx),%edx
f013230f:	89 10                	mov    %edx,(%eax)
f0132311:	eb 0a                	jmp    f013231d <alloc_block_NF+0x293>
f0132313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132316:	8b 00                	mov    (%eax),%eax
f0132318:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013231d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132320:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132326:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132329:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132330:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132335:	48                   	dec    %eax
f0132336:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f013233b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233e:	8b 40 08             	mov    0x8(%eax),%eax
f0132341:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f0132346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132349:	e9 07 03 00 00       	jmp    f0132655 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013234e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132351:	8b 40 0c             	mov    0xc(%eax),%eax
f0132354:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132357:	0f 86 d4 00 00 00    	jbe    f0132431 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013235d:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132362:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132365:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132368:	8b 50 08             	mov    0x8(%eax),%edx
f013236b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013236e:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132371:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132374:	8b 55 08             	mov    0x8(%ebp),%edx
f0132377:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f013237a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013237e:	75 17                	jne    f0132397 <alloc_block_NF+0x30d>
f0132380:	83 ec 04             	sub    $0x4,%esp
f0132383:	68 30 d1 13 f0       	push   $0xf013d130
f0132388:	68 04 01 00 00       	push   $0x104
f013238d:	68 87 d0 13 f0       	push   $0xf013d087
f0132392:	e8 64 de fc ff       	call   f01001fb <_panic>
f0132397:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013239a:	8b 00                	mov    (%eax),%eax
f013239c:	85 c0                	test   %eax,%eax
f013239e:	74 10                	je     f01323b0 <alloc_block_NF+0x326>
f01323a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323a3:	8b 00                	mov    (%eax),%eax
f01323a5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01323a8:	8b 52 04             	mov    0x4(%edx),%edx
f01323ab:	89 50 04             	mov    %edx,0x4(%eax)
f01323ae:	eb 0b                	jmp    f01323bb <alloc_block_NF+0x331>
f01323b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323b3:	8b 40 04             	mov    0x4(%eax),%eax
f01323b6:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01323bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323be:	8b 40 04             	mov    0x4(%eax),%eax
f01323c1:	85 c0                	test   %eax,%eax
f01323c3:	74 0f                	je     f01323d4 <alloc_block_NF+0x34a>
f01323c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323c8:	8b 40 04             	mov    0x4(%eax),%eax
f01323cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01323ce:	8b 12                	mov    (%edx),%edx
f01323d0:	89 10                	mov    %edx,(%eax)
f01323d2:	eb 0a                	jmp    f01323de <alloc_block_NF+0x354>
f01323d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323d7:	8b 00                	mov    (%eax),%eax
f01323d9:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01323de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01323e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01323f1:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01323f6:	48                   	dec    %eax
f01323f7:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f01323fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323ff:	8b 40 08             	mov    0x8(%eax),%eax
f0132402:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f0132407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240a:	8b 50 08             	mov    0x8(%eax),%edx
f013240d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132410:	01 c2                	add    %eax,%edx
f0132412:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132415:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132418:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013241b:	8b 40 0c             	mov    0xc(%eax),%eax
f013241e:	2b 45 08             	sub    0x8(%ebp),%eax
f0132421:	89 c2                	mov    %eax,%edx
f0132423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132426:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013242c:	e9 24 02 00 00       	jmp    f0132655 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132431:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132436:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132439:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013243d:	74 07                	je     f0132446 <alloc_block_NF+0x3bc>
f013243f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132442:	8b 00                	mov    (%eax),%eax
f0132444:	eb 05                	jmp    f013244b <alloc_block_NF+0x3c1>
f0132446:	b8 00 00 00 00       	mov    $0x0,%eax
f013244b:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132450:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132455:	85 c0                	test   %eax,%eax
f0132457:	0f 85 2b fe ff ff    	jne    f0132288 <alloc_block_NF+0x1fe>
f013245d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132461:	0f 85 21 fe ff ff    	jne    f0132288 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132467:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013246c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013246f:	e9 ae 01 00 00       	jmp    f0132622 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132477:	8b 50 08             	mov    0x8(%eax),%edx
f013247a:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f013247f:	39 c2                	cmp    %eax,%edx
f0132481:	0f 83 93 01 00 00    	jae    f013261a <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248a:	8b 40 0c             	mov    0xc(%eax),%eax
f013248d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132490:	0f 82 84 01 00 00    	jb     f013261a <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132496:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132499:	8b 40 0c             	mov    0xc(%eax),%eax
f013249c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013249f:	0f 85 95 00 00 00    	jne    f013253a <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01324a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324a9:	75 17                	jne    f01324c2 <alloc_block_NF+0x438>
f01324ab:	83 ec 04             	sub    $0x4,%esp
f01324ae:	68 30 d1 13 f0       	push   $0xf013d130
f01324b3:	68 14 01 00 00       	push   $0x114
f01324b8:	68 87 d0 13 f0       	push   $0xf013d087
f01324bd:	e8 39 dd fc ff       	call   f01001fb <_panic>
f01324c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324c5:	8b 00                	mov    (%eax),%eax
f01324c7:	85 c0                	test   %eax,%eax
f01324c9:	74 10                	je     f01324db <alloc_block_NF+0x451>
f01324cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324ce:	8b 00                	mov    (%eax),%eax
f01324d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324d3:	8b 52 04             	mov    0x4(%edx),%edx
f01324d6:	89 50 04             	mov    %edx,0x4(%eax)
f01324d9:	eb 0b                	jmp    f01324e6 <alloc_block_NF+0x45c>
f01324db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324de:	8b 40 04             	mov    0x4(%eax),%eax
f01324e1:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01324e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e9:	8b 40 04             	mov    0x4(%eax),%eax
f01324ec:	85 c0                	test   %eax,%eax
f01324ee:	74 0f                	je     f01324ff <alloc_block_NF+0x475>
f01324f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f3:	8b 40 04             	mov    0x4(%eax),%eax
f01324f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324f9:	8b 12                	mov    (%edx),%edx
f01324fb:	89 10                	mov    %edx,(%eax)
f01324fd:	eb 0a                	jmp    f0132509 <alloc_block_NF+0x47f>
f01324ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132502:	8b 00                	mov    (%eax),%eax
f0132504:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132509:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013250c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132512:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132515:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013251c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132521:	48                   	dec    %eax
f0132522:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f0132527:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013252a:	8b 40 08             	mov    0x8(%eax),%eax
f013252d:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f0132532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132535:	e9 1b 01 00 00       	jmp    f0132655 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013253a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013253d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132540:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132543:	0f 86 d1 00 00 00    	jbe    f013261a <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132549:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013254e:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132554:	8b 50 08             	mov    0x8(%eax),%edx
f0132557:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013255a:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013255d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132560:	8b 55 08             	mov    0x8(%ebp),%edx
f0132563:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132566:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013256a:	75 17                	jne    f0132583 <alloc_block_NF+0x4f9>
f013256c:	83 ec 04             	sub    $0x4,%esp
f013256f:	68 30 d1 13 f0       	push   $0xf013d130
f0132574:	68 1c 01 00 00       	push   $0x11c
f0132579:	68 87 d0 13 f0       	push   $0xf013d087
f013257e:	e8 78 dc fc ff       	call   f01001fb <_panic>
f0132583:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132586:	8b 00                	mov    (%eax),%eax
f0132588:	85 c0                	test   %eax,%eax
f013258a:	74 10                	je     f013259c <alloc_block_NF+0x512>
f013258c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013258f:	8b 00                	mov    (%eax),%eax
f0132591:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132594:	8b 52 04             	mov    0x4(%edx),%edx
f0132597:	89 50 04             	mov    %edx,0x4(%eax)
f013259a:	eb 0b                	jmp    f01325a7 <alloc_block_NF+0x51d>
f013259c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013259f:	8b 40 04             	mov    0x4(%eax),%eax
f01325a2:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01325a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325aa:	8b 40 04             	mov    0x4(%eax),%eax
f01325ad:	85 c0                	test   %eax,%eax
f01325af:	74 0f                	je     f01325c0 <alloc_block_NF+0x536>
f01325b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325b4:	8b 40 04             	mov    0x4(%eax),%eax
f01325b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01325ba:	8b 12                	mov    (%edx),%edx
f01325bc:	89 10                	mov    %edx,(%eax)
f01325be:	eb 0a                	jmp    f01325ca <alloc_block_NF+0x540>
f01325c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325c3:	8b 00                	mov    (%eax),%eax
f01325c5:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01325ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01325d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01325dd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01325e2:	48                   	dec    %eax
f01325e3:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f01325e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325eb:	8b 40 08             	mov    0x8(%eax),%eax
f01325ee:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f01325f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325f6:	8b 50 08             	mov    0x8(%eax),%edx
f01325f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01325fc:	01 c2                	add    %eax,%edx
f01325fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132601:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132604:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132607:	8b 40 0c             	mov    0xc(%eax),%eax
f013260a:	2b 45 08             	sub    0x8(%ebp),%eax
f013260d:	89 c2                	mov    %eax,%edx
f013260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132612:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132615:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132618:	eb 3b                	jmp    f0132655 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f013261a:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013261f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132622:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132626:	74 07                	je     f013262f <alloc_block_NF+0x5a5>
f0132628:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013262b:	8b 00                	mov    (%eax),%eax
f013262d:	eb 05                	jmp    f0132634 <alloc_block_NF+0x5aa>
f013262f:	b8 00 00 00 00       	mov    $0x0,%eax
f0132634:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132639:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013263e:	85 c0                	test   %eax,%eax
f0132640:	0f 85 2e fe ff ff    	jne    f0132474 <alloc_block_NF+0x3ea>
f0132646:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013264a:	0f 85 24 fe ff ff    	jne    f0132474 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132650:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132655:	c9                   	leave  
f0132656:	c3                   	ret    

f0132657 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132657:	55                   	push   %ebp
f0132658:	89 e5                	mov    %esp,%ebp
f013265a:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f013265d:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132662:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132665:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f013266a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f013266d:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132672:	85 c0                	test   %eax,%eax
f0132674:	74 14                	je     f013268a <insert_sorted_with_merge_freeList+0x33>
f0132676:	8b 45 08             	mov    0x8(%ebp),%eax
f0132679:	8b 50 08             	mov    0x8(%eax),%edx
f013267c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013267f:	8b 40 08             	mov    0x8(%eax),%eax
f0132682:	39 c2                	cmp    %eax,%edx
f0132684:	0f 87 9b 01 00 00    	ja     f0132825 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f013268a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013268e:	75 17                	jne    f01326a7 <insert_sorted_with_merge_freeList+0x50>
f0132690:	83 ec 04             	sub    $0x4,%esp
f0132693:	68 64 d0 13 f0       	push   $0xf013d064
f0132698:	68 38 01 00 00       	push   $0x138
f013269d:	68 87 d0 13 f0       	push   $0xf013d087
f01326a2:	e8 54 db fc ff       	call   f01001fb <_panic>
f01326a7:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01326ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01326b0:	89 10                	mov    %edx,(%eax)
f01326b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01326b5:	8b 00                	mov    (%eax),%eax
f01326b7:	85 c0                	test   %eax,%eax
f01326b9:	74 0d                	je     f01326c8 <insert_sorted_with_merge_freeList+0x71>
f01326bb:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01326c0:	8b 55 08             	mov    0x8(%ebp),%edx
f01326c3:	89 50 04             	mov    %edx,0x4(%eax)
f01326c6:	eb 08                	jmp    f01326d0 <insert_sorted_with_merge_freeList+0x79>
f01326c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cb:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01326d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01326d3:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01326d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01326db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01326e2:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01326e7:	40                   	inc    %eax
f01326e8:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01326ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01326f1:	0f 84 a8 06 00 00    	je     f0132d9f <insert_sorted_with_merge_freeList+0x748>
f01326f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01326fa:	8b 50 08             	mov    0x8(%eax),%edx
f01326fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132700:	8b 40 0c             	mov    0xc(%eax),%eax
f0132703:	01 c2                	add    %eax,%edx
f0132705:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132708:	8b 40 08             	mov    0x8(%eax),%eax
f013270b:	39 c2                	cmp    %eax,%edx
f013270d:	0f 85 8c 06 00 00    	jne    f0132d9f <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132713:	8b 45 08             	mov    0x8(%ebp),%eax
f0132716:	8b 50 0c             	mov    0xc(%eax),%edx
f0132719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013271c:	8b 40 0c             	mov    0xc(%eax),%eax
f013271f:	01 c2                	add    %eax,%edx
f0132721:	8b 45 08             	mov    0x8(%ebp),%eax
f0132724:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013272b:	75 17                	jne    f0132744 <insert_sorted_with_merge_freeList+0xed>
f013272d:	83 ec 04             	sub    $0x4,%esp
f0132730:	68 30 d1 13 f0       	push   $0xf013d130
f0132735:	68 3c 01 00 00       	push   $0x13c
f013273a:	68 87 d0 13 f0       	push   $0xf013d087
f013273f:	e8 b7 da fc ff       	call   f01001fb <_panic>
f0132744:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132747:	8b 00                	mov    (%eax),%eax
f0132749:	85 c0                	test   %eax,%eax
f013274b:	74 10                	je     f013275d <insert_sorted_with_merge_freeList+0x106>
f013274d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132750:	8b 00                	mov    (%eax),%eax
f0132752:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132755:	8b 52 04             	mov    0x4(%edx),%edx
f0132758:	89 50 04             	mov    %edx,0x4(%eax)
f013275b:	eb 0b                	jmp    f0132768 <insert_sorted_with_merge_freeList+0x111>
f013275d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132760:	8b 40 04             	mov    0x4(%eax),%eax
f0132763:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132768:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013276b:	8b 40 04             	mov    0x4(%eax),%eax
f013276e:	85 c0                	test   %eax,%eax
f0132770:	74 0f                	je     f0132781 <insert_sorted_with_merge_freeList+0x12a>
f0132772:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132775:	8b 40 04             	mov    0x4(%eax),%eax
f0132778:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013277b:	8b 12                	mov    (%edx),%edx
f013277d:	89 10                	mov    %edx,(%eax)
f013277f:	eb 0a                	jmp    f013278b <insert_sorted_with_merge_freeList+0x134>
f0132781:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132784:	8b 00                	mov    (%eax),%eax
f0132786:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013278b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013278e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132794:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132797:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013279e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01327a3:	48                   	dec    %eax
f01327a4:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			head->size = 0;
f01327a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327ac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f01327b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327b6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f01327bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01327c1:	75 17                	jne    f01327da <insert_sorted_with_merge_freeList+0x183>
f01327c3:	83 ec 04             	sub    $0x4,%esp
f01327c6:	68 64 d0 13 f0       	push   $0xf013d064
f01327cb:	68 3f 01 00 00       	push   $0x13f
f01327d0:	68 87 d0 13 f0       	push   $0xf013d087
f01327d5:	e8 21 da fc ff       	call   f01001fb <_panic>
f01327da:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01327e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327e3:	89 10                	mov    %edx,(%eax)
f01327e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327e8:	8b 00                	mov    (%eax),%eax
f01327ea:	85 c0                	test   %eax,%eax
f01327ec:	74 0d                	je     f01327fb <insert_sorted_with_merge_freeList+0x1a4>
f01327ee:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01327f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01327f6:	89 50 04             	mov    %edx,0x4(%eax)
f01327f9:	eb 08                	jmp    f0132803 <insert_sorted_with_merge_freeList+0x1ac>
f01327fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327fe:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132803:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132806:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f013280b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013280e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132815:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013281a:	40                   	inc    %eax
f013281b:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132820:	e9 7a 05 00 00       	jmp    f0132d9f <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132825:	8b 45 08             	mov    0x8(%ebp),%eax
f0132828:	8b 50 08             	mov    0x8(%eax),%edx
f013282b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013282e:	8b 40 08             	mov    0x8(%eax),%eax
f0132831:	39 c2                	cmp    %eax,%edx
f0132833:	0f 82 14 01 00 00    	jb     f013294d <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132839:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013283c:	8b 50 08             	mov    0x8(%eax),%edx
f013283f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132842:	8b 40 0c             	mov    0xc(%eax),%eax
f0132845:	01 c2                	add    %eax,%edx
f0132847:	8b 45 08             	mov    0x8(%ebp),%eax
f013284a:	8b 40 08             	mov    0x8(%eax),%eax
f013284d:	39 c2                	cmp    %eax,%edx
f013284f:	0f 85 90 00 00 00    	jne    f01328e5 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132855:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132858:	8b 50 0c             	mov    0xc(%eax),%edx
f013285b:	8b 45 08             	mov    0x8(%ebp),%eax
f013285e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132861:	01 c2                	add    %eax,%edx
f0132863:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132866:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132869:	8b 45 08             	mov    0x8(%ebp),%eax
f013286c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132873:	8b 45 08             	mov    0x8(%ebp),%eax
f0132876:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013287d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132881:	75 17                	jne    f013289a <insert_sorted_with_merge_freeList+0x243>
f0132883:	83 ec 04             	sub    $0x4,%esp
f0132886:	68 64 d0 13 f0       	push   $0xf013d064
f013288b:	68 49 01 00 00       	push   $0x149
f0132890:	68 87 d0 13 f0       	push   $0xf013d087
f0132895:	e8 61 d9 fc ff       	call   f01001fb <_panic>
f013289a:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01328a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01328a3:	89 10                	mov    %edx,(%eax)
f01328a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01328a8:	8b 00                	mov    (%eax),%eax
f01328aa:	85 c0                	test   %eax,%eax
f01328ac:	74 0d                	je     f01328bb <insert_sorted_with_merge_freeList+0x264>
f01328ae:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01328b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01328b6:	89 50 04             	mov    %edx,0x4(%eax)
f01328b9:	eb 08                	jmp    f01328c3 <insert_sorted_with_merge_freeList+0x26c>
f01328bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01328be:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01328c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01328c6:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01328cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01328ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328d5:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01328da:	40                   	inc    %eax
f01328db:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01328e0:	e9 bb 04 00 00       	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f01328e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01328e9:	75 17                	jne    f0132902 <insert_sorted_with_merge_freeList+0x2ab>
f01328eb:	83 ec 04             	sub    $0x4,%esp
f01328ee:	68 d8 d0 13 f0       	push   $0xf013d0d8
f01328f3:	68 4c 01 00 00       	push   $0x14c
f01328f8:	68 87 d0 13 f0       	push   $0xf013d087
f01328fd:	e8 f9 d8 fc ff       	call   f01001fb <_panic>
f0132902:	8b 15 68 7b 65 f0    	mov    0xf0657b68,%edx
f0132908:	8b 45 08             	mov    0x8(%ebp),%eax
f013290b:	89 50 04             	mov    %edx,0x4(%eax)
f013290e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132911:	8b 40 04             	mov    0x4(%eax),%eax
f0132914:	85 c0                	test   %eax,%eax
f0132916:	74 0c                	je     f0132924 <insert_sorted_with_merge_freeList+0x2cd>
f0132918:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f013291d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132920:	89 10                	mov    %edx,(%eax)
f0132922:	eb 08                	jmp    f013292c <insert_sorted_with_merge_freeList+0x2d5>
f0132924:	8b 45 08             	mov    0x8(%ebp),%eax
f0132927:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013292c:	8b 45 08             	mov    0x8(%ebp),%eax
f013292f:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132934:	8b 45 08             	mov    0x8(%ebp),%eax
f0132937:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013293d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132942:	40                   	inc    %eax
f0132943:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132948:	e9 53 04 00 00       	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013294d:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132952:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132955:	e9 15 04 00 00       	jmp    f0132d6f <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f013295a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295d:	8b 00                	mov    (%eax),%eax
f013295f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132962:	8b 45 08             	mov    0x8(%ebp),%eax
f0132965:	8b 50 08             	mov    0x8(%eax),%edx
f0132968:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013296b:	8b 40 08             	mov    0x8(%eax),%eax
f013296e:	39 c2                	cmp    %eax,%edx
f0132970:	0f 86 f1 03 00 00    	jbe    f0132d67 <insert_sorted_with_merge_freeList+0x710>
f0132976:	8b 45 08             	mov    0x8(%ebp),%eax
f0132979:	8b 50 08             	mov    0x8(%eax),%edx
f013297c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013297f:	8b 40 08             	mov    0x8(%eax),%eax
f0132982:	39 c2                	cmp    %eax,%edx
f0132984:	0f 83 dd 03 00 00    	jae    f0132d67 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f013298a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013298d:	8b 50 08             	mov    0x8(%eax),%edx
f0132990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132993:	8b 40 0c             	mov    0xc(%eax),%eax
f0132996:	01 c2                	add    %eax,%edx
f0132998:	8b 45 08             	mov    0x8(%ebp),%eax
f013299b:	8b 40 08             	mov    0x8(%eax),%eax
f013299e:	39 c2                	cmp    %eax,%edx
f01329a0:	0f 85 b9 01 00 00    	jne    f0132b5f <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01329a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01329a9:	8b 50 08             	mov    0x8(%eax),%edx
f01329ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01329af:	8b 40 0c             	mov    0xc(%eax),%eax
f01329b2:	01 c2                	add    %eax,%edx
f01329b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329b7:	8b 40 08             	mov    0x8(%eax),%eax
f01329ba:	39 c2                	cmp    %eax,%edx
f01329bc:	0f 85 0d 01 00 00    	jne    f0132acf <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01329c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329c5:	8b 50 0c             	mov    0xc(%eax),%edx
f01329c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329cb:	8b 40 0c             	mov    0xc(%eax),%eax
f01329ce:	01 c2                	add    %eax,%edx
f01329d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329d3:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01329d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01329da:	75 17                	jne    f01329f3 <insert_sorted_with_merge_freeList+0x39c>
f01329dc:	83 ec 04             	sub    $0x4,%esp
f01329df:	68 30 d1 13 f0       	push   $0xf013d130
f01329e4:	68 5c 01 00 00       	push   $0x15c
f01329e9:	68 87 d0 13 f0       	push   $0xf013d087
f01329ee:	e8 08 d8 fc ff       	call   f01001fb <_panic>
f01329f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329f6:	8b 00                	mov    (%eax),%eax
f01329f8:	85 c0                	test   %eax,%eax
f01329fa:	74 10                	je     f0132a0c <insert_sorted_with_merge_freeList+0x3b5>
f01329fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329ff:	8b 00                	mov    (%eax),%eax
f0132a01:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a04:	8b 52 04             	mov    0x4(%edx),%edx
f0132a07:	89 50 04             	mov    %edx,0x4(%eax)
f0132a0a:	eb 0b                	jmp    f0132a17 <insert_sorted_with_merge_freeList+0x3c0>
f0132a0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a0f:	8b 40 04             	mov    0x4(%eax),%eax
f0132a12:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132a17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a1a:	8b 40 04             	mov    0x4(%eax),%eax
f0132a1d:	85 c0                	test   %eax,%eax
f0132a1f:	74 0f                	je     f0132a30 <insert_sorted_with_merge_freeList+0x3d9>
f0132a21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a24:	8b 40 04             	mov    0x4(%eax),%eax
f0132a27:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a2a:	8b 12                	mov    (%edx),%edx
f0132a2c:	89 10                	mov    %edx,(%eax)
f0132a2e:	eb 0a                	jmp    f0132a3a <insert_sorted_with_merge_freeList+0x3e3>
f0132a30:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a33:	8b 00                	mov    (%eax),%eax
f0132a35:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132a3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a4d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132a52:	48                   	dec    %eax
f0132a53:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
						nextBlock->sva = 0;
f0132a58:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a5b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a65:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132a6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132a70:	75 17                	jne    f0132a89 <insert_sorted_with_merge_freeList+0x432>
f0132a72:	83 ec 04             	sub    $0x4,%esp
f0132a75:	68 64 d0 13 f0       	push   $0xf013d064
f0132a7a:	68 5f 01 00 00       	push   $0x15f
f0132a7f:	68 87 d0 13 f0       	push   $0xf013d087
f0132a84:	e8 72 d7 fc ff       	call   f01001fb <_panic>
f0132a89:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132a8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a92:	89 10                	mov    %edx,(%eax)
f0132a94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a97:	8b 00                	mov    (%eax),%eax
f0132a99:	85 c0                	test   %eax,%eax
f0132a9b:	74 0d                	je     f0132aaa <insert_sorted_with_merge_freeList+0x453>
f0132a9d:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132aa2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132aa5:	89 50 04             	mov    %edx,0x4(%eax)
f0132aa8:	eb 08                	jmp    f0132ab2 <insert_sorted_with_merge_freeList+0x45b>
f0132aaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aad:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ab5:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132aba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132abd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ac4:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132ac9:	40                   	inc    %eax
f0132aca:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					}
					currentBlock->size += blockToInsert->size;
f0132acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad2:	8b 50 0c             	mov    0xc(%eax),%edx
f0132ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ad8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132adb:	01 c2                	add    %eax,%edx
f0132add:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ae0:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132ae3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ae6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132aed:	8b 45 08             	mov    0x8(%ebp),%eax
f0132af0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132af7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132afb:	75 17                	jne    f0132b14 <insert_sorted_with_merge_freeList+0x4bd>
f0132afd:	83 ec 04             	sub    $0x4,%esp
f0132b00:	68 64 d0 13 f0       	push   $0xf013d064
f0132b05:	68 64 01 00 00       	push   $0x164
f0132b0a:	68 87 d0 13 f0       	push   $0xf013d087
f0132b0f:	e8 e7 d6 fc ff       	call   f01001fb <_panic>
f0132b14:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132b1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b1d:	89 10                	mov    %edx,(%eax)
f0132b1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b22:	8b 00                	mov    (%eax),%eax
f0132b24:	85 c0                	test   %eax,%eax
f0132b26:	74 0d                	je     f0132b35 <insert_sorted_with_merge_freeList+0x4de>
f0132b28:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132b2d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b30:	89 50 04             	mov    %edx,0x4(%eax)
f0132b33:	eb 08                	jmp    f0132b3d <insert_sorted_with_merge_freeList+0x4e6>
f0132b35:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b38:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b40:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b48:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b4f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132b54:	40                   	inc    %eax
f0132b55:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132b5a:	e9 41 02 00 00       	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132b5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b62:	8b 50 08             	mov    0x8(%eax),%edx
f0132b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b68:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b6b:	01 c2                	add    %eax,%edx
f0132b6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b70:	8b 40 08             	mov    0x8(%eax),%eax
f0132b73:	39 c2                	cmp    %eax,%edx
f0132b75:	0f 85 7c 01 00 00    	jne    f0132cf7 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132b7b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b7f:	74 06                	je     f0132b87 <insert_sorted_with_merge_freeList+0x530>
f0132b81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132b85:	75 17                	jne    f0132b9e <insert_sorted_with_merge_freeList+0x547>
f0132b87:	83 ec 04             	sub    $0x4,%esp
f0132b8a:	68 a0 d0 13 f0       	push   $0xf013d0a0
f0132b8f:	68 69 01 00 00       	push   $0x169
f0132b94:	68 87 d0 13 f0       	push   $0xf013d087
f0132b99:	e8 5d d6 fc ff       	call   f01001fb <_panic>
f0132b9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ba1:	8b 50 04             	mov    0x4(%eax),%edx
f0132ba4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ba7:	89 50 04             	mov    %edx,0x4(%eax)
f0132baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bad:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bb0:	89 10                	mov    %edx,(%eax)
f0132bb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bb5:	8b 40 04             	mov    0x4(%eax),%eax
f0132bb8:	85 c0                	test   %eax,%eax
f0132bba:	74 0d                	je     f0132bc9 <insert_sorted_with_merge_freeList+0x572>
f0132bbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bbf:	8b 40 04             	mov    0x4(%eax),%eax
f0132bc2:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bc5:	89 10                	mov    %edx,(%eax)
f0132bc7:	eb 08                	jmp    f0132bd1 <insert_sorted_with_merge_freeList+0x57a>
f0132bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bcc:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132bd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bd4:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bd7:	89 50 04             	mov    %edx,0x4(%eax)
f0132bda:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132bdf:	40                   	inc    %eax
f0132be0:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					blockToInsert->size += nextBlock->size;
f0132be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132be8:	8b 50 0c             	mov    0xc(%eax),%edx
f0132beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bee:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bf1:	01 c2                	add    %eax,%edx
f0132bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bf6:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132bf9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132bfd:	75 17                	jne    f0132c16 <insert_sorted_with_merge_freeList+0x5bf>
f0132bff:	83 ec 04             	sub    $0x4,%esp
f0132c02:	68 30 d1 13 f0       	push   $0xf013d130
f0132c07:	68 6b 01 00 00       	push   $0x16b
f0132c0c:	68 87 d0 13 f0       	push   $0xf013d087
f0132c11:	e8 e5 d5 fc ff       	call   f01001fb <_panic>
f0132c16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c19:	8b 00                	mov    (%eax),%eax
f0132c1b:	85 c0                	test   %eax,%eax
f0132c1d:	74 10                	je     f0132c2f <insert_sorted_with_merge_freeList+0x5d8>
f0132c1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c22:	8b 00                	mov    (%eax),%eax
f0132c24:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132c27:	8b 52 04             	mov    0x4(%edx),%edx
f0132c2a:	89 50 04             	mov    %edx,0x4(%eax)
f0132c2d:	eb 0b                	jmp    f0132c3a <insert_sorted_with_merge_freeList+0x5e3>
f0132c2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c32:	8b 40 04             	mov    0x4(%eax),%eax
f0132c35:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c3d:	8b 40 04             	mov    0x4(%eax),%eax
f0132c40:	85 c0                	test   %eax,%eax
f0132c42:	74 0f                	je     f0132c53 <insert_sorted_with_merge_freeList+0x5fc>
f0132c44:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c47:	8b 40 04             	mov    0x4(%eax),%eax
f0132c4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132c4d:	8b 12                	mov    (%edx),%edx
f0132c4f:	89 10                	mov    %edx,(%eax)
f0132c51:	eb 0a                	jmp    f0132c5d <insert_sorted_with_merge_freeList+0x606>
f0132c53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c56:	8b 00                	mov    (%eax),%eax
f0132c58:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132c5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c70:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132c75:	48                   	dec    %eax
f0132c76:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					nextBlock->sva = 0;
f0132c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c7e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c88:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132c8f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132c93:	75 17                	jne    f0132cac <insert_sorted_with_merge_freeList+0x655>
f0132c95:	83 ec 04             	sub    $0x4,%esp
f0132c98:	68 64 d0 13 f0       	push   $0xf013d064
f0132c9d:	68 6e 01 00 00       	push   $0x16e
f0132ca2:	68 87 d0 13 f0       	push   $0xf013d087
f0132ca7:	e8 4f d5 fc ff       	call   f01001fb <_panic>
f0132cac:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132cb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cb5:	89 10                	mov    %edx,(%eax)
f0132cb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cba:	8b 00                	mov    (%eax),%eax
f0132cbc:	85 c0                	test   %eax,%eax
f0132cbe:	74 0d                	je     f0132ccd <insert_sorted_with_merge_freeList+0x676>
f0132cc0:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132cc5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132cc8:	89 50 04             	mov    %edx,0x4(%eax)
f0132ccb:	eb 08                	jmp    f0132cd5 <insert_sorted_with_merge_freeList+0x67e>
f0132ccd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cd0:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132cd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cd8:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132cdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ce0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ce7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132cec:	40                   	inc    %eax
f0132ced:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132cf2:	e9 a9 00 00 00       	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0132cf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132cfb:	74 06                	je     f0132d03 <insert_sorted_with_merge_freeList+0x6ac>
f0132cfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132d01:	75 17                	jne    f0132d1a <insert_sorted_with_merge_freeList+0x6c3>
f0132d03:	83 ec 04             	sub    $0x4,%esp
f0132d06:	68 fc d0 13 f0       	push   $0xf013d0fc
f0132d0b:	68 73 01 00 00       	push   $0x173
f0132d10:	68 87 d0 13 f0       	push   $0xf013d087
f0132d15:	e8 e1 d4 fc ff       	call   f01001fb <_panic>
f0132d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d1d:	8b 10                	mov    (%eax),%edx
f0132d1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d22:	89 10                	mov    %edx,(%eax)
f0132d24:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d27:	8b 00                	mov    (%eax),%eax
f0132d29:	85 c0                	test   %eax,%eax
f0132d2b:	74 0b                	je     f0132d38 <insert_sorted_with_merge_freeList+0x6e1>
f0132d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d30:	8b 00                	mov    (%eax),%eax
f0132d32:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d35:	89 50 04             	mov    %edx,0x4(%eax)
f0132d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d3b:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d3e:	89 10                	mov    %edx,(%eax)
f0132d40:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132d46:	89 50 04             	mov    %edx,0x4(%eax)
f0132d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d4c:	8b 00                	mov    (%eax),%eax
f0132d4e:	85 c0                	test   %eax,%eax
f0132d50:	75 08                	jne    f0132d5a <insert_sorted_with_merge_freeList+0x703>
f0132d52:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d55:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132d5a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132d5f:	40                   	inc    %eax
f0132d60:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					break;
f0132d65:	eb 39                	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132d67:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d73:	74 07                	je     f0132d7c <insert_sorted_with_merge_freeList+0x725>
f0132d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d78:	8b 00                	mov    (%eax),%eax
f0132d7a:	eb 05                	jmp    f0132d81 <insert_sorted_with_merge_freeList+0x72a>
f0132d7c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132d81:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132d86:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132d8b:	85 c0                	test   %eax,%eax
f0132d8d:	0f 85 c7 fb ff ff    	jne    f013295a <insert_sorted_with_merge_freeList+0x303>
f0132d93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d97:	0f 85 bd fb ff ff    	jne    f013295a <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132d9d:	eb 01                	jmp    f0132da0 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132d9f:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132da0:	90                   	nop
f0132da1:	c9                   	leave  
f0132da2:	c3                   	ret    
f0132da3:	90                   	nop

f0132da4 <__udivdi3>:
f0132da4:	55                   	push   %ebp
f0132da5:	57                   	push   %edi
f0132da6:	56                   	push   %esi
f0132da7:	53                   	push   %ebx
f0132da8:	83 ec 1c             	sub    $0x1c,%esp
f0132dab:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132daf:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132db3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132db7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132dbb:	89 ca                	mov    %ecx,%edx
f0132dbd:	89 f8                	mov    %edi,%eax
f0132dbf:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132dc3:	85 f6                	test   %esi,%esi
f0132dc5:	75 2d                	jne    f0132df4 <__udivdi3+0x50>
f0132dc7:	39 cf                	cmp    %ecx,%edi
f0132dc9:	77 65                	ja     f0132e30 <__udivdi3+0x8c>
f0132dcb:	89 fd                	mov    %edi,%ebp
f0132dcd:	85 ff                	test   %edi,%edi
f0132dcf:	75 0b                	jne    f0132ddc <__udivdi3+0x38>
f0132dd1:	b8 01 00 00 00       	mov    $0x1,%eax
f0132dd6:	31 d2                	xor    %edx,%edx
f0132dd8:	f7 f7                	div    %edi
f0132dda:	89 c5                	mov    %eax,%ebp
f0132ddc:	31 d2                	xor    %edx,%edx
f0132dde:	89 c8                	mov    %ecx,%eax
f0132de0:	f7 f5                	div    %ebp
f0132de2:	89 c1                	mov    %eax,%ecx
f0132de4:	89 d8                	mov    %ebx,%eax
f0132de6:	f7 f5                	div    %ebp
f0132de8:	89 cf                	mov    %ecx,%edi
f0132dea:	89 fa                	mov    %edi,%edx
f0132dec:	83 c4 1c             	add    $0x1c,%esp
f0132def:	5b                   	pop    %ebx
f0132df0:	5e                   	pop    %esi
f0132df1:	5f                   	pop    %edi
f0132df2:	5d                   	pop    %ebp
f0132df3:	c3                   	ret    
f0132df4:	39 ce                	cmp    %ecx,%esi
f0132df6:	77 28                	ja     f0132e20 <__udivdi3+0x7c>
f0132df8:	0f bd fe             	bsr    %esi,%edi
f0132dfb:	83 f7 1f             	xor    $0x1f,%edi
f0132dfe:	75 40                	jne    f0132e40 <__udivdi3+0x9c>
f0132e00:	39 ce                	cmp    %ecx,%esi
f0132e02:	72 0a                	jb     f0132e0e <__udivdi3+0x6a>
f0132e04:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132e08:	0f 87 9e 00 00 00    	ja     f0132eac <__udivdi3+0x108>
f0132e0e:	b8 01 00 00 00       	mov    $0x1,%eax
f0132e13:	89 fa                	mov    %edi,%edx
f0132e15:	83 c4 1c             	add    $0x1c,%esp
f0132e18:	5b                   	pop    %ebx
f0132e19:	5e                   	pop    %esi
f0132e1a:	5f                   	pop    %edi
f0132e1b:	5d                   	pop    %ebp
f0132e1c:	c3                   	ret    
f0132e1d:	8d 76 00             	lea    0x0(%esi),%esi
f0132e20:	31 ff                	xor    %edi,%edi
f0132e22:	31 c0                	xor    %eax,%eax
f0132e24:	89 fa                	mov    %edi,%edx
f0132e26:	83 c4 1c             	add    $0x1c,%esp
f0132e29:	5b                   	pop    %ebx
f0132e2a:	5e                   	pop    %esi
f0132e2b:	5f                   	pop    %edi
f0132e2c:	5d                   	pop    %ebp
f0132e2d:	c3                   	ret    
f0132e2e:	66 90                	xchg   %ax,%ax
f0132e30:	89 d8                	mov    %ebx,%eax
f0132e32:	f7 f7                	div    %edi
f0132e34:	31 ff                	xor    %edi,%edi
f0132e36:	89 fa                	mov    %edi,%edx
f0132e38:	83 c4 1c             	add    $0x1c,%esp
f0132e3b:	5b                   	pop    %ebx
f0132e3c:	5e                   	pop    %esi
f0132e3d:	5f                   	pop    %edi
f0132e3e:	5d                   	pop    %ebp
f0132e3f:	c3                   	ret    
f0132e40:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132e45:	89 eb                	mov    %ebp,%ebx
f0132e47:	29 fb                	sub    %edi,%ebx
f0132e49:	89 f9                	mov    %edi,%ecx
f0132e4b:	d3 e6                	shl    %cl,%esi
f0132e4d:	89 c5                	mov    %eax,%ebp
f0132e4f:	88 d9                	mov    %bl,%cl
f0132e51:	d3 ed                	shr    %cl,%ebp
f0132e53:	89 e9                	mov    %ebp,%ecx
f0132e55:	09 f1                	or     %esi,%ecx
f0132e57:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132e5b:	89 f9                	mov    %edi,%ecx
f0132e5d:	d3 e0                	shl    %cl,%eax
f0132e5f:	89 c5                	mov    %eax,%ebp
f0132e61:	89 d6                	mov    %edx,%esi
f0132e63:	88 d9                	mov    %bl,%cl
f0132e65:	d3 ee                	shr    %cl,%esi
f0132e67:	89 f9                	mov    %edi,%ecx
f0132e69:	d3 e2                	shl    %cl,%edx
f0132e6b:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132e6f:	88 d9                	mov    %bl,%cl
f0132e71:	d3 e8                	shr    %cl,%eax
f0132e73:	09 c2                	or     %eax,%edx
f0132e75:	89 d0                	mov    %edx,%eax
f0132e77:	89 f2                	mov    %esi,%edx
f0132e79:	f7 74 24 0c          	divl   0xc(%esp)
f0132e7d:	89 d6                	mov    %edx,%esi
f0132e7f:	89 c3                	mov    %eax,%ebx
f0132e81:	f7 e5                	mul    %ebp
f0132e83:	39 d6                	cmp    %edx,%esi
f0132e85:	72 19                	jb     f0132ea0 <__udivdi3+0xfc>
f0132e87:	74 0b                	je     f0132e94 <__udivdi3+0xf0>
f0132e89:	89 d8                	mov    %ebx,%eax
f0132e8b:	31 ff                	xor    %edi,%edi
f0132e8d:	e9 58 ff ff ff       	jmp    f0132dea <__udivdi3+0x46>
f0132e92:	66 90                	xchg   %ax,%ax
f0132e94:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132e98:	89 f9                	mov    %edi,%ecx
f0132e9a:	d3 e2                	shl    %cl,%edx
f0132e9c:	39 c2                	cmp    %eax,%edx
f0132e9e:	73 e9                	jae    f0132e89 <__udivdi3+0xe5>
f0132ea0:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132ea3:	31 ff                	xor    %edi,%edi
f0132ea5:	e9 40 ff ff ff       	jmp    f0132dea <__udivdi3+0x46>
f0132eaa:	66 90                	xchg   %ax,%ax
f0132eac:	31 c0                	xor    %eax,%eax
f0132eae:	e9 37 ff ff ff       	jmp    f0132dea <__udivdi3+0x46>
f0132eb3:	90                   	nop

f0132eb4 <__umoddi3>:
f0132eb4:	55                   	push   %ebp
f0132eb5:	57                   	push   %edi
f0132eb6:	56                   	push   %esi
f0132eb7:	53                   	push   %ebx
f0132eb8:	83 ec 1c             	sub    $0x1c,%esp
f0132ebb:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132ebf:	8b 74 24 34          	mov    0x34(%esp),%esi
f0132ec3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132ec7:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132ecb:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0132ecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0132ed3:	89 f3                	mov    %esi,%ebx
f0132ed5:	89 fa                	mov    %edi,%edx
f0132ed7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132edb:	89 34 24             	mov    %esi,(%esp)
f0132ede:	85 c0                	test   %eax,%eax
f0132ee0:	75 1a                	jne    f0132efc <__umoddi3+0x48>
f0132ee2:	39 f7                	cmp    %esi,%edi
f0132ee4:	0f 86 a2 00 00 00    	jbe    f0132f8c <__umoddi3+0xd8>
f0132eea:	89 c8                	mov    %ecx,%eax
f0132eec:	89 f2                	mov    %esi,%edx
f0132eee:	f7 f7                	div    %edi
f0132ef0:	89 d0                	mov    %edx,%eax
f0132ef2:	31 d2                	xor    %edx,%edx
f0132ef4:	83 c4 1c             	add    $0x1c,%esp
f0132ef7:	5b                   	pop    %ebx
f0132ef8:	5e                   	pop    %esi
f0132ef9:	5f                   	pop    %edi
f0132efa:	5d                   	pop    %ebp
f0132efb:	c3                   	ret    
f0132efc:	39 f0                	cmp    %esi,%eax
f0132efe:	0f 87 ac 00 00 00    	ja     f0132fb0 <__umoddi3+0xfc>
f0132f04:	0f bd e8             	bsr    %eax,%ebp
f0132f07:	83 f5 1f             	xor    $0x1f,%ebp
f0132f0a:	0f 84 ac 00 00 00    	je     f0132fbc <__umoddi3+0x108>
f0132f10:	bf 20 00 00 00       	mov    $0x20,%edi
f0132f15:	29 ef                	sub    %ebp,%edi
f0132f17:	89 fe                	mov    %edi,%esi
f0132f19:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132f1d:	89 e9                	mov    %ebp,%ecx
f0132f1f:	d3 e0                	shl    %cl,%eax
f0132f21:	89 d7                	mov    %edx,%edi
f0132f23:	89 f1                	mov    %esi,%ecx
f0132f25:	d3 ef                	shr    %cl,%edi
f0132f27:	09 c7                	or     %eax,%edi
f0132f29:	89 e9                	mov    %ebp,%ecx
f0132f2b:	d3 e2                	shl    %cl,%edx
f0132f2d:	89 14 24             	mov    %edx,(%esp)
f0132f30:	89 d8                	mov    %ebx,%eax
f0132f32:	d3 e0                	shl    %cl,%eax
f0132f34:	89 c2                	mov    %eax,%edx
f0132f36:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132f3a:	d3 e0                	shl    %cl,%eax
f0132f3c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132f40:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132f44:	89 f1                	mov    %esi,%ecx
f0132f46:	d3 e8                	shr    %cl,%eax
f0132f48:	09 d0                	or     %edx,%eax
f0132f4a:	d3 eb                	shr    %cl,%ebx
f0132f4c:	89 da                	mov    %ebx,%edx
f0132f4e:	f7 f7                	div    %edi
f0132f50:	89 d3                	mov    %edx,%ebx
f0132f52:	f7 24 24             	mull   (%esp)
f0132f55:	89 c6                	mov    %eax,%esi
f0132f57:	89 d1                	mov    %edx,%ecx
f0132f59:	39 d3                	cmp    %edx,%ebx
f0132f5b:	0f 82 87 00 00 00    	jb     f0132fe8 <__umoddi3+0x134>
f0132f61:	0f 84 91 00 00 00    	je     f0132ff8 <__umoddi3+0x144>
f0132f67:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132f6b:	29 f2                	sub    %esi,%edx
f0132f6d:	19 cb                	sbb    %ecx,%ebx
f0132f6f:	89 d8                	mov    %ebx,%eax
f0132f71:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132f75:	d3 e0                	shl    %cl,%eax
f0132f77:	89 e9                	mov    %ebp,%ecx
f0132f79:	d3 ea                	shr    %cl,%edx
f0132f7b:	09 d0                	or     %edx,%eax
f0132f7d:	89 e9                	mov    %ebp,%ecx
f0132f7f:	d3 eb                	shr    %cl,%ebx
f0132f81:	89 da                	mov    %ebx,%edx
f0132f83:	83 c4 1c             	add    $0x1c,%esp
f0132f86:	5b                   	pop    %ebx
f0132f87:	5e                   	pop    %esi
f0132f88:	5f                   	pop    %edi
f0132f89:	5d                   	pop    %ebp
f0132f8a:	c3                   	ret    
f0132f8b:	90                   	nop
f0132f8c:	89 fd                	mov    %edi,%ebp
f0132f8e:	85 ff                	test   %edi,%edi
f0132f90:	75 0b                	jne    f0132f9d <__umoddi3+0xe9>
f0132f92:	b8 01 00 00 00       	mov    $0x1,%eax
f0132f97:	31 d2                	xor    %edx,%edx
f0132f99:	f7 f7                	div    %edi
f0132f9b:	89 c5                	mov    %eax,%ebp
f0132f9d:	89 f0                	mov    %esi,%eax
f0132f9f:	31 d2                	xor    %edx,%edx
f0132fa1:	f7 f5                	div    %ebp
f0132fa3:	89 c8                	mov    %ecx,%eax
f0132fa5:	f7 f5                	div    %ebp
f0132fa7:	89 d0                	mov    %edx,%eax
f0132fa9:	e9 44 ff ff ff       	jmp    f0132ef2 <__umoddi3+0x3e>
f0132fae:	66 90                	xchg   %ax,%ax
f0132fb0:	89 c8                	mov    %ecx,%eax
f0132fb2:	89 f2                	mov    %esi,%edx
f0132fb4:	83 c4 1c             	add    $0x1c,%esp
f0132fb7:	5b                   	pop    %ebx
f0132fb8:	5e                   	pop    %esi
f0132fb9:	5f                   	pop    %edi
f0132fba:	5d                   	pop    %ebp
f0132fbb:	c3                   	ret    
f0132fbc:	3b 04 24             	cmp    (%esp),%eax
f0132fbf:	72 06                	jb     f0132fc7 <__umoddi3+0x113>
f0132fc1:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132fc5:	77 0f                	ja     f0132fd6 <__umoddi3+0x122>
f0132fc7:	89 f2                	mov    %esi,%edx
f0132fc9:	29 f9                	sub    %edi,%ecx
f0132fcb:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132fcf:	89 14 24             	mov    %edx,(%esp)
f0132fd2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132fd6:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132fda:	8b 14 24             	mov    (%esp),%edx
f0132fdd:	83 c4 1c             	add    $0x1c,%esp
f0132fe0:	5b                   	pop    %ebx
f0132fe1:	5e                   	pop    %esi
f0132fe2:	5f                   	pop    %edi
f0132fe3:	5d                   	pop    %ebp
f0132fe4:	c3                   	ret    
f0132fe5:	8d 76 00             	lea    0x0(%esi),%esi
f0132fe8:	2b 04 24             	sub    (%esp),%eax
f0132feb:	19 fa                	sbb    %edi,%edx
f0132fed:	89 d1                	mov    %edx,%ecx
f0132fef:	89 c6                	mov    %eax,%esi
f0132ff1:	e9 71 ff ff ff       	jmp    f0132f67 <__umoddi3+0xb3>
f0132ff6:	66 90                	xchg   %ax,%ax
f0132ff8:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132ffc:	72 ea                	jb     f0132fe8 <__umoddi3+0x134>
f0132ffe:	89 d9                	mov    %ebx,%ecx
f0133000:	e9 62 ff ff ff       	jmp    f0132f67 <__umoddi3+0xb3>
